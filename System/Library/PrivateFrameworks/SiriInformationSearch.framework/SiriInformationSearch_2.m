uint64_t closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (**v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (**v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (**v103)(char *, uint64_t);
  void (**v104)(char *, uint64_t);
  void (**v105)(char *, void, uint64_t);
  void (**v106)(char *, uint64_t);
  void (*v107)(char *, unint64_t, uint64_t);
  void (**v108)(char *, void, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  long long v113;
  long long v114;
  uint64_t v115;
  uint64_t v116;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  v88 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Google_Protobuf_Any();
  v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  v85 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
  MEMORY[0x1F4188790](v5 - 8);
  v93 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v89 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92);
  v80 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v8 = *(void *)(v101 - 8);
  v9 = MEMORY[0x1F4188790](v101);
  v100 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v99 = (char *)&v78 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v12 - 8);
  v91 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v14 = *(void *)(v90 - 8);
  v15 = MEMORY[0x1F4188790](v90);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v84 = (char *)&v78 - v18;
  v109 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v19 = *(void *)(v109 - 8);
  v20 = MEMORY[0x1F4188790](v109);
  v111 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v110 = (char *)&v78 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1F4188790](v23 - 8);
  v96 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v26 = *(void *)(v25 - 8);
  v27 = MEMORY[0x1F4188790](v25);
  v29 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  v97 = (char *)&v78 - v30;
  v31 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
  v32 = *(void *)(v31 + 16);
  v95 = a1;
  v94 = v14;
  v98 = v26;
  if (v32)
  {
    v82 = v8;
    v83 = v17;
    v34 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
    v33 = v26 + 16;
    v107 = v34;
    v35 = (*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64);
    v81 = v31;
    v36 = v31 + v35;
    LODWORD(v106) = *MEMORY[0x1E4F892C8];
    v104 = (void (**)(char *, uint64_t))(v19 + 8);
    v105 = (void (**)(char *, void, uint64_t))(v19 + 104);
    v108 = (void (**)(char *, void, uint64_t))v33;
    v102 = *(void *)(v33 + 56);
    v103 = (void (**)(char *, uint64_t))(v33 - 8);
    v38 = v110;
    v37 = v111;
    v39 = v109;
    v40 = v104;
    while (1)
    {
      v112 = v32;
      v107(v29, v36, v25);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      (*v105)(v37, v106, v39);
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      v41 = v25;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v42 = v113;
      v43 = v116;
      v44 = *v40;
      (*v40)(v37, v39);
      v44(v38, v39);
      if (v42 == v43) {
        break;
      }
      (*v103)(v29, v41);
      v36 += v102;
      v32 = v112 - 1;
      v25 = v41;
      if (v112 == 1)
      {
        v45 = 1;
        a1 = v95;
        v14 = v94;
        v26 = v98;
        v17 = v83;
        v8 = v82;
        v46 = v96;
        goto LABEL_8;
      }
    }
    v26 = v98;
    v46 = v96;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v96, v29, v41);
    v45 = 0;
    a1 = v95;
    v14 = v94;
    v25 = v41;
    v17 = v83;
    v8 = v82;
  }
  else
  {
    v45 = 1;
    v46 = v96;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v46, v45, 1, v25);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v46, 1, v25) == 1)
  {
    v47 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?;
    v48 = (uint64_t)v46;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v97, v46, v25);
    v49 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
    v50 = *(void *)(v49 + 16);
    v79 = v25;
    if (v50)
    {
      v52 = *(char **)(v14 + 16);
      v51 = (char *)(v14 + 16);
      v110 = v52;
      v53 = (v51[64] + 32) & ~(unint64_t)v51[64];
      v104 = (void (**)(char *, uint64_t))v49;
      v54 = v49 + v53;
      LODWORD(v109) = *MEMORY[0x1E4F89708];
      v107 = (void (*)(char *, unint64_t, uint64_t))(v8 + 8);
      v108 = (void (**)(char *, void, uint64_t))(v8 + 104);
      v111 = v51;
      v105 = (void (**)(char *, void, uint64_t))*((void *)v51 + 7);
      v106 = (void (**)(char *, uint64_t))(v51 - 8);
      v55 = v90;
      v56 = v99;
      v57 = v100;
      v58 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        v112 = v50;
        ((void (*)(char *, unint64_t, uint64_t))v110)(v17, v54, v55);
        Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
        v59 = v17;
        v60 = v101;
        (*v108)(v57, v109, v101);
        _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel, MEMORY[0x1E4F89718]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v61 = v113;
        v62 = v116;
        v63 = *v58;
        (*v58)(v57, v60);
        v63(v56, v60);
        if (v61 == v62) {
          break;
        }
        (*v106)(v59, v55);
        v54 += (unint64_t)v105;
        v50 = v112 - 1;
        v17 = v59;
        if (v112 == 1)
        {
          v64 = 1;
          a1 = v95;
          v65 = v93;
          v66 = v92;
          v14 = v94;
          v26 = v98;
          v67 = v91;
          goto LABEL_17;
        }
      }
      v14 = v94;
      v67 = v91;
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v59, v55);
      v64 = 0;
      a1 = v95;
      v65 = v93;
      v66 = v92;
      v26 = v98;
    }
    else
    {
      v64 = 1;
      v65 = v93;
      v66 = v92;
      v55 = v90;
      v67 = v91;
    }
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v67, v64, 1, v55);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v67, 1, v55) != 1)
    {
      v68 = v84;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v84, v67, v55);
      v69 = v85;
      v70 = v55;
      v71 = v68;
      Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
      Google_Protobuf_Any.value.getter();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v87);
      v115 = 0;
      v113 = 0u;
      v114 = 0u;
      BinaryDecodingOptions.init()();
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo, MEMORY[0x1E4F889A8]);
      Message.init(serializedData:extensions:partial:options:)();
      v72 = v89;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v65, 0, 1, v66);
      v73 = v80;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v80, v65, v66);
      v74 = Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.getter();
      v76 = v75;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v66);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v71, v70);
      result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v97, v79);
      *a1 = v74;
      a1[1] = v76;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v97, v79);
    v47 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?;
    v48 = (uint64_t)v67;
  }
  result = outlined destroy of MediaUserStateCenter?(v48, v47);
  *a1 = 0;
  a1[1] = 0;
  return result;
}

uint64_t closure #2 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  v60 = *(void (***)(char *, uint64_t))(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  v52 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  v7 = (char *)&v50 - v6;
  MEMORY[0x1F4188790](v5);
  v9 = (char *)&v50 - v8;
  uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v10 = *(void *)(v55 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v55);
  v53 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v14 = (char *)&v50 - v13;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
  uint64_t v19 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v59 = *(void *)(v19 + 16);
  if (v59)
  {
    v51 = v7;
    v54 = a1;
    unint64_t v20 = 0;
    v22 = *(void (**)(char *, unint64_t, char *))(v10 + 16);
    uint64_t v21 = v10 + 16;
    unint64_t v23 = v19 + ((*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64));
    uint64_t v56 = *(void *)(v21 + 56);
    v57 = v22;
    ++v60;
    uint64_t v61 = v2;
    v58 = (void (**)(char *, char *))(v21 - 8);
    v24 = (char *)v55;
    while (1)
    {
      uint64_t v25 = v21;
      v57(v14, v23, v24);
      swift_bridgeObjectRetain();
      uint64_t v26 = v19;
      uint64_t v27 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v28 = MEMORY[0x1CB779310](v27);
      unint64_t v30 = v29;
      v31 = *v60;
      (*v60)(v9, v61);
      swift_bridgeObjectRelease();
      uint64_t v32 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0) {
        uint64_t v32 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (v32) {
        break;
      }
      (*v58)(v14, v24);
      swift_bridgeObjectRelease();
      ++v20;
      v23 += v56;
      uint64_t v19 = v26;
      uint64_t v21 = v25;
      if (v59 == v20) {
        goto LABEL_10;
      }
    }
    v36 = v51;
    uint64_t v37 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    MEMORY[0x1CB779310](v37);
    v31(v36, v61);
    v38 = *v58;
    (*v58)(v14, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v59 == v20)
    {
LABEL_10:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v34 = 0;
      uint64_t v35 = 0;
LABEL_16:
      a1 = v54;
      goto LABEL_17;
    }
    if (v20 >= *(void *)(v26 + 16))
    {
      __break(1u);
    }
    else
    {
      v14 = v53;
      v57(v53, v23, v24);
      v39 = v52;
      v9 = v24;
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v41 = MEMORY[0x1CB779310](v40);
      unint64_t v43 = v42;
      v44 = v39;
      uint64_t v45 = v61;
      v31(v44, v61);
      swift_bridgeObjectRelease();
      uint64_t v46 = HIBYTE(v43) & 0xF;
      if ((v43 & 0x2000000000000000) == 0) {
        uint64_t v46 = v41 & 0xFFFFFFFFFFFFLL;
      }
      if (v46)
      {
        v47 = v51;
        uint64_t v48 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
        uint64_t v34 = MEMORY[0x1CB779310](v48);
        uint64_t v35 = v49;
        v31(v47, v45);
        v38(v14, v9);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, char *))v38)(v14, v9);
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v34 = 0;
    uint64_t v35 = 0;
LABEL_17:
    *a1 = v34;
    a1[1] = v35;
  }
  return result;
}

void PegasusInstrumentationUtil.logPegasusKitPegasusRequest(requestId:pommesId:pommesCandidateId:startNetworkSearchFeedback:onDeviceLabels:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  os_log_t v40 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10C8]), sel_init);
  if (v16)
  {
    uint64_t v17 = v16;
    id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10D0]), sel_init);
    if (v36)
    {
      uint64_t v35 = v6;
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.bodyData.getter();
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      BinaryDecodingOptions.init()();
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest, MEMORY[0x1E4F88710]);
      Message.init(serializedData:extensions:partial:options:)();
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v15, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      v22 = (void *)specialized static PegasusInstrumentationUtil.requestArguments(from:onDeviceLabels:)((uint64_t)v10, a5, v37);
      outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
      objc_msgSend(v17, sel_setPegasusRequestArguments_, v22);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      uint64_t v23 = v35;
      unint64_t started = Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.rawRequestSize.getter();
      if (started >> 42
        || (objc_msgSend(v17, sel_setRawRequestSizeInKB_, started >> 10),
            unint64_t v25 = Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.compressedRequestSize.getter(),
            v25 >> 42))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        objc_msgSend(v17, sel_setCompressedRequestSizeInKB_, v25 >> 10);
        id v26 = v36;
        objc_msgSend(v36, sel_setStartedOrChanged_, v17);
        uint64_t v27 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v38, v39, (uint64_t)v40);
        if (v27)
        {
          uint64_t v28 = v27;
          objc_msgSend(v27, sel_setPegasusKitRequestContext_, v26);
          unint64_t v29 = self;
          swift_retain();
          id v30 = objc_msgSend(v29, sel_processInfo);
          char v31 = NSProcessInfo.isRunningUnitTests.getter();

          if (v31) {
            id v32 = (id)(*(uint64_t (**)(void))(*(void *)v23 + 96))();
          }
          else {
            id v32 = objc_msgSend(self, sel_sharedStream);
          }
          v33 = v32;
          swift_release();
          objc_msgSend(v33, sel_emitMessage_, v28);

          swift_unknownObjectRelease();
        }
        else
        {
        }
      }
      return;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  os_log_t v40 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl(&dword_1C8F83000, v40, v19, "Failed to initialize POMMESSchemaPOMMESPegasusKitPegasusRequest or POMMESSchemaPOMMESPegasusKitPegasusRequestContext", v20, 2u);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  os_log_t v21 = v40;
}

void PegasusInstrumentationUtil.logPegasusKitPegasusResponse(requestId:pommesId:pommesCandidateId:endNetworkSearchFeedback:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Feedback_V2_NetworkTimingData();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10D8]), sel_init);
  if (v11)
  {
    uint64_t v12 = v11;
    os_log_t v38 = a3;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10C0]), sel_init);
    if (v13)
    {
      uint64_t v14 = v13;
      id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10D0]), sel_init);
      if (v37)
      {
        uint64_t v36 = v3;
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        uint64_t v15 = Apple_Parsec_Feedback_V2_NetworkTimingData.requestStart.getter();
        id v16 = *(void (**)(char *, uint64_t))(v8 + 8);
        v16(v10, v7);
        objc_msgSend(v14, sel_setRequestStartOffsetInMS_, v15);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        uint64_t v17 = Apple_Parsec_Feedback_V2_NetworkTimingData.requestEnd.getter();
        v16(v10, v7);
        objc_msgSend(v14, sel_setRequestEndOffsetInMS_, v17);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        uint64_t v18 = Apple_Parsec_Feedback_V2_NetworkTimingData.responseStart.getter();
        v16(v10, v7);
        objc_msgSend(v14, sel_setResponseStartOffsetInMS_, v18);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        uint64_t v19 = Apple_Parsec_Feedback_V2_NetworkTimingData.responseEnd.getter();
        v16(v10, v7);
        objc_msgSend(v14, sel_setResponseEndOffsetInMS_, v19);
        objc_msgSend(v12, sel_setTimingData_, v14);
        unint64_t v20 = Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.decompressedResponseSize.getter();
        if (v20 >> 42
          || (objc_msgSend(v12, sel_setRawResponseSizeInKB_, v20 >> 10),
              unint64_t v21 = Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.rawResponseSize.getter(),
              uint64_t v22 = v36,
              v21 >> 42))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          objc_msgSend(v12, sel_setCompressedResponseSizeInKB_, v21 >> 10);
          id v23 = v37;
          objc_msgSend(v37, sel_setEnded_, v12);
          v24 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, (uint64_t)v38);
          if (v24)
          {
            unint64_t v25 = v24;
            objc_msgSend(v24, sel_setPegasusKitRequestContext_, v23);
            id v26 = self;
            swift_retain();
            id v27 = objc_msgSend(v26, sel_processInfo);
            char v28 = NSProcessInfo.isRunningUnitTests.getter();

            if (v28) {
              id v29 = (id)(*(uint64_t (**)(void))(*(void *)v22 + 96))();
            }
            else {
              id v29 = objc_msgSend(self, sel_sharedStream);
            }
            uint64_t v34 = v29;
            swift_release();
            objc_msgSend(v34, sel_emitMessage_, v25);

            swift_unknownObjectRelease();
          }
          else
          {
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v14 = v12;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  os_log_t v38 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v32 = 0;
    _os_log_impl(&dword_1C8F83000, v38, v31, "Failed to initialize POMMESSchemaPOMMESPegasusKitPegasusResponse and POMMESSchemaPOMMESPegasusKitNetworkTimingData and POMMESSchemaPOMMESPegasusKitPegasusRequestContext", v32, 2u);
    MEMORY[0x1CB77E470](v32, -1, -1);
  }
  os_log_t v33 = v38;
}

void *closure #1 in PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  v68 = (char *)&v63 - v8;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1078]), sel_init);
  if (v9)
  {
    id v10 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
    id v11 = v9;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v13 = objc_msgSend(v10, sel_initWithNSUUID_, isa);

    objc_msgSend(v11, sel_setPommesId_, v13);
  }
  id v67 = v9;
  uint64_t v14 = type metadata accessor for UUID();
  v65 = &v63;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = v15;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UUID?);
  v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v20 = v63((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v14);
  uint64_t v64 = v15;
  if (v20 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UUID?);
    uint64_t v22 = v67;
    uint64_t v21 = (uint64_t)v68;
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  if (AFDeviceSupportsSAE())
  {
    uint64_t v22 = v67;
    uint64_t v21 = (uint64_t)v68;
    if (v67)
    {
      id v23 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
      id v24 = v22;
      v25.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v26 = objc_msgSend(v23, sel_initWithNSUUID_, v25.super.isa);
      id v27 = &selRef_setSubRequestId_;
LABEL_10:

      objc_msgSend(v22, *v27, v26);
      uint64_t v21 = (uint64_t)v68;
      uint64_t v19 = v64;
    }
  }
  else
  {
    uint64_t v22 = v67;
    uint64_t v21 = (uint64_t)v68;
    if (v67)
    {
      id v28 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
      id v29 = v22;
      v25.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v26 = objc_msgSend(v28, sel_initWithNSUUID_, v25.super.isa);
      id v27 = &selRef_setRequestId_;
      goto LABEL_10;
    }
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
LABEL_12:
  outlined init with copy of MediaUserStateCenter?(v66, v21, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v30 = type metadata accessor for PommesCandidateId();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v21, 1, v30) == 1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    os_log_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v34)) {
      goto LABEL_18;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    uint64_t v36 = "PommesCandidateId is nil";
LABEL_17:
    _os_log_impl(&dword_1C8F83000, v33, v34, v36, v35, 2u);
    MEMORY[0x1CB77E470](v35, -1, -1);
LABEL_18:

    goto LABEL_40;
  }
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v7, &demangling cache variable for type metadata for PommesCandidateId?);
  int v37 = (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 88))(v7, v30);
  if (v37 == *MEMORY[0x1E4F9FE50]) {
    goto LABEL_28;
  }
  if (v37 != *MEMORY[0x1E4F9FE58])
  {
    if (v37 != *MEMORY[0x1E4F9FE48])
    {
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v7, v30);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
      os_log_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v33, v34)) {
        goto LABEL_18;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Unknown PommesCandidateId";
      goto LABEL_17;
    }
LABEL_28:
    (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v7, v30);
    uint64_t v49 = v7[1];
    if (v22)
    {
      uint64_t v50 = *v7;
      id v51 = v22;
      v52 = (void *)MEMORY[0x1CB77CA90](v50, v49);
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel_setResultCandidateId_, v52);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_40;
  }
  (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v7, v30);
  uint64_t v38 = *v7;
  uint64_t v39 = v7[1];
  uint64_t v40 = swift_bridgeObjectRelease();
  uint64_t v41 = MEMORY[0x1F4188790](v40);
  long long v42 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  UUID.init(uuidString:)();
  if (v63((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v14) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
    v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    v47 = v67;
    uint64_t v21 = (uint64_t)v68;
    if (v46)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_1C8F83000, v44, v45, "Unable to create UUID from trpId. Returning nil for POMMESSchemaPOMMESClientEvent.", v48, 2u);
      MEMORY[0x1CB77E470](v48, -1, -1);
    }
    else
    {
    }
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v53 = v64;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    v54 = v67;
    if (v67)
    {
      id v55 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
      id v56 = v54;
      Class v57 = UUID._bridgeToObjectiveC()().super.isa;
      id v58 = objc_msgSend(v55, sel_initWithNSUUID_, v57);

      objc_msgSend(v56, sel_setTrpId_, v58);
      id v59 = v56;
      v60 = (void *)MEMORY[0x1CB77CA90](v38, v39);
      swift_bridgeObjectRelease();
      objc_msgSend(v59, sel_setResultCandidateId_, v60);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v14);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = v67;
    uint64_t v21 = (uint64_t)v68;
  }
LABEL_40:
  outlined destroy of MediaUserStateCenter?(v21, &demangling cache variable for type metadata for PommesCandidateId?);
  return v22;
}

uint64_t PegasusInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t PegasusInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PegasusInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery() - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)(v8, a2, &v10);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v10)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t result = MEMORY[0x1E4FBC860];
  id v13 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        swift_bridgeObjectRetain_n();
        uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if (v10)
        {
          uint64_t v11 = *(id *)(*(void *)(a2 + 56) + 8 * v9);
          uint64_t v12 = swift_bridgeObjectRelease_n();
          MEMORY[0x1CB77CD90](v12);
          if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void *specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1070]), sel_init);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = closure #1 in PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a2, a1, a3);
    objc_msgSend(v7, sel_setEventMetadata_, v8);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C8F83000, v8, v10, "Failed to create POMMESSchemaPOMMESClientEvent", v11, 2u);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }
    uint64_t v7 = 0;
  }

  return v7;
}

id partial apply for closure #3 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)@<X0>(void *a1@<X8>)
{
  id result = specialized PegasusInstrumentationUtil.buildServerDrivenContext(_:)();
  *a1 = result;
  return result;
}

void partial apply for closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(void *a1@<X8>)
{
}

uint64_t sub_1C90D9DA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90D9DF4(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PegasusInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for PegasusInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PegasusInstrumentationUtil);
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logStartOfPegasusRequest(requestId:pommesId:pommesCandidateId:payloadSizeInKB:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.createPegasusRequestStartedEvent(payloadSizeInKB:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logFailedPegasusRequest(requestId:pommesId:pommesCandidateId:reason:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v6 + 152))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusSelfOpaquePayloads(requestId:payloads:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusKitPegasusRequest(requestId:pommesId:pommesCandidateId:startNetworkSearchFeedback:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusKitPegasusResponse(requestId:pommesId:pommesCandidateId:endNetworkSearchFeedback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  os_log_t v33 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v30 = (char *)v25 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest() - 8);
  uint64_t v16 = v10;
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v27 = v16;
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v31 = *(void *)(v15 + 72);
  v25[1] = a3;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v28 = v9;
  id v29 = a1;
  id v26 = v18;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v8, 1, v9) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    }
    else
    {
      int v20 = *v32;
      uint64_t v21 = v30;
      (*v32)(v30, v8, v9);
      v20(v33, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
      }
      unint64_t v23 = *(void *)(v19 + 16);
      unint64_t v22 = *(void *)(v19 + 24);
      if (v23 >= v22 >> 1) {
        unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v19);
      }
      *(void *)(v19 + 16) = v23 + 1;
      uint64_t v9 = v28;
      v20((char *)(v19+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23), v33, v28);
      a1 = v29;
      uint64_t v18 = v26;
    }
    v17 += v31;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3, MEMORY[0x1E4F886E8]);
}

uint64_t specialized Sequence.compactMap<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v9 = *(void *)(a4(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v12 = a1(&v13, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v13)
      {
        MEMORY[0x1CB77CD90](v12);
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

uint64_t *ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v19)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), unsigned char *, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(unsigned char *, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int v26;
  unsigned char v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;

  uint64_t v5 = v4;
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  uint64_t v12 = v11;
  if (one-time initialization token for shared != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v40 = &v34;
  uint64_t v13 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v10);
  uint64_t v28 = a3;
  id v29 = a4;
  uint64_t v30 = v5;
  uint64_t v31 = a1;
  uint64_t v32 = v12;
  os_log_t v33 = a2;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v36 = a4;
  int v37 = v5;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  unint64_t v19 = *(void (**)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), unsigned char *, uint64_t))(*(void *)v13 + 200);
  uint64_t v35 = a1;
  int v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v19(&v42, 0xD00000000000002BLL, 0x80000001C91A14D0, 0, &v27[-v18], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 61, "defaultExperiences(from:with:)", 30, 2, partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:), v27, v20);
  uint64_t v21 = *(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8);
  unint64_t v22 = v21(&v27[-v18], v15);
  uint64_t v34 = (uint64_t)&v34;
  uint64_t v40 = v42;
  unint64_t v23 = static PerformanceUtil.shared;
  id v24 = MEMORY[0x1F4188790](v22);
  uint64_t v28 = v38;
  id v29 = v36;
  uint64_t v30 = v35;
  uint64_t v31 = v37;
  uint64_t v32 = v12;
  os_log_t v33 = v39;
  MEMORY[0x1F4188790](v24);
  Date.init()();
  LOBYTE(v26) = 2;
  (*(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), unsigned char *, uint64_t))(*(void *)v23 + 200))(&v41, 0xD00000000000002ELL, 0x80000001C91A1550, 0, &v27[-v18], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 68, "defaultExperiences(from:with:)", 30, v26, partial apply for closure #2 in ExperiencesResolver.defaultExperiences(from:with:), v27, v20);
  v21(&v27[-v18], v15);
  long long v42 = v40;
  specialized Array.append<A>(contentsOf:)(v41);
  return v42;
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a4, a3, (void (**)(Class, uint64_t))partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:with:), (void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:));
}

{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a4, a3, (void (**)(Class, uint64_t))partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:with:), (void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:));
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(double *a1, uint64_t a2, double a3, uint64_t a4, void (**a5)(Class, uint64_t), uint64_t a6, void *(*a7)(uint64_t *__return_ptr, uint64_t), uint64_t a8)
{
  void *(*v404)(uint64_t *__return_ptr, uint64_t);
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  uint64_t v425;
  double *v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  char *v430;
  unsigned int v431;
  int v432;
  char *v433;
  uint64_t v434;
  char *v435;
  void (**v436)(uint64_t, void, uint64_t);
  void (**v437)(char *, uint64_t, uint64_t);
  unsigned int (**v438)(uint64_t, uint64_t, uint64_t);
  void (**v439)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v440)(char *, uint64_t);
  char **v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  void (**v446)(Class, uint64_t);
  Class v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  uint64_t v397 = a8;
  v404 = a7;
  v418 = a6;
  v446 = a5;
  uint64_t v9 = v8;
  double v399 = *(double *)&a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1F4188790](v12 - 8);
  v380 = (char *)&v350 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v372 = (uint64_t)&v350 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v369 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  uint64_t v368 = *(void *)(v369 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v369);
  v363 = (char *)&v350 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v367 = (char *)&v350 - v18;
  uint64_t v356 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  uint64_t v355 = *(void *)(v356 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v356);
  v351 = (char *)&v350 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  v354 = (char *)&v350 - v21;
  uint64_t v361 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  uint64_t v360 = *(void *)(v361 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v361);
  v353 = (char *)&v350 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  v359 = (char *)&v350 - v24;
  uint64_t v366 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v365 = *(void *)(v366 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v366);
  v358 = (char *)&v350 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  v364 = (char *)&v350 - v27;
  uint64_t v381 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v376 = *(void *)(v381 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v381);
  v371 = (char *)&v350 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  v375 = (char *)&v350 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  v377 = (char *)&v350 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  v387 = (char *)&v350 - v34;
  uint64_t v388 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  uint64_t v389 = *(void *)(v388 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v388);
  v374 = (char *)&v350 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  v382 = (char *)&v350 - v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  uint64_t v39 = MEMORY[0x1F4188790](v38 - 8);
  v379 = (char *)&v350 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v378 = (char *)&v350 - v42;
  MEMORY[0x1F4188790](v41);
  v386 = (char *)&v350 - v43;
  uint64_t v400 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v398 = *(void *)(v400 - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v400);
  v373 = (char *)&v350 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  v362 = (char *)&v350 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  v350 = (char *)&v350 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  v352 = (char *)&v350 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  v357 = (char *)&v350 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v370 = (char *)&v350 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  v383 = (char *)&v350 - v57;
  MEMORY[0x1F4188790](v56);
  v392 = (char *)&v350 - v58;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1F4188790](v59 - 8);
  v384 = (char *)&v350 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v61 - 8);
  v391 = (char *)&v350 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  uint64_t v64 = MEMORY[0x1F4188790](v63 - 8);
  v395 = (char *)&v350 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v64);
  v385 = (char *)&v350 - v66;
  v405 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  v408 = *(void *)(v405 - 8);
  MEMORY[0x1F4188790](v405);
  v417 = (char *)&v350 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v407 = *(void *)(v406 - 8);
  uint64_t v68 = MEMORY[0x1F4188790](v406);
  v401 = (char *)&v350 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  v390 = (char *)&v350 - v71;
  MEMORY[0x1F4188790](v70);
  v411 = (char *)&v350 - v72;
  v410 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v409 = *(void *)(v410 - 8);
  MEMORY[0x1F4188790](v410);
  v419 = (char *)&v350 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1F4188790](v74 - 8);
  v435 = (char *)&v350 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for PommesRenderOptions.PromptType();
  v434 = *(void *)(v76 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v76);
  v444 = (char *)&v350 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v77);
  v433 = (char *)&v350 - v79;
  uint64_t v80 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v445 = *(void *)(v80 - 8);
  uint64_t v81 = MEMORY[0x1F4188790](v80);
  v447 = (Class)((char *)&v350 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v81);
  v448 = (char *)&v350 - v83;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v84 - 8);
  v416 = (char *)&v350 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v425 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v421 = *(void *)(v425 - 8);
  uint64_t v86 = MEMORY[0x1F4188790](v425);
  v412 = (char *)&v350 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v86);
  v413 = (char *)&v350 - v88;
  uint64_t v89 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  v442 = *(void *)(v89 - 8);
  v443 = v89;
  MEMORY[0x1F4188790](v89);
  v91 = (char *)&v350 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v424 = *(void *)(v92 - 8);
  uint64_t v93 = MEMORY[0x1F4188790](v92);
  v394 = (char *)&v350 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  v393 = (char *)&v350 - v96;
  MEMORY[0x1F4188790](v95);
  v98 = (char *)&v350 - v97;
  v414 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  v415 = *(void *)(v414 - 8);
  MEMORY[0x1F4188790](v414);
  v100 = (char *)&v350 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v426 = a1;
  uint64_t v101 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1) {
    uint64_t v101 = swift_once();
  }
  v441 = &v350;
  v102 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v101);
  v396 = v9;
  v348 = v9;
  v349 = v100;
  v423 = v100;
  uint64_t v103 = type metadata accessor for Date();
  uint64_t v104 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  v106 = (char *)&v350 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v107 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (**)(void, void)))(*(void *)v102 + 200);
  v422 = v92;
  v348 = &v346;
  v349 = (char *)v92;
  LOBYTE(v346) = 2;
  v420 = v98;
  v107(0xD00000000000001ELL, 0x80000001C91A1580, 0, v106, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 129, "extractExperiences(from:score:with:with:)", 41, LODWORD(v346), (void (**)(void, void))v446);
  uint64_t v403 = 0;
  (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
  uint64_t v108 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  uint64_t v109 = MEMORY[0x1CB778940](v108);
  (*(void (**)(char *, uint64_t))(v442 + 8))(v91, v443);
  uint64_t v110 = *(void *)(v109 + 16);
  uint64_t v111 = MEMORY[0x1E4FBC860];
  if (v110)
  {
    uint64_t v112 = *(void *)(v445 + 16);
    unint64_t v113 = v109 + ((*(unsigned __int8 *)(v445 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v445 + 80));
    v442 = *(void *)(v445 + 72);
    v443 = v112;
    v441 = (char **)(v445 + 88);
    LODWORD(v440) = *MEMORY[0x1E4F89368];
    v432 = *MEMORY[0x1E4F89358];
    v429 = *MEMORY[0x1E4F89360];
    v439 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v434 + 56);
    v445 += 16;
    v446 = (void (**)(Class, uint64_t))(v445 - 8);
    v427 = *MEMORY[0x1E4F9FF10];
    v436 = (void (**)(uint64_t, void, uint64_t))(v434 + 104);
    v428 = *MEMORY[0x1E4F9FF08];
    v431 = *MEMORY[0x1E4F9FF18];
    v437 = (void (**)(char *, uint64_t, uint64_t))(v434 + 32);
    v438 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v434 + 48);
    uint64_t v402 = v109;
    swift_bridgeObjectRetain();
    unint64_t v114 = MEMORY[0x1E4FBC860];
    uint64_t v115 = (uint64_t)v435;
    Class v116 = v447;
    while (1)
    {
      v117 = v448;
      uint64_t v118 = v80;
      uint64_t v119 = v80;
      v120 = (void (*)(Class, char *, uint64_t))v443;
      ((void (*)(char *, unint64_t, uint64_t))v443)(v448, v113, v118);
      v120(v116, v117, v119);
      uint64_t v80 = v119;
      int v121 = ((uint64_t (*)(Class, uint64_t))*v441)(v116, v119);
      if (v121 == v440)
      {
        (*v436)(v115, v431, v76);
      }
      else if (v121 == v432)
      {
        (*v436)(v115, v428, v76);
      }
      else
      {
        if (v121 != v429)
        {
          v430 = (char *)v114;
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v128 = type metadata accessor for Logger();
          __swift_project_value_buffer(v128, (uint64_t)static Logger.pommes);
          v129 = Logger.logObject.getter();
          os_log_type_t v130 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v129, v130))
          {
            v131 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v131 = 0;
            _os_log_impl(&dword_1C8F83000, v129, v130, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v131, 2u);
            v132 = v131;
            uint64_t v115 = (uint64_t)v435;
            MEMORY[0x1CB77E470](v132, -1, -1);
          }

          (*v439)(v115, 1, 1, v76);
          (*v446)(v447, v119);
          unint64_t v114 = (unint64_t)v430;
          goto LABEL_14;
        }
        (*v436)(v115, v427, v76);
      }
      (*v439)(v115, 0, 1, v76);
LABEL_14:
      (*v446)((Class)v448, v119);
      if ((*v438)(v115, 1, v76) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v115, (uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        uint64_t v122 = v115;
        v123 = *v437;
        v124 = v433;
        (*v437)(v433, v122, v76);
        v123(v444, (uint64_t)v124, v76);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v114 + 16) + 1, 1, v114);
        }
        unint64_t v126 = *(void *)(v114 + 16);
        unint64_t v125 = *(void *)(v114 + 24);
        uint64_t v127 = v114;
        if (v126 >= v125 >> 1) {
          uint64_t v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v125 > 1, v126 + 1, 1, v114);
        }
        *(void *)(v127 + 16) = v126 + 1;
        unint64_t v114 = v127;
        v123((char *)(v127+ ((*(unsigned __int8 *)(v434 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v434 + 80))+ *(void *)(v434 + 72) * v126), (uint64_t)v444, v76);
        uint64_t v115 = (uint64_t)v435;
      }
      v113 += v442;
      if (!--v110)
      {
        uint64_t v133 = swift_bridgeObjectRelease_n();
        v134 = (double *)v114;
        uint64_t v111 = MEMORY[0x1E4FBC860];
        goto LABEL_27;
      }
    }
  }
  uint64_t v133 = swift_bridgeObjectRelease();
  v134 = (double *)MEMORY[0x1E4FBC860];
LABEL_27:
  uint64_t v135 = (uint64_t)v416;
  MEMORY[0x1F4188790](v133);
  v348 = v134;
  v447 = (Class)type metadata accessor for PommesRenderOptions();
  id v136 = objc_allocWithZone(v447);
  v448 = (char *)PommesRenderOptions.init(_:)();
  v451 = v111;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  uint64_t v137 = v421;
  uint64_t v138 = v425;
  int v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v421 + 48))(v135, 1, v425);
  uint64_t v140 = v424;
  uint64_t v141 = v422;
  v142 = v423;
  v143 = v420;
  v144 = v419;
  v145 = v417;
  if (v139 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v135, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_63:

    (*(void (**)(char *, uint64_t))(v140 + 8))(v143, v141);
    (*(void (**)(char *, uint64_t))(v415 + 8))(v142, v414);
    return MEMORY[0x1E4FBC860];
  }
  v430 = (char *)v134;
  v146 = v413;
  (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v413, v135, v138);
  v147 = v412;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v412, v146, v138);
  int v148 = (*(uint64_t (**)(char *, uint64_t))(v137 + 88))(v147, v138);
  if (v148 != *MEMORY[0x1E4F88720])
  {
    int v189 = v148;
    int v190 = *MEMORY[0x1E4F88718];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v189 == v190)
    {
      v191 = v412;
      (*(void (**)(char *, uint64_t))(v137 + 96))(v412, v425);
      (*(void (**)(char *, char *, uint64_t))(v407 + 32))(v411, v191, v406);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v192 = type metadata accessor for Logger();
      v447 = (Class)__swift_project_value_buffer(v192, (uint64_t)static Logger.pommes);
      v193 = Logger.logObject.getter();
      os_log_type_t v194 = static os_log_type_t.debug.getter();
      BOOL v195 = os_log_type_enabled(v193, v194);
      v196 = v401;
      uint64_t v197 = (uint64_t)v387;
      if (v195)
      {
        v198 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v198 = 0;
        _os_log_impl(&dword_1C8F83000, v193, v194, "Adding a client driven experience", v198, 2u);
        v199 = v198;
        uint64_t v137 = v421;
        MEMORY[0x1CB77E470](v199, -1, -1);
      }

      uint64_t v200 = MEMORY[0x1CB779170]();
      uint64_t v201 = *(void *)(v200 + 16);
      uint64_t v202 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
      uint64_t v203 = *(void *)(v202 - 8);
      if (v201)
      {
        uint64_t v204 = (uint64_t)v386;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v202 - 8) + 16))(v386, v200+ ((*(unsigned __int8 *)(*(void *)(v202 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v202 - 8) + 80)), v202);
        uint64_t v205 = 0;
      }
      else
      {
        uint64_t v205 = 1;
        uint64_t v204 = (uint64_t)v386;
      }
      v445 = *(void *)(v203 + 56);
      v446 = (void (**)(Class, uint64_t))(v203 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v445)(v204, v205, 1, v202);
      swift_bridgeObjectRelease();
      uint64_t v215 = v203 + 48;
      v444 = *(char **)(v203 + 48);
      int v216 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v444)(v204, 1, v202);
      v443 = v203;
      if (v216 == 1)
      {
        v442 = v203 + 48;
        v217 = v196;
        uint64_t v218 = v140;
        outlined destroy of MediaUserStateCenter?(v204, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        uint64_t v219 = v407;
        goto LABEL_73;
      }
      v220 = v383;
      Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
      (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v204, v202);
      uint64_t v221 = v398;
      v222 = v392;
      v223 = v220;
      uint64_t v224 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 32))(v392, v223, v400);
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      uint64_t v225 = v389;
      uint64_t v226 = v388;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v389 + 48))(v197, 1, v388) == 1)
      {
        v442 = v215;
        uint64_t v218 = v140;
        (*(void (**)(char *, uint64_t))(v221 + 8))(v222, v224);
        outlined destroy of MediaUserStateCenter?(v197, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
        uint64_t v219 = v407;
        v217 = v401;
LABEL_73:
        v227 = v390;
        uint64_t v228 = v406;
        v441 = *(char ***)(v219 + 16);
        ((void (*)(char *, char *, uint64_t))v441)(v390, v411, v406);
        v229 = Logger.logObject.getter();
        int v230 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v229, (os_log_type_t)v230))
        {
          LODWORD(v439) = v230;
          v231 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v231 = 67109120;
          uint64_t v232 = MEMORY[0x1CB779170]();
          if (*(void *)(v232 + 16))
          {
            uint64_t v233 = v443;
            uint64_t v234 = (uint64_t)v378;
            (*(void (**)(char *, unint64_t, uint64_t))(v443 + 16))(v378, v232 + ((*(unsigned __int8 *)(v443 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v443 + 80)), v202);
            uint64_t v235 = 0;
            uint64_t v236 = (uint64_t)v380;
          }
          else
          {
            uint64_t v235 = 1;
            uint64_t v236 = (uint64_t)v380;
            uint64_t v234 = (uint64_t)v378;
            uint64_t v233 = v443;
          }
          v237 = v217;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v445)(v234, v235, 1, v202);
          swift_bridgeObjectRelease();
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v444)(v234, 1, v202) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v234, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
            int v253 = 0;
            uint64_t v254 = 1;
          }
          else
          {
            Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
            (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v234, v202);
            uint64_t v254 = 0;
            int v253 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56))(v236, v254, 1, v400);
          outlined destroy of MediaUserStateCenter?(v236, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
          uint64_t v228 = v406;
          v440 = *(void (**)(char *, uint64_t))(v407 + 8);
          v440(v390, v406);
          LODWORD(v450) = v253;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C8F83000, v229, (os_log_type_t)v439, "Has clientComponent? %{BOOL}d", v231, 8u);
          MEMORY[0x1CB77E470](v231, -1, -1);
          uint64_t v218 = v424;
        }
        else
        {
          v440 = *(void (**)(char *, uint64_t))(v219 + 8);
          v440(v227, v228);
          v237 = v217;
        }

        ((void (*)(char *, char *, uint64_t))v441)(v237, v411, v228);
        v255 = Logger.logObject.getter();
        os_log_type_t v256 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v255, v256))
        {
          v263 = v440;
          v440(v237, v228);
          uint64_t v264 = v422;
          uint64_t v265 = v228;
          uint64_t v259 = v218;
          v266 = v263;
LABEL_95:
          v271 = v420;

          v266(v411, v265);
          (*(void (**)(char *, uint64_t))(v421 + 8))(v413, v425);
          (*(void (**)(char *, uint64_t))(v259 + 8))(v271, v264);
          (*(void (**)(char *, uint64_t))(v415 + 8))(v423, v414);
          return MEMORY[0x1E4FBC860];
        }
        v257 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v257 = 67109120;
        uint64_t v258 = MEMORY[0x1CB779170]();
        uint64_t v259 = v218;
        if (*(void *)(v258 + 16))
        {
          uint64_t v260 = v443;
          uint64_t v261 = (uint64_t)v379;
          (*(void (**)(char *, unint64_t, uint64_t))(v443 + 16))(v379, v258 + ((*(unsigned __int8 *)(v443 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v443 + 80)), v202);
          uint64_t v262 = 0;
        }
        else
        {
          uint64_t v262 = 1;
          uint64_t v261 = (uint64_t)v379;
          uint64_t v260 = v443;
        }
        v266 = v440;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v445)(v261, v262, 1, v202);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v444)(v261, 1, v202) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v261, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          uint64_t v267 = (uint64_t)v377;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v389 + 56))(v377, 1, 1, v388);
          uint64_t v264 = v422;
          uint64_t v265 = v406;
        }
        else
        {
          v268 = v373;
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v261, v202);
          uint64_t v267 = (uint64_t)v377;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
          (*(void (**)(char *, uint64_t))(v398 + 8))(v268, v400);
          int v269 = 1;
          int v270 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v389 + 48))(v267, 1, v388);
          uint64_t v264 = v422;
          uint64_t v265 = v406;
          if (v270 != 1)
          {
LABEL_94:
            outlined destroy of MediaUserStateCenter?(v267, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
            v266(v401, v265);
            LODWORD(v450) = v269;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C8F83000, v255, v256, "Has domainComponent? %{BOOL}d", v257, 8u);
            MEMORY[0x1CB77E470](v257, -1, -1);
            goto LABEL_95;
          }
        }
        int v269 = 0;
        goto LABEL_94;
      }
      v238 = v382;
      (*(void (**)(char *, uint64_t, uint64_t))(v225 + 32))(v382, v197, v226);
      v239 = v374;
      (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v374, v238, v226);
      int v240 = (*(uint64_t (**)(char *, uint64_t))(v225 + 88))(v239, v226);
      if (v240 == *MEMORY[0x1E4F895B0])
      {
        (*(void (**)(char *, uint64_t))(v225 + 96))(v239, v226);
        (*(void (**)(char *, char *, uint64_t))(v376 + 32))(v375, v239, v381);
        uint64_t v241 = v398;
        v242 = v370;
        uint64_t v243 = v400;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v370, v392, v400);
        v244 = Logger.logObject.getter();
        os_log_type_t v245 = static os_log_type_t.debug.getter();
        BOOL v246 = os_log_type_enabled(v244, v245);
        uint64_t v247 = v422;
        if (v246)
        {
          v248 = (uint8_t *)swift_slowAlloc();
          uint64_t v249 = swift_slowAlloc();
          v450 = v249;
          *(_DWORD *)v248 = 136315138;
          uint64_t v250 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v449 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v250, v251, &v450);
          uint64_t v247 = v422;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v252 = *(objc_class **)(v241 + 8);
          v446 = (void (**)(Class, uint64_t))((v241 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v252;
          ((void (*)(char *, uint64_t))v252)(v242, v400);
          _os_log_impl(&dword_1C8F83000, v244, v245, "Adding AudioExperience with identifier %s to PommesResponse", v248, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v249, -1, -1);
          MEMORY[0x1CB77E470](v248, -1, -1);
        }
        else
        {
          v284 = *(objc_class **)(v241 + 8);
          v446 = (void (**)(Class, uint64_t))((v241 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v284;
          ((void (*)(char *, uint64_t))v284)(v242, v243);
        }

        uint64_t v285 = *(void *)&v399;
        type metadata accessor for AudioExperience();
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v286 = v376;
        v287 = v375;
        (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v371, v375, v381);
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v393, v420, v247);
        outlined init with copy of ClientExperienceSignals?(v285, v372);
        v288 = v448;
        id v289 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v290 = swift_allocObject();
        *(_OWORD *)(v290 + 16) = xmmword_1C9195B30;
        *(void *)(v290 + 32) = v289;
        v450 = v290;
        specialized Array._endMutation()();
        uint64_t v213 = v450;

        (*(void (**)(char *, uint64_t))(v286 + 8))(v287, v381);
        goto LABEL_117;
      }
      uint64_t v272 = v425;
      uint64_t v273 = v400;
      v274 = v392;
      if (v240 == *MEMORY[0x1E4F895B8])
      {
        (*(void (**)(char *, uint64_t))(v225 + 96))(v239, v226);
        (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v367, v239, v369);
        uint64_t v275 = v398;
        v276 = v362;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v362, v274, v273);
        v277 = Logger.logObject.getter();
        os_log_type_t v278 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v277, v278))
        {
          v279 = (uint8_t *)swift_slowAlloc();
          v445 = swift_slowAlloc();
          v450 = v445;
          *(_DWORD *)v279 = 136315138;
          uint64_t v280 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v449 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v280, v281, &v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v282 = *(objc_class **)(v275 + 8);
          v446 = (void (**)(Class, uint64_t))((v275 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v282;
          ((void (*)(char *, uint64_t))v282)(v276, v273);
          _os_log_impl(&dword_1C8F83000, v277, v278, "Adding VideoExperience with identifier %s to PommesResponse", v279, 0xCu);
          uint64_t v283 = v445;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v283, -1, -1);
          MEMORY[0x1CB77E470](v279, -1, -1);
        }
        else
        {
          v300 = *(objc_class **)(v275 + 8);
          v446 = (void (**)(Class, uint64_t))((v275 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v300;
          ((void (*)(char *, uint64_t))v300)(v276, v273);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v301 = v368;
        v302 = v367;
        uint64_t v303 = v369;
        (*(void (**)(char *, char *, uint64_t))(v368 + 16))(v363, v367, v369);
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v393, v420, v422);
        objc_allocWithZone((Class)type metadata accessor for VideoExperience());
        v304 = v448;
        v305 = (void *)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
LABEL_116:
        id v326 = v305;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v327 = swift_allocObject();
        *(_OWORD *)(v327 + 16) = xmmword_1C9195B30;
        *(void *)(v327 + 32) = v326;
        v450 = v327;
        specialized Array._endMutation()();
        uint64_t v213 = v450;

        (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v303);
LABEL_117:
        (*(void (**)(char *, uint64_t))(v389 + 8))(v382, v388);
        ((void (*)(char *, uint64_t))v447)(v392, v400);
        (*(void (**)(char *, uint64_t))(v407 + 8))(v411, v406);
        (*(void (**)(char *, uint64_t))(v421 + 8))(v413, v425);
        (*(void (**)(char *, uint64_t))(v140 + 8))(v420, v422);
LABEL_118:
        (*(void (**)(char *, uint64_t))(v415 + 8))(v423, v414);
        return v213;
      }
      if (v240 == *MEMORY[0x1E4F895A0])
      {
        (*(void (**)(char *, uint64_t))(v225 + 96))(v239, v226);
        (*(void (**)(char *, char *, uint64_t))(v365 + 32))(v364, v239, v366);
        uint64_t v291 = v398;
        v292 = v357;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v357, v274, v273);
        v293 = Logger.logObject.getter();
        os_log_type_t v294 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v293, v294))
        {
          v295 = (uint8_t *)swift_slowAlloc();
          v445 = swift_slowAlloc();
          v450 = v445;
          *(_DWORD *)v295 = 136315138;
          uint64_t v296 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v449 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v296, v297, &v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v298 = *(objc_class **)(v291 + 8);
          v446 = (void (**)(Class, uint64_t))((v291 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v298;
          ((void (*)(char *, uint64_t))v298)(v292, v273);
          _os_log_impl(&dword_1C8F83000, v293, v294, "Adding GeoExperience with identifier %s to PommesResponse", v295, 0xCu);
          uint64_t v299 = v445;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v299, -1, -1);
          MEMORY[0x1CB77E470](v295, -1, -1);
        }
        else
        {
          v315 = *(objc_class **)(v291 + 8);
          v446 = (void (**)(Class, uint64_t))((v291 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v315;
          ((void (*)(char *, uint64_t))v315)(v292, v273);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v301 = v365;
        v302 = v364;
        uint64_t v303 = v366;
        (*(void (**)(char *, char *, uint64_t))(v365 + 16))(v358, v364, v366);
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v393, v420, v422);
        objc_allocWithZone((Class)type metadata accessor for GeoExperience());
        v304 = v448;
        v305 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        goto LABEL_116;
      }
      if (v240 == *MEMORY[0x1E4F895A8])
      {
        (*(void (**)(char *, uint64_t))(v225 + 96))(v239, v226);
        (*(void (**)(char *, char *, uint64_t))(v360 + 32))(v359, v239, v361);
        uint64_t v306 = v398;
        v307 = v352;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v352, v274, v273);
        v308 = Logger.logObject.getter();
        os_log_type_t v309 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v308, v309))
        {
          v310 = (uint8_t *)swift_slowAlloc();
          v445 = swift_slowAlloc();
          v450 = v445;
          *(_DWORD *)v310 = 136315138;
          uint64_t v311 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v449 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v311, v312, &v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v313 = *(objc_class **)(v306 + 8);
          v446 = (void (**)(Class, uint64_t))((v306 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v313;
          ((void (*)(char *, uint64_t))v313)(v307, v273);
          _os_log_impl(&dword_1C8F83000, v308, v309, "Adding AppsExperience with identfier %s to PommesResponse", v310, 0xCu);
          uint64_t v314 = v445;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v314, -1, -1);
          MEMORY[0x1CB77E470](v310, -1, -1);
        }
        else
        {
          v325 = *(objc_class **)(v306 + 8);
          v446 = (void (**)(Class, uint64_t))((v306 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v325;
          ((void (*)(char *, uint64_t))v325)(v307, v273);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v301 = v360;
        v302 = v359;
        uint64_t v303 = v361;
        (*(void (**)(char *, char *, uint64_t))(v360 + 16))(v353, v359, v361);
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v393, v420, v422);
        objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
        v304 = v448;
        v305 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        goto LABEL_116;
      }
      if (v240 == *MEMORY[0x1E4F89598])
      {
        (*(void (**)(char *, uint64_t))(v225 + 96))(v239, v226);
        (*(void (**)(char *, char *, uint64_t))(v355 + 32))(v354, v239, v356);
        uint64_t v316 = v398;
        v317 = v350;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v350, v274, v273);
        v318 = Logger.logObject.getter();
        os_log_type_t v319 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v318, v319))
        {
          v320 = (uint8_t *)swift_slowAlloc();
          v445 = swift_slowAlloc();
          v450 = v445;
          *(_DWORD *)v320 = 136315138;
          uint64_t v321 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v449 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v321, v322, &v450);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v323 = *(objc_class **)(v316 + 8);
          v446 = (void (**)(Class, uint64_t))((v316 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v323;
          ((void (*)(char *, uint64_t))v323)(v317, v273);
          _os_log_impl(&dword_1C8F83000, v318, v319, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v320, 0xCu);
          uint64_t v324 = v445;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v324, -1, -1);
          MEMORY[0x1CB77E470](v320, -1, -1);
        }
        else
        {
          v335 = *(objc_class **)(v316 + 8);
          v446 = (void (**)(Class, uint64_t))((v316 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          v447 = v335;
          ((void (*)(char *, uint64_t))v335)(v317, v273);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v336 = v355;
        v337 = v354;
        uint64_t v338 = v356;
        (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v351, v354, v356);
        v339 = v420;
        uint64_t v340 = v422;
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v393, v420, v422);
        id v341 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
        id v342 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v343 = swift_allocObject();
        *(_OWORD *)(v343 + 16) = xmmword_1C9195B30;
        *(void *)(v343 + 32) = v342;
        v450 = v343;
        specialized Array._endMutation()();
        uint64_t v213 = v450;

        (*(void (**)(char *, uint64_t))(v336 + 8))(v337, v338);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v382, v388);
        ((void (*)(char *, uint64_t))v447)(v392, v400);
        (*(void (**)(char *, uint64_t))(v407 + 8))(v411, v406);
        (*(void (**)(char *, uint64_t))(v421 + 8))(v413, v425);
        (*(void (**)(char *, uint64_t))(v140 + 8))(v339, v340);
        goto LABEL_118;
      }
      v328 = v392;
      v329 = Logger.logObject.getter();
      os_log_type_t v330 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v329, v330))
      {
        v331 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v331 = 0;
        _os_log_impl(&dword_1C8F83000, v329, v330, "Unexpected DomainComponent encountered when building Client Driven experience", v331, 2u);
        v332 = v331;
        uint64_t v272 = v425;
        MEMORY[0x1CB77E470](v332, -1, -1);
      }

      v333 = *(void (**)(char *, uint64_t))(v389 + 8);
      uint64_t v334 = v388;
      v333(v382, v388);
      (*(void (**)(char *, uint64_t))(v398 + 8))(v328, v273);
      (*(void (**)(char *, uint64_t))(v407 + 8))(v411, v406);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v413, v272);
      v333(v239, v334);
      uint64_t v141 = v422;
      v143 = v420;
    }
    else
    {
      uint64_t v206 = v425;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v207 = type metadata accessor for Logger();
      __swift_project_value_buffer(v207, (uint64_t)static Logger.pommes);
      v208 = Logger.logObject.getter();
      os_log_type_t v209 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v208, v209))
      {
        v210 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v210 = 0;
        _os_log_impl(&dword_1C8F83000, v208, v209, "unexpected experience component", v210, 2u);
        v211 = v210;
        uint64_t v206 = v425;
        MEMORY[0x1CB77E470](v211, -1, -1);
      }

      v212 = *(void (**)(char *, uint64_t))(v137 + 8);
      v212(v413, v206);
      v212(v412, v206);
    }
    v142 = v423;
    goto LABEL_63;
  }
  (*(void (**)(char *, uint64_t))(v137 + 96))(v147, v138);
  (*(void (**)(char *, char *, uint64_t))(v409 + 32))(v144, v147, v410);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v149 = type metadata accessor for Logger();
  __swift_project_value_buffer(v149, (uint64_t)static Logger.pommes);
  v150 = Logger.logObject.getter();
  os_log_type_t v151 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v150, v151))
  {
    v152 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v152 = 0;
    _os_log_impl(&dword_1C8F83000, v150, v151, "Adding a server driven experience", v152, 2u);
    MEMORY[0x1CB77E470](v152, -1, -1);
  }

  char v153 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter();
  uint64_t v154 = v405;
  uint64_t v155 = v408;
  if (v153)
  {
    uint64_t v156 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v446 = (void (**)(Class, uint64_t))MEMORY[0x1CB778770](v156);
    v157 = *(void (**)(char *, uint64_t))(v155 + 8);
    v157(v145, v154);
    (*(void (**)(char *, char *, uint64_t))(v424 + 16))(v393, v143, v141);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    id v158 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v159 = v448;
    v160 = v157;
    v161 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    char v162 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    v408 = v155 + 8;
    v157(v145, v154);
    uint64_t v141 = v422;
    if (v162)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
      id v163 = v161;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      v160(v145, v405);
      dispatch thunk of Experience.associatedEntities.setter();

      v144 = v419;
    }
    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      v164 = v391;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v165 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 0, 1, v165);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    id v166 = v161;
    MEMORY[0x1CB77CD90]();
    v143 = v420;
    if (*(void *)((v451 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v451 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v167 = MEMORY[0x1CB779290]();
  MEMORY[0x1F4188790](v167);
  double v346 = a3;
  v168 = v143;
  v347 = (double *)v143;
  v348 = v426;
  id v169 = v448;
  v349 = v448;
  unint64_t v170 = specialized Sequence.compactMap<A>(_:)(v404, (uint64_t)&v344, v167, MEMORY[0x1E4F89260]);
  swift_bridgeObjectRelease();
  uint64_t v171 = specialized Array.append<A>(contentsOf:)(v170);
  uint64_t v172 = *(void *)(MEMORY[0x1CB779280](v171) + 16);
  swift_bridgeObjectRelease();
  if (v172)
  {
    v173 = v396;
    char v174 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    char v175 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    v446 = (void (**)(Class, uint64_t))MEMORY[0x1CB779280]();
    (*(void (**)(char *, char *, uint64_t))(v424 + 16))(v394, v168, v141);
    uint64_t v176 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1F4188790](v176);
    v344 = v144;
    LOBYTE(v345) = v174 & 1;
    double v346 = v399;
    v347 = v173;
    LOBYTE(v348) = v175 & 1;
    v349 = v430;
    id v177 = objc_allocWithZone(v447);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    id v178 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    id v179 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      v180 = v391;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v181 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v181 - 8) + 56))(v180, 0, 1, v181);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    uint64_t v182 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    if (v182)
    {
      v183 = v384;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      uint64_t v184 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v184 - 8) + 56))(v183, 0, 1, v184);
      uint64_t v182 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1CB77CD90](v182);
    v185 = v420;
    uint64_t v186 = v421;
    id v187 = v448;
    uint64_t v188 = v424;
    v144 = v419;
    if (*(void *)((v451 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v451 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(char *, uint64_t))(v186 + 8))(v413, v425);
    uint64_t v141 = v422;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v421 + 8))(v413, v425);
    swift_bridgeObjectRelease();

    uint64_t v188 = v424;
    v185 = v168;
  }
  (*(void (**)(char *, uint64_t))(v409 + 8))(v144, v410);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v185, v141);
  (*(void (**)(char *, uint64_t))(v415 + 8))(v423, v414);
  return v451;
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(void *a1, uint64_t a2, double a3)
{
  uint64_t v396 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1F4188790](v5 - 8);
  v428 = (char *)&v345 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v427 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v426 = *(void *)(v427 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v427);
  v437 = (char *)&v345 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v424 = (char *)&v345 - v9;
  uint64_t v425 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v438 = *(char **)(v425 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v425);
  v440 = (void (**)(char *, unint64_t, uint64_t))((char *)&v345 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  Class v441 = (Class)((char *)&v345 - v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1F4188790](v13 - 8);
  v373 = (char *)&v345 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v368 = (uint64_t)&v345 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v365 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  uint64_t v364 = *(void *)(v365 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v365);
  v359 = (char *)&v345 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v363 = (char *)&v345 - v19;
  uint64_t v352 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  uint64_t v351 = *(void *)(v352 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v352);
  double v346 = (char *)&v345 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v350 = (char *)&v345 - v22;
  uint64_t v357 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  uint64_t v356 = *(void *)(v357 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v357);
  v349 = (char *)&v345 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v355 = (char *)&v345 - v25;
  uint64_t v362 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v361 = *(void *)(v362 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v362);
  v354 = (char *)&v345 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v360 = (char *)&v345 - v28;
  uint64_t v377 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v372 = *(void *)(v377 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v377);
  v367 = (char *)&v345 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v371 = (char *)&v345 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  v374 = (char *)&v345 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  v387 = (char *)&v345 - v35;
  uint64_t v388 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  uint64_t v389 = *(void *)(v388 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v388);
  v370 = (char *)&v345 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  v378 = (char *)&v345 - v38;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  uint64_t v40 = MEMORY[0x1F4188790](v39 - 8);
  uint64_t v376 = (char *)&v345 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  v375 = (char *)&v345 - v43;
  MEMORY[0x1F4188790](v42);
  v386 = (char *)&v345 - v44;
  uint64_t v397 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v398 = *(void *)(v397 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v397);
  uint64_t v369 = (char *)&v345 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  v358 = (char *)&v345 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  v347 = (char *)&v345 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  v348 = (char *)&v345 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  v353 = (char *)&v345 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v366 = (char *)&v345 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  v379 = (char *)&v345 - v58;
  MEMORY[0x1F4188790](v57);
  v392 = (char *)&v345 - v59;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1F4188790](v60 - 8);
  v380 = (char *)&v345 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v62 - 8);
  v390 = (char *)&v345 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  uint64_t v65 = MEMORY[0x1F4188790](v64 - 8);
  v395 = (char *)&v345 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v65);
  v382 = (char *)&v345 - v67;
  uint64_t v385 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  uint64_t v384 = *(void *)(v385 - 8);
  MEMORY[0x1F4188790](v385);
  v383 = (char *)&v345 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v401 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v402 = *(void *)(v401 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v401);
  v391 = (char *)&v345 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v381 = (char *)&v345 - v72;
  MEMORY[0x1F4188790](v71);
  v405 = (char *)&v345 - v73;
  uint64_t v404 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v403 = *(void *)(v404 - 8);
  MEMORY[0x1F4188790](v404);
  v413 = (char *)&v345 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v75 - 8);
  v410 = (char *)&v345 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v411 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  uint64_t v412 = *(void *)(v411 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v411);
  v406 = (char *)&v345 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v77);
  v408 = (char *)&v345 - v79;
  v439 = (char *)type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  uint64_t v80 = *((void *)v439 - 1);
  MEMORY[0x1F4188790](v439);
  uint64_t v82 = (char *)&v345 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v416 = *(void *)(v83 - 8);
  uint64_t v84 = MEMORY[0x1F4188790](v83);
  v394 = (char *)&v345 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  v393 = (char *)&v345 - v87;
  MEMORY[0x1F4188790](v86);
  uint64_t v89 = (char *)&v345 - v88;
  uint64_t v407 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  uint64_t v417 = *(void *)(v407 - 8);
  MEMORY[0x1F4188790](v407);
  v91 = (char *)&v345 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v418 = a1;
  uint64_t v92 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1) {
    uint64_t v92 = swift_once();
  }
  uint64_t v93 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v92);
  v409 = v91;
  v344 = (void (**)(char *, unint64_t, uint64_t))v91;
  uint64_t v94 = type metadata accessor for Date();
  uint64_t v95 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v97 = (char *)&v345 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v98 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v93 + 200);
  uint64_t v414 = v83;
  uint64_t v343 = v342;
  v344 = (void (**)(char *, unint64_t, uint64_t))v83;
  LOBYTE(v342[0]) = 2;
  v415 = v89;
  v98(0xD00000000000001ELL, 0x80000001C91A1580, 0, v97, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 129, "extractExperiences(from:score:with:with:)", 41, v342[0], partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:));
  uint64_t v400 = 0;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
  uint64_t v99 = v418;
  uint64_t v100 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  uint64_t v101 = MEMORY[0x1CB778940](v100);
  (*(void (**)(char *, char *))(v80 + 8))(v82, v439);
  uint64_t v102 = *(void *)(v101 + 16);
  uint64_t v103 = MEMORY[0x1E4FBC860];
  if (v102)
  {
    uint64_t v104 = (void (*)(void, Class, uint64_t))*((void *)v438 + 2);
    unint64_t v105 = v101 + ((v438[80] + 32) & ~(unint64_t)v438[80]);
    v435 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v438 + 9);
    v436 = v104;
    v434 = (void (*)(char *, uint64_t))(v438 + 88);
    int v433 = *MEMORY[0x1E4F89368];
    int v423 = *MEMORY[0x1E4F89358];
    int v421 = *MEMORY[0x1E4F89360];
    v432 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v426 + 56);
    v438 += 16;
    v439 = v438 - 8;
    unsigned int v419 = *MEMORY[0x1E4F9FF10];
    v429 = (void (**)(uint64_t, void, uint64_t))(v426 + 104);
    unsigned int v420 = *MEMORY[0x1E4F9FF08];
    unsigned int v422 = *MEMORY[0x1E4F9FF18];
    v430 = (void (**)(char *, uint64_t, uint64_t))(v426 + 32);
    v431 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v426 + 48);
    uint64_t v399 = v101;
    swift_bridgeObjectRetain();
    unint64_t v106 = MEMORY[0x1E4FBC860];
    uint64_t v108 = v427;
    uint64_t v107 = (uint64_t)v428;
    uint64_t v109 = v425;
    Class v110 = v441;
    while (1)
    {
      unint64_t v111 = v106;
      uint64_t v112 = v436;
      v436(v110, (Class)v105, v109);
      unint64_t v113 = v440;
      v112(v440, v110, v109);
      int v114 = (*(uint64_t (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))v434)(v113, v109);
      if (v114 == v433)
      {
        (*v429)(v107, v422, v108);
        (*v432)(v107, 0, 1, v108);
        unint64_t v106 = v111;
      }
      else
      {
        unint64_t v106 = v111;
        if (v114 == v423)
        {
          (*v429)(v107, v420, v108);
        }
        else
        {
          if (v114 != v421)
          {
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v115 = type metadata accessor for Logger();
            __swift_project_value_buffer(v115, (uint64_t)static Logger.pommes);
            Class v116 = Logger.logObject.getter();
            os_log_type_t v117 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v116, v117))
            {
              uint64_t v118 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v118 = 0;
              _os_log_impl(&dword_1C8F83000, v116, v117, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v118, 2u);
              MEMORY[0x1CB77E470](v118, -1, -1);
            }

            uint64_t v108 = v427;
            uint64_t v107 = (uint64_t)v428;
            (*v432)((uint64_t)v428, 1, 1, v427);
            (*(void (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))v439)(v440, v109);
            goto LABEL_19;
          }
          (*v429)(v107, v419, v108);
        }
        (*v432)(v107, 0, 1, v108);
      }
LABEL_19:
      (*(void (**)(Class, uint64_t))v439)(v441, v109);
      if ((*v431)(v107, 1, v108) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v107, (uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        uint64_t v119 = *v430;
        v120 = v424;
        (*v430)(v424, v107, v108);
        v119(v437, (uint64_t)v120, v108);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v106 + 16) + 1, 1, v106);
        }
        unint64_t v122 = *(void *)(v106 + 16);
        unint64_t v121 = *(void *)(v106 + 24);
        uint64_t v109 = v425;
        if (v122 >= v121 >> 1) {
          unint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v121 > 1, v122 + 1, 1, v106);
        }
        *(void *)(v106 + 16) = v122 + 1;
        unint64_t v123 = v106
             + ((*(unsigned __int8 *)(v426 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v426 + 80))
             + *(void *)(v426 + 72) * v122;
        uint64_t v108 = v427;
        v119((char *)v123, (uint64_t)v437, v427);
        uint64_t v107 = (uint64_t)v428;
      }
      v105 += (unint64_t)v435;
      if (!--v102)
      {
        uint64_t v124 = swift_bridgeObjectRelease_n();
        uint64_t v125 = v417;
        uint64_t v99 = v418;
        uint64_t v103 = MEMORY[0x1E4FBC860];
        goto LABEL_27;
      }
    }
  }
  uint64_t v124 = swift_bridgeObjectRelease();
  unint64_t v106 = MEMORY[0x1E4FBC860];
  uint64_t v125 = v417;
LABEL_27:
  MEMORY[0x1F4188790](v124);
  uint64_t v343 = (void *)v106;
  Class v441 = (Class)type metadata accessor for PommesRenderOptions();
  id v126 = objc_allocWithZone(v441);
  uint64_t v127 = (char *)PommesRenderOptions.init(_:)();
  uint64_t v444 = v103;
  uint64_t v128 = (uint64_t)v410;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  uint64_t v129 = v412;
  uint64_t v130 = v411;
  BOOL v131 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v412 + 48))(v128, 1, v411) == 1;
  uint64_t v132 = v416;
  uint64_t v133 = v415;
  v134 = (void (**)(char *, unint64_t, uint64_t))v106;
  uint64_t v135 = v413;
  if (v131)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v128, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
    goto LABEL_63;
  }
  v440 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v408, v128, v130);
  id v136 = v406;
  (*(void (**)(void))(v129 + 16))();
  int v137 = (*(uint64_t (**)(char *, uint64_t))(v129 + 88))(v136, v130);
  if (v137 != *MEMORY[0x1E4F88720])
  {
    int v173 = v137;
    int v174 = *MEMORY[0x1E4F88718];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v173 == v174)
    {
      char v175 = v406;
      (*(void (**)(char *, uint64_t))(v129 + 96))(v406, v130);
      (*(void (**)(char *, char *, uint64_t))(v402 + 32))(v405, v175, v401);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v176 = type metadata accessor for Logger();
      Class v441 = (Class)__swift_project_value_buffer(v176, (uint64_t)static Logger.pommes);
      id v177 = Logger.logObject.getter();
      os_log_type_t v178 = static os_log_type_t.debug.getter();
      BOOL v179 = os_log_type_enabled(v177, v178);
      uint64_t v180 = v398;
      uint64_t v181 = v387;
      if (v179)
      {
        uint64_t v182 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v182 = 0;
        _os_log_impl(&dword_1C8F83000, v177, v178, "Adding a client driven experience", v182, 2u);
        MEMORY[0x1CB77E470](v182, -1, -1);
      }

      uint64_t v183 = MEMORY[0x1CB779170]();
      uint64_t v184 = *(void *)(v183 + 16);
      uint64_t v185 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
      uint64_t v186 = *(char **)(v185 - 8);
      if (v184)
      {
        id v187 = v386;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v185 - 8) + 16))(v386, v183+ ((*(unsigned __int8 *)(*(void *)(v185 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v185 - 8) + 80)), v185);
        uint64_t v188 = 0;
      }
      else
      {
        uint64_t v188 = 1;
        id v187 = v386;
      }
      v437 = (char *)*((void *)v186 + 7);
      v438 = v186 + 56;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v437)(v187, v188, 1, v185);
      swift_bridgeObjectRelease();
      v435 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v186 + 6);
      v436 = (void (*)(void, Class, uint64_t))(v186 + 48);
      int v198 = v435(v187, 1, v185);
      v439 = v127;
      v440 = (void (**)(char *, unint64_t, uint64_t))v186;
      if (v198 == 1)
      {
        v199 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?;
        uint64_t v200 = (uint64_t)v187;
        goto LABEL_74;
      }
      uint64_t v201 = v379;
      Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
      (*((void (**)(char *, uint64_t))v186 + 1))(v187, v185);
      uint64_t v202 = v392;
      uint64_t v203 = v201;
      uint64_t v204 = v397;
      (*(void (**)(char *, char *, uint64_t))(v180 + 32))(v392, v203, v397);
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      uint64_t v205 = v389;
      uint64_t v206 = v388;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v389 + 48))(v181, 1, v388) == 1)
      {
        (*(void (**)(char *, uint64_t))(v180 + 8))(v202, v204);
        v199 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?;
        uint64_t v200 = (uint64_t)v181;
LABEL_74:
        outlined destroy of MediaUserStateCenter?(v200, v199);
        uint64_t v207 = v402;
        v208 = v381;
        uint64_t v209 = v401;
        v210 = *(void (**)(char *, char *, uint64_t))(v402 + 16);
        v210(v381, v405, v401);
        v211 = Logger.logObject.getter();
        int v433 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v211, (os_log_type_t)v433))
        {
          v212 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v212 = 67109120;
          uint64_t v213 = MEMORY[0x1CB779170]();
          if (*(void *)(v213 + 16))
          {
            uint64_t v214 = (uint64_t)v375;
            v440[2](v375, v213 + ((*((unsigned __int8 *)v440 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v440 + 80)), v185);
            uint64_t v215 = 0;
            uint64_t v216 = v402;
          }
          else
          {
            uint64_t v215 = 1;
            uint64_t v216 = v402;
            uint64_t v214 = (uint64_t)v375;
          }
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v437)(v214, v215, 1, v185);
          swift_bridgeObjectRelease();
          if (v435((char *)v214, 1, v185) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v214, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
            int v230 = 0;
            uint64_t v231 = 1;
            uint64_t v232 = (uint64_t)v373;
          }
          else
          {
            uint64_t v233 = v214;
            uint64_t v234 = v373;
            Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
            uint64_t v232 = (uint64_t)v234;
            v208 = v381;
            ((void (*)(uint64_t, uint64_t))v440[1])(v233, v185);
            uint64_t v231 = 0;
            int v230 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56))(v232, v231, 1, v397);
          outlined destroy of MediaUserStateCenter?(v232, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
          uint64_t v235 = *(void (**)(char *, uint64_t))(v216 + 8);
          uint64_t v209 = v401;
          v434 = v235;
          v235(v208, v401);
          LODWORD(v443) = v230;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C8F83000, v211, (os_log_type_t)v433, "Has clientComponent? %{BOOL}d", v212, 8u);
          MEMORY[0x1CB77E470](v212, -1, -1);
          uint64_t v132 = v416;
        }
        else
        {
          v434 = *(void (**)(char *, uint64_t))(v207 + 8);
          v434(v208, v209);
        }

        uint64_t v236 = v391;
        v210(v391, v405, v209);
        v237 = Logger.logObject.getter();
        int v238 = static os_log_type_t.debug.getter();
        BOOL v239 = os_log_type_enabled(v237, (os_log_type_t)v238);
        int v240 = v440;
        if (!v239)
        {
          os_log_type_t v245 = v434;
          v434(v236, v209);
          uint64_t v246 = v417;
          uint64_t v247 = v407;
          uint64_t v248 = v412;
LABEL_96:

          v245(v405, v209);
          (*(void (**)(char *, uint64_t))(v248 + 8))(v408, v411);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v415, v414);
          (*(void (**)(char *, uint64_t))(v246 + 8))(v409, v247);
          return MEMORY[0x1E4FBC860];
        }
        LODWORD(v441) = v238;
        uint64_t v241 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v241 = 67109120;
        uint64_t v242 = MEMORY[0x1CB779170]();
        if (*(void *)(v242 + 16))
        {
          uint64_t v243 = (uint64_t)v376;
          v240[2](v376, v242 + ((*((unsigned __int8 *)v240 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v240 + 80)), v185);
          uint64_t v244 = 0;
        }
        else
        {
          uint64_t v244 = 1;
          uint64_t v243 = (uint64_t)v376;
        }
        uint64_t v249 = v398;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v437)(v243, v244, 1, v185);
        swift_bridgeObjectRelease();
        if (v435((char *)v243, 1, v185) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v243, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          uint64_t v250 = (uint64_t)v374;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v389 + 56))(v374, 1, 1, v388);
          uint64_t v246 = v417;
          uint64_t v247 = v407;
          uint64_t v248 = v412;
        }
        else
        {
          unint64_t v251 = v240;
          v252 = v369;
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          ((void (*)(uint64_t, uint64_t))v251[1])(v243, v185);
          uint64_t v250 = (uint64_t)v374;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
          (*(void (**)(char *, uint64_t))(v249 + 8))(v252, v397);
          int v253 = 1;
          int v254 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v389 + 48))(v250, 1, v388);
          uint64_t v246 = v417;
          uint64_t v247 = v407;
          uint64_t v248 = v412;
          if (v254 != 1)
          {
LABEL_95:
            outlined destroy of MediaUserStateCenter?(v250, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
            uint64_t v255 = v401;
            os_log_type_t v245 = v434;
            v434(v391, v401);
            LODWORD(v443) = v253;
            uint64_t v209 = v255;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C8F83000, v237, (os_log_type_t)v441, "Has domainComponent? %{BOOL}d", v241, 8u);
            MEMORY[0x1CB77E470](v241, -1, -1);
            uint64_t v132 = v416;
            goto LABEL_96;
          }
        }
        int v253 = 0;
        goto LABEL_95;
      }
      v217 = v378;
      (*(void (**)(char *, char *, uint64_t))(v205 + 32))(v378, v181, v206);
      uint64_t v218 = v370;
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))(v370, v217, v206);
      int v219 = (*(uint64_t (**)(char *, uint64_t))(v205 + 88))(v218, v206);
      if (v219 == *MEMORY[0x1E4F895B0])
      {
        (*(void (**)(char *, uint64_t))(v205 + 96))(v218, v206);
        (*(void (**)(char *, char *, uint64_t))(v372 + 32))(v371, v218, v377);
        uint64_t v220 = v398;
        uint64_t v221 = v366;
        uint64_t v222 = v397;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v366, v392, v397);
        v223 = Logger.logObject.getter();
        os_log_type_t v224 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v223, v224))
        {
          uint64_t v225 = (uint8_t *)swift_slowAlloc();
          uint64_t v226 = swift_slowAlloc();
          uint64_t v443 = v226;
          *(_DWORD *)uint64_t v225 = 136315138;
          uint64_t v227 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v227, v228, &v443);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v229 = *(objc_class **)(v220 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v220 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v229;
          ((void (*)(char *, uint64_t))v229)(v221, v222);
          _os_log_impl(&dword_1C8F83000, v223, v224, "Adding AudioExperience with identifier %s to PommesResponse", v225, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v226, -1, -1);
          MEMORY[0x1CB77E470](v225, -1, -1);
        }
        else
        {
          uint64_t v267 = *(objc_class **)(v220 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v220 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v267;
          ((void (*)(char *, uint64_t))v267)(v221, v222);
        }

        uint64_t v268 = v396;
        type metadata accessor for AudioExperience();
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v269 = v372;
        int v270 = v371;
        (*(void (**)(char *, char *, uint64_t))(v372 + 16))(v367, v371, v377);
        uint64_t v271 = v416;
        (*(void (**)(char *, char *, uint64_t))(v416 + 16))(v393, v415, v414);
        outlined init with copy of ClientExperienceSignals?(v268, v368);
        uint64_t v272 = v439;
        id v273 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v274 = swift_allocObject();
        *(_OWORD *)(v274 + 16) = xmmword_1C9195B30;
        *(void *)(v274 + 32) = v273;
        uint64_t v443 = v274;
        specialized Array._endMutation()();
        uint64_t v196 = v443;

        (*(void (**)(char *, uint64_t))(v269 + 8))(v270, v377);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v378, v388);
        ((void (*)(char *, uint64_t))v441)(v392, v397);
        (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v401);
        (*(void (**)(char *, uint64_t))(v412 + 8))(v408, v411);
        (*(void (**)(char *, uint64_t))(v271 + 8))(v415, v414);
        goto LABEL_118;
      }
      uint64_t v256 = v412;
      if (v219 == *MEMORY[0x1E4F895B8])
      {
        (*(void (**)(char *, uint64_t))(v205 + 96))(v218, v206);
        (*(void (**)(char *, char *, uint64_t))(v364 + 32))(v363, v218, v365);
        uint64_t v257 = v398;
        uint64_t v258 = v358;
        uint64_t v259 = v397;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v358, v392, v397);
        uint64_t v260 = Logger.logObject.getter();
        os_log_type_t v261 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v260, v261))
        {
          uint64_t v262 = (uint8_t *)swift_slowAlloc();
          uint64_t v263 = swift_slowAlloc();
          uint64_t v443 = v263;
          *(_DWORD *)uint64_t v262 = 136315138;
          uint64_t v264 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v264, v265, &v443);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v266 = *(objc_class **)(v257 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v257 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v266;
          ((void (*)(char *, uint64_t))v266)(v258, v259);
          _os_log_impl(&dword_1C8F83000, v260, v261, "Adding VideoExperience with identifier %s to PommesResponse", v262, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v263, -1, -1);
          MEMORY[0x1CB77E470](v262, -1, -1);
        }
        else
        {
          uint64_t v285 = *(objc_class **)(v257 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v257 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v285;
          ((void (*)(char *, uint64_t))v285)(v258, v259);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v286 = v364;
        v287 = v363;
        uint64_t v288 = v365;
        (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v359, v363, v365);
        uint64_t v289 = v416;
        (*(void (**)(char *, char *, uint64_t))(v416 + 16))(v393, v415, v414);
        objc_allocWithZone((Class)type metadata accessor for VideoExperience());
        uint64_t v290 = v439;
        id v291 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v292 = swift_allocObject();
        *(_OWORD *)(v292 + 16) = xmmword_1C9195B30;
        *(void *)(v292 + 32) = v291;
        uint64_t v443 = v292;
        specialized Array._endMutation()();
        uint64_t v196 = v443;

        (*(void (**)(char *, uint64_t))(v286 + 8))(v287, v288);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v378, v388);
        ((void (*)(char *, uint64_t))v441)(v392, v397);
        (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v401);
        (*(void (**)(char *, uint64_t))(v412 + 8))(v408, v411);
        (*(void (**)(char *, uint64_t))(v289 + 8))(v415, v414);
        goto LABEL_118;
      }
      uint64_t v275 = v397;
      if (v219 == *MEMORY[0x1E4F895A0])
      {
        (*(void (**)(char *, uint64_t))(v205 + 96))(v218, v206);
        (*(void (**)(char *, char *, uint64_t))(v361 + 32))(v360, v218, v362);
        uint64_t v276 = v398;
        v277 = v353;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v353, v392, v275);
        os_log_type_t v278 = Logger.logObject.getter();
        os_log_type_t v279 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v278, v279))
        {
          uint64_t v280 = (uint8_t *)swift_slowAlloc();
          uint64_t v281 = swift_slowAlloc();
          uint64_t v443 = v281;
          *(_DWORD *)uint64_t v280 = 136315138;
          uint64_t v282 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v282, v283, &v443);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v284 = *(objc_class **)(v276 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v276 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v284;
          ((void (*)(char *, uint64_t))v284)(v277, v397);
          _os_log_impl(&dword_1C8F83000, v278, v279, "Adding GeoExperience with identifier %s to PommesResponse", v280, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v281, -1, -1);
          MEMORY[0x1CB77E470](v280, -1, -1);
        }
        else
        {
          v302 = *(objc_class **)(v276 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v276 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v302;
          ((void (*)(char *, uint64_t))v302)(v277, v275);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v303 = v361;
        v304 = v360;
        uint64_t v305 = v362;
        (*(void (**)(char *, char *, uint64_t))(v361 + 16))(v354, v360, v362);
        uint64_t v306 = v132;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v393, v415, v414);
        objc_allocWithZone((Class)type metadata accessor for GeoExperience());
        v307 = v439;
        v308 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
LABEL_117:
        id v322 = v308;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v323 = swift_allocObject();
        *(_OWORD *)(v323 + 16) = xmmword_1C9195B30;
        *(void *)(v323 + 32) = v322;
        uint64_t v443 = v323;
        specialized Array._endMutation()();
        uint64_t v196 = v443;

        (*(void (**)(char *, uint64_t))(v303 + 8))(v304, v305);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v378, v388);
        ((void (*)(char *, uint64_t))v441)(v392, v397);
        (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v401);
        (*(void (**)(char *, uint64_t))(v412 + 8))(v408, v411);
        (*(void (**)(char *, uint64_t))(v306 + 8))(v415, v414);
LABEL_118:
        (*(void (**)(char *, uint64_t))(v417 + 8))(v409, v407);
        return v196;
      }
      if (v219 == *MEMORY[0x1E4F895A8])
      {
        (*(void (**)(char *, uint64_t))(v205 + 96))(v218, v206);
        (*(void (**)(char *, char *, uint64_t))(v356 + 32))(v355, v218, v357);
        uint64_t v293 = v398;
        os_log_type_t v294 = v348;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v348, v392, v275);
        v295 = Logger.logObject.getter();
        os_log_type_t v296 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v295, v296))
        {
          unint64_t v297 = (uint8_t *)swift_slowAlloc();
          uint64_t v298 = swift_slowAlloc();
          uint64_t v443 = v298;
          *(_DWORD *)unint64_t v297 = 136315138;
          uint64_t v299 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v299, v300, &v443);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v301 = *(objc_class **)(v293 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v293 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v301;
          ((void (*)(char *, uint64_t))v301)(v294, v397);
          _os_log_impl(&dword_1C8F83000, v295, v296, "Adding AppsExperience with identfier %s to PommesResponse", v297, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v298, -1, -1);
          MEMORY[0x1CB77E470](v297, -1, -1);
        }
        else
        {
          uint64_t v321 = *(objc_class **)(v293 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v293 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v321;
          ((void (*)(char *, uint64_t))v321)(v294, v275);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v303 = v356;
        v304 = v355;
        uint64_t v305 = v357;
        (*(void (**)(char *, char *, uint64_t))(v356 + 16))(v349, v355, v357);
        uint64_t v306 = v132;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v393, v415, v414);
        objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
        v307 = v439;
        v308 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        goto LABEL_117;
      }
      if (v219 == *MEMORY[0x1E4F89598])
      {
        (*(void (**)(char *, uint64_t))(v205 + 96))(v218, v206);
        (*(void (**)(char *, char *, uint64_t))(v351 + 32))(v350, v218, v352);
        uint64_t v309 = v398;
        uint64_t v310 = v275;
        uint64_t v311 = v347;
        unint64_t v312 = v392;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v347, v392, v310);
        v313 = Logger.logObject.getter();
        os_log_type_t v314 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v313, v314))
        {
          v315 = (uint8_t *)swift_slowAlloc();
          uint64_t v316 = swift_slowAlloc();
          uint64_t v443 = v316;
          *(_DWORD *)v315 = 136315138;
          uint64_t v317 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v317, v318, &v443);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_type_t v319 = *(objc_class **)(v309 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v309 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v319;
          ((void (*)(char *, uint64_t))v319)(v347, v310);
          _os_log_impl(&dword_1C8F83000, v313, v314, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v315, 0xCu);
          swift_arrayDestroy();
          uint64_t v320 = v316;
          uint64_t v127 = v439;
          unint64_t v312 = v392;
          MEMORY[0x1CB77E470](v320, -1, -1);
          MEMORY[0x1CB77E470](v315, -1, -1);
        }
        else
        {
          v333 = *(objc_class **)(v309 + 8);
          v440 = (void (**)(char *, unint64_t, uint64_t))((v309 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v441 = v333;
          ((void (*)(char *, uint64_t))v333)(v311, v310);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v334 = v351;
        v335 = v350;
        uint64_t v336 = v352;
        (*(void (**)(char *, char *, uint64_t))(v351 + 16))(v346, v350, v352);
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v393, v415, v414);
        id v337 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
        id v338 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v339 = swift_allocObject();
        *(_OWORD *)(v339 + 16) = xmmword_1C9195B30;
        *(void *)(v339 + 32) = v338;
        uint64_t v443 = v339;
        specialized Array._endMutation()();
        uint64_t v196 = v443;

        (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v336);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v378, v388);
        ((void (*)(char *, uint64_t))v441)(v312, v397);
        (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v401);
        (*(void (**)(char *, uint64_t))(v412 + 8))(v408, v411);
        (*(void (**)(char *, uint64_t))(v132 + 8))(v415, v414);
        goto LABEL_118;
      }
      uint64_t v324 = v397;
      uint64_t v325 = v417;
      id v326 = Logger.logObject.getter();
      os_log_type_t v327 = static os_log_type_t.error.getter();
      BOOL v328 = os_log_type_enabled(v326, v327);
      v329 = v392;
      if (v328)
      {
        os_log_type_t v330 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v330 = 0;
        _os_log_impl(&dword_1C8F83000, v326, v327, "Unexpected DomainComponent encountered when building Client Driven experience", v330, 2u);
        MEMORY[0x1CB77E470](v330, -1, -1);
      }

      v331 = *(void (**)(char *, uint64_t))(v389 + 8);
      uint64_t v332 = v388;
      v331(v378, v388);
      (*(void (**)(char *, uint64_t))(v398 + 8))(v329, v324);
      (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v401);
      (*(void (**)(char *, uint64_t))(v256 + 8))(v408, v411);
      v331(v218, v332);
      BOOL v195 = v409;
      uint64_t v125 = v325;
      uint64_t v133 = v415;
LABEL_64:

      (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v414);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v195, v407);
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v125 = v417;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v189 = type metadata accessor for Logger();
    __swift_project_value_buffer(v189, (uint64_t)static Logger.pommes);
    int v190 = Logger.logObject.getter();
    os_log_type_t v191 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v190, v191))
    {
      uint64_t v192 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v192 = 0;
      _os_log_impl(&dword_1C8F83000, v190, v191, "unexpected experience component", v192, 2u);
      v193 = v192;
      uint64_t v125 = v417;
      MEMORY[0x1CB77E470](v193, -1, -1);
    }

    os_log_type_t v194 = *(void (**)(char *, uint64_t))(v129 + 8);
    v194(v408, v130);
    v194(v406, v130);
LABEL_63:
    BOOL v195 = v409;
    goto LABEL_64;
  }
  (*(void (**)(char *, uint64_t))(v129 + 96))(v136, v130);
  (*(void (**)(char *, char *, uint64_t))(v403 + 32))(v135, v136, v404);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v138 = type metadata accessor for Logger();
  __swift_project_value_buffer(v138, (uint64_t)static Logger.pommes);
  int v139 = Logger.logObject.getter();
  os_log_type_t v140 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v139, v140))
  {
    uint64_t v141 = v127;
    v142 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v142 = 0;
    _os_log_impl(&dword_1C8F83000, v139, v140, "Adding a server driven experience", v142, 2u);
    v143 = v142;
    uint64_t v127 = v141;
    MEMORY[0x1CB77E470](v143, -1, -1);
  }

  char v144 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter();
  v439 = v127;
  if (v144)
  {
    v145 = v383;
    uint64_t v146 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v438 = (char *)MEMORY[0x1CB778770](v146);
    v147 = *(void (**)(char *, uint64_t))(v384 + 8);
    int v148 = v133;
    uint64_t v149 = v385;
    v147(v145, v385);
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v393, v148, v414);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    id v150 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    os_log_type_t v151 = v127;
    uint64_t v132 = v416;
    uint64_t v135 = v413;
    v438 = (char *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    char v152 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    v437 = (char *)v147;
    v147(v145, v149);
    uint64_t v99 = v418;
    if (v152)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
      char v153 = v438;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      uint64_t v132 = v416;
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      ((void (*)(char *, uint64_t))v437)(v145, v149);
      dispatch thunk of Experience.associatedEntities.setter();

      uint64_t v135 = v413;
    }
    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      uint64_t v154 = v390;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v155 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v155 - 8) + 56))(v154, 0, 1, v155);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    uint64_t v156 = v438;
    MEMORY[0x1CB77CD90]();
    uint64_t v133 = v415;
    if (*(void *)((v444 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v444 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v127 = v439;
  }
  uint64_t v157 = MEMORY[0x1CB779290]();
  MEMORY[0x1F4188790](v157);
  *(double *)id v342 = a3;
  v342[1] = v133;
  uint64_t v343 = v99;
  v344 = (void (**)(char *, unint64_t, uint64_t))v127;
  unint64_t v158 = specialized Sequence.compactMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)&v340, v157, MEMORY[0x1E4F89260]);
  swift_bridgeObjectRelease();
  uint64_t v159 = specialized Array.append<A>(contentsOf:)(v158);
  uint64_t v160 = *(void *)(MEMORY[0x1CB779280](v159) + 16);
  swift_bridgeObjectRelease();
  if (v160)
  {
    char v161 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    uint64_t v162 = v132;
    char v163 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    v438 = (char *)MEMORY[0x1CB779280]();
    (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v394, v133, v414);
    uint64_t v164 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1F4188790](v164);
    uint64_t v340 = v135;
    LOBYTE(v341) = v161 & 1;
    v342[0] = v396;
    LOBYTE(v343) = v163 & 1;
    v344 = v440;
    id v165 = objc_allocWithZone(v441);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    id v166 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    id v167 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      v168 = v390;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v169 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v169 - 8) + 56))(v168, 0, 1, v169);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    uint64_t v170 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    if (v170)
    {
      uint64_t v171 = v380;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      uint64_t v172 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v172 - 8) + 56))(v171, 0, 1, v172);
      uint64_t v170 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1CB77CD90](v170);
    uint64_t v132 = v416;
    uint64_t v133 = v415;
    if (*(void *)((v444 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v444 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(char *, uint64_t))(v129 + 8))(v408, v130);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v129 + 8))(v408, v130);
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v403 + 8))(v135, v404);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v414);
  (*(void (**)(char *, uint64_t))(v417 + 8))(v409, v407);
  return v444;
}

void *specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(double *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  double v402 = *(double *)&a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1F4188790](v8 - 8);
  v434 = (char *)&v352 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v433 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v432 = *(void *)(v433 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v433);
  uint64_t v443 = (char *)&v352 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v430 = (char *)&v352 - v12;
  uint64_t v431 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  uint64_t v444 = *(void **)(v431 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v431);
  v446 = (void (**)(char *, unint64_t, uint64_t))((char *)&v352 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  Class v447 = (Class)((char *)&v352 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1F4188790](v16 - 8);
  v379 = (char *)&v352 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v374 = (uint64_t)&v352 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v371 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  uint64_t v370 = *(void *)(v371 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v371);
  uint64_t v365 = (char *)&v352 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v369 = (char *)&v352 - v22;
  uint64_t v358 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  uint64_t v357 = *(void *)(v358 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v358);
  v353 = (char *)&v352 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v356 = (char *)&v352 - v25;
  uint64_t v363 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  uint64_t v362 = *(void *)(v363 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v363);
  uint64_t v355 = (char *)&v352 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v361 = (char *)&v352 - v28;
  uint64_t v368 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v367 = *(void *)(v368 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v368);
  uint64_t v360 = (char *)&v352 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v366 = (char *)&v352 - v31;
  uint64_t v383 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v378 = *(void *)(v383 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v383);
  v373 = (char *)&v352 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v377 = (char *)&v352 - v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v36 = MEMORY[0x1F4188790](v35 - 8);
  v380 = (char *)&v352 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  v393 = (char *)&v352 - v38;
  uint64_t v394 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  uint64_t v395 = *(void *)(v394 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v394);
  uint64_t v376 = (char *)&v352 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  uint64_t v384 = (char *)&v352 - v41;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  uint64_t v43 = MEMORY[0x1F4188790](v42 - 8);
  v382 = (char *)&v352 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v381 = (char *)&v352 - v46;
  MEMORY[0x1F4188790](v45);
  v392 = (char *)&v352 - v47;
  uint64_t v403 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v404 = *(void *)(v403 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v403);
  v375 = (char *)&v352 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v364 = (char *)&v352 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v352 = (char *)&v352 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v354 = (char *)&v352 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  v359 = (char *)&v352 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v372 = (char *)&v352 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v385 = (char *)&v352 - v61;
  MEMORY[0x1F4188790](v60);
  uint64_t v398 = (char *)&v352 - v62;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1F4188790](v63 - 8);
  v386 = (char *)&v352 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v65 - 8);
  uint64_t v396 = (char *)&v352 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  uint64_t v68 = MEMORY[0x1F4188790](v67 - 8);
  uint64_t v401 = (char *)&v352 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v68);
  uint64_t v388 = (char *)&v352 - v70;
  uint64_t v391 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  uint64_t v390 = *(void *)(v391 - 8);
  MEMORY[0x1F4188790](v391);
  uint64_t v389 = (char *)&v352 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v407 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v408 = *(void *)(v407 - 8);
  uint64_t v72 = MEMORY[0x1F4188790](v407);
  uint64_t v397 = (char *)&v352 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  v387 = (char *)&v352 - v75;
  MEMORY[0x1F4188790](v74);
  uint64_t v411 = (char *)&v352 - v76;
  uint64_t v410 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v409 = *(void *)(v410 - 8);
  MEMORY[0x1F4188790](v410);
  unsigned int v419 = (char *)&v352 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v78 - 8);
  v415 = (char *)&v352 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v416 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  uint64_t v417 = *(void *)(v416 - 8);
  uint64_t v80 = MEMORY[0x1F4188790](v416);
  uint64_t v412 = (char *)&v352 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v80);
  uint64_t v414 = (char *)&v352 - v82;
  v445 = (void (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  uint64_t v83 = (uint64_t)*(v445 - 1);
  MEMORY[0x1F4188790](v445);
  uint64_t v85 = (char *)&v352 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v422 = *(void *)(v86 - 8);
  uint64_t v87 = MEMORY[0x1F4188790](v86);
  uint64_t v400 = (char *)&v352 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v399 = (char *)&v352 - v90;
  MEMORY[0x1F4188790](v89);
  uint64_t v92 = (char *)&v352 - v91;
  uint64_t v413 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  uint64_t v423 = *(void *)(v413 - 8);
  MEMORY[0x1F4188790](v413);
  uint64_t v94 = (void (**)(char *, unint64_t, uint64_t))((char *)&v352 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v451 = a5;
  v424 = a1;
  uint64_t v95 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1) {
    uint64_t v95 = swift_once();
  }
  uint64_t v96 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v95);
  v350 = (double *)&v451;
  uint64_t v351 = v94;
  v418 = (char *)v94;
  uint64_t v97 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v100 = (char *)&v352 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v101 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v96 + 200);
  uint64_t v420 = v86;
  v350 = &v348;
  uint64_t v351 = (void (**)(char *, unint64_t, uint64_t))v86;
  LOBYTE(v348) = 2;
  int v421 = v92;
  v101(0xD00000000000001ELL, 0x80000001C91A1580, 0, v100, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 129, "extractExperiences(from:score:with:with:)", 41, LODWORD(v348), partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:));
  uint64_t v406 = 0;
  (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v97);
  uint64_t v102 = v424;
  uint64_t v103 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  uint64_t v104 = MEMORY[0x1CB778940](v103);
  (*(void (**)(char *, void *))(v83 + 8))(v85, v445);
  uint64_t v105 = *(void *)(v104 + 16);
  uint64_t v106 = MEMORY[0x1E4FBC860];
  if (v105)
  {
    uint64_t v107 = (void (*)(void, Class, uint64_t))v444[2];
    unint64_t v108 = v104 + ((*((unsigned __int8 *)v444 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v444 + 80));
    Class v441 = (uint64_t (*)(char *, uint64_t, uint64_t))v444[9];
    uint64_t v442 = v107;
    v440 = (void (*)(char *, uint64_t))(v444 + 11);
    int v439 = *MEMORY[0x1E4F89368];
    int v429 = *MEMORY[0x1E4F89358];
    int v427 = *MEMORY[0x1E4F89360];
    v438 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v432 + 56);
    v444 += 2;
    v445 = (void (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))(v444 - 1);
    unsigned int v425 = *MEMORY[0x1E4F9FF10];
    v435 = (void (**)(uint64_t, void, uint64_t))(v432 + 104);
    unsigned int v426 = *MEMORY[0x1E4F9FF08];
    unsigned int v428 = *MEMORY[0x1E4F9FF18];
    v436 = (void (**)(char *, uint64_t, uint64_t))(v432 + 32);
    v437 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v432 + 48);
    uint64_t v405 = v104;
    swift_bridgeObjectRetain();
    unint64_t v109 = MEMORY[0x1E4FBC860];
    uint64_t v110 = (uint64_t)v434;
    uint64_t v111 = v433;
    uint64_t v112 = v431;
    Class v113 = v447;
    while (1)
    {
      unint64_t v114 = v109;
      uint64_t v115 = v442;
      v442(v113, (Class)v108, v112);
      Class v116 = v446;
      v115(v446, v113, v112);
      int v117 = (*(uint64_t (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))v440)(v116, v112);
      if (v117 == v439)
      {
        (*v435)(v110, v428, v111);
        (*v438)(v110, 0, 1, v111);
        unint64_t v109 = v114;
      }
      else
      {
        unint64_t v109 = v114;
        if (v117 == v429)
        {
          (*v435)(v110, v426, v111);
        }
        else
        {
          if (v117 != v427)
          {
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v118 = type metadata accessor for Logger();
            __swift_project_value_buffer(v118, (uint64_t)static Logger.pommes);
            uint64_t v119 = Logger.logObject.getter();
            os_log_type_t v120 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v119, v120))
            {
              unint64_t v121 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v121 = 0;
              _os_log_impl(&dword_1C8F83000, v119, v120, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v121, 2u);
              MEMORY[0x1CB77E470](v121, -1, -1);
            }

            uint64_t v110 = (uint64_t)v434;
            uint64_t v111 = v433;
            (*v438)((uint64_t)v434, 1, 1, v433);
            (*v445)(v446, v112);
            goto LABEL_19;
          }
          (*v435)(v110, v425, v111);
        }
        (*v438)(v110, 0, 1, v111);
      }
LABEL_19:
      (*v445)((void (**)(char *, unint64_t, uint64_t))v447, v112);
      if ((*v437)(v110, 1, v111) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v110, (uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        unint64_t v122 = *v436;
        unint64_t v123 = v430;
        (*v436)(v430, v110, v111);
        v122(v443, (uint64_t)v123, v111);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v109 + 16) + 1, 1, v109);
        }
        unint64_t v125 = *(void *)(v109 + 16);
        unint64_t v124 = *(void *)(v109 + 24);
        uint64_t v112 = v431;
        if (v125 >= v124 >> 1) {
          unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, v109);
        }
        *(void *)(v109 + 16) = v125 + 1;
        unint64_t v126 = v109
             + ((*(unsigned __int8 *)(v432 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v432 + 80))
             + *(void *)(v432 + 72) * v125;
        uint64_t v111 = v433;
        v122((char *)v126, (uint64_t)v443, v433);
        uint64_t v110 = (uint64_t)v434;
      }
      v108 += (unint64_t)v441;
      if (!--v105)
      {
        uint64_t v127 = swift_bridgeObjectRelease_n();
        uint64_t v128 = v423;
        uint64_t v102 = v424;
        uint64_t v106 = MEMORY[0x1E4FBC860];
        goto LABEL_27;
      }
    }
  }
  uint64_t v127 = swift_bridgeObjectRelease();
  unint64_t v109 = MEMORY[0x1E4FBC860];
  uint64_t v128 = v423;
LABEL_27:
  MEMORY[0x1F4188790](v127);
  v350 = (double *)v109;
  Class v447 = (Class)type metadata accessor for PommesRenderOptions();
  id v129 = objc_allocWithZone(v447);
  uint64_t v130 = (void (**)(void (**)(char *, unint64_t, uint64_t), uint64_t))PommesRenderOptions.init(_:)();
  uint64_t v450 = v106;
  uint64_t v131 = (uint64_t)v415;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  uint64_t v132 = v417;
  uint64_t v133 = v416;
  BOOL v134 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v417 + 48))(v131, 1, v416) == 1;
  uint64_t v135 = v422;
  id v136 = v421;
  int v137 = (void (**)(char *, unint64_t, uint64_t))v109;
  uint64_t v138 = v419;
  if (v134)
  {
    int v139 = v130;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v131, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
    os_log_type_t v140 = v418;
    goto LABEL_63;
  }
  v446 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v132 + 32))(v414, v131, v133);
  uint64_t v141 = v412;
  (*(void (**)(void))(v132 + 16))();
  int v142 = (*(uint64_t (**)(char *, uint64_t))(v132 + 88))(v141, v133);
  if (v142 != *MEMORY[0x1E4F88720])
  {
    int v181 = v142;
    int v139 = v130;
    int v182 = *MEMORY[0x1E4F88718];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v181 == v182)
    {
      uint64_t v183 = v412;
      (*(void (**)(char *, uint64_t))(v132 + 96))(v412, v133);
      (*(void (**)(char *, char *, uint64_t))(v408 + 32))(v411, v183, v407);
      os_log_type_t v140 = v418;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v184 = type metadata accessor for Logger();
      Class v447 = (Class)__swift_project_value_buffer(v184, (uint64_t)static Logger.pommes);
      uint64_t v185 = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.debug.getter();
      BOOL v187 = os_log_type_enabled(v185, v186);
      uint64_t v188 = v404;
      uint64_t v189 = v393;
      if (v187)
      {
        int v190 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v190 = 0;
        _os_log_impl(&dword_1C8F83000, v185, v186, "Adding a client driven experience", v190, 2u);
        os_log_type_t v191 = v190;
        os_log_type_t v140 = v418;
        MEMORY[0x1CB77E470](v191, -1, -1);
      }

      uint64_t v192 = MEMORY[0x1CB779170]();
      uint64_t v193 = *(void *)(v192 + 16);
      uint64_t v194 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
      BOOL v195 = *(char **)(v194 - 8);
      if (v193)
      {
        uint64_t v196 = v392;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v194 - 8) + 16))(v392, v192+ ((*(unsigned __int8 *)(*(void *)(v194 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v194 - 8) + 80)), v194);
        uint64_t v197 = 0;
      }
      else
      {
        uint64_t v197 = 1;
        uint64_t v196 = v392;
      }
      uint64_t v206 = (char *)*((void *)v195 + 7);
      uint64_t v444 = v195 + 56;
      v445 = v139;
      uint64_t v443 = v206;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v206)(v196, v197, 1, v194);
      swift_bridgeObjectRelease();
      Class v441 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v195 + 6);
      uint64_t v442 = (void (*)(void, Class, uint64_t))(v195 + 48);
      int v207 = v441(v196, 1, v194);
      v446 = (void (**)(char *, unint64_t, uint64_t))v195;
      if (v207 == 1)
      {
        v208 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?;
        uint64_t v209 = (uint64_t)v196;
        goto LABEL_73;
      }
      v210 = (void (**)(char *, uint64_t))v195;
      v211 = v385;
      Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
      v210[1](v196, v194);
      v212 = v398;
      uint64_t v213 = v211;
      uint64_t v214 = v403;
      (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v398, v213, v403);
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      uint64_t v215 = v395;
      uint64_t v216 = v394;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v395 + 48))(v189, 1, v394) == 1)
      {
        (*(void (**)(char *, uint64_t))(v188 + 8))(v212, v214);
        v208 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?;
        uint64_t v209 = (uint64_t)v189;
LABEL_73:
        outlined destroy of MediaUserStateCenter?(v209, v208);
        uint64_t v217 = v408;
        uint64_t v218 = v387;
        uint64_t v219 = v407;
        uint64_t v220 = *(void (**)(char *, char *, uint64_t))(v408 + 16);
        v220(v387, v411, v407);
        uint64_t v221 = Logger.logObject.getter();
        int v439 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v221, (os_log_type_t)v439))
        {
          uint64_t v222 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v222 = 67109120;
          uint64_t v223 = MEMORY[0x1CB779170]();
          if (*(void *)(v223 + 16))
          {
            uint64_t v224 = (uint64_t)v381;
            v446[2](v381, v223 + ((*((unsigned __int8 *)v446 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v446 + 80)), v194);
            uint64_t v225 = 0;
            uint64_t v226 = v408;
          }
          else
          {
            uint64_t v225 = 1;
            uint64_t v226 = v408;
            uint64_t v224 = (uint64_t)v381;
          }
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v443)(v224, v225, 1, v194);
          swift_bridgeObjectRelease();
          if (v441((char *)v224, 1, v194) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v224, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
            int v240 = 0;
            uint64_t v241 = 1;
            uint64_t v242 = (uint64_t)v379;
          }
          else
          {
            uint64_t v243 = v224;
            uint64_t v244 = v379;
            Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
            uint64_t v242 = (uint64_t)v244;
            uint64_t v218 = v387;
            ((void (*)(uint64_t, uint64_t))v446[1])(v243, v194);
            uint64_t v241 = 0;
            int v240 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v404 + 56))(v242, v241, 1, v403);
          outlined destroy of MediaUserStateCenter?(v242, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
          os_log_type_t v245 = *(void (**)(char *, uint64_t))(v226 + 8);
          uint64_t v219 = v407;
          v440 = v245;
          v245(v218, v407);
          LODWORD(v449) = v240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C8F83000, v221, (os_log_type_t)v439, "Has clientComponent? %{BOOL}d", v222, 8u);
          MEMORY[0x1CB77E470](v222, -1, -1);
          uint64_t v135 = v422;
        }
        else
        {
          v440 = *(void (**)(char *, uint64_t))(v217 + 8);
          v440(v218, v219);
        }

        uint64_t v246 = v397;
        v220(v397, v411, v219);
        uint64_t v247 = Logger.logObject.getter();
        int v248 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v247, (os_log_type_t)v248))
        {
          int v253 = v440;
          v440(v246, v219);
          uint64_t v254 = v423;
          uint64_t v255 = v413;
          uint64_t v256 = v417;
LABEL_95:

          v253(v411, v219);
          (*(void (**)(char *, uint64_t))(v256 + 8))(v414, v416);
          (*(void (**)(char *, uint64_t))(v135 + 8))(v421, v420);
          (*(void (**)(char *, uint64_t))(v254 + 8))(v418, v255);
          return (void *)MEMORY[0x1E4FBC860];
        }
        LODWORD(v447) = v248;
        uint64_t v249 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v249 = 67109120;
        uint64_t v250 = MEMORY[0x1CB779170]();
        if (*(void *)(v250 + 16))
        {
          uint64_t v251 = (uint64_t)v382;
          v446[2](v382, v250 + ((*((unsigned __int8 *)v446 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v446 + 80)), v194);
          uint64_t v252 = 0;
        }
        else
        {
          uint64_t v252 = 1;
          uint64_t v251 = (uint64_t)v382;
        }
        uint64_t v257 = v404;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v443)(v251, v252, 1, v194);
        swift_bridgeObjectRelease();
        if (v441((char *)v251, 1, v194) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v251, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          uint64_t v258 = (uint64_t)v380;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v395 + 56))(v380, 1, 1, v394);
          uint64_t v254 = v423;
          uint64_t v255 = v413;
          uint64_t v256 = v417;
        }
        else
        {
          uint64_t v259 = v375;
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          ((void (*)(uint64_t, uint64_t))v446[1])(v251, v194);
          uint64_t v258 = (uint64_t)v380;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
          (*(void (**)(char *, uint64_t))(v257 + 8))(v259, v403);
          int v260 = 1;
          int v261 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v395 + 48))(v258, 1, v394);
          uint64_t v254 = v423;
          uint64_t v255 = v413;
          uint64_t v256 = v417;
          if (v261 != 1)
          {
LABEL_94:
            outlined destroy of MediaUserStateCenter?(v258, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
            uint64_t v262 = v407;
            int v253 = v440;
            v440(v397, v407);
            LODWORD(v449) = v260;
            uint64_t v219 = v262;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C8F83000, v247, (os_log_type_t)v447, "Has domainComponent? %{BOOL}d", v249, 8u);
            MEMORY[0x1CB77E470](v249, -1, -1);
            uint64_t v135 = v422;
            goto LABEL_95;
          }
        }
        int v260 = 0;
        goto LABEL_94;
      }
      uint64_t v227 = v384;
      (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v384, v189, v216);
      unint64_t v228 = v376;
      (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v376, v227, v216);
      int v229 = (*(uint64_t (**)(char *, uint64_t))(v215 + 88))(v228, v216);
      if (v229 == *MEMORY[0x1E4F895B0])
      {
        (*(void (**)(char *, uint64_t))(v215 + 96))(v228, v216);
        (*(void (**)(char *, char *, uint64_t))(v378 + 32))(v377, v228, v383);
        uint64_t v230 = v404;
        uint64_t v231 = v372;
        uint64_t v232 = v403;
        (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v372, v398, v403);
        uint64_t v233 = Logger.logObject.getter();
        os_log_type_t v234 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v233, v234))
        {
          uint64_t v235 = (uint8_t *)swift_slowAlloc();
          uint64_t v236 = swift_slowAlloc();
          v449 = (void *)v236;
          *(_DWORD *)uint64_t v235 = 136315138;
          uint64_t v237 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v448 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v237, v238, (uint64_t *)&v449);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          BOOL v239 = *(objc_class **)(v230 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v230 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v239;
          ((void (*)(char *, uint64_t))v239)(v231, v232);
          _os_log_impl(&dword_1C8F83000, v233, v234, "Adding AudioExperience with identifier %s to PommesResponse", v235, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v236, -1, -1);
          MEMORY[0x1CB77E470](v235, -1, -1);
        }
        else
        {
          uint64_t v275 = *(objc_class **)(v230 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v230 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v275;
          ((void (*)(char *, uint64_t))v275)(v231, v232);
        }

        uint64_t v276 = *(void *)&v402;
        type metadata accessor for AudioExperience();
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v277 = v378;
        os_log_type_t v278 = v377;
        (*(void (**)(char *, char *, uint64_t))(v378 + 16))(v373, v377, v383);
        uint64_t v279 = v422;
        (*(void (**)(char *, char *, uint64_t))(v422 + 16))(v399, v421, v420);
        outlined init with copy of ClientExperienceSignals?(v276, v374);
        uint64_t v280 = v445;
        id v281 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v282 = swift_allocObject();
        *(_OWORD *)(v282 + 16) = xmmword_1C9195B30;
        *(void *)(v282 + 32) = v281;
        v449 = (void *)v282;
        specialized Array._endMutation()();
        uint64_t v204 = v449;

        (*(void (**)(char *, uint64_t))(v277 + 8))(v278, v383);
        (*(void (**)(char *, uint64_t))(v395 + 8))(v384, v394);
        ((void (*)(char *, uint64_t))v447)(v398, v403);
        (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v414, v416);
        (*(void (**)(char *, uint64_t))(v279 + 8))(v421, v420);
        goto LABEL_117;
      }
      uint64_t v263 = v216;
      id v136 = v421;
      uint64_t v264 = v417;
      int v139 = v445;
      if (v229 == *MEMORY[0x1E4F895B8])
      {
        (*(void (**)(char *, uint64_t))(v215 + 96))(v228, v263);
        (*(void (**)(char *, char *, uint64_t))(v370 + 32))(v369, v228, v371);
        uint64_t v265 = v404;
        v266 = v364;
        uint64_t v267 = v403;
        (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v364, v398, v403);
        uint64_t v268 = Logger.logObject.getter();
        os_log_type_t v269 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v268, v269))
        {
          int v270 = (uint8_t *)swift_slowAlloc();
          uint64_t v271 = swift_slowAlloc();
          v449 = (void *)v271;
          *(_DWORD *)int v270 = 136315138;
          uint64_t v272 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v448 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v272, v273, (uint64_t *)&v449);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v274 = *(objc_class **)(v265 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v265 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v274;
          ((void (*)(char *, uint64_t))v274)(v266, v267);
          _os_log_impl(&dword_1C8F83000, v268, v269, "Adding VideoExperience with identifier %s to PommesResponse", v270, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v271, -1, -1);
          MEMORY[0x1CB77E470](v270, -1, -1);
        }
        else
        {
          os_log_type_t v294 = *(objc_class **)(v265 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v265 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v294;
          ((void (*)(char *, uint64_t))v294)(v266, v267);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v295 = v370;
        os_log_type_t v296 = v369;
        uint64_t v297 = v371;
        (*(void (**)(char *, char *, uint64_t))(v370 + 16))(v365, v369, v371);
        uint64_t v298 = v422;
        (*(void (**)(char *, char *, uint64_t))(v422 + 16))(v399, v421, v420);
        objc_allocWithZone((Class)type metadata accessor for VideoExperience());
        uint64_t v299 = v445;
        id v300 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v301 = swift_allocObject();
        *(_OWORD *)(v301 + 16) = xmmword_1C9195B30;
        *(void *)(v301 + 32) = v300;
        v449 = (void *)v301;
        specialized Array._endMutation()();
        uint64_t v204 = v449;

        (*(void (**)(char *, uint64_t))(v295 + 8))(v296, v297);
        (*(void (**)(char *, uint64_t))(v395 + 8))(v384, v394);
        ((void (*)(char *, uint64_t))v447)(v398, v403);
        (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v414, v416);
        (*(void (**)(char *, uint64_t))(v298 + 8))(v421, v420);
        goto LABEL_117;
      }
      uint64_t v283 = v403;
      if (v229 == *MEMORY[0x1E4F895A0])
      {
        (*(void (**)(char *, uint64_t))(v215 + 96))(v228, v263);
        (*(void (**)(char *, char *, uint64_t))(v367 + 32))(v366, v228, v368);
        uint64_t v284 = v404;
        uint64_t v285 = v359;
        (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v359, v398, v283);
        uint64_t v286 = Logger.logObject.getter();
        os_log_type_t v287 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v286, v287))
        {
          uint64_t v288 = v283;
          uint64_t v289 = (uint8_t *)swift_slowAlloc();
          uint64_t v444 = (void *)swift_slowAlloc();
          v449 = v444;
          *(_DWORD *)uint64_t v289 = 136315138;
          uint64_t v290 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v448 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v290, v291, (uint64_t *)&v449);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v292 = *(objc_class **)(v284 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v284 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v292;
          ((void (*)(char *, uint64_t))v292)(v285, v288);
          _os_log_impl(&dword_1C8F83000, v286, v287, "Adding GeoExperience with identifier %s to PommesResponse", v289, 0xCu);
          uint64_t v293 = v444;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v293, -1, -1);
          MEMORY[0x1CB77E470](v289, -1, -1);
        }
        else
        {
          unint64_t v312 = *(objc_class **)(v284 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v284 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v312;
          ((void (*)(char *, uint64_t))v312)(v285, v283);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v313 = v367;
        os_log_type_t v314 = v366;
        uint64_t v315 = v368;
        (*(void (**)(char *, char *, uint64_t))(v367 + 16))(v360, v366, v368);
        uint64_t v316 = v135;
        (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v399, v421, v420);
        objc_allocWithZone((Class)type metadata accessor for GeoExperience());
        uint64_t v317 = v445;
        unint64_t v318 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
LABEL_116:
        id v329 = v318;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v330 = swift_allocObject();
        *(_OWORD *)(v330 + 16) = xmmword_1C9195B30;
        *(void *)(v330 + 32) = v329;
        v449 = (void *)v330;
        specialized Array._endMutation()();
        uint64_t v204 = v449;

        (*(void (**)(char *, uint64_t))(v313 + 8))(v314, v315);
        (*(void (**)(char *, uint64_t))(v395 + 8))(v384, v394);
        ((void (*)(char *, uint64_t))v447)(v398, v403);
        (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v414, v416);
        (*(void (**)(char *, uint64_t))(v316 + 8))(v421, v420);
LABEL_117:
        (*(void (**)(char *, uint64_t))(v423 + 8))(v418, v413);
        return v204;
      }
      if (v229 == *MEMORY[0x1E4F895A8])
      {
        (*(void (**)(char *, uint64_t))(v215 + 96))(v228, v263);
        (*(void (**)(char *, char *, uint64_t))(v362 + 32))(v361, v228, v363);
        uint64_t v302 = v404;
        uint64_t v303 = v354;
        (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v354, v398, v283);
        v304 = Logger.logObject.getter();
        os_log_type_t v305 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v304, v305))
        {
          uint64_t v306 = v283;
          v307 = (uint8_t *)swift_slowAlloc();
          uint64_t v444 = (void *)swift_slowAlloc();
          v449 = v444;
          *(_DWORD *)v307 = 136315138;
          uint64_t v308 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v448 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v308, v309, (uint64_t *)&v449);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v310 = *(objc_class **)(v302 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v302 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v310;
          ((void (*)(char *, uint64_t))v310)(v303, v306);
          _os_log_impl(&dword_1C8F83000, v304, v305, "Adding AppsExperience with identfier %s to PommesResponse", v307, 0xCu);
          uint64_t v311 = v444;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v311, -1, -1);
          MEMORY[0x1CB77E470](v307, -1, -1);
        }
        else
        {
          BOOL v328 = *(objc_class **)(v302 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v302 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v328;
          ((void (*)(char *, uint64_t))v328)(v303, v283);
        }

        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v313 = v362;
        os_log_type_t v314 = v361;
        uint64_t v315 = v363;
        (*(void (**)(char *, char *, uint64_t))(v362 + 16))(v355, v361, v363);
        uint64_t v316 = v135;
        (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v399, v421, v420);
        objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
        uint64_t v317 = v445;
        unint64_t v318 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        goto LABEL_116;
      }
      if (v229 == *MEMORY[0x1E4F89598])
      {
        (*(void (**)(char *, uint64_t))(v215 + 96))(v228, v263);
        (*(void (**)(char *, char *, uint64_t))(v357 + 32))(v356, v228, v358);
        uint64_t v319 = v404;
        uint64_t v320 = v352;
        (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v352, v398, v283);
        uint64_t v321 = Logger.logObject.getter();
        os_log_type_t v322 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v321, v322))
        {
          uint64_t v323 = (uint8_t *)swift_slowAlloc();
          uint64_t v324 = swift_slowAlloc();
          v449 = (void *)v324;
          *(_DWORD *)uint64_t v323 = 136315138;
          uint64_t v325 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          uint64_t v448 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v325, v326, (uint64_t *)&v449);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_type_t v327 = *(objc_class **)(v319 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v319 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v327;
          ((void (*)(char *, uint64_t))v327)(v320, v403);
          _os_log_impl(&dword_1C8F83000, v321, v322, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v323, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v324, -1, -1);
          MEMORY[0x1CB77E470](v323, -1, -1);
        }
        else
        {
          id v337 = *(objc_class **)(v319 + 8);
          v446 = (void (**)(char *, unint64_t, uint64_t))((v319 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
          Class v447 = v337;
          ((void (*)(char *, uint64_t))v337)(v320, v283);
        }

        id v338 = v398;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        uint64_t v339 = v357;
        uint64_t v340 = v356;
        uint64_t v341 = v358;
        (*(void (**)(char *, char *, uint64_t))(v357 + 16))(v353, v356, v358);
        uint64_t v342 = v420;
        (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v399, v421, v420);
        id v343 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
        id v344 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v345 = swift_allocObject();
        *(_OWORD *)(v345 + 16) = xmmword_1C9195B30;
        *(void *)(v345 + 32) = v344;
        v449 = (void *)v345;
        specialized Array._endMutation()();
        uint64_t v204 = v449;

        (*(void (**)(char *, uint64_t))(v339 + 8))(v340, v341);
        (*(void (**)(char *, uint64_t))(v395 + 8))(v384, v394);
        ((void (*)(char *, uint64_t))v447)(v338, v403);
        (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v414, v416);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v421, v342);
        goto LABEL_117;
      }
      uint64_t v331 = v403;
      uint64_t v332 = Logger.logObject.getter();
      os_log_type_t v333 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v332, v333))
      {
        uint64_t v334 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v334 = 0;
        _os_log_impl(&dword_1C8F83000, v332, v333, "Unexpected DomainComponent encountered when building Client Driven experience", v334, 2u);
        MEMORY[0x1CB77E470](v334, -1, -1);
      }

      v335 = *(void (**)(char *, uint64_t))(v395 + 8);
      uint64_t v336 = v394;
      v335(v384, v394);
      (*(void (**)(char *, uint64_t))(v404 + 8))(v398, v331);
      (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
      (*(void (**)(char *, uint64_t))(v264 + 8))(v414, v416);
      v335(v228, v336);
      uint64_t v128 = v423;
    }
    else
    {
      os_log_type_t v140 = v418;
      uint64_t v128 = v423;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v198 = type metadata accessor for Logger();
      __swift_project_value_buffer(v198, (uint64_t)static Logger.pommes);
      v199 = Logger.logObject.getter();
      os_log_type_t v200 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v199, v200))
      {
        uint64_t v201 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v201 = 0;
        _os_log_impl(&dword_1C8F83000, v199, v200, "unexpected experience component", v201, 2u);
        uint64_t v202 = v201;
        uint64_t v128 = v423;
        MEMORY[0x1CB77E470](v202, -1, -1);
      }

      uint64_t v203 = *(void (**)(char *, uint64_t))(v132 + 8);
      v203(v414, v133);
      v203(v412, v133);
    }
LABEL_63:

    (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v420);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v140, v413);
    return (void *)MEMORY[0x1E4FBC860];
  }
  (*(void (**)(char *, uint64_t))(v132 + 96))(v141, v133);
  (*(void (**)(char *, char *, uint64_t))(v409 + 32))(v138, v141, v410);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v143 = type metadata accessor for Logger();
  __swift_project_value_buffer(v143, (uint64_t)static Logger.pommes);
  char v144 = Logger.logObject.getter();
  os_log_type_t v145 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v144, v145))
  {
    uint64_t v146 = v130;
    v147 = v136;
    int v148 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v148 = 0;
    _os_log_impl(&dword_1C8F83000, v144, v145, "Adding a server driven experience", v148, 2u);
    uint64_t v149 = v148;
    id v136 = v147;
    uint64_t v130 = v146;
    MEMORY[0x1CB77E470](v149, -1, -1);
  }

  char v150 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter();
  v445 = v130;
  if (v150)
  {
    os_log_type_t v151 = v389;
    uint64_t v152 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    uint64_t v444 = (void *)MEMORY[0x1CB778770](v152);
    char v153 = *(void (**)(char *, uint64_t))(v390 + 8);
    uint64_t v154 = v391;
    v153(v151, v391);
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v399, v136, v420);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    id v155 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    uint64_t v156 = v130;
    uint64_t v157 = v154;
    uint64_t v135 = v422;
    uint64_t v138 = v419;
    uint64_t v444 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    char v158 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    uint64_t v443 = (char *)v153;
    v153(v151, v157);
    uint64_t v102 = v424;
    if (v158)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
      uint64_t v159 = v444;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      uint64_t v135 = v422;
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      ((void (*)(char *, uint64_t))v443)(v151, v157);
      dispatch thunk of Experience.associatedEntities.setter();

      uint64_t v138 = v419;
    }
    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      uint64_t v160 = v396;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v161 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56))(v160, 0, 1, v161);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    uint64_t v162 = v444;
    MEMORY[0x1CB77CD90]();
    if (*(void *)((v450 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v450 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v130 = v445;
    id v136 = v421;
  }
  uint64_t v163 = MEMORY[0x1CB779290]();
  MEMORY[0x1F4188790](v163);
  double v348 = a3;
  v349 = v136;
  v350 = v102;
  uint64_t v351 = (void (**)(char *, unint64_t, uint64_t))v130;
  unint64_t v164 = specialized Sequence.compactMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)&v346, v163, MEMORY[0x1E4F89260]);
  swift_bridgeObjectRelease();
  uint64_t v165 = specialized Array.append<A>(contentsOf:)(v164);
  uint64_t v166 = *(void *)(MEMORY[0x1CB779280](v165) + 16);
  swift_bridgeObjectRelease();
  if (v166)
  {
    id v167 = v136;
    char v168 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    uint64_t v169 = v135;
    char v170 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    uint64_t v444 = (void *)MEMORY[0x1CB779280]();
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v400, v167, v420);
    uint64_t v171 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1F4188790](v171);
    double v346 = v138;
    LOBYTE(v347) = v168 & 1;
    double v348 = v402;
    v349 = (char *)&v451;
    LOBYTE(v350) = v170 & 1;
    uint64_t v351 = v446;
    id v172 = objc_allocWithZone(v447);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    id v173 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    id v174 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
    {
      char v175 = v396;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      uint64_t v176 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v176 - 8) + 56))(v175, 0, 1, v176);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    uint64_t v177 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    if (v177)
    {
      os_log_type_t v178 = v386;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      uint64_t v179 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v179 - 8) + 56))(v178, 0, 1, v179);
      uint64_t v177 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1CB77CD90](v177);
    uint64_t v180 = v418;
    uint64_t v135 = v422;
    if (*(void *)((v450 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v450 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(char *, uint64_t))(v132 + 8))(v414, v133);
    id v136 = v421;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v414, v133);
    swift_bridgeObjectRelease();

    uint64_t v180 = v418;
  }
  (*(void (**)(char *, uint64_t))(v409 + 8))(v138, v410);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v420);
  (*(void (**)(char *, uint64_t))(v423 + 8))(v180, v413);
  return (void *)v450;
}

uint64_t ExperiencesResolver.extractExperiences(from:score:with:with:)(char **a1, uint64_t a2, double a3, uint64_t a4, char *a5, char *a6)
{
  double v416 = *(double *)&a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v394 = (char *)&v364 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v382 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  uint64_t v381 = *(void *)(v382 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v382);
  uint64_t v377 = (char *)&v364 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v386 = (char *)&v364 - v14;
  uint64_t v370 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  uint64_t v369 = *(void *)(v370 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v370);
  uint64_t v365 = (char *)&v364 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v368 = (char *)&v364 - v17;
  uint64_t v375 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  uint64_t v374 = *(void *)(v375 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v375);
  uint64_t v367 = (char *)&v364 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  v373 = (char *)&v364 - v20;
  uint64_t v380 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  uint64_t v379 = *(void *)(v380 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v380);
  uint64_t v372 = (char *)&v364 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v378 = (char *)&v364 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v385 = (uint64_t)&v364 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v395 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v389 = *(void *)(v395 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v395);
  uint64_t v384 = (char *)&v364 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v388 = (char *)&v364 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v391 = (char *)&v364 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v403 = (char *)&v364 - v32;
  uint64_t v405 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  uint64_t v406 = *(void *)(v405 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v405);
  uint64_t v390 = (char *)&v364 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v396 = (char *)&v364 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  v393 = (char *)&v364 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  v392 = (char *)&v364 - v40;
  MEMORY[0x1F4188790](v39);
  double v402 = (char *)&v364 - v41;
  uint64_t v417 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v411 = *(void *)(v417 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v417);
  v387 = (char *)&v364 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v376 = (char *)&v364 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v364 = (char *)&v364 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v366 = (char *)&v364 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v371 = (char *)&v364 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v383 = (char *)&v364 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v397 = (char *)&v364 - v55;
  MEMORY[0x1F4188790](v54);
  uint64_t v404 = (char *)&v364 - v56;
  uint64_t v420 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v422 = *(void *)(v420 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v420);
  uint64_t v409 = (char *)&v364 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v407 = (char *)&v364 - v60;
  MEMORY[0x1F4188790](v59);
  unsigned int v426 = (char *)&v364 - v61;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1F4188790](v62 - 8);
  uint64_t v398 = (char *)&v364 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v64 - 8);
  uint64_t v408 = (char *)&v364 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  uint64_t v67 = MEMORY[0x1F4188790](v66 - 8);
  uint64_t v413 = (char *)&v364 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v67);
  uint64_t v399 = (char *)&v364 - v69;
  uint64_t v401 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  uint64_t v400 = *(void *)(v401 - 8);
  MEMORY[0x1F4188790](v401);
  int v421 = (char *)&v364 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v425 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v424 = *(void *)(v425 - 8);
  MEMORY[0x1F4188790](v425);
  uint64_t v433 = (char *)&v364 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1F4188790](v72 - 8);
  v449 = (char *)&v364 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v448 = *(void *)(v74 - 8);
  uint64_t v75 = MEMORY[0x1F4188790](v74);
  v459 = (objc_class *)((char *)&v364 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v75);
  v446 = (char *)&v364 - v77;
  uint64_t v78 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  uint64_t v456 = *(void *)(v78 - 8);
  uint64_t v79 = MEMORY[0x1F4188790](v78);
  Class v447 = (char *)&v364 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v79);
  uint64_t v450 = (char *)&v364 - v81;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v82 - 8);
  v430 = (char *)&v364 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v434 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  uint64_t v431 = *(void *)(v434 - 8);
  uint64_t v84 = MEMORY[0x1F4188790](v434);
  uint64_t v423 = (char *)&v364 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v84);
  unsigned int v428 = (char *)&v364 - v86;
  v460 = (char *)type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  uint64_t v458 = *((void *)v460 - 1);
  MEMORY[0x1F4188790](v460);
  uint64_t v88 = (char *)&v364 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v437 = *(void *)(v89 - 8);
  uint64_t v90 = MEMORY[0x1F4188790](v89);
  uint64_t v412 = (char *)&v364 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  uint64_t v410 = (char *)&v364 - v93;
  MEMORY[0x1F4188790](v92);
  uint64_t v95 = (char *)&v364 - v94;
  uint64_t v427 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  uint64_t v435 = *(void *)(v427 - 8);
  MEMORY[0x1F4188790](v427);
  uint64_t v97 = (char *)&v364 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v440 = a1;
  uint64_t v98 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1) {
    uint64_t v98 = swift_once();
  }
  v457 = &v364;
  uint64_t v99 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v98);
  uint64_t v414 = a5;
  double v360 = *(double *)&a5;
  uint64_t v361 = a6;
  v415 = a6;
  uint64_t v362 = v432;
  uint64_t v363 = v97;
  int v429 = v97;
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  uint64_t v103 = (char *)&v364 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v104 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v99 + 200);
  uint64_t v438 = v89;
  uint64_t v362 = &v358;
  uint64_t v363 = (char *)v89;
  LOBYTE(v360) = 2;
  v104(0xD00000000000001ELL, 0x80000001C91A1580, 0, v103, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 129, "extractExperiences(from:score:with:with:)", 41, LODWORD(v360), partial apply for closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:));
  uint64_t v419 = 0;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v100);
  uint64_t v105 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  uint64_t v106 = MEMORY[0x1CB778940](v105);
  (*(void (**)(char *, char *))(v458 + 8))(v88, v460);
  uint64_t v107 = *(void *)(v106 + 16);
  uint64_t v108 = MEMORY[0x1E4FBC860];
  v436 = v95;
  if (v107)
  {
    uint64_t v110 = *(void *)(v456 + 16);
    uint64_t v109 = v456 + 16;
    unint64_t v111 = v106 + ((*(unsigned __int8 *)(v456 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v456 + 80));
    v457 = *(char ***)(v456 + 72);
    uint64_t v458 = v110;
    v456 += 88;
    LODWORD(v455) = *MEMORY[0x1E4F89368];
    int v445 = *MEMORY[0x1E4F89358];
    int v442 = *MEMORY[0x1E4F89360];
    uint64_t v454 = v448 + 56;
    v460 = (char *)(v109 - 8);
    unsigned int v439 = *MEMORY[0x1E4F9FF10];
    uint64_t v451 = (void (**)(uint64_t, void, uint64_t))(v448 + 104);
    unsigned int v441 = *MEMORY[0x1E4F9FF08];
    unsigned int v444 = *MEMORY[0x1E4F9FF18];
    v452 = (void (**)(char *, uint64_t, uint64_t))(v448 + 32);
    v453 = (void (*)(char *, uint64_t))(v448 + 48);
    uint64_t v418 = v106;
    swift_bridgeObjectRetain();
    unint64_t v112 = MEMORY[0x1E4FBC860];
    uint64_t v114 = (uint64_t)v449;
    Class v113 = v450;
    uint64_t v115 = v447;
    while (1)
    {
      uint64_t v116 = v74;
      uint64_t v117 = v78;
      uint64_t v118 = v78;
      uint64_t v119 = (void (*)(char *, char *, uint64_t))v458;
      ((void (*)(char *, unint64_t, uint64_t))v458)(v113, v111, v117);
      v119(v115, v113, v118);
      uint64_t v78 = v118;
      int v120 = (*(uint64_t (**)(char *, uint64_t))v456)(v115, v118);
      if (v120 == v455)
      {
        uint64_t v74 = v116;
        (*v451)(v114, v444, v116);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v454)(v114, 0, 1, v116);
      }
      else
      {
        uint64_t v74 = v116;
        if (v120 == v445)
        {
          (*v451)(v114, v441, v116);
        }
        else
        {
          if (v120 != v442)
          {
            unint64_t v443 = v112;
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v128 = type metadata accessor for Logger();
            __swift_project_value_buffer(v128, (uint64_t)static Logger.pommes);
            id v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v129, v130))
            {
              uint64_t v131 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v131 = 0;
              _os_log_impl(&dword_1C8F83000, v129, v130, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v131, 2u);
              uint64_t v132 = v131;
              uint64_t v114 = (uint64_t)v449;
              MEMORY[0x1CB77E470](v132, -1, -1);
            }

            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v454)(v114, 1, 1, v116);
            (*(void (**)(char *, uint64_t))v460)(v115, v78);
            unint64_t v112 = v443;
            Class v113 = v450;
            goto LABEL_14;
          }
          (*v451)(v114, v439, v116);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v454)(v114, 0, 1, v116);
      }
LABEL_14:
      (*(void (**)(char *, uint64_t))v460)(v113, v78);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v453)(v114, 1, v74) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v114, (uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        uint64_t v121 = v109;
        unint64_t v122 = *v452;
        unint64_t v123 = v446;
        (*v452)(v446, v114, v74);
        v122((char *)v459, (uint64_t)v123, v74);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v112 + 16) + 1, 1, v112);
        }
        unint64_t v125 = *(void *)(v112 + 16);
        unint64_t v124 = *(void *)(v112 + 24);
        uint64_t v126 = v112;
        uint64_t v109 = v121;
        if (v125 >= v124 >> 1) {
          uint64_t v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, v112);
        }
        uint64_t v115 = v447;
        uint64_t v127 = v448;
        *(void *)(v126 + 16) = v125 + 1;
        unint64_t v112 = v126;
        v122((char *)(v126+ ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(void *)(v127 + 72) * v125), (uint64_t)v459, v74);
        uint64_t v114 = (uint64_t)v449;
        Class v113 = v450;
      }
      v111 += (unint64_t)v457;
      if (!--v107)
      {
        uint64_t v133 = swift_bridgeObjectRelease_n();
        uint64_t v134 = v435;
        uint64_t v135 = (char **)v112;
        uint64_t v108 = MEMORY[0x1E4FBC860];
        goto LABEL_27;
      }
    }
  }
  uint64_t v133 = swift_bridgeObjectRelease();
  uint64_t v135 = (char **)MEMORY[0x1E4FBC860];
  uint64_t v134 = v435;
LABEL_27:
  MEMORY[0x1F4188790](v133);
  uint64_t v362 = v135;
  id v136 = (objc_class *)type metadata accessor for PommesRenderOptions();
  id v137 = objc_allocWithZone(v136);
  uint64_t v138 = (char *)PommesRenderOptions.init(_:)();
  uint64_t v463 = v108;
  uint64_t v139 = (uint64_t)v430;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  uint64_t v140 = v431;
  uint64_t v141 = v434;
  int v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v431 + 48))(v139, 1, v434);
  uint64_t v143 = v437;
  uint64_t v144 = v438;
  if (v142 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v139, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_62:
    int v207 = v436;
LABEL_63:

    (*(void (**)(char *, uint64_t))(v143 + 8))(v207, v144);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v429, v427);
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v443 = (unint64_t)v135;
  os_log_type_t v145 = v428;
  (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v428, v139, v141);
  uint64_t v146 = v423;
  (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v423, v145, v141);
  int v147 = (*(uint64_t (**)(char *, uint64_t))(v140 + 88))(v146, v141);
  if (v147 == *MEMORY[0x1E4F88720])
  {
    (*(void (**)(char *, uint64_t))(v140 + 96))(v146, v141);
    (*(void (**)(char *, char *, uint64_t))(v424 + 32))(v433, v146, v425);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v148 = type metadata accessor for Logger();
    __swift_project_value_buffer(v148, (uint64_t)static Logger.pommes);
    uint64_t v149 = Logger.logObject.getter();
    os_log_type_t v150 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v149, v150))
    {
      os_log_type_t v151 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v151 = 0;
      _os_log_impl(&dword_1C8F83000, v149, v150, "Adding a server driven experience", v151, 2u);
      MEMORY[0x1CB77E470](v151, -1, -1);
    }

    char v152 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter();
    char v153 = v421;
    v460 = v138;
    if (v152)
    {
      v459 = v136;
      uint64_t v154 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      MEMORY[0x1CB778770](v154);
      id v155 = *(void (**)(char *, uint64_t))(v400 + 8);
      uint64_t v156 = v153;
      uint64_t v157 = v401;
      v155(v156, v401);
      (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v410, v436, v438);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
      id v158 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
      uint64_t v159 = v138;
      uint64_t v160 = v421;
      uint64_t v161 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      char v162 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
      uint64_t v458 = (uint64_t)v155;
      v155(v160, v157);
      if (v162)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
        type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
        id v163 = v161;
        Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
        uint64_t v141 = v434;
        Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
        ((void (*)(char *, uint64_t))v458)(v160, v157);
        dispatch thunk of Experience.associatedEntities.setter();
      }
      if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
      {
        unint64_t v164 = v408;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
        uint64_t v165 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 0, 1, v165);
        dispatch thunk of GenericExperience.serverSuggestions.setter();
      }
      id v166 = v161;
      MEMORY[0x1CB77CD90]();
      id v136 = v459;
      if (*(void *)((v463 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v463 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v138 = v460;
    }
    uint64_t v167 = MEMORY[0x1CB779290]();
    MEMORY[0x1F4188790](v167);
    double v360 = a3;
    char v168 = v436;
    uint64_t v361 = v436;
    uint64_t v362 = v440;
    uint64_t v363 = v138;
    uint64_t v169 = specialized Sequence.compactMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:), (uint64_t)&v358, v167, MEMORY[0x1E4F89260]);
    swift_bridgeObjectRelease();
    unint64_t v170 = v169;
    uint64_t v171 = v433;
    uint64_t v172 = specialized Array.append<A>(contentsOf:)(v170);
    uint64_t v173 = *(void *)(MEMORY[0x1CB779280](v172) + 16);
    swift_bridgeObjectRelease();
    if (v173)
    {
      char v174 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
      char v175 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
      v459 = (objc_class *)MEMORY[0x1CB779280]();
      (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v412, v168, v438);
      uint64_t v176 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
      MEMORY[0x1F4188790](v176);
      uint64_t v177 = v415;
      *(&v364 - 8) = v414;
      *(&v364 - 7) = v177;
      uint64_t v358 = v171;
      LOBYTE(v359) = v174 & 1;
      double v360 = v416;
      uint64_t v361 = (char *)v432;
      LOBYTE(v362) = v175 & 1;
      uint64_t v363 = (char *)v443;
      id v178 = objc_allocWithZone(v136);
      PommesRenderOptions.init(_:)();
      swift_bridgeObjectRelease();
      id v179 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
      id v180 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter())
      {
        int v181 = v408;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
        uint64_t v182 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v182 - 8) + 56))(v181, 0, 1, v182);
        dispatch thunk of GenericExperience.serverSuggestions.setter();
      }
      uint64_t v183 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
      if (v183)
      {
        uint64_t v184 = v398;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
        uint64_t v185 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v185 - 8) + 56))(v184, 0, 1, v185);
        uint64_t v183 = dispatch thunk of GenericExperience.sageExperience.setter();
      }
      MEMORY[0x1CB77CD90](v183);
      uint64_t v186 = v434;
      BOOL v187 = v460;
      if (*(void *)((v463 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v463 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      (*(void (**)(char *, uint64_t))(v140 + 8))(v428, v186);
      uint64_t v188 = v437;
      uint64_t v171 = v433;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v140 + 8))(v428, v141);
      swift_bridgeObjectRelease();

      uint64_t v188 = v437;
    }
    (*(void (**)(char *, uint64_t))(v424 + 8))(v171, v425);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v436, v438);
    (*(void (**)(char *, uint64_t))(v435 + 8))(v429, v427);
    return v463;
  }
  int v189 = v147;
  int v190 = *MEMORY[0x1E4F88718];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v189 != v190)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v202 = type metadata accessor for Logger();
    __swift_project_value_buffer(v202, (uint64_t)static Logger.pommes);
    uint64_t v203 = Logger.logObject.getter();
    os_log_type_t v204 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v203, v204))
    {
      uint64_t v205 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v205 = 0;
      _os_log_impl(&dword_1C8F83000, v203, v204, "unexpected experience component", v205, 2u);
      MEMORY[0x1CB77E470](v205, -1, -1);
    }

    uint64_t v206 = *(void (**)(char *, uint64_t))(v140 + 8);
    v206(v428, v141);
    v206(v146, v141);
    goto LABEL_62;
  }
  (*(void (**)(char *, uint64_t))(v140 + 96))(v146, v141);
  (*(void (**)(char *, char *, uint64_t))(v422 + 32))(v426, v146, v420);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v191 = type metadata accessor for Logger();
  v459 = (objc_class *)__swift_project_value_buffer(v191, (uint64_t)static Logger.pommes);
  uint64_t v192 = Logger.logObject.getter();
  os_log_type_t v193 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v192, v193))
  {
    uint64_t v194 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v194 = 0;
    _os_log_impl(&dword_1C8F83000, v192, v193, "Adding a client driven experience", v194, 2u);
    MEMORY[0x1CB77E470](v194, -1, -1);
  }

  uint64_t v195 = MEMORY[0x1CB779170]();
  uint64_t v196 = *(void *)(v195 + 16);
  uint64_t v197 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  uint64_t v198 = *(void *)(v197 - 8);
  v199 = v138;
  if (v196)
  {
    os_log_type_t v200 = v402;
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v197 - 8) + 16))(v402, v195+ ((*(unsigned __int8 *)(*(void *)(v197 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v197 - 8) + 80)), v197);
    uint64_t v201 = 0;
  }
  else
  {
    uint64_t v201 = 1;
    os_log_type_t v200 = v402;
  }
  v457 = *(char ***)(v198 + 56);
  uint64_t v458 = v198 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v457)(v200, v201, 1, v197);
  swift_bridgeObjectRelease();
  v455 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48);
  uint64_t v456 = v198 + 48;
  int v210 = v455(v200, 1, v197);
  uint64_t v211 = v411;
  v212 = v403;
  v460 = v199;
  uint64_t v454 = v198;
  if (v210 == 1)
  {
    uint64_t v213 = v143;
    uint64_t v214 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?;
    uint64_t v215 = (uint64_t)v200;
    goto LABEL_73;
  }
  uint64_t v216 = v397;
  Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
  (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v197);
  uint64_t v217 = v404;
  uint64_t v218 = v216;
  uint64_t v219 = v417;
  (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v404, v218, v417);
  Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
  uint64_t v220 = v406;
  uint64_t v221 = v405;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v406 + 48))(v212, 1, v405) == 1)
  {
    uint64_t v213 = v143;
    (*(void (**)(char *, uint64_t))(v211 + 8))(v217, v219);
    uint64_t v214 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?;
    uint64_t v215 = (uint64_t)v212;
LABEL_73:
    outlined destroy of MediaUserStateCenter?(v215, v214);
    uint64_t v222 = v420;
    uint64_t v223 = v407;
    uint64_t v224 = v422;
    v452 = *(void (***)(char *, uint64_t, uint64_t))(v422 + 16);
    ((void (*)(char *, char *, uint64_t))v452)(v407, v426, v420);
    uint64_t v225 = Logger.logObject.getter();
    LODWORD(v451) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v225, (os_log_type_t)v451))
    {
      uint64_t v226 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v226 = 67109120;
      uint64_t v227 = MEMORY[0x1CB779170]();
      if (*(void *)(v227 + 16))
      {
        uint64_t v228 = v454;
        uint64_t v229 = (uint64_t)v392;
        (*(void (**)(char *, unint64_t, uint64_t))(v454 + 16))(v392, v227 + ((*(unsigned __int8 *)(v454 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v454 + 80)), v197);
        uint64_t v230 = 0;
        uint64_t v231 = (uint64_t)v394;
      }
      else
      {
        uint64_t v230 = 1;
        uint64_t v231 = (uint64_t)v394;
        uint64_t v229 = (uint64_t)v392;
        uint64_t v228 = v454;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v457)(v229, v230, 1, v197);
      swift_bridgeObjectRelease();
      if (v455((char *)v229, 1, v197) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v229, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        int v247 = 0;
        uint64_t v248 = 1;
      }
      else
      {
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v229, v197);
        uint64_t v248 = 0;
        int v247 = 1;
      }
      uint64_t v249 = v422;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v211 + 56))(v231, v248, 1, v417);
      outlined destroy of MediaUserStateCenter?(v231, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
      uint64_t v250 = *(void (**)(char *, uint64_t))(v249 + 8);
      uint64_t v251 = v420;
      v453 = v250;
      v250(v407, v420);
      LODWORD(v462) = v247;
      uint64_t v232 = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v225, (os_log_type_t)v451, "Has clientComponent? %{BOOL}d", v226, 8u);
      MEMORY[0x1CB77E470](v226, -1, -1);
      uint64_t v233 = v437;
      uint64_t v141 = v434;
    }
    else
    {
      v453 = *(void (**)(char *, uint64_t))(v224 + 8);
      v453(v223, v222);
      uint64_t v232 = v222;
      uint64_t v233 = v213;
      uint64_t v228 = v454;
    }

    uint64_t v252 = v409;
    ((void (*)(char *, char *, uint64_t))v452)(v409, v426, v232);
    int v253 = Logger.logObject.getter();
    int v254 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v253, (os_log_type_t)v254))
    {
      uint64_t v259 = v453;
      v453(v252, v232);
      uint64_t v260 = v435;
      uint64_t v261 = v427;
      uint64_t v262 = v436;
      uint64_t v263 = v232;
LABEL_95:

      v259(v426, v263);
      (*(void (**)(char *, uint64_t))(v431 + 8))(v428, v141);
      (*(void (**)(char *, uint64_t))(v233 + 8))(v262, v438);
      (*(void (**)(char *, uint64_t))(v260 + 8))(v429, v261);
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v255 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v255 = 67109120;
    uint64_t v256 = MEMORY[0x1CB779170]();
    if (*(void *)(v256 + 16))
    {
      uint64_t v257 = (uint64_t)v393;
      (*(void (**)(char *, unint64_t, uint64_t))(v228 + 16))(v393, v256 + ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80)), v197);
      uint64_t v258 = 0;
    }
    else
    {
      uint64_t v258 = 1;
      uint64_t v257 = (uint64_t)v393;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v457)(v257, v258, 1, v197);
    swift_bridgeObjectRelease();
    int v264 = v455((char *)v257, 1, v197);
    LODWORD(v459) = v254;
    if (v264 == 1)
    {
      outlined destroy of MediaUserStateCenter?(v257, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
      uint64_t v265 = (uint64_t)v391;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v406 + 56))(v391, 1, 1, v405);
      uint64_t v260 = v435;
      uint64_t v261 = v427;
      uint64_t v262 = v436;
    }
    else
    {
      v266 = v387;
      Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
      (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v257, v197);
      uint64_t v265 = (uint64_t)v391;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
      (*(void (**)(char *, uint64_t))(v211 + 8))(v266, v417);
      int v267 = 1;
      int v268 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v406 + 48))(v265, 1, v405);
      uint64_t v260 = v435;
      uint64_t v261 = v427;
      uint64_t v262 = v436;
      if (v268 != 1)
      {
LABEL_94:
        outlined destroy of MediaUserStateCenter?(v265, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
        uint64_t v269 = v420;
        uint64_t v259 = v453;
        v453(v409, v420);
        LODWORD(v462) = v267;
        uint64_t v263 = v269;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v253, (os_log_type_t)v459, "Has domainComponent? %{BOOL}d", v255, 8u);
        MEMORY[0x1CB77E470](v255, -1, -1);
        uint64_t v141 = v434;
        uint64_t v233 = v437;
        goto LABEL_95;
      }
    }
    int v267 = 0;
    goto LABEL_94;
  }
  os_log_type_t v234 = v396;
  (*(void (**)(char *, char *, uint64_t))(v220 + 32))(v396, v212, v221);
  uint64_t v235 = v390;
  (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v390, v234, v221);
  int v236 = (*(uint64_t (**)(char *, uint64_t))(v220 + 88))(v235, v221);
  if (v236 == *MEMORY[0x1E4F895B0])
  {
    (*(void (**)(char *, uint64_t))(v220 + 96))(v235, v221);
    (*(void (**)(char *, char *, uint64_t))(v389 + 32))(v388, v235, v395);
    uint64_t v237 = v411;
    unint64_t v238 = v383;
    uint64_t v239 = v417;
    (*(void (**)(char *, char *, uint64_t))(v411 + 16))(v383, v404, v417);
    int v240 = Logger.logObject.getter();
    os_log_type_t v241 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v240, v241))
    {
      uint64_t v242 = (uint8_t *)swift_slowAlloc();
      uint64_t v243 = swift_slowAlloc();
      uint64_t v462 = v243;
      *(_DWORD *)uint64_t v242 = 136315138;
      uint64_t v244 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      uint64_t v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v244, v245, &v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v246 = *(objc_class **)(v237 + 8);
      uint64_t v458 = (v237 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v246;
      ((void (*)(char *, uint64_t))v246)(v238, v239);
      _os_log_impl(&dword_1C8F83000, v240, v241, "Adding AudioExperience with identifier %s to PommesResponse", v242, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v243, -1, -1);
      MEMORY[0x1CB77E470](v242, -1, -1);
    }
    else
    {
      id v281 = *(objc_class **)(v237 + 8);
      uint64_t v458 = (v237 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v281;
      ((void (*)(char *, uint64_t))v281)(v238, v239);
    }

    uint64_t v282 = *(void *)&v416;
    type metadata accessor for AudioExperience();
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
    uint64_t v283 = v389;
    uint64_t v284 = v388;
    (*(void (**)(char *, char *, uint64_t))(v389 + 16))(v384, v388, v395);
    uint64_t v285 = v437;
    (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v410, v436, v438);
    outlined init with copy of ClientExperienceSignals?(v282, v385);
    uint64_t v286 = v460;
    id v287 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v288 = swift_allocObject();
    *(_OWORD *)(v288 + 16) = xmmword_1C9195B30;
    *(void *)(v288 + 32) = v287;
    uint64_t v462 = v288;
    specialized Array._endMutation()();
    uint64_t v208 = v462;

    (*(void (**)(char *, uint64_t))(v283 + 8))(v284, v395);
    (*(void (**)(char *, uint64_t))(v406 + 8))(v396, v405);
    ((void (*)(char *, uint64_t))v459)(v404, v417);
    (*(void (**)(char *, uint64_t))(v422 + 8))(v426, v420);
    (*(void (**)(char *, uint64_t))(v431 + 8))(v428, v434);
    (*(void (**)(char *, uint64_t))(v285 + 8))(v436, v438);
    goto LABEL_106;
  }
  int v207 = v436;
  uint64_t v270 = v417;
  if (v236 == *MEMORY[0x1E4F895B8])
  {
    (*(void (**)(char *, uint64_t))(v220 + 96))(v235, v221);
    (*(void (**)(char *, char *, uint64_t))(v381 + 32))(v386, v235, v382);
    uint64_t v271 = v411;
    uint64_t v272 = v376;
    (*(void (**)(char *, char *, uint64_t))(v411 + 16))(v376, v404, v270);
    unint64_t v273 = Logger.logObject.getter();
    os_log_type_t v274 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v273, v274))
    {
      uint64_t v275 = v270;
      uint64_t v276 = (uint8_t *)swift_slowAlloc();
      uint64_t v277 = swift_slowAlloc();
      uint64_t v462 = v277;
      *(_DWORD *)uint64_t v276 = 136315138;
      uint64_t v278 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      uint64_t v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v278, v279, &v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v280 = *(objc_class **)(v271 + 8);
      uint64_t v458 = (v271 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v280;
      ((void (*)(char *, uint64_t))v280)(v272, v275);
      _os_log_impl(&dword_1C8F83000, v273, v274, "Adding VideoExperience with identifier %s to PommesResponse", v276, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v277, -1, -1);
      MEMORY[0x1CB77E470](v276, -1, -1);
    }
    else
    {
      id v300 = *(objc_class **)(v271 + 8);
      uint64_t v458 = (v271 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v300;
      ((void (*)(char *, uint64_t))v300)(v272, v270);
    }

    Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
    uint64_t v301 = v381;
    uint64_t v302 = v382;
    (*(void (**)(char *, char *, uint64_t))(v381 + 16))(v377, v386, v382);
    uint64_t v303 = v437;
    uint64_t v304 = v438;
    (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v410, v436, v438);
    objc_allocWithZone((Class)type metadata accessor for VideoExperience());
    os_log_type_t v305 = v460;
    id v306 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v307 = swift_allocObject();
    *(_OWORD *)(v307 + 16) = xmmword_1C9195B30;
    *(void *)(v307 + 32) = v306;
    uint64_t v462 = v307;
    specialized Array._endMutation()();
    uint64_t v208 = v462;

    (*(void (**)(char *, uint64_t))(v301 + 8))(v386, v302);
    (*(void (**)(char *, uint64_t))(v406 + 8))(v396, v405);
    ((void (*)(char *, uint64_t))v459)(v404, v417);
    (*(void (**)(char *, uint64_t))(v422 + 8))(v426, v420);
    (*(void (**)(char *, uint64_t))(v431 + 8))(v428, v434);
    (*(void (**)(char *, uint64_t))(v303 + 8))(v436, v304);
    goto LABEL_106;
  }
  uint64_t v138 = v199;
  uint64_t v289 = v431;
  if (v236 == *MEMORY[0x1E4F895A0])
  {
    (*(void (**)(char *, uint64_t))(v220 + 96))(v235, v221);
    (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v378, v235, v380);
    uint64_t v290 = v411;
    unint64_t v291 = v371;
    (*(void (**)(char *, char *, uint64_t))(v411 + 16))(v371, v404, v270);
    uint64_t v292 = Logger.logObject.getter();
    os_log_type_t v293 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v292, v293))
    {
      uint64_t v294 = v270;
      uint64_t v295 = (uint8_t *)swift_slowAlloc();
      uint64_t v296 = swift_slowAlloc();
      uint64_t v462 = v296;
      *(_DWORD *)uint64_t v295 = 136315138;
      uint64_t v297 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      uint64_t v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v297, v298, &v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v299 = *(objc_class **)(v290 + 8);
      uint64_t v458 = (v290 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v299;
      ((void (*)(char *, uint64_t))v299)(v291, v294);
      _os_log_impl(&dword_1C8F83000, v292, v293, "Adding GeoExperience with identifier %s to PommesResponse", v295, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v296, -1, -1);
      MEMORY[0x1CB77E470](v295, -1, -1);
    }
    else
    {
      unint64_t v318 = *(objc_class **)(v290 + 8);
      uint64_t v458 = (v290 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v318;
      ((void (*)(char *, uint64_t))v318)(v291, v270);
    }

    Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
    uint64_t v319 = v379;
    uint64_t v320 = v378;
    (*(void (**)(char *, char *, uint64_t))(v379 + 16))(v372, v378, v380);
    uint64_t v321 = v437;
    uint64_t v322 = v438;
    (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v410, v436, v438);
    objc_allocWithZone((Class)type metadata accessor for GeoExperience());
    uint64_t v323 = v460;
    id v324 = (id)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v325 = swift_allocObject();
    *(_OWORD *)(v325 + 16) = xmmword_1C9195B30;
    *(void *)(v325 + 32) = v324;
    uint64_t v462 = v325;
    specialized Array._endMutation()();
    uint64_t v208 = v462;

    (*(void (**)(char *, uint64_t))(v319 + 8))(v320, v380);
LABEL_117:
    (*(void (**)(char *, uint64_t))(v406 + 8))(v396, v405);
    ((void (*)(char *, uint64_t))v459)(v404, v417);
    (*(void (**)(char *, uint64_t))(v422 + 8))(v426, v420);
    (*(void (**)(char *, uint64_t))(v431 + 8))(v428, v434);
    (*(void (**)(char *, uint64_t))(v321 + 8))(v436, v322);
LABEL_106:
    (*(void (**)(char *, uint64_t))(v435 + 8))(v429, v427);
    return v208;
  }
  if (v236 == *MEMORY[0x1E4F895A8])
  {
    (*(void (**)(char *, uint64_t))(v220 + 96))(v235, v221);
    (*(void (**)(char *, char *, uint64_t))(v374 + 32))(v373, v235, v375);
    uint64_t v308 = v411;
    unint64_t v309 = v366;
    (*(void (**)(char *, char *, uint64_t))(v411 + 16))(v366, v404, v270);
    uint64_t v310 = Logger.logObject.getter();
    os_log_type_t v311 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v310, v311))
    {
      uint64_t v312 = v270;
      uint64_t v313 = (uint8_t *)swift_slowAlloc();
      uint64_t v314 = swift_slowAlloc();
      uint64_t v462 = v314;
      *(_DWORD *)uint64_t v313 = 136315138;
      uint64_t v315 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      uint64_t v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v315, v316, &v462);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v317 = *(objc_class **)(v308 + 8);
      uint64_t v458 = (v308 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v317;
      ((void (*)(char *, uint64_t))v317)(v309, v312);
      _os_log_impl(&dword_1C8F83000, v310, v311, "Adding AppsExperience with identfier %s to PommesResponse", v313, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v314, -1, -1);
      MEMORY[0x1CB77E470](v313, -1, -1);
    }
    else
    {
      id v337 = *(objc_class **)(v308 + 8);
      uint64_t v458 = (v308 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v459 = v337;
      ((void (*)(char *, uint64_t))v337)(v309, v270);
    }

    Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
    uint64_t v338 = v374;
    uint64_t v339 = v373;
    (*(void (**)(char *, char *, uint64_t))(v374 + 16))(v367, v373, v375);
    uint64_t v321 = v437;
    uint64_t v322 = v438;
    (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v410, v436, v438);
    objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
    uint64_t v340 = v460;
    id v341 = (id)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v342 = swift_allocObject();
    *(_OWORD *)(v342 + 16) = xmmword_1C9195B30;
    *(void *)(v342 + 32) = v341;
    uint64_t v462 = v342;
    specialized Array._endMutation()();
    uint64_t v208 = v462;

    (*(void (**)(char *, uint64_t))(v338 + 8))(v339, v375);
    goto LABEL_117;
  }
  if (v236 != *MEMORY[0x1E4F89598])
  {
    id v343 = Logger.logObject.getter();
    os_log_type_t v344 = static os_log_type_t.error.getter();
    BOOL v345 = os_log_type_enabled(v343, v344);
    uint64_t v134 = v435;
    if (v345)
    {
      double v346 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v346 = 0;
      _os_log_impl(&dword_1C8F83000, v343, v344, "Unexpected DomainComponent encountered when building Client Driven experience", v346, 2u);
      MEMORY[0x1CB77E470](v346, -1, -1);
    }

    uint64_t v347 = *(void (**)(char *, uint64_t))(v406 + 8);
    uint64_t v348 = v405;
    v347(v396, v405);
    (*(void (**)(char *, uint64_t))(v411 + 8))(v404, v417);
    (*(void (**)(char *, uint64_t))(v422 + 8))(v426, v420);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v428, v141);
    v347(v390, v348);
    uint64_t v144 = v438;
    goto LABEL_63;
  }
  (*(void (**)(char *, uint64_t))(v220 + 96))(v235, v221);
  (*(void (**)(char *, char *, uint64_t))(v369 + 32))(v368, v235, v370);
  uint64_t v326 = v411;
  os_log_type_t v327 = v364;
  (*(void (**)(char *, char *, uint64_t))(v411 + 16))(v364, v404, v270);
  BOOL v328 = Logger.logObject.getter();
  os_log_type_t v329 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v328, v329))
  {
    uint64_t v330 = v270;
    uint64_t v331 = (uint8_t *)swift_slowAlloc();
    uint64_t v332 = swift_slowAlloc();
    uint64_t v462 = v332;
    *(_DWORD *)uint64_t v331 = 136315138;
    uint64_t v333 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
    uint64_t v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v333, v334, &v462);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v335 = *(objc_class **)(v326 + 8);
    uint64_t v458 = (v326 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v459 = v335;
    ((void (*)(char *, uint64_t))v335)(v327, v330);
    _os_log_impl(&dword_1C8F83000, v328, v329, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v331, 0xCu);
    swift_arrayDestroy();
    uint64_t v336 = v332;
    uint64_t v289 = v431;
    MEMORY[0x1CB77E470](v336, -1, -1);
    MEMORY[0x1CB77E470](v331, -1, -1);
  }
  else
  {
    v349 = *(objc_class **)(v326 + 8);
    uint64_t v458 = (v326 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v459 = v349;
    ((void (*)(char *, uint64_t))v349)(v327, v270);
  }

  uint64_t v350 = v435;
  Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
  uint64_t v351 = v369;
  uint64_t v352 = v368;
  uint64_t v353 = v370;
  (*(void (**)(char *, char *, uint64_t))(v369 + 16))(v365, v368, v370);
  uint64_t v354 = v437;
  (*(void (**)(char *, char *, uint64_t))(v437 + 16))(v410, v436, v438);
  id v355 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
  id v356 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  dispatch thunk of Experience.associatedEntities.setter();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v357 = swift_allocObject();
  *(_OWORD *)(v357 + 16) = xmmword_1C9195B30;
  *(void *)(v357 + 32) = v356;
  uint64_t v462 = v357;
  specialized Array._endMutation()();
  uint64_t v208 = v462;

  (*(void (**)(char *, uint64_t))(v351 + 8))(v352, v353);
  (*(void (**)(char *, uint64_t))(v406 + 8))(v396, v405);
  ((void (*)(char *, uint64_t))v459)(v404, v417);
  (*(void (**)(char *, uint64_t))(v422 + 8))(v426, v420);
  (*(void (**)(char *, uint64_t))(v289 + 8))(v428, v434);
  (*(void (**)(char *, uint64_t))(v354 + 8))(v436, v438);
  (*(void (**)(char *, uint64_t))(v350 + 8))(v429, v427);
  return v208;
}

uint64_t closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, char *a2@<X3>, char *a3@<X4>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v20 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char **)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  uint64_t v18 = ExperiencesResolver.extractExperiences(from:score:with:with:)(v15, a1, a5, v17, a2, a3);
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  uint64_t result = (*(uint64_t (**)(char **, uint64_t))(v13 + 8))(v15, v12);
  *uint64_t v20 = v18;
  return result;
}

uint64_t partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)()
{
  return partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(void, void, void, void, void, double))closure #1 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, char *a2@<X3>, char *a3@<X4>, void *a4@<X8>, double a5@<D0>)
{
  uint64_t v6 = v5;
  uint64_t v12 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  uint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v19 = a4;
    uint64_t v14 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    uint64_t v15 = (char **)(v12 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
    uint64_t v16 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      closure #1 in closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(v15, a1, a2, a3, (uint64_t *)&v20, a5);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      specialized Array.append<A>(contentsOf:)(v20);
      uint64_t v15 = (char **)((char *)v15 + v16);
      if (!--v13)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v18 = v21;
        a4 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_7:
    *a4 = v18;
  }
  return result;
}

uint64_t partial apply for closure #2 in ExperiencesResolver.defaultExperiences(from:with:)()
{
  return partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(void, void, void, void, void, double))closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(uint64_t (*a1)(void, void, void, void, void, double))
{
  return a1(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)(v1 + 48));
}

uint64_t closure #1 in closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(char **a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, char *a4@<X4>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v17 = ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a6, v16, a3, a4);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  *a5 = v17;
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.containsDelayedActionComponent(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v5 = *(void *)(v24 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v24);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1CB779280](v6);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v23 = v9;
    uint64_t v13 = v9 + ((v12 + 32) & ~v12);
    int v14 = *MEMORY[0x1E4F894E8];
    uint64_t v15 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v16 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v17 = *(void *)(v11 + 72);
    do
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v4, 1, v18) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v4, v18) == v14)
      {
        (*(void (**)(char *, uint64_t))(v19 + 96))(v4, v18);
        uint64_t v20 = v24;
        (*v15)(v8, v4, v24);
        char v21 = v25(v8);
        (*v16)(v8, v20);
        if (v21)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v18);
      }
      v13 += v17;
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  switch(v8 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v7, v8);
      if ((int)v9 != v9 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 2uLL:
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v12 = *(void *)(v7 + 24);
      outlined consume of Data._Representation(v7, v8);
      if (v11 != v12) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3uLL:
      outlined consume of Data._Representation(v7, v8);
      goto LABEL_9;
    default:
      outlined consume of Data._Representation(v7, v8);
      if ((v10 & 0xFF000000000000) != 0) {
LABEL_7:
      }
        uint64_t v13 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
      else {
LABEL_9:
      }
        uint64_t v13 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      switch(v14 >> 62)
      {
        case 1uLL:
          if ((int)v13 != v13 >> 32) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 2uLL:
          if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_23;
        default:
          if ((v14 & 0xFF000000000000) != 0)
          {
LABEL_12:
            uint64_t v38 = a2;
            if (one-time initialization token for shared != -1) {
              uint64_t v13 = swift_once();
            }
            v37[1] = v37;
            uint64_t v17 = static PerformanceUtil.shared;
            MEMORY[0x1F4188790](v13);
            uint64_t v35 = (int *)v15;
            unint64_t v36 = v16;
            uint64_t v18 = type metadata accessor for Date();
            uint64_t v19 = *(void *)(v18 - 8);
            MEMORY[0x1F4188790](v18);
            char v21 = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
            Date.init()();
            uint64_t v22 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t))(*(void *)v17 + 200);
            uint64_t v35 = &v34;
            unint64_t v36 = v4;
            LOBYTE(v34) = 2;
            v22(0xD000000000000030, 0x80000001C91A15D0, 0, v21, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 389, "userDialogAct(from:)", 20, v34, a1);
            (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
            uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
            uint64_t v24 = *(void *)(v23 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v6, 1, v23) == 1)
            {
              outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v25 = type metadata accessor for Logger();
              __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
              uint64_t v26 = Logger.logObject.getter();
              os_log_type_t v27 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v26, v27))
              {
                uint64_t v28 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v28 = 0;
                _os_log_impl(&dword_1C8F83000, v26, v27, "Unable to deserialize UserDialogAct from ServerUnderstanding", v28, 2u);
                MEMORY[0x1CB77E470](v28, -1, -1);
              }

              Siri_Nlu_External_UserDialogAct.init()();
              return outlined consume of Data._Representation(v15, v16);
            }
            else
            {
              outlined consume of Data._Representation(v15, v16);
              return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v38, v6, v23);
            }
          }
          else
          {
LABEL_23:
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v30 = type metadata accessor for Logger();
            __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
            uint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v33 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v33 = 0;
              _os_log_impl(&dword_1C8F83000, v31, v32, "Empty UDA data in server understanding.", v33, 2u);
              MEMORY[0x1CB77E470](v33, -1, -1);
            }

            Siri_Nlu_External_UserDialogAct.init()();
            return outlined consume of Data._Representation(v15, v16);
          }
      }
  }
}

uint64_t static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  switch(v6 >> 62)
  {
    case 1uLL:
      outlined consume of Data._Representation(v5, v6);
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 2uLL:
      uint64_t v9 = *(void *)(v5 + 16);
      uint64_t v10 = *(void *)(v5 + 24);
      outlined consume of Data._Representation(v5, v6);
      if (v9 != v10) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3uLL:
      outlined consume of Data._Representation(v5, v6);
      goto LABEL_9;
    default:
      outlined consume of Data._Representation(v5, v6);
      if ((v8 & 0xFF000000000000) != 0) {
LABEL_7:
      }
        uint64_t v11 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
      else {
LABEL_9:
      }
        uint64_t v11 = Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      switch(v12 >> 62)
      {
        case 1uLL:
          if ((int)v11 != v11 >> 32) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 2uLL:
          if (*(void *)(v11 + 16) == *(void *)(v11 + 24)) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_23;
        default:
          if ((v12 & 0xFF000000000000) != 0)
          {
LABEL_12:
            v35[0] = a1;
            if (one-time initialization token for shared != -1) {
              uint64_t v11 = swift_once();
            }
            uint64_t v15 = static PerformanceUtil.shared;
            MEMORY[0x1F4188790](v11);
            uint64_t v33 = (int *)v13;
            unint64_t v34 = v14;
            uint64_t v16 = type metadata accessor for Date();
            uint64_t v17 = *(void *)(v16 - 8);
            MEMORY[0x1F4188790](v16);
            uint64_t v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
            Date.init()();
            uint64_t v20 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v15 + 200);
            uint64_t v33 = &v32;
            unint64_t v34 = v2;
            LOBYTE(v32) = 2;
            v20(0xD000000000000030, 0x80000001C91A15D0, 0, v19, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 389, "userDialogAct(from:)", 20, v32, closure #1 in static ExperiencesResolver.userDialogAct(from:)partial apply);
            (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
            uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
            uint64_t v22 = *(void *)(v21 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v4, 1, v21) == 1)
            {
              outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v23 = type metadata accessor for Logger();
              __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
              uint64_t v24 = Logger.logObject.getter();
              os_log_type_t v25 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v24, v25))
              {
                uint64_t v26 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v26 = 0;
                _os_log_impl(&dword_1C8F83000, v24, v25, "Unable to deserialize UserDialogAct from ServerUnderstanding", v26, 2u);
                MEMORY[0x1CB77E470](v26, -1, -1);
              }

              Siri_Nlu_External_UserDialogAct.init()();
              return outlined consume of Data._Representation(v13, v14);
            }
            else
            {
              outlined consume of Data._Representation(v13, v14);
              return (*(uint64_t (**)(void, char *, uint64_t))(v22 + 32))(v35[0], v4, v21);
            }
          }
          else
          {
LABEL_23:
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v28 = type metadata accessor for Logger();
            __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
            uint64_t v29 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v29, v30))
            {
              uint64_t v31 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v31 = 0;
              _os_log_impl(&dword_1C8F83000, v29, v30, "Empty UDA data in server understanding.", v31, 2u);
              MEMORY[0x1CB77E470](v31, -1, -1);
            }

            Siri_Nlu_External_UserDialogAct.init()();
            return outlined consume of Data._Representation(v13, v14);
          }
      }
  }
}

uint64_t closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)@<X0>(uint64_t a1@<X1>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v21 = a3;
  id v20 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v19 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1CB778770](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
  id v12 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
  id v13 = v20;
  unint64_t v14 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
  if (Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
    type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
    id v15 = v14;
    Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
    dispatch thunk of Experience.associatedEntities.setter();
  }
  uint64_t result = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter();
  if (result)
  {
    uint64_t v17 = v19;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
    uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
    uint64_t result = dispatch thunk of GenericExperience.serverSuggestions.setter();
  }
  *uint64_t v21 = v14;
  return result;
}

uint64_t specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for ClientExperienceSignals();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for ClientExperienceSignals();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for ClientExperienceSignals();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = a8;
  int v19 = a6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v14);
  uint64_t v15 = type metadata accessor for ClientExperienceSignals();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v11);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t protocol witness for ExperiencesResolver.extractExperiences(from:score:with:with:) in conformance SportsPersonalizationExperiencesResolver(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a4, a3, (void (**)(Class, uint64_t))partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:with:), (void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:));
}

uint64_t *protocol witness for ExperiencesResolver.defaultExperiences(from:with:) in conformance CallBusinessNoResultsExperiencesResolver(uint64_t *a1, uint64_t a2)
{
  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, *v2);
}

void *protocol witness for ExperiencesResolver.extractExperiences(from:score:with:with:) in conformance CallBusinessNoResultsExperiencesResolver(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a4, a3, *v4);
}

uint64_t protocol witness for ExperiencesResolver.extractExperiences(from:score:with:with:) in conformance DefaultExperiencesResolver(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, a2, a4, a3, (void (**)(Class, uint64_t))partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:with:), (void *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:));
}

uint64_t partial apply for closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:)@<X0>(uint64_t a1@<X8>)
{
  return static ExperiencesResolver.userDialogAct(from:)(a1);
}

uint64_t outlined init with copy of ClientExperienceSignals?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)@<X0>(void *a1@<X8>)
{
  return closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)(*(void *)(v1 + 24), *(void **)(v1 + 40), a1);
}

uint64_t partial apply for closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(uint64_t a1)
{
  return closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16));
}

uint64_t dispatch thunk of ExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ExperiencesResolver.extractExperiences(from:score:with:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:with:)@<X0>(uint64_t a1@<X8>)
{
  return specialized static ExperiencesResolver.userDialogAct(from:)((uint64_t)partial apply for closure #1 in static ExperiencesResolver.userDialogAct(from:), a1);
}

{
  return specialized static ExperiencesResolver.userDialogAct(from:)((uint64_t)closure #1 in static ExperiencesResolver.userDialogAct(from:)partial apply, a1);
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct)
  {
    type metadata accessor for Siri_Nlu_External_UserDialogAct();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct);
  }
  return result;
}

uint64_t partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(uint64_t a1)
{
  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:with:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:with:)()
{
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)partial apply@<X0>(void *a1@<X8>)
{
  return partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:with:)(a1);
}

uint64_t closure #1 in static ExperiencesResolver.userDialogAct(from:)partial apply@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in static ExperiencesResolver.userDialogAct(from:)(a1);
}

uint64_t specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SportsResolverMetrics();
  uint64_t v85 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v90 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v89 = (uint64_t)&v78 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v81 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v91 = (uint64_t)&v78 - v17;
  MEMORY[0x1F4188790](v16);
  int v19 = (char *)&v78 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v79 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v78 - v23;
  uint64_t v25 = type metadata accessor for SportsResolverConfig();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v87 = v25;
  uint64_t v88 = v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v82 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v92 = (char *)&v78 - v29;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v32 = v80(v19, 1, v30);
  uint64_t v86 = v6;
  uint64_t v83 = a3;
  uint64_t v84 = v11;
  if (v32 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  }
  else
  {
    uint64_t v33 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
    uint64_t v36 = *(void *)(v35 - 8);
    if (v34)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v24, v33+ ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v35 - 8) + 80)), v35);
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v24, v37, 1, v35);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v24, 1, v35) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    }
    else
    {
      Apple_Parsec_Siri_Context_ResultEntity.name.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v35);
    }
  }
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  uint64_t v38 = v91;
  outlined init with copy of MediaUserStateCenter?(a2, v91, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v95 = v78;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v42 = v38;
    uint64_t v43 = v81;
    outlined init with copy of MediaUserStateCenter?(v42, v81, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    if (v80((char *)v43, 1, v30) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v44 = 0xE700000000000000;
      uint64_t v45 = v87;
      uint64_t v46 = v88;
      uint64_t v47 = 0x6E776F6E6B6E75;
    }
    else
    {
      uint64_t v51 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v43, v30);
      uint64_t v52 = *(void *)(v51 + 16);
      uint64_t v53 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      uint64_t v54 = *(void *)(v53 - 8);
      if (v52)
      {
        uint64_t v55 = (uint64_t)v79;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v79, v51+ ((*(unsigned __int8 *)(*(void *)(v53 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v53 - 8) + 80)), v53);
        uint64_t v56 = 0;
        uint64_t v46 = v88;
      }
      else
      {
        uint64_t v56 = 1;
        uint64_t v46 = v88;
        uint64_t v55 = (uint64_t)v79;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v55, v56, 1, v53);
      swift_bridgeObjectRelease();
      uint64_t v47 = 0x6E776F6E6B6E75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v44 = 0xE700000000000000;
      }
      else
      {
        uint64_t v47 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        unint64_t v44 = v57;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v53);
      }
      uint64_t v45 = v87;
    }
    uint64_t v58 = v78;
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v44, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v91, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v41 + 12) = 2080;
    if (a1 == 1)
    {
      unint64_t v59 = 0xEC000000656C6261;
      uint64_t v60 = 0x63696C7070616E69;
    }
    else if (a1 == 2)
    {
      unint64_t v59 = 0xEB0000000073756FLL;
      uint64_t v60 = 0x756769626D616E75;
    }
    else
    {
      uint64_t v93 = 0;
      unint64_t v94 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      uint64_t v93 = 0xD00000000000001ELL;
      unint64_t v94 = 0x80000001C91A1810;
      if (a1) {
        uint64_t v61 = 1702195828;
      }
      else {
        uint64_t v61 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v62 = 0xE400000000000000;
      }
      else {
        unint64_t v62 = 0xE500000000000000;
      }
      unint64_t v63 = v62;
      String.append(_:)(*(Swift::String *)&v61);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 41;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
      uint64_t v60 = v93;
      unint64_t v59 = v94;
    }
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v59, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    _os_log_impl(&dword_1C8F83000, v39, v40, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v58, -1, -1);
    MEMORY[0x1CB77E470](v41, -1, -1);

    uint64_t v48 = v86;
    uint64_t v50 = v89;
    uint64_t v49 = v90;
  }
  else
  {

    outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    uint64_t v48 = v86;
    uint64_t v45 = v87;
    uint64_t v50 = v89;
    uint64_t v49 = v90;
    uint64_t v46 = v88;
  }
  uint64_t v65 = (uint64_t)v84;
  if (a1 == 1)
  {
    uint64_t v66 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v82, v92, v45);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    uint64_t v66 = 0;
  }
  uint64_t v67 = v85;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v50, v66, 1, v48);
  outlined init with copy of MediaUserStateCenter?(v50, v65, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v48) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v92, v45);
    return outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v49, v65, v48);
  SportsResolverMetrics.logSportsMetric()();
  if (v69)
  {
    id v70 = v69;
    id v71 = v69;
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v93 = v75;
      *(_DWORD *)uint64_t v74 = 136315138;
      swift_getErrorValue();
      uint64_t v76 = Error.localizedDescription.getter();
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v72, v73, "Logging sports metrics failed with: %s", v74, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v75, -1, -1);
      MEMORY[0x1CB77E470](v74, -1, -1);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v90, v48);
      outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v92, v87);
    }
  }
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v48);
  outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for SportsResolverMetrics?);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v92, v45);
}

BOOL DisambiguatedSportsExperiencesResult.recommendationFound.getter(uint64_t a1)
{
  return a1 != 0;
}

BOOL protocol witness for SportsPersonalizationResultMetric.recommendationFound.getter in conformance DisambiguatedSportsExperiencesResult()
{
  return *v0 != 0;
}

uint64_t SportsPersonalizationExperiencesResolver.inferenceApi.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1, a1);
}

uint64_t SportsPersonalizationExperiencesResolver.init(inferenceApi:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppDataProviding(a1, a2);
}

uint64_t *SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>));
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint8_t *v30;
  NSObject *v31;
  os_signpost_type_t v32;
  os_signpost_id_t v33;
  uint64_t v34;
  uint64_t v35;
  os_signpost_type_t v36;
  os_signpost_id_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v56;
  int *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;

  uint64_t v72 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v60);
  unint64_t v59 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  MEMORY[0x1F4188790](v6);
  Swift::String v64 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v73 = type metadata accessor for OSSignposter();
  unint64_t v63 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  unint64_t v62 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v67 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  if (one-time initialization token for shared != -1) {
    uint64_t v11 = swift_once();
  }
  uint64_t v12 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v11);
  id v70 = a1;
  unint64_t v57 = (int *)a1;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>)))(*(void *)v12 + 200);
  unint64_t v57 = &v56;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)]?);
  LOBYTE(v56) = 2;
  v17(&v75, 0xD000000000000030, 0x80000001C91A1630, 0, v16, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 44, "buildExperiences(from:with:)", 28, v56, partial apply for closure #1 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:));
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v18 = v75;
  if (v75)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    int v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    uint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.debug.getter();
    uint64_t v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = v70;
    if (v22)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1C8F83000, v20, v21, "Got a request that is applicable for sports personalization via alternative selection. Will attempt to select an alternative", v24, 2u);
      MEMORY[0x1CB77E470](v24, -1, -1);
    }

    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = v73;
    uint64_t v26 = __swift_project_value_buffer(v73, (uint64_t)static Signposter.pommes);
    uint64_t v28 = v62;
    uint64_t v27 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v26, v25);
    uint64_t v29 = v64;
    static OSSignpostID.exclusive.getter();
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    uint64_t v31 = OSSignposter.logHandle.getter();
    int v32 = static os_signpost_type_t.begin.getter();
    uint64_t v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C8F83000, v31, v32, v33, "selectSportsAlternative", "", v30, 2u);
    uint64_t v34 = v23;
    uint64_t v35 = v67;
    closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(v71, v18, v34, v67, v72, &v74);
    uint64_t v36 = static os_signpost_type_t.end.getter();
    uint64_t v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C8F83000, v31, v36, v37, "selectSportsAlternative", "", v30, 2u);

    uint64_t v38 = v74;
    MEMORY[0x1CB77E470](v30, -1, -1);
    uint64_t v39 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v29, v66);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v73);
    uint64_t v41 = v68;
    os_log_type_t v40 = v69;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
    unint64_t v44 = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1C8F83000, v44, v45, "Request doesn't have a supported (SportsEntity -> Instruction) mapping. Not performing sports personalization...", v46, 2u);
      MEMORY[0x1CB77E470](v46, -1, -1);
    }

    uint64_t v47 = (uint64_t)v59;
    Date.init()();
    uint64_t v48 = (int *)v60;
    uint64_t v49 = v47 + *(int *)(v60 + 20);
    *(void *)uint64_t v49 = "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift";
    *(void *)(v49 + 8) = 68;
    *(unsigned char *)(v49 + 16) = 2;
    *(void *)(v47 + v48[6]) = 51;
    uint64_t v50 = v47 + v48[7];
    *(void *)uint64_t v50 = "buildExperiences(from:with:)";
    *(void *)(v50 + 8) = 28;
    *(unsigned char *)(v50 + 16) = 2;
    uint64_t v51 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
    uint64_t v52 = (uint64_t *)(v47 + v48[8]);
    void *v52 = v51;
    v52[1] = v53;
    uint64_t v39 = v67;
    uint64_t v41 = v68;
    uint64_t v54 = (uint64_t)v61;
    os_log_type_t v40 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v61, v67, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v54, 0, 1, v40);
    specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(0, v54, v43);
    outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v47, 0);
    uint64_t v38 = specialized ExperiencesResolver.defaultExperiences(from:with:)(v70, v72, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
    outlined destroy of PerformanceUtil.Ticket(v47);
  }
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  return v38;
}

uint64_t partial apply for closure #1 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  unint64_t v3 = specialized static SportsPersonalizationExperiencesResolver.makeEntityInstructionMapping(alternatives:)(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  void (*v21)(uint64_t **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;

  uint64_t v46 = a4;
  uint64_t v43 = a5;
  uint64_t v47 = a6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    uint64_t v13 = swift_once();
  }
  unint64_t v44 = &v40;
  uint64_t v16 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v13);
  uint64_t v41 = a3;
  uint64_t v42 = a1;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v38 = (uint64_t *)a3;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v21 = *(void (**)(uint64_t **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v16 + 200);
  uint64_t v38 = &v35;
  uint64_t v39 = &type metadata for DisambiguatedSportsExperiencesResult;
  LOBYTE(v36) = 2;
  uint64_t v22 = v45;
  v21(&v48, 0xD000000000000021, 0x80000001C91A1740, 0, v20, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 64, "buildExperiences(from:with:)", 28, v36, partial apply for closure #1 in closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:));
  uint64_t v45 = v22;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v23 = v48;
  Date.init()();
  uint64_t v24 = &v15[v12[5]];
  *(void *)uint64_t v24 = "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift";
  *((void *)v24 + 1) = 68;
  v24[16] = 2;
  *(void *)&v15[v12[6]] = 68;
  uint64_t v25 = &v15[v12[7]];
  *(void *)uint64_t v25 = "buildExperiences(from:with:)";
  *((void *)v25 + 1) = 28;
  v25[16] = 2;
  uint64_t v26 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
  uint64_t v27 = (uint64_t *)&v15[v12[8]];
  *uint64_t v27 = v26;
  v27[1] = v28;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v11, v46, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
  uint64_t v31 = one-time initialization token for pommes;
  swift_bridgeObjectRetain();
  if (v31 != -1) {
    swift_once();
  }
  int v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)((uint64_t)v23, (uint64_t)v11, v33);
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v15, 0);
  if (!v23) {
    uint64_t v23 = specialized ExperiencesResolver.defaultExperiences(from:with:)(v41, v43, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
  }
  uint64_t result = outlined destroy of PerformanceUtil.Ticket((uint64_t)v15);
  void *v47 = v23;
  return result;
}

uint64_t SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(uint64_t a1, uint64_t *a2)
{
  void (*v110)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  void v117[2];
  uint64_t *v118;
  uint64_t v119;
  void v120[3];
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void *v127;
  uint64_t *v128;
  char *v129;
  void *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void (*v140)(char *, char *, uint64_t);
  void *v141;
  char *v142;
  void (*v143)(char *, uint64_t);
  char *v144;
  uint64_t v145;
  void (**v146)(char *, uint64_t);
  char *v147;
  unsigned int (*v148)(char *, uint64_t, uint64_t);
  void *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  unint64_t v3 = v2;
  uint64_t v128 = a2;
  uint64_t v154 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  id v137 = *(void *)(v154 - 8);
  MEMORY[0x1F4188790](v154);
  id v129 = (char *)v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v138 = *(void *)(v153 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v153);
  uint64_t v126 = (char *)v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v125 = (uint64_t)v120 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v131 = (char *)v120 - v11;
  MEMORY[0x1F4188790](v10);
  char v152 = (uint64_t)v120 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v132 = (uint64_t)v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v135 = (uint64_t)v120 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v133 = (uint64_t)v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v134 = (char *)v120 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  os_log_type_t v150 = (char *)v120 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v120 - v24;
  uint64_t v26 = type metadata accessor for SportsItem();
  uint64_t v27 = *(void **)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  int v142 = (char *)v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v146 = (void (**)(char *, uint64_t))((char *)v120 - v31);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  int v147 = (char *)v120 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v144 = (char *)v120 - v35;
  if (one-time initialization token for shared != -1) {
    uint64_t v34 = swift_once();
  }
  uint64_t v36 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v34);
  uint64_t v127 = v3;
  uint64_t v118 = v3;
  uint64_t v119 = a1;
  id v136 = a1;
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  unint64_t v122 = v39;
  os_log_type_t v40 = (char *)v120 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v41 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v36 + 200);
  uint64_t v118 = v117;
  uint64_t v119 = v21;
  LOBYTE(v117[0]) = 2;
  v41(0xD000000000000045, 0x80000001C91A1770, 0, v40, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 110, "personalizedSelection(from:with:)", 33, v117[0], partial apply for closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:));
  uint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
  unint64_t v124 = v37;
  unint64_t v123 = v38 + 8;
  v42(v40, v37);
  uint64_t v148 = (unsigned int (*)(char *, uint64_t, uint64_t))v27[6];
  uint64_t v149 = v27 + 6;
  if (v148(v25, 1, v26) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for SportsItem?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1C8F83000, v44, v45, "Inference was unable to recommend an alternative. Will use original instruction", v46, 2u);
      MEMORY[0x1CB77E470](v46, -1, -1);
    }

    return 0;
  }
  uint64_t v121 = v42;
  uint64_t v47 = v144;
  uint64_t v140 = (void (*)(char *, char *, uint64_t))v27[4];
  uint64_t v141 = v27 + 4;
  v140(v144, v25, v26);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  v120[2] = 0;
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v49 = __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
  uint64_t v50 = (void (*)(char *, char *, uint64_t))v27[2];
  uint64_t v51 = v147;
  v50(v147, v47, v26);
  v120[1] = v49;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  os_log_type_t v151 = v26;
  uint64_t v55 = v154;
  uint64_t v56 = v136;
  os_log_type_t v130 = v27;
  if (v54)
  {
    unint64_t v57 = v51;
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v145 = swift_slowAlloc();
    uint64_t v156 = v145;
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v143 = (void (*)(char *, uint64_t))(v58 + 4);
    v50((char *)v146, v57, v26);
    uint64_t v59 = String.init<A>(describing:)();
    id v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v61 = v130;
    unint64_t v62 = v57;
    uint64_t v55 = v154;
    uint64_t v143 = (void (*)(char *, uint64_t))v130[1];
    v143(v62, v26);
    _os_log_impl(&dword_1C8F83000, v52, v53, "Got a recommended alternative entity: %s", v58, 0xCu);
    uint64_t v63 = v145;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v63, -1, -1);
    MEMORY[0x1CB77E470](v58, -1, -1);

    uint64_t v64 = v153;
    uint64_t v65 = v61;
    uint64_t v66 = *(void *)(v56 + 16);
    if (v66) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v143 = (void (*)(char *, uint64_t))v27[1];
    v143(v51, v26);

    uint64_t v64 = v153;
    uint64_t v65 = v27;
    uint64_t v66 = *(void *)(v56 + 16);
    if (v66)
    {
LABEL_13:
      uint64_t v67 = v56 + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
      uint64_t v146 = (void (**)(char *, uint64_t))(v137 + 8);
      int v147 = (char *)(v137 + 16);
      uint64_t v139 = v65 + 1;
      os_log_type_t v145 = *(void *)(v138 + 72);
      swift_bridgeObjectRetain();
      uint64_t v68 = v131;
      uint64_t v70 = v151;
      uint64_t v69 = v152;
      uint64_t v71 = (uint64_t)v150;
      do
      {
        outlined init with copy of MediaUserStateCenter?(v67, v69, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        uint64_t v72 = *(int *)(v64 + 48);
        os_log_type_t v73 = &v68[v72];
        uint64_t v74 = v69 + v72;
        uint64_t v75 = type metadata accessor for SportsPersonalizationEntity();
        uint64_t v76 = (void (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16);
        (*v76)(v68, v69, v75);
        uint64_t v77 = v154;
        (*(void (**)(char *, uint64_t, uint64_t))v147)(v73, v74, v154);
        SportsPersonalizationEntity.sportsItem.getter();
        uint64_t v78 = (void (**)(char *, uint64_t))(v76 - 1);
        if (v148((char *)v71, 1, v70) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for SportsItem?);
          (*v78)(v68, v75);
          (*v146)(v73, v77);
        }
        else
        {
          uint64_t v79 = v142;
          v140(v142, (char *)v71, v70);
          (*v78)(v68, v75);
          (*v146)(v73, v77);
          char v80 = static SportsItem.partiallyEqual(lhs:rhs:)();
          v143(v79, v70);
          if (v80)
          {
            swift_bridgeObjectRelease();
            uint64_t v81 = v135;
            outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v152, v135);
            uint64_t v82 = 0;
            uint64_t v64 = v153;
            uint64_t v55 = v154;
            uint64_t v83 = v137;
            goto LABEL_23;
          }
        }
        uint64_t v69 = v152;
        outlined destroy of MediaUserStateCenter?(v152, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        v67 += v145;
        --v66;
        uint64_t v64 = v153;
      }
      while (v66);
      swift_bridgeObjectRelease();
      uint64_t v82 = 1;
      uint64_t v55 = v154;
      uint64_t v83 = v137;
      goto LABEL_22;
    }
  }
  uint64_t v82 = 1;
  uint64_t v83 = v137;
LABEL_22:
  uint64_t v81 = v135;
LABEL_23:
  uint64_t v84 = v138;
  uint64_t v85 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56))(v81, v82, 1, v64);
  uint64_t v86 = v132;
  outlined init with copy of MediaUserStateCenter?(v81, v132, (uint64_t *)&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v86, 1, v64);
  uint64_t v88 = (uint64_t)v134;
  if (v87 != 1)
  {
    uint64_t v89 = v125;
    outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v86, v125);
    uint64_t v90 = *(int *)(v64 + 48);
    uint64_t v91 = v126;
    uint64_t v92 = &v126[v90];
    uint64_t v93 = v89 + v90;
    uint64_t v94 = type metadata accessor for SportsPersonalizationEntity();
    uint64_t v95 = *(void *)(v94 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v91, v89, v94);
    uint64_t v96 = v93;
    uint64_t v81 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v92, v96, v55);
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v88, v92, v55);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v91, v94);
    outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
    uint64_t v85 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v88, v85, 1, v55);
  outlined destroy of MediaUserStateCenter?(v81, (uint64_t *)&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  uint64_t v97 = v133;
  outlined init with copy of MediaUserStateCenter?(v88, v133, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v97, 1, v55) != 1)
  {
    uint64_t v102 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v129, v97, v55);
    uint64_t v103 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify();
    *uint64_t v104 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    uint64_t v105 = v103(&v156, 0);
    uint64_t v106 = static PerformanceUtil.shared;
    uint64_t v107 = MEMORY[0x1F4188790](v105);
    v117[0] = v127;
    v117[1] = v102;
    uint64_t v118 = v128;
    MEMORY[0x1F4188790](v107);
    uint64_t v109 = (char *)v120 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    uint64_t v110 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v106 + 200);
    unint64_t v111 = v83;
    unint64_t v112 = v88;
    Class v113 = v111;
    uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
    uint64_t v118 = &v116;
    uint64_t v119 = v114;
    LOBYTE(v117[0]) = 2;
    v110(&v156, 0xD000000000000049, 0x80000001C91A17C0, 0, v109, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 137, "personalizedSelection(from:with:)", 33, v117[0], partial apply for closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:));
    v121(v109, v124);
    outlined destroy of MediaUserStateCenter?(v112, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    v143(v144, v151);
    uint64_t v101 = v156;
    (*(void (**)(char *, uint64_t))(v113 + 8))(v102, v55);
    return v101;
  }
  outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v98 = Logger.logObject.getter();
  os_log_type_t v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v100 = 0;
    _os_log_impl(&dword_1C8F83000, v98, v99, "Unable to map the recommended sports item back to an alternative. This is unexpected. Will continue with original instruction", v100, 2u);
    MEMORY[0x1CB77E470](v100, -1, -1);
  }

  outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v143(v144, v151);
  return 0;
}

BOOL static SportsPersonalizationExperiencesResolver.hasPersonalizationInstruction(_:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  if (*(void *)(v13 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v9, v13 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v9, 0, 1, v0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v9, 1, 1, v0);
  }
  swift_bridgeObjectRelease();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    uint64_t v14 = type metadata accessor for SportsPersonalizationEntity();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
    static SportsPersonalizationExperiencesResolver.makeSportsEntity(entity:)((uint64_t)v3, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v15 = type metadata accessor for SportsPersonalizationEntity();
  BOOL v16 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v12, 1, v15) != 1;
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
  return v16;
}

uint64_t static SportsPersonalizationExperiencesResolver.makeSportsEntity(entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = type metadata accessor for SportsItem();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v35 - v18;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  uint64_t v22 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(a1, v21);
  if (v22)
  {
    uint64_t v42 = v11;
    uint64_t v43 = v22;
    uint64_t v23 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
    if (!v23)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v19, 1, 1, v10);
LABEL_29:
      static PersonalizationLevel.from(uso:)((unint64_t)v9);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for SportsItem?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for PersonalizationLevel?);
      SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PersonalizationLevel?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for SportsItem?);
      uint64_t v34 = type metadata accessor for SportsPersonalizationEntity();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a2, 0, 1, v34);
    }
    unint64_t v24 = v23;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
    os_log_type_t v40 = v9;
    uint64_t v41 = a2;
    uint64_t v38 = v19;
    uint64_t v39 = v7;
    uint64_t v36 = v17;
    uint64_t v37 = v10;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_7:
        if (v25 < 1)
        {
          __break(1u);
          JUMPOUT(0x1C90EF280);
        }
        for (uint64_t i = 0; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001) != 0) {
            MEMORY[0x1CB77D510](i, v24);
          }
          else {
            swift_retain();
          }
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v44)
          {
            specialized static SportsProperty.from(entity:)();
            char v28 = v27;
            swift_release();
            switch(v28)
            {
              case 0:
                SportsItem.team.setter();
                break;
              case 1:
                SportsItem.teamQId.setter();
                break;
              case 2:
                SportsItem.league.setter();
                break;
              case 3:
                SportsItem.leagueQId.setter();
                break;
              case 4:
                SportsItem.sport.setter();
                break;
              case 5:
                SportsItem.sportQId.setter();
                break;
              case 6:
                SportsItem.athlete.setter();
                break;
              case 7:
                SportsItem.athleteQId.setter();
                break;
              default:
                break;
            }
          }
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = v42;
    uint64_t v33 = v37;
    uint64_t v19 = v38;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v13, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v33);
    uint64_t v9 = v40;
    a2 = v41;
    uint64_t v7 = v39;
    uint64_t v17 = v36;
    goto LABEL_29;
  }
  uint64_t v29 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);

  return v30(a2, 1, 1, v29);
}

uint64_t closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v7 = *(void *)(v44 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v44);
  uint64_t v43 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v42 = (char *)v34 - v10;
  uint64_t v11 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  os_log_type_t v45 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AppDataProviding(a1, (uint64_t)v48);
  uint64_t v14 = v49;
  uint64_t v38 = v50;
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(v48, v49);
  int64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = MEMORY[0x1E4FBC860];
  if (v16)
  {
    v34[1] = v15;
    uint64_t v35 = v14;
    uint64_t v36 = a3;
    uint64_t v37 = v3;
    uint64_t v51 = MEMORY[0x1E4FBC860];
    int64_t v47 = v16;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v40 = v19;
    uint64_t v20 = (void (**)(void, void, void))(v12 + 32);
    uint64_t v21 = v45;
    uint64_t v41 = v12;
    uint64_t v22 = (uint64_t)v42;
    do
    {
      outlined init with copy of MediaUserStateCenter?(v18, v22, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v23 = *(int *)(v44 + 48);
      unint64_t v24 = v20;
      uint64_t v25 = v11;
      uint64_t v26 = v43;
      char v27 = &v43[v23];
      uint64_t v46 = (void (*)(char *, char *, uint64_t))(v22 + v23);
      (*v39)(v43, v22, v25);
      uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
      uint64_t v29 = *(void *)(v28 - 8);
      (*(void (**)(char *, void, uint64_t))(v29 + 16))(v27, v46, v28);
      uint64_t v30 = v26;
      uint64_t v11 = v25;
      uint64_t v20 = v24;
      uint64_t v46 = (void (*)(char *, char *, uint64_t))*v24;
      v46(v21, v30, v11);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
      outlined destroy of MediaUserStateCenter?(v22, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      uint64_t v17 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v51;
      }
      unint64_t v32 = *(void *)(v17 + 16);
      unint64_t v31 = *(void *)(v17 + 24);
      uint64_t v21 = v45;
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v17 = v51;
      }
      *(void *)(v17 + 16) = v32 + 1;
      v46((char *)(v17+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v32), v21, v11);
      uint64_t v51 = v17;
      v18 += v40;
      --v47;
    }
    while (v47);
    uint64_t v14 = v35;
  }
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v17, v14);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

uint64_t closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (double *)((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(double *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  double v15 = v14;
  uint64_t v16 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
  uint64_t v18 = specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(v13, (uint64_t)v9, (uint64_t)v6, v15);
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  uint64_t result = (*(uint64_t (**)(double *, uint64_t))(v11 + 8))(v13, v10);
  *a2 = v18;
  return result;
}

unint64_t specialized static SportsPersonalizationExperiencesResolver.makeEntityInstructionMapping(alternatives:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v93 = (uint64_t)v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unint64_t v92 = (unint64_t)v86 - v5;
  uint64_t v90 = type metadata accessor for SportsItem();
  uint64_t v6 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  uint64_t v116 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v91 = (uint64_t)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v89 = (char *)v86 - v11;
  uint64_t v128 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v12 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  uint64_t v124 = (uint64_t)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v95 = (char *)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v121 = (char *)v86 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v94 = (char *)v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SportsPersonalizationEntity();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v101 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v117 = (uint64_t)v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v100 = (uint64_t)v86 - v30;
  uint64_t v118 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  MEMORY[0x1F4188790](v118);
  uint64_t v126 = (char *)v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = *(void *)(a1 + 16);
  if (v119)
  {
    uint64_t v107 = v20;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    uint64_t v33 = v31 + 16;
    unint64_t v122 = v34;
    uint64_t v115 = a1 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    uint64_t v103 = v12 + 16;
    Class v113 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v114 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    uint64_t v98 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    int v87 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v88 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v96 = (void (**)(uint64_t, uint64_t))(v12 + 8);
    unint64_t v111 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
    uint64_t v109 = (void (**)(char *, uint64_t))(v33 - 8);
    uint64_t v110 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v99 = v27;
    uint64_t v108 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    uint64_t v123 = v33;
    uint64_t v112 = *(void *)(v33 + 56);
    v86[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    unint64_t v125 = MEMORY[0x1E4FBC860];
    uint64_t v104 = v12;
    uint64_t v36 = (uint64_t)v94;
    uint64_t v37 = v25;
    uint64_t v127 = v25;
    uint64_t v106 = v26;
    uint64_t v38 = v118;
    uint64_t v39 = v126;
    uint64_t v40 = (uint64_t)v95;
    while (1)
    {
      v122(v39, v115 + v112 * v35, v38);
      uint64_t v41 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      if (*(void *)(v41 + 16))
      {
        uint64_t v42 = (uint64_t)v121;
        (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v121, v41 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v128);
        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v43 = 1;
        uint64_t v42 = (uint64_t)v121;
      }
      uint64_t v44 = (uint64_t)v37;
      uint64_t v45 = v128;
      (*v114)(v42, v43, 1, v128);
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?(v42, v40, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*v113)(v40, 1, v45) != 1) {
        break;
      }
      uint64_t v46 = v107;
      (*v105)(v36, 1, 1, v107);
LABEL_70:
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*v111)(v36, 1, v46) == 1)
      {
        uint64_t v67 = v36;
        outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
        uint64_t v68 = 1;
        uint64_t v69 = v106;
        uint64_t v38 = v118;
        uint64_t v39 = v126;
      }
      else
      {
        uint64_t v70 = *v97;
        uint64_t v71 = v101;
        uint64_t v67 = v36;
        (*v97)(v101, v36, v46);
        uint64_t v69 = v106;
        uint64_t v72 = &v127[*(int *)(v106 + 48)];
        uint64_t v44 = (uint64_t)v127;
        v70(v127, (uint64_t)v71, v46);
        uint64_t v12 = v104;
        os_log_type_t v73 = v72;
        uint64_t v39 = v126;
        uint64_t v38 = v118;
        v122(v73, (uint64_t)v126, v118);
        uint64_t v68 = 0;
      }
      (*v110)(v44, v68, 1, v69);
      (*v109)(v39, v38);
      if ((*v108)(v44, 1, v69) == 1)
      {
        uint64_t v37 = (char *)v44;
        outlined destroy of MediaUserStateCenter?(v44, (uint64_t *)&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
        uint64_t v36 = v67;
      }
      else
      {
        uint64_t v74 = v100;
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v44, v100);
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v74, v117);
        uint64_t v36 = v67;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v75 = v125;
        }
        else {
          unint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v125 + 16) + 1, 1, v125);
        }
        unint64_t v77 = *(void *)(v75 + 16);
        unint64_t v76 = *(void *)(v75 + 24);
        uint64_t v78 = v99;
        if (v77 >= v76 >> 1)
        {
          uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1, v75);
          uint64_t v78 = v99;
          unint64_t v75 = v80;
        }
        uint64_t v37 = (char *)v44;
        *(void *)(v75 + 16) = v77 + 1;
        unint64_t v79 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
        unint64_t v125 = v75;
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v117, v75 + v79 + *(void *)(v78 + 72) * v77);
        uint64_t v39 = v126;
      }
      if (++v35 == v119)
      {
        swift_bridgeObjectRelease();
        unint64_t result = v125;
        goto LABEL_82;
      }
    }
    (*v98)(v124, v40, v128);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    uint64_t v49 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(v124, v48);
    if (!v49)
    {
      uint64_t v60 = 1;
LABEL_69:
      uint64_t v46 = v107;
      (*v105)(v36, v60, 1, v107);
      (*v96)(v124, v128);
      goto LABEL_70;
    }
    uint64_t v102 = v49;
    uint64_t v50 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
    if (!v50)
    {
      uint64_t v61 = v12;
      uint64_t v62 = 1;
      uint64_t v63 = v90;
      uint64_t v64 = (uint64_t)v89;
LABEL_68:
      (*v88)(v64, v62, 1, v63);
      uint64_t v65 = v92;
      static PersonalizationLevel.from(uso:)(v92);
      outlined init with copy of MediaUserStateCenter?(v64, v91, &demangling cache variable for type metadata for SportsItem?);
      outlined init with copy of MediaUserStateCenter?(v65, v93, &demangling cache variable for type metadata for PersonalizationLevel?);
      uint64_t v66 = v94;
      SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
      swift_release();
      uint64_t v36 = (uint64_t)v66;
      outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for PersonalizationLevel?);
      outlined destroy of MediaUserStateCenter?(v64, &demangling cache variable for type metadata for SportsItem?);
      uint64_t v60 = 0;
      uint64_t v40 = (uint64_t)v95;
      uint64_t v42 = (uint64_t)v121;
      uint64_t v12 = v61;
      uint64_t v44 = (uint64_t)v37;
      goto LABEL_69;
    }
    unint64_t v51 = v50;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
    if (!(v51 >> 62))
    {
      uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v52) {
        goto LABEL_16;
      }
      goto LABEL_67;
    }
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    if (!v52)
    {
LABEL_67:
      swift_bridgeObjectRelease();
      uint64_t v64 = (uint64_t)v89;
      uint64_t v63 = v90;
      (*v87)(v89, v116, v90);
      swift_bridgeObjectRelease();
      uint64_t v62 = 0;
      uint64_t v61 = v104;
      uint64_t v37 = v127;
      goto LABEL_68;
    }
LABEL_16:
    if (v52 >= 1)
    {
      uint64_t v53 = 0;
      while (1)
      {
        if ((v51 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](v53, v51);
        }
        else {
          swift_retain();
        }
        dispatch thunk of CodeGenListEntry.entry.getter();
        if (v129)
        {
          if (!dispatch thunk of UsoEntity_common_SportsItem.type.getter())
          {
            dispatch thunk of UsoEntity_common_SportsItem.name.getter();
LABEL_36:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_20;
          }
          uint64_t v54 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter();
          uint64_t v56 = v55;
          swift_release();
          uint64_t v57 = dispatch thunk of UsoEntity_common_SportsItem.name.getter();
          if (!v56 || !v58) {
            goto LABEL_36;
          }
          uint64_t v120 = v57;
          if (v54 == 0x74726F7073 && v56 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.sport.setter();
          }
          else if (v54 == 0x69715F74726F7073 && v56 == 0xE900000000000064 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.sportQId.setter();
          }
          else if (v54 == 0x65756761656CLL && v56 == 0xE600000000000000 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.league.setter();
          }
          else if (v54 == 0x715F65756761656CLL && v56 == 0xEA00000000006469 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.leagueQId.setter();
          }
          else if (v54 == 1835099508 && v56 == 0xE400000000000000 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.team.setter();
          }
          else if (v54 == 0x6469715F6D616574 && v56 == 0xE800000000000000 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.teamQId.setter();
          }
          else if (v54 == 0x6574656C687461 && v56 == 0xE700000000000000 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.athlete.setter();
          }
          else
          {
            if (v54 == 0x5F6574656C687461 && v56 == 0xEB00000000646971)
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v59 & 1) == 0) {
                goto LABEL_36;
              }
              swift_release();
            }
            SportsItem.athleteQId.setter();
          }
        }
        swift_release();
LABEL_20:
        if (v52 == ++v53) {
          goto LABEL_67;
        }
      }
    }
    __break(1u);
    goto LABEL_89;
  }
  unint64_t result = MEMORY[0x1E4FBC860];
LABEL_82:
  if (*(void *)(result + 16) != v119)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes == -1)
    {
LABEL_84:
      uint64_t v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.pommes);
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v85 = 0;
        _os_log_impl(&dword_1C8F83000, v83, v84, "One or more alternative instruction did not have a single sports entity. Will ignore alternatives...", v85, 2u);
        MEMORY[0x1CB77E470](v85, -1, -1);
      }

      return 0;
    }
LABEL_89:
    swift_once();
    goto LABEL_84;
  }
  return result;
}

uint64_t specialized static SportsPersonalizationExperiencesResolver.isSupportedPersonalizationInstruction(_:)(uint64_t a1)
{
  uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v52 = *(void (***)(char *, uint64_t))(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
  unint64_t v51 = *(void (***)(char *, uint64_t))(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v57 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v56 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (void (**)(char *, uint64_t))((char *)&v46 - v7);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v59 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v47 = v14;
    uint64_t v48 = v13;
    uint64_t v49 = a1;
    uint64_t v50 = v8;
    uint64_t v53 = (void (*)(char *, void (**)(char *, uint64_t), uint64_t))v4;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v18 = v10 + 16;
    uint64_t v19 = v20;
    unint64_t v21 = v16 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v22 = (void (**)(char *, uint64_t))(v18 - 8);
    uint64_t v23 = *(void *)(v18 + 56);
    uint64_t v46 = v16;
    swift_bridgeObjectRetain();
    while (1)
    {
      v19(v12, v21, v9);
      if (Apple_Parsec_Siri_Context_ResultEntity.name.getter() == 0x6769626D61736944 && v24 == 0xEE006E6F69746175) {
        break;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v22)(v12, v9);
      if (v25) {
        goto LABEL_10;
      }
      v21 += v23;
      if (!--v17)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v26 = 0;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    (*v22)(v12, v9);
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v26 = 1;
LABEL_11:
    uint64_t v4 = (uint64_t)v53;
    uint64_t v8 = v50;
    uint64_t v14 = v47;
    uint64_t v13 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = 0;
  }
  uint64_t v27 = v59;
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  uint64_t v29 = MEMORY[0x1CB779280](v28);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
  uint64_t v30 = *(char **)(v29 + 16);
  if (v30)
  {
    LODWORD(v47) = v26;
    uint64_t v31 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v60 + 16);
    unint64_t v32 = v29 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    uint64_t v50 = v52 + 1;
    ++v51;
    uint64_t v52 = (void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v53 = v31;
    v60 += 16;
    uint64_t v33 = *(void *)(v60 + 56);
    uint64_t v48 = v29;
    uint64_t v49 = v33;
    swift_bridgeObjectRetain();
    while (1)
    {
      char v59 = v30;
      uint64_t v34 = v53;
      v53((char *)v8, (void (**)(char *, uint64_t))v32, v4);
      uint64_t v35 = v57;
      uint64_t v36 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter();
      MEMORY[0x1CB778BE0](v36);
      (*v51)(v35, v58);
      Swift::String v37 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v62 = v37;
      strcpy(v61, "disambiguation");
      v61[15] = -18;
      lazy protocol witness table accessor for type String and conformance String();
      char v38 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v56;
      v34(v56, v8, v4);
      if (v38) {
        break;
      }
      uint64_t v40 = v54;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
      Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
      (*v50)(v40, v55);
      Swift::String v41 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v62 = v41;
      strcpy(v61, "disambiguation");
      v61[15] = -18;
      char v42 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = *v52;
      (*v52)(v39, v4);
      v43((char *)v8, v4);
      if (v42) {
        goto LABEL_20;
      }
      v32 += v49;
      uint64_t v30 = v59 - 1;
      if (v59 == (char *)1)
      {
        swift_bridgeObjectRelease_n();
        return v47;
      }
    }
    uint64_t v44 = *v52;
    (*v52)(v39, v4);
    v44((char *)v8, v4);
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v26;
}

void *initializeBufferWithCopyOfBuffer for DisambiguatedSportsExperiencesResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DisambiguatedSportsExperiencesResult()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for DisambiguatedSportsExperiencesResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for DisambiguatedSportsExperiencesResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguatedSportsExperiencesResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisambiguatedSportsExperiencesResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DisambiguatedSportsExperiencesResult(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for DisambiguatedSportsExperiencesResult(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisambiguatedSportsExperiencesResult()
{
  return &type metadata for DisambiguatedSportsExperiencesResult;
}

uint64_t *assignWithCopy for SportsPersonalizationExperiencesResolver(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SportsPersonalizationExperiencesResolver(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationExperiencesResolver(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsPersonalizationExperiencesResolver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationExperiencesResolver()
{
  return &type metadata for SportsPersonalizationExperiencesResolver;
}

uint64_t partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(void *a1@<X8>)
{
  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 40), a1, *(double *)(v1 + 32));
}

uint64_t partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v1 + 32), *(void *)(v1 + 16), **(void **)(v1 + 24), *(void *)(v1 + 40));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  uint64_t result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 40));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

{
  return partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(uint64_t, uint64_t, char *, double))specialized ExperiencesResolver.extractExperiences(from:score:with:with:), a1);
}

{
  return partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(uint64_t, uint64_t, char *, double))specialized ExperiencesResolver.extractExperiences(from:score:with:with:), a1);
}

uint64_t partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(void *)(v1 + 40), a1, *(double *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(void *)(v1 + 40), (uint64_t (*)(char *, uint64_t, char *, double))specialized ExperiencesResolver.extractExperiences(from:score:with:with:), a1, *(double *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(void *)(v1 + 40), (uint64_t (*)(char *, uint64_t, char *, double))specialized ExperiencesResolver.extractExperiences(from:score:with:with:), a1, *(double *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(void *)(v1 + 24), a1);
}

uint64_t outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, char *, double)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 40), a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v3 - 8);
  char v42 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v37 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  Swift::String v41 = (char *)v37 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v37 - v15;
  MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t result = LazySequenceProtocol.filter(_:)();
  uint64_t v20 = v49;
  unint64_t v21 = v50;
  uint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v22 = *(void *)(v49 + 16);
  if (!v22)
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    return v48;
  }
  unint64_t v23 = 0;
  uint64_t v43 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v46 = v6 + 16;
  uint64_t v47 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v45 = v22 - 1;
  uint64_t v39 = v11;
  uint64_t v40 = v6;
  v37[1] = v51;
  uint64_t v38 = v49;
  v37[0] = v50;
  while (v23 < *(void *)(v20 + 16))
  {
    unint64_t v24 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v25 = *(void *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, v20 + v24 + v25 * v23, v5);
    if ((v21(v11) & 1) == 0)
    {
      uint64_t result = (*v43)(v11, v5);
      if (v45 == v23) {
        goto LABEL_17;
      }
      goto LABEL_4;
    }
    uint64_t v26 = *v47;
    uint64_t v27 = v41;
    (*v47)(v41, v11, v5);
    v26(v16, v27, v5);
    uint64_t v28 = v42;
    uint64_t v29 = v16;
    Siri_Nlu_External_UserParse.firstUserDialogAct.getter(v42);
    uint64_t v30 = (uint64_t)v28;
    uint64_t v31 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v30);
    }
    else
    {
      char v33 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
      if (v33)
      {
        uint64_t v16 = v29;
        uint64_t result = (*v43)(v29, v5);
        uint64_t v11 = v39;
        uint64_t v6 = v40;
        goto LABEL_16;
      }
    }
    uint64_t v16 = v29;
    v26(v44, v29, v5);
    uint64_t v34 = v48;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
      uint64_t v34 = v48;
    }
    uint64_t v11 = v39;
    unint64_t v36 = *(void *)(v34 + 16);
    unint64_t v35 = *(void *)(v34 + 24);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      uint64_t v34 = v48;
    }
    *(void *)(v34 + 16) = v36 + 1;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v34 + v24 + v36 * v25, v44, v5);
    uint64_t v48 = v34;
    uint64_t v6 = v40;
LABEL_16:
    uint64_t v20 = v38;
    unint64_t v21 = (uint64_t (*)(char *))v37[0];
    if (v45 == v23) {
      goto LABEL_17;
    }
LABEL_4:
    ++v23;
  }
  __break(1u);
  return result;
}

BOOL closure #1 in LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v43 = a1;
  uint64_t v44 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v1 = *(void *)(v44 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v44);
  Swift::String v41 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v40 = (char *)&v33 - v4;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v36 = v13 + 8;
  uint64_t v37 = v12;
  uint64_t v34 = v16;
  v16(v15, v12);
  uint64_t v17 = *MEMORY[0x1E4FA2798];
  char v33 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v33(v9, v17, v5);
  unint64_t v18 = lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v35 = v18;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v20 = v45;
  uint64_t v19 = v46;
  unint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  uint64_t v38 = v6 + 8;
  v21(v11, v5);
  uint64_t v42 = v1;
  uint64_t v22 = v40;
  uint64_t v39 = *(void (**)(void))(v1 + 16);
  v39();
  if (v19 == v20)
  {
    unint64_t v23 = *(void (**)(char *, uint64_t))(v42 + 8);
    uint64_t v24 = v44;
    v23(v22, v44);
    uint64_t v25 = v41;
    ((void (*)(char *, uint64_t, uint64_t))v39)(v41, v43, v24);
LABEL_5:
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    BOOL v31 = v30 > 0.05;
    goto LABEL_6;
  }
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v34(v15, v37);
  v33(v9, *MEMORY[0x1E4FA27A8], v5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v27 = v45;
  uint64_t v26 = v46;
  v21(v9, v5);
  v21(v11, v5);
  unint64_t v23 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v28 = v44;
  v23(v22, v44);
  uint64_t v25 = v41;
  ((void (*)(char *, uint64_t, uint64_t))v39)(v41, v43, v28);
  BOOL v29 = v26 == v27;
  uint64_t v24 = v28;
  if (v29) {
    goto LABEL_5;
  }
  BOOL v31 = 0;
LABEL_6:
  v23(v25, v24);
  return v31;
}

uint64_t static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v80 = a7;
  uint64_t v77 = a5;
  uint64_t v78 = a6;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v72 = a2;
  uint64_t v79 = a1;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v67 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v21 = (char *)v65 - v20;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v70 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = a8;
  uint64_t v86 = a8;
  uint64_t v87 = a9;
  uint64_t v73 = a9;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v71 = v22;
  static Message.with(_:)();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v89 = MEMORY[0x1E4FBC860];
  uint64_t v90 = MEMORY[0x1E4FBC860];
  uint64_t v81 = v24;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v26 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v69 = v16;
  uint64_t v68 = v17 + 8;
  uint64_t v66 = v27;
  v27(v21, v16);
  int64_t v28 = *(void *)(v26 + 16);
  uint64_t v85 = v13;
  if (v28)
  {
    uint64_t v88 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    double v30 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    uint64_t v29 = v13 + 16;
    uint64_t v83 = v30;
    unint64_t v31 = (*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64);
    v65[1] = v26;
    unint64_t v32 = v26 + v31;
    uint64_t v82 = *(void *)(v29 + 56);
    os_log_type_t v84 = (void (*)(char *, unint64_t, uint64_t))v29;
    char v33 = (void (**)(char *, uint64_t))(v29 - 8);
    do
    {
      v83(v15, v32, v12);
      uint64_t v34 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      uint64_t v36 = v35;
      (*v33)(v15, v12);
      uint64_t v37 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
        uint64_t v37 = v88;
      }
      unint64_t v39 = *(void *)(v37 + 16);
      unint64_t v38 = *(void *)(v37 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v37 = v88;
      }
      *(void *)(v37 + 16) = v39 + 1;
      uint64_t v40 = v37 + 16 * v39;
      *(void *)(v40 + 32) = v34;
      *(void *)(v40 + 40) = v36;
      v32 += v82;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x1E4FBC860];
  }
  uint64_t v42 = a10;
  uint64_t v41 = a11;
  swift_bridgeObjectRelease();
  uint64_t v90 = v37;
  uint64_t v43 = v67;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v44 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v66(v43, v69);
  int64_t v45 = *(void *)(v44 + 16);
  if (v45)
  {
    uint64_t v69 = a10;
    uint64_t v82 = a11;
    uint64_t v88 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
    os_log_type_t v84 = *(void (**)(char *, unint64_t, uint64_t))(v85 + 16);
    unint64_t v46 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    uint64_t v68 = v44;
    unint64_t v47 = v44 + v46;
    uint64_t v83 = *(void (**)(char *, unint64_t, uint64_t))(v85 + 72);
    v85 += 16;
    uint64_t v48 = (void (**)(char *, uint64_t))(v85 - 8);
    do
    {
      v84(v15, v47, v12);
      uint64_t v49 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      uint64_t v51 = v50;
      (*v48)(v15, v12);
      uint64_t v52 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v52 + 16) + 1, 1);
        uint64_t v52 = v88;
      }
      unint64_t v54 = *(void *)(v52 + 16);
      unint64_t v53 = *(void *)(v52 + 24);
      if (v54 >= v53 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v52 = v88;
      }
      *(void *)(v52 + 16) = v54 + 1;
      uint64_t v55 = v52 + 16 * v54;
      *(void *)(v55 + 32) = v49;
      *(void *)(v55 + 40) = v51;
      v47 += (unint64_t)v83;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    uint64_t v41 = v82;
    uint64_t v42 = v69;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v89 = v52;
  uint64_t v56 = type metadata accessor for PommesResponse();
  MEMORY[0x1F4188790](v56);
  uint64_t v57 = v74;
  v65[-14] = v72;
  v65[-13] = v57;
  uint64_t v58 = v81;
  uint64_t v59 = v76;
  v65[-12] = v81;
  v65[-11] = v59;
  uint64_t v60 = v75;
  v65[-10] = v73;
  v65[-9] = v60;
  uint64_t v61 = v78;
  v65[-8] = v77;
  v65[-7] = v61;
  v65[-6] = v42;
  v65[-5] = v41;
  v65[-4] = &v90;
  v65[-3] = &v89;
  uint64_t v62 = v79;
  v65[-2] = v80;
  v65[-1] = v62;
  uint64_t v63 = PommesResponse.__allocating_init(_:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v63;
}

uint64_t closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
  return v0(&v2, 0);
}

uint64_t closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v37 = a8;
  uint64_t v38 = a7;
  uint64_t v33 = a5;
  uint64_t v46 = a14;
  uint64_t v47 = a15;
  uint64_t v43 = a13;
  uint64_t v39 = a11;
  uint64_t v40 = a10;
  uint64_t v41 = a12;
  uint64_t v36 = a9;
  uint64_t v16 = type metadata accessor for PommesSearchReason();
  uint64_t v44 = *(void *)(v16 - 8);
  uint64_t v45 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v42 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v35 = (uint64_t)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  uint64_t v20 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.clientResults.setter();
  v32[1] = a4;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.metadataDomainName.setter();
  PommesResponse.Builder.metadataFallbackTriggered.setter();
  PommesResponse.Builder.renderedTexts.setter();
  PommesResponse.Builder.redactedRenderedTexts.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v33 = v24 + 8;
  uint64_t v28 = v23;
  v27(v26, v23);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v30 = v34;
  v29(v22, v34);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v27(v26, v28);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v29(v22, v30);
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  PommesResponse.Builder.listenAfterSpeaking.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.requestId.setter();
  outlined init with copy of PommesCandidateId?(v36, v35);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.taskStepLogs.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  PommesResponse.Builder.componentsWarmedUp.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v46, v45);
  PommesResponse.Builder.searchReason.setter();
  PommesResponse.Builder.isCachedResponse.setter();
  type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.searchRequestUtterance.setter();
  swift_bridgeObjectRetain();
  return PommesResponse.Builder.sharedUserId.setter();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

uint64_t partial apply for closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)();
}

uint64_t partial apply for closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1)
{
  return closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15]);
}

void **initializeBufferWithCopyOfBuffer for PommesSearchPreflightResult(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for PommesSearchPreflightResult(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for PommesSearchPreflightResult(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PommesSearchPreflightResult()
{
  return &type metadata for PommesSearchPreflightResult;
}

uint64_t dispatch thunk of static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PommesSearchPreflightHandling.handle(pommesSearchRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t AssistantLocationProvider.__allocating_init(serviceHelper:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  AssistantLocationProvider.init(serviceHelper:)(a1);
  return v2;
}

uint64_t AssistantLocationProvider.init(serviceHelper:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v3 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  v10[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v5);
  (*(void (**)(char *, void))(v7 + 104))((char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LocationStatus(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider_statusPassthrough;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
  swift_allocObject();
  *(void *)(v1 + v8) = PassthroughSubject.init()();
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = 0;
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_unknownObjectRelease();
  return v1;
}

uint64_t AssistantLocationProvider.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t AssistantLocationProvider.serviceHelper.setter(uint64_t a1)
{
  swift_beginAccess();
  v1[2] = a1;
  swift_unknownObjectRetain();
  uint64_t v3 = swift_unknownObjectRelease();
  (*(void (**)(uint64_t))(*v1 + 280))(v3);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t (*AssistantLocationProvider.serviceHelper.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return AssistantLocationProvider.serviceHelper.modify;
}

uint64_t AssistantLocationProvider.serviceHelper.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    (*(void (**)(uint64_t))(**(void **)(a1 + 24) + 280))(result);
    return swift_release();
  }
  return result;
}

uint64_t AssistantLocationProvider.setServiceHelper(_:)()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 136);
  uint64_t v1 = swift_unknownObjectRetain();

  return v3(v1);
}

uint64_t key path setter for AssistantLocationProvider.status : AssistantLocationProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 216))(v6);
}

void AssistantLocationProvider.status.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  type metadata accessor for LocationStatus(0);
  id v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t partial apply for closure #1 in AssistantLocationProvider.status.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in AssistantLocationProvider.status.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status;
  swift_beginAccess();
  return outlined init with copy of LocationStatus(v3, a1);
}

uint64_t AssistantLocationProvider.status.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocationStatus(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = *(void **)(v1 + 24);
  outlined init with copy of LocationStatus(a1, (uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  outlined init with take of LocationStatus((uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in AssistantLocationProvider.status.setter;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_16;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v10;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v15, v14);

  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of LocationStatus(a1, (uint64_t)v6);
    swift_storeEnumTagMultiPayload();
    PassthroughSubject.send(_:)();
    outlined destroy of LocationStatus(a1);
    outlined destroy of Result<LocationStatus, LocationError>((uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in AssistantLocationProvider.status.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a2, (uint64_t)v6);
  uint64_t v7 = a1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status;
  swift_beginAccess();
  outlined assign with take of LocationStatus((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t outlined init with copy of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C90F39F0()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationStatus(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = (id *)(v0 + v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = (char *)v5
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else if (!EnumCaseMultiPayload)
  {
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t outlined init with take of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AssistantLocationProvider.status.setter()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationStatus(0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in AssistantLocationProvider.status.setter(v2, v3);
}

uint64_t sub_1C90F3BD8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined destroy of LocationStatus(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of Result<LocationStatus, LocationError>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*AssistantLocationProvider.status.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for LocationStatus(0) - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  id v4 = *(id *)(v1 + 24);
  OS_dispatch_queue.sync<A>(execute:)();

  return AssistantLocationProvider.status.modify;
}

void AssistantLocationProvider.status.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    outlined init with copy of LocationStatus((uint64_t)v3, (uint64_t)v2);
    AssistantLocationProvider.status.setter((uint64_t)v2);
    outlined destroy of LocationStatus((uint64_t)v3);
  }
  else
  {
    AssistantLocationProvider.status.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t AssistantLocationProvider.statusPublisher.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Result<LocationStatus, LocationError>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t AssistantLocationProvider.statusPublisher.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = a1;
  return swift_release();
}

uint64_t (*AssistantLocationProvider.statusPublisher.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = AssistantLocationProvider.statusPublisher.getter();
  return AssistantLocationProvider.statusPublisher.modify;
}

uint64_t AssistantLocationProvider.statusPublisher.modify(void *a1)
{
  *(void *)(a1[1]
            + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = *a1;
  return swift_release();
}

Swift::Void __swiftcall AssistantLocationProvider.setCachedLocation(location:)(CLLocation location)
{
  Class isa = location.super.isa;
  uint64_t v3 = type metadata accessor for LocationStatus(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (NSObject **)((char *)&v17 - v8);
  (*(void (**)(uint64_t))(*(void *)v1 + 208))(v7);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of LocationStatus((uint64_t)v9);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v11, v12, "Cannot set cached location on cachedLocation status that is not .available", v13, 2u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
  }
  else
  {
    unint64_t v11 = *v9;
    uint64_t v14 = v9[1];
    *(void *)uint64_t v6 = isa;
    *((void *)v6 + 1) = v14;
    v6[16] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = *(void (**)(char *))(*(void *)v1 + 216);
    uint64_t v16 = isa;
    v15(v6);
  }
}

uint64_t AssistantLocationProvider.cachedLocationInfo()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocationStatus(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  os_log_type_t v12 = (char *)&v33 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v33 - v14;
  (*(void (**)(uint64_t))(*(void *)v1 + 208))(v13);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  outlined init with copy of LocationStatus((uint64_t)v15, (uint64_t)v12);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v34 = a1;
    uint64_t v19 = v3;
    uint64_t v20 = 0xD000000000000011;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v36 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    outlined init with copy of LocationStatus((uint64_t)v12, (uint64_t)v9);
    uint64_t v33 = v19;
    unint64_t v23 = 0x80000001C91A1910;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v25 = &v9[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                         + 48)];
        uint64_t v26 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
        unint64_t v23 = 0xE800000000000000;
        uint64_t v20 = 0x676E69646E65702ELL;
        break;
      case 2u:
        break;
      case 3u:
        uint64_t v20 = 0xD000000000000015;
        uint64_t v24 = ".siriLocationDisabled";
        goto LABEL_9;
      case 4u:
        unint64_t v23 = 0xEC000000656C6261;
        uint64_t v20 = 0x6C696176616E752ELL;
        break;
      case 5u:
        unint64_t v23 = 0xE800000000000000;
        uint64_t v20 = 0x6E776F6E6B6E752ELL;
        break;
      default:
        outlined destroy of LocationStatus((uint64_t)v9);
        uint64_t v20 = 0xD00000000000001ELL;
        uint64_t v24 = ".available(PommesLocationInfo)";
LABEL_9:
        unint64_t v23 = (unint64_t)(v24 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of LocationStatus((uint64_t)v12);
    _os_log_impl(&dword_1C8F83000, v17, v18, "Checking locationStatus with %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v22, -1, -1);
    MEMORY[0x1CB77E470](v21, -1, -1);

    a1 = v34;
  }
  else
  {
    outlined destroy of LocationStatus((uint64_t)v12);
  }
  outlined init with take of LocationStatus((uint64_t)v15, (uint64_t)v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v30 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                       + 48)];
      uint64_t v31 = type metadata accessor for Date();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
      goto LABEL_16;
    case 2:
      long long v32 = xmmword_1C91996D0;
      goto LABEL_19;
    case 3:
      long long v32 = xmmword_1C91996C0;
LABEL_19:
      *(_OWORD *)a1 = v32;
      goto LABEL_20;
    case 4:
    case 5:
LABEL_16:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
LABEL_20:
      *(_WORD *)(a1 + 16) = 256;
      break;
    default:
      uint64_t v28 = *((void *)v6 + 1);
      unsigned __int8 v29 = v6[16];
      *(void *)a1 = *(void *)v6;
      *(void *)(a1 + 8) = v28;
      *(_WORD *)(a1 + 16) = v29;
      break;
  }
  return result;
}

uint64_t AssistantLocationProvider.fetchLocation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in AssistantLocationProvider.fetchLocation(), (uint64_t)v5);
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a1;
  v4[14] = a4;
  v4[15] = type metadata accessor for LocationStatus(0);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AssistantLocationProvider.fetchLocation(), 0, 0);
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 112) + 128))();
  *(void *)(v0 + 152) = v1;
  if (!v1)
  {
    **(unsigned char **)(v0 + 104) = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v1;
  (*(void (**)(void))(**(void **)(v0 + 112) + 208))();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    outlined init with copy of LocationStatus(*(void *)(v0 + 144), v3);
    int v4 = *(unsigned __int8 *)(v3 + 8);
    uint64_t v5 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    if (v4 == 1)
    {
      uint64_t v6 = *(void *)(v0 + 144);
      uint64_t v7 = *(unsigned char **)(v0 + 104);
      swift_unknownObjectRelease();
      unsigned char *v7 = 0;
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
      outlined destroy of LocationStatus(v6);
LABEL_6:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
      return v9();
    }
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v5, v11);
  }
  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 112);
  outlined destroy of LocationStatus(*(void *)(v0 + 144));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  Date.init()();
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 216);
  unint64_t v15 = (*(void *)v13 + 216) & 0xFFFFFFFFFFFFLL | 0xFED9000000000000;
  *(void *)(v0 + 160) = v14;
  *(void *)(v0 + 168) = v15;
  v14(v12);
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + 176) = ObjectType;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in AssistantLocationProvider.fetchLocation();
  v17[4] = ObjectType;
  v17[5] = v2;
  return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync(), 0, 0);
}

{
  double *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  unsigned char *v24;
  uint64_t (*v25)(void);
  uint64_t v27;

  switch(*((void *)v0 + 24))
  {
    case 0:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
      uint64_t v2 = Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_1C8F83000, v2, v17, "Setting status to .siriLocationDisabled because authorization style is .undetermined", v18, 2u);
        MEMORY[0x1CB77E470](v18, -1, -1);
      }
      goto LABEL_28;
    case 1:
    case 2:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
      uint64_t v2 = Logger.logObject.getter();
      uint64_t v3 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v3))
      {
        int v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v4 = 0;
        _os_log_impl(&dword_1C8F83000, v2, v3, "Setting status to .unavailable because authorization style is .restricted or .denied", v4, 2u);
        MEMORY[0x1CB77E470](v4, -1, -1);
      }
      goto LABEL_28;
    case 3:
    case 4:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      *((void *)v0 + 26) = __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
      uint64_t v6 = Logger.logObject.getter();
      uint64_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1C8F83000, v6, v7, "Getting currentLocation from serviceHelper", v8, 2u);
        MEMORY[0x1CB77E470](v8, -1, -1);
      }
      uint64_t v9 = *((void *)v0 + 25);
      uint64_t v10 = *((void *)v0 + 19);

      uint64_t v11 = specialized closure #1 in closure #1 in AssistantLocationProvider.fetchLocation()(v9);
      uint64_t v12 = (double *)swift_task_alloc();
      *((void *)v0 + 27) = v12;
      *(void *)uint64_t v12 = v0;
      *((void *)v12 + 1) = closure #1 in AssistantLocationProvider.fetchLocation();
      v12[5] = v0[22];
      *((void *)v12 + 6) = v10;
      v12[4] = 1.0;
      v12[3] = v11;
      return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:), 0, 0);
    case 5:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
      uint64_t v2 = Logger.logObject.getter();
      uint64_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1C8F83000, v2, v20, "Setting status to .locationDisabled because authorization style is .serviceDisabled", v21, 2u);
        MEMORY[0x1CB77E470](v21, -1, -1);
      }
      goto LABEL_28;
    default:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
      uint64_t v2 = Logger.logObject.getter();
      uint64_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl(&dword_1C8F83000, v2, v14, "Setting status to .unknown because we encountered an unhandled authorization style", v15, 2u);
        MEMORY[0x1CB77E470](v15, -1, -1);
      }
LABEL_28:
      uint64_t v22 = (void (*)(uint64_t))*((void *)v0 + 20);
      unint64_t v23 = *((void *)v0 + 16);
      uint64_t v24 = (unsigned char *)*((void *)v0 + 13);

      swift_storeEnumTagMultiPayload();
      v22(v23);
      swift_unknownObjectRelease();
      const char *v24 = 0;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v25 = (uint64_t (*)(void))*((void *)v0 + 1);
      return v25();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  unsigned char *v15;
  uint64_t (*v16)(void);
  unsigned char *v18;
  uint64_t v19;

  uint64_t v1 = (void *)v0[28];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    int v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, v3, v4, "Setting status to .available", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }
    uint64_t v6 = v0[25];
    uint64_t v7 = (void (*)(uint64_t))v0[20];
    uint64_t v8 = v0[16];
    uint64_t v18 = (unsigned char *)v0[13];

    *(void *)uint64_t v8 = v2;
    *(void *)(v8 + 8) = v6;
    *(unsigned char *)(v8 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = v2;
    v7(v8);

    swift_unknownObjectRelease();
    char *v18 = 1;
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "Location returned from service helper is nil. Setting status to .unavailable.", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }
    uint64_t v13 = (void (*)(uint64_t))v0[20];
    uint64_t v14 = v0[16];
    unint64_t v15 = (unsigned char *)v0[13];

    swift_storeEnumTagMultiPayload();
    v13(v14);
    swift_unknownObjectRelease();
    *unint64_t v15 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  void *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  unsigned char *v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  unsigned char *v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 232);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0);
  if (swift_dynamicCast())
  {

    uint64_t v3 = *(void **)(v0 + 40);
    *(void *)(v0 + 80) = v3;
    lazy protocol witness table accessor for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*(void *)(v0 + 72) == 5)
    {
      int v4 = Logger.logObject.getter();
      uint64_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_1C8F83000, v4, v5, "Setting status to .siriLocationDisabled with unauthorizedToFetchLocation error", v6, 2u);
        MEMORY[0x1CB77E470](v6, -1, -1);
      }
    }
    else
    {
      uint64_t v18 = v3;
      uint64_t v19 = Logger.logObject.getter();
      uint64_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v34 = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        *(void *)(v0 + 88) = v18;
        lazy protocol witness table accessor for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode);
        unint64_t v23 = Error.localizedDescription.getter();
        *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v19, v20, "Setting status to .unavailable with error %s", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v22, -1, -1);
        MEMORY[0x1CB77E470](v21, -1, -1);
      }
      else
      {
      }
    }
    unsigned __int8 v29 = *(void (**)(uint64_t))(v0 + 160);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v31 = *(unsigned char **)(v0 + 104);
    swift_storeEnumTagMultiPayload();
    v29(v30);

    swift_unknownObjectRelease();
    *uint64_t v31 = 0;
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 232);

    uint64_t v8 = v7;
    uint64_t v9 = v7;
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    uint64_t v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void **)(v0 + 232);
    if (v12)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      unint64_t v15 = swift_slowAlloc();
      uint64_t v34 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v10, v11, "Setting status to .unavailable with error %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v15, -1, -1);
      MEMORY[0x1CB77E470](v14, -1, -1);
    }
    else
    {
    }
    uint64_t v25 = *(void **)(v0 + 232);
    uint64_t v26 = *(void (**)(uint64_t))(v0 + 160);
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = *(unsigned char **)(v0 + 104);
    swift_storeEnumTagMultiPayload();
    v26(v27);

    swift_unknownObjectRelease();
    *uint64_t v28 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = a2;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AssistantLocationProvider.fetchLocation(), 0, 0);
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1) {
    int v4 = closure #1 in AssistantLocationProvider.fetchLocation();
  }
  else {
    int v4 = closure #1 in AssistantLocationProvider.fetchLocation();
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync(), 0, 0);
}

uint64_t AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AFLocationAuthorizationStyle, CLAccuracyAuthorization));
  *uint64_t v2 = v0;
  v2[1] = AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync();
  return MEMORY[0x1F41880D8](v0 + 16, 0, 0, 0xD000000000000020, 0x80000001C91A1950, partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync(), v1, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1, double a2, double a3)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = v3;
  *(double *)(v4 + 24) = a2;
  *(double *)(v4 + 32) = a3;
  return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:), 0, 0);
}

uint64_t AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CLLocation?);
  *uint64_t v4 = v0;
  v4[1] = AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD00000000000002BLL, 0x80000001C91A1980, partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:), v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall AssistantLocationProvider.reset()()
{
  uint64_t v1 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(void *)v0 + 216))(v3);
}

uint64_t AssistantLocationProvider.deinit()
{
  swift_unknownObjectRelease();

  outlined destroy of LocationStatus(v0 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status);
  swift_release();
  swift_release();
  return v0;
}

uint64_t AssistantLocationProvider.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  outlined destroy of LocationStatus(v0 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesLocationManaging.fetchLocation() in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t protocol witness for PommesLocationManaging.setCachedLocation(location:) in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for PommesLocationManaging.cachedLocationInfo() in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t protocol witness for PommesLocationManaging.countryCode() in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272))();
}

uint64_t protocol witness for PommesLocationManaging.setServiceHelper(_:) in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for PommesLocationManaging.status.getter in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for PommesLocationManaging.statusPublisher.getter in conformance AssistantLocationProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1, id a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_currentAuthorizationStyle_);
  if (result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    MEMORY[0x1F4188790](v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    aBlock[4] = partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync();
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization) -> ();
    aBlock[3] = &block_descriptor_34;
    uint64_t v10 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    objc_msgSend(a2, sel_currentAuthorizationStyle_, v10);
    _Block_release(v10);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1, id a2, double a3, double a4)
{
  uint64_t result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_currentLocationWithAccuracy_timeout_completion_);
  if (result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void *)(v10 + 64);
    MEMORY[0x1F4188790](v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v13 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    aBlock[4] = partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_28;
    uint64_t v14 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_currentLocationWithAccuracy_timeout_completion_, v14, a3, a4);
    _Block_release(v14);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(void *a1, id a2)
{
  if (a2)
  {
    id v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1C90F66AC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in AssistantLocationProvider.fetchLocation()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1)
{
  return closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(a1, *(id *)(v1 + 24));
}

uint64_t partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1)
{
  return closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(a1, *(id *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1C90F67B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90F6800(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1C90F6854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 208))();
}

uint64_t sub_1C90F689C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90F68E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 240);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for AssistantLocationProvider()
{
  return type metadata accessor for AssistantLocationProvider();
}

uint64_t type metadata accessor for AssistantLocationProvider()
{
  uint64_t result = type metadata singleton initialization cache for AssistantLocationProvider;
  if (!type metadata singleton initialization cache for AssistantLocationProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AssistantLocationProvider()
{
  uint64_t result = type metadata accessor for LocationStatus(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AssistantLocationProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AssistantLocationProvider);
}

uint64_t dispatch thunk of AssistantLocationProvider.__allocating_init(serviceHelper:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AssistantLocationProvider.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of AssistantLocationProvider.setCachedLocation(location:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of AssistantLocationProvider.cachedLocationInfo()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of AssistantLocationProvider.countryCode()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of AssistantLocationProvider.fetchLocation()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of AssistantLocationProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t sub_1C90F6CB8()
{
  return objectdestroy_24Tm(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);

  return closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(a1, a2);
}

uint64_t sub_1C90F6D48()
{
  return objectdestroy_24Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
}

uint64_t objectdestroy_24Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()()
{
  return CheckedContinuation.resume(returning:)();
}

double specialized closure #1 in closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  if (a1 != 1)
  {
    if (!a1)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v2, v3))
      {
        uint64_t v5 = MEMORY[0x1E4F1E6F0];
        goto LABEL_19;
      }
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1C8F83000, v2, v3, "Fetching location with 100 meters accuracy", v4, 2u);
      uint64_t v5 = MEMORY[0x1E4F1E6F0];
      goto LABEL_16;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v7))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      unint64_t v8 = "Encountered unknown accuracyAuthorization. Fetching location with reduced accuracy.";
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v5 = MEMORY[0x1E4F1E728];
    goto LABEL_19;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v2, v7)) {
    goto LABEL_17;
  }
  uint64_t v4 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v4 = 0;
  unint64_t v8 = "Fetching location with reduced accuracy";
LABEL_15:
  _os_log_impl(&dword_1C8F83000, v2, v7, v8, v4, 2u);
  uint64_t v5 = MEMORY[0x1E4F1E728];
LABEL_16:
  MEMORY[0x1CB77E470](v4, -1, -1);
LABEL_19:

  return *(double *)v5;
}

uint64_t lazy protocol witness table accessor for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static PairedDeviceDataProvider.make()()
{
  type metadata accessor for PairedDeviceDataProvider();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t PairedDeviceDataProvider.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t type metadata accessor for PairedDeviceDataProvider()
{
  return self;
}

uint64_t PairedDeviceDataProvider.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

void *PairedDeviceDataProvider.pairedWatch.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void PairedDeviceDataProvider.pairedWatch.setter(uint64_t a1)
{
  swift_beginAccess();
  os_log_type_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*PairedDeviceDataProvider.pairedWatch.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PairedDeviceDataProvider.prepare()()
{
  uint64_t v1 = v0;
  id v2 = *(uint64_t (**)(void))(*(void *)v0 + 96);
  os_log_type_t v3 = (void *)v2();

  if (!v3)
  {
    id v4 = objc_msgSend(self, sel_sharedInstance);
    id v5 = objc_msgSend(v4, sel_getActivePairedDevice);

    (*(void (**)(id))(*(void *)v1 + 104))(v5);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    swift_retain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = v12;
      *(_DWORD *)uint64_t v9 = 136315138;
      v2();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NRDevice?);
      uint64_t v10 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v7, v8, "PairedDeviceDataProvider: paired watch fetched as %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v12, -1, -1);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t PairedDeviceDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    id v2 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1C8F83000, v2, v23, "PairedDeviceDataProvider: no paired device", v24, 2u);
      MEMORY[0x1CB77E470](v24, -1, -1);
    }
    goto LABEL_20;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v3, v4, v2);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_15:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_1C8F83000, v26, v27, "PairedDeviceDataProvider: found paired device but unable to extract productType, systemVersion, or regulatoryDeviceModel property", v28, 2u);
      MEMORY[0x1CB77E470](v28, -1, -1);
    }

LABEL_20:
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v8, v9, v2);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v13, v14, v2);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v32 = v10;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v33[0] = v31;
    *(_DWORD *)uint64_t v21 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v12, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v19, v20, "PairedDeviceDataProvider: returning paired device (product: %s, OS: %s, model: %s)", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v31, -1, -1);
    MEMORY[0x1CB77E470](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Useragentpb_CompanionDevice>);
  type metadata accessor for Useragentpb_CompanionDevice();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C91947A0;
  MEMORY[0x1F4188790](v29);
  lazy protocol witness table accessor for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice(&lazy protocol witness table cache variable for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice, MEMORY[0x1E4F888A8]);
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v29;
}

uint64_t closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0 = type metadata accessor for Useragentpb_DeviceMetadata();
  MEMORY[0x1F4188790](v0);
  uint64_t v1 = type metadata accessor for Useragentpb_UserAgent();
  MEMORY[0x1F4188790](v1);
  lazy protocol witness table accessor for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice(&lazy protocol witness table cache variable for type Useragentpb_UserAgent and conformance Useragentpb_UserAgent, MEMORY[0x1E4F88858]);
  static Message.with(_:)();
  Useragentpb_CompanionDevice.companionUserAgent.setter();
  lazy protocol witness table accessor for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice(&lazy protocol witness table cache variable for type Useragentpb_DeviceMetadata and conformance Useragentpb_DeviceMetadata, MEMORY[0x1E4F88888]);
  static Message.with(_:)();
  return Useragentpb_CompanionDevice.deviceMetadata.setter();
}

uint64_t closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return Useragentpb_UserAgent.productVersion.setter();
}

Swift::Void __swiftcall PairedDeviceDataProvider.reset()()
{
  (*(void (**)(void))(*(void *)v0 + 104))(0);
}

uint64_t PairedDeviceDataProvider.deinit()
{
  return v0;
}

uint64_t PairedDeviceDataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance PairedDeviceDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance PairedDeviceDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance PairedDeviceDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance PairedDeviceDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = specialized static PegasusOverrideUtil.pairedDeviceOverrideValue(forKey:)(a1, a2);
  if (!v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1CB77CA90](a1, a2);
    id v9 = objc_msgSend(a3, sel_valueForProperty_, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
    if (v13)
    {
      if (swift_dynamicCast()) {
        return v10;
      }
      else {
        return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v12);
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)();
}

uint64_t sub_1C90F805C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90F80A8(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 104);
  id v4 = *a1;
  return v3(v2);
}

uint64_t method lookup function for PairedDeviceDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PairedDeviceDataProvider);
}

uint64_t dispatch thunk of PairedDeviceDataProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))() & 1;
}

uint64_t dispatch thunk of PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 136);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of PairedDeviceDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t partial apply for closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)();
}

uint64_t partial apply for closure #2 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return MEMORY[0x1CB777A40](v2, v1);
}

uint64_t lazy protocol witness table accessor for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t UtteranceMatchPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static UtteranceMatchPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

void one-time initialization function for disallowedUtterances()
{
  static UtteranceMatchPreflightClient.disallowedUtterances = (uint64_t)&outlined read-only object #0 of one-time initialization function for disallowedUtterances;
}

uint64_t *UtteranceMatchPreflightClient.disallowedUtterances.unsafeMutableAddressor()
{
  if (one-time initialization token for disallowedUtterances != -1) {
    swift_once();
  }
  return &static UtteranceMatchPreflightClient.disallowedUtterances;
}

uint64_t static UtteranceMatchPreflightClient.disallowedUtterances.getter()
{
  if (one-time initialization token for disallowedUtterances != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static UtteranceMatchPreflightClient.disallowedUtterances.setter(uint64_t a1)
{
  if (one-time initialization token for disallowedUtterances != -1) {
    swift_once();
  }
  swift_beginAccess();
  static UtteranceMatchPreflightClient.disallowedUtterances = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static UtteranceMatchPreflightClient.disallowedUtterances.modify())()
{
  if (one-time initialization token for disallowedUtterances != -1) {
    swift_once();
  }
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

void UtteranceMatchPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v50 = type metadata accessor for PommesSearchReason();
  uint64_t v3 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v5 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v49 = (uint64_t)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  __int16 v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v44 - v13;
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(v12 + 20));
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t v19 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v19 = v18;
  }
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v44 - v13);
  if (!v19)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v14);
LABEL_10:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v48 = v5;
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v11);
    uint64_t v47 = v23;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v46 = v27;
      uint64_t v45 = v26;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v53 = v27;
      v44[1] = v26 + 4;
      uint64_t v28 = v8;
      uint64_t v29 = (uint64_t *)&v11[*(int *)(v8 + 20)];
      uint64_t v31 = *v29;
      unint64_t v30 = v29[1];
      swift_bridgeObjectRetain();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of PommesSearchRequest((uint64_t)v11);
      uint64_t v32 = v45;
      _os_log_impl(&dword_1C8F83000, v24, v25, "UtteranceMatchPreflightClient matched utterance: %s", v45, 0xCu);
      uint64_t v33 = v46;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v33, -1, -1);
      MEMORY[0x1CB77E470](v32, -1, -1);
    }
    else
    {
      outlined destroy of PommesSearchRequest((uint64_t)v11);

      uint64_t v28 = v8;
    }
    uint64_t v34 = (uint64_t *)(a1 + *(int *)(v28 + 32));
    uint64_t v35 = a1;
    uint64_t v36 = *v34;
    uint64_t v37 = v34[1];
    uint64_t v38 = v49;
    PommesSearchRequest.pommesCandidateId.getter(v49);
    uint64_t v39 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
    uint64_t v40 = (uint64_t)v48;
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)((uint64_t)v48);
    uint64_t v21 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v35, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v36, v37, v38, v40, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001DLL, 0x80000001C91997C0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v50);
    outlined destroy of PommesCandidateId?(v38);
    if (!v21)
    {
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl(&dword_1C8F83000, v41, v42, "UtteranceMatchPreflightClient#handle could not build PommesResponse with given parameters", v43, 2u);
        MEMORY[0x1CB77E470](v43, -1, -1);
      }

      uint64_t v21 = 0;
    }
    goto LABEL_19;
  }
  if (one-time initialization token for disallowedUtterances != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v20 = specialized Sequence<>.contains(_:)(*(void *)&v14[*(int *)(v8 + 20)], *(void *)&v14[*(int *)(v8 + 20) + 8], (void *)static UtteranceMatchPreflightClient.disallowedUtterances);
  outlined destroy of PommesSearchRequest((uint64_t)v14);
  uint64_t v21 = 0;
  if (v20) {
    goto LABEL_10;
  }
LABEL_19:
  uint64_t *v51 = v21;
}

uint64_t UtteranceMatchPreflightClient.deinit()
{
  return v0;
}

uint64_t UtteranceMatchPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t UtteranceMatchPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance UtteranceMatchPreflightClient()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance UtteranceMatchPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t type metadata accessor for UtteranceMatchPreflightClient()
{
  return self;
}

uint64_t method lookup function for UtteranceMatchPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UtteranceMatchPreflightClient);
}

uint64_t dispatch thunk of UtteranceMatchPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of UtteranceMatchPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t AppDataProvider.__allocating_init(appChecking:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized AppDataProvider.init(appChecking:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t AppData.applicationIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppData.supportedIntents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppData.supportedMediaCategories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppData.linkActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppDataProvider.appChecking.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

id AppDataProvider.linkMetadataProvider.getter()
{
  return *(id *)(v0 + 56);
}

uint64_t AppDataProvider.init(appChecking:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized AppDataProvider.init(appChecking:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t AppDataProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t AppDataProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t specialized AppDataProvider.init(appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(void *)(a2 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v9, a2 + 16);
  return a2;
}

uint64_t sub_1C90F8F3C()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t destroy for AppData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AppData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppData()
{
  return &type metadata for AppData;
}

uint64_t dispatch thunk of AppDataProviding.getAppInfo(bundleId:allowPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AppDataProviding.getVocabularies(bundleId:allowPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata accessor for AppDataProvider()
{
  return self;
}

uint64_t method lookup function for AppDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppDataProvider);
}

uint64_t dispatch thunk of AppDataProvider.__allocating_init(appChecking:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AppDataProvider.getAppInfo(bundleId:allowPlaceholder:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AppDataProvider.getVocabularies(bundleId:allowPlaceholder:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t outlined init with take of AppData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t NLXResultCandidate.init(parses:fallbackParse:responseVariantResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for NLXResultCandidate();
  uint64_t v11 = (uint64_t)a5 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)((char *)a5 + *(int *)(v10 + 24));
  *uint64_t v13 = 0;
  v13[1] = 0;
  *a5 = a1;
  outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(a2, v11);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v13 = a3;
  v13[1] = a4;
  return result;
}

uint64_t NLXResultCandidate.parses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLXResultCandidate.parses.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*NLXResultCandidate.parses.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t NLXResultCandidate.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);

  return outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(v3, a1);
}

uint64_t NLXResultCandidate.fallbackParse.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);

  return outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(a1, v3);
}

uint64_t (*NLXResultCandidate.fallbackParse.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t NLXResultCandidate.responseVariantResult.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for NLXResultCandidate() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLXResultCandidate.responseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NLXResultCandidate() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NLXResultCandidate.responseVariantResult.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t *initializeBufferWithCopyOfBuffer for NLXResultCandidate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 24);
    unint64_t v16 = (uint64_t *)((char *)v7 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *unint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return v7;
}

void *assignWithCopy for NLXResultCandidate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for NLXResultCandidate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for NLXResultCandidate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *unint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NLXResultCandidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C90F9C04);
}

uint64_t sub_1C90F9C04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NLXResultCandidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C90F9CCC);
}

void *sub_1C90F9CCC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for NLXResultCandidate()
{
  type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct?()
{
  if (!lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?)
  {
    type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
}

uint64_t SportsPersonalizationSelection<A>.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 2, v3);
  if (v12)
  {
    if (v12 == 1) {
      return 0x63696C7070616E69;
    }
    else {
      return 0x756769626D616E75;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD00000000000001ELL;
    unint64_t v22 = 0x80000001C91A1810;
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
    BOOL v15 = (v14 & 1) == 0;
    if (v14) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    if (v15) {
      unint64_t v17 = 0xE500000000000000;
    }
    else {
      unint64_t v17 = 0xE400000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    unint64_t v13 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v13;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance <A> SportsPersonalizationSelection<A>(uint64_t a1, uint64_t a2)
{
  return SportsPersonalizationSelection<A>.debugDescription.getter(a1, *(void *)(a2 - 8));
}

uint64_t type metadata instantiation function for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t type metadata completion function for SportsPersonalizationSelection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SportsPersonalizationSelection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *initializeWithTake for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationSelection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for SportsPersonalizationSelection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1C90FAEF8);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t getEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t type metadata accessor for SportsPersonalizationSelection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of CacheHandling.makeCacheable(pommesResponse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t *static DummyDataProvider.make(dummyResult:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = (char *)&v11 - v4;
  type metadata accessor for AnyDataProvider();
  uint64_t v6 = type metadata accessor for DummyDataProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = swift_allocObject();
  DummyDataProvider.init(dummyResult:)((uint64_t)v5);
  uint64_t v12 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  size_t v9 = specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v12, v6, WitnessTable);
  swift_release();
  return v9;
}

uint64_t type metadata accessor for DummyDataProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path setter for DummyDataProvider.dummyResult : <A>DummyDataProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v6);
}

uint64_t DummyDataProvider.dummyResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DummyDataProvider.dummyResult.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*DummyDataProvider.dummyResult.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t DummyDataProvider.__allocating_init(dummyResult:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  DummyDataProvider.init(dummyResult:)(a1);
  return v2;
}

uint64_t *DummyDataProvider.make()()
{
  type metadata accessor for AnyDataProvider();
  uint64_t v4 = v0;
  uint64_t v1 = type metadata accessor for DummyDataProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  return specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v4, v1, WitnessTable);
}

uint64_t DummyDataProvider.init(dummyResult:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 56))(v3, 1, 1, *(void *)(*(void *)v1 + 80));
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  swift_endAccess();
  return v1;
}

uint64_t DummyDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t DummyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t DummyDataProvider.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t DummyDataProvider.__deallocating_deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance DummyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance DummyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance DummyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for DataProvider.reset() in conformance DummyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_1C90FB848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t sub_1C90FB890()
{
  return 8;
}

void *sub_1C90FB89C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for DummyDataProvider()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for DummyDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DummyDataProvider);
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of DummyDataProvider.make()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DummyDataProvider.__allocating_init(dummyResult:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of DummyDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DummyDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))() & 1;
}

uint64_t dispatch thunk of DummyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 152);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of DummyDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit.fromString(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v6 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_13:
    uint64_t v12 = (unsigned int *)MEMORY[0x1E4F885A8];
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v9 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = (unsigned int *)MEMORY[0x1E4F885B0];
      goto LABEL_14;
    }
  }
  uint64_t v12 = (unsigned int *)MEMORY[0x1E4F885A0];
LABEL_14:
  uint64_t v13 = *v12;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104);

  return v15(a3, v13, v14);
}

uint64_t closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (uint64_t *)((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *char v8 = 5;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCAE0], v5);
  Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a2, a3, (uint64_t)v8);
  return (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(int *a1, uint64_t a2, uint64_t a3)
{
  void (*v16)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>));
  void (*v17)(void, void);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(id *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)());
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  CLLocation v48;
  unsigned int *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  void (*v57)(uint64_t *, void);
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t Context;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80[4];
  id v81[2];
  unsigned __int8 v82;
  char v83;
  uint64_t v84;
  unint64_t v85;

  uint64_t v76 = a2;
  uint64_t v77 = a3;
  uint64_t v67 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  MEMORY[0x1F4188790](v67);
  uint64_t v68 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Apple_Parsec_Search_V2_PreciseStatus();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v65 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v62);
  uint64_t v66 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v7 = *(void *)(Context - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Context);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    uint64_t v8 = swift_once();
  }
  char v11 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v8);
  uint64_t v78 = a1;
  uint64_t v59 = a1;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v71 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v72 = v14;
  int v15 = (char *)&v61 - v71;
  Date.init()();
  unsigned int v16 = *(void (**)(void *__return_ptr, void, void, void, void, void, void, void, void, void, void, _DWORD, void))(*(void *)v11 + 200);
  uint64_t v59 = &v58;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  LOBYTE(v58) = 2;
  v16(&v84, 0xD00000000000001DLL, 0x80000001C91A1D90, 0, v15, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 124, "addLocation(using:for:suspensionTimeInterval:)", 46, v58, partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:));
  int v17 = *(void (**)(void, void))(v13 + 8);
  uint64_t v74 = v13 + 8;
  uint64_t v75 = v12;
  uint64_t v69 = 0;
  uint64_t v70 = v17;
  v17(v15, v12);
  unsigned int v18 = v85;
  if (v85)
  {
    int v19 = v84;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    BOOL v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    unint64_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v80[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      v81[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v21, v22, "Adding country code to query context: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v24, -1, -1);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
  }
  os_log_type_t v25 = Context;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v79, Context);
  uint64_t v26 = v78;
  Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(v76, v78, v77);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v25);
  uint64_t v28 = static PerformanceUtil.shared;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v59 = v26;
  MEMORY[0x1F4188790](v29);
  unint64_t v30 = (char *)&v61 - v71;
  Date.init()();
  uint64_t v31 = *(void (**)(void *__return_ptr, void, void, void, void, void, void, void, void, void, void, _DWORD, void))(*(void *)v28 + 200);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  uint64_t v59 = &v58;
  uint64_t v60 = v32;
  LOBYTE(v58) = 2;
  v31(v81, 0xD00000000000001ELL, 0x80000001C91A1DE0, 0, v30, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 134, "addLocation(using:for:suspensionTimeInterval:)", 46, v58, partial apply for closure #2 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:));
  v70(v30, v75);
  uint64_t v33 = v81[0];
  if (v83)
  {
    if (LOBYTE(v81[0]))
    {
      if (LOBYTE(v81[0]) == 1)
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
        uint64_t v35 = Logger.logObject.getter();
        uint64_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v37 = 0;
          _os_log_impl(&dword_1C8F83000, v35, v36, "Location services disabled", v37, 2u);
          MEMORY[0x1CB77E470](v37, -1, -1);
        }
      }
      else
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
        uint64_t v35 = Logger.logObject.getter();
        unint64_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl(&dword_1C8F83000, v35, v54, "Siri location sharing disabled", v55, 2u);
          MEMORY[0x1CB77E470](v55, -1, -1);
        }
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
      uint64_t v35 = Logger.logObject.getter();
      uint64_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl(&dword_1C8F83000, v35, v51, "Location unavailable", v52, 2u);
        MEMORY[0x1CB77E470](v52, -1, -1);
      }
    }

    lazy protocol witness table accessor for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location();
    static Message.with(_:)();
    return Apple_Parsec_Search_PegasusQueryContext.location.setter();
  }
  else
  {
    uint64_t v38 = v81[1];
    uint64_t v39 = v82;
    uint64_t v40 = v81[0];
    uint64_t v41 = (uint64_t)v66;
    Date.init()();
    os_log_type_t v42 = (int *)v62;
    uint64_t v43 = v41 + *(int *)(v62 + 20);
    *(void *)uint64_t v43 = "SiriInformationSearch/PegasusQueryContext+Extensions.swift";
    *(void *)(v43 + 8) = 58;
    *(unsigned char *)(v43 + 16) = 2;
    *(void *)(v41 + v42[6]) = 140;
    uint64_t v44 = v41 + v42[7];
    *(void *)uint64_t v44 = "addLocation(using:for:suspensionTimeInterval:)";
    *(void *)(v44 + 8) = 46;
    *(unsigned char *)(v44 + 16) = 2;
    uint64_t v45 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
    uint64_t v46 = (uint64_t *)(v41 + v42[8]);
    *uint64_t v46 = v45;
    v46[1] = v47;
    v48.super.Class isa = (Class)v40;
    Apple_Parsec_Search_PegasusQueryContext.augment(withLocation:)(v48);
    outlined consume of Result<PommesLocationInfo, LocationError>(v33, (uint64_t)v38, v39, 0);
    if (v38)
    {
      if (v38 == (id)1) {
        uint64_t v49 = (unsigned int *)MEMORY[0x1E4F88CC8];
      }
      else {
        uint64_t v49 = (unsigned int *)MEMORY[0x1E4F88CD0];
      }
    }
    else
    {
      uint64_t v49 = (unsigned int *)MEMORY[0x1E4F88CD8];
    }
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v65, *v49, v64);
    uint64_t v57 = (void (*)(void, void))Apple_Parsec_Search_PegasusQueryContext.location.modify();
    Apple_Parsec_Search_V2_Location.preciseStatus.setter();
    v57(v80, 0);
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v41, 0);
    outlined consume of Result<PommesLocationInfo, LocationError>(v33, (uint64_t)v38, v39, 0);
    outlined consume of Result<PommesLocationInfo, LocationError>(v33, (uint64_t)v38, v39, 0);
    return _s21SiriInformationSearch13SignpostTokenVWOhTm_0(v41, type metadata accessor for PerformanceUtil.Ticket);
  }
}

void Apple_Parsec_Search_PegasusQueryContext.addSiriLocale(using:)(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + 104), sel_languageCode);
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    Apple_Parsec_Search_PegasusQueryContext.siriLocale.setter();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, oslog, v4, "Unable to add locale to QueryContext", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }
  }
}

void Apple_Parsec_Search_PegasusQueryContext.addSiriResponseLanguageVariant(using:)()
{
  uint64_t v0 = PommesSearchRequest.responseVariantResult.getter();
  if (v1)
  {
    uint64_t v2 = v0;
    unint64_t v3 = v1;
    swift_bridgeObjectRetain();
    Apple_Parsec_Search_PegasusQueryContext.siriResponseLanguageVariant.setter();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v5, v6, "Adding siri response language variant to query context: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v8, -1, -1);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 384))(*(void *)(v0 + 24));
}

uint64_t partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 392))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.addWeatherUnits(using:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);

  return specialized Apple_Parsec_Search_PegasusQueryContext.addWeatherUnits(using:)((uint64_t)v4, v1, v2, v3);
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v98 = a3;
  uint64_t v91 = a4;
  uint64_t v92 = a1;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  char v11 = (char *)&v84 - v10;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v93 = *(void *)(Context - 8);
  uint64_t v94 = Context;
  uint64_t v13 = MEMORY[0x1F4188790](Context);
  uint64_t v88 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v87 = (char *)&v84 - v16;
  MEMORY[0x1F4188790](v15);
  unsigned int v18 = (char *)&v84 - v17;
  uint64_t v19 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v19 - 8);
  unint64_t v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for OSSignposter();
  uint64_t v89 = __swift_project_value_buffer(v22, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("proxy.createQueryContext", 24, 2u, 0, (uint64_t)v21);
  Apple_Parsec_Search_PegasusQueryContext.init()();
  uint64_t v90 = v21;
  if (a2)
  {
    uint64_t v23 = a2;
    Apple_Parsec_Search_V2_Location.init()();
    id v24 = [v23 coordinate];
    *(float *)&double v25 = v25;
    MEMORY[0x1CB777B30](v24, *(float *)&v25);
    [v23 coordinate];
    Apple_Parsec_Search_V2_Location.longitude.setter();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    Apple_Parsec_Search_PegasusQueryContext.location.setter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1C91947A0;
    *(void *)(v26 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v26 + 32) = 0xD000000000000014;
    *(void *)(v26 + 40) = 0x80000001C91A1E30;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1C8F83000, v23, v28, "Location unavailable", v29, 2u);
      MEMORY[0x1CB77E470](v29, -1, -1);
    }
  }

  if (one-time initialization token for shared != -1) {
    uint64_t v30 = swift_once();
  }
  uint64_t v31 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v30);
  uint64_t v82 = (uint64_t *)v18;
  uint64_t v83 = (uint64_t)v98;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v99 = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v97 = *(void *)(v33 + 64);
  MEMORY[0x1F4188790](v32);
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v100 = (uint64_t *)v18;
  Date.init()();
  uint64_t v36 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(void *)v31 + 200);
  uint64_t v37 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v83 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v96 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v82 = (uint64_t *)&v80;
  LOBYTE(v80) = 2;
  v36(0xD000000000000015, 0x80000001C91A1C60, 0, (char *)&v84 - v35, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 72, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
  uint64_t v39 = v38((char *)&v84 - v35, v32);
  uint64_t v84 = v33 + 8;
  uint64_t v85 = &v84;
  uint64_t v40 = static PerformanceUtil.shared;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  os_log_type_t v42 = (uint64_t *)v92;
  uint64_t v82 = v100;
  uint64_t v83 = v92;
  MEMORY[0x1F4188790](v41);
  Date.init()();
  uint64_t v43 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(void *)v40 + 200);
  uint64_t v82 = (uint64_t *)&v80;
  uint64_t v83 = v37;
  LOBYTE(v80) = 2;
  v43(0xD000000000000026, 0x80000001C91A1C80, 0, (char *)&v84 - v35, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 75, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  uint64_t v44 = v99;
  uint64_t v86 = (void (*)(void, void))v38;
  uint64_t v45 = v38((char *)&v84 - v35, v99);
  uint64_t v85 = &v84;
  uint64_t v46 = static PerformanceUtil.shared;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v80 = v98;
  uint64_t v81 = v100;
  uint64_t v82 = v42;
  MEMORY[0x1F4188790](v47);
  unint64_t v95 = v35;
  Date.init()();
  uint64_t v48 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v46 + 200);
  uint64_t v49 = v94;
  uint64_t v82 = &v79;
  uint64_t v83 = v94;
  LOBYTE(v80) = 2;
  uint64_t v50 = v87;
  v48(0xD00000000000002DLL, 0x80000001C91A1CB0, 0, (char *)&v84 - v35, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 79, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  v38((char *)&v84 - v35, v44);
  uint64_t v85 = *(uint64_t **)(v93 + 40);
  uint64_t v51 = ((uint64_t (*)(uint64_t *, char *, uint64_t))v85)(v100, v50, v49);
  uint64_t v87 = (char *)&v84;
  uint64_t v52 = static PerformanceUtil.shared;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  unint64_t v54 = v98;
  uint64_t v82 = v98;
  uint64_t v83 = (uint64_t)v100;
  MEMORY[0x1F4188790](v53);
  Date.init()();
  uint64_t v55 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v52 + 200);
  uint64_t v82 = (uint64_t *)&v80;
  uint64_t v83 = v49;
  LOBYTE(v80) = 2;
  uint64_t v56 = v88;
  v55(0xD000000000000023, 0x80000001C91A1CE0, 0, (char *)&v84 - v35, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 82, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  uint64_t v57 = v99;
  uint64_t v58 = (void (*)(char *, uint64_t))v86;
  v86((char *)&v84 - v35, v99);
  uint64_t v59 = v49;
  uint64_t v60 = v57;
  uint64_t v61 = ((uint64_t (*)(uint64_t *, char *, uint64_t))v85)(v100, v56, v59);
  uint64_t v62 = static PerformanceUtil.shared;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v82 = v54;
  uint64_t v83 = (uint64_t)v100;
  MEMORY[0x1F4188790](v63);
  uint64_t v64 = (char *)&v84 - v95;
  Date.init()();
  uint64_t v65 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v62 + 200);
  uint64_t v82 = (uint64_t *)&v80;
  uint64_t v83 = v96;
  LOBYTE(v80) = 2;
  v65(0xD00000000000002BLL, 0x80000001C91A1D10, 0, v64, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 85, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v58(v64, v60);
  uint64_t v66 = type metadata accessor for PommesSearchRequest(0);
  if (*(unsigned char *)(v92 + *(int *)(v66 + 60)) == 1)
  {
    uint64_t v67 = static PerformanceUtil.shared;
    uint64_t v68 = MEMORY[0x1F4188790](v66);
    uint64_t v69 = v100;
    uint64_t v80 = v98;
    uint64_t v81 = v100;
    uint64_t v82 = v70;
    MEMORY[0x1F4188790](v68);
    uint64_t v71 = (char *)&v84 - v95;
    Date.init()();
    uint64_t v72 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v67 + 200);
    uint64_t v82 = &v79;
    uint64_t v83 = v96;
    LOBYTE(v80) = 2;
    v72(0xD00000000000002BLL, 0x80000001C91A1D60, 0, v71, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 90, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
    uint64_t v66 = ((uint64_t (*)(char *, uint64_t))v58)(v71, v99);
  }
  else
  {
    uint64_t v69 = v100;
  }
  uint64_t v73 = static PerformanceUtil.shared;
  uint64_t v74 = MEMORY[0x1F4188790](v66);
  uint64_t v82 = v69;
  MEMORY[0x1F4188790](v74);
  uint64_t v75 = (char *)&v84 - v95;
  Date.init()();
  uint64_t v76 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v73 + 200);
  uint64_t v82 = (uint64_t *)&v80;
  uint64_t v83 = v96;
  LOBYTE(v80) = 2;
  v76(0xD000000000000017, 0x80000001C91A1D40, 0, v75, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 96, "build(for:withLocation:dataProviderManager:)", 44, v80, partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  v58(v75, v99);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v93 + 32))(v91, v69, v94);
  uint64_t v77 = (uint64_t)v90;
  OSSignposter.end(token:message:)((uint64_t)v90, 0, 0xE000000000000000);
  return _s21SiriInformationSearch13SignpostTokenVWOhTm_0(v77, (uint64_t (*)(void))type metadata accessor for SignpostToken);
}

Swift::Void __swiftcall Apple_Parsec_Search_PegasusQueryContext.addLocation(using:)(CLLocation using)
{
  Class isa = using.super.isa;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  Apple_Parsec_Search_V2_Location.init()();
  id v9 = [(objc_class *)isa coordinate];
  *(float *)&double v10 = v10;
  MEMORY[0x1CB777B30](v9, *(float *)&v10);
  [(objc_class *)isa coordinate];
  Apple_Parsec_Search_V2_Location.longitude.setter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  Apple_Parsec_Search_PegasusQueryContext.location.setter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

void closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(*(id *)(a2 + 104), sel_languageCode);
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    Apple_Parsec_Search_PegasusQueryContext.siriLocale.setter();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C8F83000, v5, v6, "Unable to add locale to QueryContext", v7, 2u);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }
  }
}

uint64_t closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v7 = *(void *)(Context - 8);
  MEMORY[0x1F4188790](Context);
  id v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, Context);
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 336))(v9, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, Context);
}

uint64_t closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v5 = *(void *)(Context - 8);
  MEMORY[0x1F4188790](Context);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, Context);
  (*(void (**)(char *))(*(void *)a1 + 376))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, Context);
}

uint64_t closure #8 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1)
{
  type metadata accessor for UnitManager();
  uint64_t v2 = static UnitManager.standard.getter();
  specialized Apple_Parsec_Search_PegasusQueryContext.addWeatherUnits(using:)(v2, a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  *a1 = result;
  a1[1] = v7;
  return result;
}

void Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (Apple_Parsec_Search_PegasusQueryContext.shouldSuspend(_:_:)(a1, a2))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1C8F83000, v6, v7, "locationManager.status is pending. Suspending execution until location available or timeout.", v8, 2u);
      MEMORY[0x1CB77E470](v8, -1, -1);
    }

    dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v10);
    v31[1] = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    *(void *)(swift_allocObject() + 16) = v9;
    uint64_t v12 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Result<LocationStatus, LocationError>, Never>);
    lazy protocol witness table accessor for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v13 = type metadata accessor for DispatchTime();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = MEMORY[0x1F4188790](v13);
    uint64_t v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x1F4188790](v15);
    uint64_t v19 = (char *)v31 - v18;
    static DispatchTime.now()();
    MEMORY[0x1CB77C970](v19, a3);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
    v20(v19, v13);
    char v21 = MEMORY[0x1CB77D1D0](v17);
    v20(v17, v13);
    AnyCancellable.cancel()();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    if (v21)
    {
      if (v24)
      {
        double v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v25 = 0;
        os_log_type_t v26 = v23;
        uint64_t v27 = "Timed out waiting to receive location. Resuming execution with no location info.";
        goto LABEL_18;
      }
    }
    else if (v24)
    {
      double v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v25 = 0;
      os_log_type_t v26 = v23;
      uint64_t v27 = "Resuming execution to add location to Pegasus request";
LABEL_18:
      _os_log_impl(&dword_1C8F83000, v22, v26, v27, v25, 2u);
      MEMORY[0x1CB77E470](v25, -1, -1);

      swift_release();
      return;
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    v31[0] = (id)Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v31[0], v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C8F83000, (os_log_t)v31[0], v29, "Will not suspend request. Continuing to add location.", v30, 2u);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }
  }
}

uint64_t partial apply for closure #2 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
}

uint64_t closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E4F88918]);
}

uint64_t closure #4 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E4F88908]);
}

uint64_t closure #5 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E4F88930]);
}

uint64_t closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  return Apple_Parsec_Search_V2_Location.source.setter();
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location)
  {
    type metadata accessor for Apple_Parsec_Search_V2_Location();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location);
  }
  return result;
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.shouldSuspend(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v7);
  dispatch_semaphore_t v9 = (id *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v15 = (char *)v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                 + 48);
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v9, type metadata accessor for LocationStatus);
      return 0;
    }
    char v13 = *((unsigned char *)v9 + 16);

    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  outlined init with copy of PommesSearchRequest.ParseState(a1, (uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                              + 64)];
    swift_bridgeObjectRelease();
    outlined destroy of Siri_Nlu_External_DelegatedUserDialogAct?(v17);
    return 1;
  }
  else
  {
    _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
    return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 80));
  }
}

void closure #1 in Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (id *)((char *)&v40 - v10);
  MEMORY[0x1F4188790](v9);
  char v13 = (char *)&v40 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<LocationStatus, LocationError>(a1, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v17 = *v16;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      char v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v41 = v22;
      *(_DWORD *)char v21 = 136315138;
      LOBYTE(v40) = v17;
      lazy protocol witness table accessor for type LocationError and conformance LocationError();
      uint64_t v23 = Error.localizedDescription.getter();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v19, v20, "locationManager.statusPublisher failed with error=%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v22, -1, -1);
      MEMORY[0x1CB77E470](v21, -1, -1);
    }
  }
  else
  {
    outlined init with take of LocationStatus((uint64_t)v16, (uint64_t)v13);
    outlined init with copy of PommesSearchRequest.ParseState((uint64_t)v13, (uint64_t)v11, type metadata accessor for LocationStatus);
    if (swift_getEnumCaseMultiPayload())
    {
      _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v11, type metadata accessor for LocationStatus);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesSearchRequest.ParseState((uint64_t)v13, (uint64_t)v8, type metadata accessor for LocationStatus);
      os_log_type_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = 0xD000000000000011;
        os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v41 = v30;
        *(_DWORD *)os_log_type_t v29 = 136315138;
        outlined init with copy of PommesSearchRequest.ParseState((uint64_t)v8, (uint64_t)v5, type metadata accessor for LocationStatus);
        unint64_t v31 = 0x80000001C91A1910;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v38 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                             + 48)];
            uint64_t v39 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
            unint64_t v31 = 0xE800000000000000;
            uint64_t v28 = 0x676E69646E65702ELL;
            break;
          case 2u:
            break;
          case 3u:
            uint64_t v28 = 0xD000000000000015;
            uint64_t v32 = ".siriLocationDisabled";
            goto LABEL_21;
          case 4u:
            unint64_t v31 = 0xEC000000656C6261;
            uint64_t v28 = 0x6C696176616E752ELL;
            break;
          case 5u:
            unint64_t v31 = 0xE800000000000000;
            uint64_t v28 = 0x6E776F6E6B6E752ELL;
            break;
          default:
            _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v5, type metadata accessor for LocationStatus);
            uint64_t v28 = 0xD00000000000001ELL;
            uint64_t v32 = ".available(PommesLocationInfo)";
LABEL_21:
            unint64_t v31 = (unint64_t)(v32 - 32) | 0x8000000000000000;
            break;
        }
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v31, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v8, type metadata accessor for LocationStatus);
        _os_log_impl(&dword_1C8F83000, v26, v27, "locationManager.status changed to %s. Continuing suspension until location available or timeout.", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v30, -1, -1);
        MEMORY[0x1CB77E470](v29, -1, -1);

        uint64_t v37 = (uint64_t)v13;
      }
      else
      {

        _s21SiriInformationSearch13SignpostTokenVWOhTm_0((uint64_t)v8, type metadata accessor for LocationStatus);
        uint64_t v37 = (uint64_t)v13;
      }
    }
    else
    {

      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_1C8F83000, v34, v35, "locationManager.status changed to available", v36, 2u);
        MEMORY[0x1CB77E470](v36, -1, -1);
      }

      OS_dispatch_semaphore.signal()();
      uint64_t v37 = (uint64_t)v13;
    }
    _s21SiriInformationSearch13SignpostTokenVWOhTm_0(v37, type metadata accessor for LocationStatus);
  }
}

void static Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit.fromWeatherUnitManager(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = self;
  id v16 = v5;
  id v7 = objc_msgSend(v6, sel_celsius);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v8 = *MEMORY[0x1E4F88B88];
    uint64_t v9 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a2, v8, v9);
  }
  else
  {
    id v10 = objc_msgSend(v6, sel_fahrenheit);
    char v11 = static NSObject.== infix(_:_:)();

    uint64_t v12 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit();
    char v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
    if (v11) {
      uint64_t v14 = (unsigned int *)MEMORY[0x1E4F88B80];
    }
    else {
      uint64_t v14 = (unsigned int *)MEMORY[0x1E4F88B90];
    }
    uint64_t v15 = *v14;
    v13(a2, v15, v12);
  }
}

void static Apple_Parsec_Search_V2_WeatherUnits.WindUnit.fromWeatherUnitManager(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  uint64_t v6 = self;
  id v21 = v5;
  id v7 = objc_msgSend(v6, sel_metersPerSecond);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSUnitSpeed);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88BB8];
LABEL_7:
    uint64_t v13 = *v8;
    uint64_t v14 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.WindUnit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(a2, v13, v14);

    return;
  }
  id v21 = v21;
  id v9 = objc_msgSend(v6, sel_kilometersPerHour);
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88BC0];
    goto LABEL_7;
  }
  id v21 = v21;
  id v11 = objc_msgSend(v6, sel_milesPerHour);
  char v12 = static NSObject.== infix(_:_:)();

  if (v12)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88BB0];
    goto LABEL_7;
  }
  id v15 = objc_msgSend(v6, sel_knots);
  char v16 = static NSObject.== infix(_:_:)();

  uint64_t v17 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.WindUnit();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104);
  if (v16) {
    uint64_t v19 = (unsigned int *)MEMORY[0x1E4F88BC8];
  }
  else {
    uint64_t v19 = (unsigned int *)MEMORY[0x1E4F88BD0];
  }
  uint64_t v20 = *v19;

  v18(a2, v20, v17);
}

void static Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit.fromWeatherUnitManager(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v6 = self;
  id v19 = v5;
  id v7 = objc_msgSend(v6, sel_inches);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSUnitLength);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88BA0];
LABEL_5:
    uint64_t v11 = *v8;
    uint64_t v12 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a2, v11, v12);

    return;
  }
  id v19 = v19;
  id v9 = objc_msgSend(v6, sel_millimeters);
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88B98];
    goto LABEL_5;
  }
  id v13 = objc_msgSend(v6, sel_centimeters);
  char v14 = static NSObject.== infix(_:_:)();

  uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit();
  char v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104);
  if (v14) {
    uint64_t v17 = (unsigned int *)MEMORY[0x1E4F88B98];
  }
  else {
    uint64_t v17 = (unsigned int *)MEMORY[0x1E4F88BA8];
  }
  uint64_t v18 = *v17;

  v16(a2, v18, v15);
}

void static Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit.fromWeatherUnitManager(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t v6 = self;
  id v16 = v5;
  id v7 = objc_msgSend(v6, sel_miles);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSUnitLength);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v8 = *MEMORY[0x1E4F88B48];
    uint64_t v9 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a2, v8, v9);
  }
  else
  {
    id v10 = objc_msgSend(v6, sel_kilometers);
    char v11 = static NSObject.== infix(_:_:)();

    uint64_t v12 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit();
    id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
    if (v11) {
      char v14 = (unsigned int *)MEMORY[0x1E4F88B40];
    }
    else {
      char v14 = (unsigned int *)MEMORY[0x1E4F88B50];
    }
    uint64_t v15 = *v14;
    v13(a2, v15, v12);
  }
}

void static Apple_Parsec_Search_V2_WeatherUnits.PressureUnit.fromWeatherUnitManager(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
  uint64_t v6 = self;
  id v21 = v5;
  id v7 = objc_msgSend(v6, sel_millibars);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSUnitPressure);
  LOBYTE(v4) = static NSObject.== infix(_:_:)();

  if (v4)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88B78];
LABEL_7:
    uint64_t v13 = *v8;
    uint64_t v14 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PressureUnit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(a2, v13, v14);

    return;
  }
  id v21 = v21;
  id v9 = objc_msgSend(v6, sel_inchesOfMercury);
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88B68];
    goto LABEL_7;
  }
  id v21 = v21;
  id v11 = objc_msgSend(v6, sel_hectopascals);
  char v12 = static NSObject.== infix(_:_:)();

  if (v12)
  {
    uint64_t v8 = (unsigned int *)MEMORY[0x1E4F88B60];
    goto LABEL_7;
  }
  id v15 = objc_msgSend(v6, sel_kilopascals);
  char v16 = static NSObject.== infix(_:_:)();

  uint64_t v17 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PressureUnit();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104);
  if (v16) {
    id v19 = (unsigned int *)MEMORY[0x1E4F88B58];
  }
  else {
    id v19 = (unsigned int *)MEMORY[0x1E4F88B70];
  }
  uint64_t v20 = *v19;

  v18(a2, v20, v17);
}

uint64_t protocol witness for UnitManagerProtocol.temperature.getter in conformance UnitManager()
{
  return UnitManager.temperature.getter();
}

uint64_t protocol witness for UnitManagerProtocol.windSpeed.getter in conformance UnitManager()
{
  return UnitManager.windSpeed.getter();
}

uint64_t protocol witness for UnitManagerProtocol.precipitationRainfall.getter in conformance UnitManager()
{
  return UnitManager.precipitationRainfall.getter();
}

uint64_t protocol witness for UnitManagerProtocol.visibility.getter in conformance UnitManager()
{
  return UnitManager.visibility.getter();
}

uint64_t protocol witness for UnitManagerProtocol.pressure.getter in conformance UnitManager()
{
  return UnitManager.pressure.getter();
}

uint64_t specialized Apple_Parsec_Search_PegasusQueryContext.addWeatherUnits(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PressureUnit();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v27[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit();
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.WindUnit();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v27[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v27[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v24 = (char *)&v27[-1] - v23;
  v27[3] = type metadata accessor for UnitManager();
  v27[4] = &protocol witness table for UnitManager;
  v27[0] = a1;
  swift_retain();
  Apple_Parsec_Search_V2_WeatherUnits.init()();
  static Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit.fromWeatherUnitManager(_:)(v27, (uint64_t)v17);
  Apple_Parsec_Search_V2_WeatherUnits.temperature.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.WindUnit.fromWeatherUnitManager(_:)(v27, (uint64_t)v14);
  Apple_Parsec_Search_V2_WeatherUnits.wind.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit.fromWeatherUnitManager(_:)(v27, (uint64_t)v11);
  Apple_Parsec_Search_V2_WeatherUnits.precipitation.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit.fromWeatherUnitManager(_:)(v27, (uint64_t)v8);
  Apple_Parsec_Search_V2_WeatherUnits.distance.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.PressureUnit.fromWeatherUnitManager(_:)(v27, (uint64_t)v5);
  Apple_Parsec_Search_V2_WeatherUnits.pressure.setter();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v24, v18);
  Apple_Parsec_Search_PegasusQueryContext.weatherUnits.setter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v18);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t specialized Apple_Parsec_Search_PegasusQueryContext.addWeatherUnits(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PressureUnit();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.WindUnit();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Search_V2_WeatherUnits();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v29 - v25;
  v32[3] = a3;
  v32[4] = v29;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, v30, a3);
  Apple_Parsec_Search_V2_WeatherUnits.init()();
  static Apple_Parsec_Search_V2_WeatherUnits.TemperatureUnit.fromWeatherUnitManager(_:)(v32, (uint64_t)v19);
  Apple_Parsec_Search_V2_WeatherUnits.temperature.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.WindUnit.fromWeatherUnitManager(_:)(v32, (uint64_t)v16);
  Apple_Parsec_Search_V2_WeatherUnits.wind.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.PrecipitationUnit.fromWeatherUnitManager(_:)(v32, (uint64_t)v13);
  Apple_Parsec_Search_V2_WeatherUnits.precipitation.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.DistanceUnit.fromWeatherUnitManager(_:)(v32, (uint64_t)v10);
  Apple_Parsec_Search_V2_WeatherUnits.distance.setter();
  static Apple_Parsec_Search_V2_WeatherUnits.PressureUnit.fromWeatherUnitManager(_:)(v32, (uint64_t)v7);
  Apple_Parsec_Search_V2_WeatherUnits.pressure.setter();
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v20);
  Apple_Parsec_Search_PegasusQueryContext.weatherUnits.setter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

void partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
}

uint64_t partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  return closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  return closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  return closure #8 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(void *)(v0 + 16));
}

uint64_t dispatch thunk of UnitManagerProtocol.temperature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UnitManagerProtocol.windSpeed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of UnitManagerProtocol.precipitationRainfall.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of UnitManagerProtocol.visibility.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of UnitManagerProtocol.pressure.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1C9100300()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<Result<LocationStatus, LocationError>, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of Result<LocationStatus, LocationError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LocationError and conformance LocationError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationError and conformance LocationError;
  if (!lazy protocol witness table cache variable for type LocationError and conformance LocationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationError and conformance LocationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationError and conformance LocationError;
  if (!lazy protocol witness table cache variable for type LocationError and conformance LocationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationError and conformance LocationError);
  }
  return result;
}

uint64_t partial apply for closure #8 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

void partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
}

uint64_t partial apply for closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t *PommesBridgeInstrumentationUtil.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  return &static PommesBridgeInstrumentationUtil.sharedInstance;
}

uint64_t one-time initialization function for sharedInstance()
{
  type metadata accessor for PommesBridgeInstrumentationUtil();
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = objc_msgSend(self, sel_sharedStream);
  type metadata accessor for InstrumentationUtil();
  swift_allocObject();
  v0[3] = InstrumentationUtil.init()();
  type metadata accessor for AnalyticsComponentIdGenerator();
  v0[4] = swift_allocObject();
  uint64_t v1 = type metadata accessor for FeatureChecker();
  uint64_t result = swift_allocObject();
  v0[8] = v1;
  v0[9] = &protocol witness table for FeatureChecker;
  v0[5] = result;
  static PommesBridgeInstrumentationUtil.sharedInstance = (uint64_t)v0;
  return result;
}

uint64_t static PommesBridgeInstrumentationUtil.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.stream.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PommesBridgeInstrumentationUtil.commonInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.componentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.featureChecker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 40, a1);
}

void *PommesBridgeInstrumentationUtil.__allocating_init(_:_:_:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  outlined init with take of AppDataProviding(a4, (uint64_t)(v8 + 5));
  return v8;
}

void *PommesBridgeInstrumentationUtil.init(_:_:_:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  outlined init with take of AppDataProviding(a4, (uint64_t)(v4 + 5));
  return v4;
}

void PommesBridgeInstrumentationUtil.logPommesRequestStarted(pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v4 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a1, a2, a3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0DF8]), sel_init);
    [v22 setExists:1];
    id v6 = objc_msgSend(v5, sel_pommesBridgeContext);
    objc_msgSend(v6, sel_setStartedOrChanged_, v22);

    objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v5);
    uint64_t v7 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_captureSnapshot);

      if (v9)
      {
        id v10 = objc_msgSend(self, sel_context);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v12 - 8);
          uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
          UUID.init(uuidString:)();
          uint64_t v15 = type metadata accessor for UUID();
          uint64_t v16 = *(void *)(v15 - 8);
          Class isa = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
          {
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
          }
          objc_msgSend(v9, sel_logWithEventContext_requestIdentifier_, v11, isa);
        }
        else
        {
          __break(1u);
        }
        return;
      }
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1C8F83000, v22, v19, "Unable to log Pommes request started because wrapperEvent is nil", v20, 2u);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestEnded(status:pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v6 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a2, a3, a4);
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0DE8]), sel_init);
    [v24 setStatus:a1];
    id v8 = objc_msgSend(v7, sel_pommesBridgeContext);
    objc_msgSend(v8, sel_setEnded_, v24);

    objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v7);
    id v9 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
    if (v9)
    {
      id v10 = v9;
      id v11 = objc_msgSend(v9, sel_captureSnapshot);

      if (v11)
      {
        id v12 = objc_msgSend(self, sel_context);
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v14 - 8);
          uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
          UUID.init(uuidString:)();
          uint64_t v17 = type metadata accessor for UUID();
          uint64_t v18 = *(void *)(v17 - 8);
          Class isa = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
          {
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
          }
          objc_msgSend(v11, sel_logWithEventContext_requestIdentifier_, v13, isa);
        }
        else
        {
          __break(1u);
        }
        return;
      }
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C8F83000, v24, v21, "Unable to log Pommes request ended because wrapperEvent is nil", v22, 2u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestFailed(reason:pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v6 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a2, a3, a4);
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0DF0]), sel_init);
    [v24 setReason:a1];
    id v8 = objc_msgSend(v7, sel_pommesBridgeContext);
    objc_msgSend(v8, sel_setFailed_, v24);

    objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v7);
    id v9 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
    if (v9)
    {
      id v10 = v9;
      id v11 = objc_msgSend(v9, sel_captureSnapshot);

      if (v11)
      {
        id v12 = objc_msgSend(self, sel_context);
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          MEMORY[0x1F4188790](v14 - 8);
          uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
          UUID.init(uuidString:)();
          uint64_t v17 = type metadata accessor for UUID();
          uint64_t v18 = *(void *)(v17 - 8);
          Class isa = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
          {
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
          }
          objc_msgSend(v11, sel_logWithEventContext_requestIdentifier_, v13, isa);
        }
        else
        {
          __break(1u);
        }
        return;
      }
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C8F83000, v24, v21, "Unable to log Pommes request failed because wrapperEvent is nil", v22, 2u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestUnableToHandle(pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v4 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a1, a2, a3);
  if (v4)
  {
    uint64_t v5 = v4;
    os_log_t oslog = (os_log_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E00]), sel_init);
    [oslog setExists:1];
    id v6 = objc_msgSend(v5, sel_pommesBridgeContext);
    objc_msgSend(v6, sel_setCancelled_, oslog);

    objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v5);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_1C8F83000, oslog, v8, "Unable to log Pommes request unable to habdle because wrapperEvent is nil", v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
  }
}

void *PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char a8)
{
  uint64_t v106 = a5;
  uint64_t v107 = a6;
  uint64_t v108 = a4;
  uint64_t v109 = a1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PommesSearchError(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v101 = (id *)((char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for PommesSearchReason();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v104 = v19;
  uint64_t v105 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v102 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v100 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v93 - v25;
  uint64_t v27 = type metadata accessor for PommesError();
  uint64_t v103 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v93 - v31;
  if ((a8 & 1) == 0)
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 136);
    id v34 = a7;
    v33(1, a2, a3, v108, v106, v107);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v109, 1, 1, v16);
    return a7;
  }
  uint64_t v93 = v30;
  uint64_t v95 = a2;
  uint64_t v96 = a3;
  uint64_t v97 = v8;
  uint64_t v98 = v17;
  uint64_t v99 = v29;
  v111[0] = a7;
  id v36 = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  v111[0] = a7;
  id v37 = a7;
  if (swift_dynamicCast())
  {
    LOBYTE(v111[0]) = v110;
    logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)((unsigned __int8 *)v111, a7, v97, v95, v96, v108, v106, v107, (uint64_t)v26);
    uint64_t v38 = v103;
    uint64_t v39 = v99;
    uint64_t v40 = v16;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v26, 1, v99) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      uint64_t v42 = v104;
      uint64_t v41 = v105;
      uint64_t v43 = v102;
      (*(void (**)(char *, void, uint64_t))(v105 + 104))(v102, *MEMORY[0x1E4F9FE98], v104);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      uint64_t v44 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v45, *MEMORY[0x1E4FA23E0], v39);
      uint64_t v46 = v109;
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v109 + *(int *)(v40 + 20), v43, v42);
      *uint64_t v46 = v44;
      outlined consume of Result<PommesResponse, Error>(a7);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v42);
    }
    else
    {
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v57(v32, v26, v39);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      uint64_t v58 = swift_allocError();
      v57(v59, v32, v39);
      outlined consume of Result<PommesResponse, Error>(a7);
      uint64_t v46 = v109;
      (*(void (**)(char *, void, uint64_t))(v105 + 104))((char *)v109 + *(int *)(v16 + 20), *MEMORY[0x1E4F9FE98], v104);
      *uint64_t v46 = v58;
    }
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v98 + 56))(v46, 0, 1, v40);
    return 0;
  }
  v111[0] = a7;
  uint64_t v94 = a7;
  id v47 = a7;
  uint64_t v48 = v16;
  int v49 = swift_dynamicCast();
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
  if (!v49)
  {
    v50(v15, 1, 1, v16);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
    uint64_t v61 = v94;
    id v62 = v94;
    id v63 = v61;
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v110 = (uint64_t)v94;
      v111[0] = v67;
      id v68 = v94;
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)v111);
      uint64_t v61 = v94;
      uint64_t v48 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<PommesResponse, Error>(v61);
      outlined consume of Result<PommesResponse, Error>(v61);
      _os_log_impl(&dword_1C8F83000, v64, v65, "Pommes request failed due to unknown error, not of expected types: %s", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v67, -1, -1);
      MEMORY[0x1CB77E470](v66, -1, -1);
    }
    else
    {
      outlined consume of Result<PommesResponse, Error>(v61);
      outlined consume of Result<PommesResponse, Error>(v61);
    }

    uint64_t v78 = v109;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v97 + 144))(0, v95, v96, v108, v106, v107);
    uint64_t v80 = v104;
    uint64_t v79 = v105;
    uint64_t v81 = v102;
    (*(void (**)(char *, void, uint64_t))(v105 + 104))(v102, *MEMORY[0x1E4F9FE98], v104);
    lazy protocol witness table accessor for type PommesError and conformance PommesError();
    uint64_t v82 = v99;
    uint64_t v83 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(v103 + 104))(v84, *MEMORY[0x1E4FA23E0], v82);
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))((char *)v78 + *(int *)(v48 + 20), v81, v80);
    *uint64_t v78 = v83;
    outlined consume of Result<PommesResponse, Error>(v61);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v80);
    uint64_t v77 = v78;
    goto LABEL_21;
  }
  v50(v15, 0, 1, v16);
  uint64_t v51 = v101;
  outlined init with take of PommesSearchError((uint64_t)v15, (uint64_t)v101);
  v111[0] = *v51;
  id v52 = v111[0];
  if (swift_dynamicCast())
  {
    LOBYTE(v111[0]) = v110;
    uint64_t v53 = v100;
    unint64_t v54 = v94;
    logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)((unsigned __int8 *)v111, v94, v97, v95, v96, v108, v106, v107, v100);
    uint64_t v55 = v103;
    uint64_t v56 = v99;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v53, 1, v99) != 1)
    {
      uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
      uint64_t v86 = v93;
      v85(v93, v53, v56);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      uint64_t v87 = swift_allocError();
      v85(v88, v86, v56);
      outlined consume of Result<PommesResponse, Error>(v54);
      uint64_t v90 = v104;
      uint64_t v89 = v105;
      uint64_t v91 = v102;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v102, (char *)v51 + *(int *)(v48 + 20), v104);
      outlined destroy of PommesSearchError((uint64_t)v51);
      uint64_t v92 = v109;
      *uint64_t v109 = v87;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))((char *)v92 + *(int *)(v48 + 20), v91, v90);
      uint64_t v77 = v92;
      goto LABEL_21;
    }
    outlined destroy of MediaUserStateCenter?(v53, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  }
  else
  {
    uint64_t v55 = v103;
  }
  uint64_t v71 = (char *)v51 + *(int *)(v48 + 20);
  lazy protocol witness table accessor for type PommesError and conformance PommesError();
  uint64_t v72 = (uint64_t)v51;
  uint64_t v73 = v99;
  uint64_t v74 = swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))(v75, *MEMORY[0x1E4FA23E0], v73);
  uint64_t v76 = v109;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))((char *)v109 + *(int *)(v48 + 20), v71, v104);
  *uint64_t v76 = v74;
  outlined consume of Result<PommesResponse, Error>(v94);
  outlined destroy of PommesSearchError(v72);
  uint64_t v77 = v76;
LABEL_21:
  v50((char *)v77, 0, 1, v48);
  return 0;
}

uint64_t logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = a5;
  unsigned int v15 = *a1;
  if (!(v15 >> 6))
  {
    if (v15 == 2)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v23, v24)) {
        goto LABEL_43;
      }
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C8F83000, v23, v24, "Declining Pommes request due to low PSC score. This is expected behavior for non-info requests.", v25, 2u);
      uint64_t v26 = v25;
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
      id v49 = a2;
      id v50 = a2;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v23, v51))
      {

        goto LABEL_43;
      }
      id v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = a9;
      uint64_t v53 = swift_slowAlloc();
      uint64_t v94 = v53;
      *(_DWORD *)id v52 = 136315138;
      id v54 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v55 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v23, v51, "Pommes request unable to be handled: %s", v52, 0xCu);
      swift_arrayDestroy();
      uint64_t v57 = v53;
      a9 = v89;
      MEMORY[0x1CB77E470](v57, -1, -1);
      uint64_t v26 = v52;
    }
    MEMORY[0x1CB77E470](v26, -1, -1);
LABEL_43:

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 152))(a4, v10, a6, a7, a8);
    uint64_t v81 = (unsigned int *)MEMORY[0x1E4FA23C8];
LABEL_50:
    uint64_t v82 = *v81;
    uint64_t v80 = type metadata accessor for PommesError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 104))(a9, v82, v80);
    goto LABEL_51;
  }
  if (v15 >> 6 != 1)
  {
    if (v15 == 128)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
      id v59 = a2;
      id v60 = a2;
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v90 = v10;
        id v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        uint64_t v94 = v85;
        *(_DWORD *)id v63 = 136315138;
        id v64 = a2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v65 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v61, v62, "Pommes request failed due to invalid state: %s", v63, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v85, -1, -1);
        uint64_t v67 = v63;
        uint64_t v10 = v90;
        MEMORY[0x1CB77E470](v67, -1, -1);
      }
      else
      {
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 144))(7, a4, v10, a6, a7, a8);
      uint64_t v81 = (unsigned int *)MEMORY[0x1E4FA23B8];
    }
    else if (v15 == 129)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
      id v28 = a2;
      id v29 = a2;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v87 = v10;
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        uint64_t v94 = v84;
        *(_DWORD *)uint64_t v32 = 136315138;
        id v33 = a2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v34 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v30, v31, "Pommes request failed due to getting no results: %s", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v84, -1, -1);
        id v36 = v32;
        uint64_t v10 = v87;
        MEMORY[0x1CB77E470](v36, -1, -1);
      }
      else
      {
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 136))(2, a4, v10, a6, a7, a8);
      uint64_t v81 = (unsigned int *)MEMORY[0x1E4FA23F0];
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
      id v69 = a2;
      id v70 = a2;
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v91 = v10;
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        uint64_t v94 = v86;
        *(_DWORD *)uint64_t v73 = 136315138;
        id v74 = a2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v75 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v71, v72, "Pommes request failed due to unavailable network: %s", v73, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v86, -1, -1);
        uint64_t v77 = v73;
        uint64_t v10 = v91;
        MEMORY[0x1CB77E470](v77, -1, -1);
      }
      else
      {
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 144))(6, a4, v10, a6, a7, a8);
      uint64_t v81 = (unsigned int *)MEMORY[0x1E4FA23D0];
    }
    goto LABEL_50;
  }
  uint64_t v17 = v15 & 0x3F;
  if (v17 == 1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1C8F83000, v19, v20, "Declining Pommes request due to missing DUDA. This is expected behavior for non-info requests.", v21, 2u);
      MEMORY[0x1CB77E470](v21, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 144))(7, a4, a5, a6, a7, a8);
LABEL_40:
    uint64_t v78 = (unsigned int *)MEMORY[0x1E4FA23C0];
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    id v38 = a2;
    id v39 = a2;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v88 = a9;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v94 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      id v44 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v45 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v40, v41, "Pommes request failed due to a Pommes failure: %s", v42, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v43;
      a9 = v88;
      MEMORY[0x1CB77E470](v47, -1, -1);
      MEMORY[0x1CB77E470](v42, -1, -1);
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 144))(7, a4, a5, a6, a7, a8);
    switch(v17)
    {
      case 1:
        goto LABEL_40;
      case 2:
        uint64_t v78 = (unsigned int *)MEMORY[0x1E4FA23D0];
        break;
      case 3:
        uint64_t v78 = (unsigned int *)MEMORY[0x1E4FA23B8];
        break;
      default:
        uint64_t v78 = (unsigned int *)MEMORY[0x1E4FA23E0];
        break;
    }
  }
  uint64_t v79 = *v78;
  uint64_t v80 = type metadata accessor for PommesError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 104))(a9, v79, v80);
LABEL_51:
  type metadata accessor for PommesError();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(a9, 0, 1, v80);
}

uint64_t PommesBridgeInstrumentationUtil.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return v0;
}

uint64_t PommesBridgeInstrumentationUtil.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);

  return swift_deallocClassInstance();
}

id specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = specialized PommesBridgeInstrumentationUtil.getRCIdAndTRPId(pommesCandidateId:)(a1);
  unint64_t v8 = v7;
  swift_bridgeObjectRetain();
  id v9 = (id)dispatch thunk of InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v40 = a2;
    unint64_t v41 = a3;
    id v44 = v9;
    swift_bridgeObjectRelease();
    id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0DE0]), sel_init);
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v43 = &v37;
    id v11 = *(void **)(v10 - 8);
    uint64_t v12 = v11[8];
    MEMORY[0x1F4188790](v10);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
    MEMORY[0x1F4188790](v13 - 8);
    unsigned int v15 = v11;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    id v39 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
    if (v39((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v10) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UUID?);
      uint64_t v16 = v42;
    }
    else
    {
      uint64_t v23 = (void (*)(char *, char *, uint64_t))v11[4];
      uint64_t v38 = v10;
      v23((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      uint64_t v16 = v42;
      if (v42)
      {
        id v24 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
        id v25 = v16;
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v27 = objc_msgSend(v24, sel_initWithNSUUID_, isa);

        unsigned int v15 = v11;
        objc_msgSend(v25, sel_setTrpId_, v27);
      }
      uint64_t v10 = v38;
      ((void (*)(char *, uint64_t))v15[1])((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
    }
    uint64_t v28 = v3[8];
    uint64_t v29 = v3[9];
    __swift_project_boxed_opaque_existential_1(v3 + 5, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
    if (v30)
    {
      uint64_t v31 = MEMORY[0x1F4188790](v30);
      MEMORY[0x1F4188790](v31);
      UUID.init(uuidString:)();
      if (v39((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v15[4])((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
        if (v16)
        {
          id v32 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
          id v33 = v16;
          Class v34 = UUID._bridgeToObjectiveC()().super.isa;
          id v35 = objc_msgSend(v32, sel_initWithNSUUID_, v34);

          objc_msgSend(v33, sel_setSubRequestId_, v35);
        }
        ((void (*)(char *, uint64_t))v15[1])((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      }
    }
    id v9 = v44;
    objc_msgSend(v44, sel_setPommesBridgeContext_, v16);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = a2;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v46 = v22;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, a3, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v18, v19, "Unable to create ORCHSchemaORCHClientEvent for requestId=%s resultCandidateId=%s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v22, -1, -1);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return v9;
}

uint64_t type metadata accessor for PommesBridgeInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for PommesBridgeInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesBridgeInstrumentationUtil);
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.__allocating_init(_:_:_:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestStarted(pommesCandidateId:requestId:rootRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestEnded(status:pommesCandidateId:requestId:rootRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestFailed(reason:pommesCandidateId:requestId:rootRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestUnableToHandle(pommesCandidateId:requestId:rootRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 160))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

uint64_t AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14[3] = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  v14[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, MEMORY[0x1E4F88998]);
  __swift_allocate_boxed_opaque_existential_1(v14);
  uint64_t v13 = v1;
  static Message.with(_:)();
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v5, v6);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  MEMORY[0x1F4188790](v10);
  *(void *)&v12[-16] = v9;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
  static Message.with(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 0, 1, v10);
}

uint64_t AssistantDataSnapshot.MeCard.toPersonProtobuf()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v11);
  (*(void (**)(char *, void))(v13 + 104))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F896F8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F89B48], v7);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
}

uint64_t outlined destroy of Google_Protobuf_Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(a1);
}

id specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    id result = objc_msgSend(self, sel_protocolOrNilWithIdentifier_, *(void *)(*(void *)(a1 + 48) + 8 * v10));
    if (result)
    {
      MEMORY[0x1CB77CD90]();
      if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      id result = (id)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return (id)v14;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AppIntentMetadataMapper.init(metadataProvider:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppDataProviding(a1, a2);
}

unint64_t AppIntentMetadataMapper.getAppIntentMetadata(bundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
  uint64_t v87 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v93 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v92 = (char *)&v80 - v11;
  p_superclass = (__objc2_class **)v2[3];
  unint64_t v12 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __objc2_class **, id))v2[4];
  __swift_project_boxed_opaque_existential_1(v2, (uint64_t)p_superclass);
  if (one-time initialization token for mappings != -1) {
    goto LABEL_77;
  }
  while (1)
  {
    uint64_t v14 = swift_bridgeObjectRetain();
    id v15 = specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = specialized Set.init<A>(_:)((unint64_t)v15);
    swift_bridgeObjectRelease();
    uint64_t v27 = v12[1](v16, 2, a1, a2, p_superclass, v12);
    swift_bridgeObjectRelease();
    if (!*(void *)(v27 + 16)) {
      goto LABEL_69;
    }
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_69:
      swift_bridgeObjectRelease();
      uint64_t v79 = MEMORY[0x1E4FBC860];
      return specialized Dictionary.init(dictionaryLiteral:)(v79);
    }
    uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v89 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v90 = v30;
    int64_t v31 = 0;
    uint64_t v32 = *(void *)(v30 + 64);
    uint64_t v85 = v30 + 64;
    uint64_t v33 = 1 << *(unsigned char *)(v30 + 32);
    if (v33 < 64) {
      uint64_t v34 = ~(-1 << v33);
    }
    else {
      uint64_t v34 = -1;
    }
    unint64_t v35 = v34 & v32;
    int64_t v86 = (unint64_t)(v33 + 63) >> 6;
    uint64_t v98 = (unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
    uint64_t v84 = (void (**)(char *, char *, uint64_t))(v87 + 32);
    uint64_t v82 = (void (**)(char *, char *, uint64_t))(v87 + 16);
    uint64_t v80 = v87 + 40;
    uint64_t v81 = (void (**)(char *, uint64_t))(v87 + 8);
    p_superclass = &OBJC_METACLASS____TtC21SiriInformationSearch26CallContactPreflightClient.superclass;
LABEL_12:
    if (v35)
    {
      uint64_t v96 = (v35 - 1) & v35;
      int64_t v97 = v31;
      unint64_t v36 = __clz(__rbit64(v35)) | (v31 << 6);
      goto LABEL_28;
    }
    int64_t v37 = v31 + 1;
    if (!__OFADD__(v31, 1)) {
      break;
    }
LABEL_76:
    __break(1u);
LABEL_77:
    swift_once();
  }
  if (v37 >= v86) {
    goto LABEL_72;
  }
  unint64_t v38 = *(void *)(v85 + 8 * v37);
  int64_t v39 = v31 + 1;
  if (v38) {
    goto LABEL_27;
  }
  int64_t v39 = v31 + 2;
  if (v31 + 2 >= v86) {
    goto LABEL_72;
  }
  unint64_t v38 = *(void *)(v85 + 8 * v39);
  if (v38) {
    goto LABEL_27;
  }
  int64_t v39 = v31 + 3;
  if (v31 + 3 >= v86) {
    goto LABEL_72;
  }
  unint64_t v38 = *(void *)(v85 + 8 * v39);
  if (v38) {
    goto LABEL_27;
  }
  uint64_t v40 = v31 + 4;
  if (v31 + 4 >= v86)
  {
LABEL_72:
    swift_release();
    return v89;
  }
  unint64_t v38 = *(void *)(v85 + 8 * v40);
  if (!v38)
  {
    while (1)
    {
      int64_t v39 = v40 + 1;
      if (__OFADD__(v40, 1))
      {
        __break(1u);
LABEL_80:
        unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      if (v39 >= v86) {
        goto LABEL_72;
      }
      unint64_t v38 = *(void *)(v85 + 8 * v39);
      ++v40;
      if (v38) {
        goto LABEL_27;
      }
    }
  }
  int64_t v39 = v31 + 4;
LABEL_27:
  uint64_t v96 = (v38 - 1) & v38;
  int64_t v97 = v39;
  unint64_t v36 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_28:
  id v95 = *(id *)(*(void *)(v90 + 56) + 8 * v36);
  id v41 = objc_msgSend(v95, sel_systemProtocolMetadata, v80);
  type metadata accessor for LNSystemProtocolIdentifier(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocolMetadata);
  lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
  a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  a1 = 0;
  uint64_t v42 = a2 + 64;
  uint64_t v43 = 1 << *(unsigned char *)(a2 + 32);
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  else {
    uint64_t v44 = -1;
  }
  unint64_t v45 = v44 & *(void *)(a2 + 64);
  int64_t v99 = (unint64_t)(v43 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          if (v45)
          {
            unint64_t v46 = __clz(__rbit64(v45));
            v45 &= v45 - 1;
            unint64_t v47 = v46 | (a1 << 6);
          }
          else
          {
            int64_t v48 = a1 + 1;
            if (__OFADD__(a1, 1))
            {
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }
            if (v48 >= v99) {
              goto LABEL_11;
            }
            unint64_t v49 = *(void *)(v42 + 8 * v48);
            ++a1;
            if (!v49)
            {
              a1 = v48 + 1;
              if (v48 + 1 >= v99) {
                goto LABEL_11;
              }
              unint64_t v49 = *(void *)(v42 + 8 * a1);
              if (!v49)
              {
                a1 = v48 + 2;
                if (v48 + 2 >= v99) {
                  goto LABEL_11;
                }
                unint64_t v49 = *(void *)(v42 + 8 * a1);
                if (!v49)
                {
                  int64_t v50 = v48 + 3;
                  if (v50 >= v99)
                  {
LABEL_11:

                    swift_release();
                    unint64_t v35 = v96;
                    int64_t v31 = v97;
                    goto LABEL_12;
                  }
                  unint64_t v49 = *(void *)(v42 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      a1 = v50 + 1;
                      if (__OFADD__(v50, 1)) {
                        goto LABEL_74;
                      }
                      if (a1 >= v99) {
                        goto LABEL_11;
                      }
                      unint64_t v49 = *(void *)(v42 + 8 * a1);
                      ++v50;
                      if (v49) {
                        goto LABEL_48;
                      }
                    }
                  }
                  a1 = v50;
                }
              }
            }
LABEL_48:
            unint64_t v45 = (v49 - 1) & v49;
            unint64_t v47 = __clz(__rbit64(v49)) + (a1 << 6);
          }
          os_log_type_t v51 = p_superclass[394];
        }
        while (!v51->cache);
        uint64_t v52 = 8 * v47;
        uint64_t v53 = *(void **)(*(void *)(a2 + 56) + v52);
        unint64_t v12 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __objc2_class **, id))*(id *)(*(void *)(a2 + 48) + v52);
        swift_unknownObjectRetain();
        unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
        if (v55) {
          break;
        }
        swift_unknownObjectRelease();
      }
      uint64_t v56 = v8;
      uint64_t v57 = (void (*)(uint64_t *))*((void *)v51[1].cache + 2 * v54);
      swift_retain();

      v101[0] = (uint64_t)v53;
      v57(v101);
      uint64_t v8 = v56;
      swift_release();
      if ((*v98)(v7, 1, v56) != 1) {
        break;
      }
      swift_unknownObjectRelease();

      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC21SiriInformationSearch26CallContactPreflightClient + 8);
    }
    uint64_t v58 = v92;
    uint64_t v83 = *v84;
    v83(v92, v7, v56);
    uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    p_superclass = v59;
    (*v82)(v93, v58, v8);
    uint64_t v60 = v89;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v101[0] = v60;
    uint64_t v91 = p_superclass;
    unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v94, (uint64_t)p_superclass);
    uint64_t v63 = *(void *)(v60 + 16);
    BOOL v64 = (v61 & 1) == 0;
    uint64_t v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      goto LABEL_75;
    }
    char v66 = v61;
    if (*(void *)(v60 + 24) >= v65)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v69 = (void *)v101[0];
        if (v61) {
          goto LABEL_60;
        }
      }
      else
      {
        LODWORD(v89) = v61;
        unint64_t v70 = v62;
        specialized _NativeDictionary.copy()(MEMORY[0x1E4F89870], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>);
        unint64_t v62 = v70;
        id v69 = (void *)v101[0];
        if (v89) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v65, isUniquelyReferenced_nonNull_native, MEMORY[0x1E4F89870], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>);
      unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v94, (uint64_t)v91);
      if ((v66 & 1) != (v68 & 1)) {
        goto LABEL_80;
      }
      unint64_t v62 = v67;
      id v69 = (void *)v101[0];
      if (v66)
      {
LABEL_60:
        (*(void (**)(unint64_t, char *, uint64_t))(v87 + 40))(v69[7] + *(void *)(v87 + 72) * v62, v93, v8);
        goto LABEL_64;
      }
    }
    v69[(v62 >> 6) + 8] |= 1 << v62;
    uint64_t v71 = (void *)(v69[6] + 16 * v62);
    os_log_type_t v72 = v93;
    uint64_t v73 = (uint64_t)v91;
    *uint64_t v71 = v94;
    v71[1] = v73;
    v83((char *)(v69[7] + *(void *)(v87 + 72) * v62), v72, v8);
    uint64_t v74 = v69[2];
    BOOL v75 = __OFADD__(v74, 1);
    uint64_t v76 = v74 + 1;
    if (v75) {
      break;
    }
    v69[2] = v76;
    swift_bridgeObjectRetain();
LABEL_64:
    unint64_t v89 = v101[0];

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v81)(v92, v8);
    p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC21SiriInformationSearch26CallContactPreflightClient + 8);
  }
  __break(1u);
  swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  id v18 = v53;
  id v19 = v53;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v100 = (uint64_t)v53;
    v101[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    id v24 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v20, v21, "Failure getting AppIntents protocol metadata: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v23, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }
  else
  {
  }
  unint64_t v77 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);

  return v77;
}

void *one-time initialization function for mappings()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LNSystemProtocolIdentifier, (_:))>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9195D60;
  uint64_t v1 = (void *)*MEMORY[0x1E4F725A8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F725A8];
  *(void *)(inited + 40) = specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  *(void *)(inited + 48) = 0;
  uint64_t v2 = (void *)*MEMORY[0x1E4F725B0];
  *(void *)(inited + 56) = *MEMORY[0x1E4F725B0];
  *(void *)(inited + 64) = specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  *(void *)(inited + 72) = 0;
  id v3 = v1;
  id v4 = v2;
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static AppIntentMetadataMapper.mappings = result;
  return result;
}

uint64_t static AppIntentMetadataMapper.mapPlayVideo(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v57 = (uint64_t)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v45 - v7;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.VideoCategory();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    id v18 = (void *)v17;
    uint64_t v48 = v14;
    uint64_t v49 = v13;
    uint64_t v50 = a1;
    swift_unknownObjectRetain();
    unint64_t v47 = v16;
    Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.init()();
    id v19 = objc_msgSend(v18, sel_supportedCategories);
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v46 = a2;
      uint64_t v61 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      int v56 = *MEMORY[0x1E4F183C0];
      int v54 = *MEMORY[0x1E4F183B8];
      int v52 = *MEMORY[0x1E4F183C8];
      unsigned int v51 = *MEMORY[0x1E4F89850];
      uint64_t v22 = (void (**)(char *, uint64_t, uint64_t))(v10 + 104);
      unsigned int v53 = *MEMORY[0x1E4F89838];
      unsigned int v55 = *MEMORY[0x1E4F89840];
      uint64_t v59 = v10 + 32;
      v45[1] = v20;
      uint64_t v23 = v20 + 40;
      unsigned int v60 = *MEMORY[0x1E4F89848];
      do
      {
        swift_bridgeObjectRetain_n();
        VideoCategory.init(rawValue:)();
        uint64_t v24 = type metadata accessor for VideoCategory();
        uint64_t v25 = *(void *)(v24 - 8);
        int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v24);
        uint64_t v27 = v60;
        if (v26 != 1)
        {
          uint64_t v28 = (uint64_t)v8;
          int64_t v58 = v21;
          char v29 = v8;
          uint64_t v30 = v10;
          int64_t v31 = v22;
          uint64_t v32 = v12;
          uint64_t v33 = v9;
          uint64_t v34 = v57;
          outlined init with copy of MediaUserStateCenter?(v28, v57, &demangling cache variable for type metadata for VideoCategory?);
          uint64_t v35 = v34;
          uint64_t v9 = v33;
          unint64_t v12 = v32;
          uint64_t v22 = v31;
          uint64_t v10 = v30;
          uint64_t v8 = v29;
          int64_t v21 = v58;
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v35, v24);
          uint64_t v27 = v55;
          if (v36 != v56)
          {
            uint64_t v27 = v53;
            if (v36 != v54)
            {
              uint64_t v27 = v51;
              if (v36 != v52)
              {
                (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v57, v24);
                uint64_t v27 = v60;
              }
            }
          }
        }
        (*v22)(v12, v27, v9);
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for VideoCategory?);
        swift_bridgeObjectRelease();
        uint64_t v37 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
          uint64_t v37 = v61;
        }
        unint64_t v39 = *(void *)(v37 + 16);
        unint64_t v38 = *(void *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          uint64_t v37 = v61;
        }
        v23 += 16;
        *(void *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v37+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v39, v12, v9);
        uint64_t v61 = v37;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      a2 = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = MEMORY[0x1E4FBC860];
    }
    uint64_t v43 = v47;
    MEMORY[0x1CB7793B0](v37);
    uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    MEMORY[0x1F4188790](v44);
    v45[-2] = v43;
    lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata and conformance Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata, MEMORY[0x1E4F89870]);
    static Message.with(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(a2, 0, 1, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v43, v49);
  }
  else
  {
    uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    id v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
    return v41(a2, 1, 1, v40);
  }
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return static AppIntentMetadataMapper.mapPlayVideo(_:)(*a1, a2);
}

{
  return static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)(*a1, a2);
}

uint64_t static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v59 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.StringSearchScope();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    id v18 = (void *)v17;
    uint64_t v50 = v14;
    uint64_t v51 = v13;
    uint64_t v52 = a1;
    swift_unknownObjectRetain();
    uint64_t v49 = v16;
    Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.init()();
    id v19 = objc_msgSend(v18, sel_searchScopes);
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v46 = a2;
      uint64_t v63 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      int v58 = *MEMORY[0x1E4F18548];
      int v56 = *MEMORY[0x1E4F18538];
      int v54 = *MEMORY[0x1E4F18530];
      int v48 = *MEMORY[0x1E4F18528];
      unsigned int v47 = *MEMORY[0x1E4F89800];
      uint64_t v22 = (void (**)(char *, uint64_t, uint64_t))(v10 + 104);
      unsigned int v53 = *MEMORY[0x1E4F89808];
      unsigned int v55 = *MEMORY[0x1E4F89810];
      uint64_t v61 = v10 + 32;
      unsigned int v57 = *MEMORY[0x1E4F89818];
      uint64_t v45 = v20;
      uint64_t v23 = v20 + 40;
      unsigned int v62 = *MEMORY[0x1E4F89820];
      do
      {
        swift_bridgeObjectRetain_n();
        StringSearchScope.init(rawValue:)();
        uint64_t v24 = type metadata accessor for StringSearchScope();
        uint64_t v25 = *(void *)(v24 - 8);
        int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v24);
        uint64_t v27 = v62;
        if (v26 != 1)
        {
          uint64_t v28 = (uint64_t)v8;
          int64_t v60 = v21;
          char v29 = v8;
          uint64_t v30 = v10;
          int64_t v31 = v22;
          uint64_t v32 = v12;
          uint64_t v33 = v9;
          uint64_t v34 = v59;
          outlined init with copy of MediaUserStateCenter?(v28, v59, &demangling cache variable for type metadata for StringSearchScope?);
          uint64_t v35 = v34;
          uint64_t v9 = v33;
          unint64_t v12 = v32;
          uint64_t v22 = v31;
          uint64_t v10 = v30;
          uint64_t v8 = v29;
          int64_t v21 = v60;
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v35, v24);
          uint64_t v27 = v57;
          if (v36 != v58)
          {
            uint64_t v27 = v55;
            if (v36 != v56)
            {
              uint64_t v27 = v53;
              if (v36 != v54)
              {
                uint64_t v27 = v47;
                if (v36 != v48)
                {
                  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v59, v24);
                  uint64_t v27 = v62;
                }
              }
            }
          }
        }
        (*v22)(v12, v27, v9);
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for StringSearchScope?);
        swift_bridgeObjectRelease();
        uint64_t v37 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
          uint64_t v37 = v63;
        }
        unint64_t v39 = *(void *)(v37 + 16);
        unint64_t v38 = *(void *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          uint64_t v37 = v63;
        }
        v23 += 16;
        *(void *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v37+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v39, v12, v9);
        uint64_t v63 = v37;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      a2 = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = MEMORY[0x1E4FBC860];
    }
    uint64_t v43 = v49;
    MEMORY[0x1CB779370](v37);
    uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    MEMORY[0x1F4188790](v44);
    *(&v45 - 2) = (uint64_t)v43;
    lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata and conformance Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata, MEMORY[0x1E4F89870]);
    static Message.with(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(a2, 0, 1, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v43, v51);
  }
  else
  {
    uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    id v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
    return v41(a2, 1, 1, v40);
  }
}

uint64_t closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unsigned int *a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.OneOf_Metadata?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a3(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a2, v10);
  uint64_t v11 = *a4;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.OneOf_Metadata();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v9, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  return Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.metadata.setter();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4F88FD0], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioItemType>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4FA2750], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  id v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  id v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v13 & v12;
  unint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  unint64_t result = swift_retain();
  uint64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      uint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    uint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    uint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      uint64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      uint64_t v24 = v41[v17];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          id v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            uint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            uint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v17 = v25;
      }
    }
LABEL_21:
    uint64_t v14 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    int v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    char v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(v30, (uint64_t)v7);
    }
    else
    {
      outlined init with copy of MediaUserStateCenter?(v30, (uint64_t)v7, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t result = Hasher._finalize()();
    int64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        int v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      id v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    id v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *id v19 = v27;
    v19[1] = v28;
    unint64_t result = outlined init with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  id v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  unint64_t result = swift_release();
  *id v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  void *v46;
  void (**v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  void (**v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;

  id v3 = v2;
  uint64_t v5 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  int v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesCandidateId();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PommesCandidateId, PommesBridgeResultCandidateState>);
  uint64_t v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  uint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  uint64_t v45 = (unint64_t)(v14 + 63) >> 6;
  unsigned int v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  unsigned int v53 = v7;
  id v18 = v12 + 64;
  unint64_t result = swift_retain();
  uint64_t v20 = 0;
  int v48 = v11;
  int64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      uint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    int v26 = v46;
    uint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      uint64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      uint64_t v27 = v46[v20];
      if (!v27)
      {
        uint64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          id v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            uint64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            uint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v20 = v28;
      }
    }
LABEL_21:
    uint64_t v17 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    int64_t v21 = v51;
LABEL_22:
    char v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    int64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with take of PommesBridgeResultCandidateState(v32 + v33 * v24, v54);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      outlined init with copy of PommesBridgeResultCandidateState(v34 + v33 * v24, v54, type metadata accessor for PommesBridgeResultCandidateState);
    }
    lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier((unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, MEMORY[0x1E4F9FE60]);
    unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    int v36 = result & ~v35;
    uint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      int64_t v21 = v51;
    }
    else
    {
      unint64_t v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      int64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          uint64_t v37 = 0;
        }
        v38 |= v40;
        id v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      uint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    unint64_t result = outlined init with take of PommesBridgeResultCandidateState(v54, *(void *)(v13 + 56) + v33 * v22);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  id v3 = v44;
  int v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  unint64_t result = swift_release();
  *id v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, uint64_t, uint64_t);
  int v44;
  void (**v45)(char *, uint64_t, uint64_t);
  uint64_t v46;

  id v3 = v2;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  uint64_t v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v40 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v42 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v13;
    id v41 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v46 = v5;
    uint64_t v16 = v10 + 64;
    unint64_t result = swift_retain();
    id v18 = 0;
    while (1)
    {
      if (v15)
      {
        uint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        uint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v41) {
          goto LABEL_34;
        }
        uint64_t v23 = v42[v22];
        ++v18;
        if (!v23)
        {
          id v18 = v22 + 1;
          if (v22 + 1 >= v41) {
            goto LABEL_34;
          }
          uint64_t v23 = v42[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v41)
            {
LABEL_34:
              swift_release();
              id v3 = v40;
              if (v44)
              {
                unint64_t v38 = 1 << *(unsigned char *)(v9 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v42 = -1 << v38;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v42[v24];
            if (!v23)
            {
              while (1)
              {
                id v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v41) {
                  goto LABEL_34;
                }
                uint64_t v23 = v42[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            id v18 = v24;
          }
        }
LABEL_21:
        uint64_t v15 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = v9;
      int v26 = *(void *)(v9 + 48);
      uint64_t v27 = v6;
      uint64_t v28 = *(void *)(v6 + 72);
      char v29 = v26 + v28 * v21;
      if (v44) {
        (*v45)(v8, v29, v46);
      }
      else {
        (*v43)(v8, v29, v46);
      }
      uint64_t v30 = *(_DWORD *)(*(void *)(v25 + 56) + 4 * v21);
      lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
      unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      int64_t v31 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v32 = result & ~v31;
      uint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6))) != 0)
      {
        id v19 = __clz(__rbit64((-1 << v32) & ~*(void *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          int v36 = v33 == v35;
          if (v33 == v35) {
            uint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v16 + 8 * v33);
        }
        while (v37 == -1);
        id v19 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v11 + 48) + v28 * v19, v8, v46);
      *(_DWORD *)(*(void *)(v11 + 56) + 4 * v19) = v30;
      ++*(void *)(v11 + 16);
      uint64_t v6 = v27;
      uint64_t v9 = v25;
    }
  }
  unint64_t result = swift_release();
  *id v3 = v11;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    id v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    int64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      uint64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      int64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        char v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          id v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            int64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    char v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      BOOL v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    id v19 = (void *)(*(void *)(v7 + 48) + v18);
    *id v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  unint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    NSObject *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  long long v43;

  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v38 = v2;
  unint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    uint64_t v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          id v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 40 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    uint64_t v43 = *(_OWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v32;
    v18[1] = v31;
    id v19 = *(void *)(v7 + 56) + 40 * v17;
    *(void *)id v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v43;
    *(void *)(v19 + 32) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v38;
  uint64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      id v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v25 = 0;
      char v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        BOOL v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    uint8_t *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  char v34;

  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  uint64_t v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v31 = v2;
  uint64_t v32 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v32) {
      break;
    }
    unint64_t v21 = (void *)(v5 + 64);
    int64_t v22 = *(void *)(v33 + 8 * v20);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v20 + 1;
      if (v20 + 1 >= v32) {
        goto LABEL_33;
      }
      int64_t v22 = *(void *)(v33 + 8 * v13);
      if (!v22)
      {
        uint64_t v23 = v20 + 2;
        if (v23 >= v32)
        {
LABEL_33:
          swift_release();
          id v3 = v31;
          if ((v34 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v22 = *(void *)(v33 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            uint64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v32) {
              goto LABEL_33;
            }
            int64_t v22 = *(void *)(v33 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    id v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    BOOL v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    uint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v34 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      int64_t v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v31;
  unint64_t v21 = (void *)(v5 + 64);
  if ((v34 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v21 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      id v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          id v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    int64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v25 = 0;
      char v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        BOOL v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v29;
    unint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    void *v18 = v31;
    v18[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    uint8_t *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioItemCandidate>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PommesResult>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  unsigned int v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  int v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    char v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    uint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    int64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    void *v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  char v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    char v33 = *(unsigned char *)(*(void *)(v6 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(unsigned char *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v35;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v36 = v3;
  uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    char v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    char v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4F88FD0], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioItemType>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      uint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    id v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FA2750], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  unint64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  BOOL v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    uint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    id v19 = *v18;
    unint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    outlined init with copy of MediaUserStateCenter?(*(void *)(v5 + 56) + v21, (uint64_t)v4, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    int64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    void *v22 = v19;
    v22[1] = v20;
    outlined init with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)((uint64_t)v4, *(void *)(v7 + 56) + v21);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      uint64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    unint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = *v20;
    int64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    NSObject *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      uint64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v29 - 1) & v29;
    uint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = *v17;
    id v19 = v17[1];
    unint64_t v20 = 40 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    unint64_t v23 = *(void *)v21;
    int64_t v22 = *(void *)(v21 + 8);
    unint64_t v24 = *(void *)(v21 + 32);
    int64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    char v26 = *(_OWORD *)(v21 + 16);
    *int64_t v25 = v18;
    v25[1] = v19;
    unint64_t v27 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v27 = v23;
    *(void *)(v27 + 8) = v22;
    *(_OWORD *)(v27 + 16) = v26;
    *(void *)(v27 + 32) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    uint64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PommesCandidateId, PommesBridgeResultCandidateState>);
  unint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    NSObject *v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  uint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  int64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  int64_t v25 = v8 + 64;
  char v26 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v27 = v5 + 32;
  BOOL v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      int64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    id v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    outlined init with copy of PommesBridgeResultCandidateState(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    uint64_t result = (void *)outlined init with take of PommesBridgeResultCandidateState((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  int64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      uint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    id v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  id v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v23 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  unint64_t v24 = v6 + 64;
  unint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  int64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  char v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v11;
    if (!v21)
    {
      unint64_t v11 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    int64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    unint64_t v18 = 4 * v16;
    id v19 = *(_DWORD *)(*(void *)(v6 + 56) + v18);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    *(_DWORD *)(*(void *)(v8 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    unint64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      uint64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  id v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  uint64_t v2 = *v0;
  id v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v15);
    unint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    id v19 = (void *)(*(void *)(v4 + 56) + 16 * v15);
    *id v19 = v18;
    v19[1] = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v6 = (char *)&v33 - v5;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v32 = v40;
    uint64_t v31 = v34;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  uint64_t result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    int64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    unint64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *unint64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioItemCandidate>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PommesResult>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    LOBYTE(v17) = *(unsigned char *)(*(void *)(v3 + 56) + v16);
    unint64_t v20 = (void *)(*(void *)(v5 + 48) + 16 * v16);
    *unint64_t v20 = v19;
    v20[1] = v18;
    *(unsigned char *)(*(void *)(v5 + 56) + v16) = (_BYTE)v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    int64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    uint64_t *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t matched;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v3 = *(void *)(matched - 8);
  uint64_t v4 = MEMORY[0x1F4188790](matched);
  Swift::Int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier(&lazy protocol witness table cache variable for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey, (void (*)(uint64_t))type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      outlined init with copy of PommesBridgeResultCandidateState(v11, (uint64_t)v6, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      specialized Set._Variant.insert(_:)((uint64_t)v8, (uint64_t)v6);
      outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v8);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        Swift::Int v6 = (void *)MEMORY[0x1CB77D510](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      Swift::Int v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(uint64_t a1)
{
  return closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(a1, *(void *)(v1 + 16), MEMORY[0x1E4F89860], MEMORY[0x1E4F897F8]);
}

uint64_t partial apply for closure #2 in static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)(uint64_t a1)
{
  return closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(a1, *(void *)(v1 + 16), MEMORY[0x1E4F89830], MEMORY[0x1E4F897F0]);
}

ValueMetadata *type metadata accessor for AppIntentMetadataMapper()
{
  return &type metadata for AppIntentMetadataMapper;
}

uint64_t outlined init with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t static SearchProxy.defaultRRClient()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_processInfo);
  char v3 = NSProcessInfo.isRunningUnitTests.getter();

  if (v3)
  {
    uint64_t v4 = &type metadata for EmptyReferenceResolver;
    unint64_t result = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    uint64_t v4 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *a1 = ReferenceResolutionClient.__allocating_init()();
    unint64_t result = MEMORY[0x1E4FA3D98];
  }
  a1[3] = (uint64_t)v4;
  a1[4] = result;
  return result;
}

uint64_t SearchProxy.addGenerativeModelSupport(to:)()
{
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v0 = (void *)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919E560);
  MGGetBoolAnswer();
  swift_release();

  if (AFIsInternalInstall())
  {
    id v1 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
    id v2 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
    id v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

    if (v3)
    {
      uint64_t v4 = (void *)MEMORY[0x1CB77CA90](0xD00000000000002CLL, 0x80000001C91A1F20);
      unsigned int v5 = objc_msgSend(v3, sel_BOOLForKey_, v4);

      if (v5)
      {
        if (one-time initialization token for overrides != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)static Logger.overrides);
        Swift::Int v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          id v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v9 = 0;
          MEMORY[0x1CB77E470](v9, -1, -1);
        }
      }
    }
  }
  uint64_t v10 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
  Apple_Parsec_Search_PegasusQueryContext.isGenerativeModelDevice.setter();
  return v10(&v12, 0);
}

uint64_t SearchProxy.appendClientEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v6 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  os_log_type_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a3, a2, v9);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  int v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    int v44 = v12;
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    v52[0] = v43;
    uint64_t v45 = v13;
    *(_DWORD *)unint64_t v13 = 136315138;
    int64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = MEMORY[0x1E4FBC860];
    if (v14)
    {
      uint64_t v40 = v11;
      uint64_t v41 = a3;
      v51[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      uint64_t v16 = v6 + 16;
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v42 = a1;
      uint64_t v19 = a1 + ((v18 + 32) & ~v18);
      uint64_t v46 = *(void *)(v16 + 56);
      unsigned int v47 = v17;
      uint64_t v48 = v16;
      uint64_t v20 = (void (**)(char *, uint64_t))(v16 - 8);
      do
      {
        uint64_t v21 = v49;
        v47(v8, v19, v49);
        uint64_t v22 = Apple_Parsec_Siri_Context_ClientEntity.summarizedDescription.getter();
        uint64_t v24 = v23;
        (*v20)(v8, v21);
        uint64_t v15 = v51[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
          uint64_t v15 = v51[0];
        }
        unint64_t v26 = *(void *)(v15 + 16);
        unint64_t v25 = *(void *)(v15 + 24);
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          uint64_t v15 = v51[0];
        }
        *(void *)(v15 + 16) = v26 + 1;
        unint64_t v27 = v15 + 16 * v26;
        *(void *)(v27 + 32) = v22;
        *(void *)(v27 + 40) = v24;
        v19 += v46;
        --v14;
      }
      while (v14);
      a1 = v42;
      uint64_t v11 = v40;
    }
    int64_t v28 = v45;
    v51[0] = v15;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v11, (os_log_type_t)v44, "Adding client entities to request: [%s]", v28, 0xCu);
    uint64_t v32 = v43;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
  uint64_t v34 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_Context_ClientConversationContextInfo.onDeviceContext.modify();
  uint64_t v35 = Apple_Parsec_Siri_Context_OnDeviceContext.entities.modify();
  uint64_t v36 = a1;
  uint64_t v37 = (void (*)(char *, void))v35;
  specialized Array.append<A>(contentsOf:)(v36);
  v37(v50, 0);
  v34(v51, 0);
  return v33(v52, 0);
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.summarizedDescription.getter()
{
  uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntityAlignment();
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v40 = (char *)&v37 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(107);
  v9._countAndFlagsBits = 0x7974202020200A7BLL;
  v9._object = (void *)0xEC000000203A6570;
  String.append(_:)(v9);
  Apple_Parsec_Siri_Context_ClientEntity.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10._countAndFlagsBits = 0x756F73202020200ALL;
  v10._object = (void *)0xED0000203A656372;
  String.append(_:)(v10);
  Apple_Parsec_Siri_Context_ClientEntity.source.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v11._object = (void *)0xEC000000203A6572;
  v11._countAndFlagsBits = 0x6F6373202020200ALL;
  String.append(_:)(v11);
  Apple_Parsec_Siri_Context_ClientEntity.score.getter();
  Double.write<A>(to:)();
  v12._object = (void *)0x80000001C91A1F50;
  v12._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v12);
  v13._countAndFlagsBits = Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000025;
  v14._object = (void *)0x80000001C91A1F70;
  String.append(_:)(v14);
  uint64_t v15 = MEMORY[0x1CB7781B0]();
  int64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = v39 + 16;
    uint64_t v18 = *(void *)(v39 + 16);
    uint64_t v19 = *(unsigned __int8 *)(v39 + 80);
    uint64_t v37 = v15;
    uint64_t v20 = v15 + ((v19 + 32) & ~v19);
    uint64_t v38 = *(void *)(v39 + 72);
    uint64_t v39 = v18;
    uint64_t v21 = (void (**)(char *, uint64_t))(v17 - 8);
    uint64_t v22 = v17;
    do
    {
      uint64_t v24 = v40;
      uint64_t v23 = v41;
      uint64_t v25 = v22;
      uint64_t v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v39)(v40, v20, v41);
      uint64_t v27 = MEMORY[0x1CB779070](v26);
      uint64_t v29 = v28;
      (*v21)(v24, v23);
      uint64_t v30 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v30 = v42;
      }
      unint64_t v32 = *(void *)(v30 + 16);
      unint64_t v31 = *(void *)(v30 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v30 = v42;
      }
      *(void *)(v30 + 16) = v32 + 1;
      uint64_t v33 = v30 + 16 * v32;
      *(void *)(v33 + 32) = v27;
      *(void *)(v33 + 40) = v29;
      v20 += v38;
      --v16;
      uint64_t v22 = v25;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = MEMORY[0x1E4FBC860];
  }
  v34._countAndFlagsBits = MEMORY[0x1CB77CDC0](v30, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 32010;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  return v43;
}

void SearchProxy.addMAFStateFlags(to:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a2 + 104), sel_currentNavigationState);
  int IsNavigating = AFNavigationStateIsNavigating();
  uint64_t v3 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.setter();
  v3(v27, 0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v27[0] = v8;
    if (IsNavigating) {
      uint64_t v9 = 1702195828;
    }
    else {
      uint64_t v9 = 0x65736C6166;
    }
    if (IsNavigating) {
      unint64_t v10 = 0xE400000000000000;
    }
    else {
      unint64_t v10 = 0xE500000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v5, v6, "Navigation mode: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v8, -1, -1);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }

  int v11 = AFDeviceSupportsSystemAssistantExperience();
  if (AFIsInternalInstall())
  {
    id v12 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
    Swift::String v13 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
    id v14 = objc_msgSend(v12, sel_initWithSuiteName_, v13);

    if (v14)
    {
      uint64_t v15 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001ALL, 0x80000001C91A1FA0);
      unsigned int v16 = objc_msgSend(v14, sel_BOOLForKey_, v15);

      if (v16)
      {
        if (one-time initialization token for overrides != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v4, (uint64_t)static Logger.overrides);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          MEMORY[0x1CB77E470](v19, -1, -1);
        }

        int v11 = 1;
      }
    }
  }
  uint64_t v20 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isSaeRequest.setter();
  v20(v27, 0);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    v27[0] = v24;
    if (v11) {
      uint64_t v25 = 1702195828;
    }
    else {
      uint64_t v25 = 0x65736C6166;
    }
    if (v11) {
      unint64_t v26 = 0xE400000000000000;
    }
    else {
      unint64_t v26 = 0xE500000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v21, v22, "SAE request: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v24, -1, -1);
    MEMORY[0x1CB77E470](v23, -1, -1);
  }
}

uint64_t SearchProxy.addCompanionDevices(to:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 472))();
}

uint64_t SearchProxy.deinit()
{
  return v0;
}

uint64_t SearchProxy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SearchProxy.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SearchProxy.init()()
{
  return v0;
}

uint64_t type metadata accessor for SearchProxy()
{
  return self;
}

uint64_t method lookup function for SearchProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SearchProxy);
}

uint64_t dispatch thunk of SearchProxy.addGenerativeModelSupport(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of SearchProxy.appendClientEntities(_:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SearchProxy.addMAFStateFlags(to:dataProviderManager:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SearchProxy.addCompanionDevices(to:dataProviderManager:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SearchProxy.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t Siri_Nlu_External_UserParse.firstCallTask()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v25[0] = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v7 = v2 + 16;
    uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
    v20[1] = v5;
    uint64_t v10 = v5 + ((v9 + 32) & ~v9);
    int v11 = (void (**)(char *, uint64_t))(v7 - 8);
    uint64_t v21 = *(void *)(v7 + 56);
    os_log_type_t v22 = v8;
    while (1)
    {
      uint64_t v12 = v7;
      v22(v4, v10, v1);
      uint64_t v13 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0) {
        break;
      }
      unint64_t v14 = v13;
      (*v11)(v4, v1);
      specialized Array.append<A>(contentsOf:)(v14);
      v10 += v21;
      --v6;
      uint64_t v7 = v12;
      if (!v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = v25[0];
        goto LABEL_7;
      }
    }
    (*v11)(v4, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_7:
    if (v15 >> 62) {
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v16; uint64_t v16 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          break;
        }
        uint64_t v12 = *(void *)(v15 + 8 * v17 + 32);
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        outlined init with copy of Any?((uint64_t)v25, (uint64_t)v23);
        if (v24)
        {
          type metadata accessor for UsoTask_call_common_PhoneCall();
          if (swift_dynamicCast())
          {
            swift_release();
            outlined destroy of Any?((uint64_t)v25);
            swift_bridgeObjectRelease_n();
            return v12;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)v23);
        }
        outlined destroy of Any?((uint64_t)v25);
        swift_release();
        ++v17;
        if (v18 == v16) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  return v12;
}

BOOL UsoTask.isCallTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with take of Any?((uint64_t)v6, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for UsoTask_call_common_PhoneCall();
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v0 = 0;
    goto LABEL_6;
  }
  uint64_t v0 = v3;
LABEL_6:
  BOOL v1 = v0 != 0;
  swift_release();
  return v1;
}

uint64_t NSDictionary.arrayValue<A>(for:)()
{
  BOOL v1 = (void *)MEMORY[0x1CB77CA90]();
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v8[3])
  {
    outlined destroy of Any?((uint64_t)v8);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  uint64_t v3 = swift_dynamicCast();
  if ((v3 & 1) == 0) {
    return 0;
  }
  v8[0] = v6;
  MEMORY[0x1F4188790](v3);
  lazy protocol witness table accessor for type [Any] and conformance [A]();
  uint64_t v4 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::String_optional __swiftcall NSDictionary.stringValue(for:)(Swift::String a1)
{
  id v2 = (void *)MEMORY[0x1CB77CA90](a1._countAndFlagsBits, a1._object);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
  if (v13)
  {
    int v4 = swift_dynamicCast();
    BOOL v5 = v4 == 0;
    if (v4) {
      uint64_t v6 = v9;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v10;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v12);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::Bool_optional __swiftcall NSDictionary.BOOLeanValue(for:)(Swift::String a1)
{
  id v2 = (void *)MEMORY[0x1CB77CA90](a1._countAndFlagsBits, a1._object);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return (Swift::Bool_optional)2;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
    return (Swift::Bool_optional)2;
  }
}

uint64_t closure #1 in NSDictionary.arrayValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v7);
  int v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v5 ^ 1u, 1, a2);
}

uint64_t partial apply for closure #1 in NSDictionary.arrayValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in NSDictionary.arrayValue<A>(for:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Any] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Any] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Any] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Any]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Any] and conformance [A]);
  }
  return result;
}

uint64_t EntityNameFeaturiser.__allocating_init(query:localizedTokenizer:)(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  EntityNameFeaturiser.init(query:localizedTokenizer:)(a1, a2);
  return v4;
}

uint64_t EntityNameFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t one-time initialization function for textMatchOverride()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C9198790;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E4F88F88], v0);
  v6(v5 + v2, *MEMORY[0x1E4F88F40], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E4F88F68], v0);
  v6(v5 + 3 * v2, *MEMORY[0x1E4F88FB0], v0);
  v6(v5 + 4 * v2, *MEMORY[0x1E4F88F38], v0);
  v6(v5 + 5 * v2, *MEMORY[0x1E4F88FC0], v0);
  v6(v5 + 6 * v2, *MEMORY[0x1E4F88FA0], v0);
  uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  static EntityNameFeaturiser.textMatchOverride = v7;
  return result;
}

uint64_t EntityNameFeaturiser.init(query:localizedTokenizer:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  v42[1] = *MEMORY[0x1E4F143B8];
  *(void *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F71FF8]), sel_init);
  *(void *)(v3 + 48) = 0x3F8000003ECCCCCDLL;
  *(_DWORD *)(v3 + 56) = 0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  id v7 = a2;
  swift_retain_n();
  id v8 = v7;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  int v11 = v10;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    v42[0] = v40;
    *(_DWORD *)uint64_t v12 = 136315394;
    id v13 = objc_msgSend(v8, sel_locale, v12 + 4);
    uint64_t v14 = type metadata accessor for Locale();
    uint64_t v15 = *(void *)(v14 - 8);
    int v39 = v11;
    uint64_t v16 = v15;
    MEMORY[0x1F4188790](v14);
    os_log_t v38 = v9;
    uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = Locale.identifier.getter();
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
    v41[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v41[0] = *(id *)(a1 + 16);
    v41[1] = closure #1 in implicit closure #2 in EntityNameFeaturiser.init(query:localizedTokenizer:);
    v41[2] = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String>);
    lazy protocol witness table accessor for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>();
    uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    v41[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v25 = v38;
    _os_log_impl(&dword_1C8F83000, v38, (os_log_type_t)v39, "EntityNameFeaturiser : tokenizerLocale=%s, queryFields=[%s]", (uint8_t *)v12, 0x16u);
    uint64_t v26 = v40;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v12, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(void *)(v3 + 16) = v8;
  id v27 = v8;
  uint64_t v28 = swift_bridgeObjectRetain();
  unint64_t v29 = specialized Sequence.compactMap<A>(_:)(v28, v27);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 24) = v29;
  uint64_t v30 = self;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v41[0] = 0;
  id v32 = objc_msgSend(v30, sel_itemMatcher_tokenizer_error_, isa, v27, v41);

  id v33 = v41[0];
  if (v32)
  {
    swift_release();
  }
  else
  {
    Swift::String v34 = v33;
    Swift::String v35 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();

    id v32 = 0;
  }
  *(void *)(v3 + 40) = v32;
  return v3;
}

uint64_t closure #1 in implicit closure #2 in EntityNameFeaturiser.init(query:localizedTokenizer:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.description.getter()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v4._countAndFlagsBits = 0x7079546D6574697BLL;
  v4._object = (void *)0xEA00000000003D65;
  String.append(_:)(v4);
  MEMORY[0x1CB778810]();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v5._countAndFlagsBits = 0x537972657571202CLL;
  v5._object = (void *)0xEC000000223D7274;
  String.append(_:)(v5);
  v6._countAndFlagsBits = MEMORY[0x1CB778830]();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x696B6E6172202C22;
  v7._object = (void *)0xEF3D796C6E4F676ELL;
  String.append(_:)(v7);
  char v8 = Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter();
  BOOL v9 = (v8 & 1) == 0;
  if (v8) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (v9) {
    unint64_t v11 = 0xE500000000000000;
  }
  else {
    unint64_t v11 = 0xE400000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 125;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v15[0];
}

void closure #1 in EntityNameFeaturiser.generateItems(from:identifier:)(void *a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  unint64_t v90 = a4;
  os_log_t v88 = a3;
  uint64_t v92 = a2;
  v100[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v93 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v91 = (uint64_t)&v82 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v89 = (uint64_t *)((char *)&v82 - v15);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v94 = (uint64_t *)((char *)&v82 - v17);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v20 = (uint64_t *)((char *)&v82 - v19);
  uint64_t v97 = v18;
  uint64_t v21 = *(int *)(v18 + 64);
  uint64_t v22 = (char *)&v82 + v21 - v19;
  unint64_t v23 = (char *)a1 + v21;
  uint64_t v24 = a1[1];
  *unint64_t v20 = *a1;
  v20[1] = v24;
  uint64_t v25 = a1[2];
  unint64_t v26 = a1[3];
  void v20[2] = v25;
  v20[3] = v26;
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v28 = *(void *)(v27 - 8);
  unint64_t v29 = *(void (**)(char *, void *, uint64_t))(v28 + 16);
  id v95 = v23;
  uint64_t v96 = v28 + 16;
  uint64_t v98 = v29;
  v29(v22, v23, v27);
  if (v26)
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v28 + 8);
    swift_bridgeObjectRetain();
    v30(v22, v27);
    uint64_t v31 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v31 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v31)
    {
      uint64_t v86 = v25;
      uint64_t v87 = v6;
      uint64_t v85 = a5;
      id v32 = *(void **)(v92 + 32);
      Swift::String v34 = v94;
      id v33 = v95;
      uint64_t v35 = v27;
      uint64_t v36 = (char *)v94 + *(int *)(v97 + 64);
      uint64_t v37 = *a1;
      uint64_t v38 = a1[1];
      *uint64_t v94 = *a1;
      v34[1] = v38;
      *((_OWORD *)v34 + 1) = *((_OWORD *)a1 + 1);
      v98(v36, v33, v35);
      swift_bridgeObjectRetain();
      int v39 = (void *)MEMORY[0x1CB77CA90](v37, v38);
      swift_bridgeObjectRelease();
      uint64_t v92 = v35;
      uint64_t v83 = v30;
      v30(v36, v35);
      v100[0] = 0;
      id v40 = objc_msgSend(v32, sel_setItemType_itemId_error_, 5, v39, v100);

      id v41 = v100[0];
      if (v40)
      {
        uint64_t v42 = (void *)MEMORY[0x1CB77CA90](v86, v26);
        v100[0] = 0;
        id v43 = objc_msgSend(v40, sel_addFieldWithType_value_error_, 228, v42, v100);

        id v44 = v100[0];
        uint64_t v45 = v98;
        if (v43)
        {
          v100[0] = 0;
          id v46 = objc_msgSend(v43, sel_buildItemWithError_, v100);

          id v47 = v100[0];
          if (v46)
          {
            swift_bridgeObjectRelease();
LABEL_22:
            a5 = v85;
            goto LABEL_23;
          }
          uint64_t v52 = v47;
          uint64_t v51 = (void *)_convertNSErrorToError(_:)();
        }
        else
        {
          int v50 = v44;
          uint64_t v51 = (void *)_convertNSErrorToError(_:)();
        }
        id v84 = v51;
        swift_willThrow();
      }
      else
      {
        uint64_t v48 = v41;
        uint64_t v49 = (void *)_convertNSErrorToError(_:)();

        id v84 = v49;
        swift_willThrow();
        uint64_t v45 = v98;
      }
      uint64_t v87 = 0;
      uint64_t v53 = v93;
      uint64_t v54 = v97;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
      int v56 = v89;
      unsigned int v57 = (char *)v89 + *(int *)(v54 + 64);
      uint64_t v58 = a1[1];
      *unint64_t v89 = *a1;
      v56[1] = v58;
      uint64_t v59 = a1[2];
      uint64_t v60 = a1[3];
      v56[2] = v59;
      v56[3] = v60;
      v45(v57, v95, v92);
      uint64_t v61 = v91;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v56, v91, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      outlined init with take of PommesSearchReason?((uint64_t)v56, v53, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      unint64_t v62 = v90;
      swift_bridgeObjectRetain();
      id v63 = v84;
      id v64 = v84;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v65 = v63;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        id v69 = v63;
        uint64_t v70 = swift_slowAlloc();
        id v95 = (void *)swift_slowAlloc();
        v100[0] = v95;
        *(_DWORD *)uint64_t v70 = 136315906;
        LODWORD(v89) = v68;
        swift_bridgeObjectRetain();
        uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v88, v62, (uint64_t *)v100);
        os_log_t v88 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v26, (uint64_t *)v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 22) = 2048;
        uint64_t v71 = *(int *)(v97 + 64);
        os_log_type_t v72 = v94;
        uint64_t v73 = (char *)v94 + v71;
        uint64_t v74 = *(void *)(v61 + 8);
        *uint64_t v94 = *(void *)v61;
        v72[1] = v74;
        *((_OWORD *)v72 + 1) = *(_OWORD *)(v61 + 16);
        uint64_t v75 = v92;
        v98((char *)v72 + v71, (void *)(v61 + v71), v92);
        uint64_t v76 = Apple_Parsec_Siri_V2alpha_AudioNoun.rawValue.getter();
        v83(v73, v75);
        outlined destroy of MediaUserStateCenter?(v61, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        uint64_t v99 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined destroy of MediaUserStateCenter?(v93, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        *(_WORD *)(v70 + 32) = 2080;
        uint64_t v99 = (uint64_t)v69;
        id v77 = v69;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v78 = String.init<A>(describing:)();
        uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        os_log_t v80 = v88;
        _os_log_impl(&dword_1C8F83000, v88, (os_log_type_t)v89, "EntityNameFeaturiser failed while building item %s \"%s\" %ld : %s", (uint8_t *)v70, 0x2Au);
        uint64_t v81 = v95;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v81, -1, -1);
        MEMORY[0x1CB77E470](v70, -1, -1);
      }
      else
      {
        outlined destroy of MediaUserStateCenter?(v61, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      }
      id v46 = 0;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v27);
  }
  id v46 = 0;
LABEL_23:
  *a5 = v46;
}

uint64_t EntityNameFeaturiser.add(match:multiFieldMatchWeight:with:_:to:)(void *a1, uint64_t a2, uint64_t a3, id *a4, float a5)
{
  id v63 = a4;
  v65[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v58 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v58 - v20;
  id v22 = objc_msgSend(a1, sel_entityInfo);
  self;
  unint64_t v23 = (void *)swift_dynamicCastObjCClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v61 = a2;
  id v62 = v22;
  v65[0] = 0;
  id v24 = objc_msgSend(v23, sel_toKVItem_, v65);
  if (!v24)
  {
    id v37 = v65[0];
    uint64_t v38 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    return 0;
  }
  uint64_t v25 = v24;
  uint64_t v59 = v21;
  id v26 = v65[0];
  id v27 = objc_msgSend(v25, sel_itemId);

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  uint64_t v31 = *(void *)(a3 + 16);
  id v32 = (unsigned int *)MEMORY[0x1E4F88FB8];
  uint64_t v60 = v28;
  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    int v39 = v59;
LABEL_11:
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v39, *v32, v12);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  if (v34)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(void *)(a3 + 56) + *(void *)(v13 + 72) * v33, v12);
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = 1;
  }
  int v39 = v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v35, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v39, v11, v12);
LABEL_13:
  objc_msgSend(a1, sel_score);
  float v41 = v40 * 1.25;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType);
  uint64_t v42 = v61;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v43 = v65[0];
  id v44 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v42, v12);
  if (v43 != v44)
  {
    id v46 = *(void (**)(char *, uint64_t))(v13 + 8);
    v46(v19, v12);
    goto LABEL_17;
  }
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *v32, v12);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v46 = *(void (**)(char *, uint64_t))(v13 + 8);
  v46(v16, v12);
  v46(v19, v12);
  float v47 = 1.0;
  if (v45) {
LABEL_17:
  }
    float v47 = 0.0;
  float v48 = v41 * a5;
  uint64_t v49 = v63;
  int v50 = *v63;
  uint64_t v51 = v60;
  if (*((void *)*v63 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v30);
    if (v53)
    {
      uint64_t v54 = (float *)(v50[7] + 8 * v52);
      float v55 = *v54;
      float v56 = v54[1];
      swift_bridgeObjectRelease();
      if (v47 < v56 || vabds_f32(v56, v47) < 0.0001 && v48 < v55)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v46(v39, v12);
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v65[0] = *v49;
  *uint64_t v49 = (id)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v30, isUniquelyReferenced_nonNull_native, v48, v47);
  *uint64_t v49 = v65[0];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46(v39, v12);
  return 1;
}

uint64_t EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v44 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (void **)((char *)&v40 - v12);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (void **)((char *)&v40 - v14);
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a3) + 0xD0))(*(void *)(v3 + 16));
  uint64_t v17 = result;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v51 = MEMORY[0x1E4FBC860];
  uint64_t v46 = *(void *)(result + 16);
  if (!v46)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(v18 + 16);
    swift_release();
    *a2 = v36;
    double v37 = closure #2 in EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(v4, (uint64_t)a3);
    float v38 = *(float *)&v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x656C746974, 0xE500000000000000, isUniquelyReferenced_nonNull_native, 0.995, v38);
    *a1 = v51;
    return swift_bridgeObjectRelease();
  }
  float v40 = a2;
  uint64_t v41 = v4;
  uint64_t v42 = a3;
  id v43 = a1;
  unint64_t v19 = 0;
  uint64_t v20 = &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
  uint64_t v45 = result;
  while (v19 < *(void *)(v17 + 16))
  {
    unint64_t v21 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v49 = *(void *)(v47 + 72);
    unint64_t v50 = v21;
    id v22 = v20;
    outlined init with copy of MediaUserStateCenter?(v17 + v21 + v49 * v19, (uint64_t)v15, v20);
    uint64_t v23 = *(int *)(v48 + 64);
    id v24 = (char *)v13 + v23;
    uint64_t v25 = (char *)v15 + v23;
    uint64_t v26 = v15[1];
    *uint64_t v13 = *v15;
    v13[1] = v26;
    uint64_t v28 = v15[2];
    unint64_t v27 = v15[3];
    v13[2] = v28;
    v13[3] = v27;
    uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    uint64_t v30 = *(void *)(v29 - 8);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v24, v25, v29);
    if (v27)
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v30 + 8);
      swift_bridgeObjectRetain();
      v31(v24, v29);
      swift_bridgeObjectRelease();
      uint64_t v32 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0) {
        uint64_t v32 = v28 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v17 = v45;
      uint64_t v20 = v22;
      if (v32)
      {
        outlined init with take of PommesSearchReason?((uint64_t)v15, v44, v22);
        uint64_t v33 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1);
          uint64_t v33 = v51;
        }
        unint64_t v35 = *(void *)(v33 + 16);
        unint64_t v34 = *(void *)(v33 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          uint64_t v33 = v51;
        }
        *(void *)(v33 + 16) = v35 + 1;
        uint64_t result = outlined init with take of PommesSearchReason?(v44, v33 + v50 + v35 * v49, v22);
        goto LABEL_5;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v29);
      uint64_t v17 = v45;
      uint64_t v20 = v22;
    }
    uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v15, v20);
LABEL_5:
    if (v46 == ++v19)
    {
      uint64_t v18 = v51;
      a3 = v42;
      a1 = v43;
      a2 = v40;
      uint64_t v4 = v41;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

double closure #2 in EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v4 = *(void *)(v59 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v59);
  uint64_t v58 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v57 = (uint64_t)v48 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  MEMORY[0x1F4188790](v8 - 8);
  char v53 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v51 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v48 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  unint64_t v52 = (char *)v48 - v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v50 = (char *)v48 - v19;
  uint64_t v20 = *(void *)(a1 + 24);
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t v60 = v11;
  if (v21)
  {
    uint64_t v49 = a2;
    uint64_t v62 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    unint64_t v23 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v48[1] = v20;
    uint64_t v24 = v20 + v23;
    uint64_t v25 = *(void *)(v4 + 72);
    uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v55 = v25;
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v56 = v10;
    do
    {
      uint64_t v27 = v57;
      outlined init with copy of MediaUserStateCenter?(v24, v57, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      uint64_t v28 = *(int *)(v59 + 48);
      uint64_t v29 = &v58[v28];
      (*v54)(&v58[v28], v27 + v28, v10);
      uint64_t v30 = *v26;
      (*v26)(v16, v29, v10);
      outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      uint64_t v22 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
        uint64_t v22 = v62;
      }
      unint64_t v32 = *(void *)(v22 + 16);
      unint64_t v31 = *(void *)(v22 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v22 = v62;
      }
      *(void *)(v22 + 16) = v32 + 1;
      uint64_t v11 = v60;
      unint64_t v33 = v22
          + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(void *)(v60 + 72) * v32;
      uint64_t v10 = v56;
      v30((char *)v33, v16, v56);
      uint64_t v62 = v22;
      v24 += v55;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a2 = v49;
  }
  unint64_t v34 = v52;
  uint64_t v35 = *(void *)(v22 + 16);
  if (v35)
  {
    uint64_t v37 = *(void *)(v11 + 16);
    uint64_t v36 = v11 + 16;
    uint64_t v59 = v37;
    uint64_t v38 = v22 + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    uint64_t v58 = (char *)(a2 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType);
    uint64_t v39 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v59)(v34, v38, v10);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType);
      float v40 = v34;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v62 == v61) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v36 - 8))(v34, v10);
      v38 += v39;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = 1;
        uint64_t v11 = v60;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v60;
    uint64_t v42 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v53, v40, v10);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
LABEL_15:
    uint64_t v42 = (uint64_t)v53;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v42, v41, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v42, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  }
  else
  {
    id v43 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v50, v42, v10);
    uint64_t v44 = v51;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v51, *MEMORY[0x1E4F88FB8], v10);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v11 + 8);
    v46(v44, v10);
    v46(v43, v10);
    LODWORD(result) = 1.0;
    if ((v45 & 1) == 0) {
      return result;
    }
  }
  return 0.0;
}

void EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v96 = a1;
  v98[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v97 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (void **)((char *)v81 - v16);
  uint64_t v17 = *(NSObject **)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  unint64_t v18 = *(void *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v83 = v17;
  unint64_t v19 = specialized Sequence.compactMap<A>(_:)(a4, (uint64_t)v5, v17, v18);
  swift_release();
  unint64_t v84 = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)v5[5];
  if (v20)
  {
    unint64_t v94 = v10;
    int64_t v21 = a2;
    uint64_t v85 = v15;
    uint64_t v86 = v9;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
    id v22 = v20;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v98[0] = 0;
    unsigned __int8 v24 = objc_msgSend(v22, sel_setItems_error_, isa, v98);

    if (v24)
    {
      if (v19 >> 62)
      {
        id v80 = v98[0];
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v25 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v26 = v98[0];
      }
      swift_bridgeObjectRelease();
      *int64_t v21 = v25;
      uint64_t v95 = specialized EntityNameFeaturiser.generateItemTypes(from:)(a4);
      uint64_t v27 = v5[3];
      unint64_t v28 = *(void *)(v27 + 16);
      uint64_t v92 = (void (**)(char *, char *, uint64_t))(v94 + 32);
      unint64_t v89 = (void (**)(char *, uint64_t))(v94 + 8);
      swift_bridgeObjectRetain();
      unint64_t v29 = 0;
      *(void *)&long long v30 = 136315138;
      long long v82 = v30;
      v81[1] = MEMORY[0x1E4FBC840] + 8;
      uint64_t v32 = (uint64_t)v85;
      uint64_t v31 = v86;
      unint64_t v33 = v87;
      id v93 = v22;
      unint64_t v90 = v28;
      uint64_t v91 = v27;
      if (!v28) {
        goto LABEL_13;
      }
LABEL_6:
      if ((v29 & 0x8000000000000000) != 0) {
        goto LABEL_58;
      }
      if (v29 < *(void *)(v27 + 16))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        uint64_t v35 = *(void *)(v34 - 8);
        outlined init with copy of MediaUserStateCenter?(v27+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v29, v32, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        unint64_t v94 = v29 + 1;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        id v22 = v93;
        while (1)
        {
          outlined init with take of PommesSearchReason?(v32, (uint64_t)v33, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)?);
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
          if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v33, 1, v37) == 1)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v38 = *v33;
          (*v92)(v97, (char *)v33 + *(int *)(v37 + 48), v31);
          v98[0] = 0;
          id v39 = objc_msgSend(v22, sel_matchSpans_error_, v38, v98);
          id v40 = v98[0];
          if (v39)
          {
            uint64_t v41 = v39;
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
            uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            id v43 = v40;

            if (v42 < 0 || (v42 & 0x4000000000000000) != 0)
            {
              unint64_t v67 = swift_bridgeObjectRetain();
              uint64_t v44 = specialized _copyCollectionToContiguousArray<A>(_:)(v67);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v44 = (void *)(v42 & 0xFFFFFFFFFFFFFF8);
              swift_bridgeObjectRetain();
            }
            v98[0] = v44;
            specialized MutableCollection<>.sort(by:)((uint64_t *)v98);
            swift_bridgeObjectRelease();
            unint64_t v45 = (unint64_t)v98[0];
            if (((unint64_t)v98[0] & 0x8000000000000000) != 0
              || ((unint64_t)v98[0] & 0x4000000000000000) != 0)
            {
              swift_retain();
              uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
              if (v46)
              {
LABEL_22:
                id v88 = v38;
                if ((v45 & 0xC000000000000001) != 0)
                {
                  id v47 = (id)MEMORY[0x1CB77D510](0, v45);
                }
                else
                {
                  if (!*(void *)(v45 + 16)) {
                    goto LABEL_60;
                  }
                  id v47 = *(id *)(v45 + 32);
                }
                id v48 = v47;
                swift_release();
                float v49 = 1.0;
                uint64_t v50 = 4;
                while (1)
                {
                  id v51 = (v45 & 0xC000000000000001) != 0
                      ? (id)MEMORY[0x1CB77D510](v50 - 4, v45)
                      : *(id *)(v45 + 8 * v50);
                  unint64_t v52 = v51;
                  uint64_t v53 = v50 - 3;
                  if (__OFADD__(v50 - 4, 1)) {
                    break;
                  }
                  objc_msgSend(v51, sel_score);
                  float v55 = v54;
                  objc_msgSend(v48, sel_score);
                  if ((float)(v56 * 0.4) > v55)
                  {

LABEL_10:
                    swift_release();
                    uint64_t v31 = v86;
                    (*v89)(v97, v86);
                    uint64_t v32 = (uint64_t)v85;
                    unint64_t v33 = v87;
                    id v22 = v93;
                    goto LABEL_11;
                  }
                  char v57 = (*(uint64_t (**)(void *, char *, uint64_t, uint64_t, float))(*v5 + 168))(v52, v97, v95, v96, v49);

                  if (v57) {
                    float v49 = v49 * 0.5;
                  }
                  ++v50;
                  if (v53 == v46)
                  {
                    unint64_t v52 = v48;
                    id v48 = v88;
                    goto LABEL_10;
                  }
                }
                __break(1u);
LABEL_58:
                __break(1u);
                break;
              }
            }
            else
            {
              uint64_t v46 = *((void *)v98[0] + 2);
              swift_retain();
              if (v46) {
                goto LABEL_22;
              }
            }
            swift_release();
            (*v89)(v97, v31);
            swift_release();

            unint64_t v28 = v90;
            uint64_t v27 = v91;
          }
          else
          {
            id v58 = v98[0];
            uint64_t v59 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v60 = type metadata accessor for Logger();
            __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
            unint64_t v61 = v84;
            swift_bridgeObjectRetain_n();
            uint64_t v62 = Logger.logObject.getter();
            os_log_type_t v63 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v62, v63))
            {
              uint64_t v64 = swift_slowAlloc();
              id v65 = (void *)swift_slowAlloc();
              v98[0] = v65;
              *(_DWORD *)uint64_t v64 = v82;
              swift_bridgeObjectRetain();
              *(void *)(v64 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v83, v61, (uint64_t *)v98);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1C8F83000, v62, v63, "EntityNameFeaturiser failed span matching candidate %s", (uint8_t *)v64, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1CB77E470](v65, -1, -1);
              uint64_t v66 = v64;
              id v22 = v93;
              MEMORY[0x1CB77E470](v66, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            (*v89)(v97, v31);
LABEL_11:
            unint64_t v28 = v90;
            uint64_t v27 = v91;
          }
          unint64_t v29 = v94;
          if (v94 != v28) {
            goto LABEL_6;
          }
LABEL_13:
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v32, 1, 1, v36);
          unint64_t v94 = v28;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_once();
      goto LABEL_48;
    }
    id v68 = v98[0];
    id v69 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  if ((AFIsInternalInstall() & 1) == 0)
  {
    uint64_t v75 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v76 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a3) + 0xB8);
    id v77 = (void *)v76();
    (*(void (**)(void *))((*v75 & *v77) + 0xE8))(&outlined read-only object #0 of EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:));

    uint64_t v78 = (void *)v76();
    (*(void (**)(uint64_t))((*v75 & *v78) + 0x100))(1);

    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v71, v72)) {
      goto LABEL_55;
    }
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v73 = 0;
    uint64_t v74 = "EntityNameFeaturiser#featuriseTextFields couldn't set the items in itemmatcher";
    goto LABEL_54;
  }
  if (one-time initialization token for pommes != -1) {
    goto LABEL_61;
  }
LABEL_48:
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v73 = 0;
    uint64_t v74 = "EntityNameFeaturiser : failed to set items for the item matcher";
LABEL_54:
    _os_log_impl(&dword_1C8F83000, v71, v72, v74, v73, 2u);
    MEMORY[0x1CB77E470](v73, -1, -1);
  }
LABEL_55:
}

uint64_t EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(void **a1, uint64_t a2, void *a3, void *a4, void *a5, float *a6, uint64_t a7)
{
  swift_bridgeObjectRelease();
  uint64_t v44 = 0;
  unint64_t v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v14 = *a1;
  EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:)((uint64_t)&v43, &v44, *a1, a2);
  if (*((unsigned char *)v14 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source))
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v16 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0 || a7) {
      goto LABEL_11;
    }
LABEL_6:
    if (one-time initialization token for textMatchOverride == -1) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
  unint64_t v16 = swift_bridgeObjectRelease();
  if (!a7) {
    goto LABEL_6;
  }
LABEL_11:
  while (1)
  {
    unint64_t v23 = *a1;
    unsigned __int8 v24 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v25 = (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))(v16);
    a1 = (void **)v43;
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v26);
    uint64_t v27 = swift_bridgeObjectRelease();
    *a3 = v14;
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))((*v24 & *v23) + 0xB8))(v27);
    uint64_t v29 = (*(uint64_t (**)(void))((*v24 & *v28) + 0xE0))();

    uint64_t v30 = *(void *)(v29 + 16);
    swift_bridgeObjectRelease();
    a3 = (void *)(v30 <= v25 ? v25 : v30);
    *a4 = a3;
    if (v25 >= v44) {
      break;
    }
    uint64_t v31 = v44 - v25;
    if (!__OFSUB__(v44, v25))
    {
      BOOL v32 = __OFSUB__(v31, 1);
      uint64_t v33 = v31 - 1;
      if (!v32) {
        goto LABEL_20;
      }
      __break(1u);
      break;
    }
    __break(1u);
LABEL_30:
    swift_once();
LABEL_7:
    unint64_t v16 = specialized Set.contains(_:)((uint64_t)v14 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, static EntityNameFeaturiser.textMatchOverride);
    if (v16)
    {
      unint64_t v17 = v43;
      if (*(void *)(v43 + 16))
      {
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
        if (v18)
        {
          uint64_t v19 = *(void *)(v17 + 56) + 8 * v16;
          float v20 = *(float *)(v19 + 4);
          float v21 = *(float *)v19 * 1.01;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x656C746974, 0xE500000000000000, isUniquelyReferenced_nonNull_native, v21, v20);
          unint64_t v43 = v17;
          unint64_t v16 = swift_bridgeObjectRelease();
        }
      }
    }
  }
  uint64_t v33 = 0;
LABEL_20:
  *a5 = v33;
  int64_t v34 = v14[2];
  uint64_t v35 = MEMORY[0x1E4FBC860];
  if (v34)
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    uint64_t v35 = v42;
    unint64_t v36 = *(void *)(v42 + 16);
    uint64_t v37 = 4;
    do
    {
      int v38 = v14[v37];
      unint64_t v39 = *(void *)(v42 + 24);
      if (v36 >= v39 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v36 + 1, 1);
      }
      *(void *)(v42 + 16) = v36 + 1;
      *(_DWORD *)(v42 + 4 * v36 + 32) = v38;
      ++v37;
      ++v36;
      --v34;
    }
    while (v34);
    swift_release();
  }
  float v40 = specialized EntityNameFeaturiser.computeCombineTextMatchScore(maxFieldCount:textMatchScores:)((uint64_t)a3, v35);
  swift_bridgeObjectRelease();
  *a6 = v40;

  return swift_bridgeObjectRelease();
}

void EntityNameFeaturiser.featurise(candidate:rankedSlotIndex:)(void **a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD0))(v6);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  uint64_t v31 = 0;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t v30 = 0;
  float v29 = 0.0;
  EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(a1, v8, &v32, &v31, &v30, &v29, a2);
  swift_bridgeObjectRelease();
  uint64_t v27 = 0;
  uint64_t v28 = v9;
  uint64_t v26 = 0;
  float v25 = 0.0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))((*v7 & *v5) + 0xD8))(v6);
  if (v10)
  {
    EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(a1, v10, &v28, &v27, &v26, &v25, a2);
    swift_bridgeObjectRelease();
    float v11 = v25;
  }
  else
  {
    float v11 = 0.0;
  }
  float v12 = v29;
  if (v29 >= v11)
  {
    uint64_t v19 = swift_bridgeObjectRelease();
    float v20 = *(uint64_t (**)(void))((*v7 & *v5) + 0xB8);
    float v21 = (void *)((uint64_t (*)(uint64_t))v20)(v19);
    (*(void (**)(uint64_t))((*v7 & *v21) + 0xE8))(v32);

    id v22 = (void *)v20();
    (*(void (**)(uint64_t))((*v7 & *v22) + 0x100))(v31);

    unint64_t v23 = (void *)v20();
    (*(void (**)(uint64_t))((*v7 & *v23) + 0x118))(v30);

    unsigned __int8 v24 = (void *)v20();
    v18.n128_f32[0] = v12;
  }
  else
  {
    uint64_t v13 = swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(void))((*v7 & *v5) + 0xB8);
    char v15 = (void *)((uint64_t (*)(uint64_t))v14)(v13);
    (*(void (**)(uint64_t))((*v7 & *v15) + 0xE8))(v28);

    unint64_t v16 = (void *)v14();
    (*(void (**)(uint64_t))((*v7 & *v16) + 0x100))(v27);

    unint64_t v17 = (void *)v14();
    (*(void (**)(uint64_t))((*v7 & *v17) + 0x118))(v26);

    unsigned __int8 v24 = (void *)v14();
    v18.n128_f32[0] = v11;
  }
  (*(void (**)(__n128))((*v7 & *v24) + 0x130))(v18);
}

void one-time initialization function for precompdPnormExp()
{
  static EntityNameFeaturiser.precompdPnormExp = &outlined read-only object #0 of one-time initialization function for precompdPnormExp;
}

void one-time initialization function for fieldCountWgts()
{
  static EntityNameFeaturiser.fieldCountWgts = &outlined read-only object #0 of one-time initialization function for fieldCountWgts;
}

id *EntityNameFeaturiser.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EntityNameFeaturiser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance EntityNameFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance EntityNameFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  unint64_t v39 = __src;
  int v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_46;
    }
    if (a4 != a2 || &a2[v12] <= a4) {
      memmove(a4, a2, 8 * v12);
    }
    unint64_t v23 = &a4[v12];
    uint64_t v37 = (char *)v23;
    unint64_t v39 = v5;
    if (v6 >= v5 || v10 < 8) {
      goto LABEL_45;
    }
    unsigned __int8 v24 = (id *)(a3 - 8);
    float v25 = v5;
    while (1)
    {
      uint64_t v26 = v24 + 1;
      uint64_t v27 = v23 - 1;
      uint64_t v28 = *--v25;
      id v29 = *(v23 - 1);
      id v30 = v28;
      objc_msgSend(v29, sel_score);
      float v32 = v31;
      objc_msgSend(v30, sel_score);
      float v34 = v33;

      if (v34 < v32) {
        break;
      }
      uint64_t v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        id *v24 = *v27;
        float v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23) {
        id *v24 = *v27;
      }
      float v25 = v5;
      --v23;
      if (v5 <= v6) {
        goto LABEL_45;
      }
LABEL_44:
      --v24;
      uint64_t v5 = v25;
      if (v23 <= a4) {
        goto LABEL_45;
      }
    }
    if (v26 != v5 || v24 >= v5) {
      id *v24 = *v25;
    }
    unint64_t v39 = v25;
LABEL_43:
    if (v25 <= v6) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4) {
      memmove(a4, __src, 8 * v9);
    }
    uint64_t v13 = &a4[v9];
    uint64_t v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      uint64_t v14 = a4;
      do
      {
        char v15 = *v14;
        id v16 = *v5;
        id v17 = v15;
        objc_msgSend(v16, sel_score);
        float v19 = v18;
        objc_msgSend(v17, sel_score);
        float v21 = v20;

        if (v21 >= v19)
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          int v38 = ++v14;
          id v22 = v5;
        }
        else
        {
          id v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
        }
        ++v6;
        if (v14 >= v13) {
          break;
        }
        uint64_t v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      unint64_t v39 = v6;
    }
LABEL_45:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, NSObject *a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType))
                    - 8);
    uint64_t v11 = (void *)(a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in EntityNameFeaturiser.generateItems(from:identifier:)(v11, a2, a3, a4, &v14);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v14)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v11 = (void *)((char *)v11 + v12);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t specialized EntityNameFeaturiser.generateItemTypes(from:)(uint64_t a1)
{
  uint64_t v80 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v2 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v70 = (char *)v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v67 = (void *)((char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v66 = (void *)((char *)v64 - v9);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v76 = (void *)((char *)v64 - v11);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  id v68 = (void *)((char *)v64 - v13);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (void *)((char *)v64 - v14);
  unint64_t v86 = MEMORY[0x1E4FBC868];
  Swift::Int v16 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Apple_Parsec_Siri_V2alpha_AudioItemType]);
  Dictionary.reserveCapacity(_:)(v16);
  if (!v16) {
    return v86;
  }
  uint64_t v74 = (char *)v15 + *(int *)(v4 + 64);
  uint64_t v17 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v73 = *(void *)(v5 + 72);
  uint64_t v81 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v79 = (void (**)(void))(v2 + 16);
  id v77 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v65 = v2;
  v64[2] = v2 + 40;
  v64[1] = a1;
  swift_bridgeObjectRetain();
  float v18 = &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
  float v19 = v68;
  uint64_t v78 = v4;
  uint64_t v75 = v15;
  while (1)
  {
    uint64_t v83 = v17;
    Swift::Int v84 = v16;
    outlined init with copy of MediaUserStateCenter?(v17, (uint64_t)v15, v18);
    float v21 = (char *)v19 + *(int *)(v4 + 64);
    id v22 = v18;
    uint64_t v23 = v4;
    uint64_t v25 = *v15;
    uint64_t v24 = v15[1];
    uint64_t v27 = v15[2];
    unint64_t v26 = v15[3];
    *float v19 = *v15;
    v19[1] = v24;
    v19[2] = v27;
    v19[3] = v26;
    uint64_t v28 = v80;
    id v29 = *v81;
    (*v81)(v21, v74, v80);
    uint64_t v30 = *(int *)(v23 + 64);
    uint64_t v31 = v28;
    float v32 = v76;
    uint64_t v33 = (uint64_t)v19;
    float v34 = (char *)v76 + v30;
    uint64_t v82 = v25;
    *uint64_t v76 = v25;
    v32[1] = v24;
    void v32[2] = v27;
    v32[3] = v26;
    uint64_t v35 = *v79;
    ((void (*)(char *, char *, uint64_t))*v79)(v34, v21, v31);
    if (v26) {
      break;
    }
    outlined destroy of MediaUserStateCenter?(v33, v22);
    (*v77)(v34, v31);
    uint64_t v4 = v78;
    float v19 = (void *)v33;
    uint64_t v15 = v75;
    Swift::Int v20 = v84;
    float v18 = v22;
LABEL_4:
    uint64_t v17 = v83 + v73;
    Swift::Int v16 = v20 - 1;
    if (!v16)
    {
      swift_bridgeObjectRelease();
      return v86;
    }
  }
  os_log_type_t v72 = (void (*)(unint64_t, char *, uint64_t))v29;
  uint64_t v36 = v31;
  uint64_t v37 = *v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v71 = v37;
  v37(v34, v36);
  uint64_t v38 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v38 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v38)
  {
    float v19 = v68;
    float v18 = &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
    outlined destroy of MediaUserStateCenter?((uint64_t)v68, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v78;
    uint64_t v15 = v75;
LABEL_21:
    Swift::Int v20 = v84;
    goto LABEL_4;
  }
  uint64_t v39 = v78;
  uint64_t v40 = *(int *)(v78 + 64);
  uint64_t v41 = v66;
  uint64_t v42 = v82;
  *uint64_t v66 = v82;
  v41[1] = v24;
  v41[2] = v27;
  v41[3] = v26;
  id v69 = (char *)v41 + v40;
  v35();
  uint64_t v43 = *(int *)(v39 + 64);
  uint64_t v44 = v67;
  unint64_t v45 = (char *)v67 + v43;
  *unint64_t v67 = v42;
  v44[1] = v24;
  void v44[2] = v27;
  v44[3] = v26;
  ((void (*)(char *, char *, uint64_t))v35)((char *)v44 + v43, v21, v36);
  swift_bridgeObjectRelease();
  uint64_t v46 = v72;
  v72((unint64_t)v70, v45, v36);
  unint64_t v47 = v86;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v85 = (void *)v47;
  unint64_t v86 = 0x8000000000000000;
  unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v24);
  uint64_t v51 = *(void *)(v47 + 16);
  BOOL v52 = (v49 & 1) == 0;
  uint64_t v53 = v51 + v52;
  uint64_t v15 = v75;
  if (!__OFADD__(v51, v52))
  {
    char v54 = v49;
    if (*(void *)(v47 + 24) >= v53)
    {
      uint64_t v4 = v78;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v24);
      uint64_t v4 = v78;
      if ((v54 & 1) != (v56 & 1)) {
        goto LABEL_26;
      }
      unint64_t v50 = v55;
    }
    uint64_t v57 = v80;
    id v58 = v85;
    if (v54)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v65 + 40))(v85[7] + *(void *)(v65 + 72) * v50, v70, v80);
    }
    else
    {
      v85[(v50 >> 6) + 8] |= 1 << v50;
      uint64_t v59 = (void *)(v58[6] + 16 * v50);
      *uint64_t v59 = v82;
      v59[1] = v24;
      v46(v58[7] + *(void *)(v65 + 72) * v50, v70, v57);
      uint64_t v60 = v58[2];
      BOOL v61 = __OFADD__(v60, 1);
      uint64_t v62 = v60 + 1;
      if (v61) {
        goto LABEL_25;
      }
      v58[2] = v62;
      swift_bridgeObjectRetain();
    }
    unint64_t v86 = (unint64_t)v85;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    float v19 = v68;
    float v18 = &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
    outlined destroy of MediaUserStateCenter?((uint64_t)v68, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v71(v69, v57);
    goto LABEL_21;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

float specialized EntityNameFeaturiser.computeCombineTextMatchScore(maxFieldCount:textMatchScores:)(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 == 3)
  {
    uint64_t v3 = a2;
    uint64_t v2 = a1;
    if (one-time initialization token for precompdPnormExp == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v6 = 4 * v2;
  if (*((void *)static EntityNameFeaturiser.precompdPnormExp + 2) <= v2)
  {
    float v4 = 1.0 / (float)v6;
    int64_t v7 = *(void *)(v3 + 16);
    if (!v7) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    float v11 = (float)v6;
    uint64_t v8 = v21;
    uint64_t v12 = (float *)(v3 + 32);
    unint64_t v13 = *(void *)(v21 + 16);
    do
    {
      float v14 = *v12;
      unint64_t v15 = *(void *)(v21 + 24);
      unint64_t v9 = v13 + 1;
      if (v13 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v13 + 1, 1);
      }
      float v16 = powf(v14, v11);
      *(void *)(v21 + 16) = v9;
      *(float *)(v21 + 4 * v13 + 32) = v16;
      ++v12;
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_7;
  }
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  float v4 = *((float *)static EntityNameFeaturiser.precompdPnormExp + v2 + 8);
  int64_t v7 = *(void *)(v3 + 16);
  if (v7) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v9 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v9)
  {
    float v5 = 0.0;
    goto LABEL_22;
  }
LABEL_7:
  if (v9 >= 2)
  {
    uint64_t v17 = 0;
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    float v5 = 0.0;
    do
    {
      float v5 = (float)(v5 + *(float *)(v8 + 4 * v17 + 32)) + *(float *)(v8 + 4 * v17 + 36);
      v17 += 2;
    }
    while (v10 != v17);
    goto LABEL_23;
  }
  unint64_t v10 = 0;
  float v5 = 0.0;
  do
  {
    float v20 = *(float *)(v8 + 4 * v10++ + 32);
    float v5 = v5 + v20;
LABEL_23:
    ;
  }
  while (v9 != v10);
LABEL_22:
  swift_bridgeObjectRelease();
  float v18 = powf((float)v2, -v4);
  return v18 * powf(v5, v4);
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  id v31 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  unint64_t v10 = (void *)((char *)v28 - v9);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  v28[2] = v2;
  uint64_t v14 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm() - 8);
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v32 = *(void *)(v14 + 72);
  v28[1] = a1;
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v18 = MEMORY[0x1CB778830](v16);
    unint64_t v20 = v19;
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
      uint64_t v22 = MEMORY[0x1CB778830](v16);
      uint64_t v23 = (void *)MEMORY[0x1CB77CA90](v22);
      swift_bridgeObjectRelease();
      id v24 = objc_msgSend(v31, sel_queryFromText_, v23);

      *unint64_t v10 = v24;
      MEMORY[0x1CB778810]();
      outlined init with take of PommesSearchReason?((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      outlined init with take of PommesSearchReason?((uint64_t)v12, (uint64_t)v7, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
      }
      unint64_t v26 = *(void *)(v17 + 16);
      unint64_t v25 = *(void *)(v17 + 24);
      if (v26 >= v25 >> 1) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v17);
      }
      *(void *)(v17 + 16) = v26 + 1;
      uint64_t v16 = outlined init with take of PommesSearchReason?((uint64_t)v7, v17+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v26, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    }
    v15 += v32;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized static EntityNameFeaturiser.score(_:_:_:_:)(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4)
{
  if (a4 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = a4;
  }
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v24 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v7 = v24;
    unint64_t v8 = *(void *)(v24 + 16);
    uint64_t v9 = (float *)(a1 + 36);
    unint64_t v10 = v5;
    do
    {
      float v12 = *(v9 - 1);
      float v11 = *v9;
      uint64_t v25 = v7;
      unint64_t v13 = *(void *)(v7 + 24);
      unint64_t v14 = v8 + 1;
      if (v8 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v8 + 1, 1);
        uint64_t v7 = v25;
      }
      *(void *)(v7 + 16) = v14;
      *(float *)(v7 + 4 * v8 + 32) = (float)(v12 * 0.67) + (float)(v11 * 0.33);
      v9 += 2;
      ++v8;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    unint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v14) {
      goto LABEL_18;
    }
  }
  if (v14 < 2)
  {
    unint64_t v15 = 0;
    float v16 = 0.0;
LABEL_16:
    unint64_t v19 = v14 - v15;
    unint64_t v20 = (float *)(v7 + 4 * v15 + 32);
    do
    {
      float v21 = *v20++;
      float v16 = v16 + v21;
      --v19;
    }
    while (v19);
    goto LABEL_18;
  }
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v17 = (float *)(v7 + 36);
  float v16 = 0.0;
  unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    float v16 = (float)(v16 + *(v17 - 1)) + *v17;
    v17 += 2;
    v18 -= 2;
  }
  while (v18);
  if (v14 != v15) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for fieldCountWgts != -1) {
    uint64_t result = swift_once();
  }
  unint64_t v23 = *((void *)static EntityNameFeaturiser.fieldCountWgts + 2);
  if (v5 < v23 && v4 >= v23) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for EntityNameFeaturiser()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String>);
    lazy protocol witness table accessor for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for EntityNameFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EntityNameFeaturiser);
}

uint64_t dispatch thunk of EntityNameFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.__allocating_init(query:localizedTokenizer:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.add(match:multiFieldMatchWeight:with:_:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

const char *CallBusinessNoResultsExperiencesResolver.domainName.unsafeMutableAddressor()
{
  return "phone";
}

uint64_t static CallBusinessNoResultsExperiencesResolver.domainName.getter()
{
  return 0x656E6F6870;
}

uint64_t CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  uint64_t v84 = *(void *)(v87 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v87);
  uint64_t v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v83 = (char *)&v80 - v7;
  MEMORY[0x1F4188790](v6);
  unint64_t v86 = (char *)&v80 - v8;
  uint64_t v9 = *(void *)(a3 + 16);
  unint64_t v10 = MEMORY[0x1E4FBC860];
  if (!v9)
  {
    unint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_25:
    unint64_t v124 = v10;
    uint64_t v36 = *(void *)(v14 + 16);
    if (v36)
    {
      uint64_t v37 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
      unint64_t v38 = v14 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
      uint64_t v39 = *(void *)(v37 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      do
      {
        if (specialized CallBusinessNoResultsExperiencesResolver.getUsoTask(_:)())
        {
          MEMORY[0x1CB77CD90]();
          if (*(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v38 += v39;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
      unint64_t v40 = v124;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v40 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v13 = specialized Sequence.compactMap<A>(_:)(v40);
    uint64_t v82 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v125 = v13;
    uint64_t v126 = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    uint64_t v127 = 0;
    uint64_t v128 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v129 = 0;
    os_log_type_t v130 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v131 = 0;
    uint64_t v132 = closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    uint64_t v133 = 0;
    uint64_t v134 = closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    uint64_t v135 = 0;
    id v136 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v137 = 0;
    uint64_t v138 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v139 = 0;
    uint64_t v140 = closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    uint64_t v141 = 0;
    int v142 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v143 = 0;
    *(void *)&long long v111 = v13;
    *((void *)&v111 + 1) = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v112 = 0;
    *((void *)&v112 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v113 = 0;
    *((void *)&v113 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v114 = 0;
    *((void *)&v114 + 1) = closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v115 = 0;
    *((void *)&v115 + 1) = closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v116 = 0;
    *((void *)&v116 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v117 = 0;
    *((void *)&v117 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v118 = 0;
    *((void *)&v118 + 1) = closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v119 = 0;
    *((void *)&v119 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v120 = 0;
    *((void *)&v120 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(void *)&long long v121 = 0;
    *((void *)&v121 + 1) = closure #8 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v122 = 0;
    *((void *)&v122 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    uint64_t v123 = 0;
    uint64_t v41 = specialized LazyFilterSequence<>.startIndex.getter();
    unint64_t v43 = v42;
    LOBYTE(v45) = v44;
    int v46 = v44 & 1;
    uint64_t v108 = v41;
    unint64_t v109 = v42;
    unsigned __int8 v110 = v44 & 1;
    unint64_t v47 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
    *(void *)&long long v93 = v13;
    *((void *)&v93 + 1) = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(void *)&long long v94 = 0;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
    MEMORY[0x1CB77D5F0](&v88, v9, v47);
    if (v41 == v88 && v46)
    {
      BOOL v48 = 1;
LABEL_50:
      long long v103 = v121;
      long long v104 = v122;
      uint64_t v105 = v123;
      long long v99 = v117;
      long long v100 = v118;
      long long v101 = v119;
      long long v102 = v120;
      long long v95 = v113;
      long long v96 = v114;
      long long v97 = v115;
      long long v98 = v116;
      long long v93 = v111;
      long long v94 = v112;
      uint64_t v106 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      uint64_t v107 = 0;
      id v88 = (void *)v13;
      unint64_t v89 = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
      uint64_t v90 = 0;
      MEMORY[0x1CB77D5F0](v91, v9, v47);
      if (v41 == (void *)v91[0] && v48)
      {
LABEL_61:
        uint64_t v59 = outlined release of LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>, String>((uint64_t)&v93);
        MEMORY[0x1F4188790](v59);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
        uint64_t v13 = (uint64_t)v86;
        uint64_t v9 = v87;
        static Message.with(_:)();
        swift_bridgeObjectRelease();
        if (one-time initialization token for pommes != -1) {
          goto LABEL_72;
        }
        goto LABEL_62;
      }
      v91[2] = 0;
      uint64_t v92 = v41;
      v91[0] = v13;
      v91[1] = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
      char v54 = LazyMapSequence<>.subscript.read(&v88, (uint64_t)&v92, v9);
      uint64_t v56 = *v55;
      swift_bridgeObjectRetain();
      ((void (*)(void **, void))v54)(&v88, 0);
      if (!v56) {
        goto LABEL_80;
      }
      if (v48)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if ((v56 & 0xC000000000000001) != 0)
      {
        MEMORY[0x1CB77D510](v43, v56);
LABEL_58:
        swift_bridgeObjectRelease();
        dispatch thunk of CodeGenListEntry.entry.getter();
        swift_release();
        if (v88)
        {
          CodeGenBase.entity.getter();
          type metadata accessor for UsoEntity_common_Person();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
          swift_release();
          swift_release();
          if (v88)
          {
            dispatch thunk of UsoEntity_common_Person.name.getter();
            uint64_t v58 = v57;
            swift_release();
            if (v58) {
              goto LABEL_61;
            }
LABEL_84:
            __break(1u);
LABEL_85:
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      if ((v43 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v43 < *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
        goto LABEL_58;
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        v91[0] = v41;
        id v88 = (void *)v13;
        unint64_t v89 = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
        uint64_t v90 = 0;
        outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>((uint64_t)&v111);
        char v49 = LazyMapSequence<>.subscript.read(&v93, (uint64_t)v91, v9);
        uint64_t v51 = *v50;
        swift_bridgeObjectRetain();
        ((void (*)(long long *, void))v49)(&v93, 0);
        if (!v51) {
          break;
        }
        if (v45) {
          goto LABEL_77;
        }
        if ((v51 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CB77D510](v43, v51);
        }
        else
        {
          if ((v43 & 0x8000000000000000) != 0) {
            goto LABEL_69;
          }
          if (v43 >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_70;
          }
          swift_retain();
        }
        swift_bridgeObjectRelease();
        dispatch thunk of CodeGenListEntry.entry.getter();
        swift_release();
        if (!(void)v93) {
          goto LABEL_78;
        }
        CodeGenBase.entity.getter();
        type metadata accessor for UsoEntity_common_Person();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        swift_release();
        if (!(void)v93) {
          goto LABEL_79;
        }
        dispatch thunk of UsoEntity_common_Person.name.getter();
        uint64_t v53 = v52;
        swift_release();
        outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>((uint64_t)&v111);
        swift_bridgeObjectRelease();
        BOOL v48 = v53 == 0;
        if (!v53)
        {
          specialized LazyFilterSequence<>.formIndex(after:)((uint64_t)&v108);
          int v45 = v110;
          uint64_t v41 = v108;
          unint64_t v43 = v109;
          *(void *)&long long v93 = v13;
          *((void *)&v93 + 1) = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
          *(void *)&long long v94 = 0;
          uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
          MEMORY[0x1CB77D5F0](&v88, v9, v47);
          if (v41 != v88 || !v45) {
            continue;
          }
        }
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v11 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain_n();
  unint64_t v14 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v15 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v16 = *(void *)(v15 + 16);
    int64_t v17 = *(void *)(v14 + 16);
    int64_t v18 = v17 + v16;
    if (__OFADD__(v17, v16)) {
      break;
    }
    uint64_t v19 = v15;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v18 <= *(void *)(v14 + 24) >> 1)
    {
      if (*(void *)(v19 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v17 <= v18) {
        int64_t v21 = v17 + v16;
      }
      else {
        int64_t v21 = v17;
      }
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v14);
      if (*(void *)(v19 + 16))
      {
LABEL_14:
        uint64_t v22 = *(void *)(v14 + 16);
        uint64_t v23 = (*(void *)(v14 + 24) >> 1) - v22;
        uint64_t v24 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
        uint64_t v25 = *(void *)(v24 + 72);
        if (v23 < v16) {
          goto LABEL_68;
        }
        unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
        unint64_t v27 = v14 + v26 + v25 * v22;
        unint64_t v28 = v19 + v26;
        uint64_t v29 = v25 * v16;
        unint64_t v30 = v27 + v29;
        unint64_t v31 = v28 + v29;
        if (v28 < v30 && v27 < v31) {
          goto LABEL_85;
        }
        swift_arrayInitWithCopy();
        if (v16)
        {
          uint64_t v33 = *(void *)(v14 + 16);
          BOOL v34 = __OFADD__(v33, v16);
          uint64_t v35 = v33 + v16;
          if (v34) {
            goto LABEL_71;
          }
          *(void *)(v14 + 16) = v35;
        }
        goto LABEL_4;
      }
    }
    if (v16) {
      goto LABEL_67;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v12 += v13;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v10 = MEMORY[0x1E4FBC860];
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_once();
LABEL_62:
  uint64_t v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
  BOOL v61 = v83;
  uint64_t v62 = v84;
  uint64_t v63 = v13;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  v64(v83, v63, v9);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    os_log_t v81 = v65;
    uint64_t v67 = swift_slowAlloc();
    uint64_t v82 = v64;
    uint64_t v68 = v62;
    id v69 = (uint8_t *)v67;
    uint64_t v70 = swift_slowAlloc();
    id v88 = (void *)v70;
    *(_DWORD *)id v69 = 136315138;
    uint64_t v71 = Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
    v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = *(void (**)(char *, uint64_t))(v68 + 8);
    v73(v61, v87);
    uint64_t v65 = v81;
    uint64_t v64 = v82;
    _os_log_impl(&dword_1C8F83000, v81, v66, "Making PhoneCallExperience for CallBusinessNoResultsExperiencesResolver with phoneCall.name=%s", v69, 0xCu);
    swift_arrayDestroy();
    uint64_t v74 = v70;
    uint64_t v9 = v87;
    MEMORY[0x1CB77E470](v74, -1, -1);
    MEMORY[0x1CB77E470](v69, -1, -1);
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t))(v62 + 8);
    v73(v61, v9);
  }

  uint64_t v75 = v85;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1C9195B30;
  type metadata accessor for PhoneCallExperience();
  id v77 = v86;
  v64(v75, (uint64_t)v86, v9);
  *(void *)(v76 + 32) = PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)();
  id v88 = (void *)v76;
  specialized Array._endMutation()();
  uint64_t v78 = (uint64_t)v88;
  v73(v77, v9);
  return v78;
}

uint64_t closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
  *a1 = result;
  return result;
}

uint64_t closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)()
{
  CodeGenBase.entity.getter();
  type metadata accessor for UsoEntity_common_Person();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();

  return swift_release();
}

uint64_t closure #8 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of UsoEntity_common_Person.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for ExperiencesResolver.buildExperiences(from:with:) in conformance CallBusinessNoResultsExperiencesResolver(uint64_t a1, uint64_t a2)
{
  return CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)(a1, a2, *v2);
}

void (*specialized protocol witness for Collection.subscript.read in conformance <> LazyMapSequence<A, B>(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized LazyMapSequence<>.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t specialized LazyMapSequence<>.startIndex.getter()
{
  void (*v9)(uint64_t *__return_ptr, long long *);
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(long long *);
  void (*v14)(uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void (*v22)(long long *__return_ptr, long long *);
  void (*v23)(long long *__return_ptr, long long *);
  long long v24;
  uint64_t v25;
  long long v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;

  long long v1 = *(_OWORD *)(v0 + 80);
  uint64_t v33 = *(_OWORD *)(v0 + 64);
  BOOL v34 = v1;
  uint64_t v35 = *(void *)(v0 + 96);
  long long v2 = *(_OWORD *)(v0 + 16);
  v30[0] = *(_OWORD *)v0;
  v30[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  unint64_t v31 = *(_OWORD *)(v0 + 32);
  uint64_t v32 = v3;
  unint64_t v38 = v31;
  uint64_t v39 = v3;
  unint64_t v40 = *(void *)(v0 + 64);
  uint64_t v36 = v30[0];
  uint64_t v37 = v2;
  uint64_t v22 = (void (*)(long long *__return_ptr, long long *))*((void *)&v33 + 1);
  unint64_t v4 = specialized FlattenSequence<>.startIndex.getter();
  unint64_t v6 = v5;
  char v8 = v7;
  uint64_t v9 = (void (*)(uint64_t *__return_ptr, long long *))*((void *)&v31 + 1);
  uint64_t v23 = (void (*)(long long *__return_ptr, long long *))*((void *)&v39 + 1);
  uint64_t v41 = v30[0];
  unint64_t v42 = v37;
  unint64_t v10 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  while (1)
  {
    uint64_t v24 = v41;
    uint64_t v25 = v42;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
    MEMORY[0x1CB77D5F0](&v26, v11, v10);
    if (v4 == (void)v26 && (v8 & 1) != 0) {
      return v4;
    }
    uint64_t v13 = (uint64_t (*)(long long *))*((void *)&v34 + 1);
    unint64_t v28 = v4;
    unint64_t v26 = v41;
    unint64_t v27 = v42;
    swift_retain();
    outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v30);
    unint64_t v14 = LazyMapSequence<>.subscript.read(&v24, (uint64_t)&v28, v11);
    uint64_t v16 = *v15;
    swift_bridgeObjectRetain();
    ((void (*)(long long *, void))v14)(&v24, 0);
    *(void *)&uint64_t v24 = v16;
    v9(&v29, &v24);
    swift_bridgeObjectRelease();
    *(void *)&unint64_t v26 = v29;
    v23(&v24, &v26);
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_18;
    }
    if ((v24 & 0xC000000000000001) != 0)
    {
      int64_t v18 = MEMORY[0x1CB77D510](v6, v24);
      goto LABEL_12;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      break;
    }
    if (v6 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_17;
    }
    int64_t v18 = *(void *)(v24 + 8 * v6 + 32);
    swift_retain();
LABEL_12:
    swift_bridgeObjectRelease();
    *(void *)&unint64_t v26 = v18;
    v22(&v24, &v26);
    swift_release();
    outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v30);
    *(void *)&unint64_t v26 = v24;
    uint64_t v19 = v13(&v26);
    swift_release();
    swift_release();
    if (v19) {
      return v4;
    }
    unint64_t v4 = specialized FlattenSequence<>._index(after:)(v4, v6, 0);
    unint64_t v6 = v20;
    char v8 = v21;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void (*specialized LazyMapSequence<>.subscript.read(void *a1, uint64_t a2))(void **a1)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t *v9;
  uint64_t v10;
  void (*v12)(uint64_t *);
  uint64_t v13;
  uint64_t v14;

  unint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  unint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 40);
  uint64_t v12 = *(void (**)(uint64_t *))(v2 + 56);
  v5[8] = a2;
  *((_OWORD *)v5 + 2) = *(_OWORD *)v2;
  v5[6] = *(void *)(v2 + 16);
  char v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  char v8 = LazyMapSequence<>.subscript.read(v5, (uint64_t)(v5 + 8), v7);
  unint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  ((void (*)(void *, void))v8)(v5, 0);
  uint64_t v13 = v10;
  v6(&v14, &v13);
  swift_bridgeObjectRelease();
  uint64_t v13 = v14;
  v12(&v13);
  swift_bridgeObjectRelease();
  return LazyMapSequence<>.subscript.readspecialized ;
}

void LazyMapSequence<>.subscript.readspecialized (void **a1)
{
  long long v1 = *a1;
  swift_bridgeObjectRelease();

  free(v1);
}

void (*LazyMapSequence<>.subscript.read(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x40uLL);
  *a1 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = malloc(*(void *)(v8 + 64));
  uint64_t v10 = *(void *)(a3 + 24);
  v6[4] = v9;
  v6[5] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[6] = v11;
  v6[7] = malloc(*(void *)(v11 + 64));
  uint64_t v12 = *(void (**)(void *))(v3 + *(int *)(a3 + 44));
  uint64_t v13 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  (*(void (**)(void *))(v8 + 16))(v9);
  v13(v6, 0);
  v12(v9);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  return LazyMapSequence<>.subscript.read;
}

void LazyMapSequence<>.subscript.read(uint64_t a1)
{
  long long v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 56);
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 48) + 8))(v2, *(void *)(*(void *)a1 + 40));
  free(v2);
  free(v3);

  free(v1);
}

void *specialized LazyFilterSequence<>.startIndex.getter()
{
  void (*v26)(void *__return_ptr, long long *);
  void (*v27)(long long *__return_ptr, uint64_t *);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(long long *__return_ptr, void *);
  void (*v31)(_OWORD *__return_ptr, void *);
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, _OWORD *);
  char v34;
  uint64_t (*v35)(void *);
  uint64_t v36;
  unint64_t v37;
  long long v38;
  uint64_t v39;
  void v40[3];
  uint64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;
  _OWORD v51[5];
  long long v52;
  uint64_t v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  uint64_t v58;

  long long v1 = v0[5];
  unint64_t v47 = v0[4];
  BOOL v48 = v1;
  char v49 = v0[6];
  unint64_t v50 = *((void *)v0 + 14);
  long long v2 = v0[1];
  unint64_t v43 = *v0;
  char v44 = v2;
  long long v3 = v0[3];
  int v45 = v0[2];
  int v46 = v3;
  uint64_t v4 = specialized LazyMapSequence<>.startIndex.getter();
  uint64_t v37 = v5;
  LODWORD(v7) = v6 & 1;
  uint64_t v51[4] = v47;
  uint64_t v52 = v48;
  uint64_t v53 = v49;
  v51[0] = v43;
  v51[1] = v44;
  v51[2] = v45;
  v51[3] = v46;
  uint64_t v58 = v47;
  uint64_t v56 = v45;
  uint64_t v57 = v46;
  char v54 = v43;
  unint64_t v55 = v44;
  unint64_t v30 = (void (*)(long long *__return_ptr, void *))*((void *)&v47 + 1);
  uint64_t v9 = *((void *)&v43 + 1);
  uint64_t v8 = v43;
  uint64_t v10 = v44;
  uint64_t v32 = v46;
  uint64_t v33 = (void (*)(uint64_t *__return_ptr, _OWORD *))*((void *)&v45 + 1);
  unint64_t v31 = (void (*)(_OWORD *__return_ptr, void *))*((void *)&v46 + 1);
  unint64_t v11 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  unint64_t v38 = v43;
  uint64_t v39 = v44;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  MEMORY[0x1CB77D5F0](v40, v12, v11);
  if (v4 != v40[0] || !v7)
  {
    unint64_t v26 = (void (*)(void *__return_ptr, long long *))*((void *)&v49 + 1);
    uint64_t v29 = v9;
    do
    {
      uint64_t v35 = *(uint64_t (**)(void *))(v28 + 136);
      outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v28);
      swift_retain();
      v40[0] = specialized FlattenSequence<>.subscript.getter(v4, v37, v7 & 1, v8, v9, v10, (void (*)(uint64_t *__return_ptr, void *))v33, v32, (void (*)(void *__return_ptr, void *))v31);
      v30(&v38, v40);
      swift_release();
      v26(v40, &v38);
      swift_release();
      unint64_t v42 = v40[0];
      v27(&v38, &v42);
      swift_release();
      outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v28);
      v40[0] = v38;
      char v15 = v35(v40);
      swift_release();
      swift_release();
      if (v15) {
        break;
      }
      *(void *)&unint64_t v38 = v8;
      *((void *)&v38 + 1) = v9;
      uint64_t v39 = v10;
      uint64_t result = MEMORY[0x1CB77D5F0](v40, v12, v11);
      if (((v4 == v40[0]) & v7) != 0)
      {
LABEL_24:
        __break(1u);
        return result;
      }
      uint64_t v9 = v29;
      do
      {
        uint64_t v4 = specialized FlattenSequence<>._index(after:)(v4, v37, v7 & 1);
        uint64_t v37 = v16;
        *(void *)&unint64_t v38 = v8;
        char v18 = v17;
        *((void *)&v38 + 1) = v9;
        uint64_t v39 = v10;
        MEMORY[0x1CB77D5F0](v40, v12, v11);
        BOOL v34 = (v4 == v40[0]) & v18;
        if (v34) {
          break;
        }
        uint64_t v19 = v10;
        unint64_t v20 = (uint64_t (*)(void *))*((void *)&v52 + 1);
        uint64_t v36 = v4;
        v40[2] = v19;
        uint64_t v41 = v4;
        v40[0] = v8;
        v40[1] = v9;
        uint64_t v21 = v19;
        swift_retain();
        outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v51);
        uint64_t v22 = LazyMapSequence<>.subscript.read(&v38, (uint64_t)&v41, v12);
        uint64_t v24 = *v23;
        swift_bridgeObjectRetain();
        ((void (*)(long long *, void))v22)(&v38, 0);
        *(void *)&unint64_t v38 = v24;
        v33(&v42, &v38);
        swift_bridgeObjectRelease();
        v40[0] = v42;
        v31(&v38, v40);
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_23;
        }
        uint64_t result = (void *)v37;
        if ((v38 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x1CB77D510](v37, v38);
        }
        else
        {
          if ((v37 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          if (v37 >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_22;
          }
          uint64_t v7 = *(void *)(v38 + 8 * v37 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v40[0] = v7;
        v30(&v38, v40);
        swift_release();
        outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v51);
        v40[0] = v38;
        char v25 = v20(v40);
        swift_release();
        swift_release();
        LOBYTE(v7) = 0;
        uint64_t v9 = v29;
        uint64_t v10 = v21;
        uint64_t v4 = v36;
      }
      while ((v25 & 1) == 0);
      *(void *)&unint64_t v38 = v8;
      *((void *)&v38 + 1) = v9;
      uint64_t v39 = v10;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
      MEMORY[0x1CB77D5F0](v40, v12, v11);
      LOBYTE(v7) = v34;
      if (v4 == v40[0]) {
        char v14 = v34;
      }
      else {
        char v14 = 0;
      }
    }
    while ((v14 & 1) == 0);
  }
  return (void *)v4;
}

unint64_t specialized LazyFilterSequence<>.startIndex.getter()
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  void v17[4];
  unint64_t v18;

  long long v1 = v0;
  long long v3 = *v0;
  long long v2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[1];
  v17[3] = v0[2];
  char v18 = v3;
  v17[1] = v3;
  v17[2] = v2;
  char v14 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  unint64_t v5 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  MEMORY[0x1CB77D5E0](v17, v4, v5);
  char v6 = v17[0];
  if (v3 >> 62) {
    goto LABEL_20;
  }
  if (v17[0] != *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      uint64_t v7 = (uint64_t (*)(uint64_t *))v1[3];
      long long v1 = (void *)v1[4];
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v18);
          swift_retain();
          swift_retain();
          uint64_t v9 = MEMORY[0x1CB77D510](v6, v3);
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_18;
          }
          if (v6 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v6 + 32);
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v18);
          swift_retain();
          swift_retain();
          swift_retain();
        }
        char v15 = v9;
        v14(&v16, &v15);
        swift_release();
        outlined release of [LNActionMetadata]((uint64_t)&v18);
        swift_release();
        swift_release();
        char v15 = v16;
        uint64_t v10 = v7(&v15);
        swift_release();
        swift_bridgeObjectRelease();
        if (v10) {
          return v6;
        }
        unint64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          break;
        }
        if (v3 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          outlined release of [LNActionMetadata]((uint64_t)&v18);
        }
        else
        {
          uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v6;
        if (v11 == v8) {
          return v11;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [LNActionMetadata]((uint64_t)&v18);
    }
    while (v6 != v13);
  }
  return v6;
}

void *specialized LazyFilterSequence<>.formIndex(after:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, long long *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *result;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(void *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t (*v31)(void *);
  char v32;
  char v33;
  void (*v35)(long long *__return_ptr, uint64_t *);
  void (*v36)(void *__return_ptr, long long *);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(long long *__return_ptr, void *);
  void (*v40)(long long *__return_ptr, void *);
  uint64_t v41;
  void (*v42)(uint64_t *__return_ptr, long long *);
  uint64_t v43;
  unint64_t v44;
  long long v45;
  uint64_t v46;
  void v47[3];
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  uint64_t v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  uint64_t v60;

  long long v2 = v1[5];
  uint64_t v53 = v1[4];
  char v54 = v2;
  long long v3 = v1[1];
  v50[0] = *v1;
  v50[1] = v3;
  long long v4 = v1[3];
  long long v6 = *v1;
  long long v5 = v1[1];
  uint64_t v51 = v1[2];
  uint64_t v52 = v4;
  uint64_t v56 = v6;
  uint64_t v57 = v5;
  uint64_t v7 = *(void *)a1;
  char v44 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  uint64_t v9 = (void (*)(void *__return_ptr, long long *))*((void *)v1 + 13);
  unint64_t v55 = *((void *)v1 + 12);
  uint64_t v36 = v9;
  uint64_t v35 = (void (*)(long long *__return_ptr, uint64_t *))*((void *)v1 + 15);
  uint64_t v58 = v51;
  uint64_t v59 = v4;
  uint64_t v60 = *((void *)v1 + 8);
  uint64_t v39 = (void (*)(long long *__return_ptr, void *))*((void *)&v53 + 1);
  uint64_t v10 = *((void *)&v6 + 1);
  unint64_t v11 = v6;
  uint64_t v12 = v5;
  uint64_t v41 = v4;
  unint64_t v42 = (void (*)(uint64_t *__return_ptr, long long *))*((void *)&v51 + 1);
  unint64_t v40 = (void (*)(long long *__return_ptr, void *))*((void *)&v4 + 1);
  int v45 = v6;
  int v46 = v5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  char v14 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  uint64_t result = MEMORY[0x1CB77D5F0](v47, v13, v14);
  if (v7 == v47[0] && (v8 & 1) != 0) {
    goto LABEL_28;
  }
  unint64_t v43 = v11;
  unint64_t v38 = v13;
  while (2)
  {
    *(void *)&int v45 = v11;
    *((void *)&v45 + 1) = v10;
    int v46 = v12;
    uint64_t result = MEMORY[0x1CB77D5F0](v47, v13, v14);
    if (v7 == v47[0] && (v8 & 1) != 0)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    while (1)
    {
      uint64_t v7 = specialized FlattenSequence<>._index(after:)(v7, v44, v8 & 1);
      char v44 = v16;
      *(void *)&int v45 = v11;
      char v18 = v17;
      *((void *)&v45 + 1) = v10;
      int v46 = v12;
      MEMORY[0x1CB77D5F0](v47, v13, v14);
      uint64_t v19 = (v7 == v47[0]) & v18;
      if (v19) {
        break;
      }
      unint64_t v20 = v10;
      uint64_t v21 = (uint64_t (*)(void *))*((void *)&v54 + 1);
      uint64_t v22 = v7;
      v47[2] = v12;
      BOOL v48 = v7;
      v47[0] = v11;
      v47[1] = v20;
      uint64_t v23 = v20;
      swift_retain();
      outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v50);
      uint64_t v24 = LazyMapSequence<>.subscript.read(&v45, (uint64_t)&v48, v13);
      unint64_t v26 = *v25;
      swift_bridgeObjectRetain();
      ((void (*)(long long *, void))v24)(&v45, 0);
      *(void *)&int v45 = v26;
      v42(&v49, &v45);
      swift_bridgeObjectRelease();
      v47[0] = v49;
      v40(&v45, v47);
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_26;
      }
      if ((v45 & 0xC000000000000001) != 0)
      {
        unint64_t v27 = MEMORY[0x1CB77D510](v44, v45);
        unint64_t v11 = v43;
      }
      else
      {
        unint64_t v11 = v43;
        if ((v44 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v44 >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_25;
        }
        unint64_t v27 = *(void *)(v45 + 8 * v44 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      v47[0] = v27;
      v39(&v45, v47);
      swift_release();
      outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v50);
      v47[0] = v45;
      unint64_t v28 = v21(v47);
      swift_release();
      swift_release();
      char v8 = 0;
      uint64_t v13 = v38;
      uint64_t v10 = v23;
      uint64_t v7 = v22;
      if (v28)
      {
        uint64_t v29 = 0;
        uint64_t v19 = 0;
        goto LABEL_16;
      }
    }
    uint64_t v29 = 1;
LABEL_16:
    *(void *)&int v45 = v11;
    *((void *)&v45 + 1) = v10;
    int v46 = v12;
    uint64_t result = MEMORY[0x1CB77D5F0](v47, v13, v14);
    if (v7 == v47[0]) {
      unint64_t v30 = v19;
    }
    else {
      unint64_t v30 = 0;
    }
    if (v30)
    {
      uint64_t v19 = 1;
    }
    else
    {
      unint64_t v31 = *(uint64_t (**)(void *))(v37 + 136);
      outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v37);
      swift_retain();
      v47[0] = specialized FlattenSequence<>.subscript.getter(v7, v44, v29, v43, v10, v12, (void (*)(uint64_t *__return_ptr, void *))v42, v41, (void (*)(void *__return_ptr, void *))v40);
      v39(&v45, v47);
      swift_release();
      v36(v47, &v45);
      swift_release();
      char v49 = v47[0];
      v35(&v45, &v49);
      swift_release();
      uint64_t v13 = v38;
      outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v37);
      v47[0] = v45;
      uint64_t v32 = v31(v47);
      unint64_t v11 = v43;
      uint64_t v33 = v32;
      swift_release();
      uint64_t result = (void *)swift_release();
      char v8 = v19;
      if ((v33 & 1) == 0) {
        continue;
      }
    }
    break;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v44;
  *(unsigned char *)(a1 + 16) = v19;
  return result;
}

unint64_t *specialized LazyFilterSequence<>.formIndex(after:)(unint64_t *result)
{
  void (*v14)(void *__return_ptr, void);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(void *__return_ptr, void);
  unint64_t v21;
  unint64_t v22;

  uint64_t v2 = (uint64_t)result;
  unint64_t v3 = *v1;
  unint64_t v4 = v1[2];
  uint64_t v13 = (uint64_t (*)(uint64_t *))v1[3];
  char v14 = (void (*)(void *__return_ptr, void))v1[1];
  uint64_t v22 = v3;
  uint64_t v19 = v3;
  unint64_t v20 = v14;
  uint64_t v21 = v4;
  unint64_t v5 = *result;
  char v18 = *result;
  char v15 = v3 >> 62;
  if (v3 >> 62) {
    goto LABEL_20;
  }
  if (v5 != *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      uint64_t v12 = (void *)v2;
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
      lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
      uint64_t result = (unint64_t *)LazyMapSequence<>.formIndex(after:)();
      unint64_t v6 = v18;
      if (v15)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (unint64_t *)outlined release of [LNActionMetadata]((uint64_t)&v22);
        if (v6 == v7)
        {
LABEL_17:
          *uint64_t v12 = v6;
          return result;
        }
      }
      else if (v18 == *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
      unint64_t v5 = v3 & 0xC000000000000001;
      while (1)
      {
        if (v5)
        {
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v22);
          swift_retain();
          swift_retain();
          uint64_t v8 = MEMORY[0x1CB77D510](v6, v3);
          goto LABEL_14;
        }
        if ((v6 & 0x8000000000000000) != 0) {
          break;
        }
        if (v6 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(v3 + 32 + 8 * v6);
        swift_retain();
        outlined retain of [LNActionMetadata]((uint64_t)&v22);
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_14:
        unint64_t v16 = v8;
        v14(&v17, &v16);
        swift_release();
        outlined release of [LNActionMetadata]((uint64_t)&v22);
        swift_release();
        swift_release();
        unint64_t v16 = v17;
        char v9 = v13(&v16);
        swift_release();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        if (v9) {
          goto LABEL_17;
        }
        uint64_t result = (unint64_t *)LazyMapSequence<>.formIndex(after:)();
        unint64_t v6 = v18;
        if (v15)
        {
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = (unint64_t *)outlined release of [LNActionMetadata]((uint64_t)&v22);
          if (v6 == v10) {
            goto LABEL_17;
          }
        }
        else if (v18 == *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      outlined retain of [LNActionMetadata]((uint64_t)&v22);
      swift_retain();
      swift_retain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [LNActionMetadata]((uint64_t)&v22);
      swift_release();
      uint64_t result = (unint64_t *)swift_release();
    }
    while (v5 != v11);
  }
  __break(1u);
  return result;
}

unint64_t specialized FlattenSequence<>.startIndex.getter()
{
  void (*v2)(uint64_t *__return_ptr, long long *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(long long *__return_ptr, void *);
  void (*v16)(uint64_t *__return_ptr, long long *);
  uint64_t v17;
  long long v18;
  uint64_t v19;
  void v20[3];
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  void v27[2];

  long long v1 = v0[1];
  uint64_t v24 = *v0;
  char v25 = v1;
  uint64_t v2 = (void (*)(uint64_t *__return_ptr, long long *))*((void *)v0 + 5);
  unint64_t v26 = *((void *)v0 + 4);
  char v15 = (void (*)(long long *__return_ptr, void *))*((void *)v0 + 7);
  unint64_t v16 = v2;
  unint64_t v3 = v24;
  unint64_t v4 = v1;
  char v17 = *((void *)&v24 + 1);
  char v18 = v24;
  uint64_t v19 = v1;
  unint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  unint64_t v6 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  MEMORY[0x1CB77D5F0](v20, v5, v6);
  uint64_t v7 = v20[0];
  uint64_t v8 = specialized LazyFilterSequence<>.startIndex.getter();
  uint64_t v23 = v8;
  if (v8 == v7)
  {
LABEL_2:
    *(void *)&char v18 = v3;
    *((void *)&v18 + 1) = v17;
    uint64_t v19 = v4;
    MEMORY[0x1CB77D5F0](v20, v5, v6);
    return v20[0];
  }
  else
  {
    char v9 = v8;
    while (1)
    {
      void v20[2] = v4;
      uint64_t v21 = v9;
      v20[0] = v3;
      v20[1] = v17;
      uint64_t v10 = LazyMapSequence<>.subscript.read(&v18, (uint64_t)&v21, v5);
      uint64_t v12 = *v11;
      swift_bridgeObjectRetain();
      ((void (*)(long long *, void))v10)(&v18, 0);
      *(void *)&char v18 = v12;
      v16(&v22, &v18);
      swift_bridgeObjectRelease();
      v20[0] = v22;
      v15(&v18, v20);
      swift_bridgeObjectRelease();
      if ((unint64_t)v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v13) {
        break;
      }
      v27[0] = v3;
      outlined retain of [LNActionMetadata]((uint64_t)v27);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized LazyFilterSequence<>.formIndex(after:)(&v23);
      outlined release of [LNActionMetadata]((uint64_t)v27);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      char v9 = v23;
      if (v23 == v7) {
        goto LABEL_2;
      }
    }
  }
  return v9;
}

uint64_t specialized FlattenSequence<>._index(after:)(unint64_t a1, uint64_t a2, char a3)
{
  void (*v8)(uint64_t *__return_ptr, unint64_t *);
  void (*v9)(unint64_t *__return_ptr, long long *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *);
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  long long v40;
  long long v41;
  uint64_t v42;

  long long v6 = v3[3];
  uint64_t v37 = v3[2];
  unint64_t v38 = v6;
  uint64_t v39 = *((void *)v3 + 8);
  long long v7 = v3[1];
  uint64_t v35 = *v3;
  uint64_t v36 = v7;
  unint64_t v40 = v35;
  uint64_t v41 = v7;
  unint64_t v42 = *((void *)v3 + 4);
  uint64_t v8 = (void (*)(uint64_t *__return_ptr, unint64_t *))*((void *)&v37 + 1);
  char v9 = (void (*)(unint64_t *__return_ptr, long long *))*((void *)&v6 + 1);
  unint64_t v26 = v35;
  unint64_t v31 = v35;
  uint64_t v23 = *((void *)&v35 + 1);
  uint64_t v10 = v7;
  uint64_t v32 = v7;
  uint64_t v33 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  uint64_t v24 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  char v25 = v11;
  uint64_t v12 = LazyMapSequence<>.subscript.read(&v28, (uint64_t)&v33, v11);
  char v14 = *v13;
  swift_bridgeObjectRetain();
  ((void (*)(unint64_t *, void))v12)(&v28, 0);
  unint64_t v28 = v14;
  v8(&v34, &v28);
  swift_bridgeObjectRelease();
  *(void *)&unint64_t v31 = v34;
  v9(&v28, &v31);
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    __break(1u);
    return result;
  }
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v28 >> 62)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  unint64_t v16 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  char v17 = v10;
  swift_bridgeObjectRelease();
  char v18 = a1;
  if (a2 + 1 == v16)
  {
    *(void *)&unint64_t v31 = v26;
    unint64_t v28 = a1;
    outlined retain of [LNActionMetadata]((uint64_t)&v31);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized LazyFilterSequence<>.formIndex(after:)(&v28);
    outlined release of [LNActionMetadata]((uint64_t)&v31);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    char v18 = v28;
    BOOL v34 = v28;
    unint64_t v28 = v26;
    uint64_t v29 = v23;
    unint64_t v30 = v17;
    MEMORY[0x1CB77D5F0](&v33, v25, v24);
    if (v18 == v33)
    {
LABEL_10:
      unint64_t v28 = v26;
      uint64_t v29 = v23;
      unint64_t v30 = v17;
      MEMORY[0x1CB77D5F0](&v33, v25, v24);
      return v33;
    }
    else
    {
      while (1)
      {
        outlined retain of [LNActionMetadata]((uint64_t)&v31);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>);
        lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>, (void (*)(void))lazy protocol witness table accessor for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>);
        uint64_t v19 = specialized protocol witness for Collection.subscript.read in conformance <> LazyMapSequence<A, B>(&v28, v18);
        uint64_t v21 = *v20;
        swift_bridgeObjectRetain();
        ((void (*)(unint64_t *, void))v19)(&v28, 0);
        outlined release of [LNActionMetadata]((uint64_t)&v31);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (v21 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v22) {
          break;
        }
        outlined retain of [LNActionMetadata]((uint64_t)&v31);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        specialized LazyFilterSequence<>.formIndex(after:)((unint64_t *)&v34);
        outlined release of [LNActionMetadata]((uint64_t)&v31);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        char v18 = v34;
        unint64_t v28 = v26;
        uint64_t v29 = v23;
        unint64_t v30 = v17;
        MEMORY[0x1CB77D5F0](&v33, v25, v24);
        if (v18 == v33) {
          goto LABEL_10;
        }
      }
    }
  }
  return v18;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(void *a1)
{
  return *a1 != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized CallBusinessNoResultsExperiencesResolver.getUsoTask(_:)()
{
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x1CB77D510](0, v1);
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized CallBusinessNoResultsExperiencesResolver.convertToCommonPhoneCallEntity(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)v14);
  if (v15)
  {
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Target<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
LABEL_8:
      swift_release();
      outlined destroy of Any?((uint64_t)v16);
      uint64_t v0 = v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      goto LABEL_16;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      goto LABEL_8;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTarget<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    v12[0] = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v6 = UsoTask.verbString.getter();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v8 = UsoTask.baseEntityAsString.getter();
    uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v2, v3, "Cannot transform UsoTask to task with common_PhoneCall: <UsoTask verbString: %s entityString: %s>", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v5, -1, -1);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of Any?((uint64_t)v16);
  uint64_t v0 = 0;
LABEL_16:
  outlined destroy of Any?((uint64_t)v14);
  return v0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CB77D510](i - 4, a1);
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          swift_retain();
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        uint64_t v6 = specialized CallBusinessNoResultsExperiencesResolver.convertToCommonPhoneCallEntity(task:)();
        uint64_t v7 = swift_release();
        if (v6)
        {
          MEMORY[0x1CB77CD90](v7);
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

unint64_t lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoEntity_common_PhoneCall]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A]);
  }
  return result;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>, String>(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #9 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)()
{
  if (*(void *)(v0 + 24))
  {
    swift_bridgeObjectRetain();
    return Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.setter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams);
  }
  return result;
}

ValueMetadata *type metadata accessor for CallBusinessNoResultsExperiencesResolver()
{
  return &type metadata for CallBusinessNoResultsExperiencesResolver;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>(uint64_t a1)
{
  return a1;
}

uint64_t specialized FlattenSequence<>.subscript.getter(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, void *), uint64_t a8, void (*a9)(void *__return_ptr, void *))
{
  v19[2] = a6;
  uint64_t v20 = a1;
  v19[0] = a4;
  v19[1] = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  uint64_t v13 = LazyMapSequence<>.subscript.read(v18, (uint64_t)&v20, v12);
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  ((void (*)(void *, void))v13)(v18, 0);
  v18[0] = v15;
  a7(&v21, v18);
  swift_bridgeObjectRelease();
  v19[0] = v21;
  a9(v18, v19);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
  {
    if ((v18[0] & 0xC000000000000001) != 0)
    {
      uint64_t v17 = MEMORY[0x1CB77D510](a2, v18[0]);
      goto LABEL_6;
    }
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
    {
      uint64_t v17 = *(void *)(v18[0] + 8 * a2 + 32);
      swift_retain();
LABEL_6:
      swift_bridgeObjectRelease();
      return v17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, (void (*)(void))lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>);
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, (void (*)(void))lazy protocol witness table accessor for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>);
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>, (void (*)(void))lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]);
}

id AudioQueueStateManager.__allocating_init(queueStateObserver:)(uint64_t a1)
{
  os_log_type_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1(a1, v4);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  id v10 = specialized AudioQueueStateManager.init(queueStateObserver:)((uint64_t)v8, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

void SOMediaNowPlayingObserver.register(_:)(uint64_t a1, uint64_t a2)
{
}

void SOMediaNowPlayingObserver.unregister(_:)(uint64_t a1, uint64_t a2)
{
}

void SOMediaNowPlayingObserver.register(_:)(uint64_t a1, uint64_t a2, const char **a3, const char *a4)
{
  if (a1)
  {
    uint64_t v5 = *a3;
    objc_msgSend(v4, v5, a1);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C8F83000, oslog, v8, a4, v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
  }
}

id protocol witness for MediaNowPlayingObserving.playbackState.getter in conformance SOMediaNowPlayingObserver()
{
  return objc_msgSend(*v0, sel_playbackState);
}

void protocol witness for MediaNowPlayingObserving.register(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
}

void protocol witness for MediaNowPlayingObserving.unregister(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
}

void *one-time initialization function for mediaTypeMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType)>);
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType));
  uint64_t v1 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C9198B60;
  uint64_t result = (void *)*MEMORY[0x1E4F773B8];
  if (!*MEMORY[0x1E4F773B8])
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t *)(v3 + v2);
  unint64_t v6 = v3 + v2 + *(int *)(v0 + 48);
  *uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[1] = v7;
  uint64_t v8 = *MEMORY[0x1E4F89760];
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType();
  id v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
  v10(v6, v8, v9);
  uint64_t result = (void *)*MEMORY[0x1E4F773C0];
  if (!*MEMORY[0x1E4F773C0])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = (uint64_t *)((char *)v5 + v1);
  uint64_t v12 = (char *)v5 + v1 + *(int *)(v0 + 48);
  *uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11[1] = v13;
  v10((unint64_t)v12, *MEMORY[0x1E4F89768], v9);
  uint64_t result = (void *)*MEMORY[0x1E4F773A0];
  if (!*MEMORY[0x1E4F773A0])
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  char v14 = (uint64_t *)((char *)v5 + 2 * v1);
  uint64_t v15 = (char *)v14 + *(int *)(v0 + 48);
  uint64_t *v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14[1] = v16;
  v10((unint64_t)v15, *MEMORY[0x1E4F89770], v9);
  uint64_t result = (void *)*MEMORY[0x1E4F773B0];
  if (!*MEMORY[0x1E4F773B0])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v17 = (uint64_t *)((char *)v5 + 3 * v1);
  char v18 = (char *)v17 + *(int *)(v0 + 48);
  *uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17[1] = v19;
  uint64_t v20 = *MEMORY[0x1E4F89758];
  v10((unint64_t)v18, v20, v9);
  uint64_t result = (void *)*MEMORY[0x1E4F773A8];
  if (*MEMORY[0x1E4F773A8])
  {
    uint64_t v21 = (uint64_t *)((char *)v5 + 4 * v1);
    uint64_t v22 = (char *)v21 + *(int *)(v0 + 48);
    *uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21[1] = v23;
    v10((unint64_t)v22, v20, v9);
    uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v3);
    static AudioQueueStateManager.mediaTypeMap = result;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

id AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  id v9 = specialized AudioQueueStateManager.init(queueStateObserver:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

Swift::Void __swiftcall AudioQueueStateManager.registerObserver()()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 24);
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver), v2);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v3 + 32))(v0, &protocol witness table for AudioQueueStateManager, v2, v3);
    *(unsigned char *)(v0 + v1) = 1;
  }
}

Swift::Void __swiftcall AudioQueueStateManager.unregisterObserver()()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered) == 1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 24);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver), v3);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v4 + 40))(v0, &protocol witness table for AudioQueueStateManager, v3, v4);
    *(unsigned char *)(v0 + v1) = 0;
    uint64_t v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache;
    *(void *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 8) = 1;
    uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache);
    *(void *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache) = 0;

    *(void *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 8) = 1;
    uint64_t v7 = (void *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache);
    void *v7 = 0;
    v7[1] = 0;
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall AudioQueueStateManager.wait()()
{
}

uint64_t AudioQueueStateManager.nowPlayingObserver(_:playbackStateDidChangeFrom:to:lastPlaying:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    *((void *)&v13 + 1) = type metadata accessor for SOMediaNowPlayingObserver();
    char v14 = &protocol witness table for SOMediaNowPlayingObserver;
    *(void *)&long long v12 = a1;
  }
  else
  {
    char v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  id v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x130);
  id v10 = a1;
  v9(&v12, a2, a3, a4);
  return outlined destroy of MediaUserStateCenter?((uint64_t)&v12, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
}

id AudioQueueStateManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void AudioQueueStateManager.init()()
{
}

id AudioQueueStateManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MediaNowPlayingListening.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:) in conformance AudioQueueStateManager()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

id specialized AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  uint64_t v8 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup;
  id v9 = a2;
  *(void *)&a2[v8] = dispatch_group_create();
  v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered] = 0;
  uint64_t v10 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  *(void *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E00]), sel_init);
  *(void *)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = 0;
  uint64_t v11 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  long long v12 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
  *(void *)long long v12 = 0;
  *((void *)v12 + 1) = 0;
  outlined init with copy of AppDataProviding((uint64_t)v16, (uint64_t)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver]);

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v13;
}

uint64_t sub_1C9115218()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C9115250()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t sub_1C9115360()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t type metadata accessor for AudioQueueStateManager()
{
  return self;
}

uint64_t dispatch thunk of MediaNowPlayingListening.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.playbackState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.getNowPlayingApplicationBundleIdentifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.unregister(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t method lookup function for AudioQueueStateManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioQueueStateManager);
}

uint64_t dispatch thunk of AudioQueueStateManager.__allocating_init(queueStateObserver:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of AudioQueueStateManager.registerObserver()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AudioQueueStateManager.unregisterObserver()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AudioQueueStateManager.wait()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AudioQueueStateManager.wait(timeout:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))() & 1;
}

uint64_t dispatch thunk of AudioQueueStateManager.nowPlayingObserver(_:playbackStateDidChangeFrom:to:lastPlaying:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AudioQueueStateManager.currentQueueState()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

__n128 DefaultExperiencesResolver.init(sportsPersonalizationResolver:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return result;
}

uint64_t partial apply for closure #2 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized static SportsPersonalizationExperiencesResolver.isSupportedPersonalizationInstruction(_:)(*(void *)(v1 + 16));
  *a1 = result & 1;
  return result;
}

uint64_t closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X1>, uint64_t **a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(a1, (uint64_t)v6);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  *a2 = v8;
  return result;
}

BOOL partial apply for closure #4 in DefaultExperiencesResolver.buildExperiences(from:with:)@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = static SportsPersonalizationExperiencesResolver.hasPersonalizationInstruction(_:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t **a1@<X8>)
{
  return closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)(*(void *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for DefaultExperiencesResolver()
{
  return &type metadata for DefaultExperiencesResolver;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVys10ArraySliceVySSGG_SS6itemId_SSSg5value10PegasusAPI39Apple_Parsec_Siri_V2alpha_AudioItemTypeO0hS0ts5NeverOTg5011_sSiS3SSg10k5API39m1_n1_o1_p1_qrs37OIgygoor_Si6offset_SS7elementtSS6itemi18_AA5valueAD0lI0ts5t192OIegnrzr_TR04_s21e19InformationSearch18gh74CandidateC14auxTitleFields33_39A65E8D769182CAD4F711B84F5C7A7FLL5title8itemi8SaySS0T2m13_SSSg5value10a6API013c1_d4_a9_F40_deU0OAGtGSS_AMtFZSSAH_AijmGtV19_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (void *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v11 = v35;
  int64_t v12 = a4 >> 1;
  v25[1] = a1;
  uint64_t result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease();
    return v11;
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v27 = *MEMORY[0x1E4F88FB8];
    objc_super v15 = (uint64_t *)(a2 + 16 * a3 + 8);
    uint64_t v26 = a3 - v12;
    unint64_t v28 = a4 >> 1;
    uint64_t v29 = a3;
    while (a3 + v14 < v12)
    {
      if (__OFADD__(v14, 1)) {
        goto LABEL_11;
      }
      uint64_t v17 = *(v15 - 1);
      uint64_t v16 = *v15;
      char v18 = (char *)v10 + *(int *)(v31 + 64);
      uint64_t v32 = v14;
      uint64_t v33 = 0x656C746954787561;
      unint64_t v34 = 0xE800000000000000;
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v20 = v33;
      unint64_t v21 = v34;
      uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      (*(void (**)(char *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v18, v27, v22);
      *uint64_t v10 = v20;
      v10[1] = v21;
      v10[2] = v17;
      v10[3] = v16;
      uint64_t v35 = v11;
      unint64_t v24 = *(void *)(v11 + 16);
      unint64_t v23 = *(void *)(v11 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v11 = v35;
      }
      *(void *)(v11 + 16) = v24 + 1;
      uint64_t result = outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v24);
      ++v14;
      v15 += 2;
      int64_t v12 = v28;
      a3 = v29;
      if (!(v26 + v14)) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t AudioItemCandidate.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.title.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.artist.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.itemType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AudioItemCandidate.source.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source);
}

uint64_t AudioItemCandidate.requiresSubscription.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription);
}

uint64_t AudioItemCandidate.isDownloaded.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
}

float AudioItemCandidate.score.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.score.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.score.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

id AudioItemCandidate.features.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void AudioItemCandidate.features.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*AudioItemCandidate.features.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.fields(localizedTokenizer:)(void *a1)
{
  return specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(*(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title), *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8), *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist), *(uint8_t **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8), v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, a1);
}

uint64_t AudioItemCandidate.leetDecodedFields(localizedTokenizer:)(void *a1)
{
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  uint64_t v3 = *(uint8_t **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  if (v3)
  {
    uint64_t v5 = specialized static AudioItemCandidate.leetDecode(leetText:)(*(void *)(v1
                                                                               + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist));
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  }
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8);
  uint64_t v11 = specialized static AudioItemCandidate.leetDecode(leetText:)(v8);
  unint64_t v12 = v10;
  BOOL v13 = v11 == v8 && v10 == v9;
  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v7)
    {
      if (v3)
      {
        BOOL v14 = v5 == v4 && v7 == v3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_19;
        }
      }
    }
    else if (!v3)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v15 = specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(v11, v12, v5, v7, v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t AudioItemCandidate.nonOptionalFieldCount.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F88FA0], v2);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0
    && (unint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8)) != 0
    && ((v7 & 0x2000000000000000) != 0
      ? (uint64_t v8 = HIBYTE(v7) & 0xF)
      : (uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist) & 0xFFFFFFFFFFFFLL),
        v8))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

id AudioItemCandidate.Features.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, uint64_t a12)
{
  char v20 = a2 & 1;
  *(_DWORD *)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score] = 1065353216;
  outlined init with copy of AudioItemCandidate.BackingItem(a1, (uint64_t)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem]);
  unint64_t v21 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier];
  *unint64_t v21 = a3;
  v21[1] = a4;
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source] = v20;
  uint64_t v22 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title];
  void *v22 = a5;
  v22[1] = a6;
  unint64_t v23 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist];
  *unint64_t v23 = a7;
  v23[1] = a8;
  unint64_t v24 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType];
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, a9, v25);
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription] = a10;
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded] = a11;
  *(void *)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features] = a12;
  v29.receiver = v12;
  v29.super_class = (Class)type metadata accessor for AudioItemCandidate(0);
  id v27 = objc_msgSendSuper2(&v29, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a9, v25);
  outlined destroy of AudioItemCandidate.BackingItem(a1);
  return v27;
}

id AudioItemCandidate.__allocating_init(serverResult:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
  uint64_t v24 = v11;
  uint64_t v25 = v10;
  uint64_t v23 = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
  uint64_t v13 = v12;
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
  uint64_t v16 = v15;
  Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
  char v17 = Apple_Parsec_Siri_V2alpha_AudioItem.requiresSubscription.getter();
  id v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features()), sel_init);
  id v19 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate(0));
  id v20 = AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)((uint64_t)v7, 0, v25, v24, v23, v13, v14, v16, (uint64_t)v4, v17 & 1, 0, (uint64_t)v18);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v20;
}

uint64_t AudioItemCandidate.deduplicationKey.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned long long v6 = (unsigned __int128)String.lowercased()();
  if (*(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8))
  {
    Swift::String v7 = String.lowercased()();
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
  }
  else
  {
    uint64_t countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  unsigned long long v19 = v6;
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v13 = (Swift::String)v19;
  uint64_t v12 = v13._object;
  uint64_t v11 = v13._countAndFlagsBits;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v2);
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v16 = v15;
  unsigned long long v19 = __PAIR128__((unint64_t)v12, v11);
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t AudioItemCandidate.toAudioResult()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unsigned long long v6 = (void **)&v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (void **)&v19[-v7];
  uint64_t v9 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (void **)&v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of AudioItemCandidate.BackingItem(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem, (uint64_t)v11);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    Swift::String v13 = *v11;
    MEMORY[0x1F4188790](EnumCaseMultiPayload);
    *(void *)&v19[-16] = v1;
    *(void *)&v19[-8] = v13;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem, MEMORY[0x1E4F88BE0]);
    static Message.with(_:)();

    uint64_t v14 = *(void (**)(void **, void **, uint64_t))(v3 + 32);
    v14(v6, v8, v2);
    char v15 = *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
    type metadata accessor for AudioResult();
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 2;
    *(void *)(v16 + 24) = 0;
    *(unsigned char *)(v16 + 32) = 0;
    v14((void **)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem), v6, v2);
    *(unsigned char *)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = v15;
  }
  else
  {
    Swift::String v17 = *(void (**)(void **, void **, uint64_t))(v3 + 32);
    v17(v8, v11, v2);
    type metadata accessor for AudioResult();
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 1;
    *(void *)(v16 + 24) = 0;
    *(unsigned char *)(v16 + 32) = 0;
    v17((void **)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem), v8, v2);
    *(unsigned char *)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  }
  return v16;
}

uint64_t closure #1 in AudioItemCandidate.toAudioResult()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.identifier.setter();
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v3);
  Apple_Parsec_Siri_V2alpha_AudioItem.type.setter();
  uint64_t v7 = (void *)ClientAudioResult.vocabularyResult.getter();
  VocabularyResult.userId.getter();

  return Apple_Parsec_Siri_V2alpha_AudioItem.sharedUserIDFromPlayableMusicAccount.setter();
}

float AudioItemCandidate.Features.audioTypeMatch.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.audioTypeMatch.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.audioTypeMatch.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.glideModifier.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.glideModifier.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.glideModifier.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.sourceMatchFactor.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.sourceMatchFactor.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.sourceMatchFactor.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.fieldMatchScores.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioItemCandidate.Features.fieldMatchScores.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_fieldMatchScores);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioItemCandidate.Features.fieldMatchScores.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.maxFieldCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t AudioItemCandidate.Features.maxFieldCount.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.maxFieldCount.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.optionalFieldCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t AudioItemCandidate.Features.optionalFieldCount.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.optionalFieldCount.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.combinedTextMatchScore.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.combinedTextMatchScore.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.combinedTextMatchScore.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.sourceTypePriority.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.sourceTypePriority.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.sourceTypePriority.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.downloadedBoostFactor.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.downloadedBoostFactor.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.downloadedBoostFactor.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.description.getter()
{
  _StringGuts.grow(_:)(223);
  v1._object = (void *)0x80000001C91A24E0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v1);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
  Float.write<A>(to:)();
  v3._uint64_t countAndFlagsBits = 0xD000000000000014;
  v3._object = (void *)0x80000001C91A2500;
  String.append(_:)(v3);
  (*(void (**)(void))((*v2 & *v0) + 0xB0))();
  Float.write<A>(to:)();
  v4._object = (void *)0x80000001C91A2520;
  v4._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  (*(void (**)(void))((*v2 & *v0) + 0xC8))();
  Float.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001C91A2540;
  String.append(_:)(v5);
  uint64_t v6 = (*(uint64_t (**)(void))((*v2 & *v0) + 0xE0))();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (textMatchScore: Float, itemTypeMatchScore: Float));
  v8._uint64_t countAndFlagsBits = MEMORY[0x1CB77CDC0](v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000016;
  v9._object = (void *)0x80000001C91A2560;
  String.append(_:)(v9);
  (*(void (**)(void))((*v2 & *v0) + 0xF8))();
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x3D74706F202CLL;
  v11._object = (void *)0xE600000000000000;
  String.append(_:)(v11);
  (*(void (**)(void))((*v2 & *v0) + 0x110))();
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x80000001C91A2580;
  String.append(_:)(v13);
  (*(void (**)(void))((*v2 & *v0) + 0x128))();
  Float.write<A>(to:)();
  v14._uint64_t countAndFlagsBits = 0xD000000000000019;
  v14._object = (void *)0x80000001C91A25A0;
  String.append(_:)(v14);
  (*(void (**)(void))((*v2 & *v0) + 0x140))();
  Float.write<A>(to:)();
  v15._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v15._object = (void *)0x80000001C91A25C0;
  String.append(_:)(v15);
  (*(void (**)(void))((*v2 & *v0) + 0x158))();
  Float.write<A>(to:)();
  v16._uint64_t countAndFlagsBits = 2099257354;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  return 0;
}

id AudioItemCandidate.Features.init()()
{
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_fieldMatchScores] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount] = 0;
  *(void *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioItemCandidate.Features();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AudioItemCandidate.Features.__deallocating_deinit(uint64_t a1)
{
  return AudioItemCandidate.Features.__deallocating_deinit(a1, type metadata accessor for AudioItemCandidate.Features);
}

SiriInformationSearch::AudioItemCandidate::Source_optional __swiftcall AudioItemCandidate.Source.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AudioItemCandidate.Source.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriInformationSearch_AudioItemCandidate_Source_client;
  }
  else {
    v4.value = SiriInformationSearch_AudioItemCandidate_Source_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t AudioItemCandidate.Source.rawValue.getter(char a1)
{
  if (a1) {
    return 0x746E65696C63;
  }
  else {
    return 0x726576726573;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioItemCandidate.Source(unsigned char *a1, unsigned char *a2)
{
  if (*a1) {
    uint64_t v2 = 0x746E65696C63;
  }
  else {
    uint64_t v2 = 0x726576726573;
  }
  if (*a2) {
    uint64_t v3 = 0x746E65696C63;
  }
  else {
    uint64_t v3 = 0x726576726573;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioItemCandidate.Source()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioItemCandidate.Source()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioItemCandidate.Source()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioItemCandidate.Source@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AudioItemCandidate.Source.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioItemCandidate.Source(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x726576726573;
  if (*v1) {
    uint64_t v2 = 0x746E65696C63;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

id @objc AudioItemCandidate.Features.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  Swift::String v8 = (void *)MEMORY[0x1CB77CA90](v5, v7);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t AudioItemCandidate.description.getter()
{
  _StringGuts.grow(_:)(43);
  v1._uint64_t countAndFlagsBits = 0x74616469646E6163;
  v1._object = (void *)0xED0000207B203A65;
  String.append(_:)(v1);
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  v3._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x65726F637320200ALL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  (*(void (**)(void))((*v2 & *v0) + 0xA0))();
  Float.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0x757461656620200ALL;
  v5._object = (void *)0xEC0000003A736572;
  String.append(_:)(v5);
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*v2 & *v0) + 0xB8))();
  id v7 = objc_msgSend(v6, sel_description);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 32010;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t AudioItemCandidate.summary.getter()
{
  Swift::String v1 = v0;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  Swift::String v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x656C74697420200ALL;
  v5._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  id v7 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x7473697472612022;
  v9._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  if (v10) {
    uint64_t v11 = *(void *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    Swift::String v12 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  }
  else {
    Swift::String v12 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x6570797420200A22;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  _print_unlocked<A, B>(_:_:)();
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v15._object = (void *)0x80000001C91A25E0;
  String.append(_:)(v15);
  v28._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x6372756F7320200ALL;
  v17._object = (void *)0xEC000000203A2065;
  String.append(_:)(v17);
  char v18 = *((unsigned char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source);
  if (v18) {
    uint64_t v19 = 0x746E65696C63;
  }
  else {
    uint64_t v19 = 0x726576726573;
  }
  unint64_t v20 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  if (v18)
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 0xD000000000000010;
      v28._object = (void *)0x80000001C91A2600;
      BOOL v22 = *((unsigned char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded) == 0;
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  int v23 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription);
  strcpy((char *)&v28, "\n  subReq'd : ");
  HIBYTE(v28._object) = -18;
  BOOL v22 = v23 == 0;
LABEL_15:
  if (v22) {
    uint64_t v24 = 0x65736C6166;
  }
  else {
    uint64_t v24 = 1702195828;
  }
  if (v22) {
    unint64_t v25 = 0xE500000000000000;
  }
  else {
    unint64_t v25 = 0xE400000000000000;
  }
  unint64_t v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v21 = a11;
  unint64_t v20 = a12;
  BOOL v22 = (uint64_t *)(a15 + 16);
  uint64_t v23 = String.UTF16View.index(_:offsetBy:)();
  if ((a10 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v24 = *(void *)(a13 + 16);
    uint64_t v25 = a5;
    if (!a5)
    {
      swift_bridgeObjectRetain();
      a4 = a2;
      uint64_t v25 = a3;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v26 = specialized Set.contains(_:)(a4, v25, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_beginAccess();
      unint64_t v27 = *(void *)(a14 + 16);
      swift_beginAccess();
      Swift::String v28 = (void *)*v22;
      if ((unint64_t)*v22 >> 14 >= v27 >> 14)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = MEMORY[0x1CB77CCC0](v27, v28, a11, a12);
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        uint64_t v35 = v34;
        swift_bridgeObjectRelease();
        uint64_t v36 = MEMORY[0x1CB77CD00](v29, v31, v33, v35);
        if (v37)
        {
          uint64_t v50 = v36;
          uint64_t v51 = v37;
          uint64_t v38 = type metadata accessor for CharacterSet();
          uint64_t v39 = *(void *)(v38 - 8);
          MEMORY[0x1F4188790](v38);
          uint64_t v41 = &v49[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
          static CharacterSet.whitespacesAndNewlines.getter();
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v21 = StringProtocol.trimmingCharacters(in:)();
          unint64_t v20 = v42;
          (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v41, v38);
          swift_bridgeObjectRelease();
          uint64_t v43 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v43 = v21 & 0xFFFFFFFFFFFFLL;
          }
          if (v43)
          {
            unint64_t v27 = a16 + 16;
            swift_beginAccess();
            Swift::String v28 = *(void **)(a16 + 16);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(a16 + 16) = v28;
            if (isUniquelyReferenced_nonNull_native)
            {
LABEL_11:
              unint64_t v46 = v28[2];
              unint64_t v45 = v28[3];
              if (v46 >= v45 >> 1)
              {
                Swift::String v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v28);
                *(void *)unint64_t v27 = v28;
              }
              v28[2] = v46 + 1;
              unint64_t v47 = &v28[2 * v46];
              v47[4] = v21;
              v47[5] = v20;
              swift_endAccess();
              goto LABEL_15;
            }
LABEL_18:
            Swift::String v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
            *(void *)unint64_t v27 = v28;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
        }
LABEL_15:
        swift_beginAccess();
        *(void *)(a14 + 16) = v23;
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_18;
    }
  }
LABEL_16:
  uint64_t result = swift_beginAccess();
  uint64_t *v22 = v23;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UInt32, @guaranteed String, @guaranteed String?, @guaranteed [String]?, @unowned UInt32, @unowned UInt32, @unowned Bool, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, char a8, char a9)
{
  Swift::String v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16))(a1 + 32);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (a4)
  {
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a4 = v18;
    if (!a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v17 = 0;
  if (a5) {
LABEL_3:
  }
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  swift_retain();
  HIBYTE(v20) = a9;
  LOBYTE(v20) = a8;
  v13(a2, v14, v16, v17, a4, a5, a6, a7, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void AudioItemCandidate.init()()
{
}

id AudioItemCandidate.__deallocating_deinit()
{
  return AudioItemCandidate.Features.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for AudioItemCandidate);
}

id AudioItemCandidate.Features.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    Swift::String v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  Swift::String v13 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    Swift::String v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  Swift::String v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      Swift::String v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    void v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioItemCandidate.BackingItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void **)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem));
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  unint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (void **)&v17[*(int *)(v15 + 56)];
  outlined init with copy of AudioItemCandidate.BackingItem(a1, (uint64_t)v17);
  outlined init with copy of AudioItemCandidate.BackingItem(a2, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AudioItemCandidate.BackingItem((uint64_t)v17, (uint64_t)v11);
    char v19 = *v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = *v18;
      type metadata accessor for NSObject();
      char v21 = static NSObject.== infix(_:_:)();

LABEL_9:
      outlined destroy of AudioItemCandidate.BackingItem((uint64_t)v17);
      return v21 & 1;
    }
  }
  else
  {
    outlined init with copy of AudioItemCandidate.BackingItem((uint64_t)v17, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v18, v4);
      char v21 = static Apple_Parsec_Siri_V2alpha_AudioItem.== infix(_:_:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      v22(v13, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
  outlined destroy of (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem)((uint64_t)v17);
  char v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(void *a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v61 = a2;
  uint64_t v5 = swift_allocObject();
  uint64_t v64 = v5;
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v63 = (void *)(v5 + 16);
  uint64_t v6 = swift_allocObject();
  id v7 = objc_msgSend(a1, sel_locale);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = Locale.languageCode.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  v14((char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v62 = v6;
  if (v13)
  {
    BOOL v15 = v11 == 28261 && v13 == 0xE200000000000000;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &outlined read-only object #0 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
LABEL_14:
      Swift::Int v18 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v16);
      swift_arrayDestroy();
      *(void *)(v6 + 16) = v18;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = 15;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = 15;
      unint64_t v21 = v20 + 16;
      uint64_t v22 = v61;
      uint64_t v23 = (void *)MEMORY[0x1CB77CA90](v61, a3);
      uint64_t v24 = (void *)swift_allocObject();
      v24[2] = v22;
      v24[3] = a3;
      v24[4] = v6;
      v24[5] = v19;
      uint64_t v25 = v64;
      v24[6] = v20;
      v24[7] = v25;
      uint64_t v70 = partial apply for closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      uint64_t v71 = v24;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v67 = 1107296256;
      uint64_t v68 = thunk for @escaping @callee_guaranteed (@unowned UInt32, @guaranteed String, @guaranteed String?, @guaranteed [String]?, @unowned UInt32, @unowned UInt32, @unowned Bool, @unowned Bool) -> ();
      id v69 = &block_descriptor_18;
      unint64_t v26 = _Block_copy(&aBlock);
      uint64_t v60 = a3;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      objc_msgSend(a1, sel_enumerateTokensOfText_usingBlock_, v23, v26);
      _Block_release(v26);

      swift_beginAccess();
      unint64_t v27 = *(void *)(v19 + 16);
      Swift::String v28 = v63;
      if (v27 < 0x4000) {
        goto LABEL_26;
      }
      swift_beginAccess();
      if (!*(void *)(*v28 + 16)) {
        goto LABEL_26;
      }
      swift_beginAccess();
      if (v27 >> 14 > *(void *)v21 >> 14)
      {
        __break(1u);
      }
      else
      {
        uint64_t aBlock = String.subscript.getter();
        uint64_t v67 = v29;
        uint64_t v68 = v30;
        id v69 = v31;
        uint64_t v32 = type metadata accessor for CharacterSet();
        uint64_t v33 = *(void *)(v32 - 8);
        MEMORY[0x1F4188790](v32);
        uint64_t v35 = (char *)v59 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
        static CharacterSet.whitespacesAndNewlines.getter();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        unint64_t v27 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v21 = (unint64_t)v36;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
        swift_bridgeObjectRelease();
        uint64_t v37 = HIBYTE(v21) & 0xF;
        if ((v21 & 0x2000000000000000) == 0) {
          uint64_t v37 = v27 & 0xFFFFFFFFFFFFLL;
        }
        if (!v37)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v64;
LABEL_26:
          swift_beginAccess();
          uint64_t v42 = *(void *)(v25 + 16);
          swift_bridgeObjectRetain();
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_52;
        }
        swift_beginAccess();
        unint64_t v26 = (void *)*v28;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *Swift::String v28 = v26;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_21:
          unint64_t v40 = v26[2];
          unint64_t v39 = v26[3];
          if (v40 >= v39 >> 1)
          {
            unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v26);
            *Swift::String v28 = v26;
          }
          v26[2] = v40 + 1;
          uint64_t v41 = &v26[2 * v40];
          id v41[4] = v27;
          v41[5] = v21;
          swift_endAccess();
          goto LABEL_25;
        }
      }
      unint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      *Swift::String v28 = v26;
      goto LABEL_21;
    }
    BOOL v17 = v11 == 29541 && v13 == 0xE200000000000000;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &outlined read-only object #1 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    BOOL v43 = v11 == 24938 && v13 == 0xE200000000000000;
    if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &outlined read-only object #2 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v11 == 26746 && v13 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &outlined read-only object #3 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v11 == 25956 && v13 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &outlined read-only object #4 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v11 == 29286 && v13 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_45:
      uint64_t v16 = &outlined read-only object #5 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_45;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
  id v46 = a1;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    char v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v61 = v50;
    v59[1] = v59;
    uint64_t aBlock = v50;
    *(_DWORD *)char v49 = 136315138;
    v59[2] = v49 + 4;
    uint64_t v60 = v49;
    MEMORY[0x1F4188790](v50);
    uint64_t v51 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v52 = objc_msgSend(v46, sel_locale);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v55 = v54;
    v14(v51, v8);
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v56 = v60;
    _os_log_impl(&dword_1C8F83000, v47, v48, "Unable to extract language code for locale %s", v60, 0xCu);
    uint64_t v57 = v61;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v57, -1, -1);
    MEMORY[0x1CB77E470](v56, -1, -1);
  }
  else
  {
  }
  uint64_t v42 = *v63;
  swift_deallocUninitializedObject();
  swift_bridgeObjectRetain();
LABEL_52:
  swift_release();
  return v42;
}

unint64_t specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(uint64_t a1, uint8_t *a2, void *a3)
{
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  uint64_t v6 = *(void *)(v26 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v26);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (uint64_t *)((char *)&v23 - v10);
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = specialized static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(a3, a1, a2);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unsigned int v25 = *MEMORY[0x1E4F88FA0];
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v24 = *(void (**)(char *, void, uint64_t))(*(void *)(v14 - 8) + 104);
  swift_bridgeObjectRetain();
  uint64_t v23 = v12;
  BOOL v15 = (uint64_t *)(v12 + 40);
  unint64_t v16 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v17 = *(v15 - 1);
    uint64_t v18 = *v15;
    uint64_t v19 = (char *)v11 + *(int *)(v26 + 64);
    *uint64_t v11 = 0x747369747261;
    v11[1] = 0xE600000000000000;
    _OWORD v11[2] = v17;
    v11[3] = v18;
    v24(v19, v25, v14);
    outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v11, (uint64_t)v9);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
    }
    unint64_t v21 = *(void *)(v16 + 16);
    unint64_t v20 = *(void *)(v16 + 24);
    if (v21 >= v20 >> 1) {
      unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v16);
    }
    v15 += 2;
    *(void *)(v16 + 16) = v21 + 1;
    outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v9, v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v21);
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease_n();
  return v16;
}

uint64_t specialized static AudioItemCandidate.processSubrange(openChars:field:partitions:firstOffset:lastOffset:parenStack:)(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void **)a7;
  uint64_t v8 = *(void *)(*(void *)a7 + 16);
  if (v8 && (specialized Sequence<>.contains(_:)(v7[3 * v8 + 2], v7[3 * v8 + 3], a1) & 1) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v15 = v7[2];
      if (v15) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      uint64_t v15 = v7[2];
      if (v15)
      {
LABEL_5:
        _OWORD v7[2] = v15 - 1;
        swift_bridgeObjectRelease();
        *(void *)a7 = v7;
        if (v7[2]) {
          return 1;
        }
        uint64_t v16 = String.index(_:offsetBy:)();
        if (!__OFADD__(a6, 1))
        {
          a5 = v16;
          unint64_t v17 = String.index(_:offsetBy:)();
          a6 = v17;
          uint64_t v18 = HIBYTE(a3) & 0xF;
          if ((a3 & 0x2000000000000000) == 0) {
            uint64_t v18 = a2 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v19 = 4 * v18;
          unint64_t v20 = v17 >> 14;
          if (v17 >> 14 != 4 * v18)
          {
            String.subscript.getter();
            char v21 = Character.isWhitespace.getter();
            swift_bridgeObjectRelease();
            if (v21)
            {
              while (1)
              {
                a6 = String.index(_:offsetBy:)();
                unint64_t v20 = a6 >> 14;
                if (a6 >> 14 == v19) {
                  break;
                }
                String.subscript.getter();
                char v22 = Character.isWhitespace.getter();
                swift_bridgeObjectRelease();
                if ((v22 & 1) == 0) {
                  goto LABEL_13;
                }
              }
            }
            else
            {
LABEL_13:
              unint64_t v19 = v20;
            }
          }
          if (v19 >= a5 >> 14)
          {
            a3 = *a4;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_16:
              unint64_t v24 = *(void *)(a3 + 16);
              unint64_t v23 = *(void *)(a3 + 24);
              if (v24 >= v23 >> 1) {
                a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, (void *)a3);
              }
              *(void *)(a3 + 16) = v24 + 1;
              unsigned int v25 = (void *)(a3 + 16 * v24);
              void v25[4] = a5;
              v25[5] = a6;
              *a4 = a3;
              return 1;
            }
LABEL_25:
            a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a3 + 16) + 1, 1, (void *)a3);
            goto LABEL_16;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5087_s21SiriInformationSearch18AudioItemCandidateC13splitOnParens5fieldSaySSGSS_tFZSSSnySS5D8VGXEfU0_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[2] = a2;
  v24[3] = a3;
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v29;
    uint64_t v6 = a1 + 40;
    do
    {
      uint64_t v25 = String.subscript.getter();
      uint64_t v26 = v7;
      uint64_t v27 = v8;
      uint64_t v28 = v9;
      uint64_t v10 = type metadata accessor for CharacterSet();
      uint64_t v11 = *(void *)(v10 - 8);
      MEMORY[0x1F4188790](v10);
      uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v14 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_bridgeObjectRelease();
      uint64_t v25 = v14;
      uint64_t v26 = v16;
      uint64_t v17 = String.init<A>(_:)();
      uint64_t v19 = v18;
      uint64_t v29 = v4;
      unint64_t v21 = *(void *)(v4 + 16);
      unint64_t v20 = *(void *)(v4 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v4 = v29;
      }
      v6 += 16;
      *(void *)(v4 + 16) = v21 + 1;
      uint64_t v22 = v4 + 16 * v21;
      *(void *)(v22 + 32) = v17;
      *(void *)(v22 + 40) = v19;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t specialized static AudioItemCandidate.splitOnParens(field:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v78 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v79 = MEMORY[0x1E4FBC860];
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v69 = a1;
  unint64_t v70 = a2;
  *(void *)&long long v75 = a1;
  *((void *)&v75 + 1) = a2;
  uint64_t v76 = 0;
  uint64_t v77 = v3;
  swift_bridgeObjectRetain();
  Swift::String_optional v4 = String.Iterator.next()();
  if (v4.value._object)
  {
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
    unint64_t v7 = 0;
    while (1)
    {
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_116:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_99:
        swift_bridgeObjectRelease();
        return MEMORY[0x1E4FBC860];
      }
      if (countAndFlagsBits == 40 && object == (void *)0xE100000000000000) {
        goto LABEL_45;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v9 = countAndFlagsBits == 91 && object == (void *)0xE100000000000000;
      BOOL v10 = v9;
      if ((v8 & 1) != 0 || v10) {
        goto LABEL_45;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v12 = countAndFlagsBits == 123 && object == (void *)0xE100000000000000;
      BOOL v13 = v12;
      if ((v11 & 1) != 0
        || v13
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || countAndFlagsBits == 8961263 && object == (void *)0xA300000000000000
        || ((char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 12303599)
          ? (BOOL v15 = object == (void *)0xA300000000000000)
          : (BOOL v15 = 0),
            !v15 ? (char v16 = 0) : (char v16 = 1),
            (v14 & 1) != 0
         || (v16 & 1) != 0
         || ((char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 9470179)
           ? (BOOL v18 = object == (void *)0xA300000000000000)
           : (BOOL v18 = 0),
             !v18 ? (char v19 = 0) : (char v19 = 1),
             (v17 & 1) != 0 || (v19 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
      {
LABEL_45:
        unint64_t v20 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1) {
          unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
        }
        void v20[2] = v22 + 1;
        unint64_t v23 = &v20[3 * v22];
        v23[4] = v7;
        v23[5] = countAndFlagsBits;
        v23[6] = object;
        uint64_t v78 = v20;
        goto LABEL_50;
      }
      if (countAndFlagsBits == 41 && object == (void *)0xE100000000000000
        || ((char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 9026799)
          ? (BOOL v26 = object == (void *)0xA300000000000000)
          : (BOOL v26 = 0),
            !v26 ? (char v27 = 0) : (char v27 = 1),
            (v25 & 1) != 0 || (v27 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v28 = v78[2];
        if (!v28) {
          goto LABEL_116;
        }
        unint64_t v29 = v78[3 * v28 + 1];
        swift_bridgeObjectRetain();
        uint64_t v30 = &outlined read-only object #0 of static AudioItemCandidate.splitOnParens(field:);
      }
      else if (countAndFlagsBits == 9535715 && object == (void *)0xA300000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = v78[2];
        if (!v32) {
          goto LABEL_116;
        }
        unint64_t v29 = v78[3 * v32 + 1];
        swift_bridgeObjectRetain();
        uint64_t v30 = &outlined read-only object #1 of static AudioItemCandidate.splitOnParens(field:);
      }
      else if (countAndFlagsBits == 93 && object == (void *)0xE100000000000000 {
             || ((char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 12434671)
      }
               ? (BOOL v34 = object == (void *)0xA300000000000000)
               : (BOOL v34 = 0),
                 !v34 ? (char v35 = 0) : (char v35 = 1),
                 (v33 & 1) != 0 || (v35 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v78[2];
        if (!v36) {
          goto LABEL_116;
        }
        unint64_t v29 = v78[3 * v36 + 1];
        swift_bridgeObjectRetain();
        uint64_t v30 = &outlined read-only object #2 of static AudioItemCandidate.splitOnParens(field:);
      }
      else
      {
        if (countAndFlagsBits == 125 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v37 & 1) == 0) {
            goto LABEL_50;
          }
        }
        uint64_t v38 = v78[2];
        if (!v38) {
          goto LABEL_116;
        }
        unint64_t v29 = v78[3 * v38 + 1];
        swift_bridgeObjectRetain();
        uint64_t v30 = &outlined read-only object #3 of static AudioItemCandidate.splitOnParens(field:);
      }
      char v31 = specialized static AudioItemCandidate.processSubrange(openChars:field:partitions:firstOffset:lastOffset:parenStack:)(v30, v69, v70, &v79, v29, v7, (uint64_t)&v78);
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      if ((v31 & 1) == 0) {
        goto LABEL_116;
      }
LABEL_50:
      Swift::String_optional v24 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v24.value._countAndFlagsBits;
      object = v24.value._object;
      ++v7;
      if (!v24.value._object)
      {
        unint64_t v39 = v79;
        goto LABEL_92;
      }
    }
  }
  unint64_t v39 = v2;
LABEL_92:
  swift_bridgeObjectRelease();
  unint64_t v40 = *(uint64_t **)(v39 + 16);
  if (!v40 || *(void *)(v39 + 32) >= 0x4000uLL && *(void *)(v39 + 32 + 16 * (void)v40 - 8) >> 14 != 4 * v3)
  {
LABEL_98:
    swift_bridgeObjectRelease();
    goto LABEL_99;
  }
  uint64_t v41 = 40;
  uint64_t v42 = *(void *)(v39 + 16);
  while (--v42)
  {
    BOOL v43 = (void *)(v39 + v41);
    v41 += 16;
    if ((v43[1] ^ *v43) >= 0x4000) {
      goto LABEL_98;
    }
  }
  uint64_t v73 = v69;
  unint64_t v74 = v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = v39 + 16 * (void)v40 + 24;
  id v46 = (char *)v40 - 1;
  do
  {
    if ((uint64_t)v46 >= *(void *)(v39 + 16))
    {
      __break(1u);
LABEL_112:
      swift_bridgeObjectRelease();
      goto LABEL_114;
    }
    unint64_t v40 = &v73;
    String.removeSubrange(_:)();
    v45 -= 16;
    --v46;
  }
  while (v46 != (char *)-1);
  uint64_t v47 = swift_bridgeObjectRelease();
  uint64_t v48 = v73;
  unint64_t v49 = v74;
  *(void *)&long long v75 = 58;
  *((void *)&v75 + 1) = 0xE100000000000000;
  MEMORY[0x1F4188790](v47);
  v67[2] = &v75;
  swift_bridgeObjectRetain_n();
  uint64_t v50 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v67, v48, v49);
  swift_bridgeObjectRelease();
  int64_t v51 = *(void *)(v50 + 16);
  if (v51)
  {
    v68[1] = 0;
    unint64_t v72 = (uint64_t *)v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51, 0);
    uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for CharacterSet();
    uint64_t v71 = isUniquelyReferenced_nonNull_native;
    uint64_t v53 = *(void *)(*(void *)(isUniquelyReferenced_nonNull_native - 8) + 64);
    unint64_t v54 = (void (**)(char *, uint64_t))(*(void *)(isUniquelyReferenced_nonNull_native - 8) + 8);
    v68[0] = v50;
    unint64_t v55 = (uint64_t *)(v50 + 56);
    do
    {
      uint64_t v56 = *(v55 - 1);
      uint64_t v57 = *v55;
      long long v75 = *(_OWORD *)(v55 - 3);
      uint64_t v76 = v56;
      uint64_t v77 = v57;
      MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v58 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v60 = v59;
      (*v54)((char *)v68 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), v71);
      swift_bridgeObjectRelease();
      unint64_t v40 = v72;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1);
        unint64_t v40 = v72;
      }
      unint64_t v62 = v40[2];
      unint64_t v61 = v40[3];
      if (v62 >= v61 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
        unint64_t v40 = v72;
      }
      v40[2] = v62 + 1;
      uint64_t v63 = &v40[2 * v62];
      v63[4] = v58;
      v63[5] = v60;
      v55 += 4;
      --v51;
    }
    while (v51);
    goto LABEL_112;
  }
  swift_bridgeObjectRelease();
  unint64_t v40 = (uint64_t *)MEMORY[0x1E4FBC860];
LABEL_114:
  uint64_t v64 = v70;
  swift_bridgeObjectRetain();
  uint64_t v65 = swift_bridgeObjectRetain();
  uint64_t v66 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5087_s21SiriInformationSearch18AudioItemCandidateC13splitOnParens5fieldSaySSGSS_tFZSSSnySS5D8VGXEfU0_SSTf1cn_nTf4ng_n(v65, v69, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v75 = v40;
  specialized Array.append<A>(contentsOf:)(v66);
  swift_bridgeObjectRelease();
  return v75;
}

uint64_t specialized static AudioItemCandidate.auxTitleFields(title:itemType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::String_optional v4 = (void *)specialized static AudioItemCandidate.splitOnParens(field:)(a1, a2);
  uint64_t v5 = (uint64_t)v4;
  unint64_t v6 = v4[2];
  if (v6)
  {
    uint64_t v8 = v4[4];
    uint64_t v7 = v4[5];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    BOOL v9 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType))
               - 8);
    unint64_t v10 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1C91947A0;
    BOOL v12 = (void *)(v11 + v10);
    unint64_t v13 = v11 + v10 + v9[18];
    *BOOL v12 = 0x656C746974;
    v12[1] = 0xE500000000000000;
    v12[2] = v8;
    v12[3] = v7;
    uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a3, v14);
    if (*(void *)(v5 + 16) < v6)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVys10ArraySliceVySSGG_SS6itemId_SSSg5value10PegasusAPI39Apple_Parsec_Siri_V2alpha_AudioItemTypeO0hS0ts5NeverOTg5011_sSiS3SSg10k5API39m1_n1_o1_p1_qrs37OIgygoor_Si6offset_SS7elementtSS6itemi18_AA5valueAD0lI0ts5t192OIegnrzr_TR04_s21e19InformationSearch18gh74CandidateC14auxTitleFields33_39A65E8D769182CAD4F711B84F5C7A7FLL5title8itemi8SaySS0T2m13_SSSg5value10a6API013c1_d4_a9_F40_deU0OAGtGSS_AMtFZSSAH_AijmGtV19_SStXEfU_Tf3nnnpf_nTf1cn_n(v5, v5 + 32, 1, (2 * v6) | 1);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v16);
      return v11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(uint64_t a1, unint64_t a2, uint64_t a3, uint8_t *a4, uint64_t a5, void *a6)
{
  unint64_t v56 = a2;
  uint64_t v57 = a1;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14(v13, a5, v10);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  BOOL v16 = v15 == *MEMORY[0x1E4F88F78] || v15 == *MEMORY[0x1E4F88F80];
  uint64_t v60 = a4;
  unint64_t v61 = a6;
  uint64_t v58 = a5;
  uint64_t v59 = a3;
  if (v16)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    char v17 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType))
                - 8);
    uint64_t v18 = *(void *)(*(void *)v17 + 72);
    unint64_t v19 = (*(unsigned __int8 *)(*(void *)v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v17 + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1C9195D60;
    unint64_t v21 = (void *)(v20 + v19);
    unint64_t v22 = (char *)v21 + v17[18];
    *unint64_t v21 = 0x656C746974;
    v21[1] = 0xE500000000000000;
    uint64_t v23 = a5;
    unint64_t v24 = v56;
    uint64_t v25 = v57;
    v21[2] = v57;
    v21[3] = v24;
    v14(v22, v23, v10);
    BOOL v26 = (void *)((char *)v21 + v18);
    char v27 = (char *)v21 + v18 + v17[18];
    *BOOL v26 = 0x747369747261;
    v26[1] = 0xE600000000000000;
    uint64_t v29 = v59;
    uint64_t v28 = v60;
    v26[2] = v59;
    v26[3] = v28;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v27, *MEMORY[0x1E4F88FA0], v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = specialized static AudioItemCandidate.auxTitleFields(title:itemType:)(v25, v24, v58);
    uint64_t v62 = v20;
    specialized Array.append<A>(contentsOf:)(v30);
    uint64_t v31 = v62;
    unint64_t v32 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v29, v28, v61);
    uint64_t v62 = v31;
  }
  else
  {
    int v33 = v15;
    unint64_t v55 = (void (*)(unint64_t, uint64_t, uint64_t))v14;
    unsigned int v34 = *MEMORY[0x1E4F88FA0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    uint64_t v36 = *(void *)(*(void *)(v35 - 8) + 72);
    unint64_t v37 = (*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v35 - 8) + 80);
    unsigned int v54 = v34;
    if (v33 != v34)
    {
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_1C9195D60;
      char v44 = (void *)(v43 + v37);
      unint64_t v45 = v43 + v37 + *(int *)(v35 + 64);
      void *v44 = 0x656C746974;
      v44[1] = 0xE500000000000000;
      unint64_t v46 = v56;
      void v44[2] = v57;
      v44[3] = v46;
      v55(v45, v58, v10);
      uint64_t v47 = (void *)((char *)v44 + v36);
      uint64_t v48 = (char *)v44 + v36 + *(int *)(v35 + 64);
      void *v47 = 0x747369747261;
      v47[1] = 0xE600000000000000;
      uint64_t v50 = v59;
      unint64_t v49 = v60;
      v47[2] = v59;
      v47[3] = v49;
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v48, v54, v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v51 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v50, v49, v61);
      uint64_t v62 = v43;
      specialized Array.append<A>(contentsOf:)(v51);
      uint64_t v42 = v62;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return v42;
    }
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1C91947A0;
    unint64_t v39 = (void *)(v38 + v37);
    unint64_t v40 = v38 + v37 + *(int *)(v35 + 64);
    void *v39 = 0x747369747261;
    v39[1] = 0xE600000000000000;
    unint64_t v41 = v56;
    v39[2] = v57;
    v39[3] = v41;
    v55(v40, v58, v10);
    swift_bridgeObjectRetain();
    unint64_t v32 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v59, v60, v61);
    uint64_t v62 = v38;
  }
  specialized Array.append<A>(contentsOf:)(v32);
  return v62;
}

uint64_t specialized static AudioItemCandidate.leetDecode(leetText:)(uint64_t a1)
{
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static AudioItemCandidate.leetDecode(leetText:));
  unint64_t v12 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    int64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v9 >= v6) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v12 + 8 * v9);
    ++v8;
    if (!v10)
    {
      int64_t v8 = v9 + 1;
      if (v9 + 1 >= v6) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v12 + 8 * v8);
      if (!v10)
      {
        int64_t v8 = v9 + 2;
        if (v9 + 2 >= v6) {
          goto LABEL_21;
        }
        uint64_t v10 = *(void *)(v12 + 8 * v8);
        if (!v10) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v5 = (v10 - 1) & v10;
LABEL_5:
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v6)
  {
LABEL_21:
    swift_release();
    return a1;
  }
  uint64_t v10 = *(void *)(v12 + 8 * v11);
  if (v10)
  {
    int64_t v8 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v12 + 8 * v8);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

id specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(void *a1, uint64_t a2)
{
  uint64_t v85 = a2;
  uint64_t v3 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (uint64_t *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  id v6 = *(id *)(v84 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v84);
  uint64_t v83 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v74 - v9;
  type metadata accessor for ClientAudioResult();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {

    swift_release();
    return 0;
  }
  uint64_t v12 = v11;
  uint64_t v79 = v3;
  id v13 = a1;
  uint64_t v81 = v12;
  id v14 = (id)ClientAudioResult.vocabularyResult.getter();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  id v17 = v13;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  id v82 = v14;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc();
    long long v75 = v5;
    uint64_t v77 = v16;
    unint64_t v22 = (uint8_t *)v21;
    uint64_t v76 = swift_slowAlloc();
    uint64_t v87 = v76;
    id v80 = v6;
    *(_DWORD *)unint64_t v22 = 136315138;
    unint64_t v74 = v22 + 4;
    uint64_t v23 = v81;
    PommesResult.resultId.getter();
    uint64_t v24 = String.debugDescription.getter();
    uint64_t v78 = v10;
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    id v14 = v82;
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v87);
    id v6 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v10 = v78;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v18, v19, "Identifier being set as resultId: %s", v22, 0xCu);
    uint64_t v27 = v76;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v27, -1, -1);
    uint64_t v28 = v22;
    uint64_t v16 = v77;
    uint64_t v5 = v75;
    MEMORY[0x1CB77E470](v28, -1, -1);
  }
  else
  {

    uint64_t v23 = v81;
  }
  id v30 = v17;
  uint64_t v31 = PommesResult.resultId.getter();
  uint64_t v33 = v32;

  dispatch thunk of VocabularyResult.fieldType.getter();
  KVFieldType.audioType.getter();
  uint64_t v34 = VocabularyResult.itemType.getter();
  id v80 = v30;
  if (v34 == 16)
  {
    uint64_t v77 = v33;
    uint64_t v78 = (char *)v31;
    uint64_t v38 = v10;
    unint64_t v39 = VocabularyResult.fields.getter();
    if (v39)
    {
      unint64_t v40 = v39;
      if (v39 >> 62) {
        goto LABEL_62;
      }
      uint64_t v37 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v37) {
        goto LABEL_36;
      }
      goto LABEL_15;
    }
    while (1)
    {
LABEL_37:
      uint64_t v16 = VocabularyResult.semanticValue.getter();
      uint64_t v45 = v59;
      swift_bridgeObjectRelease();
      while (2)
      {
        unint64_t v60 = VocabularyResult.fields.getter();
        uint64_t v76 = v45;
        if (!v60) {
          goto LABEL_46;
        }
        unint64_t v40 = v60;
        if (v60 >> 62)
        {
LABEL_65:
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          if (!v37)
          {
LABEL_66:
            swift_bridgeObjectRelease_n();
            uint64_t v36 = 0;
LABEL_67:
            uint64_t v10 = v38;
LABEL_68:
            uint64_t v23 = v81;
LABEL_69:
            *uint64_t v5 = v23;
            swift_storeEnumTagMultiPayload();
            (*((void (**)(uint64_t, char *, uint64_t))v6 + 2))(v83, v10, v84);
            if (v85) {
              char v68 = *(unsigned char *)(v85 + 34);
            }
            else {
              char v68 = 0;
            }
            id v69 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features());
            id v70 = v80;
            id v71 = objc_msgSend(v69, sel_init);
            id v72 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate(0));
            id v29 = AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)((uint64_t)v5, 1, (uint64_t)v78, v77, v16, v76, v36, v37, v83, 0, v68, (uint64_t)v71);

            swift_release();
            (*((void (**)(char *, uint64_t))v6 + 1))(v10, v84);
            return v29;
          }
        }
        else
        {
          uint64_t v37 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v37) {
            goto LABEL_66;
          }
        }
        if ((v40 & 0xC000000000000001) != 0) {
          id v61 = (id)MEMORY[0x1CB77D510](0, v40);
        }
        else {
          id v61 = *(id *)(v40 + 32);
        }
        id v41 = v61;
        if (VocabularyField.fieldType.getter() == 701)
        {
LABEL_59:
          swift_bridgeObjectRelease_n();
          uint64_t v36 = VocabularyField.value.getter();
          uint64_t v37 = v67;

          goto LABEL_67;
        }

        if (v37 == 1)
        {
          swift_bridgeObjectRelease_n();
LABEL_46:
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          goto LABEL_67;
        }
        long long v75 = v5;
        if ((v40 & 0xC000000000000001) != 0)
        {
          uint64_t v62 = 1;
          while (1)
          {
            uint64_t v63 = MEMORY[0x1CB77D510](v62, v40);
            uint64_t v64 = v62 + 1;
            if (__OFADD__(v62, 1)) {
              goto LABEL_61;
            }
            id v41 = (id)v63;
            if (VocabularyField.fieldType.getter() == 701) {
              goto LABEL_58;
            }
            swift_unknownObjectRelease();
            ++v62;
            if (v64 == v37) {
              goto LABEL_57;
            }
          }
        }
        uint64_t v65 = 5;
        while (1)
        {
          uint64_t v66 = v65 - 3;
          if (__OFADD__(v65 - 4, 1)) {
            break;
          }
          id v41 = *(id *)(v40 + 8 * v65);
          if (VocabularyField.fieldType.getter() == 701)
          {
LABEL_58:
            uint64_t v5 = v75;
            goto LABEL_59;
          }

          ++v65;
          if (v66 == v37)
          {
LABEL_57:
            swift_bridgeObjectRelease_n();
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v10 = v38;
            uint64_t v5 = v75;
            goto LABEL_68;
          }
        }
        __break(1u);
LABEL_75:
        for (id i = (id)MEMORY[0x1CB77D510](0, v40); ; id i = *(id *)(v40 + 32))
        {
          id v43 = i;
          if (VocabularyField.fieldType.getter() == 700) {
            break;
          }

          if (v37 == 1) {
            goto LABEL_36;
          }
          if (!v41)
          {
            uint64_t v57 = 5;
            while (1)
            {
              uint64_t v58 = v57 - 3;
              if (__OFADD__(v57 - 4, 1)) {
                break;
              }
              id v43 = *(id *)(v40 + 8 * v57);
              if (VocabularyField.fieldType.getter() == 700) {
                goto LABEL_18;
              }

              ++v57;
              if (v58 == v37) {
                goto LABEL_36;
              }
            }
            __break(1u);
            goto LABEL_65;
          }
          uint64_t v54 = 1;
          while (1)
          {
            uint64_t v55 = MEMORY[0x1CB77D510](v54, v40);
            uint64_t v56 = v54 + 1;
            if (__OFADD__(v54, 1)) {
              break;
            }
            id v43 = (id)v55;
            if (VocabularyField.fieldType.getter() == 700) {
              goto LABEL_18;
            }
            swift_unknownObjectRelease();
            ++v54;
            if (v56 == v37) {
              goto LABEL_36;
            }
          }
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          if (!v37)
          {
LABEL_36:
            swift_bridgeObjectRelease_n();
            goto LABEL_37;
          }
LABEL_15:
          id v41 = (id)(v40 & 0xC000000000000001);
          if ((v40 & 0xC000000000000001) != 0) {
            goto LABEL_75;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease_n();
        uint64_t v16 = VocabularyField.value.getter();
        uint64_t v45 = v44;

        if (v45) {
          continue;
        }
        break;
      }
    }
  }
  if (v34 == 5)
  {
    uint64_t v77 = v33;
    uint64_t v78 = (char *)v31;
    uint64_t v16 = VocabularyResult.semanticValue.getter();
    uint64_t v76 = v35;
    if (v85)
    {
      uint64_t v36 = *(void *)(v85 + 16);
      uint64_t v37 = *(void *)(v85 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
    }
    goto LABEL_69;
  }
  swift_bridgeObjectRelease();
  id v46 = v14;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v47, v48))
  {
    unint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v87 = v50;
    *(_DWORD *)unint64_t v49 = 136315138;
    VocabularyResult.itemType.getter();
    uint64_t v51 = KVItemType.description.getter();
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v47, v48, "AudioItemCandidate : initializer does not support item type : %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v50, -1, -1);
    MEMORY[0x1CB77E470](v49, -1, -1);
  }
  else
  {
  }
  id v53 = v80;

  swift_release();
  (*((void (**)(char *, uint64_t))v6 + 1))(v10, v84);
  return 0;
}

uint64_t type metadata accessor for AudioItemCandidate.BackingItem(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioItemCandidate.BackingItem);
}

uint64_t type metadata accessor for AudioItemCandidate.Features()
{
  return self;
}

uint64_t type metadata accessor for AudioItemCandidate(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioItemCandidate);
}

uint64_t outlined init with copy of AudioItemCandidate.BackingItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AudioItemCandidate.toAudioResult()(uint64_t a1)
{
  return closure #1 in AudioItemCandidate.toAudioResult()(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source;
  if (!lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source);
  }
  return result;
}

uint64_t sub_1C911BC8C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1C911BCE8(id *a1, void **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0))(*a1);
}

void sub_1C911BD4C(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x98))();
}

uint64_t sub_1C911BDA8(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA0))(*a1);
}

void sub_1C911BE00(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB0))();
}

uint64_t sub_1C911BE5C(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xB8))(*a1);
}

void sub_1C911BEB4(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
}

uint64_t sub_1C911BF10(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0))(*a1);
}

uint64_t sub_1C911BF68@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1C911BFC4(uint64_t a1, void **a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1C911C028@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1C911C084(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100))(*a1);
}

uint64_t sub_1C911C0E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1C911C148(void *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x118))(*a1);
}

void sub_1C911C1A8(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
}

uint64_t sub_1C911C20C(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130))(*a1);
}

void sub_1C911C26C(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x140))();
}

uint64_t sub_1C911C2D0(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x148))(*a1);
}

void sub_1C911C330(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x158))();
}

uint64_t sub_1C911C394(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x160))(*a1);
}

uint64_t ObjC metadata update function for AudioItemCandidate()
{
  return type metadata accessor for AudioItemCandidate(0);
}

uint64_t type metadata completion function for AudioItemCandidate()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AudioItemCandidate.BackingItem(319);
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for AudioItemCandidate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioItemCandidate);
}

uint64_t dispatch thunk of AudioItemCandidate.score.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AudioItemCandidate.score.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AudioItemCandidate.score.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AudioItemCandidate.fields(localizedTokenizer:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AudioItemCandidate.leetDecodedFields(localizedTokenizer:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudioItemCandidate.nonOptionalFieldCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudioItemCandidate.deduplicationKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudioItemCandidate.toAudioResult()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudioItemCandidate.summary.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t method lookup function for AudioItemCandidate.Features(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioItemCandidate.Features);
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.fieldMatchScores.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.fieldMatchScores.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.fieldMatchScores.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.maxFieldCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.maxFieldCount.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.maxFieldCount.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

unsigned char *storeEnumTagSinglePayload for AudioItemCandidate.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C911CE64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioItemCandidate.Source()
{
  return &type metadata for AudioItemCandidate.Source;
}

char *initializeBufferWithCopyOfBuffer for AudioItemCandidate.BackingItem(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unsigned int v6 = *a2;
      *(void *)a1 = *a2;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for AudioItemCandidate.BackingItem(void **a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v2 = *a1;
  }
  else
  {
    uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    unsigned int v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void **initializeWithCopy for AudioItemCandidate.BackingItem(void **a1, void **a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unsigned int v4 = *a2;
    *a1 = *a2;
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AudioItemCandidate.BackingItem(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of AudioItemCandidate.BackingItem((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unsigned int v4 = *a2;
      *a1 = *a2;
      id v5 = v4;
    }
    else
    {
      uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of AudioItemCandidate.BackingItem(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for AudioItemCandidate.BackingItem(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AudioItemCandidate.BackingItem(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AudioItemCandidate.BackingItem((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for AudioItemCandidate.BackingItem()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_1C911D4A4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t lazy protocol witness table accessor for type Locale and conformance Locale()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale and conformance Locale;
  if (!lazy protocol witness table cache variable for type Locale and conformance Locale)
  {
    type metadata accessor for Locale();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  }
  return result;
}

uint64_t sub_1C911D528()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C911D538()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  return closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 40), *(void *)(v10 + 48), *(void *)(v10 + 56));
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *ContactProfileSliceResolver.__allocating_init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a6;
  uint64_t v24 = a8;
  id v14 = (uint64_t *)swift_allocObject();
  uint64_t v16 = *(void *)(a7 + 24);
  uint64_t v15 = *(void *)(a7 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a7, v16);
  MEMORY[0x1F4188790](v17);
  os_log_type_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(a1, a2, a3, a4, a5, v23, (uint64_t)v19, v24, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a7);
  return v21;
}

uint64_t protocol witness for ContactResolverProtocol.resolve(queries:config:) in conformance SiriKitContactResolver()
{
  return SiriKitContactResolver.resolve(queries:config:)();
}

void *ContactProfileSliceResolver.contactsBundleId.unsafeMutableAddressor()
{
  return &static ContactProfileSliceResolver.contactsBundleId;
}

unint64_t static ContactProfileSliceResolver.contactsBundleId.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t *ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a6;
  uint64_t v24 = a8;
  uint64_t v16 = *(void *)(a7 + 24);
  uint64_t v15 = *(void *)(a7 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a7, v16);
  MEMORY[0x1F4188790](v17);
  os_log_type_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(a1, a2, a3, a4, a5, v23, (uint64_t)v19, v24, v8, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a7);
  return v21;
}

uint64_t ContactProfileSliceResolver.resolveRelationship()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F892A0], v4);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
  uint64_t v9 = *(void *)(v1 + 152);
  uint64_t v10 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 128);
  uint64_t v29 = *(void *)(v1 + 160);
  uint64_t v12 = (void *)v11(v9);
  uint64_t v13 = MEMORY[0x1CB779450]();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    uint64_t v28 = v9;
    uint64_t v16 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(0, v13, v14);
    swift_bridgeObjectRelease();
    unint64_t v17 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      swift_retain();
      uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v17, v2);
      uint64_t v27 = v10;
      uint64_t v19 = a1;
      uint64_t v20 = v18;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      uint64_t v26 = (uint64_t)&v26;
      MEMORY[0x1F4188790](v21);
      *(&v26 - 2) = (uint64_t)v7;
      *(&v26 - 1) = v20;
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = v19;
      uint64_t v10 = v27;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v22, 0, 1, v21);
    }
    else
    {
      uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 1, 1, v24);
    }
    uint64_t v9 = v28;
  }
  else
  {
    uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a1, 1, 1, v23);
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v9, v29, v10, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void ContactProfileSliceResolver.resolveNameSlice(label:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v45 = a2;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
  uint64_t v10 = *(void *)(v3 + 152);
  uint64_t v11 = *(void *)(v3 + 160);
  uint64_t v39 = v3;
  uint64_t v12 = *(uint64_t (**)(void))(*(void *)v9 + 128);
  uint64_t v42 = v11;
  uint64_t v43 = v10;
  uint64_t v40 = v3 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
  uint64_t v44 = v9;
  uint64_t v41 = v12();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>);
  uint64_t v13 = *(void *)(v6 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C9194790;
  unint64_t v16 = v15 + v14;
  unint64_t v17 = *(void (**)(void))(v6 + 104);
  ((void (*)(unint64_t, void, uint64_t))v17)(v15 + v14, *MEMORY[0x1E4F892E0], v5);
  unint64_t v37 = v16 + v13;
  v17();
  unint64_t v36 = v16 + 2 * v13;
  v17();
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v38(v8, v16, v5);
  _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
  LOBYTE(v13) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  v18(v8, v5);
  if ((v13 & 1) != 0
    || (v38(v8, v37, v5), char v19 = dispatch thunk of static Equatable.== infix(_:_:)(), v18(v8, v5), (v19 & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v38(v8, v36, v5);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18(v8, v5);
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v32 = (void *)v41;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v44 + 144))(v43, v42, v40, v41, 2);

      uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v45, 1, 1, v33);
      return;
    }
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v20 = swift_deallocClassInstance();
  uint64_t v21 = v39;
  uint64_t v22 = MEMORY[0x1CB779450](v20);
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    uint64_t v25 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(1, v22, v23);
    swift_bridgeObjectRelease();
    unint64_t v26 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v25);
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_retain();
      uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v26, v21);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      MEMORY[0x1F4188790](v28);
      *(&v36 - 2) = a1;
      *(&v36 - 1) = v27;
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
      uint64_t v29 = v45;
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v29, 0, 1, v28);
    }
    else
    {
      uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
    }
  }
  else
  {
    uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v45, 1, 1, v30);
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = (void *)v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v44 + 136))(v43, v42, v40, v41);
}

uint64_t closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v13);
  (*(void (**)(char *, void))(v15 + 104))((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F896F8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4F89B48], v9);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  outlined init with copy of Google_Protobuf_Any?(v18, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
}

uint64_t closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  swift_bridgeObjectRetain();
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

unint64_t ContactProfileSliceResolver.searchContacts(contactQuery:)(uint64_t a1)
{
  void (*v24)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  unint64_t v30;
  void *v31;
  id v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  void v50[2];
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;

  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for RecommenderType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SearchSuggestedContacts();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ContactResolverConfig();
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = (char *)(v1 + 16);
  uint64_t v17 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v17 - 8);
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4F9FDF0], v6);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4F9FDB0], v2);
  unint64_t v52 = 0;
  id v53 = 0;
  v50[1] = v9;
  uint64_t v51 = v5;
  v50[0] = v12;
  uint64_t v18 = ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  if (one-time initialization token for shared != -1) {
    uint64_t v18 = swift_once();
  }
  char v19 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v18);
  uint64_t v51 = v16;
  unint64_t v52 = v57;
  id v53 = v15;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v24 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v19 + 200);
  id v53 = (char *)v50;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [INPerson]?);
  LOBYTE(v51) = 2;
  v24(&v59, 0xD000000000000029, 0x80000001C91A2A70, 0, v23, "SiriInformationSearch/ContactProfileSliceResolver.swift", 55, 2, 130, "searchContacts(contactQuery:)", 29, v51, partial apply for closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:));
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  uint64_t v25 = v59;
  if (v59)
  {
    uint64_t v58 = MEMORY[0x1E4FBC860];
    if (v59 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      if (v26) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v26 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
LABEL_6:
        if (v26 >= 1)
        {
          uint64_t v27 = 0;
          uint64_t v28 = MEMORY[0x1E4FBC860];
          do
          {
            if ((v25 & 0xC000000000000001) != 0) {
              uint64_t v32 = (id)MEMORY[0x1CB77D510](v27, v25);
            }
            else {
              uint64_t v32 = *(id *)(v25 + 8 * v27 + 32);
            }
            char v31 = v32;
            uint64_t v33 = objc_msgSend(v32, sel_siriMatches);
            if (v33)
            {
              uint64_t v29 = v33;
              type metadata accessor for INPerson();
              uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              char v31 = v29;
            }
            else
            {
              uint64_t v30 = v28;
            }

            ++v27;
            specialized Array.append<A>(contentsOf:)(v30);
          }
          while (v26 != v27);
          swift_bridgeObjectRelease_n();
          uint64_t v34 = v58;
          goto LABEL_22;
        }
        __break(1u);
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v34 = MEMORY[0x1E4FBC860];
LABEL_22:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 134217984;
      if (v34 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v44 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v58 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v41, v42, "NameProfileResolver: Resolved contacts %ld", v43, 0xCu);
      MEMORY[0x1CB77E470](v43, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v39 = specialized ContactProfileSliceResolver.dedupeContacts(matches:)(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v45 = Logger.logObject.getter();
    id v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 134217984;
      if (v39 >> 62)
      {
        swift_bridgeObjectRetain();
        os_log_type_t v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        os_log_type_t v48 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v58 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v45, v46, "NameProfileResolver: Deduped resolved contacts %ld", v47, 0xCu);
      MEMORY[0x1CB77E470](v47, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_34;
  }
  if (one-time initialization token for pommes != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  unint64_t v36 = Logger.logObject.getter();
  unint64_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1C8F83000, v36, v37, "NameProfileResolver: No resolved contacts", v38, 2u);
    MEMORY[0x1CB77E470](v38, -1, -1);
  }

  uint64_t v39 = 0;
LABEL_34:
  (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v56);
  return v39;
}

uint64_t closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a2, a3, v8, v9);
  if (v4)
  {

    uint64_t result = 0;
  }
  *a4 = result;
  return result;
}

uint64_t static ContactProfileSliceResolver.toContactNode(occupantNode:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContactQuery.init()();
  ContactQuery.givenName.setter();
  OccupantIntentNode.firstName.getter();
  if (v12) {
    ContactQuery.givenName.setter();
  }
  OccupantIntentNode.fullName.getter();
  if (v13)
  {
    uint64_t v14 = ContactQuery.givenName.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v17) {
      swift_bridgeObjectRelease();
    }
    else {
      ContactQuery.givenName.setter();
    }
  }
  OccupantIntentNode.fullName.getter();
  ContactQuery.fullName.setter();
  OccupantIntentNode.lastName.getter();
  ContactQuery.familyName.setter();
  OccupantIntentNode.nickname.getter();
  ContactQuery.nickname.setter();
  OccupantIntentNode.namePrefix.getter();
  uint64_t v18 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  }
  ContactQuery.namePrefix.setter();
  OccupantIntentNode.namePostfix.getter();
  uint64_t v20 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  }
  ContactQuery.nameSuffix.setter();
  OccupantIntentNode.company.getter();
  ContactQuery.organizationName.setter();
  OccupantIntentNode.relationship.getter();
  uint64_t v22 = type metadata accessor for ContactQuery();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v2, 1, 1, v22);
  ContactRelationshipQuery.init(label:fromContact:)();
  uint64_t v23 = type metadata accessor for ContactRelationshipQuery();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v5, 0, 1, v23);
  return ContactQuery.relationship.setter();
}

uint64_t closure #1 in ContactProfileSliceResolver.buildPerson(person:)(uint64_t a1, id a2)
{
  id v4 = objc_msgSend(a2, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  id v5 = objc_msgSend(a2, sel_contactIdentifier);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.setter();
    ContactProfileSliceResolver.getAddresses(identifier:)(v7, v9);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_Person.addresses.setter();
  }
  uint64_t v10 = type metadata accessor for PersonNameComponents();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)v26 - v13;
  id v15 = objc_msgSend(a2, sel_nameComponents);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v26[3] = v26;
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v19, 1, 1, v10);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  v26[1] = a1;
  MEMORY[0x1F4188790](v17);
  static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v19, (char *)v26 - v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1) {
    return outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  v20(v14, v19, v10);
  PersonNameComponents.givenName.getter();
  if (v21) {
    Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  }
  PersonNameComponents.familyName.getter();
  if (v22) {
    Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  }
  PersonNameComponents.middleName.getter();
  if (v23) {
    Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  }
  PersonNameComponents.nickname.getter();
  if (v24) {
    Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void ContactProfileSliceResolver.getAddresses(identifier:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v41 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v34 - v11;
  if (one-time initialization token for shared != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v40 = &v34;
  unint64_t v13 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v10);
  uint64_t v30 = v3;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v39 = *(char **)(*(void *)v13 + 200);
  uint64_t v32 = &v29;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNContact?);
  LOBYTE(v30) = 2;
  ((void (*)(id *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)(void *@<X8>)))v39)(&v42, 0xD00000000000003ALL, 0x80000001C91A29D0, 0, v17, "SiriInformationSearch/ContactProfileSliceResolver.swift", 55, 2, 219, "getAddresses(identifier:)", 25, v30, partial apply for closure #1 in ContactProfileSliceResolver.getAddresses(identifier:));
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (!v42) {
    return;
  }
  id v18 = v42;
  id v19 = objc_msgSend(v18, sel_postalAddresses);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNLabeledValue);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v35 = v18;
    if (v21) {
      goto LABEL_6;
    }
LABEL_19:
    id v28 = v35;

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v35 = v18;
  if (!v21) {
    goto LABEL_19;
  }
LABEL_6:
  if (v21 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v37 = v7 + 32;
    unint64_t v38 = v20 & 0xC000000000000001;
    uint64_t v36 = v7 + 8;
    unint64_t v23 = MEMORY[0x1E4FBC860];
    uint64_t v39 = (char *)v21;
    uint64_t v40 = (uint64_t *)v20;
    do
    {
      if (v38) {
        id v24 = (id)MEMORY[0x1CB77D510](v22, v20);
      }
      else {
        id v24 = *(id *)(v20 + 8 * (void)v22 + 32);
      }
      uint64_t v25 = v24;
      uint64_t v32 = (uint64_t *)MEMORY[0x1F4188790](v24);
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ContactAddress and conformance Apple_Parsec_Siri_V2alpha_ContactAddress, MEMORY[0x1E4F89130]);
      static Message.with(_:)();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v41, v12, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
      }
      unint64_t v27 = *(void *)(v23 + 16);
      unint64_t v26 = *(void *)(v23 + 24);
      if (v27 >= v26 >> 1) {
        unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v23);
      }
      ++v22;
      *(void *)(v23 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v23+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v27, v41, v6);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      unint64_t v20 = (unint64_t)v40;
    }
    while (v39 != v22);
    goto LABEL_19;
  }
  __break(1u);
}

void closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v15[1] = *(id *)MEMORY[0x1E4F143B8];
  id v5 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore);
  uint64_t v6 = (void *)MEMORY[0x1CB77CA90](a2, a3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C9195B30;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1AF10];
  *(void *)(v7 + 32) = *MEMORY[0x1E4F1AF10];
  specialized Array._endMutation()();
  id v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15[0] = 0;
  id v11 = objc_msgSend(v5, sel_unifiedContactWithIdentifier_keysToFetch_error_, v6, isa, v15);

  id v12 = v15[0];
  if (!v11)
  {
    unint64_t v13 = v12;
    uint64_t v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v11 = 0;
  }
  *a4 = v11;
}

uint64_t closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_label);
  if (v3)
  {
    id v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  id v5 = objc_msgSend(a2, sel_value);
  id v6 = objc_msgSend(v5, sel_street);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  id v7 = objc_msgSend(a2, sel_value);
  id v8 = objc_msgSend(v7, sel_city);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  id v9 = objc_msgSend(a2, sel_value);
  id v10 = objc_msgSend(v9, sel_ISOCountryCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.setter();
  id v11 = objc_msgSend(a2, sel_value);
  id v12 = objc_msgSend(v11, sel_postalCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  id v13 = objc_msgSend(a2, sel_value);
  id v14 = objc_msgSend(v13, sel_state);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
}

uint64_t *ContactProfileSliceResolver.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined consume of AssistantDataSnapshot?(v0[7], v0[8], v0[9], v0[10]);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  return v0;
}

uint64_t ContactProfileSliceResolver.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined consume of AssistantDataSnapshot?(v0[7], v0[8], v0[9], v0[10]);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t *specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  a9[5] = a10;
  a9[6] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a9 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a7, a10);
  outlined init with take of PommesSearchReason?(a1, (uint64_t)(a9 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  a9[19] = a2;
  a9[20] = a3;
  outlined init with take of PommesSearchReason?(a4, (uint64_t)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  unint64_t v20 = (char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a5, v21);
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = a8;
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = a6;
  return a9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v41 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v40 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  unint64_t v7 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v44 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (uint64_t *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v42 = *(v9 - 1);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    if (!v12) {
      return v13;
    }
    uint64_t v47 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0) {
      break;
    }
    uint64_t v45 = v3;
    unint64_t v38 = v11;
    unint64_t v39 = a1;
    uint64_t v15 = 0;
    uint64_t v13 = v47;
    id v35 = (void (**)(uint64_t *, char *, uint64_t))(v7 + 16);
    unint64_t v36 = a1 & 0xC000000000000001;
    uint64_t v33 = v42 + 32;
    uint64_t v34 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v32 = v9;
    uint64_t v37 = v12;
    while (v12 != v15)
    {
      if (v36) {
        id v16 = (id)MEMORY[0x1CB77D510](v15, a1);
      }
      else {
        id v16 = *(id *)(a1 + 8 * v15 + 32);
      }
      uint64_t v17 = v16;
      id v11 = v40;
      uint64_t v18 = MEMORY[0x1F4188790](v16);
      uint64_t v19 = v41;
      *(&v31 - 2) = v18;
      *(&v31 - 1) = v19;
      uint64_t v20 = _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, MEMORY[0x1E4F88998]);
      uint64_t v21 = v43;
      uint64_t v22 = v44;
      unint64_t v23 = v45;
      static Message.with(_:)();
      v46[3] = v21;
      v46[4] = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46);
      (*v35)(boxed_opaque_existential_1, v22, v21);
      defaultAnyTypeURLPrefix.getter();
      Google_Protobuf_Any.init(message:partial:typePrefix:)();
      if (v23)
      {

        uint64_t v25 = type metadata accessor for Google_Protobuf_Any();
        uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v11, 1, 1, v25);
      }
      else
      {
        uint64_t v27 = type metadata accessor for Google_Protobuf_Any();
        uint64_t v26 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 0, 1, v27);
      }
      id v3 = v32;
      id v9 = &v31;
      MEMORY[0x1F4188790](v26);
      *(&v31 - 2) = (uint64_t)v11;
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
      id v28 = v38;
      static Message.with(_:)();
      uint64_t v45 = 0;
      (*v34)(v44, v43);
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Google_Protobuf_Any?);

      uint64_t v47 = v13;
      unint64_t v30 = *(void *)(v13 + 16);
      unint64_t v29 = *(void *)(v13 + 24);
      unint64_t v7 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v13 = v47;
      }
      ++v15;
      *(void *)(v13 + 16) = v7;
      (*(void (**)(unint64_t, char *, uint64_t *))(v42 + 32))(v13+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v30, v28, v3);
      uint64_t v12 = v37;
      a1 = v39;
      if (v37 == v15) {
        return v13;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v80 = type metadata accessor for ContactQuery();
  uint64_t v69 = *(void *)(v80 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v80);
  char v68 = &v60[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v79 = &v60[-v7];
  uint64_t v8 = type metadata accessor for OccupantIntentNode();
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v64 = &v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v74 = &v60[-v12];
  MEMORY[0x1F4188790](v11);
  uint64_t v78 = &v60[-v13];
  uint64_t v14 = type metadata accessor for NonTerminalIntentNode();
  uint64_t v76 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  id v70 = &v60[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = &v60[-v17];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = &v60[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = type metadata accessor for TerminalIntentNode();
  uint64_t v75 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  id v24 = &v60[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *uint64_t v21 = a2;
  v21[1] = a3;
  uint64_t v25 = *MEMORY[0x1E4FA2D80];
  uint64_t v26 = type metadata accessor for TerminalElement.Value();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v27 + 104))(v21, v25, v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v26);
  swift_bridgeObjectRetain();
  TerminalIntentNode.init(name:value:semanticTags:)();
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  uint64_t v28 = AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  uint64_t v29 = swift_allocObject();
  long long v67 = xmmword_1C91947A0;
  *(_OWORD *)(v29 + 16) = xmmword_1C91947A0;
  uint64_t v30 = MEMORY[0x1E4FA3010];
  *(void *)(v29 + 56) = v22;
  *(void *)(v29 + 64) = v30;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v29 + 32));
  uint64_t v32 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v75 + 16);
  id v71 = v24;
  uint64_t v72 = v22;
  v32(boxed_opaque_existential_1, v24, v22);
  uint64_t v34 = v78;
  uint64_t v33 = v79;
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  id v35 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v76 + 16);
  uint64_t v73 = v18;
  v35(v70, v18, v77);
  swift_retain();
  id v70 = (unsigned char *)v28;
  OccupantIntentNode.init(intentNode:ontologyNode:)();
  type metadata accessor for ContactProfileSliceResolver();
  static ContactProfileSliceResolver.toContactNode(occupantNode:)();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
  uint64_t v37 = v65;
  unint64_t v38 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v65 + 16);
  unint64_t v39 = v34;
  uint64_t v40 = v66;
  v38(v74, v39, v66);
  uint64_t v41 = v68;
  uint64_t v42 = v69;
  uint64_t v43 = v80;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 16))(v68, v33, v80);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  int v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v47 = swift_slowAlloc();
    os_log_t v62 = v44;
    uint64_t v48 = v47;
    uint64_t v63 = swift_slowAlloc();
    v82[0] = v63;
    *(_DWORD *)uint64_t v48 = 136315394;
    int v61 = v46;
    unint64_t v49 = v74;
    v38(v64, v74, v40);
    uint64_t v50 = String.init<A>(describing:)();
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v52 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
    v52(v49, v40);
    *(_WORD *)(v48 + 12) = 2080;
    _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, MEMORY[0x1E4F9FD70]);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v41, v80);
    os_log_t v55 = v62;
    _os_log_impl(&dword_1C8F83000, v62, (os_log_type_t)v61, "NameProfileResolver: occupant node %s contactQuery %s", (uint8_t *)v48, 0x16u);
    uint64_t v56 = v63;
    swift_arrayDestroy();
    uint64_t v43 = v80;
    MEMORY[0x1CB77E470](v56, -1, -1);
    MEMORY[0x1CB77E470](v48, -1, -1);
  }
  else
  {
    unint64_t v52 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
    v52(v74, v40);
    (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v41, v43);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  unint64_t v57 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = v67;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v42 + 32))(v58 + v57, v79, v43);
  swift_release();
  v52(v78, v40);
  (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v73, v77);
  (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v71, v72);
  return v58;
}

uint64_t dispatch thunk of ContactResolverProtocol.resolve(queries:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ObjC metadata update function for ContactProfileSliceResolver()
{
  return type metadata accessor for ContactProfileSliceResolver();
}

uint64_t type metadata accessor for ContactProfileSliceResolver()
{
  uint64_t result = type metadata singleton initialization cache for ContactProfileSliceResolver;
  if (!type metadata singleton initialization cache for ContactProfileSliceResolver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ContactProfileSliceResolver()
{
  type metadata accessor for PommesCandidateId?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ContactProfileSliceResolver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ContactProfileSliceResolver);
}

uint64_t dispatch thunk of ContactProfileSliceResolver.__allocating_init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a1 + 88);
  id v4 = *(uint64_t (**)(_OWORD *))(v1 + 136);
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  void v8[4] = *(_OWORD *)(a1 + 64);
  uint64_t v9 = v2;
  __int16 v10 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of ContactProfileSliceResolver.resolveRelationship()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ContactProfileSliceResolver.resolveNameSlice(label:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void type metadata accessor for PommesCandidateId?()
{
  if (!lazy cache variable for type metadata for PommesCandidateId?)
  {
    type metadata accessor for PommesCandidateId();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PommesCandidateId?);
    }
  }
}

void partial apply for closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(void *a1@<X8>)
{
  closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(v1[2], v1[3], v1[4], a1);
}

uint64_t partial apply for closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(int a1)
{
  return closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ContactProfileSliceResolver.buildPerson(person:)(uint64_t a1)
{
  return closure #1 in ContactProfileSliceResolver.buildPerson(person:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1)
{
  return closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t specialized ContactProfileSliceResolver.dedupeContacts(matches:)(unint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  __int16 v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v34 = v2;
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v32 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      uint64_t v5 = 4;
      uint64_t v30 = v4;
      unint64_t v31 = isUniquelyReferenced_nonNull_native;
      while (1)
      {
        if (v32) {
          id v8 = (id)MEMORY[0x1CB77D510](v5 - 4, isUniquelyReferenced_nonNull_native);
        }
        else {
          id v8 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v5);
        }
        id v7 = v8;
        uint64_t v9 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        id v10 = objc_msgSend(v8, sel_contactIdentifier);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          uint64_t v33 = v12;
          if (v3[2])
          {
            swift_bridgeObjectRetain();
            specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
            if (v15)
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_9;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
          uint64_t v18 = v3[2];
          BOOL v19 = (v16 & 1) == 0;
          uint64_t v20 = v18 + v19;
          if (__OFADD__(v18, v19)) {
            goto LABEL_30;
          }
          char v21 = v16;
          if (v3[3] >= v20)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
            unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v14);
            if ((v21 & 1) != (v23 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v17 = v22;
          }
          if (v21)
          {
            *(unsigned char *)(v3[7] + v17) = 1;
            long long v6 = v7;
          }
          else
          {
            v3[(v17 >> 6) + 8] |= 1 << v17;
            id v24 = (uint64_t *)(v3[6] + 16 * v17);
            uint64_t *v24 = v33;
            v24[1] = v14;
            *(unsigned char *)(v3[7] + v17) = 1;
            uint64_t v25 = v3[2];
            BOOL v26 = __OFADD__(v25, 1);
            uint64_t v27 = v25 + 1;
            long long v6 = v7;
            if (v26) {
              goto LABEL_31;
            }
            v3[2] = v27;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v7 = v6;
          MEMORY[0x1CB77CD90]();
          uint64_t v4 = v30;
          uint64_t isUniquelyReferenced_nonNull_native = v31;
          if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }

LABEL_9:
        ++v5;
        if (v9 == v4)
        {
          swift_bridgeObjectRelease();
          uint64_t v28 = v34;
          goto LABEL_34;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_34:
  swift_bridgeObjectRelease();
  return v28;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

uint64_t _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)partial apply(uint64_t a1)
{
  return partial apply for closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1);
}

uint64_t KVFieldType.mpMediaEntityType.getter(uint64_t a1)
{
  *((void *)&v1 + 1) = a1;
  *(void *)&long long v1 = a1 - 202;
  uint64_t result = 7;
  switch((unint64_t)(v1 >> 1))
  {
    case 0uLL:
      return result;
    case 1uLL:
      uint64_t result = 4;
      break;
    case 2uLL:
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      uint64_t result = 0;
      break;
    case 4uLL:
      uint64_t result = 3;
      break;
    case 7uLL:
      uint64_t result = 1;
      break;
    case 0xCuLL:
      uint64_t result = 2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t (*default argument 0 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)())()
{
  return closure #1 in default argument 0 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:);
}

uint64_t PegasusProxy.__allocating_init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a3;
  uint64_t v29 = a6;
  uint64_t v27 = a1;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v26 = *(void *)(a5 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t v19 = *(void *)(a9 + 24);
  uint64_t v18 = *(void *)(a9 + 32);
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1(a9, v19);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(v27, a2, v28, a4, (uint64_t)v16, v29, v30, v31, (uint64_t)v22, v12, v19, v13, v18, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v24;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    v22[1] = v2;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v30;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v10 = v5 + 16;
    unint64_t v26 = (*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64);
    uint64_t v27 = v11;
    uint64_t v12 = a1 + v26;
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v24 = (void (**)(unint64_t, char *, uint64_t))(v10 + 16);
    uint64_t v25 = v13;
    long long v23 = xmmword_1C91947A0;
    uint64_t v28 = v10;
    do
    {
      v27(v7, v12, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RewrittenUtterance>);
      uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
      uint64_t v15 = *(void *)(v14 - 8);
      unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v23;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, v29, v14);
      Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.setter();
      uint64_t v30 = v9;
      unint64_t v19 = *(void *)(v9 + 16);
      unint64_t v18 = *(void *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v9 = v30;
      }
      *(void *)(v9 + 16) = v19 + 1;
      uint64_t v20 = v25;
      (*v24)(v9 + v26 + v19 * v25, v7, v4);
      v12 += v20;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AnyCancellable();
    _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v9) {
      return outlined consume of [String : AppData].Iterator._Variant();
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return outlined consume of [String : AppData].Iterator._Variant();
      }
      unint64_t v14 = *(void *)(v17 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return outlined consume of [String : AppData].Iterator._Variant();
        }
        unint64_t v14 = *(void *)(v17 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return outlined consume of [String : AppData].Iterator._Variant();
          }
          unint64_t v14 = *(void *)(v17 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return outlined consume of [String : AppData].Iterator._Variant();
            }
            unint64_t v14 = *(void *)(v17 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return outlined consume of [String : AppData].Iterator._Variant();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_29:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      return outlined consume of [String : AppData].Iterator._Variant();
    }
    while (1)
    {
      AnyCancellable.cancel()();
      uint64_t result = swift_release();
      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for AnyCancellable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v23) {
          continue;
        }
      }
      return outlined consume of [String : AppData].Iterator._Variant();
    }
  }
  __break(1u);
  return result;
}

uint64_t PegasusSearchResponse.init(request:response:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  int64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

uint64_t PegasusSearchResponse.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PegasusSearchResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

BOOL static PegasusError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PegasusError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PegasusError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t OnDeviceLabels.userSpanLabels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*OnDeviceLabels.userSpanLabels.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t OnDeviceLabels.onScreenContextLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OnDeviceLabels.onScreenContextLabels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*OnDeviceLabels.onScreenContextLabels.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

SiriInformationSearch::OnDeviceLabels __swiftcall OnDeviceLabels.init()()
{
  unint64_t v0 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = v0;
  result.onScreenContextLabels._rawValue = v1;
  result.userSpanLabels._rawValue = v2;
  return result;
}

uint64_t default argument 0 of OnDeviceLabels.init(userSpanLabels:onScreenContextLabels:)()
{
  return MEMORY[0x1E4FBC860];
}

unint64_t default argument 1 of OnDeviceLabels.init(userSpanLabels:onScreenContextLabels:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

unint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter()
{
  uint64_t v109 = type metadata accessor for Latencyinfopb_KfedLatencyInfo();
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v107 = (char *)&v100 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  long long v104 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error();
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  long long v101 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  uint64_t v118 = *(void *)(v4 - 8);
  uint64_t v119 = v4;
  MEMORY[0x1F4188790](v4);
  long long v117 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v127 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v120 = *(void *)(v127 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v127);
  long long v114 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int64_t v9 = (char *)&v100 - v8;
  uint64_t v126 = (void (*)(char *, unint64_t, uint64_t))type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v10 = *((void *)v126 - 1);
  MEMORY[0x1F4188790](v126);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  long long v116 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v100 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  MEMORY[0x1F4188790](v19 - 8);
  long long v115 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v21 = *(void *)(v122 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v122);
  uint64_t v24 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  long long v113 = (char *)&v100 - v25;
  uint64_t v26 = v0;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v27 = v14 + 8;
  uint64_t v123 = v28;
  uint64_t v124 = v13;
  uint64_t v29 = v28(v18, v13);
  uint64_t v30 = MEMORY[0x1CB779280](v29);
  (*(void (**)(char *, void (*)(char *, unint64_t, uint64_t)))(v10 + 8))(v12, v126);
  uint64_t v31 = *(void *)(v30 + 16);
  uint64_t v121 = v26;
  if (v31)
  {
    uint64_t v111 = v21;
    uint64_t v112 = v27;
    uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    uint64_t v32 = v21 + 16;
    unint64_t v34 = v30 + ((*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64));
    id v35 = (void (**)(char *, unint64_t))(v120 + 8);
    uint64_t v125 = *(void *)(v32 + 56);
    uint64_t v126 = v33;
    uint64_t v110 = v30;
    swift_bridgeObjectRetain();
    uint64_t v36 = v122;
    while (1)
    {
      v126(v24, v34, v36);
      uint64_t v37 = v36;
      uint64_t v38 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
      uint64_t v39 = MEMORY[0x1CB7792E0](v38);
      unint64_t v41 = v40;
      (*v35)(v9, v127);
      swift_bridgeObjectRelease();
      uint64_t v42 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0) {
        uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
      }
      if (v42) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v32 - 8))(v24, v37);
      v34 += v125;
      --v31;
      uint64_t v36 = v37;
      if (!v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = 1;
        uint64_t v44 = v116;
        os_log_type_t v45 = v117;
        uint64_t v46 = v124;
        uint64_t v47 = v111;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v47 = v111;
    uint64_t v48 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v115, v24, v37);
    uint64_t v43 = 0;
    uint64_t v44 = v116;
    os_log_type_t v45 = v117;
    uint64_t v46 = v124;
    uint64_t v36 = v37;
  }
  else
  {
    uint64_t v43 = 1;
    uint64_t v44 = v116;
    os_log_type_t v45 = v117;
    uint64_t v46 = v124;
    uint64_t v36 = v122;
    uint64_t v47 = v21;
LABEL_9:
    uint64_t v48 = (uint64_t)v115;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v43, 1, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v36) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
    long long v117 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = (void (*)(char *, unint64_t, uint64_t))0xE000000000000000;
    unint64_t v49 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v50 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v113, v48, v36);
    unint64_t v51 = v114;
    uint64_t v52 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
    uint64_t v53 = MEMORY[0x1CB7792F0](v52);
    long long v116 = v54;
    long long v117 = (char *)v53;
    os_log_t v55 = *(void (**)(char *, unint64_t))(v120 + 8);
    unint64_t v56 = v127;
    v55(v51, v127);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
    uint64_t v125 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
    uint64_t v126 = v57;
    uint64_t v58 = v51;
    uint64_t v46 = v124;
    v55(v58, v56);
    unint64_t v49 = v116;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v122);
  }
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v59 = v123(v44, v46);
  uint64_t v60 = MEMORY[0x1CB779330](v59);
  uint64_t v61 = v119;
  os_log_t v62 = *(void (**)(char *, uint64_t))(v118 + 8);
  v62(v45, v119);
  uint64_t v63 = *(void *)(v60 + 16);
  swift_bridgeObjectRelease();
  if (v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v129 = 0;
    unint64_t v130 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v64._object = (void *)0x80000001C91A2B00;
    v64._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x80000001C91A2B20;
    String.append(_:)(v66);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
    v123(v44, v124);
    uint64_t v67 = Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest.summarizedDescription.getter();
    uint64_t v69 = v68;
    v62(v45, v61);
    v70._uint64_t countAndFlagsBits = v67;
    v70._object = v69;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = 0x5D202020200ALL;
    unint64_t v72 = 0xE600000000000000;
  }
  else
  {
    if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasError.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v129 = 0;
      unint64_t v130 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v129 = 0xD000000000000013;
      unint64_t v130 = 0x80000001C91A2B00;
      v73._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      v74._uint64_t countAndFlagsBits = 0x7265202020200A2CLL;
      v74._object = (void *)0xED0000203A726F72;
      String.append(_:)(v74);
      uint64_t v75 = v101;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.error.getter();
      uint64_t v76 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error.message.getter();
      uint64_t v78 = (void (*)(char *, unint64_t, uint64_t))v77;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v75, v103);
      uint64_t v79 = v76;
      uint64_t v80 = v78;
    }
    else
    {
      unint64_t v129 = 0;
      unint64_t v130 = 0xE000000000000000;
      _StringGuts.grow(_:)(163);
      v81._object = (void *)0x80000001C91A2B00;
      v81._uint64_t countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v81);
      v82._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      v83._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      unint64_t v127 = 0xD00000000000001CLL;
      v83._object = (void *)0x80000001C91A2B40;
      String.append(_:)(v83);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
      Double.write<A>(to:)();
      v84._uint64_t countAndFlagsBits = 0xD000000000000012;
      v84._object = (void *)0x80000001C91A2B60;
      String.append(_:)(v84);
      uint64_t v85 = v104;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
      uint64_t v86 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
      id v88 = v87;
      unint64_t v89 = *(void (**)(char *, uint64_t))(v105 + 8);
      uint64_t v90 = v106;
      v89(v85, v106);
      v91._uint64_t countAndFlagsBits = v86;
      v91._object = v88;
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      v92._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v92._object = (void *)0x80000001C91A2B80;
      String.append(_:)(v92);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
      long long v93 = v107;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.latencyInfo.getter();
      v89(v85, v90);
      uint64_t v94 = Latencyinfopb_KfedLatencyInfo.overallMs.getter();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v93, v109);
      uint64_t v128 = v94;
      v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v95);
      swift_bridgeObjectRelease();
      v96._object = (void *)0x80000001C91A2BA0;
      v96._uint64_t countAndFlagsBits = v127;
      String.append(_:)(v96);
      v97._uint64_t countAndFlagsBits = (uint64_t)v117;
      v97._object = v49;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      v98._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v98._object = (void *)0x80000001C91A2BC0;
      String.append(_:)(v98);
      uint64_t v79 = v125;
      uint64_t v80 = v126;
    }
    String.append(_:)(*(Swift::String *)&v79);
    swift_bridgeObjectRelease();
    uint64_t v71 = 32010;
    unint64_t v72 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v71);
  return v129;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest.summarizedDescription.getter()
{
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  uint64_t v0 = *(void *)(v24 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v24);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1CB779330](v1);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v7 = *(void (**)(char *, unint64_t, uint64_t))(v0 + 16);
    uint64_t v6 = v0 + 16;
    unint64_t v8 = v4 + ((*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64));
    uint64_t v22 = *(void *)(v6 + 56);
    uint64_t v23 = v7;
    uint64_t v20 = v4;
    uint64_t v21 = (void (**)(char *, uint64_t))(v6 - 8);
    do
    {
      uint64_t v9 = v24;
      uint64_t v10 = v6;
      v23(v3, v8, v24);
      uint64_t v25 = 9;
      unint64_t v26 = 0xE100000000000000;
      v11._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.summarizedDescription.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v25;
      unint64_t v12 = v26;
      (*v21)(v3, v9);
      uint64_t v14 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v27;
      }
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v14 = v27;
      }
      *(void *)(v14 + 16) = v16 + 1;
      unint64_t v17 = v14 + 16 * v16;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v12;
      v8 += v22;
      --v5;
      uint64_t v6 = v10;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  uint64_t v25 = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.summarizedDescription.getter()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  MEMORY[0x1F4188790](v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  *(void *)&long long v46 = String.init<A>(describing:)();
  *((void *)&v46 + 1) = v4;
  unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = MEMORY[0x1CB77D3C0](10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E4FBB1A0], v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v6 + 16);
  v42[1] = v6;
  if (v7)
  {
    unint64_t v8 = lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v9 = (uint64_t *)(v6 + 56);
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v42[2] = v8;
    unint64_t v43 = v5;
    do
    {
      uint64_t v11 = *(v9 - 3);
      uint64_t v12 = *(v9 - 2);
      uint64_t v13 = *(v9 - 1);
      uint64_t v14 = *v9;
      *(void *)&long long v46 = v11;
      *((void *)&v46 + 1) = v12;
      uint64_t v47 = v13;
      uint64_t v48 = v14;
      uint64_t v44 = 8250;
      unint64_t v45 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      if (StringProtocol.contains<A>(_:)())
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v49 = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1);
          uint64_t v10 = v49;
        }
        unint64_t v17 = v10[2];
        unint64_t v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          uint64_t v10 = v49;
        }
        v10[2] = v17 + 1;
        uint64_t v18 = &v10[4 * v17];
        void v18[4] = v11;
        v18[5] = v12;
        v18[6] = v13;
        v18[7] = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = v10[2];
  if (v19)
  {
    swift_retain();
    unint64_t v43 = lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v20 = v10 + 7;
    uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v23 = *v20;
      long long v46 = *(_OWORD *)(v20 - 3);
      uint64_t v47 = v22;
      uint64_t v48 = v23;
      swift_bridgeObjectRetain();
      uint64_t v24 = MEMORY[0x1CB77D3C0](58, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E4FBB7A8], v43);
      uint64_t v25 = *(void *)(v24 + 16);
      if (v25)
      {
        unint64_t v26 = (uint64_t *)(v24 + 32 * v25);
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        uint64_t v30 = v26[2];
        uint64_t v29 = v26[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v32 = v21[2];
        unint64_t v31 = v21[3];
        if (v32 >= v31 >> 1) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v21);
        }
        v21[2] = v32 + 1;
        uint64_t v33 = &v21[4 * v32];
        v33[4] = v28;
        v33[5] = v27;
        v33[6] = v30;
        v33[7] = v29;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v20 += 4;
      --v19;
    }
    while (v19);
    swift_release();
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_release();
  if (!v21[2]) {
    goto LABEL_28;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if (v21[2])
    {
LABEL_27:
      *(void *)&long long v46 = 58;
      *((void *)&v46 + 1) = 0xE100000000000000;
      uint64_t v35 = MEMORY[0x1CB77CB40](v21[4], v21[5], v21[6], v21[7]);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      uint64_t v44 = v35;
      unint64_t v45 = v37;
      *((_OWORD *)v21 + 2) = xmmword_1C919A0F0;
      v21[6] = 0;
      v21[7] = 0xE000000000000000;
      String.append<A>(contentsOf:)();
      v21[4] = MEMORY[0x1CB77D300](v44, v45);
      v21[5] = v38;
      v21[6] = v39;
      v21[7] = v40;
LABEL_28:
      *(void *)&long long v46 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [Substring] and conformance [A], &demangling cache variable for type metadata for [Substring]);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v41 = Sequence<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v41;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
    uint64_t v21 = (void *)result;
    if (*(void *)(result + 16)) {
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for PegasusProxyClient.metadata.getter in conformance PegasusProxyForAssistant()
{
  return MEMORY[0x1F413F080]();
}

uint64_t protocol witness for PegasusProxyClient.metadata.setter in conformance PegasusProxyForAssistant()
{
  return MEMORY[0x1F413F088]();
}

uint64_t PegasusProxy.enablePromptContextLogging.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PegasusProxy.enablePromptContextLogging.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t one-time initialization function for allowedClientEntityLabels()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for allowedClientEntityLabels);
  uint64_t result = swift_arrayDestroy();
  static PegasusProxy.allowedClientEntityLabels = v0;
  return result;
}

id static PegasusProxy.defaultLocationManager()@<X0>(void *a1@<X8>)
{
  v7[3] = &type metadata for FeatureFlag;
  v7[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v2 = swift_allocObject();
  v7[0] = v2;
  *(void *)(v2 + 16) = 4;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 3;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (v3)
  {
    uint64_t v4 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    id result = (id)AssistantLocationProvider.init(serviceHelper:)(0);
    a1[3] = v4;
    a1[4] = &protocol witness table for AssistantLocationProvider;
    *a1 = result;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v6 = (id)static PommesLocationManager.shared;
    a1[3] = type metadata accessor for PommesLocationManager(0);
    a1[4] = &protocol witness table for PommesLocationManager;
    *a1 = v6;
    return v6;
  }
  return result;
}

uint64_t key path setter for PegasusProxy.client : PegasusProxy(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v3 + 80) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t PegasusProxy.locationManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 96, a1);
}

uint64_t PegasusProxy.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t PegasusProxy.phoneCallStateManager.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*PegasusProxy.phoneCallStateManager.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue()
{
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCB40], v0);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v4 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v5);
  v10[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB100]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, void))(v8 + 104))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t PegasusProxy.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PegasusProxy.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t (*default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)())()
{
  return closure #1 in default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:);
}

uint64_t closure #1 in default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  return static PegasusProxyForAssistant.shared.getter();
}

uint64_t PegasusProxy.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  outlined init with copy of AppDataProviding(a8, (uint64_t)v45);
  outlined init with copy of AppDataProviding(a12, (uint64_t)v44);
  swift_retain();
  id v17 = a11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
  type metadata accessor for AppDataProvider();
  uint64_t v19 = swift_allocObject();
  *((void *)&v42 + 1) = &type metadata for PommesSystemAppChecking;
  unint64_t v43 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v19 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v41, v19 + 16);
  unint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v20 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v19, 0, 0, (uint64_t)&v41);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v41, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  type metadata accessor for MarketplaceInfoDataProvider();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = v21 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v23 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  uint64_t v31 = specialized AnyDataProvider.init<A>(provider:)(v21);
  type metadata accessor for PairedDeviceDataProvider();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  uint64_t v25 = specialized AnyDataProvider.init<A>(provider:)(v24);
  type metadata accessor for SiriEnvironment();
  uint64_t v29 = static SiriEnvironment.default.getter();
  type metadata accessor for DataProviderManager();
  uint64_t v26 = swift_allocObject();
  uint64_t v30 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(a1, a2, a3, v18, v20, a4, v31, v25, a14, v17, v29, 0, 0, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined init with copy of AppDataProviding(a13, (uint64_t)&v41);
  uint64_t v39 = &type metadata for PIMSEnablementProvider;
  uint64_t v40 = &protocol witness table for PIMSEnablementProvider;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, unsigned char *, uint64_t, unsigned char *, uint64_t, long long *))(v33 + 496))(a6, a7, v45, a9, v38, a10, v44, v30, &v41);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a13);
  __swift_destroy_boxed_opaque_existential_1(a12);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v27;
}

uint64_t PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v27 = a1;
  uint64_t v28 = a3;
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v26 = *(void *)(a5 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t v19 = *(void *)(a9 + 24);
  uint64_t v18 = *(void *)(a9 + 32);
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1(a9, v19);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(v27, a2, v28, a4, (uint64_t)v16, a6, v30, v31, (uint64_t)v22, v29, v19, v13, v18, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v24;
}

uint64_t PegasusProxy.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  (*(void (**)(void))(**(void **)(v1 + 184) + 272))();
  type metadata accessor for PommesPhoneCallStateManager();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 3;
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = *(void (**)(uint64_t))(*v2 + 360);
  swift_unknownObjectRetain();
  v5(v4);
  uint64_t v6 = v2 + 12;
  uint64_t v8 = v2[15];
  uint64_t v7 = v2[16];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, v8, v7);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v1 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v20 - v5;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v7 = &v6[v1[5]];
  *(void *)uint64_t v7 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v7 + 1) = 40;
  v7[16] = 2;
  *(void *)&v6[v1[6]] = 336;
  uint64_t v8 = &v6[v1[7]];
  *(void *)uint64_t v8 = "prepareForSearchAtSessionStart()";
  *((void *)v8 + 1) = 32;
  v8[16] = 2;
  uint64_t v9 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000026);
  uint64_t v10 = (uint64_t *)&v6[v1[8]];
  *uint64_t v10 = v9;
  v10[1] = v11;
  (*(void (**)(void))(**(void **)(v0 + 184) + 296))();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v6, 0);
  Date.init()();
  uint64_t v12 = &v4[v1[5]];
  *(void *)uint64_t v12 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v12 + 1) = 40;
  unsigned char v12[16] = 2;
  *(void *)&v4[v1[6]] = 340;
  uint64_t v13 = &v4[v1[7]];
  *(void *)uint64_t v13 = "prepareForSearchAtSessionStart()";
  *((void *)v13 + 1) = 32;
  v13[16] = 2;
  uint64_t v14 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000021);
  uint64_t v15 = (uint64_t *)&v4[v1[8]];
  *uint64_t v15 = v14;
  v15[1] = v16;
  (*(void (**)(void))(*(void *)v0 + 328))();
  uint64_t v18 = v17;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v18 + 56))(ObjectType, v18);
  swift_unknownObjectRelease();
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v4, 0);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v4, type metadata accessor for PerformanceUtil.Ticket);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v6, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C8F83000, v6, v7, "Fetching location", v8, 2u);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }

  Date.init()();
  uint64_t v9 = &v4[v2[5]];
  *(void *)uint64_t v9 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v9 + 1) = 40;
  v9[16] = 2;
  *(void *)&v4[v2[6]] = 348;
  uint64_t v10 = &v4[v2[7]];
  *(void *)uint64_t v10 = "prepareForSearchAtRequestStart()";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  uint64_t v11 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  uint64_t v12 = (uint64_t *)&v4[v2[8]];
  *uint64_t v12 = v11;
  v12[1] = v13;
  uint64_t v14 = v1 + 12;
  uint64_t v16 = v1[15];
  uint64_t v15 = v1[16];
  __swift_project_boxed_opaque_existential_1(v14, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
  swift_release();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v4, 0);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v4, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart(requestId:)(Swift::String requestId)
{
  (*(void (**)(uint64_t, void *, void))(*(void *)v1 + 536))(requestId._countAndFlagsBits, requestId._object, 0);
}

Swift::Void __swiftcall PegasusProxy.tearDown()()
{
  uint64_t v51 = type metadata accessor for Google_Protobuf_Duration();
  uint64_t v1 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  unint64_t v57 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Apple_Parsec_Search_LRConversationThread();
  uint64_t v3 = *(void *)(v47 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v47);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(**(void **)(v0 + 184) + 312))(v11);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
  unint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8);
  *(_OWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C91991D0;
  outlined consume of Data?(v14, v15);
  uint64_t v16 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v16, v9);
  uint64_t v17 = Apple_Parsec_Search_SearchConversationContext.lrcThreads.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v19 = *(void *)(v17 + 16);
  if (v19)
  {
    uint64_t v43 = v16;
    uint64_t v44 = v13;
    uint64_t v45 = v10;
    uint64_t v46 = v9;
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v20 = v3 + 16;
    unint64_t v22 = (*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64);
    uint64_t v42 = v17;
    unint64_t v23 = v17 + v22;
    uint64_t v24 = *(void *)(v20 + 56);
    unint64_t v54 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v55 = v24;
    unint64_t v56 = (void (**)(char *, uint64_t))(v20 - 8);
    *(void *)&long long v18 = 136315138;
    long long v50 = v18;
    uint64_t v25 = v51;
    uint64_t v26 = v47;
    uint64_t v27 = v8;
    uint64_t v28 = v21;
    uint64_t v52 = v21;
    uint64_t v53 = v20;
    uint64_t v48 = v27;
    uint64_t v49 = MEMORY[0x1E4FBC840] + 8;
    v21(v27, (char *)(v17 + v22), v47);
    while (1)
    {
      uint64_t v29 = v57;
      Apple_Parsec_Search_LRConversationThread.longPersistenceTtl.getter();
      uint64_t v30 = Google_Protobuf_Duration.seconds.getter();
      (*v54)(v29, v25);
      if (v30 <= 0)
      {
        (*v56)(v27, v26);
      }
      else
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
        v28(v6, v27, v26);
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          v58[0] = v35;
          *(_DWORD *)uint64_t v34 = v50;
          uint64_t v36 = Apple_Parsec_Search_LRConversationThread.id.getter();
          *(void *)(v34 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v58);
          swift_bridgeObjectRelease();
          uint64_t v38 = *v56;
          (*v56)(v6, v26);
          _os_log_impl(&dword_1C8F83000, v32, v33, "Long-Running Conversation Thread %s requires disk persistence (currently unsupported).", (uint8_t *)v34, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v35, -1, -1);
          uint64_t v39 = v34;
          uint64_t v25 = v51;
          MEMORY[0x1CB77E470](v39, -1, -1);

          uint64_t v40 = v48;
          v38(v48, v26);
          uint64_t v28 = v52;
          uint64_t v27 = v40;
        }
        else
        {

          long long v41 = *v56;
          (*v56)(v6, v26);
          v41(v27, v26);
          uint64_t v28 = v52;
        }
      }
      v23 += v55;
      if (!--v19) {
        break;
      }
      v28(v27, (char *)v23, v26);
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v45;
    uint64_t v9 = v46;
    uint64_t v13 = v44;
    uint64_t v16 = v43;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  Apple_Parsec_Search_SearchConversationContext.init()();
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v16, v13, v9);
  swift_endAccess();
}

uint64_t closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v82 = a6;
  Swift::String v83 = (uint64_t *)a3;
  uint64_t v84 = a4;
  uint64_t v85 = a5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  unint64_t v89 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for PommesCandidateId();
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v10 = *(void *)(v86 + 64);
  MEMORY[0x1F4188790](v88);
  uint64_t v87 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v70 - v15;
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  uint64_t v17 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
    int v19 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v14, v17);
    BOOL v20 = v19 == *MEMORY[0x1E4F88610];
    uint64_t v81 = v8;
    if (v20)
    {
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong)
      {
LABEL_10:
        (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v17);
        return outlined destroy of MediaUserStateCenter?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
      }
      uint64_t v77 = v18;
      uint64_t v78 = v17;
      uint64_t v79 = v14;
      Swift::String v74 = (char *)*(id *)(Strong + 152);
      swift_release();
      id v80 = (id)swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      uint64_t v76 = &v70;
      uint64_t v70 = *(void *)(v22 - 8);
      uint64_t v23 = *(void *)(v70 + 64);
      MEMORY[0x1F4188790](v22 - 8);
      uint64_t v73 = (uint64_t)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v83, v73, &demangling cache variable for type metadata for UUID?);
      uint64_t v24 = type metadata accessor for UUID();
      Swift::String v83 = &v70;
      uint64_t v71 = v24;
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = v25;
      uint64_t v27 = v7;
      uint64_t v75 = v7;
      uint64_t v28 = *(void *)(v25 + 64);
      MEMORY[0x1F4188790](v24);
      unint64_t v72 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(void))(v26 + 16))();
      uint64_t v29 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v87, v85, v88);
      uint64_t v30 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v89, a1, v27);
      unint64_t v31 = (*(unsigned __int8 *)(v70 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      unint64_t v32 = (v23 + *(unsigned __int8 *)(v26 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      unint64_t v33 = (v28 + *(unsigned __int8 *)(v29 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      unint64_t v34 = (v10 + *(unsigned __int8 *)(v30 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v80;
      outlined init with take of PommesSearchReason?(v73, v35 + v31, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v35 + v32, v72, v71);
      (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v87, v88);
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v35 + v34, v89, v75);
      *(void *)(v35 + ((v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8)) = v82;
      Swift::String v95 = partial apply for closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:);
      uint64_t v96 = v35;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v92 = 1107296256;
      long long v93 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      uint64_t v94 = &block_descriptor_79;
      uint64_t v36 = _Block_copy(&aBlock);
      uint64_t v88 = type metadata accessor for DispatchQoS();
      unint64_t v89 = (char *)&v70;
      uint64_t v37 = *(void *)(v88 - 8);
      MEMORY[0x1F4188790](v88);
      uint64_t v39 = (char *)&v70 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v87 = (char *)&v70;
      uint64_t v41 = *(void *)(v40 - 8);
      MEMORY[0x1F4188790](v40);
      uint64_t v43 = (char *)&v70 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v90 = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF30]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v44 = v74;
      MEMORY[0x1CB77D180](0, v39, v43, v36);
      _Block_release(v36);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v88);
    }
    else
    {
      if (v19 != *MEMORY[0x1E4F88608]) {
        goto LABEL_10;
      }
      swift_beginAccess();
      uint64_t v45 = swift_weakLoadStrong();
      if (!v45) {
        goto LABEL_10;
      }
      uint64_t v77 = v18;
      uint64_t v78 = v17;
      uint64_t v79 = v14;
      id v80 = *(id *)(v45 + 152);
      swift_release();
      uint64_t v82 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      uint64_t v76 = &v70;
      uint64_t v73 = *(void *)(v46 - 8);
      uint64_t v47 = *(void *)(v73 + 64);
      MEMORY[0x1F4188790](v46 - 8);
      Swift::String v74 = (char *)&v70 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v83, (uint64_t)v74, &demangling cache variable for type metadata for UUID?);
      uint64_t v48 = type metadata accessor for UUID();
      Swift::String v83 = &v70;
      uint64_t v71 = v48;
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v50 = v49;
      uint64_t v51 = v7;
      uint64_t v75 = v7;
      uint64_t v52 = *(void *)(v49 + 64);
      MEMORY[0x1F4188790](v48);
      unint64_t v72 = (char *)&v70 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(void))(v50 + 16))();
      uint64_t v53 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v87, v85, v88);
      uint64_t v54 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v89, a1, v51);
      unint64_t v55 = (*(unsigned __int8 *)(v73 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      unint64_t v56 = (v47 + *(unsigned __int8 *)(v50 + 80) + v55) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      unint64_t v57 = (v52 + *(unsigned __int8 *)(v53 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      unint64_t v58 = (v10 + *(unsigned __int8 *)(v54 + 80) + v57) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = v82;
      outlined init with take of PommesSearchReason?((uint64_t)v74, v59 + v55, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v59 + v56, v72, v71);
      (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v59 + v57, v87, v88);
      (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v59 + v58, v89, v75);
      Swift::String v95 = partial apply for closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:);
      uint64_t v96 = v59;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v92 = 1107296256;
      long long v93 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      uint64_t v94 = &block_descriptor_72;
      uint64_t v60 = _Block_copy(&aBlock);
      uint64_t v88 = type metadata accessor for DispatchQoS();
      unint64_t v89 = (char *)&v70;
      uint64_t v61 = *(void *)(v88 - 8);
      MEMORY[0x1F4188790](v88);
      uint64_t v63 = (char *)&v70 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v64 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v87 = (char *)&v70;
      uint64_t v65 = *(void *)(v64 - 8);
      MEMORY[0x1F4188790](v64);
      uint64_t v67 = (char *)&v70 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v90 = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF30]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      char v68 = v80;
      MEMORY[0x1CB77D180](0, v63, v67, v60);
      _Block_release(v60);

      (*(void (**)(char *, uint64_t))(v65 + 8))(v67, v64);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v88);
    }
    swift_release();
    swift_release();
    uint64_t v14 = v79;
    uint64_t v17 = v78;
    uint64_t v18 = v77;
    goto LABEL_10;
  }
  return outlined destroy of MediaUserStateCenter?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
}

uint64_t closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t started = type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback();
  uint64_t v11 = *(void *)(started - 8);
  MEMORY[0x1F4188790](started);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v27 = a2;
    uint64_t v18 = *(void *)(result + 176);
    swift_retain();
    swift_release();
    uint64_t v19 = type metadata accessor for PommesCandidateId();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v28 = started;
    uint64_t v21 = a3;
    uint64_t v22 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, a4, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v19);
    Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.getter();
    swift_beginAccess();
    uint64_t v23 = *(void *)(a6 + 16);
    uint64_t v24 = *(void *)(a6 + 24);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(*(void *)v18 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v27, v21, v16, v13, v23, v24);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesCandidateId?);
  }
  return result;
}

uint64_t closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = *(void *)(result + 176);
    swift_retain();
    swift_release();
    uint64_t v16 = type metadata accessor for PommesCandidateId();
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v13, a4, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v16);
    Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.getter();
    (*(void (**)(uint64_t, uint64_t, char *, char *))(*(void *)v15 + 184))(a2, v17, v13, v10);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
  }
  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(void (*a1)(char *, char *, void *), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(unsigned char *), uint64_t a12)
{
  uint64_t v297 = a7;
  uint64_t v296 = a6;
  uint64_t v329 = a5;
  uint64_t v331 = a4;
  uint64_t v330 = a3;
  uint64_t v336 = a2;
  BOOL v328 = a1;
  uint64_t v322 = a12;
  uint64_t v323 = a11;
  uint64_t v319 = a10;
  uint64_t v312 = (void *)type metadata accessor for PegasusProxyForAssistant.Error();
  uint64_t v333 = *(v312 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v312);
  uint64_t v314 = (char *)v279 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v313 = (char *)v279 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v279 - v16;
  uint64_t v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  MEMORY[0x1F4188790](v320);
  uint64_t v321 = (char *)v279 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v284 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v284);
  uint64_t v285 = (char *)v279 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v307 = type metadata accessor for JSONEncodingOptions();
  uint64_t v306 = *(void *)(v307 - 8);
  MEMORY[0x1F4188790](v307);
  unint64_t v316 = (char *)v279 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v310 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  uint64_t v317 = *(void *)(v310 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v310);
  unint64_t v309 = (char *)v279 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v308 = (char *)v279 - v23;
  uint64_t v303 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v302 = *(void *)(v303 - 8);
  MEMORY[0x1F4188790](v303);
  uint64_t v283 = (char *)v279 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v293 = type metadata accessor for Latencyinfopb_KfedLatencyInfo();
  uint64_t v292 = *(void *)(v293 - 8);
  MEMORY[0x1F4188790](v293);
  unint64_t v291 = (char *)v279 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v304 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v295 = *(void *)(v304 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v304);
  uint64_t v289 = (char *)v279 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v294 = (char *)v279 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v290 = (char *)v279 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v287 = *(void *)(v288 - 8);
  MEMORY[0x1F4188790](v288);
  uint64_t v286 = (char *)v279 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v32 - 8);
  unint64_t v334 = (char *)v279 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v325 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v34 = MEMORY[0x1F4188790](v325);
  os_log_type_t v305 = (char *)v279 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  unint64_t v318 = (char *)v279 - v36;
  uint64_t v332 = (void *)type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  uint64_t v327 = *(v332 - 1);
  uint64_t v37 = MEMORY[0x1F4188790](v332);
  os_log_type_t v311 = (char *)v279 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  id v324 = (char *)v279 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v42 = (char *)v279 - v41;
  uint64_t v326 = 0;
  uint64_t v43 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v299 = (char *)v279 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  id v300 = (char *)v279 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v51 = (char *)v279 - v50;
  MEMORY[0x1F4188790](v49);
  uint64_t v53 = (char *)v279 - v52;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>);
  MEMORY[0x1F4188790](v54);
  unint64_t v56 = (char *)v279 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v301 = swift_projectBox();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v328, (uint64_t)v56, &demangling cache variable for type metadata for Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v57 = v333;
    uint64_t v58 = v333 + 32;
    uint64_t v59 = v312;
    uint64_t v332 = *(void **)(v333 + 32);
    ((void (*)(char *, char *, void *))v332)(v17, v56, v312);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v60, (uint64_t)static Signposter.pommes);
    OSSignposter.end(token:message:)(v319, 0x726F727265, 0xE500000000000000);
    uint64_t v61 = (uint64_t)v318;
    uint64_t v62 = v313;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
    uint64_t v64 = *(void (**)(char *, char *, void *))(v57 + 16);
    v335 = v17;
    BOOL v328 = v64;
    v64(v62, v17, v59);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = v62;
      char v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      uint64_t v327 = v58;
      uint64_t v70 = v59;
      uint64_t v71 = v69;
      aBlock[0] = v69;
      *(_DWORD *)char v68 = 136315138;
      uint64_t v326 = v68 + 4;
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type PegasusProxyForAssistant.Error and conformance PegasusProxyForAssistant.Error, MEMORY[0x1E4F89BF8]);
      uint64_t v72 = Error.localizedDescription.getter();
      uint64_t v337 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Swift::String v74 = *(void (**)(char *, void *))(v333 + 8);
      v74(v67, v70);
      _os_log_impl(&dword_1C8F83000, v65, v66, "Pegasus error on client.searchResponsePublisher: %s", v68, 0xCu);
      swift_arrayDestroy();
      uint64_t v75 = v71;
      uint64_t v59 = v70;
      MEMORY[0x1CB77E470](v75, -1, -1);
      MEMORY[0x1CB77E470](v68, -1, -1);
    }
    else
    {
      Swift::String v74 = *(void (**)(char *, void *))(v57 + 8);
      v74(v62, v59);
    }

    Date.init()();
    unint64_t v89 = v325;
    uint64_t v90 = v61 + v325[5];
    *(void *)uint64_t v90 = "SiriInformationSearch/PegasusProxy.swift";
    *(void *)(v90 + 8) = 40;
    *(unsigned char *)(v90 + 16) = 2;
    *(void *)(v61 + v89[6]) = 561;
    uint64_t v91 = v61 + v89[7];
    *(void *)uint64_t v91 = "search(pommesSearchRequest:completion:)";
    *(void *)(v91 + 8) = 39;
    *(unsigned char *)(v91 + 16) = 2;
    uint64_t v92 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
    long long v93 = (uint64_t *)(v61 + v89[8]);
    *long long v93 = v92;
    v93[1] = v94;
    Swift::String v95 = v314;
    uint64_t v96 = v335;
    v328(v314, v335, v59);
    _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type PegasusProxyForAssistant.Error and conformance PegasusProxyForAssistant.Error, MEMORY[0x1E4F89BF8]);
    Swift::String v97 = (void *)swift_allocError();
    ((void (*)(uint64_t, char *, void *))v332)(v98, v95, v59);
    long long v99 = (void *)_convertErrorToNSError(_:)();
    id v100 = objc_msgSend(v99, sel_code);

    uint64_t v101 = (uint64_t)v336;
    uint64_t v102 = v336[22];
    uint64_t v103 = type metadata accessor for PommesCandidateId();
    uint64_t v104 = *(void *)(v103 - 8);
    uint64_t v105 = (uint64_t)v334;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v334, v329, v103);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v103);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, void))(*(void *)v102 + 152))(v330, v331, v105, 1, v100, 0);
    outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for PommesCandidateId?);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v61, 0);
    uint64_t v106 = v321;
    *uint64_t v321 = 3;
    swift_storeEnumTagMultiPayload();
    v323(v106);
    outlined destroy of MediaUserStateCenter?((uint64_t)v106, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v61, type metadata accessor for PerformanceUtil.Ticket);
    v74(v96, v59);
    goto LABEL_73;
  }
  uint64_t v76 = v336;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v53, v56, v43);
  uint64_t v77 = v44;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v78 = type metadata accessor for Logger();
  uint64_t v79 = __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
  id v80 = *(void **)(v44 + 16);
  v335 = v53;
  uint64_t v313 = (char *)(v44 + 16);
  uint64_t v312 = v80;
  ((void (*)(char *, char *, uint64_t))v80)(v51, v53, v43);
  uint64_t v333 = v79;
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.debug.getter();
  BOOL v83 = os_log_type_enabled(v81, v82);
  uint64_t v315 = v43;
  uint64_t v84 = v76;
  uint64_t v298 = v77;
  if (v83)
  {
    uint64_t v85 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    aBlock[0] = v86;
    *(_DWORD *)uint64_t v85 = 136315138;
    unint64_t v87 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter();
    uint64_t v337 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v298 + 8))(v51, v315);
    _os_log_impl(&dword_1C8F83000, v81, v82, "Pegasus: PegasusResponse: %s", v85, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v86, -1, -1);
    MEMORY[0x1CB77E470](v85, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v43);
  }

  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  uint64_t v107 = v327;
  uint64_t v108 = v332;
  int v109 = (*(uint64_t (**)(char *, void *))(v327 + 88))(v42, v332);
  int v110 = *MEMORY[0x1E4F88CE0];
  uint64_t v314 = *(char **)(v107 + 8);
  ((void (*)(char *, void *))v314)(v42, v108);
  BOOL v111 = v109 == v110;
  uint64_t v112 = v317;
  long long v113 = v316;
  BOOL v328 = (void (*)(char *, char *, void *))(v107 + 8);
  if (v111)
  {
    long long v114 = v84;
    uint64_t v115 = (uint64_t)v318;
    Date.init()();
    long long v116 = v325;
    uint64_t v117 = v115 + v325[5];
    *(void *)uint64_t v117 = "SiriInformationSearch/PegasusProxy.swift";
    *(void *)(v117 + 8) = 40;
    *(unsigned char *)(v117 + 16) = 2;
    *(void *)(v115 + v116[6]) = 497;
    uint64_t v118 = v115 + v116[7];
    *(void *)uint64_t v118 = "search(pommesSearchRequest:completion:)";
    *(void *)(v118 + 8) = 39;
    *(unsigned char *)(v118 + 16) = 2;
    uint64_t v119 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
    uint64_t v120 = (uint64_t *)(v115 + v116[8]);
    uint64_t *v120 = v119;
    v120[1] = v121;
    uint64_t v122 = v114;
    uint64_t v123 = v114[22];
    uint64_t v124 = type metadata accessor for PommesCandidateId();
    uint64_t v125 = *(void *)(v124 - 8);
    uint64_t v126 = (uint64_t)v334;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v334, v329, v124);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v126, 0, 1, v124);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v123 + 152))(v330, v331, v126, 5, 0, 1);
    outlined destroy of MediaUserStateCenter?(v126, &demangling cache variable for type metadata for PommesCandidateId?);
    unint64_t v127 = v326;
    uint64_t v128 = v309;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v115, 0);
    goto LABEL_38;
  }
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
  unint64_t v129 = v326;
  unint64_t v130 = Message.serializedData(partial:)();
  if (v129)
  {

    uint64_t v132 = 0;
    uint64_t v326 = 0;
  }
  else
  {
    unint64_t v174 = v131;
    uint64_t v175 = v130;
    uint64_t v326 = 0;
    switch(v131 >> 62)
    {
      case 1uLL:
        unint64_t v276 = HIDWORD(v130);
        outlined consume of Data._Representation(v130, v131);
        LODWORD(v132) = v276 - v175;
        if (__OFSUB__(v276, v175)) {
          goto LABEL_82;
        }
        uint64_t v132 = (int)v132;
        break;
      case 2uLL:
        uint64_t v278 = *(void *)(v130 + 16);
        uint64_t v277 = *(void *)(v130 + 24);
        outlined consume of Data._Representation(v130, v131);
        uint64_t v132 = v277 - v278;
        if (!__OFSUB__(v277, v278)) {
          break;
        }
        __break(1u);
LABEL_79:
        outlined consume of Data._Representation(v175, v174);
        uint64_t v132 = 0;
        break;
      case 3uLL:
        goto LABEL_79;
      default:
        outlined consume of Data._Representation(v130, v131);
        uint64_t v132 = BYTE6(v174);
        break;
    }
  }
  double v133 = (double)v132 * 0.0009765625;
  uint64_t v134 = v305;
  Date.init()();
  uint64_t v135 = v325;
  id v136 = &v134[v325[5]];
  *(void *)id v136 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v136 + 1) = 40;
  v136[16] = 2;
  *(void *)&v134[v135[6]] = 507;
  uint64_t v137 = &v134[v135[7]];
  *(void *)uint64_t v137 = "search(pommesSearchRequest:completion:)";
  *((void *)v137 + 1) = 39;
  v137[16] = 2;
  uint64_t v138 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002ALL);
  uint64_t v139 = (uint64_t *)&v134[v135[8]];
  *uint64_t v139 = v138;
  v139[1] = v140;
  uint64_t v325 = (int *)v84[22];
  uint64_t v141 = type metadata accessor for PommesCandidateId();
  uint64_t v142 = *(void *)(v141 - 8);
  uint64_t v143 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
  uint64_t v144 = v334;
  v279[1] = v142 + 16;
  v279[0] = v143;
  v143(v334, v329, v141);
  os_log_type_t v145 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v142 + 56);
  uint64_t v282 = v141;
  uint64_t v281 = v142 + 56;
  uint64_t v280 = v145;
  v145((uint64_t)v144, 0, 1, v141);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  double v147 = v146;
  uint64_t v148 = v286;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v149 = (uint64_t)v290;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  (*(void (**)(char *, uint64_t))(v287 + 8))(v148, v288);
  os_log_type_t v150 = v294;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  unint64_t v318 = (char *)Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  uint64_t v152 = v151;
  char v153 = *(void (**)(char *, uint64_t))(v295 + 8);
  uint64_t v154 = v304;
  v153(v150, v304);
  char v155 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasRewrittenUtteranceIdx.getter();
  uint64_t v156 = v289;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v157 = v291;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.latencyInfo.getter();
  v153(v156, v154);
  id v158 = v325;
  uint64_t v159 = v155 & 1;
  uint64_t v160 = (uint64_t)v334;
  uint64_t v161 = v324;
  (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t, char *, uint64_t, uint64_t, double, double, char *))(*(void *)v325 + 144))(v330, v331, v334, v324, v149, v318, v152, v159, v147, v133, v157);
  swift_bridgeObjectRelease();
  char v162 = v157;
  id v163 = v158;
  (*(void (**)(char *, uint64_t))(v292 + 8))(v162, v293);
  outlined destroy of MediaUserStateCenter?(v149, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  ((void (*)(char *, void *))v314)(v161, v332);
  outlined destroy of MediaUserStateCenter?(v160, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v164 - 8);
  id v166 = (char *)v279 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v167 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusSelfOpaquePayloads.getter();
  uint64_t v168 = v304;
  v153(v150, v304);
  (*(void (**)(char *, uint64_t))(*(void *)v158 + 160))(v166, v167);
  uint64_t v169 = v335;
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v166, &demangling cache variable for type metadata for UUID?);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v170 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  uint64_t v172 = v171;
  v153(v150, v168);
  if (v170 == 1936744813 && v172 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v122 = v336;
LABEL_34:
    uint64_t v177 = (uint64_t)v334;
    uint64_t v178 = v282;
    ((void (*)(char *, uint64_t, uint64_t))v279[0])(v334, v329, v282);
    v280(v177, 0, 1, v178);
    uint64_t v179 = v301;
    swift_beginAccess();
    uint64_t v180 = v302;
    int v181 = v283;
    uint64_t v182 = v303;
    (*(void (**)(char *, uint64_t, uint64_t))(v302 + 16))(v283, v179, v303);
    uint64_t v183 = type metadata accessor for PommesSearchRequest(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, char *, uint64_t))(*(void *)v163 + 168))(v330, v331, v177, v181, v169, a9 + *(int *)(v183 + 44));
    (*(void (**)(char *, uint64_t))(v180 + 8))(v181, v182);
    outlined destroy of MediaUserStateCenter?(v177, &demangling cache variable for type metadata for PommesCandidateId?);
    goto LABEL_35;
  }
  char v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v122 = v336;
  if ((v173 & 1) != 0 || v170 == 7300455 && v172 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  char v176 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v176) {
    goto LABEL_34;
  }
LABEL_35:
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v115 = (uint64_t)v305;
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v305, 0);
  unint64_t v127 = v326;
  uint64_t v112 = v317;
  long long v113 = v316;
  uint64_t v128 = v309;
LABEL_38:
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v115, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t v184 = Logger.logObject.getter();
  os_log_type_t v185 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v184, v185))
  {
    uint64_t v186 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v186 = 0;
    _os_log_impl(&dword_1C8F83000, v184, v185, "Saving SearchConversationContext from Pegasus response", v186, 2u);
    MEMORY[0x1CB77E470](v186, -1, -1);
  }

  BOOL v187 = v308;
  uint64_t v188 = v335;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchConversationContext.getter();
  int v189 = (char *)v122 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  uint64_t v190 = v310;
  (*(void (**)(char *, char *, uint64_t))(v112 + 40))(v189, v187, v310);
  swift_endAccess();
  uint64_t v191 = v189;
  uint64_t v192 = v190;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v128, v191, v190);
  JSONEncodingOptions.init()();
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Search_SearchConversationContext and conformance Apple_Parsec_Search_SearchConversationContext, MEMORY[0x1E4F88600]);
  os_log_type_t v193 = v128;
  uint64_t v194 = Message.jsonString(options:)();
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v306 + 8))(v113, v307);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v128, v192);
    uint64_t v196 = Logger.logObject.getter();
    os_log_type_t v197 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v196, v197))
    {
      uint64_t v198 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v198 = 0;
      _os_log_impl(&dword_1C8F83000, v196, v197, "Could not convert SearchConversationContext to JSON after Pegasus response", v198, 2u);
      MEMORY[0x1CB77E470](v198, -1, -1);
    }
  }
  else
  {
    uint64_t v199 = v194;
    unint64_t v200 = v195;
    (*(void (**)(char *, uint64_t))(v306 + 8))(v113, v307);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v193, v192);
    swift_bridgeObjectRetain();
    uint64_t v201 = Logger.logObject.getter();
    uint64_t v202 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v201, (os_log_type_t)v202))
    {
      uint64_t v203 = (uint8_t *)swift_slowAlloc();
      uint64_t v204 = swift_slowAlloc();
      aBlock[0] = v204;
      *(_DWORD *)uint64_t v203 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v337 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v199, v200, aBlock);
      uint64_t v188 = v335;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v201, (os_log_type_t)v202, "SearchConversationContext JSON after Pegasus response: %s", v203, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v204, -1, -1);
      MEMORY[0x1CB77E470](v203, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v205 = v311;
  uint64_t v206 = v327;
  int v207 = v324;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  uint64_t v208 = *MEMORY[0x1E4F88CF8];
  uint64_t v209 = v332;
  unint64_t v334 = *(char **)(v206 + 104);
  ((void (*)(char *, uint64_t, void *))v334)(v205, v208, v332);
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode, MEMORY[0x1E4F88D00]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v210 = aBlock[0];
  uint64_t v211 = v337;
  v212 = v188;
  uint64_t v213 = (void (*)(char *, void *))v314;
  ((void (*)(char *, void *))v314)(v205, v209);
  v213(v207, v209);
  if (v210 == v211)
  {
    uint64_t v214 = v300;
    uint64_t v215 = v315;
    ((void (*)(char *, char *, uint64_t))v312)(v300, v212, v315);
    uint64_t v216 = Logger.logObject.getter();
    os_log_type_t v217 = static os_log_type_t.debug.getter();
    BOOL v218 = os_log_type_enabled(v216, v217);
    uint64_t v101 = (uint64_t)v336;
    uint64_t v219 = v212;
    if (v218)
    {
      uint64_t v220 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v220 = 134217984;
      unint64_t v221 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
      uint64_t v223 = v298;
      int v224 = v221;
      unsigned __int8 v225 = BYTE6(v222);
      switch(v222 >> 62)
      {
        case 1uLL:
          unint64_t v243 = HIDWORD(v221);
          outlined consume of Data._Representation(v221, v222);
          if (__OFSUB__(v243, v224))
          {
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
            JUMPOUT(0x1C9128E1CLL);
          }
          uint64_t v226 = (int)v243 - v224;
          uint64_t v215 = v315;
LABEL_66:
          unint64_t v334 = *(char **)(v223 + 8);
          ((void (*)(char *, uint64_t))v334)(v300, v215);
          aBlock[0] = v226;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C8F83000, v216, v217, "Stashing persistent Pegasus conversation context (%ld bytes)", v220, 0xCu);
          MEMORY[0x1CB77E470](v220, -1, -1);
          break;
        case 2uLL:
          uint64_t v245 = *(void *)(v221 + 16);
          uint64_t v244 = *(void *)(v221 + 24);
          outlined consume of Data._Representation(v221, v222);
          uint64_t v226 = v244 - v245;
          if (__OFSUB__(v244, v245)) {
            goto LABEL_81;
          }
          uint64_t v215 = v315;
          uint64_t v219 = v335;
          goto LABEL_66;
        case 3uLL:
          outlined consume of Data._Representation(v221, v222);
          uint64_t v226 = 0;
          goto LABEL_66;
        default:
          outlined consume of Data._Representation(v221, v222);
          uint64_t v226 = v225;
          goto LABEL_66;
      }
    }
    else
    {
      unint64_t v334 = *(char **)(v298 + 8);
      ((void (*)(char *, uint64_t))v334)(v214, v215);
    }

    uint64_t v246 = v299;
    ((void (*)(char *, char *, uint64_t))v312)(v299, v219, v215);
    int v247 = Logger.logObject.getter();
    os_log_type_t v248 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v247, v248))
    {
      uint64_t v249 = (uint8_t *)swift_slowAlloc();
      uint64_t v333 = swift_slowAlloc();
      aBlock[0] = v333;
      *(_DWORD *)uint64_t v249 = 136315138;
      uint64_t v332 = v249 + 4;
      uint64_t v250 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
      unint64_t v252 = v251;
      Swift::String v253 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v250, v252);
      uint64_t v219 = v335;
      uint64_t v337 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v253._countAndFlagsBits, (unint64_t)v253._object, aBlock);
      uint64_t v215 = v315;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v254 = v334;
      ((void (*)(char *, uint64_t))v334)(v299, v215);
      _os_log_impl(&dword_1C8F83000, v247, v248, "Pegasus conversation context bytes: %s", v249, 0xCu);
      uint64_t v255 = v333;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v255, -1, -1);
      MEMORY[0x1CB77E470](v249, -1, -1);
    }
    else
    {
      int v254 = v334;
      ((void (*)(char *, uint64_t))v334)(v246, v215);
    }

    uint64_t v256 = v319;
    uint64_t v257 = (uint64_t)v285;
    uint64_t v258 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
    uint64_t v259 = (uint64_t *)(v101 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
    uint64_t v260 = *(void *)(v101 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
    unint64_t v261 = *(void *)(v101
                     + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                     + 8);
    *uint64_t v259 = v258;
    v259[1] = v262;
    outlined consume of Data?(v260, v261);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v263 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v263, (uint64_t)static Signposter.pommes);
    OSSignposter.end(token:message:)(v256, 0x73736563637573, 0xE700000000000000);
    uint64_t v264 = v301;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v302 + 16))(v257, v264, v303);
    ((void (*)(uint64_t, char *, uint64_t))v312)(v257 + *(int *)(v284 + 20), v219, v215);
    uint64_t v265 = v321;
    _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(v257, (uint64_t)v321, type metadata accessor for PegasusSearchResponse);
    swift_storeEnumTagMultiPayload();
    v323(v265);
    outlined destroy of MediaUserStateCenter?((uint64_t)v265, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v257, type metadata accessor for PegasusSearchResponse);
    ((void (*)(char *, uint64_t))v254)(v219, v215);
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
    ((void (*)(char *, void, void *))v334)(v205, *MEMORY[0x1E4F88CF0], v209);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v227 = aBlock[0];
    uint64_t v228 = v337;
    v213(v205, v209);
    v213(v207, v209);
    if (v227 == v228)
    {
      uint64_t v229 = Logger.logObject.getter();
      os_log_type_t v230 = static os_log_type_t.debug.getter();
      BOOL v231 = os_log_type_enabled(v229, v230);
      uint64_t v232 = v298;
      uint64_t v101 = (uint64_t)v336;
      if (v231)
      {
        uint64_t v233 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v233 = 0;
        _os_log_impl(&dword_1C8F83000, v229, v230, "Pegasus returned no results", v233, 2u);
        MEMORY[0x1CB77E470](v233, -1, -1);
      }

      uint64_t v234 = v319;
      uint64_t v235 = v315;
      int v236 = v335;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v237 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v237, (uint64_t)static Signposter.pommes);
      OSSignposter.end(token:message:)(v234, 0x746C757365526F6ELL, 0xE900000000000073);
      unint64_t v238 = v321;
      *uint64_t v321 = 10;
      swift_storeEnumTagMultiPayload();
      v323(v238);
      outlined destroy of MediaUserStateCenter?((uint64_t)v238, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
      (*(void (**)(char *, uint64_t))(v232 + 8))(v236, v235);
    }
    else
    {
      uint64_t v239 = v319;
      uint64_t v240 = v298;
      uint64_t v101 = (uint64_t)v336;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v241 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v241, (uint64_t)static Signposter.pommes);
      OSSignposter.end(token:message:)(v239, 0x4573757361676570, 0xEC000000726F7272);
      uint64_t v242 = v321;
      *uint64_t v321 = 0;
      swift_storeEnumTagMultiPayload();
      v323(v242);
      outlined destroy of MediaUserStateCenter?((uint64_t)v242, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
      (*(void (**)(char *, uint64_t))(v240 + 8))(v335, v315);
    }
  }
LABEL_73:
  v335 = *(char **)(v101 + 152);
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:);
  aBlock[5] = v101;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_65;
  v266 = _Block_copy(aBlock);
  uint64_t v267 = type metadata accessor for DispatchQoS();
  unint64_t v334 = (char *)v279;
  uint64_t v268 = *(void *)(v267 - 8);
  MEMORY[0x1F4188790](v267);
  uint64_t v270 = (char *)v279 - ((v269 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v271 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v336 = v279;
  uint64_t v272 = *(void *)(v271 - 8);
  MEMORY[0x1F4188790](v271);
  os_log_type_t v274 = (char *)v279 - ((v273 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v338 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF30]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB77D180](0, v270, v274, v266);
  _Block_release(v266);
  (*(void (**)(char *, uint64_t))(v272 + 8))(v274, v271);
  (*(void (**)(char *, uint64_t))(v268 + 8))(v270, v267);
  return swift_release();
}

uint64_t closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v4, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a2, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 592))(v9, v8);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  *a3 = v12;
  return result;
}

uint64_t closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of AppDataProviding(a1 + 24, (uint64_t)v8);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  *a3 = RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v12 + 416))(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  (*(void (**)(char *))(*(void *)v8 + 368))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_endAccess();
}

uint64_t closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  return swift_endAccess();
}

uint64_t closure #18 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[23];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*a1 + 104))(a2, v4);
  return swift_endAccess();
}

uint64_t PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)(uint64_t VG_AHs5NeverOTg5, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
    MEMORY[0x1F4188790](v11);
    *(void *)&v13[-16] = v10;
    VG_AHs5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:), (uint64_t)&v13[-32], VG_AHs5NeverOTg5);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return VG_AHs5NeverOTg5;
}

uint64_t closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a3, a1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RewrittenUtterance>);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C91947A0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a2, v7);
  return Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.setter();
}

uint64_t static PegasusProxy.pegausUserIdClassification(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89230];
      break;
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89248];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89250];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89238];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89258];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F89240];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext.UserIdentityClassification();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

void PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRContext();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = *(void **)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 72));
  if (v7)
  {
    id v8 = v7;
    id v9 = objc_msgSend(v8, sel_rawRecognition);
    if (v9
      && (uint64_t v10 = v9,
          id v11 = objc_msgSend(v9, sel_nBestTokenListsLossless),
          v10,
          v11))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFSpeechToken]);
      uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4FBC860];
    }
    id v13 = objc_msgSend(v8, sel_recognition);
    id v29 = v8;
    uint64_t v30 = v6;
    if (v13
      && (uint64_t v14 = v13,
          id v15 = objc_msgSend(v13, sel_nBestTokenListsLossless),
          v14,
          v15))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFSpeechToken]);
      uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v16 = MEMORY[0x1E4FBC860];
    }
    unint64_t v17 = *(void *)(v12 + 16);
    unint64_t v18 = *(void *)(v16 + 16);
    if (v17 != v18)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v28[1] = a1;
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2048;
        unint64_t v31 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v20, v21, "Found ASR interpretation with mismatched token counts: %ld pre-ITN and %ld post-ITN. POMMES will send corresponding mismatched counts in Pegasus request.", (uint8_t *)v22, 0x16u);
        MEMORY[0x1CB77E470](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    if (v18 <= v17) {
      uint64_t v23 = v17;
    }
    else {
      uint64_t v23 = v18;
    }
    swift_retain();
    uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ASRInterpretationVs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescx19VtFAG0l1_m1_a1_N18_J8VSiXEfU_SaySaySo13AFSpeechTokenCGG0hM6Search0dO0CAPTf1cn_nTf4nggg_n(0, v23, v12, v3, v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v25 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescy21VtFAG0l1_m1_a1_n1_dC5K9VAMXEfU0_SayAF0f1_g1_h1_I18_ASRInterpretationVGTf1cn_nTf4ng_n(v25, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v26 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
    MEMORY[0x1F4188790](v26);
    uint64_t v27 = v29;
    v28[-2] = v29;
    _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ASRContext and conformance Apple_Parsec_Siri_V2alpha_ASRContext, MEMORY[0x1E4F88D20]);
    static Message.with(_:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.asrContext.setter();
  }
}

void closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a3 + 16) > (int64_t)a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      return;
    }
    unint64_t v7 = swift_bridgeObjectRetain();
    specialized PegasusProxy.createASRInterpretationTokens(with:)(v7);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_ASRInterpretation.preItnToken.setter();
  }
  if (*(void *)(a5 + 16) > a2)
  {
    unint64_t v8 = swift_bridgeObjectRetain();
    specialized PegasusProxy.createASRInterpretationTokens(with:)(v8);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_ASRInterpretation.postItnToken.setter();
  }
}

id closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_modelVersion);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    MEMORY[0x1CB777F10](v5, v7);
  }
  id result = objc_msgSend(a2, sel_acousticModelVersion);
  if (result)
  {
    id v9 = result;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    return (id)MEMORY[0x1CB777F20](v10, v12);
  }
  return result;
}

void closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_text);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    MEMORY[0x1CB778E90](v5, v7);
  }
  id v8 = objc_msgSend(a2, sel_phoneSequence);
  if (v8)
  {
    id v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_InterpretationToken.phoneSequence.setter();
  }
  id v10 = objc_msgSend(a2, sel_ipaPhoneSequence);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_InterpretationToken.ipaPhoneSequence.setter();
  }
  objc_msgSend(a2, sel_removeSpaceBefore);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedBefore.setter();
  objc_msgSend(a2, sel_removeSpaceAfter);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedAfter.setter();
  objc_msgSend(a2, sel_removeSpaceAfter);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceAddedAfter.setter();
  objc_msgSend(a2, sel_startTime);
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.startTime.setter();
  objc_msgSend(a2, sel_endTime);
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.endTime.setter();
  objc_msgSend(a2, sel_silenceStartTime);
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.silenceStartTime.setter();
  objc_msgSend(a2, sel_confidenceScore);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.confidenceScore.setter();
  id v15 = objc_msgSend(a2, sel_acousticCost);
  if (v15)
  {
    uint64_t v16 = v15;
    objc_msgSend(v15, sel_doubleValue);
    Apple_Parsec_Siri_V2alpha_InterpretationToken.acousticCost.setter();
  }
  id v17 = objc_msgSend(a2, sel_graphCost);
  if (v17)
  {
    unint64_t v18 = v17;
    objc_msgSend(v17, sel_doubleValue);
    Apple_Parsec_Siri_V2alpha_InterpretationToken.graphCost.setter();
  }
}

uint64_t PegasusProxy.pegasusRewriteType(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x1E4FA28B0])
  {
    id v9 = (unsigned int *)MEMORY[0x1E4F88E40];
LABEL_7:
    uint64_t v11 = *v9;
    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
    double v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
    uint64_t v14 = a2;
    uint64_t v15 = v11;
    return v13(v14, v15, v12);
  }
  int v10 = v8;
  if (v8 == *MEMORY[0x1E4FA2898])
  {
    id v9 = (unsigned int *)MEMORY[0x1E4F88E28];
    goto LABEL_7;
  }
  if (v8 == *MEMORY[0x1E4FA28A0])
  {
    id v9 = (unsigned int *)MEMORY[0x1E4F88E30];
    goto LABEL_7;
  }
  int v17 = *MEMORY[0x1E4FA28A8];
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  double v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);
  if (v10 != v17)
  {
    v13(a2, *MEMORY[0x1E4F88E40], v12);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v15 = *MEMORY[0x1E4F88E38];
  uint64_t v14 = a2;
  return v13(v14, v15, v12);
}

uint64_t PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  void (*v9)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(void *@<X8>), uint64_t, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v3 = v2;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static PerformanceUtil.shared;
  uint64_t v5 = type metadata accessor for Date();
  v22[1] = v22;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  id v9 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(void *@<X8>), uint64_t, uint64_t))(*(void *)v4 + 200);
  int v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OnScreenContextType : [String]]);
  LOBYTE(v18) = 2;
  v9(&v25, 0xD000000000000021, 0x80000001C91A3210, 0, (char *)v22 - v8, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 1023, "addOnScreenContext(to:onDeviceLabels:)", 38, v18, partial apply for closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:), v3, v10);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v12 = v11((char *)v22 - v8, v5);
  double v13 = v25;
  uint64_t v14 = static PerformanceUtil.shared;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = v13;
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  os_log_type_t v21 = v3;
  MEMORY[0x1F4188790](v15);
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t *, uint64_t))(*(void *)v14 + 200))(0xD00000000000005BLL, 0x80000001C91A3240, 0, (char *)&v17 - v8, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 1027, "addOnScreenContext(to:onDeviceLabels:)", 38, 2, partial apply for closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:), &v17, MEMORY[0x1E4FBC848] + 8);
  v11((char *)&v17 - v8, v5);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of AppDataProviding(a1 + 24, (uint64_t)v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  RRReferenceResolverProtocol.extractOnScreenContext()(v3, v4);
  *a2 = v5;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v75 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v6 = *(void *)(v75 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v75);
  Swift::String v74 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v73 = (char *)&v61 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContextType.GeneratedClientEntity?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v78 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = 0;
  unint64_t v17 = 0;
  uint64_t v19 = (unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48);
  char v68 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v69 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v67 = (void (**)(uint64_t, char *, uint64_t))(v6 + 40);
  long long v66 = xmmword_1C91947A0;
  uint64_t v62 = a1;
  uint64_t v71 = v14;
  uint64_t v72 = v12;
  uint64_t v70 = (unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v65 = a2;
  while (1)
  {
    if (v17 >= qword_1F2370A60) {
      goto LABEL_28;
    }
    LODWORD(v21) = *((unsigned __int8 *)&outlined read-only object #0 of closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)
                   + v17
                   + 32);
    uint64_t v22 = *(void *)(a1 + 16);
    int v63 = v16;
    if (v22)
    {
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((char)v21);
      uint64_t v24 = MEMORY[0x1E4FBC860];
      if (v25)
      {
        uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v24 = MEMORY[0x1E4FBC860];
    }
    uint64_t v64 = v24;
    uint64_t v26 = *(void *)(v24 + 16);
    if (v26) {
      break;
    }
LABEL_2:
    uint64_t result = swift_bridgeObjectRelease();
    int v16 = 1;
    unint64_t v17 = 1u;
    a1 = v62;
    if (v63) {
      return result;
    }
  }
  uint64_t v27 = (uint64_t *)(v64 + 40);
  int v79 = (int)v21;
  while (1)
  {
    uint64_t v29 = *(v27 - 1);
    uint64_t v28 = *v27;
    swift_bridgeObjectRetain();
    OnScreenContextType.generateClientEntity(context:)(v29, v28, (char)v21, v12);
    swift_bridgeObjectRelease();
    if ((*v19)(v12, 1, v13) != 1) {
      break;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for OnScreenContextType.GeneratedClientEntity?);
LABEL_11:
    v27 += 2;
    if (!--v26) {
      goto LABEL_2;
    }
  }
  uint64_t v30 = v78;
  outlined init with take of PommesSearchRequest((uint64_t)v12, v78, (uint64_t (*)(void))type metadata accessor for OnScreenContextType.GeneratedClientEntity);
  unint64_t v31 = (uint64_t *)(v30 + *(int *)(v13 + 24));
  char v32 = (char)v21;
  uint64_t v34 = *v31;
  uint64_t v33 = v31[1];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v80 = *(void **)(a2 + 8);
  uint64_t v36 = v80;
  uint64_t v37 = a2;
  *(void *)(a2 + 8) = 0x8000000000000000;
  unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  uint64_t v40 = v36[2];
  BOOL v41 = (v38 & 1) == 0;
  uint64_t v42 = v40 + v41;
  if (!__OFADD__(v40, v41))
  {
    char v43 = v38;
    if (v36[3] < v42)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_29;
      }
      unint64_t v39 = v44;
      uint64_t v46 = v80;
      if ((v43 & 1) == 0) {
        goto LABEL_22;
      }
LABEL_20:
      uint64_t v47 = (void *)(v46[7] + 16 * v39);
      swift_bridgeObjectRelease();
      void *v47 = v34;
      v47[1] = v33;
LABEL_24:
      *(void *)(v37 + 8) = v46;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>);
      uint64_t v52 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
      uint64_t v53 = *(void *)(v52 - 8);
      unint64_t v54 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = v66;
      uint64_t v56 = v78;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 16))(v55 + v54, v78, v52);
      uint64_t v58 = v74;
      uint64_t v57 = v75;
      uint64_t v59 = v76;
      (*v69)(v74, v76, v75);
      os_log_type_t v21 = v73;
      (*(void (**)(uint64_t, char *))(*(void *)v77 + 88))(v55, v58);
      swift_bridgeObjectRelease();
      (*v68)(v58, v57);
      uint64_t v60 = v56;
      a2 = v65;
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for OnScreenContextType.GeneratedClientEntity);
      (*v67)(v59, v21, v57);
      uint64_t v13 = v71;
      uint64_t v12 = v72;
      uint64_t v19 = v70;
      LOBYTE(v21) = v79;
      goto LABEL_11;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v46 = v80;
      if (v38) {
        goto LABEL_20;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v46 = v80;
      if (v43) {
        goto LABEL_20;
      }
    }
LABEL_22:
    v46[(v39 >> 6) + 8] |= 1 << v39;
    *(unsigned char *)(v46[6] + v39) = v79;
    uint64_t v48 = (void *)(v46[7] + 16 * v39);
    *uint64_t v48 = v34;
    v48[1] = v33;
    uint64_t v49 = v46[2];
    BOOL v50 = __OFADD__(v49, 1);
    uint64_t v51 = v49 + 1;
    if (v50) {
      goto LABEL_27;
    }
    v46[2] = v51;
    goto LABEL_24;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t RRCandidate.equivalentClientEntity()()
{
  return static Message.with(_:)();
}

uint64_t PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v31 = a3;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = v16;
    *(_DWORD *)uint64_t v15 = 134218242;
    uint64_t v33 = *(void *)(a1 + 16);
    uint64_t v34 = v16;
    uint64_t v32 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    v29[1] = v15 + 14;
    swift_bridgeObjectRetain();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
    uint64_t v18 = MEMORY[0x1CB77CDC0](a1, v17);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v34);
    a2 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v12, v13, "Adding %ld resolvedSpanEntities to request: %s", (uint8_t *)v15, 0x16u);
    uint64_t v21 = v30;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v21, -1, -1);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Date.init()();
  uint64_t v22 = &v10[v8[5]];
  *(void *)uint64_t v22 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v22 + 1) = 40;
  v22[16] = 2;
  *(void *)&v10[v8[6]] = 1090;
  unint64_t v23 = &v10[v8[7]];
  *(void *)unint64_t v23 = "addResolvedEntities(_:to:)";
  *((void *)v23 + 1) = 26;
  v23[16] = 2;
  uint64_t v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000029);
  char v25 = (uint64_t *)&v10[v8[8]];
  *char v25 = v24;
  v25[1] = v26;
  MEMORY[0x1F4188790](v24);
  v29[-2] = v4;
  v29[-1] = a2;
  unint64_t v27 = specialized Sequence.compactMap<A>(_:)(a1, (void (*)(void, void))partial apply for closure #1 in PegasusProxy.addResolvedEntities(_:to:), (uint64_t)&v29[-4]);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v10, 0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)v4 + 88))(v27, a2);
  swift_bridgeObjectRelease();
  return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v10, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t closure #1 in PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RREntity.usoEntity.getter();
  static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  uint64_t v19 = a1;
  uint64_t v14 = v20;
  uint64_t v21 = a4;
  swift_release();
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
  Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)((void *)(a2 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore), v14, (uint64_t)v9);
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  uint64_t v17 = v21;
  uint64_t v16 = v22;
  uint64_t v18 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v21, v9, v23);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v18);
}

uint64_t Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v59 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v55 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  MEMORY[0x1F4188790](v10 - 8);
  int v63 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  uint64_t v65 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v61 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v60 = (char *)&v49 - v16;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v17 = *(void *)(v66 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v66);
  uint64_t v62 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v22 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_Context_ClientEntity.init()();
  Siri_Nlu_External_Span.score.getter();
  uint64_t v25 = a3;
  Apple_Parsec_Siri_Context_ClientEntity.score.setter();
  if (Siri_Nlu_External_Span.hasLabel.getter())
  {
    Siri_Nlu_External_Span.label.getter();
    Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.setter();
  }
  Date.init()();
  uint64_t v26 = &v24[v22[5]];
  *(void *)uint64_t v26 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v26 + 1) = 40;
  v26[16] = 2;
  *(void *)&v24[v22[6]] = 1259;
  unint64_t v27 = &v24[v22[7]];
  *(void *)unint64_t v27 = "equivalentClientEntity(contactStore:request:)";
  *((void *)v27 + 1) = 45;
  v27[16] = 2;
  uint64_t v28 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000012);
  uint64_t v29 = (uint64_t *)&v24[v22[8]];
  *uint64_t v29 = v28;
  v29[1] = v30;
  Siri_Nlu_External_Span.usoGraph.getter();
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
  uint64_t v31 = v66;
  Message.serializedData(partial:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v31);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v25, v32);
  }
  BOOL v50 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v51 = v17 + 8;
  v50(v21, v31);
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v24, 0);
  uint64_t v34 = v3;
  uint64_t v35 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v36 = v64;
  if (*(void *)(v35 + 16))
  {
    uint64_t v37 = v65;
    uint64_t v38 = (uint64_t)v63;
    (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v63, v35 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80)), v64);
    uint64_t v39 = 0;
    uint64_t v40 = v66;
  }
  else
  {
    uint64_t v39 = 1;
    uint64_t v37 = v65;
    uint64_t v40 = v66;
    uint64_t v38 = (uint64_t)v63;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, v39, 1, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v36) != 1)
  {
    BOOL v41 = v60;
    (*(void (**)(void))(v37 + 32))();
    uint64_t v42 = v61;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v61, v41, v36);
    int v43 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v42, v36);
    if (v43 != *MEMORY[0x1E4FA2730])
    {
      if (v43 == *MEMORY[0x1E4FA2710])
      {
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, *MEMORY[0x1E4F88EA8], v55);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        (*(void (**)(char *, void, uint64_t))(v57 + 104))(v59, *MEMORY[0x1E4F88E90], v58);
        Apple_Parsec_Siri_Context_ClientEntity.type.setter();
        Siri_Nlu_External_Span.contactFlags(contactStore:request:)(v52, v53);
        uint64_t v66 = 0;
        Apple_Parsec_Siri_Context_ClientEntity.hasAddress_p.setter();
        Apple_Parsec_Siri_Context_ClientEntity.hasPhoneNumber_p.setter();
        goto LABEL_15;
      }
      if (v43 == *MEMORY[0x1E4FA2728] || v43 == *MEMORY[0x1E4FA2718])
      {
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, *MEMORY[0x1E4F88EB0], v55);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        unint64_t v44 = (unsigned int *)MEMORY[0x1E4F88EA0];
        goto LABEL_14;
      }
      if (v43 != *MEMORY[0x1E4FA2720])
      {
        (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, *MEMORY[0x1E4F88EB8], v55);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        (*(void (**)(char *, void, uint64_t))(v57 + 104))(v59, *MEMORY[0x1E4F88E98], v58);
        Apple_Parsec_Siri_Context_ClientEntity.type.setter();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v37 + 8);
        v48(v41, v36);
        v48(v61, v36);
        goto LABEL_16;
      }
    }
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, *MEMORY[0x1E4F88EB8], v55);
    Apple_Parsec_Siri_Context_ClientEntity.source.setter();
    unint64_t v44 = (unsigned int *)MEMORY[0x1E4F88E98];
LABEL_14:
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v59, *v44, v58);
    Apple_Parsec_Siri_Context_ClientEntity.type.setter();
LABEL_15:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v36);
    goto LABEL_16;
  }
  outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
LABEL_16:
  char v45 = v62;
  Siri_Nlu_External_Span.usoGraph.getter();
  uint64_t v46 = Siri_Nlu_External_UsoGraph.alignments.getter();
  uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v50)(v45, v40);
  MEMORY[0x1F4188790](v47);
  *(&v49 - 2) = v34;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D32_Nlu_External_UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityI0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:), (uint64_t)(&v49 - 4), v46, (uint64_t)v67);
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t PegasusProxy.shouldAddUserVocabSpan(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v54 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v53 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v57 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)v52 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v52 - v19;
  uint64_t v58 = a1;
  uint64_t v21 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(void *)(v21 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v20, v21 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v22(v20, 0, 1, v6);
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v22(v20, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v18, *MEMORY[0x1E4FA2710], v6);
  v22(v18, 0, 1, v6);
  uint64_t v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v18, v23, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v24((uint64_t)v11, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    if (v24(v23, 1, v6) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v25 = &demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?);
    uint64_t v26 = v11;
LABEL_10:
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, v25);
LABEL_23:
    char v34 = 1;
    return v34 & 1;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  if (v24(v23, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_9;
  }
  unint64_t v27 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v57, v23, v6);
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v27, v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v29(v15, v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  if ((v28 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_12:
  if ((Siri_Nlu_External_Span.hasLabel.getter() & 1) == 0) {
    goto LABEL_23;
  }
  if (one-time initialization token for allowedClientEntityLabels != -1) {
    swift_once();
  }
  uint64_t v30 = static PegasusProxy.allowedClientEntityLabels;
  uint64_t v31 = Siri_Nlu_External_Span.label.getter();
  LOBYTE(v30) = specialized Set.contains(_:)(v31, v32, v30);
  swift_bridgeObjectRelease();
  if (v30)
  {
    if (Siri_Nlu_External_Span.label.getter() == 0x656D614E707061 && v33 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0) {
        goto LABEL_23;
      }
    }
    uint64_t v36 = v54;
    Siri_Nlu_External_Span.usoGraph.getter();
    uint64_t v37 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v56);
    uint64_t v38 = *(void *)(v37 + 16);
    uint64_t v39 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
    uint64_t v40 = *(void *)(v39 - 8);
    if (v38)
    {
      BOOL v41 = v53;
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v53, v37+ ((*(unsigned __int8 *)(*(void *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v39 - 8) + 80)), v39);
      uint64_t v42 = 0;
    }
    else
    {
      uint64_t v42 = 1;
      BOOL v41 = v53;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v42, 1, v39);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
    {
      uint64_t v25 = &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?;
      uint64_t v26 = v41;
    }
    else
    {
      uint64_t v44 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
      char v45 = v41;
      uint64_t v47 = v46;
      uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v39);
      (*(void (**)(void *__return_ptr, uint64_t))(**(void **)(v52[1] + 184) + 248))(v61, v48);
      uint64_t v49 = v62;
      if (v62)
      {
        uint64_t v50 = v63;
        __swift_project_boxed_opaque_existential_1(v61, v62);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8))(&v59, v44, v47, v49, v50);
        swift_bridgeObjectRelease();
        char v51 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        swift_bridgeObjectRelease();
        char v34 = v51 ^ 1;
        return v34 & 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v25 = (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?;
      uint64_t v26 = (char *)v61;
    }
    goto LABEL_10;
  }
  char v34 = 0;
  return v34 & 1;
}

void PegasusProxy.__allocating_init()()
{
}

void PegasusProxy.init()()
{
}

uint64_t PegasusProxy.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext), *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8));
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType, &demangling cache variable for type metadata for InteractionType?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider;

  return __swift_destroy_boxed_opaque_existential_1(v3);
}

uint64_t PegasusProxy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext), *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8));
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType, &demangling cache variable for type metadata for InteractionType?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  return v0;
}

uint64_t PegasusProxy.__deallocating_deinit()
{
  PegasusProxy.deinit();

  return swift_deallocClassInstance();
}

uint64_t Siri_Nlu_External_Span.contactFlags(contactStore:request:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v85 = a2;
  uint64_t v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  uint64_t v84 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v88);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v8 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96);
  Swift::String v95 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v90 = *(void *)(v97 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v97);
  uint64_t v105 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v106 = (char *)&v80 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v104 = (char *)&v80 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v80 - v16;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1F4188790](v22 - 8);
  unint64_t v89 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AFIsATV())
  {
LABEL_25:
    int v54 = 0;
    int v55 = 0;
    return v55 | v54;
  }
  uint64_t v108 = v8;
  os_log_type_t v82 = a1;
  BOOL v83 = v7;
  uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v24;
  Siri_Nlu_External_Span.usoGraph.getter();
  uint64_t v25 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    uint64_t v48 = 1;
LABEL_20:
    uint64_t v49 = (uint64_t)v89;
    uint64_t v50 = v90;
    goto LABEL_23;
  }
  uint64_t v81 = v2;
  uint64_t v28 = v90 + 16;
  unint64_t v27 = *(void (**)(void, void, void))(v90 + 16);
  unint64_t v29 = v25 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
  uint64_t v30 = (void (**)(char *, uint64_t))(v90 + 8);
  long long v93 = (void (**)(char *, uint64_t))(v108 + 8);
  uint64_t v92 = *MEMORY[0x1E4FA3928];
  uint64_t v98 = *(void *)(v90 + 72);
  uint64_t v80 = v25;
  swift_bridgeObjectRetain();
  id v100 = v27;
  uint64_t v101 = v30;
  uint64_t v31 = (unint64_t)v30 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v32 = v97;
  uint64_t v102 = v17;
  uint64_t v99 = v28;
  while (1)
  {
    uint64_t v108 = v31;
    v27(v17, v29, v32);
    char v33 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
    char v34 = v104;
    v27(v104, v17, v32);
    uint64_t v107 = v26;
    if ((v33 & 1) == 0)
    {
      uint64_t v40 = *v101;
      (*v101)(v34, v32);
      uint64_t v42 = v106;
      v27(v106, v17, v32);
      BOOL v41 = (void (*)(char *, char *, uint64_t))v27;
      char v43 = 0;
      goto LABEL_13;
    }
    char v35 = v95;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v36 = Google_Protobuf_StringValue.value.getter();
    uint64_t v38 = v37;
    (*v93)(v35, v96);
    if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v40 = *v101;
      (*v101)(v104, v32);
      v27(v106, v17, v32);
      BOOL v41 = (void (*)(char *, char *, uint64_t))v27;
    }
    else
    {
      int v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = *v101;
      (*v101)(v104, v32);
      uint64_t v42 = v106;
      v27(v106, v17, v32);
      BOOL v41 = (void (*)(char *, char *, uint64_t))v27;
      char v43 = 0;
      if ((v91 & 1) == 0) {
        goto LABEL_13;
      }
    }
    char v44 = Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter();
    uint64_t v42 = v106;
    char v43 = v44;
LABEL_13:
    uint64_t v31 = v108;
    v40(v42, v32);
    char v45 = v105;
    v41(v105, v17, v32);
    if ((v43 & 1) == 0)
    {
      v40(v45, v32);
      goto LABEL_5;
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == v103 && v46 == v94) {
      break;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = v97;
    uint64_t v31 = v108;
    v40(v105, v97);
    if (v47) {
      goto LABEL_22;
    }
LABEL_5:
    uint64_t v17 = v102;
    v40(v102, v32);
    v29 += v98;
    uint64_t v26 = v107 - 1;
    unint64_t v27 = v100;
    if (v107 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v48 = 1;
      uint64_t v3 = v81;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v97;
  v40(v105, v97);
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t)v89;
  uint64_t v50 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v102, v32);
  uint64_t v48 = 0;
  uint64_t v3 = v81;
LABEL_23:
  uint64_t v51 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, v48, 1, v97);
  swift_bridgeObjectRelease();
  int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v49, 1, v51);
  uint64_t v53 = (uint64_t)v83;
  if (v52 == 1)
  {
    outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v57 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  uint64_t v59 = v58;
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  swift_bridgeObjectRelease();
  Date.init()();
  char v60 = (int *)v88;
  uint64_t v61 = v53 + *(int *)(v88 + 20);
  *(void *)uint64_t v61 = "SiriInformationSearch/PegasusProxy.swift";
  *(void *)(v61 + 8) = 40;
  *(unsigned char *)(v61 + 16) = 2;
  *(void *)(v53 + v60[6]) = 1310;
  uint64_t v62 = v53 + v60[7];
  *(void *)uint64_t v62 = "contactFlags(contactStore:request:)";
  *(void *)(v62 + 8) = 35;
  *(unsigned char *)(v62 + 16) = 2;
  uint64_t v63 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
  uint64_t v64 = (uint64_t *)(v53 + v60[8]);
  *uint64_t v64 = v63;
  v64[1] = v65;
  if (!AFIsHorseman())
  {
    uint64_t v71 = v82[3];
    uint64_t v72 = v82[4];
    __swift_project_boxed_opaque_existential_1(v82, v71);
    __int16 v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8))(v57, v59, v71, v72);
    if (v3)
    {
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v53, type metadata accessor for PerformanceUtil.Ticket);
      return swift_bridgeObjectRelease();
    }
    __int16 v79 = v73;
    goto LABEL_42;
  }
  uint64_t v109 = MEMORY[0x1E4FBC860];
  uint64_t v66 = v84;
  uint64_t v67 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter();
  uint64_t v68 = MEMORY[0x1CB778FB0](v67);
  uint64_t v70 = v69;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
  if (v68 == 0x656E6F6870 && v70 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v74)
  {
LABEL_34:
    id v75 = (id)*MEMORY[0x1E4F1AEE0];
    MEMORY[0x1CB77CD90]();
    if (*(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v76 = v82[3];
  uint64_t v77 = v82[4];
  __swift_project_boxed_opaque_existential_1(v82, v76);
  __int16 v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 16))(v57, v59, v109, v76, v77);
  if (!v3)
  {
    __int16 v79 = v78;
    swift_bridgeObjectRelease();
LABEL_42:
    swift_bridgeObjectRelease();
    int v55 = v79 & 0x100;
    int v54 = v79 & 1;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v53, 0);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v53, type metadata accessor for PerformanceUtil.Ticket);
    return v55 | v54;
  }
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v53, type metadata accessor for PerformanceUtil.Ticket);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v18 - v8;
  Apple_Parsec_Siri_Context_ClientEntityAlignment.init()();
  Siri_Nlu_External_UtteranceAlignment.asrHypothesisIndex.getter();
  Apple_Parsec_Siri_Context_ClientEntityAlignment.asrHypothesisIndex.setter();
  v18[1] = a2;
  Siri_Nlu_External_Span.input.getter();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  v18[0] = a1;
  uint64_t v10 = Siri_Nlu_External_UtteranceAlignment.spans.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UtteranceSpan();
  uint64_t v13 = *(void *)(v12 - 8);
  if (v11)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v9, v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UtteranceSpan();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v9, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  }
  else
  {
    Siri_Nlu_External_UtteranceSpan.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.startTokenIndex.setter();
  uint64_t v15 = Siri_Nlu_External_UtteranceAlignment.spans.getter();
  if (*(void *)(v15 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v7, v15 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v7, v16, 1, v12);
  swift_bridgeObjectRelease();
  if (v14(v7, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  }
  else
  {
    Siri_Nlu_External_UtteranceSpan.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.endTokenIndex.setter();
  Siri_Nlu_External_Span.score.getter();
  return Apple_Parsec_Siri_Context_ClientEntityAlignment.score.setter();
}

uint64_t closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v27 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v24 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RREntity();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v11 + 8);
  v14(v13, v10);
  uint64_t v15 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  RRCandidate.score.getter();
  Apple_Parsec_Siri_Context_ClientEntity.score.setter();
  uint64_t v16 = v32;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  if (!v16)
  {
    uint64_t v22 = v14;
    uint64_t v23 = v10;
    uint64_t v32 = v15;
    _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
    uint64_t v17 = v31;
    Message.serializedData(partial:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v17);
    Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v24, *MEMORY[0x1E4F88EB8], v26);
    Apple_Parsec_Siri_Context_ClientEntity.source.setter();
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, *MEMORY[0x1E4F88EA0], v29);
    Apple_Parsec_Siri_Context_ClientEntity.type.setter();
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    v22(v13, v23);
    uint64_t v19 = dispatch thunk of UsoEntity.utteranceAlignments.getter();
    uint64_t v20 = swift_release();
    MEMORY[0x1F4188790](v20);
    *(&v21 - 2) = a2;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology18UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityG0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #1 in RRCandidate.equivalentClientEntity(), (uint64_t)(&v21 - 4), v19, (uint64_t)v33);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  }
  return swift_release();
}

uint64_t closure #1 in closure #1 in RRCandidate.equivalentClientEntity()()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[1] = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceSpan?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v19 - v8;
  UtteranceAlignment.asrHypothesisIndex.getter();
  Apple_Parsec_Siri_Context_ClientEntityAlignment.asrHypothesisIndex.setter();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  v19[0] = a2;
  uint64_t v10 = UtteranceAlignment.spans.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = type metadata accessor for UtteranceSpan();
  uint64_t v13 = *(void *)(v12 - 8);
  if (v11)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v9, v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UtteranceSpan();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v9, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for UtteranceSpan?);
  }
  else
  {
    UtteranceSpan.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.startTokenIndex.setter();
  uint64_t v15 = UtteranceAlignment.spans.getter();
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v7, v15+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * (v16 - 1), v12);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v7, v17, 1, v12);
  swift_bridgeObjectRelease();
  if (v14(v7, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for UtteranceSpan?);
  }
  else
  {
    UtteranceSpan.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.endTokenIndex.setter();
  RRCandidate.score.getter();
  return Apple_Parsec_Siri_Context_ClientEntityAlignment.score.setter();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = (void *)*a5;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      uint64_t v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v26 = (uint64_t *)(v24[6] + 16 * v17);
    *uint64_t v26 = v11;
    v26[1] = v12;
    unint64_t v27 = (void *)(v24[7] + 16 * v17);
    *unint64_t v27 = v13;
    v27[1] = v14;
    uint64_t v28 = v24[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    uint64_t v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      uint64_t v35 = v31;
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      do
      {
        char v43 = (void *)*a5;
        unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        uint64_t v46 = v43[2];
        BOOL v47 = (v44 & 1) == 0;
        uint64_t v48 = v46 + v47;
        if (__OFADD__(v46, v47)) {
          goto LABEL_25;
        }
        char v49 = v44;
        if (v43[3] < v48)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
          unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v49 & 1) != (v51 & 1)) {
            goto LABEL_27;
          }
          unint64_t v45 = v50;
        }
        int v52 = (void *)*a5;
        if (v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = (void *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          void *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
          uint64_t *v53 = v35;
          v53[1] = v36;
          int v54 = (void *)(v52[7] + 16 * v45);
          void *v54 = v37;
          v54[1] = v38;
          uint64_t v55 = v52[2];
          BOOL v29 = __OFADD__(v55, 1);
          uint64_t v56 = v55 + 1;
          if (v29) {
            goto LABEL_26;
          }
          void v52[2] = v56;
        }
        uint64_t v35 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v36 = v40;
        uint64_t v37 = v41;
        uint64_t v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : AppData].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    uint64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *uint64_t v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  char v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      uint64_t v18 = v0[1];
      BOOL v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      uint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        BOOL v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          char v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          BOOL v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            char v16 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            BOOL v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            char v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              BOOL v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              char v21 = v3 + 6;
              while (v17 != v21)
              {
                BOOL v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  char v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a4;
  uint64_t v26 = a1;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  uint64_t v28 = *(void *)(v14 - 8);
  uint64_t v29 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v27 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = &type metadata for PIMSEnablementProvider;
  uint64_t v33 = &protocol witness table for PIMSEnablementProvider;
  v30[3] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CNContactStore);
  v30[4] = &protocol witness table for CNContactStore;
  v30[0] = a6;
  *(unsigned char *)(a7 + 16) = 1;
  *(void *)(a7 + 144) = 0;
  *(void *)(a7 + 64) = 0;
  *(void *)(a7 + 72) = 0;
  swift_retain();
  uint64_t v16 = closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue();
  uint64_t v17 = MEMORY[0x1E4FBC870];
  *(void *)(a7 + 152) = v16;
  *(void *)(a7 + 160) = v17;
  *(void *)(a7 + 168) = v17;
  *(_OWORD *)(a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C91991D0;
  uint64_t v18 = a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
  uint64_t v19 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  type metadata accessor for PegasusProxyForAssistant();
  *(void *)(a7 + 80) = static PegasusProxyForAssistant.shared.getter();
  *(void *)(a7 + 88) = &protocol witness table for PegasusProxyForAssistant;
  outlined init with copy of AppDataProviding(a1, a7 + 96);
  *(void *)(a7 + 136) = a2;
  outlined init with copy of AppDataProviding((uint64_t)v31, a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  *(void *)(a7 + 176) = a3;
  *(void *)(a7 + 184) = a5;
  outlined init with copy of AppDataProviding(a4, a7 + 24);
  outlined init with copy of AppDataProviding((uint64_t)v30, a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  type metadata accessor for DomainAffinityKVStoreManager();
  if (byte_1F236E408) {
    uint64_t v20 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v20 = 0xD000000000000013;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v20);
  swift_release();
  swift_bridgeObjectRelease();
  if (byte_1F236E409) {
    uint64_t v21 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v21 = 0xD000000000000013;
  }
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v21);
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v22 = v27;
  Apple_Parsec_Search_SearchConversationContext.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  __swift_destroy_boxed_opaque_existential_1(v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  __swift_destroy_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext, v22, v29);
  return a7;
}

uint64_t specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v37 = a6;
  uint64_t v38 = a8;
  uint64_t v33 = a7;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v18 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  uint64_t v40 = *(void *)(v18 - 8);
  uint64_t v41 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v39 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a12;
  v43[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_1, a5, a12);
  void v42[3] = a11;
  v42[4] = a13;
  uint64_t v21 = __swift_allocate_boxed_opaque_existential_1(v42);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(v21, a9, a11);
  *(unsigned char *)(a10 + 16) = 1;
  *(void *)(a10 + 144) = 0;
  *(void *)(a10 + 64) = 0;
  *(void *)(a10 + 72) = 0;
  swift_retain();
  uint64_t v22 = closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue();
  uint64_t v23 = MEMORY[0x1E4FBC870];
  *(void *)(a10 + 152) = v22;
  *(void *)(a10 + 160) = v23;
  *(void *)(a10 + 168) = v23;
  *(_OWORD *)(a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C91991D0;
  uint64_t v24 = a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
  uint64_t v25 = type metadata accessor for InteractionType();
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(void *)(a10 + 80) = v36(v26);
  *(void *)(a10 + 88) = v27;
  outlined init with copy of AppDataProviding(a3, a10 + 96);
  *(void *)(a10 + 136) = a4;
  outlined init with copy of AppDataProviding((uint64_t)v43, a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  uint64_t v28 = v38;
  *(void *)(a10 + 176) = v37;
  *(void *)(a10 + 184) = v28;
  outlined init with copy of AppDataProviding(a7, a10 + 24);
  outlined init with copy of AppDataProviding((uint64_t)v42, a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  type metadata accessor for DomainAffinityKVStoreManager();
  if (byte_1F236EC98) {
    uint64_t v29 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v29 = 0xD000000000000013;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v29);
  swift_release();
  swift_bridgeObjectRelease();
  if (byte_1F236EC99) {
    uint64_t v30 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v30 = 0xD000000000000013;
  }
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v30);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v31 = v39;
  Apple_Parsec_Search_SearchConversationContext.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  __swift_destroy_boxed_opaque_existential_1(v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  __swift_destroy_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext, v31, v41);
  return a10;
}

uint64_t sub_1C912EC7C()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t partial apply for closure #2 in PegasusProxy.search(pommesSearchRequest:completion:)@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = *(void *)(v1 + 32);
  swift_retain();
  specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)(21, v3, v4, a1);
  return swift_release();
}

uint64_t partial apply for closure #3 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 184) + 304))();
}

uint64_t sub_1C912ED74()
{
  return objectdestroy_2Tm(MEMORY[0x1E4FBC898]);
}

uint64_t sub_1C912ED8C()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 72) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return MEMORY[0x1F4186498](v0, v7, v5);
}

uint64_t _s21SiriInformationSearch14CurareDonationO06donateD4Info3for4intoy10PegasusAPI013Apple_Parsec_a9_V2alpha_aJ7RequestV_AA0D17InteractionStream_pSgtFZyyYacfU_TA_0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in static CurareDonation.donateCurareInfo(for:into:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1C912EF64()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C912EF9C()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v16 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = *(void *)(v5 + 64);
  uint64_t v17 = type metadata accessor for PommesCandidateId();
  uint64_t v7 = *(void *)(v17 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  swift_release();
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v3, 1, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v9) {
    v10(v0 + v3, v4);
  }
  uint64_t v11 = (v3 + v16 + v6) & ~v6;
  uint64_t v12 = (v11 + v15 + v8) & ~v8;
  v10(v0 + v11, v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v12, v17);
  swift_release();

  return MEMORY[0x1F4186498](v0, ((v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | v6 | v8 | 7);
}

uint64_t partial apply for closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(a1, v11, v1 + v4, v1 + v7, v1 + v10, v12);
}

uint64_t sub_1C912F330()
{
  return objectdestroy_2Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v32 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v25 - v9;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v33 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    unint64_t v16 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
    uint64_t v27 = *(void *)(v13 + 56);
    unint64_t v28 = v16;
    uint64_t v17 = a1 + v16;
    uint64_t v18 = v27;
    uint64_t v25 = v2;
    uint64_t v26 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v19 = (void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v30 = v13;
    uint64_t v31 = a2;
    uint64_t v29 = v15;
    v15(v10, v17, v5);
    while (1)
    {
      if (PegasusProxy.shouldAddUserVocabSpan(_:)((uint64_t)v10))
      {
        uint64_t v20 = *v19;
        (*v19)(v32, v10, v5);
        uint64_t v21 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
          uint64_t v21 = v33;
        }
        unint64_t v23 = *(void *)(v21 + 16);
        unint64_t v22 = *(void *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          uint64_t v21 = v33;
        }
        *(void *)(v21 + 16) = v23 + 1;
        unint64_t v24 = v21 + v28 + v23 * v27;
        uint64_t v18 = v27;
        v20((char *)v24, v32, v5);
        uint64_t v33 = v21;
        uint64_t v14 = v29;
      }
      else
      {
        (*v26)(v10, v5);
      }
      v17 += v18;
      if (!--v12) {
        break;
      }
      v14(v10, v17, v5);
    }
    return v33;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t);
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (**v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  void (**v50)(char *, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  unint64_t v4 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = MEMORY[0x1F4188790](v8);
  char v43 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v53 = MEMORY[0x1E4FBC860];
  uint64_t v41 = *(void *)(a1 + 16);
  if (v41)
  {
    uint64_t v15 = 0;
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    unint64_t v16 = v9 + 16;
    uint64_t v34 = (*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64);
    uint64_t v35 = (char *)&v32 - v12;
    uint64_t v39 = a1 + v34;
    uint64_t v40 = v17;
    char v51 = a2 + 56;
    int v52 = a2;
    uint64_t v46 = *(void *)(v16 + 56);
    char v49 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v50 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v33 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v37 = v8;
    uint64_t v38 = v5;
    uint64_t v36 = v16;
    v17(v13, a1 + v34, v8);
    while (1)
    {
      uint64_t v18 = Siri_Nlu_External_Span.matcherNames.getter();
      uint64_t v48 = *(void *)(v18 + 16);
      if (v48)
      {
        char v44 = v18;
        unint64_t v45 = v15;
        uint64_t v19 = 0;
        BOOL v47 = v18 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        uint64_t v20 = *(void *)(v5 + 72);
        uint64_t v21 = v52;
        while (1)
        {
          if (*(void *)(v21 + 16))
          {
            lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
            unint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v21 = v52;
            unint64_t v23 = -1 << *(unsigned char *)(v52 + 32);
            unint64_t v24 = v22 & ~v23;
            if ((*(void *)(v51 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24)) {
              break;
            }
          }
LABEL_9:
          if (++v19 == v48)
          {
            swift_bridgeObjectRelease();
            uint64_t v8 = v37;
            uint64_t v5 = v38;
            uint64_t v13 = v35;
            uint64_t v15 = v45;
            goto LABEL_4;
          }
        }
        uint64_t v25 = ~v23;
        uint64_t v26 = *v50;
        while (1)
        {
          v26(v7, *(void *)(v21 + 48) + v24 * v20, v4);
          lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
          uint64_t v27 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v49)(v7, v4);
          if (v27) {
            break;
          }
          unint64_t v24 = (v24 + 1) & v25;
          uint64_t v21 = v52;
          if (((*(void *)(v51 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            goto LABEL_9;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v28 = *v42;
        uint64_t v13 = v35;
        uint64_t v8 = v37;
        (*v42)(v43, v35, v37);
        uint64_t v29 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
          uint64_t v29 = v53;
        }
        uint64_t v15 = v45;
        uint64_t v31 = *(void *)(v29 + 16);
        uint64_t v30 = *(void *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v53;
        }
        *(void *)(v29 + 16) = v31 + 1;
        v28((char *)(v29 + v34 + v31 * v46), v43, v8);
        uint64_t v53 = v29;
        uint64_t v5 = v38;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_4:
        (*v33)(v13, v8);
      }
      if (++v15 == v41) {
        return v53;
      }
      v40(v13, v39 + v46 * v15, v8);
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescy21VtFAG0l1_m1_a1_n1_dC5K9VAMXEfU0_SayAF0f1_g1_h1_I18_ASRInterpretationVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v19 = v2;
    uint64_t v25 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v25;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v10 = v5 + 16;
    unint64_t v22 = (*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64);
    unint64_t v23 = v11;
    uint64_t v12 = a1 + v22;
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v20 = (void (**)(unint64_t, char *, uint64_t))(v10 + 16);
    uint64_t v21 = v13;
    do
    {
      v23(v7, v12, v4);
      swift_bridgeObjectRetain();
      Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.asrInterpretations.setter();
      uint64_t v25 = v9;
      uint64_t v14 = v4;
      unint64_t v16 = *(void *)(v9 + 16);
      unint64_t v15 = *(void *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v25;
      }
      *(void *)(v9 + 16) = v16 + 1;
      uint64_t v17 = v21;
      (*v20)(v9 + v22 + v16 * v21, v7, v14);
      v12 += v17;
      --v8;
      uint64_t v4 = v14;
    }
    while (v8);
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ASRInterpretationVs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescx19VtFAG0l1_m1_a1_N18_J8VSiXEfU_SaySaySo13AFSpeechTokenCGG0hM6Search0dO0CAPTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v20 = a3;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRInterpretation();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!v12) {
    return v13;
  }
  uint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t v23 = a2;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  uint64_t v14 = v23;
  if (v23 >= a1 && (v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = v24;
    v19[1] = v8 + 32;
    uint64_t result = _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ASRInterpretation and conformance Apple_Parsec_Siri_V2alpha_ASRInterpretation, MEMORY[0x1E4F89280]);
    v19[0] = result;
    while (v14 != a1)
    {
      MEMORY[0x1F4188790](result);
      uint64_t v15 = v20;
      v19[-4] = a1;
      v19[-3] = v15;
      uint64_t v16 = v22;
      v19[-2] = v21;
      v19[-1] = v16;
      static Message.with(_:)();
      uint64_t v24 = v13;
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v24;
      }
      *(void *)(v13 + 16) = v18 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, v11, v7);
      ++a1;
      uint64_t v14 = v23;
      if (v23 == a1) {
        return v13;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v34 = (char *)v28 - v15;
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return MEMORY[0x1E4FBC860];
  }
  v28[1] = v3;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  uint64_t v17 = *(void *)(v37 - 8);
  uint64_t v18 = v11;
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v31 = v18;
  uint64_t v20 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v35 = *(void *)(v17 + 72);
  v28[0] = a1;
  swift_bridgeObjectRetain();
  unint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v32 = v10;
  uint64_t v33 = a3;
  uint64_t v29 = a2;
  uint64_t v30 = v14;
  do
  {
    a2(v19, v19 + *(int *)(v37 + 48));
    if ((*v36)(v9, 1, v10) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
    }
    else
    {
      uint64_t v22 = *v20;
      uint64_t v23 = v34;
      (*v20)(v34, v9, v10);
      v22(v14, v23, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      unint64_t v25 = *(void *)(v21 + 16);
      unint64_t v24 = *(void *)(v21 + 24);
      if (v25 >= v24 >> 1) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v21);
      }
      *(void *)(v21 + 16) = v25 + 1;
      uint64_t v10 = v32;
      unint64_t v26 = v21
          + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
          + *(void *)(v31 + 72) * v25;
      uint64_t v14 = v30;
      v22((char *)v26, v30, v32);
      a2 = v29;
    }
    v19 += v35;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1C912FCF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v53 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v53 + 24) & ~v53;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v51 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v44 = (v3 + v4 + v51) & ~v51;
  uint64_t v45 = type metadata accessor for PommesCandidateId();
  uint64_t v8 = *(void *)(v45 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v9 = (v44 + v7 + v50) & ~v50;
  unint64_t v10 = (((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v49 = *(unsigned __int8 *)(*((void *)v11 - 1) + 80);
  uint64_t v48 = *(void *)(*((void *)v11 - 1) + 64);
  uint64_t v52 = type metadata accessor for SignpostToken();
  uint64_t v47 = *(unsigned __int8 *)(*(void *)(v52 - 8) + 80);
  uint64_t v46 = *(void *)(*(void *)(v52 - 8) + 64);
  swift_release();
  uint64_t v12 = v1 + v3;
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v13) {
    v14(v12, v5);
  }
  v14(v1 + v44, v5);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1 + v9, v45);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v43 = (v10 + v49 + 8) & ~v49;
  uint64_t v15 = v1 + v43;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v15
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                 + 64);
    uint64_t v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v23 = *(void *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = v15
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_bridgeObjectRelease();
    uint64_t v18 = v17 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v20 = *(void *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v15
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v25 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v26 = *(void *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25)) {
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  }
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v27 = v15 + v11[6];
  uint64_t v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v29 = *(void *)(v28 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28)) {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v15 + v11[10];
  uint64_t v31 = type metadata accessor for PommesContext();
  uint64_t v32 = *(void *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
  uint64_t v33 = v15 + v11[11];
  uint64_t v34 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v35 = *(void *)(v34 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  }
  swift_release();
  uint64_t v36 = v15 + v11[14];
  uint64_t v37 = type metadata accessor for InputOrigin();
  uint64_t v38 = *(void *)(v37 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  uint64_t v39 = (v43 + v48 + v47) & ~v47;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = v1 + v39 + *(int *)(v52 + 20);
  uint64_t v41 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v1, ((v46 + v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v53 | v51 | v50 | v49 | v47 | 7);
}

uint64_t partial apply for closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(void (*a1)(char *, char *, void *))
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(type metadata accessor for PommesSearchRequest(0) - 8);
  unint64_t v14 = (v12 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v16 = *(void *)(type metadata accessor for SignpostToken() - 8);
  unint64_t v17 = (v14 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(a1, *(void **)(v1 + 16), v1 + v4, v1 + v7, v1 + v10, *(void *)(v1 + v11), *(void *)(v1 + v11 + 8), *(void *)(v1 + v12), v1 + v14, v1 + v17, *(void (**)(unsigned char *))(v1 + v18), *(void *)(v1 + v18 + 8));
}

uint64_t sub_1C9130794()
{
  return objectdestroy_2Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_2Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  a1(*(void *)(v1 + 24));

  return MEMORY[0x1F4186498](v1, 32, 7);
}

uint64_t partial apply for closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #8 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 616))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 640))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #18 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #18 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v3 + 584))();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t partial apply for closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t outlined assign with take of InteractionType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id partial apply for closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(int a1)
{
  return closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)@<X0>(void *a1@<X8>)
{
  return closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(v1, a1);
}

uint64_t partial apply for closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)()
{
  return closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1)
{
  return closure #1 in RRCandidate.equivalentClientEntity()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(uint64_t a1)
{
  return closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #3 in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)((void *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore), *(void *)(v2 + 24), a2);
  if (v3) {
    *a1 = v3;
  }
  return result;
}

uint64_t sub_1C9130BDC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 256))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C9130C34(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 264))(*a1);
}

uint64_t sub_1C9130C84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C9130CDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9130D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 360);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for PegasusSearchResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t assignWithCopy for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C91310D0);
}

uint64_t sub_1C91310D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C91311DC);
}

uint64_t sub_1C91311DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for PegasusSearchResponse()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PegasusError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9131474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PegasusError()
{
  return &type metadata for PegasusError;
}

uint64_t destroy for OnDeviceLabels()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for OnDeviceLabels(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OnDeviceLabels(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for OnDeviceLabels(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceLabels(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeviceLabels(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeviceLabels()
{
  return &type metadata for OnDeviceLabels;
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PegasusProxyClient.feedbackEventStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PegasusProxyClient.constructSearchRequest(query:context:requestType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of PegasusProxyClient.searchResponsePublisher(usingSearchRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PegasusProxyClient.warmUpConnectionIfNeeded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t ObjC metadata update function for PegasusProxy()
{
  return type metadata accessor for PegasusProxy(0);
}

void type metadata completion function for PegasusProxy()
{
  type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PegasusProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PegasusProxy);
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PegasusProxy.client.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of PegasusProxy.__allocating_init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of PegasusProxy.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtSessionStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart(requestId:location:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of PegasusProxy.tearDown()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of PegasusProxy.isUserDataShareOptIn()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of PegasusProxy.addRewrittenUtterances(to:delegatedUDA:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of PegasusProxy.addInteractionType(to:pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of PegasusProxy.addMultiUserContext(to:pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of PegasusProxy.pegasusRewriteType(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of PegasusProxy.addOnScreenContext(to:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of PegasusProxy.addPlaySRREntities(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of PegasusProxy.addPromptContext(to:with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of PegasusProxy.clientExperienceSignals(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

void type metadata accessor for InteractionType?()
{
  if (!lazy cache variable for type metadata for InteractionType?)
  {
    type metadata accessor for InteractionType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InteractionType?);
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in RRCandidate.equivalentClientEntity()()
{
  return closure #1 in closure #1 in RRCandidate.equivalentClientEntity()();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with take of PommesSearchRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1)
{
  closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t specialized PegasusProxy.createASRInterpretationTokens(with:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InterpretationToken();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v23 - v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (!v9) {
    return v10;
  }
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = 0;
      uint64_t v24 = v3 + 32;
      do
      {
        unint64_t v13 = a1;
        uint64_t v14 = MEMORY[0x1CB77D510](v12, a1);
        *(&v23 - 2) = MEMORY[0x1F4188790](v14);
        _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_InterpretationToken and conformance Apple_Parsec_Siri_V2alpha_InterpretationToken, MEMORY[0x1E4F894F8]);
        static Message.with(_:)();
        swift_unknownObjectRelease();
        uint64_t v10 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
          uint64_t v10 = v25;
        }
        unint64_t v16 = *(void *)(v10 + 16);
        unint64_t v15 = *(void *)(v10 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          uint64_t v10 = v25;
        }
        ++v12;
        *(void *)(v10 + 16) = v16 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v16, v8, v2);
        uint64_t v25 = v10;
        a1 = v13;
      }
      while (v9 != v12);
    }
    else
    {
      unint64_t v17 = a1 + 32;
      uint64_t v24 = v3 + 32;
      uint64_t v18 = _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_InterpretationToken and conformance Apple_Parsec_Siri_V2alpha_InterpretationToken, MEMORY[0x1E4F894F8]);
      do
      {
        MEMORY[0x1F4188790](v18);
        *(&v23 - 2) = (uint64_t)v19;
        id v20 = v19;
        static Message.with(_:)();

        uint64_t v10 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
          uint64_t v10 = v25;
        }
        unint64_t v22 = *(void *)(v10 + 16);
        unint64_t v21 = *(void *)(v10 + 24);
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
          uint64_t v10 = v25;
        }
        *(void *)(v10 + 16) = v22 + 1;
        uint64_t v18 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v22, v6, v2);
        uint64_t v25 = v10;
        v17 += 8;
        --v9;
      }
      while (v9);
    }
    return v10;
  }
  __break(1u);
  return result;
}

void partial apply for closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(int a1)
{
  closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PegasusProxy.addResolvedEntities(_:to:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)();
}

uint64_t sub_1C9132290()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v20 = *(void *)(v1 + 64);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v18 = *(void *)(v3 + 64);
  uint64_t v21 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v21 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = *(void *)(v5 + 64);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v7 = *(void *)(v19 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(v7 + 64);
  swift_release();
  uint64_t v23 = (v22 + 24) & ~v22;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0 + v23, 1, v2);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  if (!v9) {
    v10(v0 + v23, v2);
  }
  uint64_t v11 = v22 | v4 | v6 | v8 | 7;
  uint64_t v12 = (v23 + v20 + v4) & ~v4;
  uint64_t v13 = (v12 + v18 + v6) & ~v6;
  uint64_t v14 = (v13 + v17 + v8) & ~v8;
  v10(v0 + v12, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v13, v21);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v14, v19);

  return MEMORY[0x1F4186498](v0, v14 + v16, v11);
}

uint64_t partial apply for closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v9 = *(void *)(v0 + 16);

  return closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(v9, v0 + v2, v0 + v5, v0 + v8);
}

uint64_t sub_1C91326CC()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v19 = *(void *)(v1 + 64);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = *(void *)(v3 + 64);
  uint64_t v23 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v23 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = *(void *)(v5 + 64);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v7 = *(void *)(v18 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 64);
  swift_release();
  uint64_t v22 = (v20 + 24) & ~v20;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0 + v22, 1, v2);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  if (!v9) {
    v10(v0 + v22, v2);
  }
  uint64_t v21 = v20 | v4 | v6 | v8 | 7;
  uint64_t v11 = (v22 + v19 + v4) & ~v4;
  uint64_t v12 = (v11 + v17 + v6) & ~v6;
  uint64_t v13 = (v12 + v16 + v8) & ~v8;
  v10(v0 + v11, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v12, v23);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v13, v18);
  swift_release();

  return MEMORY[0x1F4186498](v0, ((v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v21);
}

uint64_t partial apply for closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v0 + 16);
  uint64_t v13 = *(void *)(v0 + ((*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(v12, v0 + v2, v0 + v5, v0 + v8, v0 + v11, v13);
}

uint64_t closure #1 in RRCandidate.equivalentClientEntity()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in RRCandidate.equivalentClientEntity()(a1);
}

void closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)partial apply(int a1)
{
}

void SageSearchRequestProcessorError.error.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SageSearchRequestProcessorError.debugMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static SageSearchRequestProcessorErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SiriInformationSearch::SageSearchRequestProcessorError __swiftcall SageSearchRequestProcessorError.init(error:debugMessage:)(SiriInformationSearch::SageSearchRequestProcessorErrorType error, Swift::String_optional debugMessage)
{
  *(unsigned char *)uint64_t v2 = *(unsigned char *)error;
  *(Swift::String_optional *)(v2 + 8) = debugMessage;
  result.debugMessage = debugMessage;
  result.error = error;
  return result;
}

void SageSearchRequestProcessorErrorType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SageSearchRequestProcessorErrorType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static SageSearchRequestProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v4 = *((void *)a2 + 2);
    if (v3)
    {
      if (v4)
      {
        BOOL v5 = *((void *)a1 + 1) == *((void *)a2 + 1) && v3 == v4;
        if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v4)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType()
{
  unint64_t result = lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType;
  if (!lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearchRequestProcessorError()
{
  return &type metadata for SageSearchRequestProcessorError;
}

unsigned char *storeEnumTagSinglePayload for SageSearchRequestProcessorErrorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9132E1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearchRequestProcessorErrorType()
{
  return &type metadata for SageSearchRequestProcessorErrorType;
}

uint64_t String.nilIfEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = a1;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v13 = a4[3];
  uint64_t v14 = a4[4];
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(a4, v13);
  return specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)((uint64_t)v12, a2, a3, (uint64_t)v15, a5, v5, v10, v13, v11, v14);
}

uint64_t static SiriKitAppInfoDataProvider.isEnabled()()
{
  return 1;
}

id closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider()
{
  type metadata accessor for LaunchServicesSatisfyingAppsDataProvider();
  swift_allocObject();
  id v0 = LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)((uint64_t)closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, 0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider, (void (*)(uint64_t))type metadata accessor for LaunchServicesSatisfyingAppsDataProvider);
  return v0;
}

uint64_t closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider(void *a1, void *a2, unint64_t a3)
{
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v6 = *(void *)(v106 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v106);
  uint64_t v94 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v88 - v10;
  MEMORY[0x1F4188790](v9);
  long long v93 = (char *)&v88 - v12;
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v97 = *(void *)(v109 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v109);
  Swift::String v95 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v96 = (char *)&v88 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v88 - v17;
  unsigned int v19 = objc_msgSend(a1, sel_developerType);
  uint64_t result = 0;
  if (v19 == 1 || !a2) {
    return result;
  }
  id v21 = a2;
  id v22 = objc_msgSend(v21, sel_supportedMediaCategories);
  uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v22) = specialized Set.contains(_:)(0xD000000000000014, 0x80000001C91A3810, v23);
  swift_bridgeObjectRelease();
  id v113 = v21;
  if ((v22 & 1) == 0
    || (id v24 = objc_msgSend(v21, sel_supportedIntents),
        uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
        v24,
        v26 = specialized Set.isSuperset<A>(of:)(outlined read-only object #0 of closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, v25), swift_arrayDestroy(), id v21 = v113, swift_bridgeObjectRelease(), !v26))
  {
    if (a3 >> 62) {
      goto LABEL_61;
    }
    uint64_t v27 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v27)
    {
LABEL_62:

LABEL_63:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_8:
    unint64_t v28 = 0;
    unint64_t v112 = a3 & 0xC000000000000001;
    unint64_t v104 = a3 + 32;
    uint64_t v105 = a3 & 0xFFFFFFFFFFFFFF8;
    id v110 = (id)*MEMORY[0x1E4F725B0];
    unsigned int v92 = *MEMORY[0x1E4F18528];
    unsigned int v91 = *MEMORY[0x1E4F18538];
    unsigned int v90 = *MEMORY[0x1E4F18530];
    id v108 = (id)*MEMORY[0x1E4F725A8];
    unsigned int v89 = *MEMORY[0x1E4F183C8];
    HIDWORD(v88) = *MEMORY[0x1E4F183C0];
    LODWORD(v88) = *MEMORY[0x1E4F183B8];
    long long v100 = xmmword_1C9194790;
    unint64_t v107 = a3;
    uint64_t v102 = v11;
    uint64_t v103 = v6;
    uint64_t v101 = v18;
    uint64_t v111 = v27;
    while (1)
    {
      if (v112)
      {
        id v41 = (id)MEMORY[0x1CB77D510](v28, a3);
        BOOL v42 = __OFADD__(v28++, 1);
        if (v42) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v28 >= *(void *)(v105 + 16)) {
          goto LABEL_60;
        }
        id v41 = *(id *)(v104 + 8 * v28);
        BOOL v42 = __OFADD__(v28++, 1);
        if (v42)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          swift_bridgeObjectRetain();
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          if (!v27) {
            goto LABEL_62;
          }
          goto LABEL_8;
        }
      }
      id v114 = v41;
      id v43 = objc_msgSend(v41, sel_systemProtocolMetadata, v88);
      type metadata accessor for LNSystemProtocolIdentifier(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocolMetadata);
      id v21 = (id)lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
      uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (!*(void *)(v44 + 16)) {
        goto LABEL_29;
      }
      id v45 = v110;
      unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45);
      if ((v47 & 1) == 0) {
        break;
      }
      uint64_t v48 = *(void *)(*(void *)(v44 + 56) + 8 * v46);
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      self;
      uint64_t v49 = (void *)swift_dynamicCastObjCClass();
      if (v49)
      {
        uint64_t v99 = v48;
        id v50 = objc_msgSend(v49, sel_searchScopes);
        uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        int64_t v52 = *(void *)(v51 + 16);
        if (v52)
        {
          uint64_t v115 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
          uint64_t v53 = v115;
          uint64_t v98 = v51;
          uint64_t v54 = v51 + 40;
          uint64_t v56 = (uint64_t)v96;
          uint64_t v55 = v97;
          do
          {
            swift_bridgeObjectRetain();
            StringSearchScope.init(rawValue:)();
            uint64_t v115 = v53;
            unint64_t v58 = *(void *)(v53 + 16);
            unint64_t v57 = *(void *)(v53 + 24);
            if (v58 >= v57 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
              uint64_t v53 = v115;
            }
            v54 += 16;
            *(void *)(v53 + 16) = v58 + 1;
            outlined init with take of PommesSearchReason?((uint64_t)v18, v53+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v58, &demangling cache variable for type metadata for StringSearchScope?);
            --v52;
          }
          while (v52);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v53 = MEMORY[0x1E4FBC860];
          uint64_t v56 = (uint64_t)v96;
          uint64_t v55 = v97;
        }
        lazy protocol witness table accessor for type StringSearchScope? and conformance <A> A?();
        uint64_t v115 = Set.init(minimumCapacity:)();
        uint64_t v73 = *(void *)(v53 + 16);
        if (v73)
        {
          unint64_t v30 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
          uint64_t v74 = v53 + v30;
          uint64_t v29 = *(void *)(v55 + 72);
          uint64_t v75 = (uint64_t)v95;
          do
          {
            outlined init with copy of MediaUserStateCenter?(v74, v75, &demangling cache variable for type metadata for StringSearchScope?);
            specialized Set._Variant.insert(_:)(v56, v75);
            outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for StringSearchScope?);
            v74 += v29;
            --v73;
          }
          while (v73);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v29 = *(void *)(v55 + 72);
          unint64_t v30 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
        }
        uint64_t v98 = v115;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringSearchScope?>);
        uint64_t v31 = 2 * v29;
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = v100;
        unint64_t v33 = v32 + v30;
        uint64_t v34 = type metadata accessor for StringSearchScope();
        uint64_t v35 = *(void *)(v34 - 8);
        id v21 = (id)(v35 + 104);
        uint64_t v36 = *(void (**)(unint64_t, void, uint64_t))(v35 + 104);
        v36(v33, v92, v34);
        uint64_t v37 = *(void (**)(unint64_t, void, uint64_t, uint64_t))(v35 + 56);
        v37(v33, 0, 1, v34);
        unint64_t v38 = v33 + v29;
        v36(v38, v91, v34);
        v37(v38, 0, 1, v34);
        v36(v33 + v31, v90, v34);
        v37(v33 + v31, 0, 1, v34);
        char v39 = specialized Set._isDisjoint<A>(with:)(v32, v98);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        swift_setDeallocating();
        goto LABEL_11;
      }
      swift_unknownObjectRelease();
      a3 = v107;
LABEL_30:
      id v59 = objc_msgSend(v114, sel_systemProtocolMetadata);
      uint64_t v60 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (!*(void *)(v60 + 16)) {
        goto LABEL_40;
      }
      id v21 = v108;
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
      if ((v62 & 1) == 0)
      {

LABEL_40:
        swift_bridgeObjectRelease();
LABEL_41:
        id v40 = v113;

        goto LABEL_12;
      }
      uint64_t v63 = *(void *)(*(void *)(v60 + 56) + 8 * v61);
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      self;
      uint64_t v64 = (void *)swift_dynamicCastObjCClass();
      if (!v64)
      {
        swift_unknownObjectRelease();
        goto LABEL_41;
      }
      uint64_t v99 = v63;
      id v65 = objc_msgSend(v64, sel_supportedCategories);
      uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v67 = *(void *)(v66 + 16);
      if (v67)
      {
        uint64_t v115 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67, 0);
        uint64_t v68 = v115;
        uint64_t v98 = v66;
        uint64_t v69 = v66 + 40;
        uint64_t v70 = (uint64_t)v93;
        do
        {
          swift_bridgeObjectRetain();
          VideoCategory.init(rawValue:)();
          uint64_t v115 = v68;
          unint64_t v72 = *(void *)(v68 + 16);
          unint64_t v71 = *(void *)(v68 + 24);
          if (v72 >= v71 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
            uint64_t v68 = v115;
          }
          v69 += 16;
          *(void *)(v68 + 16) = v72 + 1;
          outlined init with take of PommesSearchReason?(v70, v68+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v72, &demangling cache variable for type metadata for VideoCategory?);
          --v67;
        }
        while (v67);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v68 = MEMORY[0x1E4FBC860];
      }
      lazy protocol witness table accessor for type VideoCategory? and conformance <A> A?();
      uint64_t v115 = Set.init(minimumCapacity:)();
      uint64_t v76 = *(void *)(v68 + 16);
      if (v76)
      {
        unint64_t v77 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        uint64_t v78 = v68 + v77;
        uint64_t v79 = *(void *)(v6 + 72);
        uint64_t v80 = (uint64_t)v94;
        do
        {
          outlined init with copy of MediaUserStateCenter?(v78, v80, &demangling cache variable for type metadata for VideoCategory?);
          specialized Set._Variant.insert(_:)((uint64_t)v11, v80);
          outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for VideoCategory?);
          v78 += v79;
          --v76;
        }
        while (v76);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v79 = *(void *)(v6 + 72);
        unint64_t v77 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      }
      uint64_t v98 = v115;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VideoCategory?>);
      uint64_t v81 = 2 * v79;
      uint64_t v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = v100;
      unint64_t v83 = v82 + v77;
      uint64_t v84 = type metadata accessor for VideoCategory();
      uint64_t v85 = *(void *)(v84 - 8);
      uint64_t v86 = *(void (**)(unint64_t, void, uint64_t))(v85 + 104);
      v86(v83, v89, v84);
      id v21 = *(id *)(v85 + 56);
      ((void (*)(unint64_t, void, uint64_t, uint64_t))v21)(v83, 0, 1, v84);
      unint64_t v87 = v83 + v79;
      v86(v87, HIDWORD(v88), v84);
      ((void (*)(unint64_t, void, uint64_t, uint64_t))v21)(v87, 0, 1, v84);
      v86(v83 + v81, v88, v84);
      ((void (*)(unint64_t, void, uint64_t, uint64_t))v21)(v83 + v81, 0, 1, v84);
      char v39 = specialized Set._isDisjoint<A>(with:)(v82, v98);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_setDeallocating();
LABEL_11:
      swift_arrayDestroy();
      swift_deallocClassInstance();
      a3 = v107;
      uint64_t v11 = v102;
      uint64_t v6 = v103;
      uint64_t v18 = v101;
      id v40 = v113;
      if ((v39 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_12:
      if (v28 == v111)
      {

        goto LABEL_63;
      }
    }

LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }

  return 1;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t *SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared;
}

uint64_t static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared.getter()
{
  type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();

  return swift_initStaticObject();
}

uint64_t key path setter for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create : SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 96);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out SatisfyingAppsDataProvider), v5);
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.reset()()
{
  (*(void (**)(id (*)(), void))(*(void *)v0 + 96))(closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, 0);
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.deinit()
{
  swift_release();
  return v0;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider;
  *(void *)(v0 + 24) = 0;
  return result;
}

void *one-time initialization function for intentValues()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C9195D60;
  uint64_t v4 = (void *)(v3 + v2);
  unint64_t v5 = v3 + v2 + v0[14];
  *uint64_t v4 = 0xD000000000000011;
  v4[1] = 0x80000001C919C5F0;
  uint64_t v6 = *MEMORY[0x1E4F88668];
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  v8(v5, v6, v7);
  uint64_t v9 = (void *)((char *)v4 + v1);
  uint64_t v10 = (char *)v4 + v1 + v0[14];
  void *v9 = 0xD000000000000016;
  v9[1] = 0x80000001C919C610;
  v8((unint64_t)v10, *MEMORY[0x1E4F88660], v7);
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v3);
  static SiriKitAppInfoDataProvider.intentValues = result;
  return result;
}

void *one-time initialization function for mediaCategoryValues()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C9198790;
  uint64_t v4 = (void *)(v3 + v2);
  unint64_t v5 = v3 + v2 + v0[14];
  *uint64_t v4 = 0xD000000000000014;
  v4[1] = 0x80000001C91A3770;
  uint64_t v6 = *MEMORY[0x1E4F88688];
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  v8(v5, v6, v7);
  uint64_t v9 = (void *)((char *)v4 + v1);
  uint64_t v10 = (char *)v4 + v1 + v0[14];
  void *v9 = 0xD000000000000017;
  v9[1] = 0x80000001C91A3790;
  v8((unint64_t)v10, *MEMORY[0x1E4F886A8], v7);
  uint64_t v11 = (void *)((char *)v4 + 2 * v1);
  uint64_t v12 = (char *)v11 + v0[14];
  *uint64_t v11 = 0xD000000000000019;
  v11[1] = 0x80000001C91A37B0;
  v8((unint64_t)v12, *MEMORY[0x1E4F88678], v7);
  uint64_t v13 = (void *)((char *)v4 + 3 * v1);
  uint64_t v14 = (char *)v13 + v0[14];
  *uint64_t v13 = 0xD000000000000014;
  v13[1] = 0x80000001C91A37D0;
  v8((unint64_t)v14, *MEMORY[0x1E4F88690], v7);
  uint64_t v15 = (void *)((char *)v4 + 4 * v1);
  uint64_t v16 = (char *)v15 + v0[14];
  *uint64_t v15 = 0xD000000000000016;
  v15[1] = 0x80000001C91A37F0;
  v8((unint64_t)v16, *MEMORY[0x1E4F886A0], v7);
  uint64_t v17 = (void *)((char *)v4 + 5 * v1);
  uint64_t v18 = (char *)v17 + v0[14];
  *uint64_t v17 = 0xD000000000000014;
  v17[1] = 0x80000001C91A3810;
  v8((unint64_t)v18, *MEMORY[0x1E4F88698], v7);
  unsigned int v19 = (void *)((char *)v4 + 6 * v1);
  uint64_t v20 = (char *)v19 + v0[14];
  *unsigned int v19 = 0xD000000000000019;
  v19[1] = 0x80000001C91A3830;
  v8((unint64_t)v20, *MEMORY[0x1E4F88680], v7);
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v3);
  static SiriKitAppInfoDataProvider.mediaCategoryValues = result;
  return result;
}

uint64_t SiriKitAppInfoDataProvider.__allocating_init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(long long *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(unsigned char *)(v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  uint64_t v13 = v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  outlined init with take of AppDataProviding(a1, v10 + 16);
  *(void *)(v10 + 56) = a2;
  *(void *)(v10 + 64) = a3;
  outlined init with take of AppDataProviding(a4, v10 + 72);
  outlined init with take of PommesSearchReason?(a5, v10 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  return v10;
}

uint64_t SiriKitAppInfoDataProvider.init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(long long *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v11 = v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(unsigned char *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  uint64_t v13 = v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  outlined init with take of AppDataProviding(a1, v5 + 16);
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = a3;
  outlined init with take of AppDataProviding(a4, v5 + 72);
  outlined init with take of PommesSearchReason?(a5, v5 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  return v5;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  SiriKitAppInfoDataProvider.getForegroundSiriKitAppInfo()((uint64_t)&v20 - v9);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  outlined init with take of PommesSearchReason?((uint64_t)v10, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  uint64_t v12 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?((uint64_t)v8, v12);
  swift_endAccess();
  if (!AFIsATV())
  {
LABEL_4:
    uint64_t v16 = *(void *)(v1 + 56);
    if (!v16) {
      return;
    }
    goto LABEL_5;
  }
  outlined init with copy of MediaUserStateCenter?(v1 + 112, (uint64_t)&v20, &demangling cache variable for type metadata for AppSearchViewProvider?);
  if (v21)
  {
    outlined init with take of AppDataProviding(&v20, (uint64_t)v22);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v15 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v14 + 8);
    swift_retain();
    v15(partial apply for closure #1 in SiriKitAppInfoDataProvider.prepare(), v1, v13, v14);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    goto LABEL_4;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v20, &demangling cache variable for type metadata for AppSearchViewProvider?);
  uint64_t v16 = *(void *)(v1 + 56);
  if (!v16) {
    return;
  }
LABEL_5:
  uint64_t v17 = *(void *)(v1 + 64);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
  unsigned int v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  void v19[3] = 0;
  v19[4] = v16;
  v19[5] = v17;
  v19[6] = v1;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #2 in SiriKitAppInfoDataProvider.prepare(), (uint64_t)v19);
  swift_release();
}

uint64_t closure #2 in SiriKitAppInfoDataProvider.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return MEMORY[0x1F4188298](closure #2 in SiriKitAppInfoDataProvider.prepare(), 0, 0);
}

uint64_t closure #2 in SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v1 = v0[3];
  v0[5] = swift_getObjectType();
  v0[6] = *(void *)(v1 + 16);
  v0[7] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xA3C4000000000000;
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #2 in SiriKitAppInfoDataProvider.prepare(), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(uint64_t (*)(uint64_t), void, void, void))(v0 + 48))(partial apply for closure #1 in closure #2 in SiriKitAppInfoDataProvider.prepare(), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SiriKitAppInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t SiriKitAppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v64 = *(void *)(v2 - 8);
  *(void *)&long long v65 = v2;
  MEMORY[0x1F4188790](v2);
  unint64_t v61 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v66 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v56 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v53 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v51 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v59 = *(void *)(v70 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v70);
  int64_t v52 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v69 = (char *)&v49 - v14;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v26, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps + 8))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v30 = 0;
      _os_log_impl(&dword_1C8F83000, v28, v29, "SiriKitAppInfoDataProvider numThirdPartyVideoApps is missing", v30, 2u);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }

    goto LABEL_16;
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps))
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    return 0;
  }
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.numSirikitVideoApps.setter();
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) & 1) == 0)
  {
LABEL_15:
    v71[3] = v22;
    v71[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo, MEMORY[0x1E4F886C0]);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v71);
    (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 16))(boxed_opaque_existential_1, v25, v22);
    defaultAnyTypeURLPrefix.getter();
    uint64_t v35 = v51;
    Google_Protobuf_Any.init(message:partial:typePrefix:)();
    id v50 = v25;
    uint64_t v37 = v59;
    uint64_t v38 = v70;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v35, 0, 1, v70);
    char v39 = v69;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v69, v35, v38);
    id v40 = v60;
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, *MEMORY[0x1E4F896E0], v55);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v52, v39, v38);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E4F89B48], v58);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
    id v41 = v66;
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    (*(void (**)(char *, void, void))(v64 + 104))(v61, *MEMORY[0x1E4F892C0], v65);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
    uint64_t v42 = v62;
    unint64_t v43 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    uint64_t v44 = swift_allocObject();
    long long v65 = xmmword_1C91947A0;
    *(_OWORD *)(v44 + 16) = xmmword_1C91947A0;
    uint64_t v45 = v63;
    (*(void (**)(unint64_t, char *, uint64_t))(v42 + 16))(v44 + v43, v40, v63);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
    uint64_t v46 = v67;
    unint64_t v47 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = v65;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v48 + v47, v41, v68);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v45);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v69, v70);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v50, v22);
    return v48;
  }
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4F88658], v15);
  unint64_t v31 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v31 & 0x8000000000000000) == 0 && !HIDWORD(v31))
  {
    uint64_t v32 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.modify();
    if (!__CFADD__(*v33, v31))
    {
      *v33 += v31;
      v32(v71, 0);
      goto LABEL_15;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.reset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?((uint64_t)v3, v5);
  swift_endAccess();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  uint64_t v6 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
}

uint64_t SiriKitAppInfoDataProvider.getForegroundSiriKitAppInfo()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.init()();
  if (!AFIsATV()) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  uint64_t v57 = v7;
  uint64_t v56 = v5;
  uint64_t v12 = v2[12];
  uint64_t v13 = v2[13];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (!v15) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  uint64_t v18 = v2 + 2;
  uint64_t v20 = v2[5];
  uint64_t v19 = v2[6];
  __swift_project_boxed_opaque_existential_1(v18, v20);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void, uint64_t, uint64_t))(v19 + 8))(v58, v16, v17, 0, v20, v19);
  swift_bridgeObjectRelease();
  outlined init with take of PommesSearchReason?((uint64_t)v58, (uint64_t)&v59, &demangling cache variable for type metadata for AppData?);
  if (!(void)v60) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  v62[0] = v59;
  v62[1] = v60;
  uint64_t v63 = v61;
  uint64_t v21 = v60;
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = specialized Sequence.compactMap<A>(_:)(v22);
  v53[2] = v21;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v55 = v8;
  uint64_t v54 = v4;
  if (v24)
  {
    v53[1] = 0;
    uint64_t v25 = a1;
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    uint64_t v27 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v28 = *(void *)(v23 + 8 * v26 + 32);
      if (!HIDWORD(v28))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
        }
        unint64_t v30 = *((void *)v27 + 2);
        unint64_t v29 = *((void *)v27 + 3);
        if (v30 >= v29 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v27);
        }
        *((void *)v27 + 2) = v30 + 1;
        *(_DWORD *)&v27[4 * v30 + 32] = v28;
      }
      ++v26;
    }
    while (v24 != v26);
    swift_bridgeObjectRelease();
    a1 = v25;
    uint64_t v8 = v55;
    uint64_t v4 = v54;
  }
  else
  {
    uint64_t v27 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = *((void *)v27 + 2);
  if (v31)
  {
    int v32 = 0;
    unint64_t v33 = (int *)(v27 + 32);
    while (1)
    {
      int v34 = *v33++;
      BOOL v35 = __CFADD__(v32, v34);
      v32 += v34;
      if (v35) {
        break;
      }
      if (!--v31) {
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntents.setter();
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = specialized Sequence.compactMap<A>(_:)(v36);
  outlined init with take of PommesSearchReason?((uint64_t)v62, (uint64_t)v64, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v65 = v63;
  outlined release of [LNActionMetadata]((uint64_t)&v65);
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    uint64_t v39 = a1;
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    id v41 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v42 = *(void *)(v37 + 8 * v40 + 32);
      if (!HIDWORD(v42))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v41 + 2) + 1, 1, v41);
        }
        unint64_t v44 = *((void *)v41 + 2);
        unint64_t v43 = *((void *)v41 + 3);
        if (v44 >= v43 >> 1) {
          id v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v41);
        }
        *((void *)v41 + 2) = v44 + 1;
        *(_DWORD *)&v41[4 * v44 + 32] = v42;
      }
      ++v40;
    }
    while (v38 != v40);
    swift_bridgeObjectRelease();
    a1 = v39;
    uint64_t v8 = v55;
    uint64_t v4 = v54;
  }
  else
  {
    id v41 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *((void *)v41 + 2);
  uint64_t v46 = v57;
  int v47 = 0;
  if (!v45)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntentMediaCategories.setter();
    uint64_t v50 = v56;
    (*(void (**)(char *, void, uint64_t))(v56 + 104))(v46, *MEMORY[0x1E4F88650], v4);
    unint64_t v51 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v4);
    if ((v51 & 0x8000000000000000) != 0 || HIDWORD(v51)) {
      goto LABEL_40;
    }
    Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.setter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  uint64_t v48 = (int *)(v41 + 32);
  while (1)
  {
    int v49 = *v48++;
    BOOL v35 = __CFADD__(v47, v49);
    v47 += v49;
    if (v35) {
      break;
    }
    if (!--v45) {
      goto LABEL_34;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SiriKitAppInfoDataProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of MediaUserStateCenter?(v0 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  return v0;
}

uint64_t SiriKitAppInfoDataProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of MediaUserStateCenter?(v0 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance SiriKitAppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance SiriKitAppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance SiriKitAppInfoDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 232))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance SiriKitAppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t specialized Set._isDisjoint<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1F4188790](v52);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for VideoCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v47 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?)
     - 8;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v53 = (uint64_t)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v40 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v40 - v18;
  uint64_t v58 = a2;
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v42 = *(void *)(a1 + 16);
  if (!v42) {
    return 1;
  }
  uint64_t v56 = v6;
  uint64_t v41 = v17;
  uint64_t v43 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v20 = *(void *)(v16 + 72);
  uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  uint64_t v50 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v21 = v20;
  uint64_t v55 = v58 + 56;
  v40[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v46 = v19;
  uint64_t v48 = v21;
  while (1)
  {
    uint64_t v44 = v22;
    outlined init with copy of MediaUserStateCenter?(v43 + v21 * v22, (uint64_t)v19, &demangling cache variable for type metadata for VideoCategory?);
    if (*(void *)(v58 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v23 = v41;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v41, &demangling cache variable for type metadata for VideoCategory?);
      uint64_t v24 = v56;
      uint64_t v54 = *v57;
      if (v54(v23, 1, v56) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v25 = v47;
        (*v45)(v47, v23, v24);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v26 = v25;
        uint64_t v19 = v46;
        (*v50)((uint64_t)v26, v24);
      }
      Swift::Int v27 = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v58 + 32);
      unint64_t v29 = v27 & ~v28;
      uint64_t v21 = v48;
      if ((*(void *)(v55 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29)) {
        break;
      }
    }
LABEL_4:
    uint64_t v22 = v44 + 1;
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for VideoCategory?);
    if (v22 == v42)
    {
      uint64_t v38 = 1;
      goto LABEL_22;
    }
  }
  uint64_t v51 = ~v28;
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(*(void *)(v58 + 48) + v29 * v21, (uint64_t)v14, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v30 = (uint64_t)&v5[*(int *)(v52 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v30, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v31 = v56;
    int v32 = v54;
    if (v54((uint64_t)v5, 1, v56) == 1) {
      break;
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v53, &demangling cache variable for type metadata for VideoCategory?);
    if (v32(v30, 1, v31) == 1)
    {
      (*v50)(v53, v31);
      goto LABEL_12;
    }
    uint64_t v33 = v53;
    int v34 = v47;
    (*v45)(v47, v30, v31);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
    int v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    BOOL v35 = *v50;
    uint64_t v36 = v34;
    uint64_t v37 = v33;
    uint64_t v21 = v48;
    (*v50)((uint64_t)v36, v31);
    v35(v37, v31);
    uint64_t v19 = v46;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for VideoCategory?);
    if (v49) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v29 = (v29 + 1) & v51;
    if (((*(void *)(v55 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
      goto LABEL_4;
    }
  }
  if (v32(v30, 1, v31) != 1)
  {
LABEL_12:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for VideoCategory?);
    goto LABEL_13;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for VideoCategory?);
LABEL_21:
  outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for VideoCategory?);
  uint64_t v38 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  return v38;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  void (**v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unsigned int (**v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;

  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1F4188790](v52);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StringSearchScope();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v47 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?)
     - 8;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v53 = (uint64_t)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v40 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v40 - v18;
  uint64_t v58 = a2;
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v42 = *(void *)(a1 + 16);
  if (!v42) {
    return 1;
  }
  uint64_t v56 = v6;
  uint64_t v41 = v17;
  uint64_t v43 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v20 = *(void *)(v16 + 72);
  uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  uint64_t v50 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v21 = v20;
  uint64_t v55 = v58 + 56;
  v40[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v46 = v19;
  uint64_t v48 = v21;
  while (1)
  {
    uint64_t v44 = v22;
    outlined init with copy of MediaUserStateCenter?(v43 + v21 * v22, (uint64_t)v19, &demangling cache variable for type metadata for StringSearchScope?);
    if (*(void *)(v58 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v23 = v41;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v41, &demangling cache variable for type metadata for StringSearchScope?);
      uint64_t v24 = v56;
      uint64_t v54 = *v57;
      if (v54(v23, 1, v56) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v25 = v47;
        (*v45)(v47, v23, v24);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v26 = v25;
        uint64_t v19 = v46;
        (*v50)((uint64_t)v26, v24);
      }
      Swift::Int v27 = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v58 + 32);
      unint64_t v29 = v27 & ~v28;
      uint64_t v21 = v48;
      if ((*(void *)(v55 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29)) {
        break;
      }
    }
LABEL_4:
    uint64_t v22 = v44 + 1;
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for StringSearchScope?);
    if (v22 == v42)
    {
      uint64_t v38 = 1;
      goto LABEL_22;
    }
  }
  uint64_t v51 = ~v28;
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(*(void *)(v58 + 48) + v29 * v21, (uint64_t)v14, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v30 = (uint64_t)&v5[*(int *)(v52 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v30, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v31 = v56;
    int v32 = v54;
    if (v54((uint64_t)v5, 1, v56) == 1) {
      break;
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v53, &demangling cache variable for type metadata for StringSearchScope?);
    if (v32(v30, 1, v31) == 1)
    {
      (*v50)(v53, v31);
      goto LABEL_12;
    }
    uint64_t v33 = v53;
    int v34 = v47;
    (*v45)(v47, v30, v31);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
    int v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    BOOL v35 = *v50;
    uint64_t v36 = v34;
    uint64_t v37 = v33;
    uint64_t v21 = v48;
    (*v50)((uint64_t)v36, v31);
    v35(v37, v31);
    uint64_t v19 = v46;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for StringSearchScope?);
    if (v49) {
      goto LABEL_21;
    }
LABEL_13:
    unint64_t v29 = (v29 + 1) & v51;
    if (((*(void *)(v55 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
      goto LABEL_4;
    }
  }
  if (v32(v30, 1, v31) != 1)
  {
LABEL_12:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for StringSearchScope?);
    goto LABEL_13;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_21:
  outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v38 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v37[3] = a7;
  v37[4] = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(boxed_opaque_existential_1, a1, a7);
  v36[3] = a8;
  v36[4] = a10;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16))(v18, a4, a8);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 8) = 1024;
    LODWORD(v35[0]) = a2 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_1C8F83000, v20, v21, "SiriKitAppInfoDataProvider make, isEnabled=%{BOOL}d, satisfyingAppsDataProvider specified=%{BOOL}d", (uint8_t *)v22, 0xEu);
    MEMORY[0x1CB77E470](v22, -1, -1);

    uint64_t v23 = a2;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {

    swift_unknownObjectRelease();
    uint64_t v23 = a2;
    if (!a2)
    {
LABEL_7:
      type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
      uint64_t inited = swift_initStaticObject();
      uint64_t v25 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)inited + 88))();
      uint64_t v23 = v25();
      a3 = v26;
      swift_release();
    }
  }
  outlined init with copy of AppDataProviding((uint64_t)v37, (uint64_t)v35);
  outlined init with copy of AppDataProviding((uint64_t)v36, (uint64_t)v34);
  outlined init with copy of MediaUserStateCenter?(a5, (uint64_t)v33, &demangling cache variable for type metadata for AppSearchViewProvider?);
  type metadata accessor for SiriKitAppInfoDataProvider();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *(unsigned char *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  uint64_t v30 = v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 8) = 1;
  outlined init with take of AppDataProviding(v35, v27 + 16);
  *(void *)(v27 + 56) = v23;
  *(void *)(v27 + 64) = a3;
  outlined init with take of AppDataProviding(v34, v27 + 72);
  outlined init with take of PommesSearchReason?((uint64_t)v33, v27 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v31 = specialized AnyDataProvider.init<A>(provider:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return v31;
}

uint64_t type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator()
{
  return self;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9136F70()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return MEMORY[0x1F4188298](closure #2 in SiriKitAppInfoDataProvider.prepare(), 0, 0);
}

uint64_t partial apply for closure #1 in SiriKitAppInfoDataProvider.prepare()(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = result;
  return result;
}

uint64_t sub_1C913707C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned SatisfyingAppsDataProvider);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t ObjC metadata update function for SiriKitAppInfoDataProvider()
{
  return type metadata accessor for SiriKitAppInfoDataProvider();
}

uint64_t type metadata accessor for SiriKitAppInfoDataProvider()
{
  uint64_t result = type metadata singleton initialization cache for SiriKitAppInfoDataProvider;
  if (!type metadata singleton initialization cache for SiriKitAppInfoDataProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SiriKitAppInfoDataProvider()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SiriKitAppInfoDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitAppInfoDataProvider);
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.__allocating_init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))() & 1;
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 232);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?()
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
    }
  }
}

uint64_t method lookup function for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator);
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C9137454()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out SatisfyingAppsDataProvider)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned SatisfyingAppsDataProvider)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in SiriKitAppInfoDataProvider.prepare()(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)(v2 + 8) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoCategory? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VideoCategory?);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StringSearchScope? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for StringSearchScope?);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?);
  }
  return result;
}

BOOL specialized Set.isSuperset<A>(of:)(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 1;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = a1 + 4;
    uint64_t v5 = a1 + 5;
    uint64_t v6 = a2 + 56;
    uint64_t v7 = 1;
    uint64_t v22 = a1 + 4;
    while (1)
    {
      uint64_t v8 = *v5;
      uint64_t v9 = *v4;
      swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v10 = Hasher._finalize()();
      uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v12 = v10 & ~v11;
      if (((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        break;
      }
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v14 = (void *)(v13 + 16 * v12);
      BOOL v15 = *v14 == v9 && v14[1] == v8;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v17 = ~v11;
        for (unint64_t i = v12 + 1; ; unint64_t i = v19 + 1)
        {
          uint64_t v19 = i & v17;
          if (((*(void *)(v6 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v13 + 16 * v19);
          BOOL v21 = *v20 == v9 && v20[1] == v8;
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_10;
          }
        }
        break;
      }
LABEL_10:
      swift_bridgeObjectRelease();
      BOOL result = v7 == v2;
      if (v7 == v2 || !*(void *)(a2 + 16)) {
        return result;
      }
      uint64_t v4 = &v22[2 * v7++];
      uint64_t v5 = v4 + 1;
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SourcePriorityFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  SourcePriorityFeaturiser.init(query:)(a1);
  return v2;
}

float static SourcePriorityFeaturiser.score(_:_:)(float a1, float a2)
{
  float v2 = (float)((float)(a1 * a2) * 2.2) + 1.0;
  if (a1 < 0.001) {
    return 1.0;
  }
  else {
    return v2;
  }
}

uint64_t SourcePriorityFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t SourcePriorityFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v86 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_retain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v85 = v1;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v84 = v4;
    uint64_t v17 = v16;
    uint64_t v88 = v16;
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v18 = Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter();
    if (v19)
    {
      unint64_t v20 = v19;
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v20 = 0xE000000000000000;
    }
    uint64_t v82 = v5;
    uint64_t v83 = v8;
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v21 = Apple_Parsec_Siri_V2alpha_AudioSort.toString.getter();
    if (v22)
    {
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v23 = 0xE000000000000000;
    }
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v88);
    uint64_t v5 = v82;
    uint64_t v8 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 1024;
    int v24 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
    swift_release();
    LODWORD(v87) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v12, v13, "SourcePriorityFeaturiser :  requestedMediaType=%s,  sort=%s, isGlideEligible=%{BOOL}d", (uint8_t *)v15, 0x1Cu);
    swift_arrayDestroy();
    uint64_t v25 = v17;
    uint64_t v4 = v84;
    MEMORY[0x1CB77E470](v25, -1, -1);
    uint64_t v26 = v15;
    uint64_t v2 = v85;
    MEMORY[0x1CB77E470](v26, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(unsigned char *)(v2 + 32) = *(unsigned char *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
  uint64_t v27 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v86, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v8);
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v27, v8);
  if (v28 != *MEMORY[0x1E4F88C10] && v28 != *MEMORY[0x1E4F88C48])
  {
    if (v28 == *MEMORY[0x1E4F88C40]
      || v28 == *MEMORY[0x1E4F88C60]
      || v28 == *MEMORY[0x1E4F88C18]
      || v28 == *MEMORY[0x1E4F88C20]
      || v28 == *MEMORY[0x1E4F88C28]
      || v28 == *MEMORY[0x1E4F88C30]
      || v28 == *MEMORY[0x1E4F88C38]
      || v28 == *MEMORY[0x1E4F88C58]
      || v28 == *MEMORY[0x1E4F88C50])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      uint64_t v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      uint64_t v49 = *(void *)(v48 - 8);
      uint64_t v50 = *(void *)(v49 + 72);
      unint64_t v51 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_1C919A630;
      unint64_t v53 = v52 + v51;
      uint64_t v54 = *(void (**)(unint64_t, void, uint64_t))(v49 + 104);
      v54(v53, *MEMORY[0x1E4F88F78], v48);
      v54(v53 + v50, *MEMORY[0x1E4F88F80], v48);
      v54(v53 + 2 * v50, *MEMORY[0x1E4F88FA0], v48);
      v54(v53 + 3 * v50, *MEMORY[0x1E4F88F88], v48);
      v54(v53 + 4 * v50, *MEMORY[0x1E4F88FC0], v48);
      v54(v53 + 5 * v50, *MEMORY[0x1E4F88F30], v48);
      v54(v53 + 6 * v50, *MEMORY[0x1E4F88F50], v48);
      v54(v53 + 7 * v50, *MEMORY[0x1E4F88F60], v48);
      v54(v53 + 8 * v50, *MEMORY[0x1E4F88F38], v48);
      v54(v53 + 9 * v50, *MEMORY[0x1E4F88FC8], v48);
      v54(v53 + 10 * v50, *MEMORY[0x1E4F88F90], v48);
      v54(v53 + 11 * v50, *MEMORY[0x1E4F88FA8], v48);
      v54(v53 + 12 * v50, *MEMORY[0x1E4F88F48], v48);
      v54(v53 + 13 * v50, *MEMORY[0x1E4F88F28], v48);
      v54(v53 + 14 * v50, *MEMORY[0x1E4F88F58], v48);
      v54(v53 + 15 * v50, *MEMORY[0x1E4F88F40], v48);
      v54(v53 + 16 * v50, *MEMORY[0x1E4F88FB0], v48);
      v54(v53 + 17 * v50, *MEMORY[0x1E4F88F98], v48);
      v54(v53 + 18 * v50, *MEMORY[0x1E4F88F68], v48);
      v54(v53 + 19 * v50, *MEMORY[0x1E4F88F70], v48);
      uint64_t v55 = specialized Set.init(_nonEmptyArrayLiteral:)(v52);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_release();
      *(void *)(v2 + 24) = v55;
      int v39 = 1067030938;
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v4);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v30 != *MEMORY[0x1E4F89458])
  {
    if (v30 == *MEMORY[0x1E4F89410])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      uint64_t v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(void *)(v41 + 72);
      unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1C9198B60;
      unint64_t v45 = v44 + v43;
      uint64_t v46 = *(void (**)(unint64_t, void, uint64_t))(v41 + 104);
      v46(v45, *MEMORY[0x1E4F88FA0], v40);
      v46(v45 + v42, *MEMORY[0x1E4F88F88], v40);
      v46(v45 + 2 * v42, *MEMORY[0x1E4F88F40], v40);
      v46(v45 + 3 * v42, *MEMORY[0x1E4F88F68], v40);
      v46(v45 + 4 * v42, *MEMORY[0x1E4F88F38], v40);
      uint64_t v47 = specialized Set.init(_nonEmptyArrayLiteral:)(v44);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_release();
      *(void *)(v2 + 24) = v47;
      int v39 = 1061158912;
      goto LABEL_37;
    }
    if (v30 == *MEMORY[0x1E4F89400])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      uint64_t v57 = *(void *)(v56 - 8);
      unint64_t v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1C91947A0;
      unint64_t v60 = v59 + v58;
      uint64_t v61 = (unsigned int *)MEMORY[0x1E4F88F80];
    }
    else
    {
      if (v30 != *MEMORY[0x1E4F89420])
      {
        if (v30 == *MEMORY[0x1E4F893C0])
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
          uint64_t v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
          uint64_t v66 = *(void *)(v65 - 8);
          uint64_t v67 = *(void *)(v66 + 72);
          unint64_t v68 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
          uint64_t v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_1C9195D60;
          unint64_t v70 = v69 + v68;
          unint64_t v71 = *(void (**)(unint64_t, void, uint64_t))(v66 + 104);
          v71(v70, *MEMORY[0x1E4F88F40], v65);
          unint64_t v72 = v70 + v67;
          uint64_t v73 = (unsigned int *)MEMORY[0x1E4F88F68];
        }
        else
        {
          if (v30 == *MEMORY[0x1E4F893D0])
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
            uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
            uint64_t v57 = *(void *)(v56 - 8);
            unint64_t v74 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
            uint64_t v59 = swift_allocObject();
            *(_OWORD *)(v59 + 16) = xmmword_1C91947A0;
            unint64_t v60 = v59 + v74;
            uint64_t v61 = (unsigned int *)MEMORY[0x1E4F88F58];
            goto LABEL_35;
          }
          if (v30 != *MEMORY[0x1E4F89450])
          {
            if (v30 == *MEMORY[0x1E4F89408])
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
              uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
              uint64_t v57 = *(void *)(v56 - 8);
              unint64_t v79 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
              uint64_t v59 = swift_allocObject();
              *(_OWORD *)(v59 + 16) = xmmword_1C91947A0;
              unint64_t v60 = v59 + v79;
              uint64_t v61 = (unsigned int *)MEMORY[0x1E4F88F88];
            }
            else
            {
              if (v30 != *MEMORY[0x1E4F893E8])
              {
                swift_release();
                *(void *)(v2 + 24) = MEMORY[0x1E4FBC870];
                *(_DWORD *)(v2 + 16) = 0;
                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                return v2;
              }
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
              uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
              uint64_t v57 = *(void *)(v56 - 8);
              unint64_t v80 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
              uint64_t v59 = swift_allocObject();
              *(_OWORD *)(v59 + 16) = xmmword_1C91947A0;
              unint64_t v60 = v59 + v80;
              uint64_t v61 = (unsigned int *)MEMORY[0x1E4F88F70];
            }
            goto LABEL_35;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
          uint64_t v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
          uint64_t v75 = *(void *)(v65 - 8);
          uint64_t v76 = *(void *)(v75 + 72);
          unint64_t v77 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
          uint64_t v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_1C9195D60;
          unint64_t v78 = v69 + v77;
          unint64_t v71 = *(void (**)(unint64_t, void, uint64_t))(v75 + 104);
          v71(v78, *MEMORY[0x1E4F88FB0], v65);
          unint64_t v72 = v78 + v76;
          uint64_t v73 = (unsigned int *)MEMORY[0x1E4F88F38];
        }
        v71(v72, *v73, v65);
        uint64_t v63 = specialized Set.init(_nonEmptyArrayLiteral:)(v69);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        goto LABEL_36;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      uint64_t v57 = *(void *)(v56 - 8);
      unint64_t v62 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1C91947A0;
      unint64_t v60 = v59 + v62;
      uint64_t v61 = (unsigned int *)MEMORY[0x1E4F88FA0];
    }
LABEL_35:
    (*(void (**)(unint64_t, void, uint64_t))(v57 + 104))(v60, *v61, v56);
    uint64_t v63 = specialized Set.init(_nonEmptyArrayLiteral:)(v59);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
LABEL_36:
    swift_release();
    *(void *)(v2 + 24) = v63;
    int v39 = 1065353216;
    goto LABEL_37;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  uint64_t v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1C9198790;
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v32 + 104);
  v37(v36, *MEMORY[0x1E4F88FA0], v31);
  v37(v36 + v33, *MEMORY[0x1E4F88F80], v31);
  v37(v36 + 2 * v33, *MEMORY[0x1E4F88F88], v31);
  v37(v36 + 3 * v33, *MEMORY[0x1E4F88F40], v31);
  v37(v36 + 4 * v33, *MEMORY[0x1E4F88F68], v31);
  v37(v36 + 5 * v33, *MEMORY[0x1E4F88FB0], v31);
  v37(v36 + 6 * v33, *MEMORY[0x1E4F88F38], v31);
  uint64_t v38 = specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  *(void *)(v2 + 24) = v38;
  int v39 = 1057384038;
LABEL_37:
  *(_DWORD *)(v2 + 16) = v39;
  return v2;
}

uint64_t type metadata accessor for SourcePriorityFeaturiser()
{
  return self;
}

void SourcePriorityFeaturiser.featurise(candidate:rankedSlotIndex:)(void **a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  if (*((unsigned char *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source))
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v2 + 32) != 1
     || (*((unsigned char *)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription) & 1) == 0)
    && (specialized Set.contains(_:)((uint64_t)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, *(void *)(v2 + 24)) & 1) != 0)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8))();
    v6.n128_u32[0] = *(_DWORD *)(v2 + 16);
    (*(void (**)(__n128))((*v5 & *v7) + 0x148))(v6);
  }
}

uint64_t SourcePriorityFeaturiser.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SourcePriorityFeaturiser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance SourcePriorityFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance SourcePriorityFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t method lookup function for SourcePriorityFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SourcePriorityFeaturiser);
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.__allocating_init(query:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t PommesSearchClient.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized static PommesSearchClient.createXPCConnection()();
  if (v1)
  {
    *(void *)(v0 + 16) = v1;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, v3, v4, "Cannot set up connection with PommesSearchService, client initialization fails...", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t PommesSearchClient.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = specialized static PommesSearchClient.createXPCConnection()();
  if (v2)
  {
    *(void *)(v0 + 16) = v2;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      __n128 v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__n128 v6 = 0;
      _os_log_impl(&dword_1C8F83000, v4, v5, "Cannot set up connection with PommesSearchService, client initialization fails...", v6, 2u);
      MEMORY[0x1CB77E470](v6, -1, -1);
    }

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t PommesSearchClient.searchInfiEntity(request:)(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return MEMORY[0x1F4188298](PommesSearchClient.searchInfiEntity(request:), 0, 0);
}

uint64_t PommesSearchClient.searchInfiEntity(request:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v0[17] + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = PommesSearchClient.searchInfiEntity(request:);
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PommesResponse?, @unowned NSError?) -> () with result type PommesResponse;
  v0[13] = &block_descriptor;
  v0[14] = v3;
  objc_msgSend(v2, sel_searchInfiEntityWithRequest_completionHandler_, v1, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = PommesSearchClient.searchInfiEntity(request:);
  }
  else {
    uint64_t v2 = PommesSearchClient.searchInfiEntity(request:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PommesResponse?, @unowned NSError?) -> () with result type PommesResponse(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *__n128 v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x1F4188200](a1);
  }
}

id PommesSearchClient.invalidate(cachedResponse:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + 16), sel_invalidateWithCachedResponse_, a1);
}

void closure #1 in static PommesSearchClient.createXPCConnection()()
{
}

void closure #2 in static PommesSearchClient.createXPCConnection()()
{
}

void closure #1 in static PommesSearchClient.createXPCConnection()(const char *a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v3, a1, v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }
}

void closure #3 in static PommesSearchClient.createXPCConnection()(void *a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  id v3 = a1;
  id v4 = a1;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    __n128 v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)__n128 v6 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, oslog, v5, "Cannot set up connection with PommesSearchService, error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v7, -1, -1);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }
  else
  {
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t PommesSearchClient.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PommesSearchClient.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesXPCSearching.searchInfiEntity(request:) in conformance PommesSearchClient(uint64_t a1)
{
  uint64_t v4 = *v1;
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *os_log_type_t v5 = v2;
  v5[1] = protocol witness for PommesXPCSearching.searchInfiEntity(request:) in conformance PommesSearchClient;
  v5[16] = a1;
  v5[17] = v4;
  return MEMORY[0x1F4188298](PommesSearchClient.searchInfiEntity(request:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  os_log_type_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t specialized static PommesSearchClient.createXPCConnection()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F29260]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000028, 0x80000001C919F4F0);
  id v2 = objc_msgSend(v0, sel_initWithMachServiceName_options_, v1, 0);

  id v3 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F2384260);
  objc_msgSend(v2, sel_setRemoteObjectInterface_, v3);

  unint64_t v22 = closure #1 in static PommesSearchClient.createXPCConnection();
  uint64_t v23 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  unint64_t v20 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v21 = &block_descriptor_7_1;
  uint64_t v4 = _Block_copy(&aBlock);
  objc_msgSend(v2, sel_setInterruptionHandler_, v4);
  _Block_release(v4);
  unint64_t v22 = closure #2 in static PommesSearchClient.createXPCConnection();
  uint64_t v23 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  unint64_t v20 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v21 = &block_descriptor_10_0;
  os_log_type_t v5 = _Block_copy(&aBlock);
  objc_msgSend(v2, sel_setInvalidationHandler_, v5);
  _Block_release(v5);
  objc_msgSend(v2, sel_resume);
  id v6 = objc_msgSend(v2, sel_endpoint);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  uint64_t v8 = v6;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t aBlock = v8;
    os_log_type_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v12 = v8;

    _os_log_impl(&dword_1C8F83000, v9, v10, "PommesSearchService XPC connection established to endpoint: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  else
  {

    unint64_t v9 = v8;
  }

  unint64_t v22 = closure #3 in static PommesSearchClient.createXPCConnection();
  uint64_t v23 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  unint64_t v20 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v21 = &block_descriptor_13_2;
  uint64_t v14 = _Block_copy(&aBlock);
  id v15 = objc_msgSend(v2, sel_remoteObjectProxyWithErrorHandler_, v14);
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)();

  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchOrchestrating);
  if (swift_dynamicCast()) {
    return v17;
  }
  else {
    return 0;
  }
}

uint64_t dispatch thunk of PommesXPCSearching.searchInfiEntity(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v9(a1, a2, a3);
}

uint64_t type metadata accessor for PommesSearchClient()
{
  return self;
}

uint64_t method lookup function for PommesSearchClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesSearchClient);
}

uint64_t dispatch thunk of PommesSearchClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t *, id **), uint64_t a4, id *a5)
{
  uint64_t v18 = a2;
  unint64_t v6 = (unint64_t)a5;
  uint64_t v7 = a1;
  uint64_t v17 = a1;
  if ((unint64_t)a5 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(((unint64_t)a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v14 = v6 & 0xC000000000000001;
    uint64_t v9 = 4;
    uint64_t v10 = (id *)v6;
    while (1)
    {
      uint64_t v11 = v14 ? (id *)MEMORY[0x1CB77D510](v9 - 4, v6) : (id *)*(id *)(v6 + 8 * v9);
      unint64_t v6 = (unint64_t)v11;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      uint64_t v19 = v11;
      a3(v16, &v17, &v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5)
      {
        swift_bridgeObjectRelease();

        return v7;
      }

      uint64_t v7 = v16[0];
      uint64_t v17 = v16[0];
      uint64_t v18 = v16[1];
      ++v9;
      unint64_t v6 = (unint64_t)v10;
      if (v12 == v8) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t AudioPluginProcessor.__allocating_init()()
{
  uint64_t v1 = v0;
  id v2 = self;
  uint64_t v3 = &selRef_init;
  id v4 = objc_msgSend(v2, sel_sharedPreferences);
  id v5 = objc_msgSend(v4, sel_languageCode);
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    *(void *)&long long v32 = v7;
    *((void *)&v32 + 1) = v9;
    uint64_t v37 = 45;
    unint64_t v38 = 0xE100000000000000;
    uint64_t v35 = 95;
    unint64_t v36 = 0xE100000000000000;
    unint64_t v31 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v30 = MEMORY[0x1E4FBB1A0];
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v12 = v11;

    swift_bridgeObjectRelease();
    type metadata accessor for PimsRuntimeLoggingHandler();
    os_log_type_t v13 = (void *)swift_allocObject();
    getPimsRuntimeLogger()();
    outlined init with take of AppDataProviding(&v32, (uint64_t)(v13 + 2));
    uint64_t v14 = type metadata accessor for MediaSuggestionManager();
    swift_allocObject();
    uint64_t v15 = MediaSuggestionManager.init()();
    v13[10] = v14;
    v13[11] = &protocol witness table for MediaSuggestionManager;
    v13[7] = v15;
    uint64_t v16 = one-time initialization token for pommes;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(void *)&long long v32 = v21;
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v18, v19, "AudioPluginProcessor running with %s Locale", v20, 0xCu);
      swift_arrayDestroy();
      uint64_t v22 = v21;
      uint64_t v3 = &selRef_init;
      MEMORY[0x1CB77E470](v22, -1, -1);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v28 = objc_msgSend(self, sel_defaultMediaLibrary, v30, v31, v31, v31);
    unint64_t v33 = type metadata accessor for MPMediaLibrary();
    unint64_t v34 = &protocol witness table for MPMediaLibrary;
    *(void *)&long long v32 = v28;
    uint64_t v29 = (*(uint64_t (**)(uint64_t, unint64_t, long long *, id, void *))(v1 + 144))(v10, v12, &v32, [v2 v3[3]], v13);
    swift_release();
    return v29;
  }
  else
  {

    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1C8F83000, v24, v25, "AudioPluginProcessor: Unable to obtain locale using en_US", v26, 2u);
      MEMORY[0x1CB77E470](v26, -1, -1);
    }

    return AudioPluginProcessor.__allocating_init(locale:)(0x53555F6E65, 0xE500000000000000);
  }
}

uint64_t AudioPluginProcessor.__allocating_init(locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for PimsRuntimeLoggingHandler();
  unint64_t v6 = (void *)swift_allocObject();
  getPimsRuntimeLogger()();
  outlined init with take of AppDataProviding(&v14, (uint64_t)(v6 + 2));
  uint64_t v7 = type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  uint64_t v8 = MediaSuggestionManager.init()();
  v6[10] = v7;
  v6[11] = &protocol witness table for MediaSuggestionManager;
  v6[7] = v8;
  uint64_t v9 = self;
  swift_retain();
  id v10 = objc_msgSend(v9, sel_defaultMediaLibrary);
  unint64_t v15 = type metadata accessor for MPMediaLibrary();
  uint64_t v16 = &protocol witness table for MPMediaLibrary;
  *(void *)&long long v14 = v10;
  id v11 = objc_msgSend(self, sel_sharedPreferences);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, id, void *))(v3 + 144))(a1, a2, &v14, v11, v6);
  swift_release();
  return v12;
}

uint64_t AudioPluginProcessor.__allocating_init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  AudioPluginProcessor.init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(a1, a2, a3, a4, a5);
  return v10;
}

void *AudioPluginProcessor.init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (void *)v5;
  uint64_t v20 = a5;
  *(_DWORD *)(v5 + 104) = 1059481190;
  uint64_t v9 = type metadata accessor for AudioRanker();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.init(identifier:)();
  id v15 = objc_allocWithZone(MEMORY[0x1E4F9FBE0]);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v17 = objc_msgSend(v15, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(void *)(v10 + 16) = v17;
  v6[5] = v9;
  v6[6] = &protocol witness table for AudioRanker;
  _OWORD v6[2] = v10;
  outlined init with take of AppDataProviding(a3, (uint64_t)(v6 + 7));
  v6[12] = a4;
  v6[14] = v20;
  return v6;
}

uint64_t AudioPluginProcessor.__allocating_init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 104) = 1059481190;
  outlined init with copy of AppDataProviding(a1, v6 + 16);
  outlined init with copy of AppDataProviding(a2, v6 + 56);
  id v7 = objc_msgSend(self, sel_sharedPreferences);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)(v6 + 96) = v7;
  *(void *)(v6 + 112) = a3;
  return v6;
}

uint64_t AudioPluginProcessor.init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(v3 + 104) = 1059481190;
  outlined init with copy of AppDataProviding(a1, v3 + 16);
  outlined init with copy of AppDataProviding(a2, v3 + 56);
  id v7 = objc_msgSend(self, sel_sharedPreferences);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)(v3 + 96) = v7;
  *(void *)(v3 + 112) = a3;
  return v3;
}

uint64_t AudioPluginProcessor.process(experience:clientResults:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 168))();
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if (v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t AudioPluginProcessor.process(with:clientResults:)(uint64_t a1, id *a2)
{
  uint64_t v177 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v180 = (char *)v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientRankingOverrides();
  uint64_t v181 = *(void *)(v179 - 8);
  MEMORY[0x1F4188790](v179);
  uint64_t v178 = (char *)v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v191 = *(void *)(v187 - 8);
  MEMORY[0x1F4188790](v187);
  uint64_t v183 = (char *)v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  int v189 = *(void (***)(char *, uint64_t))(v185 - 8);
  MEMORY[0x1F4188790](v185);
  uint64_t v188 = (char *)v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v14 = (char *)v163 - v13;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  char v176 = (char *)v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v163 - v22;
  Date.init()();
  int v24 = &v23[v19[5]];
  *(void *)int v24 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((void *)v24 + 1) = 48;
  v24[16] = 2;
  *(void *)&v23[v19[6]] = 87;
  os_log_type_t v25 = &v23[v19[7]];
  *(void *)os_log_type_t v25 = "process(with:clientResults:)";
  *((void *)v25 + 1) = 28;
  v25[16] = 2;
  uint64_t v26 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ELL);
  uint64_t v175 = v19;
  uint64_t v27 = v19[8];
  uint64_t v171 = v23;
  id v28 = (uint64_t *)&v23[v27];
  *id v28 = v26;
  v28[1] = v29;
  AudioExperience.audioUnderstanding.getter();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4F88C70], v8);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v31 = v192;
  double v30 = v193;
  long long v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v32(v12, v8);
  unint64_t v33 = v14;
  unint64_t v34 = v188;
  uint64_t v35 = v8;
  unint64_t v36 = v183;
  v32(v33, v35);
  if (*(void *)&v30 == v31)
  {
    AudioExperience.audioClientComponent.getter();
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    v189[1](v34, v185);
    int v37 = Apple_Parsec_Siri_V2alpha_ClientSignals.disableClientLibrarySearch.getter();
    (*(void (**)(char *, uint64_t))(v191 + 8))(v36, v187);
    int v172 = v37 ^ 1;
  }
  else
  {
    int v172 = 0;
  }
  uint64_t v184 = (void *)a1;
  uint64_t v186 = specialized static AudioQuery.makeNormalQuery(audioExperience:mode:)(a1);
  uint64_t v38 = dispatch thunk of AudioExperience.serverAudioResults.getter();
  unint64_t v39 = specialized AudioPluginProcessor.extractServerCandidates(from:)(v38);
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t)v176;
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v42 = specialized AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)(v186, v41 != 0);
  uint64_t v44 = v43;
  Date.init()();
  unint64_t v45 = v175;
  uint64_t v46 = v40 + v175[5];
  *(void *)uint64_t v46 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *(void *)(v46 + 8) = 48;
  *(unsigned char *)(v46 + 16) = 2;
  *(void *)(v40 + v45[6]) = 236;
  uint64_t v47 = v40 + v45[7];
  *(void *)uint64_t v47 = "extractClientCandidates(from:resultFilterPred:)";
  *(void *)(v47 + 8) = 47;
  *(unsigned char *)(v47 + 16) = 2;
  uint64_t v168 = "process(with:clientResults:)";
  uint64_t v48 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000038);
  uint64_t v49 = (uint64_t *)(v40 + v45[8]);
  *uint64_t v49 = v48;
  v49[1] = v50;
  unint64_t v51 = (void *)v190;
  id v169 = *(id *)(v190 + 96);
  char v52 = objc_msgSend(v169, sel_allowExplicitContent);
  unint64_t v53 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC860], v177, (uint64_t (*)(id *))closure #1 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:), 0, 0, 0, (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(NSObject *, uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy, (void (*)(NSObject *, uint64_t))outlined consume of (@escaping @callee_guaranteed () -> ())?, MEMORY[0x1E4F9FEB8]);
  uint64_t v55 = v54;
  swift_bridgeObjectRetain();
  unint64_t v56 = specialized Sequence.compactMap<A>(_:)(v55, (uint64_t)v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_retain();
  uint64_t v57 = specialized Sequence.compactMap<A>(_:)(v56, (uint64_t (*)(uint64_t))v42, v44, v51, v52);
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v40, 1);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1(v40, type metadata accessor for PerformanceUtil.Ticket);
  swift_release();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v182 = (void *)v59;
  unint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v167 = 0;
  if (v62)
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(double *)&uint64_t v64 = COERCE_DOUBLE(swift_slowAlloc());
    double v193 = *(double *)&v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    uint64_t v65 = type metadata accessor for AudioItemCandidate(0);
    uint64_t v66 = MEMORY[0x1CB77CDF0](v39, v65);
    uint64_t v192 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v60, v61, "AudioPluginProcessor#process serverCandidates: %s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v64, -1, -1);
    MEMORY[0x1CB77E470](v63, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v174 = v39;
  swift_bridgeObjectRetain_n();
  unint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  BOOL v70 = os_log_type_enabled(v68, v69);
  uint64_t v173 = v57;
  if (v70)
  {
    unint64_t v71 = (uint8_t *)swift_slowAlloc();
    *(double *)&uint64_t v72 = COERCE_DOUBLE(swift_slowAlloc());
    double v193 = *(double *)&v72;
    *(_DWORD *)unint64_t v71 = 136315138;
    uint64_t v73 = type metadata accessor for AudioItemCandidate(0);
    uint64_t v74 = MEMORY[0x1CB77CDF0](v57, v73);
    uint64_t v192 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v68, v69, "AudioPluginProcessor#process clientCandidates: %s", v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v72, -1, -1);
    MEMORY[0x1CB77E470](v71, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v76 = v187;
  unint64_t v77 = v188;
  uint64_t v78 = v191;
  unint64_t v79 = v184;
  uint64_t v80 = v185;
  uint64_t v81 = v189;
  uint64_t v82 = v183;
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  uint64_t v85 = v81[1];
  uint64_t v83 = v81 + 1;
  uint64_t v84 = v85;
  v85(v77, v80);
  uint64_t v86 = v178;
  Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
  uint64_t v87 = v82;
  uint64_t v88 = *(void (***)(char *, uint64_t))(v78 + 8);
  ((void (*)(char *, uint64_t))v88)(v87, v76);
  Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
  float v90 = v89;
  uint64_t v91 = v181 + 8;
  unsigned int v92 = v86;
  long long v93 = *(void (**)(char *, uint64_t))(v181 + 8);
  v93(v92, v179);
  if (v90 > 0.001)
  {
    id v166 = v93;
    int v189 = v88;
    uint64_t v181 = v91;
    uint64_t v94 = v79;
    Swift::String v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    int v97 = v96;
    if (os_log_type_enabled(v95, v96))
    {
      int v165 = v97;
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      uint64_t v164 = v98;
      *(_DWORD *)uint64_t v98 = 134217984;
      v163[1] = v98 + 12;
      v163[0] = v98 + 4;
      unint64_t v77 = v188;
      uint64_t v99 = v94;
      AudioExperience.audioClientComponent.getter();
      long long v100 = v183;
      Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
      uint64_t v80 = v185;
      v84(v77, v185);
      uint64_t v101 = v178;
      Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
      ((void (*)(char *, uint64_t))v189)(v100, v187);
      Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
      float v103 = v102;
      v166(v101, v179);
      double v193 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      unint64_t v104 = v164;
      _os_log_impl(&dword_1C8F83000, v95, (os_log_type_t)v165, "AudioPluginProcessor setting server override for clientCandidateCombinedTextMatchScoreThreshold to %f", v164, 0xCu);
      uint64_t v105 = v104;
      uint64_t v76 = v187;
      MEMORY[0x1CB77E470](v105, -1, -1);
    }
    else
    {

      Swift::String v95 = v94;
      uint64_t v80 = v185;
      unint64_t v77 = v188;
      uint64_t v101 = v178;
      long long v100 = v183;
    }

    AudioExperience.audioClientComponent.getter();
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    v84(v77, v80);
    Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    ((void (*)(char *, uint64_t))v189)(v100, v76);
    Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
    int v107 = v106;
    v166(v101, v179);
    *(_DWORD *)(v190 + 104) = v107;
  }
  AudioExperience.audioClientComponent.getter();
  uint64_t v108 = (uint64_t)v180;
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  int v189 = v83;
  v84(v77, v80);
  uint64_t v109 = v191 + 56;
  uint64_t v183 = *(char **)(v191 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v183)(v108, 0, 1, v76);
  unint64_t v110 = v174;
  unint64_t v111 = AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(v186, v174, v173, 0xD000000000000019, (void *)0x80000001C91A3A70, v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v108, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  double v193 = MEMORY[0x1E4FBC860];
  if (v111 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
    if (v112) {
      goto LABEL_23;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    uint64_t v112 = MEMORY[0x1E4FBC860];
    goto LABEL_37;
  }
  uint64_t v112 = *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v112) {
    goto LABEL_36;
  }
LABEL_23:
  if (v112 < 1)
  {
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v113 = 0;
  id v114 = (void *)MEMORY[0x1E4FBC8C8];
  do
  {
    if ((v111 & 0xC000000000000001) != 0) {
      uint64_t v115 = (void *)MEMORY[0x1CB77D510](v113, v111);
    }
    else {
      uint64_t v115 = *(id *)(v111 + 8 * v113 + 32);
    }
    long long v116 = v115;
    uint64_t v117 = (*(uint64_t (**)(void))((*v114 & *v115) + 0xF8))();

    if (v117)
    {
      MEMORY[0x1CB77CD90]();
      if (*(void *)((*(void *)&v193 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v193 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v113;
  }
  while (v112 != v113);
  swift_bridgeObjectRelease();
  uint64_t v112 = *(void *)&v193;
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.debug.getter();
  BOOL v120 = os_log_type_enabled(v118, v119);
  uint64_t v191 = v109;
  uint64_t v170 = v84;
  if (v120)
  {
    uint64_t v121 = (uint8_t *)swift_slowAlloc();
    *(double *)&uint64_t v122 = COERCE_DOUBLE(swift_slowAlloc());
    double v193 = *(double *)&v122;
    *(_DWORD *)uint64_t v121 = 136315138;
    uint64_t v123 = type metadata accessor for AudioResult();
    uint64_t v124 = MEMORY[0x1CB77CDF0](v112, v123);
    uint64_t v192 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v118, v119, "AudioPluginProcessor#process rankedResults: %s", v121, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v122, -1, -1);
    MEMORY[0x1CB77E470](v121, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v126 = *(void *)(v190 + 112);
  if (v126)
  {
    uint64_t v127 = type metadata accessor for UUID();
    uint64_t v182 = v163;
    uint64_t v128 = *(void *)(v127 - 8);
    MEMORY[0x1F4188790](v127);
    unint64_t v130 = (char *)v163 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v131 - 8);
    double v133 = (char *)v163 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
    type metadata accessor for SiriEnvironment();
    swift_retain();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.executionRequestId.getter();
    swift_release();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v133, 1, v127) == 1)
    {
      UUID.init()();
      outlined destroy of MediaUserStateCenter?((uint64_t)v133, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v130, v133, v127);
    }
    uint64_t v134 = v170;
    uint64_t v135 = v188;
    AudioExperience.audioClientComponent.getter();
    uint64_t v136 = (uint64_t)v180;
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    v134(v135, v185);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v183)(v136, 0, 1, v187);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v126 + 112))(v130, v136, v112);
    swift_release();
    outlined destroy of MediaUserStateCenter?(v136, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
  }
  if ((v172 & 1) == 0)
  {
    swift_release();
    double v160 = 0.0;
LABEL_64:
    uint64_t v161 = (uint64_t)v171;
    type metadata accessor for PommesAudioPluginResults();
    uint64_t v162 = swift_allocObject();
    *(void *)(v162 + 16) = v112;
    *(double *)(v162 + 24) = v160;
    (*(void (**)(uint64_t, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v161, 1);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1(v161, type metadata accessor for PerformanceUtil.Ticket);
    return v162;
  }
  uint64_t v137 = specialized static AudioQuery.makePlaylistQuery(audioExperience:)();
  uint64_t v138 = (uint64_t)v176;
  Date.init()();
  uint64_t v139 = v175;
  uint64_t v140 = v138 + v175[5];
  *(void *)uint64_t v140 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *(void *)(v140 + 8) = 48;
  *(unsigned char *)(v140 + 16) = 2;
  *(void *)(v138 + v139[6]) = 236;
  uint64_t v141 = v138 + v139[7];
  *(void *)uint64_t v141 = "extractClientCandidates(from:resultFilterPred:)";
  *(void *)(v141 + 8) = 47;
  *(unsigned char *)(v141 + 16) = 2;
  uint64_t v142 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000038);
  uint64_t v143 = (uint64_t *)(v138 + v139[8]);
  uint64_t *v143 = v142;
  v143[1] = v144;
  LOBYTE(v139) = objc_msgSend(v169, sel_allowExplicitContent);
  *(double *)&uint64_t v145 = MEMORY[0x1E4FBC860];
  double v146 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch12PommesResultCG_SDySSAFG07orderedG4Keys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedgi31_SaySSGtAlM_ANt_AHtXEfU_SayAA06F8K0CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_n04_s21cd145Search20AudioPluginProcessorC23extractClientCandidates33_B1E125C3E2EEE315F2EC4FC45BCA99444from16resultFilterPredSayAA0D13ItemCandidateCGSayAA12fG27CG_SbAA0hdZ0CXEtFSSSgALcfU_Tf1nncn_nTf4nng_n(MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC860], v177, 0);
  uint64_t v148 = v147;
  swift_bridgeObjectRetain();
  unint64_t v149 = specialized Sequence.compactMap<A>(_:)(v148, (uint64_t)v146);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  os_log_type_t v150 = (void *)v190;
  swift_retain();
  uint64_t v151 = specialized Sequence.compactMap<A>(_:)(v149, v150, (char)v139);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v138, 1);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1(v138, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t v152 = (uint64_t)v180;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v183)(v180, 1, 1, v187);
  unint64_t v110 = AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(v137, v145, v151, 0xD000000000000010, (void *)0x80000001C91A3A90, v152);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v152, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  double v193 = *(double *)&v145;
  if (!(v110 >> 62))
  {
    uint64_t v153 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v153) {
      goto LABEL_48;
    }
LABEL_62:
    swift_bridgeObjectRelease();
    double v160 = MEMORY[0x1E4FBC860];
LABEL_63:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_64;
  }
LABEL_61:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v153 = result;
  if (!result) {
    goto LABEL_62;
  }
LABEL_48:
  if (v153 >= 1)
  {
    uint64_t v155 = 0;
    uint64_t v156 = (void *)MEMORY[0x1E4FBC8C8];
    do
    {
      if ((v110 & 0xC000000000000001) != 0) {
        uint64_t v157 = (void *)MEMORY[0x1CB77D510](v155, v110);
      }
      else {
        uint64_t v157 = *(id *)(v110 + 8 * v155 + 32);
      }
      id v158 = v157;
      uint64_t v159 = (*(uint64_t (**)(void))((*v156 & *v157) + 0xF8))();

      if (v159)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((*(void *)&v193 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v193 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v155;
    }
    while (v153 != v155);
    swift_bridgeObjectRelease();
    double v160 = v193;
    goto LABEL_63;
  }
  __break(1u);
  return result;
}

uint64_t AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v44 = a6;
  uint64_t v13 = type metadata accessor for PerformanceUtil.Ticket(0);
  long long v14 = (int *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = 0;
  unint64_t v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v51 = 0xD00000000000001ALL;
  unint64_t v52 = 0x80000001C91A3B90;
  uint64_t v43 = a4;
  v17._uint64_t countAndFlagsBits = a4;
  v17._object = a5;
  String.append(_:)(v17);
  uint64_t v18 = v51;
  Date.init()();
  uint64_t v19 = &v16[v14[7]];
  *(void *)uint64_t v19 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((void *)v19 + 1) = 48;
  unsigned char v19[16] = 2;
  *(void *)&v16[v14[8]] = 150;
  uint64_t v20 = &v16[v14[9]];
  *(void *)uint64_t v20 = "rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)";
  *((void *)v20 + 1) = 70;
  v20[16] = 2;
  uint64_t v21 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v18);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  int v24 = (uint64_t *)&v16[v14[10]];
  uint64_t *v24 = v21;
  v24[1] = v23;
  uint64_t v25 = v7[5];
  uint64_t v26 = v7[6];
  __swift_project_boxed_opaque_existential_1(v7 + 2, v25);
  unint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8))(a1, a3, a2, v44, v25, v26);
  swift_retain();
  id v28 = (id *)specialized _ArrayProtocol.filter(_:)(v27);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v46 = closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:);
  uint64_t v47 = 0;
  uint64_t v48 = closure #2 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:);
  uint64_t v49 = 0;
  uint64_t v29 = specialized Sequence.reduce<A>(_:_:)(MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC860], (void (*)(void *__return_ptr, uint64_t *, id **))partial apply for specialized closure #1 in Collection<>.dedup(favoring:constructKey:), (uint64_t)v45, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRetain();
  unint64_t v32 = specialized Sequence.compactMap<A>(_:)(v31, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v51 = v37;
    *(_DWORD *)unint64_t v36 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, (unint64_t)a5, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v34, v35, "POMMES final ranked %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v37, -1, -1);
    MEMORY[0x1CB77E470](v36, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v38 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v38 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v38) {
      goto LABEL_15;
    }
  }
  if (v38 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v38; ++i)
  {
    if ((v32 & 0xC000000000000001) != 0) {
      id v41 = (id)MEMORY[0x1CB77D510](i, v32);
    }
    else {
      id v41 = *(id *)(v32 + 8 * i + 32);
    }
    uint64_t v42 = v41;
    closure #4 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(i, v41);
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v16, 1);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1((uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
  return v32;
}

BOOL closure #2 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(void **a1, void **a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  float v4 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  return (*(float (**)(void))((*v3 & *v2) + 0xA0))() <= v4;
}

uint64_t Collection<>.dedup(favoring:constructKey:)()
{
  swift_getAssociatedTypeWitness();
  Dictionary.init()();
  type metadata accessor for Dictionary();
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
  swift_getTupleTypeMetadata2();
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void closure #4 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  id v17 = a2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = v8;
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      id v12 = v17;
      id v13 = objc_msgSend(v12, sel_description);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v5, v6, "\n%s. %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v9, -1, -1);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }
  }
  else
  {
  }
}

uint64_t AudioPluginProcessor.postRankFilter(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (*((unsigned char *)a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) == 1)
  {
    uint64_t v4 = swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v4 = swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return 1;
    }
  }
  os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB8);
  uint64_t v8 = (void *)((uint64_t (*)(uint64_t))v7)(v4);
  float v9 = (*(float (**)(void))((*v6 & *v8) + 0x128))();

  if (*(float *)(v2 + 104) <= v9) {
    return 1;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  unint64_t v11 = a1;
  swift_retain_n();
  id v12 = v11;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v15 = 134218498;
    os_log_type_t type = v14;
    unint64_t v16 = (void *)v7();
    (*(void (**)(void))((*v6 & *v16) + 0x128))();

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v17 = swift_release_n();
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v18 = (*(uint64_t (**)(uint64_t))((*v6 & *v12) + 0x100))(v17);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v13, type, "AudioPluginProcessor : rejecting candidate due to combined text match score minimum threshold : %f < %f : %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v22, -1, -1);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return 0;
}

uint64_t closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
}

BOOL closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)()
{
  uint64_t v0 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v1 = dispatch thunk of VocabularyResult.fieldType.getter();

  return v1 != 216;
}

BOOL closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)()
{
  uint64_t v0 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v1 = dispatch thunk of VocabularyResult.fieldType.getter();

  return v1 != 210;
}

uint64_t closure #1 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)()
{
  return PommesResult.resultId.getter();
}

uint64_t specialized closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)@<X0>(void **a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  type metadata accessor for ClientAudioResult();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    float v9 = v7;
    uint64_t v10 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v11 = dispatch thunk of VocabularyResult.fieldType.getter();

    if (v11 != 216)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
      uint64_t v20 = v9;
      float v9 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        uint64_t v88 = v86;
        *(_DWORD *)uint64_t v22 = 136315138;
        uint64_t v23 = (void *)ClientAudioResult.vocabularyResult.getter();
        id v24 = objc_msgSend(v23, sel_description);

        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v9, v21, "AudioPluginProcessor : candidate predicate rejecting media item : %s", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        uint64_t v28 = v86;
LABEL_13:
        MEMORY[0x1CB77E470](v28, -1, -1);
        MEMORY[0x1CB77E470](v22, -1, -1);

LABEL_33:
        goto LABEL_34;
      }
      goto LABEL_31;
    }
    id v12 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v13 = VocabularyResult.itemId.getter();
    unint64_t v15 = v14;

    swift_bridgeObjectRelease();
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v16)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v30, v31))
      {

        goto LABEL_33;
      }
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v88 = v33;
      *(_DWORD *)unint64_t v32 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C91A3A40, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v30, v31, "%s vocabulary itemId is empty", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v33, -1, -1);
      MEMORY[0x1CB77E470](v32, -1, -1);

LABEL_34:
      uint64_t result = 0;
      goto LABEL_35;
    }
    uint64_t v17 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v18 = VocabularyResult.itemType.getter();

    if (v18 != 5)
    {
      if (v18 == 16)
      {
        uint64_t result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v9, 0);
        goto LABEL_35;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
      uint64_t v20 = v9;
      float v9 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v53))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v88 = v54;
        *(_DWORD *)uint64_t v22 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C91A3A40, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 2080;
        uint64_t v55 = (void *)ClientAudioResult.vocabularyResult.getter();
        VocabularyResult.itemType.getter();

        uint64_t v56 = KVItemType.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v9, v53, "%s unsupported vocabulary item type : %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        uint64_t v28 = v54;
        goto LABEL_13;
      }
LABEL_31:

      goto LABEL_34;
    }
    uint64_t v87 = a4;
    unint64_t v34 = a2 + 7;
    uint64_t v36 = a2[10];
    uint64_t v35 = a2[11];
    __swift_project_boxed_opaque_existential_1(v34, v36);
    uint64_t v37 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v38 = VocabularyResult.itemId.getter();
    uint64_t v40 = v39;

    id v41 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8))(v38, v40, v36, v35);
    swift_bridgeObjectRelease();
    if (v41)
    {
      if (v41[32])
      {
        a4 = v87;
        if (v41[35])
        {
          if ((a3 & 1) != 0 || (v41[33] & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v9, (uint64_t)v41);
            goto LABEL_35;
          }
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
          float v9 = v9;
          uint64_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v43, v44))
          {
            unint64_t v45 = (uint8_t *)swift_slowAlloc();
            uint64_t v84 = swift_slowAlloc();
            uint64_t v88 = v84;
            *(_DWORD *)unint64_t v45 = 136315138;
            uint64_t v46 = (void *)ClientAudioResult.vocabularyResult.getter();
            id v47 = objc_msgSend(v46, sel_description);

            uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v50 = v49;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v88);
            a4 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            uint64_t v51 = "AudioPluginProcessor : rejecting explicit content for %s";
LABEL_49:
            _os_log_impl(&dword_1C8F83000, v43, v44, v51, v45, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v84, -1, -1);
            MEMORY[0x1CB77E470](v45, -1, -1);

            swift_release();
            goto LABEL_34;
          }
        }
        else
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v78 = type metadata accessor for Logger();
          __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
          float v9 = v9;
          uint64_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v43, v44))
          {
            unint64_t v45 = (uint8_t *)swift_slowAlloc();
            uint64_t v84 = swift_slowAlloc();
            uint64_t v88 = v84;
            *(_DWORD *)unint64_t v45 = 136315138;
            unint64_t v79 = (void *)ClientAudioResult.vocabularyResult.getter();
            id v80 = objc_msgSend(v79, sel_description);

            uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v83 = v82;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, &v88);
            a4 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            uint64_t v51 = "AudioPluginProcessor : rejecting media item is not playable : %s";
            goto LABEL_49;
          }
        }

        swift_release();
        goto LABEL_33;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)static Logger.pommes);
      unint64_t v60 = v9;
      BOOL v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        uint64_t v88 = v85;
        *(_DWORD *)uint64_t v72 = 136315138;
        uint64_t v73 = (void *)ClientAudioResult.vocabularyResult.getter();
        id v74 = objc_msgSend(v73, sel_description);

        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v77 = v76;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v70, v71, "AudioPluginProcessor : rejecting media item not in library : %s", v72, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v85, -1, -1);
        MEMORY[0x1CB77E470](v72, -1, -1);

        swift_release();
LABEL_52:
        uint64_t result = 0;
        a4 = v87;
        goto LABEL_35;
      }

      swift_release();
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
      uint64_t v59 = v9;
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v60, v61))
      {

        goto LABEL_52;
      }
      BOOL v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v88 = v63;
      *(_DWORD *)BOOL v62 = 136315138;
      uint64_t v64 = (void *)ClientAudioResult.vocabularyResult.getter();
      id v65 = objc_msgSend(v64, sel_description);

      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v68 = v67;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v60, v61, "AudioPluginProcessor : media item ranking signals is nil : %s", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v63, -1, -1);
      MEMORY[0x1CB77E470](v62, -1, -1);
    }
    goto LABEL_52;
  }
LABEL_35:
  *a4 = result;
  return result;
}

uint64_t closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)@<X0>(void **a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void *a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  float v9 = *a1;
  type metadata accessor for ClientAudioResult();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v11 = result;
    id v12 = v9;
    if ((a2(v11) & 1) == 0)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
      uint64_t v39 = v12;
      id v12 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        uint64_t v90 = v89;
        *(_DWORD *)uint64_t v41 = 136315138;
        uint64_t v42 = (void *)ClientAudioResult.vocabularyResult.getter();
        id v43 = objc_msgSend(v42, sel_description);

        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v45 = a5;
        unint64_t v47 = v46;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v47, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a5 = v45;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v12, v40, "AudioPluginProcessor : candidate predicate rejecting media item : %s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy();
        uint64_t v48 = v89;
LABEL_21:
        MEMORY[0x1CB77E470](v48, -1, -1);
        MEMORY[0x1CB77E470](v41, -1, -1);

LABEL_33:
        goto LABEL_34;
      }
      goto LABEL_31;
    }
    uint64_t v13 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v14 = VocabularyResult.itemId.getter();
    unint64_t v16 = v15;

    swift_bridgeObjectRelease();
    uint64_t v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v50, v51))
      {

        goto LABEL_33;
      }
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v90 = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C91A3A40, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v50, v51, "%s vocabulary itemId is empty", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v53, -1, -1);
      MEMORY[0x1CB77E470](v52, -1, -1);

LABEL_34:
      uint64_t result = 0;
      goto LABEL_35;
    }
    uint64_t v18 = (void *)ClientAudioResult.vocabularyResult.getter();
    uint64_t v19 = VocabularyResult.itemType.getter();

    if (v19 != 16)
    {
      if (v19 == 5)
      {
        uint64_t v88 = a5;
        uint64_t v20 = a3 + 7;
        uint64_t v22 = a3[10];
        uint64_t v21 = a3[11];
        __swift_project_boxed_opaque_existential_1(v20, v22);
        uint64_t v23 = (void *)ClientAudioResult.vocabularyResult.getter();
        uint64_t v24 = VocabularyResult.itemId.getter();
        uint64_t v26 = v25;

        unint64_t v27 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8))(v24, v26, v22, v21);
        swift_bridgeObjectRelease();
        if (v27)
        {
          if (v27[32])
          {
            a5 = v88;
            if (v27[35] == 1)
            {
              if ((a4 & 1) != 0 || (v27[33] & 1) == 0)
              {
                uint64_t result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v12, (uint64_t)v27);
                goto LABEL_35;
              }
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v28 = type metadata accessor for Logger();
              __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
              id v12 = v12;
              uint64_t v29 = Logger.logObject.getter();
              os_log_type_t v30 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v29, v30))
              {
                os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
                uint64_t v86 = swift_slowAlloc();
                uint64_t v90 = v86;
                *(_DWORD *)os_log_type_t v31 = 136315138;
                unint64_t v32 = (void *)ClientAudioResult.vocabularyResult.getter();
                id v33 = objc_msgSend(v32, sel_description);

                uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v36 = v35;

                getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                a5 = v88;
                swift_bridgeObjectRelease();
                uint64_t v37 = "AudioPluginProcessor : rejecting explicit content for %s";
LABEL_49:
                _os_log_impl(&dword_1C8F83000, v29, v30, v37, v31, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1CB77E470](v86, -1, -1);
                MEMORY[0x1CB77E470](v31, -1, -1);

                swift_release();
                goto LABEL_34;
              }
            }
            else
            {
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v80 = type metadata accessor for Logger();
              __swift_project_value_buffer(v80, (uint64_t)static Logger.pommes);
              id v12 = v12;
              uint64_t v29 = Logger.logObject.getter();
              os_log_type_t v30 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v29, v30))
              {
                os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
                uint64_t v86 = swift_slowAlloc();
                uint64_t v90 = v86;
                *(_DWORD *)os_log_type_t v31 = 136315138;
                uint64_t v81 = (void *)ClientAudioResult.vocabularyResult.getter();
                id v82 = objc_msgSend(v81, sel_description);

                uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v85 = v84;

                getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v85, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                a5 = v88;
                swift_bridgeObjectRelease();
                uint64_t v37 = "AudioPluginProcessor : rejecting media item is not playable : %s";
                goto LABEL_49;
              }
            }

            swift_release();
            goto LABEL_33;
          }
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v71 = type metadata accessor for Logger();
          __swift_project_value_buffer(v71, (uint64_t)static Logger.pommes);
          BOOL v62 = v12;
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v72, v73))
          {
            id v74 = (uint8_t *)swift_slowAlloc();
            uint64_t v87 = swift_slowAlloc();
            uint64_t v90 = v87;
            *(_DWORD *)id v74 = 136315138;
            uint64_t v75 = (void *)ClientAudioResult.vocabularyResult.getter();
            id v76 = objc_msgSend(v75, sel_description);

            uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v79 = v78;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, &v90);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C8F83000, v72, v73, "AudioPluginProcessor : rejecting media item not in library : %s", v74, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v87, -1, -1);
            MEMORY[0x1CB77E470](v74, -1, -1);

            swift_release();
LABEL_52:
            uint64_t result = 0;
            a5 = v88;
            goto LABEL_35;
          }

          swift_release();
        }
        else
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v60 = type metadata accessor for Logger();
          __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
          os_log_type_t v61 = v12;
          BOOL v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v62, v63))
          {

            goto LABEL_52;
          }
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          uint64_t v90 = v65;
          *(_DWORD *)uint64_t v64 = 136315138;
          uint64_t v66 = (void *)ClientAudioResult.vocabularyResult.getter();
          id v67 = objc_msgSend(v66, sel_description);

          uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v70 = v69;

          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, &v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v62, v63, "AudioPluginProcessor : media item ranking signals is nil : %s", v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v65, -1, -1);
          MEMORY[0x1CB77E470](v64, -1, -1);
        }
        goto LABEL_52;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
      uint64_t v39 = v12;
      id v12 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v55))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v90 = v56;
        *(_DWORD *)uint64_t v41 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C91A3A40, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 12) = 2080;
        unint64_t v57 = (void *)ClientAudioResult.vocabularyResult.getter();
        VocabularyResult.itemType.getter();

        uint64_t v58 = KVItemType.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v12, v55, "%s unsupported vocabulary item type : %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        uint64_t v48 = v56;
        goto LABEL_21;
      }
LABEL_31:

      goto LABEL_34;
    }
    uint64_t result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v12, 0);
  }
LABEL_35:
  *a5 = result;
  return result;
}

uint64_t AudioPluginProcessor.extractClientCandidatesForMacOS(from:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C8F83000, v6, v7, "AudioPluginProcessor#extractClientCandidatesForMacOS reached ranking beginning", v8, 2u);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }

  float v9 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v10 = dispatch thunk of VocabularyResult.fieldType.getter();

  *((void *)&v11 + 1) = v10;
  *(void *)&long long v11 = v10 - 202;
  int v106 = v2;
  switch((unint64_t)(v11 >> 1))
  {
    case 0uLL:
      uint64_t v12 = 2;
      goto LABEL_11;
    case 1uLL:
      uint64_t v12 = 4;
      goto LABEL_11;
    case 3uLL:
    case 7uLL:
      uint64_t v12 = 1;
      goto LABEL_11;
    case 4uLL:
      uint64_t v12 = 3;
LABEL_11:
      uint64_t v111 = v12;
      break;
    default:
      uint64_t v12 = 0;
      uint64_t v111 = 0;
      break;
  }
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v108 = v16;
    *(_DWORD *)unint64_t v15 = 136315138;
    v110[0] = v12;
    type metadata accessor for MPMediaEntityType(0);
    uint64_t v17 = String.init<A>(describing:)();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v13, v14, "AudioPluginProcessor#extractClientCandidatesForMacOS entityType: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v16, -1, -1);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }

  uint64_t v19 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v20 = VocabularyResult.itemId.getter();
  unint64_t v22 = v21;

  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v108 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v23, v24, "AudioPluginProcessor#extractClientCandidatesForMacOS itemId: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v108 = v20;
  uint64_t v109 = v22;
  v110[0] = 0x63697665642F2F3ALL;
  v110[1] = 0xEA00000000002F65;
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v27 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (v27[2] <= 1uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v108 = v37;
      *(_DWORD *)unint64_t v36 = 136315138;
      swift_bridgeObjectRetain();
      v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v38 = "AudioPluginProcessor#extractClientCandidatesForMacOS itemId is of incorrect format: %s";
LABEL_75:
      _os_log_impl(&dword_1C8F83000, v34, v35, v38, v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v37, -1, -1);
      uint64_t v87 = v36;
LABEL_76:
      MEMORY[0x1CB77E470](v87, -1, -1);

      return 0;
    }

LABEL_78:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  uint64_t v28 = v27[6];
  unint64_t v29 = v27[7];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  uint64_t v105 = v5;
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  id v102 = a1;
  uint64_t v103 = v20;
  unint64_t v104 = v22;
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v108 = v33;
    *(_DWORD *)unint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v30, v31, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentIDUnTrimmed: %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v33, -1, -1);
    MEMORY[0x1CB77E470](v32, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v108 = v28;
  uint64_t v109 = v29;
  uint64_t v39 = type metadata accessor for CharacterSet();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(void *)(v40 + 64);
  MEMORY[0x1F4188790](v39);
  uint64_t v42 = CharacterSet.init(charactersIn:)();
  MEMORY[0x1F4188790](v42);
  id v43 = (char *)&v101 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  CharacterSet.inverted.getter();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v43, v39);
  uint64_t v45 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v47 = v46;
  v44(v43, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    uint64_t v108 = v51;
    *(_DWORD *)unint64_t v50 = 136315138;
    swift_bridgeObjectRetain();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v48, v49, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentIDTrimmed: %s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v51, -1, -1);
    MEMORY[0x1CB77E470](v50, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v53 = v104;
  uint64_t v54 = HIBYTE(v47) & 0xF;
  uint64_t v55 = v45 & 0xFFFFFFFFFFFFLL;
  if ((v47 & 0x2000000000000000) != 0) {
    uint64_t v56 = HIBYTE(v47) & 0xF;
  }
  else {
    uint64_t v56 = v45 & 0xFFFFFFFFFFFFLL;
  }
  if (!v56)
  {
    swift_bridgeObjectRelease();
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v86 = v53;
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v108 = v37;
      *(_DWORD *)unint64_t v36 = 136315138;
      swift_bridgeObjectRetain();
      v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v86, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v38 = "AudioPluginProcessor#extractClientCandidatesForMacOS failed to extract persistentID from itemId: %s";
      goto LABEL_75;
    }

    goto LABEL_78;
  }
  if ((v47 & 0x1000000000000000) != 0)
  {
    unint64_t v58 = (unint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v45, v47, 10);
    char v60 = v100;
    goto LABEL_66;
  }
  if ((v47 & 0x2000000000000000) != 0)
  {
    uint64_t v108 = v45;
    uint64_t v109 = v47 & 0xFFFFFFFFFFFFFFLL;
    if (v45 == 43)
    {
      if (v54)
      {
        if (v54 != 1 && (BYTE1(v45) - 48) <= 9u)
        {
          unint64_t v58 = (BYTE1(v45) - 48);
          uint64_t v66 = v54 - 2;
          if (v66)
          {
            id v67 = (unsigned __int8 *)&v108 + 2;
            while (1)
            {
              unsigned int v68 = *v67 - 48;
              if (v68 > 9) {
                goto LABEL_63;
              }
              if (!is_mul_ok(v58, 0xAuLL)) {
                goto LABEL_63;
              }
              BOOL v65 = __CFADD__(10 * v58, v68);
              unint64_t v58 = 10 * v58 + v68;
              if (v65) {
                goto LABEL_63;
              }
              char v60 = 0;
              ++v67;
              if (!--v66) {
                goto LABEL_66;
              }
            }
          }
          goto LABEL_65;
        }
        goto LABEL_63;
      }
    }
    else
    {
      if (v45 != 45)
      {
        if (v54 && (v45 - 48) <= 9u)
        {
          unint64_t v58 = (v45 - 48);
          uint64_t v69 = v54 - 1;
          if (v69)
          {
            uint64_t v98 = (unsigned __int8 *)&v108 + 1;
            while (1)
            {
              unsigned int v99 = *v98 - 48;
              if (v99 > 9) {
                goto LABEL_63;
              }
              if (!is_mul_ok(v58, 0xAuLL)) {
                goto LABEL_63;
              }
              BOOL v65 = __CFADD__(10 * v58, v99);
              unint64_t v58 = 10 * v58 + v99;
              if (v65) {
                goto LABEL_63;
              }
              char v60 = 0;
              ++v98;
              if (!--v69) {
                goto LABEL_66;
              }
            }
          }
          goto LABEL_65;
        }
        goto LABEL_63;
      }
      if (v54)
      {
        if (v54 != 1)
        {
          unsigned __int8 v61 = BYTE1(v45) - 48;
          if ((BYTE1(v45) - 48) <= 9u)
          {
            unint64_t v52 = 0;
            unint64_t v58 = -(uint64_t)v61;
            if (!v61)
            {
              uint64_t v62 = v54 - 2;
              if (v62)
              {
                os_log_type_t v63 = (unsigned __int8 *)&v108 + 2;
                while (1)
                {
                  unsigned int v64 = *v63 - 48;
                  if (v64 > 9) {
                    goto LABEL_63;
                  }
                  if (!is_mul_ok(v58, 0xAuLL)) {
                    goto LABEL_63;
                  }
                  BOOL v65 = 10 * v58 >= v64;
                  unint64_t v58 = 10 * v58 - v64;
                  if (!v65) {
                    goto LABEL_63;
                  }
                  char v60 = 0;
                  ++v63;
                  if (!--v62) {
                    goto LABEL_66;
                  }
                }
              }
LABEL_65:
              char v60 = 0;
              goto LABEL_66;
            }
LABEL_94:
            char v60 = 1;
            unint64_t v58 = v52;
            goto LABEL_66;
          }
        }
LABEL_63:
        unint64_t v58 = 0;
        char v60 = 1;
        goto LABEL_66;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_94;
  }
  if ((v45 & 0x1000000000000000) != 0) {
    unint64_t v57 = (unsigned __int8 *)((v47 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    unint64_t v57 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v58 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v57, v55, 10);
  char v60 = v59 & 1;
LABEL_66:
  swift_bridgeObjectRelease();
  if (v60) {
    goto LABEL_73;
  }
  swift_bridgeObjectRelease();
  unint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v108 = v73;
    *(_DWORD *)uint64_t v72 = 136315138;
    v110[0] = v58;
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    v110[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v70, v71, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentID: %s", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v73, -1, -1);
    MEMORY[0x1CB77E470](v72, -1, -1);
  }

  uint64_t v76 = v106[10];
  uint64_t v77 = v106[11];
  __swift_project_boxed_opaque_existential_1(v106 + 7, v76);
  swift_beginAccess();
  uint64_t v78 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v77 + 16))(v58, v111, v76, v77);
  if (!v78)
  {
    id v89 = v102;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v90))
    {

      return 0;
    }
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    v110[0] = v92;
    *(_DWORD *)uint64_t v91 = 136315138;
    long long v93 = (void *)ClientAudioResult.vocabularyResult.getter();
    id v94 = objc_msgSend(v93, sel_description);

    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v97 = v96;

    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v97, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v34, v90, "AudioPluginProcessor#extractClientCandidatesForMacOS media item ranking signals is nil : %s", v91, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v92, -1, -1);
    uint64_t v87 = v91;
    goto LABEL_76;
  }
  uint64_t v79 = v78;
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v81))
  {
    id v82 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    v110[0] = v83;
    *(_DWORD *)id v82 = 136315138;
    uint64_t v107 = v58;
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v80, v81, "AudioPluginProcessor#extractClientCandidates macOS mediaItemRankingSignals: %s", v82, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v83, -1, -1);
    MEMORY[0x1CB77E470](v82, -1, -1);
  }

  return v79;
}

uint64_t AudioPluginProcessor.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_release();
  return v0;
}

uint64_t AudioPluginProcessor.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_release();

  return swift_deallocClassInstance();
}

void *specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(void *a1, void *a2, void *a3, uint64_t (*a4)(id *, id *))
{
  id v68 = a3;
  swift_bridgeObjectRetain();
  uint64_t v8 = PommesResult.resultId.getter();
  uint64_t v10 = v9;
  if (!a1[2]
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v8, v10),
        char v12 = v11,
        swift_bridgeObjectRelease(),
        (v12 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    id v31 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v67 = a1;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v31, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
    }
    unint64_t v34 = a2[2];
    unint64_t v33 = a2[3];
    if (v34 >= v33 >> 1) {
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, a2);
    }
    a2[2] = v34 + 1;
    os_log_type_t v35 = &a2[2 * v34];
    v35[4] = v8;
    v35[5] = v10;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!a4 || !a1[2])
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy((uint64_t)a4);
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
    goto LABEL_17;
  }
  id v15 = *(id *)(a1[7] + 8 * v13);
  swift_bridgeObjectRelease();
  id v67 = v15;
  if (a4(&v67, &v68))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    id v17 = v67;
    id v18 = v68;
    id v19 = v17;
    id v20 = v18;
    id v21 = v19;
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t type = v23;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v66 = (void *)v62;
      *(_DWORD *)uint64_t v24 = 136315906;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      type metadata accessor for PommesResult();
      id v25 = v20;
      uint64_t v26 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 32) = 2080;
      id v28 = v21;
      uint64_t v29 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v22, type, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v24, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v62, -1, -1);
      MEMORY[0x1CB77E470](v24, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
    }
    else
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
      swift_bridgeObjectRelease();
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  id v37 = a3;
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = a1;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v37, v8, v10, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  id v40 = v68;
  id v41 = v67;
  id v42 = v40;
  id v63 = v41;
  os_log_t log = (os_log_t)v42;
  id v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    os_log_type_t v58 = v44;
    uint64_t v45 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v66 = (void *)v59;
    *(_DWORD *)uint64_t v45 = 136315906;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&v66);
    typea = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 22) = 2080;
    type metadata accessor for PommesResult();
    id v46 = v63;
    uint64_t v47 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 32) = 2080;
    os_log_t loga = log;
    uint64_t v49 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, typea, v58, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v45, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v59, -1, -1);
    MEMORY[0x1CB77E470](v45, -1, -1);
  }
  else
  {
  }
  uint64_t v66 = a2;
  uint64_t v51 = specialized Collection<>.firstIndex(of:)(v8, v10, a2);
  if (v52)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v53 = v51;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v53);
    swift_bridgeObjectRelease();
  }
  uint64_t v54 = v66;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
  }
  unint64_t v56 = v54[2];
  unint64_t v55 = v54[3];
  if (v56 >= v55 >> 1) {
    uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
  }
  v54[2] = v56 + 1;
  unint64_t v57 = &v54[2 * v56];
  v57[4] = v8;
  v57[5] = v10;
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
  swift_bridgeObjectRelease();

  return a1;
}

NSObject *specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(NSObject *a1, void *a2, void *a3, uint64_t (*a4)(id *), uint64_t a5, NSObject *a6, uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t), void (*a9)(NSObject *, uint64_t), void (*a10)(NSObject *, uint64_t), void (*a11)(void))
{
  id v80 = a3;
  swift_bridgeObjectRetain();
  uint64_t v17 = a4(&v80);
  if (!v18) {
    goto LABEL_19;
  }
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  if (!a1[2].isa
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v19, v20),
        char v22 = v21,
        swift_bridgeObjectRelease(),
        (v22 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    id v42 = a3;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v79 = a1;
    a8(v42, v19, v20, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
    }
    unint64_t v45 = a2[2];
    unint64_t v44 = a2[3];
    if (v45 >= v44 >> 1) {
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, a2);
    }
    a2[2] = v45 + 1;
    id v46 = &a2[2 * v45];
    v46[4] = v19;
    uint64_t v46[5] = v20;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!a6 || !a1[2].isa)
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  a9(a6, a7);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a10(a6, a7);
    goto LABEL_18;
  }
  id v25 = *((id *)a1[7].isa + v23);
  swift_bridgeObjectRelease();
  uint64_t v79 = v25;
  if (((uint64_t (*)(NSObject **, id *))a6)(&v79, &v80))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    unint64_t v27 = v79;
    id v28 = v80;
    uint64_t v29 = v27;
    id v30 = v28;
    id v31 = v29;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      p_Class isa = (void *)v74;
      *(_DWORD *)uint64_t v34 = 136315906;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2080;
      a11(0);
      id v35 = v30;
      uint64_t v36 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 32) = 2080;
      char v38 = v31;
      uint64_t v39 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v32, v33, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v34, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v74, -1, -1);
      MEMORY[0x1CB77E470](v34, -1, -1);
      a10(a6, a7);

      id v41 = v79;
    }
    else
    {
      a10(a6, a7);
      swift_bridgeObjectRelease();

      id v41 = v32;
    }

    goto LABEL_20;
  }
  os_log_t log = a6;
  swift_bridgeObjectRetain();
  id v48 = a3;
  uint64_t v49 = swift_isUniquelyReferenced_nonNull_native();
  p_Class isa = &a1->isa;
  a8(v48, v19, v20, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
  id v51 = v80;
  char v52 = v79;
  id v53 = v51;
  unint64_t v75 = v52;
  id v54 = v53;
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t type = swift_slowAlloc();
    p_Class isa = (void *)type;
    *(_DWORD *)uint64_t v57 = 136315906;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&p_isa);
    os_log_type_t v72 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 22) = 2080;
    a11(0);
    os_log_type_t v58 = v75;
    uint64_t v59 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 32) = 2080;
    id v61 = v54;
    uint64_t v62 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v55, v72, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v57, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](type, -1, -1);
    MEMORY[0x1CB77E470](v57, -1, -1);
  }
  else
  {
  }
  p_Class isa = a2;
  uint64_t v64 = specialized Collection<>.firstIndex(of:)(v19, v20, a2);
  if (v65)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v66 = v64;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v66);
    swift_bridgeObjectRelease();
    a2 = p_isa;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
  }
  id v67 = a10;
  unint64_t v69 = a2[2];
  unint64_t v68 = a2[3];
  if (v69 >= v68 >> 1)
  {
    os_log_type_t v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, a2);
    id v67 = a10;
    a2 = v71;
  }
  a2[2] = v69 + 1;
  unint64_t v70 = &a2[2 * v69];
  v70[4] = v19;
  v70[5] = v20;
  v67(log, a7);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t *a1@<X0>, NSObject *a2@<X1>, uint64_t (*a3)(NSObject *)@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  double v133 = a7;
  uint64_t v128 = a6;
  unint64_t v130 = (uint64_t (*)(char *, NSObject *))a5;
  uint64_t v132 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v134 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v123 = (void (*)(char *, char *, uint64_t))((char *)v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v125 = (os_log_t *)((char *)v115 - v14);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v115 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v122 = (char *)v115 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v124 = (char *)v115 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v126 = (char *)v115 - v22;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  os_log_t v127 = (os_log_t)((char *)v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v129 = (os_log_t *)((char *)v115 - v28);
  MEMORY[0x1F4188790](v27);
  id v30 = (char *)v115 - v29;
  uint64_t v32 = *a1;
  id v31 = a1[1];
  uint64_t v138 = v32;
  swift_bridgeObjectRetain();
  uint64_t v131 = a2;
  os_log_t v33 = (os_log_t)a3(a2);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = v133;
    *double v133 = v32;
    v49[1] = v31;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  os_log_t v35 = v33;
  uint64_t v36 = v34;
  uint64_t v117 = v17;
  uint64_t v132 = v31;
  os_log_t v136 = v33;
  uint64_t v137 = v34;
  swift_bridgeObjectRetain();
  uint64_t v121 = v32;
  MEMORY[0x1CB77CA00](&v136, v32, MEMORY[0x1E4FBB1A0], AssociatedTypeWitness, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  uint64_t v37 = v36;
  char v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 48);
  LODWORD(v36) = v38(v30, 1, AssociatedTypeWitness);
  unint64_t v40 = *(void (**)(os_log_t, uint64_t))(v24 + 8);
  uint64_t v39 = v24 + 8;
  os_log_type_t v119 = v40;
  v40((os_log_t)v30, v23);
  if (v36 == 1)
  {
    uint64_t v41 = v134;
    id v42 = v129;
    (*(void (**)(os_log_t *, NSObject *, uint64_t))(v134 + 16))(v129, v131, AssociatedTypeWitness);
    (*(void (**)(os_log_t *, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, AssociatedTypeWitness);
    os_log_t v136 = v35;
    uint64_t v137 = v37;
    type metadata accessor for Dictionary();
    swift_bridgeObjectRetain();
    Dictionary.subscript.setter();
    unint64_t v44 = v132;
    id v43 = v133;
    *double v133 = v138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v44[2].isa + 1, 1, v44);
    }
    unint64_t isa = (unint64_t)v44[2].isa;
    unint64_t v45 = (unint64_t)v44[3].isa;
    if (isa >= v45 >> 1) {
      unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), isa + 1, 1, v44);
    }
    v44[2].unint64_t isa = (Class)(isa + 1);
    uint64_t v47 = &v44[2 * isa];
    v47[4].unint64_t isa = (Class)v35;
    v47[5].unint64_t isa = (Class)v37;
    uint64_t result = swift_bridgeObjectRelease();
    v43[1] = v44;
    return result;
  }
  long long v116 = v35;
  uint64_t v120 = v37;
  uint64_t v118 = AssociatedTypeWitness;
  uint64_t v50 = v130;
  if (!v130)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v121;
    goto LABEL_13;
  }
  v115[1] = v39;
  uint64_t v51 = v23;
  os_log_t v136 = v116;
  uint64_t v137 = v120;
  swift_bridgeObjectRetain();
  _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy((uint64_t)v50);
  os_log_t v52 = v127;
  uint64_t v53 = v121;
  uint64_t v54 = v118;
  MEMORY[0x1CB77CA00](&v136, v121, MEMORY[0x1E4FBB1A0], v118, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  if (v38((char *)v52, 1, v54) == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v50);
    swift_bridgeObjectRelease();
    v119(v52, v51);
LABEL_13:
    os_log_type_t v56 = v132;
    unint64_t v55 = v133;
    *double v133 = v53;
    v55[1] = v56;
LABEL_14:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  uint64_t v57 = v134;
  os_log_type_t v58 = v126;
  (*(void (**)(char *, os_log_t, uint64_t))(v134 + 32))(v126, v52, v54);
  uint64_t v59 = v131;
  if (v50(v58, v131))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
    uint64_t v61 = v57;
    uint64_t v62 = *(void (**)(char *, NSObject *, uint64_t))(v57 + 16);
    v62(v124, v131, v54);
    unint64_t v63 = v122;
    v62(v122, v58, v54);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    int v66 = v65;
    uint64_t v131 = v64;
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v123 = (void (*)(char *, char *, uint64_t))v62;
      uint64_t v68 = v67;
      os_log_t v127 = (os_log_t)swift_slowAlloc();
      os_log_t v136 = v127;
      *(_DWORD *)uint64_t v68 = 136315906;
      LODWORD(v125) = v66;
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&v136);
      uint64_t v129 = &v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 12) = 2080;
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 22) = 2080;
      uint64_t v120 = v68 + 24;
      unint64_t v69 = v117;
      unint64_t v70 = v123;
      os_log_type_t v71 = v124;
      os_log_type_t v72 = v63;
      v123(v117, v124, v118);
      uint64_t v73 = String.init<A>(describing:)();
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v134 = *(void *)(v61 + 8);
      unint64_t v75 = v71;
      uint64_t v76 = v118;
      ((void (*)(char *, uint64_t))v134)(v75, v118);
      *(_WORD *)(v68 + 32) = 2080;
      uint64_t v124 = (char *)(v68 + 34);
      v70(v69, v63, v76);
      uint64_t v77 = String.init<A>(describing:)();
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = (void (*)(char *, uint64_t))v134;
      ((void (*)(char *, uint64_t))v134)(v72, v76);
      id v80 = v131;
      _os_log_impl(&dword_1C8F83000, v131, (os_log_type_t)v125, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v68, 0x2Au);
      os_log_t v81 = v127;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v81, -1, -1);
      MEMORY[0x1CB77E470](v68, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v130);

      v79(v126, v76);
    }
    else
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v130);

      uint64_t v103 = *(void (**)(char *, uint64_t))(v61 + 8);
      v103(v63, v54);
      v103(v124, v54);
      v103(v58, v54);
      swift_bridgeObjectRelease();
    }
    uint64_t v105 = v132;
    unint64_t v104 = v133;
    *double v133 = v121;
    v104[1] = v105;
    goto LABEL_14;
  }
  uint64_t v82 = v57;
  uint64_t v83 = *(void (**)(os_log_t *, NSObject *, uint64_t))(v57 + 16);
  uint64_t v84 = v129;
  v83(v129, v59, v54);
  (*(void (**)(os_log_t *, void, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v54);
  uint64_t v85 = v120;
  os_log_t v136 = v116;
  uint64_t v137 = v120;
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  Dictionary.subscript.setter();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v86 = type metadata accessor for Logger();
  __swift_project_value_buffer(v86, (uint64_t)static Logger.pommes);
  v83(v125, v58, v54);
  uint64_t v87 = (char *)v123;
  v83((os_log_t *)v123, v59, v54);
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.debug.getter();
  LODWORD(v131) = v89;
  if (os_log_type_enabled(v88, v89))
  {
    uint64_t v90 = swift_slowAlloc();
    os_log_t v127 = v88;
    uint64_t v91 = v90;
    uint64_t v129 = (os_log_t *)swift_slowAlloc();
    os_log_t v136 = (os_log_t)v129;
    *(_DWORD *)uint64_t v91 = 136315906;
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C91A39A0, (uint64_t *)&v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 12) = 2080;
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C91A3B70, (uint64_t *)&v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 22) = 2080;
    uint64_t v92 = (os_log_t *)v117;
    long long v93 = (char *)v125;
    v83((os_log_t *)v117, v125, v118);
    uint64_t v94 = String.init<A>(describing:)();
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v96 = *(void (**)(char *, uint64_t))(v134 + 8);
    v96(v93, v118);
    *(_WORD *)(v91 + 32) = 2080;
    unint64_t v97 = (char *)v123;
    v83(v92, v123, v118);
    uint64_t v98 = v96;
    uint64_t v99 = String.init<A>(describing:)();
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, (uint64_t *)&v136);
    uint64_t v54 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v96(v97, v54);
    uint64_t v85 = v120;
    os_log_t v101 = v127;
    _os_log_impl(&dword_1C8F83000, v127, (os_log_type_t)v131, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v91, 0x2Au);
    id v102 = v129;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v102, -1, -1);
    MEMORY[0x1CB77E470](v91, -1, -1);
  }
  else
  {
    uint64_t v98 = *(void (**)(char *, uint64_t))(v134 + 8);
    v98((char *)v125, v54);
    v98(v87, v54);
  }
  int v106 = v132;
  os_log_t v136 = v132;
  uint64_t v107 = specialized Collection<>.firstIndex(of:)((uint64_t)v116, v85, v132);
  if (v108)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v109 = v107;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v109);
    swift_bridgeObjectRelease();
    int v106 = v136;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v106[2].isa + 1, 1, v106);
  }
  unint64_t v111 = (unint64_t)v106[2].isa;
  unint64_t v110 = (unint64_t)v106[3].isa;
  if (v111 >= v110 >> 1) {
    int v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v110 > 1), v111 + 1, 1, v106);
  }
  v106[2].unint64_t isa = (Class)(v111 + 1);
  uint64_t v112 = &v106[2 * v111];
  v112[4].unint64_t isa = (Class)v116;
  v112[5].unint64_t isa = (Class)v85;
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v130);
  swift_bridgeObjectRelease();
  os_log_t v136 = v106;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v98)(v126, v54);
  os_log_t v113 = v136;
  id v114 = v133;
  *double v133 = v138;
  v114[1] = v113;
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      BOOL v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in Collection<>.dedup(favoring:constructKey:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x1CB77CA00](v6, a2, MEMORY[0x1E4FBB1A0], AssociatedTypeWitness, MEMORY[0x1E4FBB1B0]);
  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for MPMediaLibrary()
{
  unint64_t result = lazy cache variable for type metadata for MPMediaLibrary;
  if (!lazy cache variable for type metadata for MPMediaLibrary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MPMediaLibrary);
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1CB77CC80](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

double implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(float (*a1)(void))
{
  return a1();
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x1CB77CB90);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1CB77CB90](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1CB77CB90]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb);
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = (void *)MEMORY[0x1CB77D510](v3, a1);
LABEL_9:
        unint64_t v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        if (AudioPluginProcessor.postRankFilter(_:)(v5))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v7 == v2) {
          return v9;
        }
      }
      if (v3 < *(void *)(v4 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    uint64_t v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

void *_sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch12PommesResultCG_SDySSAFG07orderedG4Keys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedgi31_SaySSGtAlM_ANt_AHtXEfU_SayAA06F8K0CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_n04_s21cd145Search20AudioPluginProcessorC23extractClientCandidates33_B1E125C3E2EEE315F2EC4FC45BCA9944LL4from16resultFilterPredSayAA0D13ItemCandidateCGSayAA12fG27CG_SbAA0hdZ0CXEtFSSSgALcfU_Tf1nncn_nTf4nng_n(void *a1, void *a2, id *a3, uint64_t (*a4)(id *, id *))
{
  unint64_t v5 = (unint64_t)a3;
  if ((unint64_t)a3 >> 62) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(((unint64_t)a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v17 = (id *)v5;
    unint64_t v18 = v5 & 0xC000000000000001;
    uint64_t v9 = 4;
    while (1)
    {
      unint64_t v10 = (void *)(v9 - 4);
      uint64_t v11 = v18 ? (id *)MEMORY[0x1CB77D510](v9 - 4, v5) : (id *)*(id *)(v5 + 8 * v9);
      unint64_t v5 = (unint64_t)v11;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v10, 1)) {
        break;
      }
      uint64_t v13 = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, v11, a4);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v10;
      }
      unint64_t v10 = v13;
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      ++v9;
      a2 = v15;
      a1 = v10;
      unint64_t v5 = (unint64_t)v17;
      if (v12 == v8) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  unint64_t v10 = a1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v10;
}

NSObject *_sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(NSObject *a1, void *a2, id *a3, uint64_t (*a4)(id *), uint64_t a5, NSObject *a6, uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t), void (*a9)(NSObject *, uint64_t), void (*a10)(NSObject *, uint64_t), void (*a11)(void))
{
  unint64_t v12 = (unint64_t)a3;
  if ((unint64_t)a3 >> 62) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(((unint64_t)a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v25 = v12 & 0xC000000000000001;
    uint64_t v16 = 4;
    unsigned __int8 v24 = (id *)v12;
    while (1)
    {
      unint64_t v17 = (v16 - 4);
      unint64_t v18 = v25 ? (id *)MEMORY[0x1CB77D510](v16 - 4, v12) : (id *)*(id *)(v12 + 8 * v16);
      unint64_t v12 = (unint64_t)v18;
      uint64_t v19 = v16 - 3;
      if (__OFADD__(v17, 1)) {
        break;
      }
      uint64_t v20 = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, v18, a4, a5, a6, a7, a8, a9, a10, a11);
      if (v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v17;
      }
      unint64_t v17 = v20;
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      ++v16;
      a2 = v22;
      a1 = v17;
      unint64_t v12 = (unint64_t)v24;
      if (v19 == v15) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  unint64_t v17 = a1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, void *a2, char a3)
{
  LOBYTE(v4) = a3;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    char v8 = v4 & 1;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CB77D510](v7 - 4, a1) : *(id *)(a1 + 8 * v7);
      uint64_t v4 = v9;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v14 = v9;
      specialized closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)(&v14, a2, v8, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v13)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v7;
      if (v10 == v6)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void *a4, char a5)
{
  LOBYTE(v6) = a5;
  uint64_t v18 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    char v10 = v6 & 1;
    while (1)
    {
      id v11 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CB77D510](v9 - 4, a1) : *(id *)(a1 + 8 * v9);
      uint64_t v6 = v11;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      unint64_t v17 = v11;
      closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)(&v17, a2, a4, v10, &v16);
      if (v5)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v16)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v9;
      if (v12 == v8)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized AudioPluginProcessor.extractServerCandidates(from:)(uint64_t a1)
{
  uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v2 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v62 = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1F4188790](v61);
  uint64_t v60 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v5 = *(void *)(v59 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v59);
  uint64_t v8 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v70 = (char *)v51 - v9;
  uint64_t v10 = type metadata accessor for PerformanceUtil.Ticket(0);
  id v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v14 = &v13[v11[7]];
  *(void *)uint64_t v14 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((void *)v14 + 1) = 48;
  v14[16] = 2;
  *(void *)&v13[v11[8]] = 190;
  uint64_t v15 = &v13[v11[9]];
  *(void *)uint64_t v15 = "extractServerCandidates(from:)";
  *((void *)v15 + 1) = 30;
  v15[16] = 2;
  uint64_t v16 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003DLL);
  unint64_t v17 = (uint64_t *)&v13[v11[10]];
  *unint64_t v17 = v16;
  v17[1] = v18;
  uint64_t v19 = (id *)MEMORY[0x1E4FBC860];
  os_log_type_t v72 = (id *)MEMORY[0x1E4FBC860];
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    os_log_t v52 = v13;
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v21 = v5 + 16;
    unint64_t v23 = (char *)(a1 + ((*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64)));
    uint64_t v56 = *(void *)(v21 + 56);
    uint64_t v57 = v22;
    uint64_t v54 = (void (**)(char *, uint64_t))(v2 + 8);
    unint64_t v55 = (void (**)(char *, char *, uint64_t))(v2 + 16);
    uint64_t v53 = (uint64_t (**)(char *, uint64_t))(v21 - 8);
    v51[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v58 = v21;
    uint64_t v24 = v59;
    do
    {
      uint64_t v69 = v20;
      unint64_t v25 = v70;
      uint64_t v26 = v57;
      v57(v70, v23, v24);
      v26(v8, v25, v24);
      uint64_t v27 = (uint64_t)v60;
      v26(v60, v8, v24);
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
      uint64_t v67 = v29;
      uint64_t v68 = v28;
      uint64_t v30 = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
      uint64_t v65 = v31;
      uint64_t v66 = v30;
      uint64_t v64 = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
      uint64_t v33 = v32;
      uint64_t v34 = v62;
      Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
      LOBYTE(v25) = Apple_Parsec_Siri_V2alpha_AudioItem.requiresSubscription.getter();
      id v35 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features()), sel_init);
      uint64_t v36 = (objc_class *)type metadata accessor for AudioItemCandidate(0);
      uint64_t v37 = objc_allocWithZone(v36);
      *(_DWORD *)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score] = 1065353216;
      outlined init with copy of AudioItemCandidate.BackingItem(v27, (uint64_t)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem]);
      char v38 = (uint64_t *)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier];
      uint64_t v39 = v67;
      *char v38 = v68;
      v38[1] = v39;
      v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source] = 0;
      unint64_t v40 = (uint64_t *)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title];
      uint64_t v41 = v65;
      *unint64_t v40 = v66;
      v40[1] = v41;
      id v42 = (uint64_t *)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist];
      *id v42 = v64;
      v42[1] = v33;
      uint64_t v43 = v63;
      (*v55)(&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType], v34, v63);
      v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription] = v25 & 1;
      v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded] = 0;
      *(void *)&v37[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features] = v35;
      v71.receiver = v37;
      v71.super_class = v36;
      objc_msgSendSuper2(&v71, sel_init);
      (*v54)(v34, v43);
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1(v27, type metadata accessor for AudioItemCandidate.BackingItem);
      unint64_t v44 = *v53;
      (*v53)(v8, v24);
      uint64_t v45 = v44(v70, v24);
      MEMORY[0x1CB77CD90](v45);
      if (*(void *)(((unint64_t)v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v72 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v23 += v56;
      uint64_t v20 = v69 - 1;
    }
    while (v69 != 1);
    swift_bridgeObjectRelease();
    uint64_t v19 = v72;
    uint64_t v13 = v52;
  }
  id v46 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC860], v19, (uint64_t (*)(id *))closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:), 0, 0, 0, (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(NSObject *, uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOy, (void (*)(NSObject *, uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOe, (void (*)(void))type metadata accessor for AudioItemCandidate);
  uint64_t v48 = v47;
  swift_bridgeObjectRetain();
  uint64_t v49 = specialized Sequence.compactMap<A>(_:)(v48, (uint64_t)v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v13, 1);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1((uint64_t)v13, type metadata accessor for PerformanceUtil.Ticket);
  return v49;
}

uint64_t (*specialized AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)(uint64_t a1, char a2))()
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F88C70], v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v9 = v26[0];
  uint64_t v8 = v26[1];
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference))
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      uint64_t v15 = getEnumTag for AudioUsoIntent.IterationOptions;
      if (v14)
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1C8F83000, v12, v13, "AudioPluginProcessor : remove all candidates from library", v16, 2u);
        unint64_t v17 = getEnumTag for AudioUsoIntent.IterationOptions;
LABEL_18:
        uint64_t v21 = v17;
        MEMORY[0x1CB77E470](v16, -1, -1);
LABEL_20:

        return (uint64_t (*)())v21;
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      BOOL v24 = os_log_type_enabled(v12, v23);
      uint64_t v15 = closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
      if (v24)
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1C8F83000, v12, v23, "AudioPluginProcessor : remove playlists candidates from library", v16, 2u);
        unint64_t v17 = closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
        goto LABEL_18;
      }
    }
    goto LABEL_19;
  }
  if (a2 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(v10))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v12, v19);
    uint64_t v15 = closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
    if (v20)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C8F83000, v12, v19, "AudioPluginProcessor : remove genre candidates from library", v16, 2u);
      unint64_t v17 = closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
      goto LABEL_18;
    }
LABEL_19:
    uint64_t v21 = v15;
    goto LABEL_20;
  }
  return protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.IterationOptions;
}

uint64_t partial apply for closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t *a1@<X0>, NSObject *a2@<X1>, void *a3@<X8>)
{
  return closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, *(uint64_t (**))(v3 + 32), *(NSObject **)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3);
}

uint64_t partial apply for closure #2 in Collection<>.dedup(favoring:constructKey:)(void *a1)
{
  return closure #2 in Collection<>.dedup(favoring:constructKey:)(a1, *(void *)(v1 + 32));
}

uint64_t type metadata accessor for AudioPluginProcessor()
{
  return self;
}

uint64_t method lookup function for AudioPluginProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioPluginProcessor);
}

uint64_t dispatch thunk of AudioPluginProcessor.__allocating_init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AudioPluginProcessor.__allocating_init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AudioPluginProcessor.process(experience:clientResults:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AudioPluginProcessor.process(with:clientResults:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of AudioPluginProcessor.extractClientCandidatesForMacOS(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

NSObject *partial apply for specialized closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t a1@<X0>, void **a2@<X1>, NSObject **a3@<X8>)
{
  unint64_t result = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(*(NSObject **)a1, *(void **)(a1 + 8), *a2, *(uint64_t (**)(id *))(v3 + 16), *(void *)(v3 + 24), *(NSObject **)(v3 + 32), *(void *)(v3 + 40), (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(NSObject *, uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOy, (void (*)(NSObject *, uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOe, (void (*)(void))type metadata accessor for AudioItemCandidate);
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

id PommesResourceDownloadInstrumentationUtil.mockStream.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t PommesResourceDownloadInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PommesResourceDownloadInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = PommesResourceDownloadInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PommesResourceDownloadInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesResourceDownloadInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t PommesResourceDownloadInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

void PommesResourceDownloadInstrumentationUtil.logStartOfPommesResourceDownload(requestId:pommesCandidateId:resourceType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1198]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA11B0]), sel_init);
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend(v11, sel_setResourceType_, a4);
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setResourceDownloadContext_, v10);
        os_log_type_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        BOOL v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log start of POMMES resource download", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

void PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void PommesResourceDownloadInstrumentationUtil.logFailedPommesResourceDownload(requestId:pommesCandidateId:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class *a5, SEL *a6, SEL *a7, const char *a8)
{
  uint64_t v13 = v8;
  char v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v15)
  {
    id v16 = v15;
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1198]), sel_init);
    if (v17)
    {
      os_log_type_t v18 = v17;
      id v19 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
      if (v19)
      {
        if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          BOOL v20 = v19;
          objc_msgSend(v19, *a6, a4);
          objc_msgSend(v18, *a7, v20);
          objc_msgSend(v16, sel_setResourceDownloadContext_, v18);
          uint64_t v21 = self;
          swift_retain();
          id v22 = objc_msgSend(v21, sel_processInfo);
          char v23 = NSProcessInfo.isRunningUnitTests.getter();

          if (v23) {
            id v24 = (id)(*(uint64_t (**)(void))(*(void *)v13 + 96))();
          }
          else {
            id v24 = objc_msgSend(self, sel_sharedStream);
          }
          uint64_t v28 = v24;
          swift_release();
          objc_msgSend(v28, sel_emitMessage_, v16);

          swift_unknownObjectRelease();
        }
        return;
      }
    }
    else
    {
      os_log_type_t v18 = v16;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1CB77E470](v27, -1, -1);
  }
}

uint64_t PommesResourceDownloadInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t PommesResourceDownloadInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PommesResourceDownloadInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1C9144DB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9144E04(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesResourceDownloadInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for PommesResourceDownloadInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesResourceDownloadInstrumentationUtil);
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logStartOfPommesResourceDownload(requestId:pommesCandidateId:resourceType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logFailedPommesResourceDownload(requestId:pommesCandidateId:errorCode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t SagePegasusProxy.__allocating_init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v25 = a3;
  uint64_t v9 = swift_allocObject();
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v17 = *(void *)(a6 + 24);
  uint64_t v16 = *(void *)(a6 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a6, v17);
  MEMORY[0x1F4188790](v18);
  BOOL v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(a1, (uint64_t)v14, v25, v26, v27, (uint64_t)v20, v9, v11, v17, v10, v16);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v22;
}

uint64_t key path setter for SagePegasusProxy.client : SagePegasusProxy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  swift_retain();
  return swift_release();
}

uint64_t SagePegasusProxy.client.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.locationManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 40, a1);
}

uint64_t SagePegasusProxy.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v25 = a4;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v17 = *(void *)(a6 + 24);
  uint64_t v16 = *(void *)(a6 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a6, v17);
  MEMORY[0x1F4188790](v18);
  BOOL v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(a1, (uint64_t)v14, a3, v25, v26, (uint64_t)v20, v27, v11, v17, v10, v16);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v22;
}

uint64_t SagePegasusProxy.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 96) + 272))();
}

Swift::Void __swiftcall SagePegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v3 = (int *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v6 = &v5[v3[7]];
  *(void *)uint64_t v6 = "SiriInformationSearch/SagePegasusProxy.swift";
  *((void *)v6 + 1) = 44;
  v6[16] = 2;
  *(void *)&v5[v3[8]] = 55;
  uint64_t v7 = &v5[v3[9]];
  *(void *)uint64_t v7 = "prepareForSearchAtSessionStart()";
  *((void *)v7 + 1) = 32;
  v7[16] = 2;
  uint64_t v8 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000026);
  uint64_t v9 = (uint64_t *)&v5[v3[10]];
  uint64_t *v9 = v8;
  v9[1] = v10;
  (*(void (**)(void))(**(void **)(v1 + 96) + 296))();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = (*(uint64_t (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v5, 0);
  (*(void (**)(uint64_t))(*(void *)v1 + 216))(v11);
  dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()();
  swift_release();
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2((uint64_t)v5, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall SagePegasusProxy.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  uint64_t v3 = v2;
  Class isa = location.value.super.isa;
  uint64_t v5 = (void *)v2[20];
  v2[20] = location.value.super.isa;
  uint64_t v6 = location.value.super.isa;

  if (isa)
  {
    uint64_t v7 = one-time initialization token for sage;
    uint64_t v8 = v6;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.sage);
    uint64_t v10 = v8;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218240;
      [(objc_class *)v10 coordinate];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2048;
      [(objc_class *)v10 coordinate];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v11, v12, "Received location: (%f, %f) from search tool", (uint8_t *)v13, 0x16u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
    else
    {
    }
    id v14 = v3 + 5;
    uint64_t v16 = v3[8];
    uint64_t v15 = v3[9];
    __swift_project_boxed_opaque_existential_1(v14, v16);
    (*(void (**)(objc_class *, uint64_t, uint64_t))(v15 + 16))(v10, v16, v15);
  }
}

Swift::Void __swiftcall SagePegasusProxy.tearDown()()
{
  (*(void (**)(void))(**(void **)(v0 + 96) + 312))();
  uint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = *(void *)(v0 + 112);
  *(_OWORD *)(v0 + 104) = xmmword_1C91991D0;

  outlined consume of Data?(v1, v2);
}

uint64_t SagePegasusProxy.search(searchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v4[17] = v6;
  v4[18] = *(void *)(v6 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v4[21] = v7;
  v4[22] = *(void *)(v7 - 8);
  v4[23] = swift_task_alloc();
  unsigned char v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v4[26] = Context;
  v4[27] = *(void *)(Context - 8);
  v4[28] = swift_task_alloc();
  return MEMORY[0x1F4188298](SagePegasusProxy.search(searchRequest:clientEntities:), 0, 0);
}

uint64_t SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  unint64_t v2 = static PerformanceUtil.shared;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v2 + 200))(0xD00000000000003ALL, 0x80000001C91A2DB0, 0, v5, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 75, "search(searchRequest:clientEntities:)", 37, 2, partial apply for closure #1 in SagePegasusProxy.search(searchRequest:clientEntities:), v1, MEMORY[0x1E4FBC848] + 8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
  swift_task_dealloc();
  if (dispatch thunk of NetworkAvailability.isAvailable.getter())
  {
    uint64_t v6 = v0[28];
    uint64_t v7 = (void *)v0[12];
    uint64_t v8 = v0[10];
    uint64_t v9 = (void *)v7[20];
    uint64_t v10 = (void *)v7[12];
    id v11 = v9;
    static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)(v8, v9, v10, v6);

    (*(void (**)(uint64_t, uint64_t))(*v7 + 336))(v8, v6);
    uint64_t v17 = v0[24];
    uint64_t v18 = v0[25];
    uint64_t v20 = v0[22];
    uint64_t v19 = v0[23];
    uint64_t v21 = v0[21];
    uint64_t v23 = v0[11];
    uint64_t v22 = v0[12];
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
    v0[29] = v24;
    v0[30] = (v20 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v24(v18, v17, v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 88))(v23, v18);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v0[31] = v25;
    v0[32] = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v25(v18, v21);
    uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(v18, v19, v21);
    v0[33] = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 216))(v26);
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4F89C18] + MEMORY[0x1E4F89C18]);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[34] = v27;
    *uint64_t v27 = v0;
    v27[1] = SagePegasusProxy.search(searchRequest:clientEntities:);
    uint64_t v28 = v0[25];
    uint64_t v29 = v0[20];
    return v32(v29, v28);
  }
  else
  {
    if (one-time initialization token for sage != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.sage);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "Network is unavailable, unable to complete search", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }

    lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
    swift_allocError();
    *uint64_t v16 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    unint64_t v2 = SagePegasusProxy.search(searchRequest:clientEntities:);
  }
  else {
    unint64_t v2 = SagePegasusProxy.search(searchRequest:clientEntities:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, void, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  uint64_t v53 = v0;
  unint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  uint64_t v50 = *(void (**)(uint64_t, void, uint64_t))(v4 + 104);
  v50(v2, *MEMORY[0x1E4F88CF8], v3);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v5 == v6)
  {
    if (one-time initialization token for sage != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 136);
    id v11 = *(void *)(v0 + 144);
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.sage);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 136);
    if (v15)
    {
      uint64_t v51 = *(void *)(v0 + 224);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      id v46 = v21;
      uint64_t v23 = swift_slowAlloc();
      os_log_t v52 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v24 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v46);
      _os_log_impl(&dword_1C8F83000, v13, v14, "Pegasus: PegasusResponse: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v23, -1, -1);
      MEMORY[0x1CB77E470](v22, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v51, v18);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }
    uint64_t v39 = *(void *)(v0 + 160);
    unint64_t v40 = *(void *)(v0 + 144);
    uint64_t v41 = *(void *)(v0 + 136);
    id v42 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void, void))(v0 + 232))(v42, *(void *)(v0 + 200), *(void *)(v0 + 168));
    uint64_t v43 = type metadata accessor for PegasusSearchResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v42 + *(int *)(v43 + 20), v39, v41);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v38 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v49 = *(void *)(v0 + 216);
    uint64_t v48 = *(void *)(v0 + 144);
    uint64_t v27 = *(void *)(v0 + 120);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v28 = *(void *)(v0 + 104);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
    v50(v27, *MEMORY[0x1E4F88CF0], v28);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v45 = *(void *)(v0 + 56);
    uint64_t v47 = *(void *)(v0 + 48);
    v7(v27, v28);
    v7(v26, v28);
    lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
    swift_allocError();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v31 = *(void *)(v0 + 224);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 208);
    id v35 = *(void *)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 168);
    uint64_t v36 = *(void *)(v0 + 136);
    if (v47 == v45) {
      uint64_t v37 = 10;
    }
    else {
      uint64_t v37 = 0;
    }
    *uint64_t v29 = v37;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v35, v36);
    v30(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v31, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v38 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v38();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  (*(void (**)(void, void))(v0 + 248))(*(void *)(v0 + 200), *(void *)(v0 + 168));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v38)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(unsigned char *@<X8>), uint64_t, void);
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t (*)(), uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t (*)(), char *, uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v69;
  char *v70;
  uint64_t *v71;
  void (*v72)(char *, uint64_t *);
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  BOOL v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  BOOL v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  void v99[2];
  uint64_t v100;
  uint64_t (*v101)();
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t (*)(), char *, uint64_t);
  void (*v106)(uint64_t, uint64_t);
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  void (*v119)(char *, uint64_t *);
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t (*v126)();
  uint64_t v127[7];

  uint64_t v124 = a1;
  uint64_t v4 = v3;
  unint64_t v111 = a3;
  id v114 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v114);
  uint64_t v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  unint64_t v125 = *(char **)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v110 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v104 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v104 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (uint64_t (*)())((char *)&v104 - v17);
  uint64_t v19 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for sage != -1) {
    swift_once();
  }
  uint64_t v115 = v16;
  long long v116 = v13;
  uint64_t v126 = v18;
  uint64_t v122 = v7;
  uint64_t v22 = type metadata accessor for OSSignposter();
  uint64_t v117 = __swift_project_value_buffer(v22, (uint64_t)static Signposter.sage);
  uint64_t v118 = v21;
  uint64_t v23 = OSSignposter.begin(name:context:)("proxy.constructSearchRequest", 28, 2u, 0, (uint64_t)v21);
  if (one-time initialization token for shared != -1) {
    uint64_t v23 = swift_once();
  }
  uint64_t v112 = &v104;
  uint64_t v24 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v23);
  unint64_t v100 = v4;
  os_log_t v101 = (uint64_t (*)())v124;
  unint64_t v109 = (uint64_t)a2;
  id v102 = a2;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v120 = v27;
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  uint64_t v29 = *(void (**)(unint64_t, unint64_t, void, char *))(*(void *)v24 + 200);
  id v102 = v99;
  uint64_t v103 = v8;
  os_log_t v101 = partial apply for closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:);
  LOBYTE(v100) = 2;
  v99[0] = "constructSearchRequest(pommesSearchRequest:queryContext:)";
  v99[1] = 57;
  uint64_t v30 = v123;
  v29(0xD000000000000024, 0x80000001C91A3D10, 0, (char *)&v104 - v28);
  os_log_t v113 = v30;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31((char *)&v104 - v28, v25);
  type metadata accessor for PommesSearchRequest(0);
  uint64_t v123 = v8;
  uint64_t v121 = v26 + 8;
  os_log_type_t v119 = (void (*)(char *, uint64_t *))v31;
  uint64_t v32 = (uint64_t *)v25;
  uint64_t v33 = v4;
  uint64_t v34 = v126;
  id v35 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPushOffRequest.setter();
  uint64_t v36 = v35(v127, 0);
  uint64_t v37 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v36);
  Date.init()();
  char v38 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(unsigned char *@<X8>), uint64_t, void))(*(void *)v37 + 200);
  LOBYTE(v100) = 2;
  uint64_t v39 = v113;
  v38(v127, 0xD000000000000016, 0x80000001C91A2EB0, 0, (char *)&v104 - v28, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 123, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, v100, partial apply for closure #2 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:), v4, MEMORY[0x1E4FBB390]);
  uint64_t v112 = v32;
  os_log_t v113 = v39;
  v119((char *)&v104 - v28, v32);
  unint64_t v40 = v34;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.userDataShareOptIn.setter();
  AFIsHorseman();
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.setter();
  uint64_t v41 = (uint64_t)v122;
  Date.init()();
  id v42 = (int *)v114;
  uint64_t v43 = v41 + *(int *)(v114 + 20);
  *(void *)uint64_t v43 = "SiriInformationSearch/SagePegasusProxy.swift";
  *(void *)(v43 + 8) = 44;
  *(unsigned char *)(v43 + 16) = 2;
  *(void *)(v41 + v42[6]) = 128;
  unint64_t v44 = v41 + v42[7];
  *(void *)unint64_t v44 = "constructSearchRequest(pommesSearchRequest:queryContext:)";
  *(void *)(v44 + 8) = 57;
  *(unsigned char *)(v44 + 16) = 2;
  uint64_t v45 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000031);
  id v46 = (uint64_t *)(v41 + v42[8]);
  *id v46 = v45;
  v46[1] = v47;
  id v114 = v33;
  uint64_t v48 = *(void *)(v33 + 96);
  uint64_t v50 = v125 + 16;
  uint64_t v49 = (void (*)(char *, uint64_t (*)(), uint64_t))*((void *)v125 + 2);
  uint64_t v51 = v116;
  os_log_t v52 = v123;
  v49(v116, v40, v123);
  uint64_t v53 = *(void (**)(char *, unint64_t))(*(void *)v48 + 328);
  uint64_t v54 = v115;
  char v108 = v48;
  unint64_t v55 = v113;
  v53(v51, v124);
  if (v55)
  {
    uint64_t v56 = (void (*)(char *, uint64_t))*((void *)v125 + 1);
    v56(v51, v52);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2(v41, type metadata accessor for PerformanceUtil.Ticket);
    v56((char *)v40, v52);
    uint64_t v57 = (uint64_t)v118;
    OSSignposter.end(token:message:)((uint64_t)v118, 0, 0xE000000000000000);
    return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2(v57, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  }
  else
  {
    uint64_t v107 = (void (*)(uint64_t, uint64_t, uint64_t))v49;
    os_log_t v113 = (uint64_t)v50;
    uint64_t v59 = v125;
    uint64_t v60 = (void (*)(uint64_t, uint64_t))*((void *)v125 + 1);
    long long v116 = v125 + 8;
    int v106 = v60;
    v60((uint64_t)v51, v52);
    uint64_t v61 = (void (*)(uint64_t (*)(), char *, uint64_t))*((void *)v59 + 5);
    unint64_t v125 = v59 + 40;
    uint64_t v105 = v61;
    v61(v40, v54, v52);
    uint64_t v62 = static PerformanceUtil.shared;
    uint64_t v63 = (*(uint64_t (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v41, 0);
    unint64_t v104 = (uint64_t)&v104;
    uint64_t v64 = MEMORY[0x1F4188790](v63);
    uint64_t v65 = (void *)v114;
    unint64_t v100 = v114;
    os_log_t v101 = v126;
    id v102 = (void *)v124;
    uint64_t v103 = v109;
    uint64_t v66 = v120;
    MEMORY[0x1F4188790](v64);
    uint64_t v124 = (v66 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v67 = (char *)&v104 - v124;
    Date.init()();
    uint64_t v68 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v62 + 200);
    id v102 = v99;
    uint64_t v103 = v52;
    LOBYTE(v100) = 2;
    uint64_t v69 = v110;
    v68(0xD00000000000002DLL, 0x80000001C91A3070, 0, v67, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 132, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, v100, partial apply for closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:));
    uint64_t v115 = 0;
    unint64_t v70 = v67;
    objc_super v71 = v112;
    os_log_type_t v72 = v119;
    v119(v70, v112);
    uint64_t v73 = (uint64_t)v126;
    v105(v126, v69, v52);
    unint64_t v74 = (*(uint64_t (**)(uint64_t))(*v65 + 80))(v73);
    unint64_t v75 = static PerformanceUtil.shared;
    uint64_t v76 = MEMORY[0x1F4188790](v74);
    id v102 = v65;
    uint64_t v103 = v73;
    MEMORY[0x1F4188790](v76);
    uint64_t v77 = (char *)&v104 - v124;
    Date.init()();
    unint64_t v78 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v75 + 200);
    id v102 = &v100;
    uint64_t v103 = MEMORY[0x1E4FBC848] + 8;
    LOBYTE(v100) = 2;
    uint64_t v79 = v115;
    v78(0xD000000000000018, 0x80000001C91A3140, 0, v77, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 142, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, v100, partial apply for closure #4 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:));
    unint64_t v125 = v79;
    v72(v77, v71);
    (*(void (**)(uint64_t, uint64_t))(*v65 + 96))(v73, v108);
    id v80 = specialized static PegasusOverrideUtil.requestFeatureFlag.getter();
    if (v81)
    {
      uint64_t v82 = v80;
      uint64_t v83 = v81;
      if (one-time initialization token for sage != -1) {
        swift_once();
      }
      uint64_t v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.sage);
      swift_bridgeObjectRetain_n();
      uint64_t v85 = Logger.logObject.getter();
      uint64_t v86 = static os_log_type_t.debug.getter();
      uint64_t v87 = os_log_type_enabled(v85, v86);
      uint64_t v88 = v123;
      if (v87)
      {
        os_log_type_t v89 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        v127[0] = v90;
        *(_DWORD *)os_log_type_t v89 = 136315138;
        uint64_t v124 = (unint64_t)(v89 + 4);
        swift_bridgeObjectRetain();
        v127[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C8F83000, v85, v86, "Using override Pegasus request feature flag “%s”", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v90, -1, -1);
        MEMORY[0x1CB77E470](v89, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v96 = (uint64_t)v122;
      uint64_t v98 = (uint64_t)v118;
      uint64_t v91 = v107;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
    }
    else
    {
      uint64_t v91 = v107;
      if (one-time initialization token for sage != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      __swift_project_value_buffer(v92, (uint64_t)static Logger.sage);
      long long v93 = Logger.logObject.getter();
      uint64_t v94 = static os_log_type_t.debug.getter();
      unint64_t v95 = os_log_type_enabled(v93, v94);
      unint64_t v96 = (uint64_t)v122;
      uint64_t v88 = v123;
      if (v95)
      {
        unint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v97 = 0;
        _os_log_impl(&dword_1C8F83000, v93, v94, "Auto-inferring pirene7 for request with no override feature flag", v97, 2u);
        MEMORY[0x1CB77E470](v97, -1, -1);
      }

      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
      uint64_t v98 = (uint64_t)v118;
    }
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2(v96, type metadata accessor for PerformanceUtil.Ticket);
    v91(v111, v73, v88);
    v106(v73, v88);
    OSSignposter.end(token:message:)(v98, 0, 0xE000000000000000);
    return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2(v98, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  }
}

uint64_t closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(uint64_t a1)
{
  return swift_release();
}

uint64_t closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 96);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v12 + 416))(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Bool __swiftcall SagePegasusProxy.isUserDataShareOptIn()()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 96) + 104), sel_siriDataSharingOptInStatus) == (id)1;
}

void SagePegasusProxy.__allocating_init()()
{
}

void SagePegasusProxy.init()()
{
}

void SagePegasusProxy.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 5));
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(v0[13], v0[14]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 15));
  uint64_t v1 = (void *)v0[20];
}

uint64_t SagePegasusProxy.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(*(void *)(v0 + 104), *(void *)(v0 + 112));
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  return v0;
}

uint64_t SagePegasusProxy.__deallocating_deinit()
{
  SagePegasusProxy.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a7 + 64) = a8;
  *(void *)(a7 + 72) = a10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a7 + 40));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a2, a8);
  *(void *)(a7 + 144) = a9;
  *(void *)(a7 + 152) = a11;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a7 + 120));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(v20, a6, a9);
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = 0;
  *(_OWORD *)(a7 + 104) = xmmword_1C91991D0;
  *(void *)(a7 + 160) = 0;
  *(void *)(a7 + 32) = a1;
  *(void *)(a7 + 80) = a3;
  *(void *)(a7 + 88) = a4;
  *(void *)(a7 + 96) = a5;
  return a7;
}

uint64_t partial apply for closure #1 in SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 96) + 304))();
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode)
  {
    type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode);
  }
  return result;
}

uint64_t partial apply for closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  return closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #2 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 344))();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  return closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #4 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 104))(*(void *)(v0 + 24), *(void *)(*(void *)(v0 + 16) + 96));
}

uint64_t sub_1C9147C90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for SagePegasusProxy()
{
  return self;
}

uint64_t method lookup function for SagePegasusProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SagePegasusProxy);
}

uint64_t dispatch thunk of SagePegasusProxy.client.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SagePegasusProxy.__allocating_init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of SagePegasusProxy.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of SagePegasusProxy.prepareForSearchAtSessionStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of SagePegasusProxy.prepareForSearchAtRequestStart(requestId:location:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SagePegasusProxy.tearDown()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of SagePegasusProxy.search(searchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 328)
                                                          + **(int **)(*(void *)v3 + 328));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of SagePegasusProxy.isUserDataShareOptIn()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

void RRReferenceResolverProtocol.extractOnScreenContext()(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v65 = a1;
  uint64_t v2 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for UsoEntityBuilder_common_ReferenceType();
  swift_allocObject();
  uint64_t v11 = UsoEntityBuilder_common_ReferenceType.init()();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FA3638], v6);
  uint64_t v70 = v11;
  dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)();
  __n128 v12 = ((__n128 (*)(char *, uint64_t))*(void *)(v7 + 8))(v9, v6);
  int v13 = 0;
  unint64_t v14 = 0;
  uint64_t v76 = v3 + 16;
  uint64_t v64 = v3;
  unint64_t v75 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v15 = v10;
  uint64_t v63 = &v79;
  v12.n128_u64[0] = 136315138;
  __n128 v60 = v12;
  unint64_t v62 = (unint64_t)"learnedMediaEntity";
  unint64_t v59 = 0x80000001C919BE40;
  uint64_t v58 = MEMORY[0x1E4FBC840] + 8;
  v12.n128_u64[0] = 136315394;
  __n128 v61 = v12;
  uint64_t v77 = v2;
  while (1)
  {
    int v16 = v13;
    if (v14 >= qword_1F2370A38) {
      break;
    }
    int v17 = *((unsigned __int8 *)&outlined read-only object #0 of RRReferenceResolverProtocol.extractOnScreenContext()
          + v14
          + 32);
    if (v17)
    {
      type metadata accessor for UsoEntityBuilder_common_Uri();
      swift_allocObject();
      uint64_t v18 = UsoEntityBuilder_common_Uri.init()();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_App();
      swift_allocObject();
      uint64_t v18 = UsoEntityBuilder_common_App.init()();
    }
    uint64_t v19 = v18;
    swift_retain();
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
    swift_release();
    uint64_t v20 = MEMORY[0x1CB77A2C0](v19);
    if (v20)
    {
      int v72 = v17;
      uint64_t v21 = MEMORY[0x1E4FBC860];
      os_log_t v81 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v71 = v20;
      uint64_t v22 = specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(v67, 1, v20, v65, v66);
      if (!v22) {
        uint64_t v22 = v21;
      }
      uint64_t v23 = *(void *)(v22 + 16);
      uint64_t v73 = v19;
      if (v23)
      {
        LODWORD(v69) = v16;
        uint64_t v74 = v15;
        uint64_t v24 = *(unsigned __int8 *)(v64 + 80);
        uint64_t v68 = v22;
        uint64_t v25 = v22 + ((v24 + 32) & ~v24);
        uint64_t v26 = *(void *)(v64 + 72);
        uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
        do
        {
          v27(v5, v25, v2);
          uint64_t v28 = RREntity.id.getter();
          uint64_t v30 = v29;
          swift_beginAccess();
          uint64_t v31 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
          }
          unint64_t v33 = v31[2];
          unint64_t v32 = v31[3];
          if (v33 >= v32 >> 1) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
          }
          id v31[2] = v33 + 1;
          uint64_t v34 = &v31[2 * v33];
          v34[4] = v28;
          v34[5] = v30;
          os_log_t v81 = v31;
          swift_endAccess();
          uint64_t v2 = v77;
          (*v75)(v5, v77);
          v25 += v26;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
        uint64_t v15 = v74;
        LOBYTE(v16) = v69;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v43 = (uint64_t)v81;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v80[0] = v15;
      int v45 = v72;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, v72, isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v80[0];
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        v80[0] = v69;
        *(_DWORD *)uint64_t v49 = v61.n128_u32[0];
        if (v45) {
          uint64_t v50 = 0x6E65657263536E6FLL;
        }
        else {
          uint64_t v50 = 0xD000000000000013;
        }
        if (v45) {
          unint64_t v51 = 0xEB00000000495255;
        }
        else {
          unint64_t v51 = v62 | 0x8000000000000000;
        }
        uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v80);
        uint64_t v74 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 12) = 2080;
        uint64_t v52 = swift_bridgeObjectRetain();
        uint64_t v53 = MEMORY[0x1CB77CDC0](v52, MEMORY[0x1E4FBB1A0]);
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        uint64_t v56 = v53;
        uint64_t v2 = v77;
        uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, v80);
        uint64_t v15 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v47, v48, "[ExtractOnScreenContext][%s] Found %s", (uint8_t *)v49, 0x16u);
        uint64_t v57 = v69;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v57, -1, -1);
        MEMORY[0x1CB77E470](v49, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        int v38 = v17;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        v80[0] = v40;
        *(_DWORD *)uint64_t v39 = v60.n128_u32[0];
        if (v38) {
          uint64_t v41 = 0x6E65657263536E6FLL;
        }
        else {
          uint64_t v41 = 0xD000000000000013;
        }
        if (v38) {
          unint64_t v42 = 0xEB00000000495255;
        }
        else {
          unint64_t v42 = v59;
        }
        *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v80);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v36, v37, "[ExtractOnScreenContext][%s] Failed to extract context due to USO entity conversion failure", (uint8_t *)v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v40, -1, -1);
        MEMORY[0x1CB77E470](v39, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
    }
    int v13 = 1;
    unint64_t v14 = 1u;
    if (v16)
    {
      swift_release();
      return;
    }
  }
  __break(1u);
}

Swift::String_optional __swiftcall RRReferenceResolverProtocol.retrieveOnScreenAppBundleId()()
{
  uint64_t v183 = v0;
  uint64_t v162 = type metadata accessor for RRMetadata();
  uint64_t v167 = *(void *)(v162 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v162);
  uint64_t v179 = (char *)&v147 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v161 = (char *)&v147 - v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v173 = (char *)&v147 - v5;
  uint64_t v171 = type metadata accessor for RREntity();
  uint64_t v6 = *(void *)(v171 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v171);
  uint64_t v159 = (char *)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v165 = (char *)&v147 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v163 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v147 - v13;
  uint64_t v15 = type metadata accessor for RRCandidate();
  uint64_t v168 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v170 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  int v172 = (char *)&v147 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  id v166 = (char *)&v147 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v178 = (void (**)(char *, uint64_t, uint64_t))((char *)&v147 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v147 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v180 = (char *)&v147 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (void **)((char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v181 = type metadata accessor for RRResult();
  uint64_t v31 = *(void *)(v181 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v181);
  uint64_t v34 = (uint64_t *)((char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v32);
  uint64_t v182 = (char *)&v147 - v35;
  type metadata accessor for UsoEntityBuilder_common_App();
  swift_allocObject();
  UsoEntityBuilder_common_App.init()();
  uint64_t v36 = MEMORY[0x1CB77A2C0]();
  swift_release();
  if (!v36)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    os_log_type_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_1C8F83000, v48, v49, "#retrieveOnScreenAppBundleId failed to create App from builder", v50, 2u);
      MEMORY[0x1CB77E470](v50, -1, -1);
    }

    goto LABEL_64;
  }
  uint64_t v164 = v6;
  unint64_t v188 = MEMORY[0x1E4FBC860];
  type metadata accessor for ResolveQuery();
  swift_allocObject();
  swift_retain();
  uint64_t v169 = v36;
  ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:)();
  dispatch thunk of RRReferenceResolverProtocol.resolve(query:)();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    os_log_type_t v37 = *v30;
    uint64_t v187 = (void (**)(void, void))*v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    id v39 = v37;
    id v40 = v37;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v187 = (void (**)(void, void))v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_getErrorValue();
      uint64_t v45 = Error.localizedDescription.getter();
      uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v41, v42, "#retrieveOnScreenAppBundleId reference resolution failed with error: %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v44, -1, -1);
      MEMORY[0x1CB77E470](v43, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
    }
LABEL_64:
    uint64_t v126 = 0;
    os_log_t v127 = 0;
    goto LABEL_65;
  }
  unint64_t v51 = v182;
  uint64_t v52 = v30;
  uint64_t v53 = v181;
  (*(void (**)(char *, void **, uint64_t))(v31 + 32))(v182, v52, v181);
  (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(v34, v51, v53);
  int v54 = (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 88))(v34, v53);
  BOOL v55 = v54 == *MEMORY[0x1E4FA3E30];
  id v158 = v14;
  if (v55)
  {
    (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v34, v53);
    uint64_t v56 = v168;
    uint64_t v57 = v180;
    uint64_t v184 = *(uint8_t **)(v168 + 32);
    uint64_t v185 = (void (**)(void, void))(v168 + 32);
    ((void (*)(char *, uint64_t *, uint64_t))v184)(v180, v34, v15);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
    unint64_t v59 = *(uint8_t **)(v56 + 16);
    ((void (*)(char *, char *, uint64_t))v59)(v26, v57, v15);
    __n128 v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v183 = v59;
      uint64_t v63 = (uint8_t *)v62;
      uint64_t v177 = (void (**)(void, void))swift_slowAlloc();
      uint64_t v187 = v177;
      *(_DWORD *)uint64_t v63 = 136315138;
      char v176 = v63 + 4;
      lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x1E4FA3DB8]);
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)&v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v66 = *(void (**)(char *, uint64_t))(v56 + 8);
      v66(v26, v15);
      _os_log_impl(&dword_1C8F83000, v60, v61, "#retrieveOnScreenAppBundleId found match: %s", v63, 0xCu);
      uint64_t v67 = v177;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v67, -1, -1);
      uint64_t v68 = v63;
      unint64_t v59 = v183;
      MEMORY[0x1CB77E470](v68, -1, -1);
    }
    else
    {
      uint64_t v66 = *(void (**)(char *, uint64_t))(v56 + 8);
      v66(v26, v15);
    }

    uint64_t v69 = v164;
    ((void (*)(void, char *, uint64_t))v59)(v178, v180, v15);
    unint64_t v82 = v188;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v82 + 16) + 1, 1, v82);
    }
    unint64_t v14 = v158;
    unint64_t v84 = *(void *)(v82 + 16);
    unint64_t v83 = *(void *)(v82 + 24);
    if (v84 >= v83 >> 1) {
      unint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1, v82);
    }
    *(void *)(v82 + 16) = v84 + 1;
    ((void (*)(unint64_t, void, uint64_t))v184)(v82+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v84, v178, v15);
    unint64_t v188 = v82;
    v66(v180, v15);
    goto LABEL_41;
  }
  uint64_t v69 = v164;
  uint64_t v56 = v168;
  if (v54 != *MEMORY[0x1E4FA3E40])
  {
    if (v54 == *MEMORY[0x1E4FA3E38] || v54 == *MEMORY[0x1E4FA3E48])
    {
      (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v34, v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v54 == *MEMORY[0x1E4FA3E50])
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v145 = type metadata accessor for Logger();
        __swift_project_value_buffer(v145, (uint64_t)static Logger.pommes);
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v86, v87)) {
          goto LABEL_38;
        }
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v88 = 0;
        os_log_type_t v89 = "#retrieveOnScreenAppBundleId no app on screen";
        goto LABEL_37;
      }
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v34, v53);
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.pommes);
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v86, v87)) {
      goto LABEL_38;
    }
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v88 = 0;
    os_log_type_t v89 = "#retrieveOnScreenAppBundleId unknown/unsupported result type";
LABEL_37:
    _os_log_impl(&dword_1C8F83000, v86, v87, v89, v88, 2u);
    MEMORY[0x1CB77E470](v88, -1, -1);
LABEL_38:

    goto LABEL_42;
  }
  (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v34, v53);
  uint64_t v70 = *v34;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  int v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v185 = (void (**)(void, void))swift_slowAlloc();
    uint64_t v187 = v185;
    *(_DWORD *)uint64_t v74 = 136315138;
    uint64_t v183 = v74 + 4;
    uint64_t v184 = v74;
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = MEMORY[0x1CB77CDC0](v75, v15);
    unint64_t v78 = v77;
    swift_bridgeObjectRelease();
    uint64_t v79 = v76;
    uint64_t v69 = v164;
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v78, (uint64_t *)&v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    id v80 = v184;
    _os_log_impl(&dword_1C8F83000, v72, v73, "#retrieveOnScreenAppBundleId found multiple matches: %s", v184, 0xCu);
    os_log_t v81 = v185;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v81, -1, -1);
    MEMORY[0x1CB77E470](v80, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  specialized Array.append<A>(contentsOf:)(v70);
LABEL_41:
  uint64_t v53 = v181;
LABEL_42:
  (*(void (**)(char *, uint64_t))(v31 + 8))(v182, v53);
  unint64_t v90 = v188;
  uint64_t v91 = v172;
  uint64_t v154 = *(void *)(v188 + 16);
  if (v154)
  {
    uint64_t v92 = v69;
    uint64_t v93 = v56 + 16;
    uint64_t v94 = *(void (**)(void, void, void))(v56 + 16);
    unint64_t v95 = v188 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
    unint64_t v96 = (void (**)(char *, uint64_t))(v92 + 8);
    uint64_t v184 = (uint8_t *)(v167 + 16);
    LODWORD(v176) = *MEMORY[0x1E4FA3DE0];
    unsigned int v175 = *MEMORY[0x1E4FA3DB0];
    uint64_t v177 = (void (**)(void, void))(v167 + 8);
    uint64_t v178 = (void (**)(char *, uint64_t, uint64_t))(v167 + 104);
    unsigned int v174 = *MEMORY[0x1E4FA3DC8];
    unint64_t v149 = (void (**)(char *, uint64_t))(v93 - 8);
    uint64_t v97 = *(void *)(v93 + 56);
    swift_bridgeObjectRetain_n();
    uint64_t v98 = 0;
    uint64_t v99 = v170;
    unint64_t v100 = v173;
    os_log_type_t v150 = v96;
    uint64_t v155 = v15;
    unint64_t v156 = v90;
    uint64_t v153 = v93;
    uint64_t v152 = v94;
    unint64_t v151 = v95;
    uint64_t v148 = v97;
    while (1)
    {
      uint64_t v157 = v98;
      v94(v91, v95 + v97 * v98, v15);
      os_log_t v101 = v165;
      RRCandidate.entity.getter();
      uint64_t v102 = RREntity.metadata.getter();
      (*v96)(v101, v171);
      uint64_t v160 = v102;
      uint64_t v103 = *(void *)(v102 + 16);
      if (v103) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_51:
      uint64_t v117 = v157 + 1;
      uint64_t v91 = v172;
      (*v149)(v172, v15);
      BOOL v55 = v117 == v154;
      uint64_t v98 = v117;
      uint64_t v94 = v152;
      unint64_t v95 = v151;
      unint64_t v96 = v150;
      uint64_t v97 = v148;
      if (v55)
      {
        swift_bridgeObjectRelease();
        uint64_t v118 = 1;
        unint64_t v14 = v158;
        uint64_t v69 = v164;
        uint64_t v56 = v168;
        goto LABEL_58;
      }
    }
    unint64_t v104 = (char *)(v160
                  + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80)));
    uint64_t v173 = *(char **)(v167 + 72);
    uint64_t v185 = *(void (***)(void, void))(v167 + 16);
    swift_bridgeObjectRetain();
    uint64_t v105 = v162;
    int v106 = v161;
    uint64_t v107 = v178;
    while (1)
    {
      uint64_t v180 = v104;
      uint64_t v181 = v103;
      ((void (*)(char *, char *, uint64_t))v185)(v100, v104, v105);
      uint64_t v108 = type metadata accessor for RRDataSourceMetadataValue();
      uint64_t v182 = *(char **)(*(void *)(v108 - 8) + 104);
      ((void (*)(char *, void, uint64_t))v182)(v106, v176, v108);
      unint64_t v109 = *v107;
      uint64_t v110 = v175;
      (*v107)(v106, v175, v105);
      LODWORD(v183) = static RRMetadata.== infix(_:_:)();
      unint64_t v111 = (void (*)(char *, uint64_t))*v177;
      (*v177)(v106, v105);
      uint64_t v112 = v100;
      os_log_t v113 = v179;
      ((void (*)(char *, char *, uint64_t))v185)(v179, v112, v105);
      if (v183) {
        break;
      }
      ((void (*)(char *, void, uint64_t))v182)(v106, v174, v108);
      uint64_t v114 = v110;
      uint64_t v115 = v178;
      v109(v106, v114, v105);
      char v116 = static RRMetadata.== infix(_:_:)();
      v111(v106, v105);
      v111(v113, v105);
      v111(v112, v105);
      if (v116) {
        goto LABEL_56;
      }
      unint64_t v100 = v112;
      uint64_t v107 = v115;
      unint64_t v104 = &v173[(void)v180];
      uint64_t v103 = v181 - 1;
      if (v181 == 1)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v15 = v155;
        uint64_t v99 = v170;
        goto LABEL_51;
      }
    }
    v111(v113, v105);
    v111(v112, v105);
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v56 = v168;
    unint64_t v14 = v158;
    uint64_t v15 = v155;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v158, v172, v155);
    uint64_t v118 = 0;
    uint64_t v69 = v164;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v118 = 1;
  }
  uint64_t v99 = v170;
LABEL_58:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v14, v118, 1, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v119 = v163;
  outlined init with copy of RRCandidate?((uint64_t)v14, v163);
  int v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v119, 1, v15);
  uint64_t v121 = v166;
  if (v120 == 1)
  {
    outlined destroy of MediaUserStateCenter?(v119, &demangling cache variable for type metadata for RRCandidate?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v122 = type metadata accessor for Logger();
    __swift_project_value_buffer(v122, (uint64_t)static Logger.pommes);
    uint64_t v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v123, v124))
    {
      unint64_t v125 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v125 = 0;
      _os_log_impl(&dword_1C8F83000, v123, v124, "#retrieveOnScreenAppBundleId foreground App not found", v125, 2u);
      MEMORY[0x1CB77E470](v125, -1, -1);
    }
    swift_release();

    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for RRCandidate?);
    goto LABEL_64;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v166, v119, v15);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v130 = type metadata accessor for Logger();
  __swift_project_value_buffer(v130, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v99, v121, v15);
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v131, v132))
  {
    double v133 = (uint8_t *)swift_slowAlloc();
    uint64_t v185 = (void (**)(void, void))swift_slowAlloc();
    uint64_t v187 = v185;
    *(_DWORD *)double v133 = 136315138;
    uint64_t v155 = v15;
    uint64_t v134 = v159;
    RRCandidate.entity.getter();
    uint64_t v135 = RREntity.appBundleId.getter();
    unint64_t v137 = v136;
    (*(void (**)(char *, uint64_t))(v164 + 8))(v134, v171);
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v137, (uint64_t *)&v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v69 = v164;
    swift_bridgeObjectRelease();
    uint64_t v138 = *(void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v139 = v155;
    v138(v99, v155);
    os_log_type_t v140 = v132;
    uint64_t v141 = v139;
    _os_log_impl(&dword_1C8F83000, v131, v140, "#retrieveOnScreenAppBundleId onscreen app bundleId=%s", v133, 0xCu);
    uint64_t v142 = v185;
    swift_arrayDestroy();
    unint64_t v14 = v158;
    MEMORY[0x1CB77E470](v142, -1, -1);
    MEMORY[0x1CB77E470](v133, -1, -1);
  }
  else
  {
    uint64_t v138 = *(void (**)(char *, uint64_t))(v56 + 8);
    v138(v99, v15);

    uint64_t v141 = v15;
    uint64_t v134 = v159;
  }
  uint64_t v143 = v166;
  RRCandidate.entity.getter();
  uint64_t v126 = RREntity.appBundleId.getter();
  os_log_t v127 = v144;
  swift_release();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v134, v171);
  v138(v143, v141);
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for RRCandidate?);
LABEL_65:
  uint64_t v128 = v126;
  uint64_t v129 = v127;
  result.value._object = v129;
  result.value._uint64_t countAndFlagsBits = v128;
  return result;
}

uint64_t EmptyReferenceResolver.resolve(reference:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FA3E50];
  uint64_t v3 = type metadata accessor for RRResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);

  return swift_storeEnumTagMultiPayload();
}

uint64_t EmptyReferenceResolver.hasReference(usoEntity:)()
{
  return 0;
}

uint64_t protocol witness for RRReferenceResolverProtocol.resolve(reference:) in conformance EmptyReferenceResolver@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FA3E50];
  uint64_t v3 = type metadata accessor for RRResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);

  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with take of (Siri_Nlu_External_Span, RREntity)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RRCandidate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for EmptyReferenceResolver()
{
  return &type metadata for EmptyReferenceResolver;
}

uint64_t lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MusicDomain.__allocating_init()()
{
  id v1 = objc_msgSend(self, sel_indexMatcher);
  v3[3] = type metadata accessor for SEMSpanMatcher();
  v3[4] = &protocol witness table for SEMSpanMatcher;
  v3[0] = v1;
  return (*(uint64_t (**)(void *))(v0 + 104))(v3);
}

unint64_t type metadata accessor for SEMSpanMatcher()
{
  unint64_t result = lazy cache variable for type metadata for SEMSpanMatcher;
  if (!lazy cache variable for type metadata for SEMSpanMatcher)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CB77D510](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v7 = v6;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v12 = v6;
      closure #1 in MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)(&v12, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v11)
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t MusicDomain.client.getter()
{
  return swift_retain();
}

uint64_t MusicDomain.name.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t MusicDomain.__allocating_init(spanMatcher:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t MusicDomain.init(spanMatcher:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t MusicDomain.search(query:userIds:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return a4(MEMORY[0x1E4FBC860], 0);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8)
  {
    uint64_t v16 = a4;
    uint64_t v11 = *(void (**)(uint64_t *, uint64_t, unint64_t, void *, void, uint64_t, uint64_t))(*(void *)v4 + 120);
    swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v13 = *(v12 - 1);
      uint64_t v14 = *v12;
      swift_bridgeObjectRetain();
      v11(&v17, a1, a2, &outlined read-only object #0 of MusicDomain.search(query:userIds:completion:), MEMORY[0x1E4FBC870], v13, v14);
      v12 += 2;
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v7 = v17;
    a4 = v16;
  }
  a4(v7, 0);

  return swift_bridgeObjectRelease();
}

uint64_t MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  uint64_t v57 = a4;
  uint64_t v64 = a6;
  unint64_t v65 = a5;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v56 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v61 = (char *)&v56 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v56 - v25;
  uint64_t v62 = a2;
  MusicDomain.extractClientSignals(_:)((uint64_t)&v56 - v25);
  uint64_t v63 = v26;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?((uint64_t)v26, (uint64_t)v24);
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v24, 1, v27) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  }
  else
  {
    char v29 = Apple_Parsec_Siri_V2alpha_ClientSignals.disableClientLibrarySearch.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v27);
    if (v29)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_1C8F83000, v31, v32, "client library search disabled by the server", v33, 2u);
        MEMORY[0x1CB77E470](v33, -1, -1);
      }

      v65((void *)MEMORY[0x1E4FBC860], 0);
      goto LABEL_21;
    }
  }
  Date.init()();
  uint64_t v34 = &v20[v18[5]];
  *(void *)uint64_t v34 = "SiriInformationSearch/MusicDomain.swift";
  *((void *)v34 + 1) = 39;
  v34[16] = 2;
  *(void *)&v20[v18[6]] = 426;
  uint64_t v35 = &v20[v18[7]];
  *(void *)uint64_t v35 = "search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)";
  *((void *)v35 + 1) = 71;
  v35[16] = 2;
  uint64_t v36 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
  os_log_type_t v37 = (uint64_t *)&v20[v18[8]];
  *os_log_type_t v37 = v36;
  v37[1] = v38;
  uint64_t v39 = v62;
  MusicDomain.extractAudioUnderstanding(_:)((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    uint64_t v41 = v59;
    os_log_type_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
    uint64_t v43 = v61;
    uint64_t v44 = v39;
    uint64_t v45 = v60;
    v42(v61, v44, v60);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v67 = v62;
      *(_DWORD *)os_log_type_t v48 = 136315138;
      uint64_t v58 = v48 + 4;
      v42(v56, (uint64_t)v43, v45);
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v61, v45);
      _os_log_impl(&dword_1C8F83000, v46, v47, "Failed to extract audio understanding from the Pegasus response:\n  PireneResponse : %s", v48, 0xCu);
      uint64_t v51 = v62;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v51, -1, -1);
      MEMORY[0x1CB77E470](v48, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v45);
    }

    lazy protocol witness table accessor for type SearchError and conformance SearchError();
    uint64_t v53 = (void *)swift_allocError();
    unsigned char *v54 = 1;
    v65(v53, 1);

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v20, 1);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v20);
LABEL_21:
    uint64_t v52 = (uint64_t)v63;
    return outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  uint64_t v52 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t, void (*)(void *, uint64_t), uint64_t))(*(void *)v58 + 136))(v17, v63, v57, v65, v64);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v20, 1);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v20);
  return outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
}

uint64_t MusicDomain.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MusicDomain.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for LocalDomainSearch.search(query:userIds:completion:) in conformance MusicDomain()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for LocalDomainSearch.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:) in conformance MusicDomain()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t specialized MusicDomain.init(spanMatcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v16 - v11;
  (*(void (**)(char *))(v7 + 32))((char *)&v16 - v11);
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of specialized MusicDomain.init(spanMatcher:));
  type metadata accessor for VocabularySearchClient();
  uint64_t v13 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, a3);
  uint64_t v14 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v10, v13, a3, a4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a3);
  *(void *)(a2 + 16) = v14;
  return a2;
}

uint64_t type metadata accessor for MusicDomain()
{
  return self;
}

uint64_t method lookup function for MusicDomain(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MusicDomain);
}

uint64_t dispatch thunk of MusicDomain.__allocating_init(spanMatcher:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MusicDomain.search(query:userIds:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t EnvironmentNamePreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static EnvironmentNamePreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

void EnvironmentNamePreflightClient.handle(pommesSearchRequest:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t EnvironmentNamePreflightClient.deinit()
{
  return v0;
}

uint64_t EnvironmentNamePreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t EnvironmentNamePreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance EnvironmentNamePreflightClient()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance EnvironmentNamePreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t type metadata accessor for EnvironmentNamePreflightClient()
{
  return self;
}

uint64_t method lookup function for EnvironmentNamePreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EnvironmentNamePreflightClient);
}

uint64_t dispatch thunk of EnvironmentNamePreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of EnvironmentNamePreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t PommesSearchRequest.userParses.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, (uint64_t)v13, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v13[*(int *)(v15 + 64)], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v16 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v18 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v21 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
        uint64_t v18 = NLParseResponse.userParses.getter();
      }
      uint64_t v20 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = *((void *)v13 + 2);
      uint64_t v7 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                       + 64)];
      swift_bridgeObjectRelease();
      uint64_t v20 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)&v13[*(int *)(v19 + 48)], (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v18 = *v10;
    swift_bridgeObjectRetain();
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  return v18;
}

Swift::Bool __swiftcall PommesSearchRequest.pscScoreIsAboveThreshold()()
{
  double v1 = *(double *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 48));
  return specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v1;
}

uint64_t PommesSearchRequest.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v2, (uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v26 = *(_OWORD *)v6;
      uint64_t v8 = *((void *)v6 + 2);
      uint64_t v9 = *((void *)v6 + 3);
      uint64_t v10 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                       + 64)];
      *(_OWORD *)a1 = v26;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      uint64_t v11 = *MEMORY[0x1E4F9FE58];
      uint64_t v12 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a1, v11, v12);
      uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
      uint64_t v14 = (uint64_t)v10;
    }
    else
    {
      uint64_t v21 = *(void *)v6;
      uint64_t v22 = *((void *)v6 + 1);
      swift_bridgeObjectRelease();
      uint64_t v23 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                       + 64)];
      swift_bridgeObjectRelease();
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      uint64_t v24 = *MEMORY[0x1E4F9FE48];
      uint64_t v25 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(a1, v24, v25);
      uint64_t v13 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      uint64_t v14 = (uint64_t)v23;
    }
    return outlined destroy of MediaUserStateCenter?(v14, v13);
  }
  else
  {
    uint64_t v15 = *(void *)v6;
    uint64_t v16 = *((void *)v6 + 1);
    uint64_t v17 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                              + 48)];
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v16;
    uint64_t v18 = *MEMORY[0x1E4F9FE50];
    uint64_t v19 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(a1, v18, v19);
    return _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v17, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void *a11, unsigned __int8 a12)
{
  uint64_t v77 = a8;
  uint64_t v78 = a7;
  int v75 = a5;
  int v73 = a12;
  uint64_t v74 = a11;
  uint64_t v69 = a10;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v71 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v70 = (char *)&v65 - v21;
  uint64_t v22 = type metadata accessor for NLXResultCandidate();
  uint64_t v23 = v22 - 8;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  int v72 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v65 - v29;
  uint64_t v31 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v31[23]) = MEMORY[0x1E4FBC860];
  os_log_type_t v32 = (void *)((char *)a9 + v31[5]);
  *os_log_type_t v32 = a1;
  v32[1] = a2;
  uint64_t v33 = (char *)a9 + v31[6];
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v76 = a6;
  uint64_t v35 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v67 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v36 = v67;
  os_log_type_t v37 = (void *)((char *)a9 + v31[8]);
  *os_log_type_t v37 = v35;
  v37[1] = v36;
  uint64_t v38 = (void *)((char *)a9 + v31[9]);
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v68 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a3;
  a9[1] = a4;
  uint64_t v39 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v66 = *(void *)(v39 - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
  v40(v30, 1, 1, v39);
  uint64_t v41 = &v25[*(int *)(v23 + 28)];
  v40(v41, 1, 1, v39);
  os_log_type_t v42 = (uint64_t *)v25;
  uint64_t v43 = &v25[*(int *)(v23 + 32)];
  *(void *)uint64_t v43 = 0;
  *((void *)v43 + 1) = 0;
  uint64_t v44 = v69;
  *os_log_type_t v42 = v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = (uint64_t)v41;
  uint64_t v46 = v44;
  os_log_type_t v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v40;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v30, v45, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v43 = 0;
  *((void *)v43 + 1) = 0;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v42, v68, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v78, (uint64_t)a9 + v31[10], &demangling cache variable for type metadata for PommesContext?);
  v40(v30, 1, 1, v39);
  os_log_type_t v48 = v70;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v46, (uint64_t)v30, v70);
  uint64_t v49 = (uint64_t)v30;
  uint64_t v50 = (uint64_t)v71;
  outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v51 = (uint64_t)v48;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v48, v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v50, 1, v52) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v53 = 1;
    uint64_t v54 = (uint64_t)v72;
  }
  else
  {
    uint64_t v54 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v72, v50, v39);
    uint64_t v53 = 0;
  }
  v47(v54, v53, 1, v39);
  outlined init with take of PommesSearchReason?(v54, (uint64_t)a9 + v31[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  char v55 = v73 & 1;
  *(double *)((char *)a9 + v31[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(v51, v73 & 1);
  uint64_t v57 = v76;
  uint64_t v56 = v77;
  uint64_t v58 = *(void *)(v76 + 24);
  uint64_t v59 = (void *)((char *)a9 + v31[7]);
  *uint64_t v59 = *(void *)(v76 + 16);
  v59[1] = v58;
  *(void *)((char *)a9 + v31[13]) = v57;
  outlined init with copy of MediaUserStateCenter?(v56, (uint64_t)a9 + v31[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v31[15]) = v75 & 1;
  uint64_t v60 = v74;
  *(void *)((char *)a9 + v31[18]) = v74;
  id v61 = v60;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v62 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v46);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v31[19]) = v62;
  *((unsigned char *)a9 + v31[20]) = v55;
  uint64_t v64 = (void *)((char *)a9 + v31[21]);
  *uint64_t v64 = 0;
  v64[1] = 0;
  *(void *)((char *)a9 + v31[22]) = 0;
  *((unsigned char *)a9 + v31[16]) = 0;
  *((unsigned char *)a9 + v31[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, char *a15, char *a16, char *a17)
{
  int v78 = a7;
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v76 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v74 = (char *)&v72 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  int v75 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v77 = (char *)&v72 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  os_log_type_t v32 = (char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v72 - v33;
  uint64_t v35 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v35[23]) = MEMORY[0x1E4FBC860];
  uint64_t v36 = (void *)((char *)a9 + v35[5]);
  void *v36 = a1;
  v36[1] = a2;
  os_log_type_t v37 = (char *)a9 + v35[6];
  uint64_t v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v79 = a8;
  uint64_t v39 = *(void *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v40 = (void *)((char *)a9 + v35[8]);
  *uint64_t v40 = *(void *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v40[1] = v39;
  uint64_t v41 = (void *)((char *)a9 + v35[9]);
  *uint64_t v41 = 0;
  v41[1] = 0;
  uint64_t v42 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v43 = v73;
  *a9 = v72;
  a9[1] = v43;
  uint64_t v44 = v81;
  a9[2] = v80;
  a9[3] = v44;
  outlined init with copy of MediaUserStateCenter?(a12, v42, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = (uint64_t)a9 + v35[10];
  uint64_t v80 = a10;
  outlined init with copy of MediaUserStateCenter?(a10, v45, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v81 = a12;
  outlined init with copy of MediaUserStateCenter?(a12, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v46 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v47 = *(void *)(v46 - 8);
  os_log_type_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v34, 1, v46);
  swift_bridgeObjectRetain();
  if (v49 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v50 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v51 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v46);
    uint64_t v50 = NLParseResponse.userParses.getter();
  }
  outlined init with copy of MediaUserStateCenter?(v81, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v48(v32, 1, v46) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v52 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v53 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v74, 1, 1, v52);
  }
  else
  {
    uint64_t v54 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v46);
    uint64_t v53 = (uint64_t)v74;
    NLParseResponse.fallbackParse.getter();
  }
  uint64_t v55 = (uint64_t)v75;
  uint64_t v56 = (uint64_t)v76;
  int v75 = a16;
  uint64_t v76 = a17;
  uint64_t v74 = a15;
  uint64_t v57 = v77;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v50, v53, v77);
  outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v57, v55, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v55, 1, v58) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v59 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v56, 1, 1, v59);
  }
  else
  {
    uint64_t v60 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v61 = v55;
    uint64_t v62 = v60;
    uint64_t v63 = *(void *)(v60 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v56, v61, v60);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v56, 0, 1, v62);
  }
  outlined init with take of PommesSearchReason?(v56, (uint64_t)a9 + v35[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v35[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v57, 0);
  uint64_t v64 = v79;
  uint64_t v65 = *(void *)(v79 + 24);
  uint64_t v66 = (void *)((char *)a9 + v35[7]);
  *uint64_t v66 = *(void *)(v79 + 16);
  v66[1] = v65;
  *(void *)((char *)a9 + v35[13]) = v64;
  outlined init with copy of MediaUserStateCenter?(a11, (uint64_t)a9 + v35[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v35[15]) = v78 & 1;
  *(void *)((char *)a9 + v35[18]) = a13;
  id v67 = a13;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v68 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v50);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v81, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(a11, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v80, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v57, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v35[19]) = v68;
  *((unsigned char *)a9 + v35[20]) = a14 & 1;
  uint64_t v70 = (char **)((char *)a9 + v35[21]);
  uint64_t v71 = v75;
  *uint64_t v70 = v74;
  v70[1] = v71;
  *(void *)((char *)a9 + v35[22]) = v76;
  *((unsigned char *)a9 + v35[16]) = 0;
  *((unsigned char *)a9 + v35[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v2, (uint64_t)v15, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v15[*(int *)(v17 + 64)], (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v18 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v18) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 1, 1, v20);
      }
      else
      {
        uint64_t v24 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v18);
        NLParseResponse.fallbackParse.getter();

        return outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t)&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                                 + 64)];
      swift_bridgeObjectRelease();
      return outlined init with take of PommesSearchReason?(v23, a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)&v15[*(int *)(v22 + 48)], (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v12[*(int *)(v10 + 20)], a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesSearchRequest.responseVariantResult.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, (uint64_t)v13, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)&v13[*(int *)(v19 + 48)], (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v18 = *(void *)&v10[*(int *)(v8 + 24)];
    swift_bridgeObjectRetain();
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    return v18;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v18 = *(void *)&v13[*(int *)(v20 + 80)];
    uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    uint64_t v22 = (uint64_t)&v13[*(int *)(v20 + 64)];
LABEL_8:
    outlined destroy of MediaUserStateCenter?(v22, v21);
    return v18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
  outlined init with take of PommesSearchReason?((uint64_t)&v13[*(int *)(v15 + 64)], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v16 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) != 1)
  {
    uint64_t v23 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
    uint64_t v18 = NLParseResponse.responseVariantResult.getter();

    uint64_t v21 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    uint64_t v22 = (uint64_t)v7;
    goto LABEL_8;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  return 0;
}

uint64_t PommesSearchRequest.init(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesSearchRequest.Builder(0);
  uint64_t v8 = (int *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v33 - v12);
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = (char *)&v33 + v8[7] - v12;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = (char *)v13 + v8[8];
  uint64_t v17 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (void *)((char *)v13 + v8[9]);
  void *v18 = 0;
  v18[1] = 0;
  *(void *)((char *)v13 + v8[10]) = 0;
  *((unsigned char *)v13 + v8[11]) = 0;
  *((unsigned char *)v13 + v8[12]) = 0;
  uint64_t v19 = (char *)v13 + v8[13];
  uint64_t v20 = type metadata accessor for PommesContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = (char *)v13 + v8[14];
  uint64_t v22 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = (char *)v13 + v8[15];
  uint64_t v24 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(void *)((char *)v13 + v8[16]) = MEMORY[0x1E4FBC860];
  uint64_t v25 = (char *)v13 + v8[17];
  uint64_t v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = (void *)((char *)v13 + v8[18]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  *(void *)((char *)v13 + v8[19]) = 0;
  *((unsigned char *)v13 + v8[20]) = 0;
  uint64_t v28 = (void *)((char *)v13 + v8[21]);
  *uint64_t v28 = 0;
  v28[1] = 0;
  *(void *)((char *)v13 + v8[22]) = 0;
  *((unsigned char *)v13 + v8[23]) = 0;
  a1(v13);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0((uint64_t)v13, (uint64_t)v11, type metadata accessor for PommesSearchRequest.Builder);
  PommesSearchRequest.init(builder:)(v11, (uint64_t)v6);
  _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v13, type metadata accessor for PommesSearchRequest.Builder);
  uint64_t v29 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v29))
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesSearchRequest?);
    uint64_t v31 = 1;
  }
  else
  {
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v6, a2, type metadata accessor for PommesSearchRequest);
    uint64_t v31 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(a2, v31, 1, v29);
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v74 = a7;
  int v70 = a5;
  uint64_t v69 = a11;
  uint64_t v72 = a8;
  uint64_t v73 = a10;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  id v67 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v66 = (char *)&v61 - v20;
  uint64_t v21 = type metadata accessor for NLXResultCandidate();
  uint64_t v22 = v21 - 8;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v68 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v30[23]) = MEMORY[0x1E4FBC860];
  uint64_t v31 = (void *)((char *)a9 + v30[5]);
  *uint64_t v31 = a1;
  v31[1] = a2;
  os_log_type_t v32 = (char *)a9 + v30[6];
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v71 = a6;
  uint64_t v34 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v64 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v35 = v64;
  uint64_t v36 = (void *)((char *)a9 + v30[8]);
  void *v36 = v34;
  v36[1] = v35;
  os_log_type_t v37 = (void *)((char *)a9 + v30[9]);
  *os_log_type_t v37 = 0;
  v37[1] = 0;
  uint64_t v65 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a3;
  a9[1] = a4;
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v62 = *(void *)(v38 - 8);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
  uint64_t v40 = (uint64_t)v29;
  v39(v29, 1, 1, v38);
  uint64_t v41 = (uint64_t)&v24[*(int *)(v22 + 28)];
  v39((char *)v41, 1, 1, v38);
  uint64_t v42 = *(int *)(v22 + 32);
  uint64_t v43 = v24;
  uint64_t v63 = v24;
  uint64_t v44 = &v24[v42];
  *(void *)uint64_t v44 = 0;
  *((void *)v44 + 1) = 0;
  uint64_t v45 = v73;
  *uint64_t v43 = v73;
  uint64_t v46 = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v44 = 0;
  *((void *)v44 + 1) = 0;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v63, v65, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v74, (uint64_t)a9 + v30[10], &demangling cache variable for type metadata for PommesContext?);
  v39((char *)v40, 1, 1, v38);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v45, v40, v46);
  uint64_t v47 = (uint64_t)v67;
  outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v46, v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 1, v48) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v49 = 1;
    uint64_t v50 = (uint64_t)v68;
  }
  else
  {
    uint64_t v50 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v68, v47, v38);
    uint64_t v49 = 0;
  }
  v39((char *)v50, v49, 1, v38);
  outlined init with take of PommesSearchReason?(v50, (uint64_t)a9 + v30[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v51 = (uint64_t)v46;
  *(double *)((char *)a9 + v30[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v46, 0);
  uint64_t v53 = v71;
  uint64_t v52 = v72;
  uint64_t v54 = *(void *)(v71 + 24);
  uint64_t v55 = (void *)((char *)a9 + v30[7]);
  *uint64_t v55 = *(void *)(v71 + 16);
  v55[1] = v54;
  *(void *)((char *)a9 + v30[13]) = v53;
  outlined init with copy of MediaUserStateCenter?(v52, (uint64_t)a9 + v30[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v30[15]) = v70 & 1;
  uint64_t v56 = v69;
  *(void *)((char *)a9 + v30[18]) = v69;
  id v57 = v56;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v58 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v73);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v74, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v30[19]) = v58;
  *((unsigned char *)a9 + v30[20]) = 0;
  uint64_t v60 = (void *)((char *)a9 + v30[21]);
  void *v60 = 0;
  v60[1] = 0;
  *(void *)((char *)a9 + v30[22]) = 0;
  *((unsigned char *)a9 + v30[16]) = 0;
  *((unsigned char *)a9 + v30[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  return _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, a1, type metadata accessor for PommesSearchRequest.ParseState);
}

uint64_t PommesSearchRequest.utterance.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.rewriteMessage.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.rewriteMessage.getter(type metadata accessor for PommesSearchRequest, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, a1);
}

uint64_t PommesSearchRequest.assistantId.getter()
{
  return PommesSearchRequest.assistantId.getter(type metadata accessor for PommesSearchRequest);
}

uint64_t PommesSearchRequest.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for PommesContext?);
}

uint64_t PommesSearchRequest.delegatedUDA.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.delegatedUDA.getter(type metadata accessor for PommesSearchRequest, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, a1);
}

double PommesSearchRequest.pscScore.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 48));
}

uint64_t PommesSearchRequest.requestContext.getter()
{
  type metadata accessor for PommesSearchRequest(0);

  return swift_retain();
}

uint64_t PommesSearchRequest.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t PommesSearchRequest.isMultiUser.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 60));
}

uint64_t PommesSearchRequest.isOnlyUserInHome.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 64));
}

uint64_t PommesSearchRequest.isGestureBased.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 68));
}

void *PommesSearchRequest.asrSpeechPackage.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 72));
  id v2 = v1;
  return v1;
}

uint64_t PommesSearchRequest.salientNLv4Parses.getter()
{
  type metadata accessor for PommesSearchRequest(0);

  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.isFallback.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 80));
}

uint64_t PommesSearchRequest.sharedUserId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.userIdentityClassification.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 88));
}

uint64_t PommesSearchRequest.profileResolutionRequests.getter()
{
  type metadata accessor for PommesSearchRequest(0);

  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.profileResolutionRequests.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PommesSearchRequest(0) + 92);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.profileResolutionRequests.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.init(utterance:requestId:resultCandidateId:interactionType:pommesContext:userParses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v62 = a7;
  uint64_t v56 = a3;
  uint64_t v58 = a10;
  uint64_t v59 = a8;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  id v57 = (char *)&v55 - v19;
  uint64_t v20 = type metadata accessor for NLXResultCandidate();
  uint64_t v21 = v20 - 8;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (uint64_t *)((char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v61 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v55 - v27;
  uint64_t v29 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v29[23]) = MEMORY[0x1E4FBC860];
  uint64_t v30 = (void *)((char *)a9 + v29[5]);
  *uint64_t v30 = a1;
  v30[1] = a2;
  uint64_t v31 = (char *)a9 + v29[6];
  uint64_t v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = (void *)((char *)a9 + v29[8]);
  void *v33 = v56;
  v33[1] = a4;
  uint64_t v34 = (void *)((char *)a9 + v29[9]);
  *uint64_t v34 = 0;
  v34[1] = 0;
  uint64_t v56 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a5;
  a9[1] = a6;
  uint64_t v35 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v55 = *(void *)(v35 - 8);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  v36(v28, 1, 1, v35);
  os_log_type_t v37 = (char *)v23 + *(int *)(v21 + 28);
  v36(v37, 1, 1, v35);
  uint64_t v38 = (uint64_t *)((char *)v23 + *(int *)(v21 + 32));
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v39 = v58;
  *uint64_t v23 = v58;
  swift_bridgeObjectRetain();
  uint64_t v40 = (uint64_t)v37;
  uint64_t v41 = v57;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v28, v40, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v42 = (uint64_t)v23;
  uint64_t v43 = v59;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0(v42, v56, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v43, (uint64_t)a9 + v29[10], &demangling cache variable for type metadata for PommesContext?);
  v36(v28, 1, 1, v35);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v39, (uint64_t)v28, v41);
  uint64_t v44 = (uint64_t)v28;
  uint64_t v45 = (uint64_t)v60;
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v41, v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v47 = 1;
    uint64_t v48 = (uint64_t)v61;
  }
  else
  {
    uint64_t v48 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v61, v45, v35);
    uint64_t v47 = 0;
  }
  v36((char *)v48, v47, 1, v35);
  outlined init with take of PommesSearchReason?(v48, (uint64_t)a9 + v29[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v29[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v41, 0);
  uint64_t v49 = (void *)((char *)a9 + v29[7]);
  *uint64_t v49 = 0;
  v49[1] = 0;
  *(void *)((char *)a9 + v29[13]) = 0;
  uint64_t v50 = (char *)a9 + v29[14];
  uint64_t v51 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 1, 1, v51);
  *((unsigned char *)a9 + v29[15]) = 0;
  *(void *)((char *)a9 + v29[18]) = 0;
  uint64_t v52 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v39);
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of MediaUserStateCenter?(v62, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v41, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v29[19]) = v52;
  *((unsigned char *)a9 + v29[20]) = 0;
  uint64_t v54 = (void *)((char *)a9 + v29[21]);
  void *v54 = 0;
  v54[1] = 0;
  *(void *)((char *)a9 + v29[22]) = 0;
  *((unsigned char *)a9 + v29[16]) = 0;
  *((unsigned char *)a9 + v29[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:requestId:resultCandidateId:interactionType:pommesContext:userParses:assistantId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v59 = a3;
  uint64_t v66 = a12;
  uint64_t v67 = a7;
  uint64_t v65 = a11;
  uint64_t v61 = a10;
  uint64_t v62 = a8;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v63 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v60 = (char *)&v58 - v21;
  uint64_t v22 = type metadata accessor for NLXResultCandidate();
  uint64_t v23 = v22 - 8;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (uint64_t *)((char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v64 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v31 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v31[23]) = MEMORY[0x1E4FBC860];
  uint64_t v32 = (void *)((char *)a9 + v31[5]);
  *uint64_t v32 = a1;
  v32[1] = a2;
  uint64_t v33 = (char *)a9 + v31[6];
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = (void *)((char *)a9 + v31[8]);
  *uint64_t v35 = v59;
  v35[1] = a4;
  uint64_t v36 = (void *)((char *)a9 + v31[9]);
  void *v36 = 0;
  v36[1] = 0;
  uint64_t v59 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a5;
  a9[1] = a6;
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v58 = *(void *)(v37 - 8);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v38(v30, 1, 1, v37);
  uint64_t v39 = (char *)v25 + *(int *)(v23 + 28);
  v38(v39, 1, 1, v37);
  uint64_t v40 = (uint64_t *)((char *)v25 + *(int *)(v23 + 32));
  *uint64_t v40 = 0;
  v40[1] = 0;
  uint64_t v41 = v61;
  *uint64_t v25 = v61;
  swift_bridgeObjectRetain();
  uint64_t v42 = (uint64_t)v39;
  uint64_t v43 = v60;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v30, v42, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *uint64_t v40 = 0;
  v40[1] = 0;
  uint64_t v44 = (uint64_t)v25;
  uint64_t v45 = v62;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0(v44, v59, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v45, (uint64_t)a9 + v31[10], &demangling cache variable for type metadata for PommesContext?);
  v38(v30, 1, 1, v37);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v41, (uint64_t)v30, v43);
  uint64_t v46 = (uint64_t)v30;
  uint64_t v47 = (uint64_t)v63;
  outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v43, v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 1, v48) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v49 = 1;
    uint64_t v50 = (uint64_t)v64;
  }
  else
  {
    uint64_t v50 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v64, v47, v37);
    uint64_t v49 = 0;
  }
  v38((char *)v50, v49, 1, v37);
  outlined init with take of PommesSearchReason?(v50, (uint64_t)a9 + v31[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v31[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v43, 0);
  uint64_t v51 = (void *)((char *)a9 + v31[7]);
  uint64_t v52 = v66;
  void *v51 = v65;
  v51[1] = v52;
  *(void *)((char *)a9 + v31[13]) = 0;
  uint64_t v53 = (char *)a9 + v31[14];
  uint64_t v54 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
  *((unsigned char *)a9 + v31[15]) = 0;
  *(void *)((char *)a9 + v31[18]) = 0;
  uint64_t v55 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v41);
  outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v43, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v31[19]) = v55;
  *((unsigned char *)a9 + v31[20]) = 0;
  id v57 = (void *)((char *)a9 + v31[21]);
  *id v57 = 0;
  v57[1] = 0;
  *(void *)((char *)a9 + v31[22]) = 0;
  *((unsigned char *)a9 + v31[16]) = 0;
  *((unsigned char *)a9 + v31[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v73 = a8;
  uint64_t v74 = a4;
  int v70 = a5;
  uint64_t v72 = a3;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v68 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v66 = (char *)&v65 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v67 = (uint64_t)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v69 = (char *)&v65 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v30 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v30[23]) = MEMORY[0x1E4FBC860];
  uint64_t v31 = (void *)((char *)a9 + v30[5]);
  *uint64_t v31 = a1;
  v31[1] = a2;
  uint64_t v32 = (char *)a9 + v30[6];
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v71 = a6;
  uint64_t v34 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v35 = (void *)((char *)a9 + v30[8]);
  *uint64_t v35 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v35[1] = v34;
  uint64_t v36 = (void *)((char *)a9 + v30[9]);
  void *v36 = 0;
  v36[1] = 0;
  uint64_t v37 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v38 = v74;
  *a9 = v72;
  a9[1] = v38;
  a9[2] = 0;
  a9[3] = 0xE000000000000000;
  outlined init with copy of MediaUserStateCenter?(a10, v37, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v39 = (uint64_t)a9 + v30[10];
  uint64_t v74 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v39, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v72 = a10;
  outlined init with copy of MediaUserStateCenter?(a10, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v40 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v29, 1, v40);
  swift_bridgeObjectRetain();
  if (v43 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v44 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v45 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v40);
    uint64_t v44 = NLParseResponse.userParses.getter();
  }
  uint64_t v46 = v72;
  outlined init with copy of MediaUserStateCenter?(v72, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v42(v27, 1, v40) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v47 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v48 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v66, 1, 1, v47);
  }
  else
  {
    uint64_t v49 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v40);
    uint64_t v48 = (uint64_t)v66;
    NLParseResponse.fallbackParse.getter();
  }
  uint64_t v50 = (uint64_t)v68;
  uint64_t v51 = v69;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v44, v48, v69);
  outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v52 = v67;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v51, v67, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48))(v52, 1, v53) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v54 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v50, 1, 1, v54);
  }
  else
  {
    uint64_t v55 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v56 = *(void *)(v55 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v50, v52, v55);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v50, 0, 1, v55);
  }
  outlined init with take of PommesSearchReason?(v50, (uint64_t)a9 + v30[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v30[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v51, 0);
  uint64_t v57 = v71;
  uint64_t v58 = *(void *)(v71 + 24);
  uint64_t v59 = (void *)((char *)a9 + v30[7]);
  *uint64_t v59 = *(void *)(v71 + 16);
  v59[1] = v58;
  *(void *)((char *)a9 + v30[13]) = v57;
  uint64_t v60 = v73;
  outlined init with copy of MediaUserStateCenter?(v73, (uint64_t)a9 + v30[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v30[15]) = v70 & 1;
  *(void *)((char *)a9 + v30[18]) = a11;
  id v61 = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v62 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v44);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v46, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(v60, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v74, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v30[19]) = v62;
  *((unsigned char *)a9 + v30[20]) = 0;
  uint64_t v64 = (void *)((char *)a9 + v30[21]);
  *uint64_t v64 = 0;
  v64[1] = 0;
  *(void *)((char *)a9 + v30[22]) = 0;
  *((unsigned char *)a9 + v30[16]) = 0;
  *((unsigned char *)a9 + v30[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v76 = a4;
  uint64_t v77 = a8;
  int v74 = a5;
  uint64_t v68 = a3;
  uint64_t v80 = a14;
  uint64_t v81 = a15;
  uint64_t v79 = a13;
  int v72 = a12;
  uint64_t v73 = a11;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  int v70 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v69 = (char *)&v65 - v23;
  uint64_t v24 = type metadata accessor for NLXResultCandidate();
  uint64_t v25 = v24 - 8;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (uint64_t *)((char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v71 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v65 - v31;
  uint64_t v33 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v33[23]) = MEMORY[0x1E4FBC860];
  uint64_t v34 = (void *)((char *)a9 + v33[5]);
  *uint64_t v34 = a1;
  v34[1] = a2;
  uint64_t v35 = (char *)a9 + v33[6];
  uint64_t v36 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v75 = a6;
  uint64_t v37 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v66 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v38 = v66;
  uint64_t v39 = (void *)((char *)a9 + v33[8]);
  void *v39 = v37;
  v39[1] = v38;
  uint64_t v40 = (void *)((char *)a9 + v33[9]);
  *uint64_t v40 = 0;
  v40[1] = 0;
  uint64_t v41 = (uint64_t)a9 + v33[10];
  uint64_t v78 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v41, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v67 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  uint64_t v42 = v76;
  *a9 = v68;
  a9[1] = v42;
  uint64_t v43 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v68 = *(void *)(v43 - 8);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
  v44(v32, 1, 1, v43);
  uint64_t v45 = (uint64_t)v27 + *(int *)(v25 + 28);
  v44((char *)v45, 1, 1, v43);
  uint64_t v46 = (uint64_t *)((char *)v27 + *(int *)(v25 + 32));
  *uint64_t v46 = 0;
  v46[1] = 0;
  *uint64_t v27 = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v32, v45, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *uint64_t v46 = 0;
  v46[1] = 0;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v27, v67, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v44(v32, 1, 1, v43);
  uint64_t v47 = v69;
  uint64_t v76 = a10;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v32, v69);
  uint64_t v48 = (uint64_t)v32;
  uint64_t v49 = (uint64_t)v70;
  outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v50 = (uint64_t)v47;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v47, v49, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v49, 1, v51) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v52 = 1;
    uint64_t v53 = (uint64_t)v71;
  }
  else
  {
    uint64_t v53 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v71, v49, v43);
    uint64_t v52 = 0;
  }
  v44((char *)v53, v52, 1, v43);
  outlined init with take of PommesSearchReason?(v53, (uint64_t)a9 + v33[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  char v54 = v72 & 1;
  *(double *)((char *)a9 + v33[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v47, v72 & 1);
  uint64_t v55 = v75;
  uint64_t v56 = *(void *)(v75 + 24);
  uint64_t v57 = (void *)((char *)a9 + v33[7]);
  *uint64_t v57 = *(void *)(v75 + 16);
  v57[1] = v56;
  *(void *)((char *)a9 + v33[13]) = v55;
  uint64_t v58 = v77;
  outlined init with copy of MediaUserStateCenter?(v77, (uint64_t)a9 + v33[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v33[15]) = v74 & 1;
  uint64_t v59 = v73;
  *(void *)((char *)a9 + v33[18]) = v73;
  id v60 = v59;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v61 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v76);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v33[19]) = v61;
  *((unsigned char *)a9 + v33[20]) = v54;
  uint64_t v63 = (void *)((char *)a9 + v33[21]);
  uint64_t v64 = v80;
  *uint64_t v63 = v79;
  v63[1] = v64;
  *(void *)((char *)a9 + v33[22]) = v81;
  *((unsigned char *)a9 + v33[16]) = 0;
  *((unsigned char *)a9 + v33[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char *a16, char *a17, unsigned __int8 a18)
{
  int v79 = a7;
  uint64_t v81 = a5;
  uint64_t v82 = a6;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v77 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v75 = (char *)&v73 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v76 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v78 = (char *)&v73 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v33 = (char *)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v73 - v34;
  uint64_t v36 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v36[23]) = MEMORY[0x1E4FBC860];
  uint64_t v37 = (void *)((char *)a9 + v36[5]);
  *uint64_t v37 = a1;
  v37[1] = a2;
  uint64_t v38 = (char *)a9 + v36[6];
  uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  uint64_t v80 = a8;
  uint64_t v40 = *(void *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v41 = (void *)((char *)a9 + v36[8]);
  *uint64_t v41 = *(void *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v41[1] = v40;
  uint64_t v42 = (void *)((char *)a9 + v36[9]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  uint64_t v43 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v44 = v74;
  *a9 = v73;
  a9[1] = v44;
  uint64_t v45 = v82;
  a9[2] = v81;
  a9[3] = v45;
  outlined init with copy of MediaUserStateCenter?(a12, v43, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = (uint64_t)a9 + v36[10];
  uint64_t v81 = a10;
  outlined init with copy of MediaUserStateCenter?(a10, v46, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v82 = a12;
  outlined init with copy of MediaUserStateCenter?(a12, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v47 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v35, 1, v47);
  swift_bridgeObjectRetain();
  if (v50 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v51 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v52 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v47);
    uint64_t v51 = NLParseResponse.userParses.getter();
  }
  outlined init with copy of MediaUserStateCenter?(v82, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v49(v33, 1, v47) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v53 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v54 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v75, 1, 1, v53);
  }
  else
  {
    uint64_t v55 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v47);
    uint64_t v54 = (uint64_t)v75;
    NLParseResponse.fallbackParse.getter();
  }
  uint64_t v56 = (uint64_t)v76;
  uint64_t v57 = (uint64_t)v77;
  LODWORD(v77) = a18;
  uint64_t v75 = a16;
  uint64_t v76 = a17;
  uint64_t v74 = a15;
  uint64_t v58 = v78;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v51, v54, v78);
  outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v58, v56, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v56, 1, v59) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v60 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v57, 1, 1, v60);
  }
  else
  {
    uint64_t v61 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v62 = v56;
    uint64_t v63 = v61;
    uint64_t v64 = *(void *)(v61 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v57, v62, v61);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v57, 0, 1, v63);
  }
  outlined init with take of PommesSearchReason?(v57, (uint64_t)a9 + v36[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v36[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v58, 0);
  uint64_t v65 = v80;
  uint64_t v66 = *(void *)(v80 + 24);
  uint64_t v67 = (void *)((char *)a9 + v36[7]);
  *uint64_t v67 = *(void *)(v80 + 16);
  v67[1] = v66;
  *(void *)((char *)a9 + v36[13]) = v65;
  outlined init with copy of MediaUserStateCenter?(a11, (uint64_t)a9 + v36[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v36[15]) = v79 & 1;
  *(void *)((char *)a9 + v36[18]) = a13;
  id v68 = a13;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v69 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v51);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v82, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(a11, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v58, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v36[19]) = v69;
  *((unsigned char *)a9 + v36[20]) = a14 & 1;
  uint64_t v71 = (void *)((char *)a9 + v36[21]);
  int v72 = v75;
  *uint64_t v71 = v74;
  v71[1] = v72;
  *(void *)((char *)a9 + v36[22]) = v76;
  *((unsigned char *)a9 + v36[16]) = v77 & 1;
  *((unsigned char *)a9 + v36[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v76 = a4;
  uint64_t v77 = a8;
  int v74 = a5;
  uint64_t v68 = a3;
  int v82 = a16;
  uint64_t v80 = a14;
  uint64_t v81 = a15;
  uint64_t v79 = a13;
  int v72 = a12;
  uint64_t v73 = a11;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  int v70 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v69 = (char *)&v66 - v24;
  uint64_t v25 = type metadata accessor for NLXResultCandidate();
  uint64_t v26 = v25 - 8;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (uint64_t *)((char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v71 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v66 - v32;
  uint64_t v34 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void *)((char *)a9 + v34[23]) = MEMORY[0x1E4FBC860];
  uint64_t v35 = (void *)((char *)a9 + v34[5]);
  *uint64_t v35 = a1;
  v35[1] = a2;
  uint64_t v36 = (char *)a9 + v34[6];
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v75 = a6;
  uint64_t v38 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v66 = *(void *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v39 = v66;
  uint64_t v40 = (void *)((char *)a9 + v34[8]);
  *uint64_t v40 = v38;
  v40[1] = v39;
  uint64_t v41 = (void *)((char *)a9 + v34[9]);
  *uint64_t v41 = 0;
  v41[1] = 0;
  uint64_t v42 = (uint64_t)a9 + v34[10];
  uint64_t v78 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v42, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v67 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  uint64_t v43 = v76;
  *a9 = v68;
  a9[1] = v43;
  uint64_t v44 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v68 = *(void *)(v44 - 8);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56);
  v45(v33, 1, 1, v44);
  uint64_t v46 = (uint64_t)v28 + *(int *)(v26 + 28);
  v45((char *)v46, 1, 1, v44);
  uint64_t v47 = (uint64_t *)((char *)v28 + *(int *)(v26 + 32));
  void *v47 = 0;
  v47[1] = 0;
  *uint64_t v28 = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v33, v46, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  void *v47 = 0;
  v47[1] = 0;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v28, v67, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v45(v33, 1, 1, v44);
  uint64_t v48 = v69;
  uint64_t v76 = a10;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v33, v69);
  uint64_t v49 = (uint64_t)v33;
  uint64_t v50 = (uint64_t)v70;
  outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v51 = (uint64_t)v48;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v48, v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v50, 1, v52) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v53 = 1;
    uint64_t v54 = (uint64_t)v71;
  }
  else
  {
    uint64_t v54 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v71, v50, v44);
    uint64_t v53 = 0;
  }
  v45((char *)v54, v53, 1, v44);
  outlined init with take of PommesSearchReason?(v54, (uint64_t)a9 + v34[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  char v55 = v72 & 1;
  *(double *)((char *)a9 + v34[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v48, v72 & 1);
  uint64_t v56 = v75;
  uint64_t v57 = *(void *)(v75 + 24);
  uint64_t v58 = (void *)((char *)a9 + v34[7]);
  *uint64_t v58 = *(void *)(v75 + 16);
  v58[1] = v57;
  *(void *)((char *)a9 + v34[13]) = v56;
  uint64_t v59 = v77;
  outlined init with copy of MediaUserStateCenter?(v77, (uint64_t)a9 + v34[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v34[15]) = v74 & 1;
  uint64_t v60 = v73;
  *(void *)((char *)a9 + v34[18]) = v73;
  id v61 = v60;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v62 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v76);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void *)((char *)a9 + v34[19]) = v62;
  *((unsigned char *)a9 + v34[20]) = v55;
  uint64_t v64 = (void *)((char *)a9 + v34[21]);
  uint64_t v65 = v80;
  *uint64_t v64 = v79;
  v64[1] = v65;
  *(void *)((char *)a9 + v34[22]) = v81;
  *((unsigned char *)a9 + v34[16]) = v82 & 1;
  *((unsigned char *)a9 + v34[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:fallbackParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, int a5@<W4>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void (**a9)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>, uint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned __int8 a16, uint64_t a17)
{
  uint64_t v80 = a8;
  uint64_t v81 = a2;
  int v78 = a5;
  uint64_t v71 = a4;
  int v72 = a3;
  int v85 = a16;
  uint64_t v83 = a14;
  unint64_t v84 = a15;
  uint64_t v82 = a13;
  int v76 = a12;
  uint64_t v77 = a11;
  uint64_t v86 = a17;
  uint64_t v87 = a10;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v73 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  int v74 = (char *)&v69 - v24;
  uint64_t v25 = type metadata accessor for NLXResultCandidate();
  uint64_t v26 = v25 - 8;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (uint64_t *)((char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v75 = (char *)&v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v69 - v32;
  uint64_t v34 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[23]) = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC860];
  uint64_t v35 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[5]);
  uint64_t v36 = v81;
  *uint64_t v35 = a1;
  v35[1] = v36;
  uint64_t v37 = (char *)a9 + v34[6];
  uint64_t v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v79 = a6;
  uint64_t v39 = *(void *)((char *)a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v40 = *(void *)((char *)a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  uint64_t v41 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[8]);
  *uint64_t v41 = v39;
  v41[1] = v40;
  uint64_t v42 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[9]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  uint64_t v43 = (uint64_t)a9 + v34[10];
  uint64_t v81 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v43, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v70 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  uint64_t v44 = v71;
  *a9 = v72;
  a9[1] = v44;
  outlined init with copy of MediaUserStateCenter?(a17, (uint64_t)v33, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v45 = (uint64_t)v28 + *(int *)(v26 + 28);
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56);
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 - 8);
  int v72 = v47;
  v47(v45, 1, 1, v46);
  uint64_t v48 = (void *)((char *)v28 + *(int *)(v26 + 32));
  *uint64_t v48 = 0;
  v48[1] = 0;
  uint64_t v49 = v87;
  *uint64_t v28 = v87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v33, v45, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *uint64_t v48 = 0;
  v48[1] = 0;
  uint64_t v50 = (uint64_t)v28;
  uint64_t v51 = (uint64_t)v73;
  _s21SiriInformationSearch18NLXResultCandidateVWObTm_0(v50, v70, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v52 = v74;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v49, v86, v74);
  uint64_t v53 = (uint64_t)v52;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v52, v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v51, 1, v54) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v55 = 1;
    uint64_t v56 = (uint64_t)v75;
  }
  else
  {
    uint64_t v56 = (uint64_t)v75;
    (*((void (**)(char *, uint64_t, uint64_t))v71 + 4))(v75, v51, v46);
    uint64_t v55 = 0;
  }
  v72(v56, v55, 1, v46);
  outlined init with take of PommesSearchReason?(v56, (uint64_t)a9 + v34[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  char v57 = v76 & 1;
  uint64_t v58 = v53;
  *(double *)((char *)a9 + v34[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(v53, v76 & 1);
  uint64_t v60 = v79;
  uint64_t v59 = v80;
  uint64_t v61 = *((void *)v79 + 3);
  uint64_t v62 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[7]);
  *uint64_t v62 = *((void *)v79 + 2);
  v62[1] = v61;
  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[13]) = v60;
  outlined init with copy of MediaUserStateCenter?(v59, (uint64_t)a9 + v34[14], &demangling cache variable for type metadata for InputOrigin?);
  *((unsigned char *)a9 + v34[15]) = v78 & 1;
  uint64_t v63 = v77;
  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[18]) = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v77;
  id v64 = v63;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v65 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v87);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v86, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[19]) = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65;
  *((unsigned char *)a9 + v34[20]) = v57;
  uint64_t v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[21]);
  uint64_t v68 = v83;
  *uint64_t v67 = v82;
  v67[1] = v68;
  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)a9 + v34[22]) = v84;
  *((unsigned char *)a9 + v34[16]) = v85 & 1;
  *((unsigned char *)a9 + v34[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.Builder.init()@<X0>(void *a1@<X8>)
{
  id v2 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (char *)a1 + v2[5];
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + v2[6];
  uint64_t v6 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (void *)((char *)a1 + v2[7]);
  void *v7 = 0;
  v7[1] = 0;
  *(void *)((char *)a1 + v2[8]) = 0;
  *((unsigned char *)a1 + v2[9]) = 0;
  *((unsigned char *)a1 + v2[10]) = 0;
  uint64_t v8 = (char *)a1 + v2[11];
  uint64_t v9 = type metadata accessor for PommesContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (char *)a1 + v2[12];
  uint64_t v11 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (char *)a1 + v2[13];
  uint64_t v13 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)((char *)a1 + v2[14]) = MEMORY[0x1E4FBC860];
  uint64_t v14 = (char *)a1 + v2[15];
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v17 = (void *)((char *)a1 + v2[16]);
  *uint64_t v17 = 0;
  v17[1] = 0;
  *(void *)((char *)a1 + v2[17]) = 0;
  *((unsigned char *)a1 + v2[18]) = 0;
  uint64_t v18 = (void *)((char *)a1 + v2[19]);
  void *v18 = 0;
  v18[1] = 0;
  *(void *)((char *)a1 + v2[20]) = 0;
  *((unsigned char *)a1 + v2[21]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(builder:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v164 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v150 = (uint64_t)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v148 = (uint64_t)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v149 = (char *)&v144 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v153 = (char *)&v144 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v151 = (char *)&v144 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v157 = (uint64_t)&v144 - v15;
  MEMORY[0x1F4188790](v14);
  *(void *)&long long v158 = (char *)&v144 - v16;
  uint64_t v17 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (uint64_t *)((char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v147 = (char *)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v152 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v144 - v24);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  unint64_t v156 = (char *)&v144 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v144 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v31 = (char *)&v144 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PommesCandidateId();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (uint64_t *)((char *)&v144 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v34);
  uint64_t v161 = (char *)&v144 - v37;
  uint64_t v38 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v163 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  uint64_t v41 = (uint64_t *)((char *)&v144 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v162 = *(int *)(v39 + 92);
  *(void *)((char *)v41 + v162) = MEMORY[0x1E4FBC860];
  uint64_t v42 = a1[1];
  if (!v42)
  {
    uint64_t v53 = (int *)v39;
    uint64_t v54 = (uint64_t)a1;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    uint64_t v51 = v53;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl(&dword_1C8F83000, v56, v57, "Attempting to create a PommesSearchRequest without an utterance", v58, 2u);
      MEMORY[0x1CB77E470](v58, -1, -1);
    }

    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v54, type metadata accessor for PommesSearchRequest.Builder);
    goto LABEL_45;
  }
  uint64_t v43 = *a1;
  uint64_t v159 = (int *)v39;
  uint64_t v44 = (void *)((char *)v41 + *(int *)(v39 + 20));
  void *v44 = v43;
  v44[1] = v42;
  uint64_t v154 = v44;
  uint64_t v155 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  uint64_t v45 = v155[6];
  uint64_t v160 = a1;
  outlined init with copy of MediaUserStateCenter?((uint64_t)a1 + v45, (uint64_t)v31, &demangling cache variable for type metadata for PommesCandidateId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) != 1)
  {
    uint64_t v59 = v161;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v161, v31, v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v36, v59, v32);
    int v60 = (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 88))(v36, v32);
    BOOL v61 = v60 == *MEMORY[0x1E4F9FE50];
    uint64_t v146 = v32;
    uint64_t v145 = v33;
    if (v61)
    {
      (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v36, v32);
      uint64_t v63 = *v36;
      uint64_t v62 = v36[1];
      uint64_t v150 = (uint64_t)v41
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                    + 48);
      *uint64_t v41 = v63;
      v41[1] = v62;
      id v64 = v155;
      uint64_t v65 = v155[14];
      uint64_t v66 = (uint64_t)v160;
      uint64_t v67 = *(void *)((char *)v160 + v65);
      unint64_t v151 = (char *)v160 + v155[15];
      outlined init with copy of MediaUserStateCenter?((uint64_t)v151, (uint64_t)v28, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      uint64_t v68 = v66 + v64[16];
      uint64_t v69 = *(void *)(v68 + 8);
      unint64_t v149 = *(char **)v68;
      uint64_t v70 = (uint64_t)v19 + *(int *)(v17 + 20);
      uint64_t v71 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v147 = *(char **)(v71 - 8);
      uint64_t v148 = v71;
      uint64_t v152 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v147 + 7);
      uint64_t v153 = v147 + 56;
      v152(v70, 1, 1);
      int v72 = (void *)((char *)v19 + *(int *)(v17 + 24));
      *int v72 = 0;
      v72[1] = 0;
      *uint64_t v19 = v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v73 = v66;
      swift_bridgeObjectRetain();
      uint64_t v74 = (uint64_t)v28;
      uint64_t v75 = v65;
      outlined assign with take of MediaUserStateCenter?(v74, v70, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      swift_bridgeObjectRelease();
      uint64_t v76 = v150;
      *int v72 = v149;
      v72[1] = v69;
      _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v19, v76, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v77 = (char *)v158;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(*(void *)(v66 + v65), (uint64_t)v151, (char *)v158);
      uint64_t v78 = v157;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v157, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 48))(v78, 1, v79) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        uint64_t v80 = 1;
        uint64_t v51 = v159;
        uint64_t v81 = (uint64_t)v156;
        uint64_t v82 = v148;
      }
      else
      {
        uint64_t v81 = (uint64_t)v156;
        uint64_t v92 = v78;
        uint64_t v93 = v148;
        (*((void (**)(char *, uint64_t, uint64_t))v147 + 4))(v156, v92, v148);
        uint64_t v80 = 0;
        uint64_t v51 = v159;
        uint64_t v82 = v93;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v152)(v81, v80, 1, v82);
      outlined init with take of PommesSearchReason?(v81, (uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      uint64_t v86 = v155;
      *(double *)((char *)v41 + v51[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v77, *(unsigned char *)(v73 + v155[18]));
      uint64_t v91 = *(void *)(v73 + v75);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    if (v60 == *MEMORY[0x1E4F9FE58])
    {
      (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v36, v32);
      long long v158 = *(_OWORD *)v36;
      uint64_t v84 = v36[2];
      uint64_t v83 = v36[3];
      uint64_t v85 = (uint64_t)v41
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      *(_OWORD *)uint64_t v41 = v158;
      v41[2] = v84;
      v41[3] = v83;
      uint64_t v86 = v155;
      uint64_t v73 = (uint64_t)v160;
      uint64_t v87 = (uint64_t)v160 + v155[13];
      outlined init with copy of MediaUserStateCenter?(v87, v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v88 = v150;
      outlined init with copy of MediaUserStateCenter?(v87, v150, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v89 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v90 = *(void *)(v89 - 8);
      LODWORD(v84) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89);
      swift_bridgeObjectRetain();
      uint64_t v51 = v159;
      if (v84 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v88, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v91 = MEMORY[0x1E4FBC860];
      }
      else
      {
        int v106 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
        uint64_t v91 = NLParseResponse.userParses.getter();
      }
      uint64_t v105 = (uint64_t)v152;
      uint64_t v107 = (uint64_t)v153;
      uint64_t v77 = v151;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v91, v73 + v86[15], v151);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v107, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 48))(v107, 1, v108) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v107, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        uint64_t v109 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v105, 1, 1, v109);
        goto LABEL_36;
      }
      uint64_t v117 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v118 = *(void *)(v117 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v105, v107, v117);
    }
    else
    {
      uint64_t v51 = v159;
      uint64_t v73 = (uint64_t)v160;
      uint64_t v86 = v155;
      if (v60 != *MEMORY[0x1E4F9FE48])
      {
        uint64_t v110 = one-time initialization token for pommes;
        swift_bridgeObjectRetain();
        if (v110 != -1) {
          swift_once();
        }
        uint64_t v111 = type metadata accessor for Logger();
        __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
        uint64_t v112 = Logger.logObject.getter();
        os_log_type_t v113 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v112, v113))
        {
          uint64_t v114 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v114 = 0;
          _os_log_impl(&dword_1C8F83000, v112, v113, "A new PommesCandidateId case was added and used to construct a PommesSearchRequest without updating the initializer", v114, 2u);
          MEMORY[0x1CB77E470](v114, -1, -1);
        }

        uint64_t v115 = *(void (**)(char *, uint64_t))(v145 + 8);
        uint64_t v116 = v146;
        v115(v161, v146);
        _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v73, type metadata accessor for PommesSearchRequest.Builder);
        v115((char *)v36, v116);
        goto LABEL_44;
      }
      (*(void (**)(uint64_t *, uint64_t))(v145 + 96))(v36, v146);
      uint64_t v95 = *v36;
      uint64_t v94 = v36[1];
      uint64_t v91 = *(void *)(v73 + v86[14]);
      uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v97 = (uint64_t)v41 + *(int *)(v96 + 64);
      uint64_t v98 = (void *)((char *)v41 + *(int *)(v96 + 80));
      *uint64_t v41 = v95;
      v41[1] = v94;
      v41[2] = v91;
      uint64_t v99 = v73 + v86[15];
      outlined init with copy of MediaUserStateCenter?(v99, v97, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      unint64_t v100 = (void *)(v73 + v86[16]);
      uint64_t v101 = v100[1];
      void *v98 = *v100;
      v98[1] = v101;
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v77 = v149;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v91, v99, v149);
      uint64_t v102 = v148;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v148, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 48))(v102, 1, v103) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v102, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        uint64_t v104 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        uint64_t v105 = (uint64_t)v147;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v147, 1, 1, v104);
LABEL_36:
        outlined init with take of PommesSearchReason?(v105, (uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        *(double *)((char *)v41 + v51[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v77, *(unsigned char *)(v73 + v86[18]));
LABEL_37:
        uint64_t v119 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v91);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?((uint64_t)v77, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        *(void *)((char *)v41 + v51[19]) = v119;
        uint64_t v120 = *(void *)(v73 + v86[8]);
        if (v120)
        {
          uint64_t v121 = *(void (**)(char *, uint64_t))(v145 + 8);
          swift_retain();
          v121(v161, v146);
          *(void *)((char *)v41 + v51[13]) = v120;
          uint64_t v122 = *(void *)(v120 + 24);
          uint64_t v123 = (void *)((char *)v41 + v51[7]);
          *uint64_t v123 = *(void *)(v120 + 16);
          v123[1] = v122;
          uint64_t v124 = *(void *)(v120 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
          uint64_t v125 = *(void *)(v120 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
          uint64_t v126 = (void *)((char *)v41 + v51[8]);
          *uint64_t v126 = v124;
          v126[1] = v125;
          os_log_t v127 = (uint64_t *)(v73 + v86[7]);
          uint64_t v128 = *v127;
          uint64_t v129 = v127[1];
          uint64_t v130 = (void *)((char *)v41 + v51[9]);
          *uint64_t v130 = v128;
          v130[1] = v129;
          outlined init with copy of MediaUserStateCenter?(v73 + v86[11], (uint64_t)v41 + v51[10], &demangling cache variable for type metadata for PommesContext?);
          outlined init with copy of MediaUserStateCenter?(v73 + v86[12], (uint64_t)v41 + v51[14], &demangling cache variable for type metadata for InputOrigin?);
          uint64_t v131 = *(void **)(v73 + v86[17]);
          *(void *)((char *)v41 + v51[18]) = v131;
          *((unsigned char *)v41 + v51[20]) = *(unsigned char *)(v73 + v86[18]);
          *((unsigned char *)v41 + v51[15]) = *(unsigned char *)(v73 + v86[9]);
          *((unsigned char *)v41 + v51[16]) = *(unsigned char *)(v73 + v86[10]);
          os_log_type_t v132 = (uint64_t *)(v73 + v86[19]);
          uint64_t v133 = *v132;
          uint64_t v134 = v132[1];
          uint64_t v135 = (void *)((char *)v41 + v51[21]);
          *uint64_t v135 = v133;
          v135[1] = v134;
          *(void *)((char *)v41 + v51[22]) = *(void *)(v73 + v86[20]);
          outlined init with copy of MediaUserStateCenter?(v73 + v86[5], (uint64_t)v41 + v51[6], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
          char v136 = *(unsigned char *)(v73 + v86[21]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v137 = v131;
          _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v73, type metadata accessor for PommesSearchRequest.Builder);
          *((unsigned char *)v41 + v51[17]) = v136;
          uint64_t v138 = v164;
          _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0((uint64_t)v41, v164, type metadata accessor for PommesSearchRequest);
          (*(void (**)(uint64_t, void, uint64_t, int *))(v163 + 56))(v138, 0, 1, v51);
          return _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v41, type metadata accessor for PommesSearchRequest);
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v140 = type metadata accessor for Logger();
        __swift_project_value_buffer(v140, (uint64_t)static Logger.pommes);
        uint64_t v141 = Logger.logObject.getter();
        os_log_type_t v142 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v141, v142))
        {
          uint64_t v143 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v143 = 0;
          _os_log_impl(&dword_1C8F83000, v141, v142, "Attempting to create a PommesSearchRequest without a requestContext", v143, 2u);
          MEMORY[0x1CB77E470](v143, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v145 + 8))(v161, v146);
        _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v73, type metadata accessor for PommesSearchRequest.Builder);
        _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v41, type metadata accessor for PommesSearchRequest.ParseState);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?((uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        goto LABEL_44;
      }
      uint64_t v117 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v118 = *(void *)(v117 - 8);
      uint64_t v105 = (uint64_t)v147;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v147, v102, v117);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v105, 0, 1, v117);
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  outlined destroy of MediaUserStateCenter?((uint64_t)v31, &demangling cache variable for type metadata for PommesCandidateId?);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.fault.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v51 = v159;
  uint64_t v50 = (uint64_t)v160;
  if (v49)
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl(&dword_1C8F83000, v47, v48, "Attempting to create a PommesSearchRequest without a candidateId", v52, 2u);
    MEMORY[0x1CB77E470](v52, -1, -1);
  }

  _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(v50, type metadata accessor for PommesSearchRequest.Builder);
LABEL_44:
  swift_bridgeObjectRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v163 + 56))(v164, 1, 1, v51);
}

uint64_t PommesSearchRequest.Builder.utterance.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.utterance.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *id v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.utterance.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.rewriteMessage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
}

uint64_t PommesSearchRequest.Builder.rewriteMessage.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
}

uint64_t (*PommesSearchRequest.Builder.rewriteMessage.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.candidateId.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.rewriteMessage.getter(type metadata accessor for PommesSearchRequest.Builder, &demangling cache variable for type metadata for PommesCandidateId?, a1);
}

uint64_t PommesSearchRequest.rewriteMessage.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return outlined init with copy of MediaUserStateCenter?(v3 + *(int *)(v6 + 24), a3, a2);
}

uint64_t PommesSearchRequest.Builder.candidateId.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for PommesCandidateId?);
}

uint64_t (*PommesSearchRequest.Builder.candidateId.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.rootRequestId.getter()
{
  return PommesSearchRequest.assistantId.getter(type metadata accessor for PommesSearchRequest.Builder);
}

uint64_t PommesSearchRequest.assistantId.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesSearchRequest.Builder.rootRequestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.rootRequestId.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.requestContext.getter()
{
  type metadata accessor for PommesSearchRequest.Builder(0);

  return swift_retain();
}

uint64_t PommesSearchRequest.Builder.requestContext.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 32);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.requestContext.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isMultiUser.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 36));
}

uint64_t PommesSearchRequest.Builder.isMultiUser.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isMultiUser.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isOnlyUserInHome.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 40));
}

uint64_t PommesSearchRequest.Builder.isOnlyUserInHome.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isOnlyUserInHome.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.delegatedUDA.getter(type metadata accessor for PommesSearchRequest.Builder, &demangling cache variable for type metadata for PommesContext?, a1);
}

uint64_t PommesSearchRequest.delegatedUDA.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return outlined init with copy of MediaUserStateCenter?(v3 + *(int *)(v6 + 44), a3, a2);
}

uint64_t PommesSearchRequest.Builder.pommesContext.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 44), &demangling cache variable for type metadata for PommesContext?);
}

uint64_t (*PommesSearchRequest.Builder.pommesContext.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 48), a1, &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t PommesSearchRequest.Builder.inputOrigin.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 48), &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t (*PommesSearchRequest.Builder.inputOrigin.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.parseResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 52), a1, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
}

uint64_t PommesSearchRequest.Builder.parseResponse.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 52), (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
}

uint64_t (*PommesSearchRequest.Builder.parseResponse.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.userParses.getter()
{
  type metadata accessor for PommesSearchRequest.Builder(0);

  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.Builder.userParses.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 56);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.userParses.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 60), a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

uint64_t PommesSearchRequest.Builder.fallbackParse.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 60), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

uint64_t (*PommesSearchRequest.Builder.fallbackParse.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.responseVariantResult.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.responseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.responseVariantResult.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

void *PommesSearchRequest.Builder.asrSpeechPackage.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 68));
  id v2 = v1;
  return v1;
}

void PommesSearchRequest.Builder.asrSpeechPackage.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 68);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*PommesSearchRequest.Builder.asrSpeechPackage.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isFallback.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 72));
}

uint64_t PommesSearchRequest.Builder.isFallback.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isFallback.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.sharedUserId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.sharedUserId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 76));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.sharedUserId.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.userIdentityClassification.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 80));
}

uint64_t PommesSearchRequest.Builder.userIdentityClassification.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(void *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.userIdentityClassification.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isGestureBased.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 84));
}

uint64_t PommesSearchRequest.Builder.isGestureBased.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(unsigned char *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isGestureBased.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v108);
  uint64_t v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v107);
  uint64_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v105 - v13;
  uint64_t v15 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (uint64_t *)((char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, (uint64_t)v20, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v109 = v4;
  uint64_t v110 = v2;
  int v106 = v6;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v22 = *v20;
      uint64_t v23 = (void *)v20[1];
      swift_bridgeObjectRelease();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)v20 + *(int *)(v24 + 64), (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v113[0] = 0;
      v113[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v113[0] = 0xD000000000000010;
      v113[1] = 0x80000001C91A4020;
      v25._uint64_t countAndFlagsBits = v22;
      v25._object = v23;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      uint64_t v26 = (void *)v113[1];
      uint64_t v105 = v113[0];
      v113[0] = 0;
      v113[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v113[0] = 0xD000000000000010;
      v113[1] = 0x80000001C91A4040;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v27 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v12, 1, v27) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v29 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v47 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v27);
        uint64_t v29 = NLParseResponse.userParses.getter();
      }
      os_log_type_t v48 = *(void **)(v29 + 16);
      swift_bridgeObjectRelease();
      id v111 = v48;
      v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      v50._uint64_t countAndFlagsBits = 0x2973286D65746920;
      v50._object = (void *)0xE900000000000029;
      String.append(_:)(v50);
      uint64_t v38 = v113[0];
      uint64_t v37 = (void *)v113[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v34 = v105;
    }
    else
    {
      uint64_t v39 = *v20;
      uint64_t v40 = (void *)v20[1];
      uint64_t v41 = v20[2];
      uint64_t v42 = (uint64_t)v20
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      strcpy((char *)v113, "refId: ");
      v113[1] = 0xE700000000000000;
      v43._uint64_t countAndFlagsBits = v39;
      v43._object = v40;
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v34 = v113[0];
      uint64_t v26 = (void *)v113[1];
      v113[0] = 0;
      v113[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      strcpy((char *)v113, "userParses: (");
      HIWORD(v113[1]) = -4864;
      uint64_t v44 = *(void **)(v41 + 16);
      swift_bridgeObjectRelease();
      id v111 = v44;
      v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._uint64_t countAndFlagsBits = 0x7328736D65746920;
      v46._object = (void *)0xEA00000000002929;
      String.append(_:)(v46);
      uint64_t v38 = v113[0];
      uint64_t v37 = (void *)v113[1];
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    uint64_t v30 = *v20;
    uint64_t v31 = (void *)v20[1];
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)v20 + *(int *)(v32 + 48), (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    v113[0] = 0;
    v113[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v113[0] = 0xD000000000000013;
    v113[1] = 0x80000001C91A4060;
    v33._uint64_t countAndFlagsBits = v30;
    v33._object = v31;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = v113[0];
    uint64_t v26 = (void *)v113[1];
    v113[0] = 0;
    v113[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v113, "userParses: (");
    HIWORD(v113[1]) = -4864;
    v35._uint64_t countAndFlagsBits = NLXResultCandidate.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 41;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    uint64_t v38 = v113[0];
    uint64_t v37 = (void *)v113[1];
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  v113[0] = 0;
  v113[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(252);
  v51._uint64_t countAndFlagsBits = 0x636E617265747475;
  v51._object = (void *)0xEC00000022203A65;
  String.append(_:)(v51);
  uint64_t v52 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v53 = (uint64_t *)(v1 + v52[5]);
  uint64_t v55 = *v53;
  uint64_t v54 = (void *)v53[1];
  swift_bridgeObjectRetain();
  v56._uint64_t countAndFlagsBits = v55;
  v56._object = v54;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 0x6575716572202C22;
  v57._object = (void *)0xEE00203A64497473;
  String.append(_:)(v57);
  uint64_t v58 = v1 + v52[8];
  uint64_t v59 = *(void *)(v58 + 8);
  id v111 = *(id *)v58;
  uint64_t v112 = v59;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v60._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 8236;
  v61._object = (void *)0xE200000000000000;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = v34;
  v62._object = v26;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v63._object = (void *)0x80000001C91A3F20;
  v63._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v63);
  outlined init with copy of MediaUserStateCenter?(v1 + v52[10], (uint64_t)v8, &demangling cache variable for type metadata for PommesContext?);
  v64._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._object = (void *)0x80000001C91A3F40;
  v65._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v65);
  outlined init with copy of MediaUserStateCenter?(v1 + v52[11], (uint64_t)v106, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v66._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 2108450;
  v67._object = (void *)0xE300000000000000;
  String.append(_:)(v67);
  v68._uint64_t countAndFlagsBits = v38;
  v68._object = v37;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v69._uint64_t countAndFlagsBits = 0x6F6353637370202CLL;
  v69._object = (void *)0xED000022203A6572;
  String.append(_:)(v69);
  v70._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  v71._object = (void *)0x80000001C91A3F60;
  v71._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v71);
  uint64_t v72 = v1 + v52[7];
  uint64_t v73 = *(void *)(v72 + 8);
  id v111 = *(id *)v72;
  uint64_t v112 = v73;
  swift_bridgeObjectRetain();
  v74._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v75._uint64_t countAndFlagsBits = 0x4F7475706E69202CLL;
  v75._object = (void *)0xEF203A6E69676972;
  String.append(_:)(v75);
  outlined init with copy of MediaUserStateCenter?(v1 + v52[14], (uint64_t)v109, &demangling cache variable for type metadata for InputOrigin?);
  v76._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  v77._uint64_t countAndFlagsBits = 0x746C754D7369202CLL;
  v77._object = (void *)0xEF203A7265735569;
  String.append(_:)(v77);
  if (*(unsigned char *)(v1 + v52[15])) {
    uint64_t v78 = 1702195828;
  }
  else {
    uint64_t v78 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v52[15])) {
    unint64_t v79 = 0xE400000000000000;
  }
  else {
    unint64_t v79 = 0xE500000000000000;
  }
  unint64_t v80 = v79;
  String.append(_:)(*(Swift::String *)&v78);
  swift_bridgeObjectRelease();
  v81._uint64_t countAndFlagsBits = 0xD000000000000012;
  v81._object = (void *)0x80000001C91A3F80;
  String.append(_:)(v81);
  uint64_t v82 = *(void *)(v1 + v52[13]);
  if (v82)
  {
    uint64_t v83 = (void *)(*(uint64_t (**)(void))(*(void *)v82 + 240))();
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
  }
  id v111 = v83;
  uint64_t v112 = v84;
  v85._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 0xD000000000000014;
  v86._object = (void *)0x80000001C91A3FA0;
  String.append(_:)(v86);
  id v111 = *(id *)(v1 + v52[18]);
  id v87 = v111;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFSpeechPackage?);
  v88._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._uint64_t countAndFlagsBits = 0x6C6C61467369202CLL;
  v89._object = (void *)0xEE00203A6B636162;
  String.append(_:)(v89);
  if (*(unsigned char *)(v1 + v52[20])) {
    uint64_t v90 = 1702195828;
  }
  else {
    uint64_t v90 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v52[20])) {
    unint64_t v91 = 0xE400000000000000;
  }
  else {
    unint64_t v91 = 0xE500000000000000;
  }
  unint64_t v92 = v91;
  String.append(_:)(*(Swift::String *)&v90);
  swift_bridgeObjectRelease();
  v93._object = (void *)0x80000001C91A3FC0;
  v93._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v93);
  if (*(void *)(v1 + v52[21] + 8)) {
    unint64_t v94 = 0xD000000000000011;
  }
  else {
    unint64_t v94 = 7104878;
  }
  if (*(void *)(v1 + v52[21] + 8)) {
    unint64_t v95 = 0x80000001C91A4000;
  }
  else {
    unint64_t v95 = 0xE300000000000000;
  }
  unint64_t v96 = v95;
  String.append(_:)(*(Swift::String *)&v94);
  swift_bridgeObjectRelease();
  v97._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v97._object = (void *)0x80000001C91A3FE0;
  String.append(_:)(v97);
  id v98 = (id)AFUserIdentityClassficationGetName();
  if (v98)
  {
    uint64_t v99 = v98;
    unint64_t v100 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v102 = v101;
  }
  else
  {
    unint64_t v100 = 0;
    uint64_t v102 = 0;
  }
  id v111 = v100;
  uint64_t v112 = v102;
  v103._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  return v113[0];
}

Swift::String_optional __swiftcall PommesSearchRequest.aceReferenceID()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v3 + 36));
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, (uint64_t)v5, type metadata accessor for PommesSearchRequest);
  if (v8)
  {
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v10 = (uint64_t *)&v5[*(int *)(v2 + 32)];
    uint64_t v7 = *v10;
    uint64_t v9 = (void *)v10[1];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v5, type metadata accessor for PommesSearchRequest);
  uint64_t v11 = v7;
  uint64_t v12 = v9;
  result.value._object = v12;
  result.value._uint64_t countAndFlagsBits = v11;
  return result;
}

uint64_t type metadata accessor for PommesSearchRequest.Builder(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest.Builder);
}

uint64_t _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for PommesSearchRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v17 = a2[1];
    *a1 = *a2;
    a1[1] = v17;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v19 = *(int *)(v18 + 64);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v35 = *(int *)(v18 + 80);
    Swift::String v36 = (char *)a1 + v35;
    uint64_t v37 = (char *)a2 + v35;
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v25 = a2[1];
    *a1 = *a2;
    a1[1] = v25;
    swift_bridgeObjectRetain();
    uint64_t v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    *(void *)((char *)a1 + v26) = *(void *)((char *)a2 + v26);
    uint64_t v95 = type metadata accessor for NLXResultCandidate();
    unint64_t v96 = v27;
    uint64_t v29 = *(int *)(v95 + 20);
    __dst = &v27[v29];
    uint64_t v30 = &v28[v29];
    uint64_t v31 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v32 = *(void *)(v31 - 8);
    Swift::String v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
    }
    uint64_t v38 = *(int *)(v95 + 24);
    Swift::String v36 = &v96[v38];
    uint64_t v37 = &v28[v38];
LABEL_16:
    uint64_t v39 = *((void *)v37 + 1);
    *(void *)Swift::String v36 = *(void *)v37;
    *((void *)v36 + 1) = v39;
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  uint64_t v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
LABEL_17:
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = a3[5];
  uint64_t v41 = a3[6];
  uint64_t v42 = (void *)((char *)a1 + v40);
  Swift::String v43 = (void *)((char *)a2 + v40);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  Swift::String v45 = (char *)a1 + v41;
  Swift::String v46 = (char *)a2 + v41;
  uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v48 = *(void *)(v47 - 8);
  Swift::String v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  uint64_t v51 = a3[7];
  uint64_t v52 = a3[8];
  uint64_t v53 = (void *)((char *)a1 + v51);
  uint64_t v54 = (void *)((char *)a2 + v51);
  uint64_t v55 = v54[1];
  void *v53 = *v54;
  v53[1] = v55;
  Swift::String v56 = (void *)((char *)a1 + v52);
  Swift::String v57 = (void *)((char *)a2 + v52);
  uint64_t v58 = v57[1];
  *Swift::String v56 = *v57;
  v56[1] = v58;
  uint64_t v59 = a3[9];
  uint64_t v60 = a3[10];
  Swift::String v61 = (void *)((char *)a1 + v59);
  Swift::String v62 = (void *)((char *)a2 + v59);
  uint64_t v63 = v62[1];
  *Swift::String v61 = *v62;
  v61[1] = v63;
  Swift::String v97 = (char *)a1 + v60;
  id v98 = a3;
  Swift::String v64 = (char *)a2 + v60;
  uint64_t v65 = type metadata accessor for PommesContext();
  uint64_t v66 = *(void *)(v65 - 8);
  Swift::String v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v67(v64, 1, v65))
  {
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v97, v64, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v97, v64, v65);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v97, 0, 1, v65);
  }
  uint64_t v69 = v98[11];
  Swift::String v70 = (char *)a1 + v69;
  Swift::String v71 = (char *)a2 + v69;
  uint64_t v72 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v73 = *(void *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
  {
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  }
  uint64_t v75 = v98[13];
  *(void *)((char *)a1 + v98[12]) = *(void *)((char *)a2 + v98[12]);
  *(void *)((char *)a1 + v75) = *(void *)((char *)a2 + v75);
  uint64_t v76 = v98[14];
  Swift::String v77 = (char *)a1 + v76;
  uint64_t v78 = (char *)a2 + v76;
  uint64_t v79 = type metadata accessor for InputOrigin();
  uint64_t v80 = *(void *)(v79 - 8);
  Swift::String v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
  swift_retain();
  if (v81(v78, 1, v79))
  {
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v77, v78, *(void *)(*(void *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  uint64_t v83 = v98[16];
  *((unsigned char *)a1 + v98[15]) = *((unsigned char *)a2 + v98[15]);
  *((unsigned char *)a1 + v83) = *((unsigned char *)a2 + v83);
  uint64_t v84 = v98[18];
  *((unsigned char *)a1 + v98[17]) = *((unsigned char *)a2 + v98[17]);
  Swift::String v85 = *(void **)((char *)a2 + v84);
  *(void *)((char *)a1 + v84) = v85;
  uint64_t v86 = v98[20];
  *(void *)((char *)a1 + v98[19]) = *(void *)((char *)a2 + v98[19]);
  *((unsigned char *)a1 + v86) = *((unsigned char *)a2 + v86);
  uint64_t v87 = v98[21];
  uint64_t v88 = v98[22];
  Swift::String v89 = (void *)((char *)a1 + v87);
  uint64_t v90 = (void *)((char *)a2 + v87);
  uint64_t v91 = v90[1];
  *Swift::String v89 = *v90;
  v89[1] = v91;
  *(void *)((char *)a1 + v88) = *(void *)((char *)a2 + v88);
  *(void *)((char *)a1 + v98[23]) = *(void *)((char *)a2 + v98[23]);
  id v92 = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PommesSearchRequest(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)a1, type metadata accessor for PommesSearchRequest.ParseState);
    type metadata accessor for PommesSearchRequest.ParseState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v14 = *(int *)(v13 + 64);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v29 = *(int *)(v13 + 80);
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                    + 64);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for TCUMappedNLResponse();
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        goto LABEL_16;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
      uint64_t v89 = type metadata accessor for NLXResultCandidate();
      uint64_t v90 = v21;
      uint64_t v23 = *(int *)(v89 + 20);
      __dst = &v21[v23];
      uint64_t v24 = &v22[v23];
      uint64_t v25 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      if (v27(v24, 1, v25))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      uint64_t v32 = *(int *)(v89 + 24);
      uint64_t v30 = &v90[v32];
      uint64_t v31 = &v22[v32];
    }
    *(void *)uint64_t v30 = *(void *)v31;
    *((void *)v30 + 1) = *((void *)v31 + 1);
    swift_bridgeObjectRetain();
LABEL_16:
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v33 = a3[5];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[6];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_22:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_23:
  uint64_t v45 = a3[7];
  Swift::String v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  *Swift::String v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[8];
  Swift::String v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  *Swift::String v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[9];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (void *)((char *)a2 + v51);
  void *v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[10];
  uint64_t v55 = (char *)a1 + v54;
  Swift::String v56 = (char *)a2 + v54;
  uint64_t v57 = type metadata accessor for PommesContext();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  int v60 = v59(v55, 1, v57);
  int v61 = v59(v56, 1, v57);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v57);
LABEL_28:
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v55, v56, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v55, v56, v57);
LABEL_29:
  uint64_t v63 = a3[11];
  Swift::String v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  uint64_t v66 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
LABEL_34:
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v64, v65, v66);
LABEL_35:
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_retain();
  swift_release();
  uint64_t v72 = a3[14];
  uint64_t v73 = (char *)a1 + v72;
  uint64_t v74 = (char *)a2 + v72;
  uint64_t v75 = type metadata accessor for InputOrigin();
  uint64_t v76 = *(void *)(v75 - 8);
  Swift::String v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 24))(v73, v74, v75);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v73, v75);
    goto LABEL_40;
  }
  if (v79)
  {
LABEL_40:
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v73, v74, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_41:
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  uint64_t v81 = a3[18];
  uint64_t v82 = *(void **)((char *)a1 + v81);
  uint64_t v83 = *(void **)((char *)a2 + v81);
  *(void *)((char *)a1 + v81) = v83;
  id v84 = v83;

  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  uint64_t v85 = a3[21];
  uint64_t v86 = (void *)((char *)a1 + v85);
  uint64_t v87 = (void *)((char *)a2 + v85);
  *uint64_t v86 = *v87;
  v86[1] = v87[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[22]) = *(void *)((char *)a2 + a3[22]);
  *(void *)((char *)a1 + a3[23]) = *(void *)((char *)a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PommesSearchRequest(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v15 = *(int *)(v14 + 64);
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    uint64_t v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_OWORD *)(a1 + *(int *)(v14 + 80)) = *(_OWORD *)(a2 + *(int *)(v14 + 80));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    uint64_t v22 = a1 + v21;
    uint64_t v23 = a2 + v21;
    *(void *)(a1 + v21) = *(void *)(a2 + v21);
    uint64_t v24 = type metadata accessor for NLXResultCandidate();
    uint64_t v25 = *(int *)(v24 + 20);
    __dst = (void *)(v22 + v25);
    uint64_t v26 = (const void *)(v23 + v25);
    uint64_t v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(__dst, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  uint64_t v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v36 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  uint64_t v37 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  uint64_t v40 = type metadata accessor for PommesContext();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  uint64_t v43 = a3[11];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (const void *)(a2 + v43);
  uint64_t v46 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  uint64_t v49 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  uint64_t v50 = a3[14];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (const void *)(a2 + v50);
  uint64_t v53 = type metadata accessor for InputOrigin();
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 32))(v51, v52, v53);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t v56 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v56) = *(unsigned char *)(a2 + v56);
  uint64_t v57 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(void *)(a1 + v57) = *(void *)(a2 + v57);
  uint64_t v58 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v58) = *(unsigned char *)(a2 + v58);
  uint64_t v59 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(void *)(a1 + v59) = *(void *)(a2 + v59);
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  return a1;
}

uint64_t assignWithTake for PommesSearchRequest(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(a1, type metadata accessor for PommesSearchRequest.ParseState);
    type metadata accessor for PommesSearchRequest.ParseState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v15 = *(int *)(v14 + 64);
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (const void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      *(_OWORD *)(a1 + *(int *)(v14 + 80)) = *(_OWORD *)(a2 + *(int *)(v14 + 80));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (const void *)(a2 + v8);
      uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      uint64_t v22 = a1 + v21;
      uint64_t v23 = a2 + v21;
      *(void *)(a1 + v21) = *(void *)(a2 + v21);
      uint64_t v24 = type metadata accessor for NLXResultCandidate();
      uint64_t v25 = *(int *)(v24 + 20);
      __dst = (void *)(v22 + v25);
      uint64_t v26 = (const void *)(v23 + v25);
      uint64_t v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(__dst, v26, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
      }
      *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v30 = a3[5];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[6];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
LABEL_21:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v36, v37, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v36, v37, v38);
LABEL_22:
  uint64_t v44 = a3[7];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *uint64_t v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[8];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (uint64_t *)(a2 + v49);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  *uint64_t v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[9];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  *uint64_t v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[10];
  int v60 = (void *)(a1 + v59);
  int v61 = (void *)(a2 + v59);
  uint64_t v62 = type metadata accessor for PommesContext();
  uint64_t v63 = *(void *)(v62 - 8);
  Swift::String v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v63 + 8))(v60, v62);
LABEL_27:
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v60, v61, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_28:
  uint64_t v68 = a3[11];
  int v69 = (void *)(a1 + v68);
  int v70 = (void *)(a2 + v68);
  uint64_t v71 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  int v74 = v73(v69, 1, v71);
  int v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 32))(v69, v70, v71);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
LABEL_33:
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v69, v70, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 40))(v69, v70, v71);
LABEL_34:
  uint64_t v77 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v77) = *(void *)(a2 + v77);
  swift_release();
  uint64_t v78 = a3[14];
  int v79 = (void *)(a1 + v78);
  uint64_t v80 = (void *)(a2 + v78);
  uint64_t v81 = type metadata accessor for InputOrigin();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(void *, void *, uint64_t))(v82 + 40))(v79, v80, v81);
      goto LABEL_40;
    }
    (*(void (**)(void *, uint64_t))(v82 + 8))(v79, v81);
    goto LABEL_39;
  }
  if (v85)
  {
LABEL_39:
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v79, v80, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, void *, uint64_t))(v82 + 32))(v79, v80, v81);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
LABEL_40:
  uint64_t v87 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v87) = *(unsigned char *)(a2 + v87);
  uint64_t v88 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  uint64_t v89 = *(void **)(a1 + v88);
  *(void *)(a1 + v88) = *(void *)(a2 + v88);

  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[21];
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  uint64_t v91 = (void *)(a1 + v90);
  id v92 = (uint64_t *)(a2 + v90);
  uint64_t v94 = *v92;
  uint64_t v93 = v92[1];
  void *v91 = v94;
  v91[1] = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  *(void *)(a1 + v95) = *(void *)(a2 + v95);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C91560A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PommesSearchRequest.ParseState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[6];
LABEL_13:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_14;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[10];
    goto LABEL_13;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a3[11];
    goto LABEL_13;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[14];

  return v19(v21, a2, v20);
}

uint64_t sub_1C91562D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for PommesSearchRequest.ParseState(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_12:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_11:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_12;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[10];
    goto LABEL_11;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[11];
    goto LABEL_11;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[14];

  return v19(v21, a2, a2, v20);
}

void type metadata completion function for PommesSearchRequest()
{
  type metadata accessor for PommesSearchRequest.ParseState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, MEMORY[0x1E4F89498]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for PommesContext?, MEMORY[0x1E4F9FED8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, MEMORY[0x1E4FA2990]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for InputOrigin?, MEMORY[0x1E4FA51A0]);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PommesSearchRequest.ParseState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v18 = *(int *)(v17 + 64);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      uint64_t v35 = *(int *)(v17 + 80);
      uint64_t v36 = (uint64_t *)((char *)a1 + v35);
      uint64_t v37 = (uint64_t *)((char *)a2 + v35);
      uint64_t v38 = v37[1];
      void *v36 = *v37;
      v36[1] = v38;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      uint64_t v10 = (char *)a1 + v9;
      unint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      uint64_t v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      swift_bridgeObjectRetain();
      uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for NLXResultCandidate();
      uint64_t v29 = *(int *)(v28 + 20);
      __dst = &v26[v29];
      uint64_t v45 = v28;
      uint64_t v30 = &v27[v29];
      uint64_t v31 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
      }
      uint64_t v39 = *(int *)(v45 + 24);
      uint64_t v40 = &v26[v39];
      int v41 = &v27[v39];
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PommesSearchRequest.ParseState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                + 64);
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
LABEL_9:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                + 48);
    swift_bridgeObjectRelease();
    uint64_t v4 = v3 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    uint64_t v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v10, v11);
  }
  return result;
}

void *assignWithCopy for PommesSearchRequest.ParseState(void *a1, void *a2)
{
  if (a1 != a2)
  {
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)a1, type metadata accessor for PommesSearchRequest.ParseState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v12 = *(int *)(v11 + 64);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      uint64_t v28 = *(int *)(v11 + 80);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                    + 64);
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = type metadata accessor for TCUMappedNLResponse();
        uint64_t v9 = *(void *)(v8 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        {
          uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
        }
        goto LABEL_16;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
      uint64_t v21 = type metadata accessor for NLXResultCandidate();
      uint64_t v22 = *(int *)(v21 + 20);
      uint64_t v33 = v21;
      __dst = &v19[v22];
      uint64_t v23 = &v20[v22];
      uint64_t v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      uint64_t v31 = *(int *)(v33 + 24);
      uint64_t v29 = &v19[v31];
      uint64_t v30 = &v20[v31];
    }
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = *((void *)v30 + 1);
    swift_bridgeObjectRetain();
LABEL_16:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PommesSearchRequest.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v13 = *(int *)(v12 + 64);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (const void *)(a2 + v13);
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_OWORD *)(a1 + *(int *)(v12 + 80)) = *(_OWORD *)(a2 + *(int *)(v12 + 80));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    *(void *)(a1 + v19) = *(void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for NLXResultCandidate();
    uint64_t v23 = *(int *)(v22 + 20);
    uint64_t v24 = (void *)(v20 + v23);
    uint64_t v25 = (const void *)(v21 + v23);
    uint64_t v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    *(_OWORD *)(v20 + *(int *)(v22 + 24)) = *(_OWORD *)(v21 + *(int *)(v22 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PommesSearchRequest.ParseState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0(a1, type metadata accessor for PommesSearchRequest.ParseState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      uint64_t v13 = *(int *)(v12 + 64);
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (const void *)(a2 + v13);
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      *(_OWORD *)(a1 + *(int *)(v12 + 80)) = *(_OWORD *)(a2 + *(int *)(v12 + 80));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      uint64_t v7 = (void *)(a1 + v6);
      uint64_t v8 = (const void *)(a2 + v6);
      uint64_t v9 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      *(void *)(a1 + v19) = *(void *)(a2 + v19);
      uint64_t v22 = type metadata accessor for NLXResultCandidate();
      uint64_t v23 = *(int *)(v22 + 20);
      uint64_t v24 = (void *)(v20 + v23);
      uint64_t v25 = (const void *)(v21 + v23);
      uint64_t v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *(_OWORD *)(v20 + *(int *)(v22 + 24)) = *(_OWORD *)(v21 + *(int *)(v22 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for PommesSearchRequest.ParseState()
{
  type metadata accessor for NLXResultCandidate();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v5;
    type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, MEMORY[0x1E4FA25B0]);
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      uint64_t v7 = &v4;
      type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, MEMORY[0x1E4FA2990]);
      if (v2 <= 0x3F)
      {
        swift_getTupleTypeLayout();
        uint64_t v8 = &v3;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for PommesSearchRequest.Builder(void *a1, void *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *char v4 = *a2;
    char v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for PommesCandidateId();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = a3[7];
    uint64_t v23 = a3[8];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    *(void *)((char *)v4 + v23) = *(void *)((char *)a2 + v23);
    uint64_t v27 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v27) = *((unsigned char *)a2 + v27);
    uint64_t v28 = a3[11];
    __dst = (char *)v4 + v28;
    uint64_t v29 = (char *)a2 + v28;
    uint64_t v30 = type metadata accessor for PommesContext();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
      memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    uint64_t v34 = a3[12];
    uint64_t v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = type metadata accessor for InputOrigin();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v40 = a3[13];
    int v41 = (char *)v4 + v40;
    uint64_t v42 = (char *)a2 + v40;
    uint64_t v43 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    uint64_t v46 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(void *)((char *)a2 + a3[14]);
    uint64_t v47 = (char *)v4 + v46;
    uint64_t v48 = (char *)a2 + v46;
    uint64_t v49 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v48, 1, v49))
    {
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    uint64_t v53 = a3[16];
    uint64_t v54 = a3[17];
    uint64_t v55 = (void *)((char *)v4 + v53);
    uint64_t v56 = (void *)((char *)a2 + v53);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = *(void **)((char *)a2 + v54);
    *(void *)((char *)v4 + v54) = v58;
    uint64_t v59 = a3[19];
    *((unsigned char *)v4 + a3[18]) = *((unsigned char *)a2 + a3[18]);
    int v60 = (void *)((char *)v4 + v59);
    int v61 = (void *)((char *)a2 + v59);
    uint64_t v62 = v61[1];
    void *v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = a3[21];
    *(void *)((char *)v4 + a3[20]) = *(void *)((char *)a2 + a3[20]);
    *((unsigned char *)v4 + v63) = *((unsigned char *)a2 + v63);
    swift_bridgeObjectRetain();
    id v64 = v58;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PommesSearchRequest.Builder(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for PommesCandidateId();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v10 = a1 + a2[11];
  uint64_t v11 = type metadata accessor for PommesContext();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v13 = a1 + a2[12];
  uint64_t v14 = type metadata accessor for InputOrigin();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = a1 + a2[13];
  uint64_t v17 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = a1 + a2[15];
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v21 = *(void *)(v20 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PommesSearchRequest.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for PommesCandidateId();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v20);
  uint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  uint64_t v25 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
  uint64_t v26 = a3[11];
  __dst = (char *)a1 + v26;
  uint64_t v27 = (char *)a2 + v26;
  uint64_t v28 = type metadata accessor for PommesContext();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v30(v27, 1, v28))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
  }
  uint64_t v32 = a3[12];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for InputOrigin();
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v38 = a3[13];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  uint64_t v44 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  if (v49(v46, 1, v47))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  uint64_t v51 = a3[16];
  uint64_t v52 = a3[17];
  uint64_t v53 = (void *)((char *)a1 + v51);
  uint64_t v54 = (void *)((char *)a2 + v51);
  uint64_t v55 = v54[1];
  void *v53 = *v54;
  v53[1] = v55;
  uint64_t v56 = *(void **)((char *)a2 + v52);
  *(void *)((char *)a1 + v52) = v56;
  uint64_t v57 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = a3[21];
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  *((unsigned char *)a1 + v61) = *((unsigned char *)a2 + v61);
  swift_bridgeObjectRetain();
  id v62 = v56;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PommesSearchRequest.Builder(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for PommesCandidateId();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  uint64_t v24 = a3[7];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v27 = a3[11];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for PommesContext();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_18:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_19:
  uint64_t v36 = a3[12];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for InputOrigin();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_24:
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_25:
  uint64_t v45 = a3[13];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_30:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v46, v47, v48);
LABEL_31:
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[15];
  uint64_t v55 = (char *)a1 + v54;
  uint64_t v56 = (char *)a2 + v54;
  uint64_t v57 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  int v60 = v59(v55, 1, v57);
  int v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v55, v56, v57);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v57);
    goto LABEL_36;
  }
  if (v61)
  {
LABEL_36:
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v55, v56, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
LABEL_37:
  uint64_t v63 = a3[16];
  id v64 = (void *)((char *)a1 + v63);
  int v65 = (void *)((char *)a2 + v63);
  *id v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[17];
  uint64_t v67 = *(void **)((char *)a1 + v66);
  uint64_t v68 = *(void **)((char *)a2 + v66);
  *(void *)((char *)a1 + v66) = v68;
  id v69 = v68;

  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  uint64_t v70 = a3[19];
  uint64_t v71 = (void *)((char *)a1 + v70);
  uint64_t v72 = (void *)((char *)a2 + v70);
  *uint64_t v71 = *v72;
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  *((unsigned char *)a1 + a3[21]) = *((unsigned char *)a2 + a3[21]);
  return a1;
}

_OWORD *initializeWithTake for PommesSearchRequest.Builder(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for PommesCandidateId();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  uint64_t v20 = a3[11];
  int v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for PommesContext();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for InputOrigin();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v32 = a3[13];
  int v33 = (char *)a1 + v32;
  int v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v38 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  uint64_t v44 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(void *)((char *)a1 + v44) = *(void *)((char *)a2 + v44);
  uint64_t v45 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v45) = *(_OWORD *)((char *)a2 + v45);
  uint64_t v46 = a3[21];
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  *((unsigned char *)a1 + v46) = *((unsigned char *)a2 + v46);
  return a1;
}

void *assignWithTake for PommesSearchRequest.Builder(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for PommesCandidateId();
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  uint64_t v25 = a3[7];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  uint64_t v30 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  uint64_t v31 = a3[11];
  uint64_t v32 = (char *)a1 + v31;
  int v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for PommesContext();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
LABEL_18:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v32, v33, v34);
LABEL_19:
  uint64_t v40 = a3[12];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  uint64_t v43 = type metadata accessor for InputOrigin();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
LABEL_24:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v41, v42, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v41, v42, v43);
LABEL_25:
  uint64_t v49 = a3[13];
  uint64_t v50 = (char *)a1 + v49;
  int v51 = (char *)a2 + v49;
  uint64_t v52 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_30:
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v50, v51, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_31:
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[15];
  uint64_t v59 = (char *)a1 + v58;
  int v60 = (char *)a2 + v58;
  uint64_t v61 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  int v64 = v63(v59, 1, v61);
  int v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
    goto LABEL_36;
  }
  if (v65)
  {
LABEL_36:
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
LABEL_37:
  uint64_t v67 = a3[16];
  uint64_t v68 = (void *)((char *)a1 + v67);
  id v69 = (void *)((char *)a2 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  void *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[17];
  uint64_t v73 = *(void **)((char *)a1 + v72);
  *(void *)((char *)a1 + v72) = *(void *)((char *)a2 + v72);

  uint64_t v74 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  int v75 = (void *)((char *)a1 + v74);
  uint64_t v76 = (void *)((char *)a2 + v74);
  uint64_t v78 = *v76;
  uint64_t v77 = v76[1];
  *int v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = a3[21];
  *(void *)((char *)a1 + a3[20]) = *(void *)((char *)a2 + a3[20]);
  *((unsigned char *)a1 + v79) = *((unsigned char *)a2 + v79);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequest.Builder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C915A394);
}

uint64_t sub_1C915A394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_11:
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v14(a1 + v9, a2, v7);
  }
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_11;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[11];
    goto LABEL_11;
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v7 = v12;
    uint64_t v8 = *(void *)(v12 - 8);
    uint64_t v9 = a3[12];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v7 = v13;
    uint64_t v8 = *(void *)(v13 - 8);
    uint64_t v9 = a3[13];
    goto LABEL_11;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v16 = *(void *)(a1 + a3[14]);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    return (v16 + 1);
  }
  else
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a3[15];
    return v18(v20, a2, v19);
  }
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequest.Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C915A620);
}

uint64_t sub_1C915A620(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_11:
    unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v16(a1 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_11;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[12];
    goto LABEL_11;
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[13];
    goto LABEL_11;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[14]) = (a2 - 1);
  }
  else
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a4[15];
    return v18(v20, a2, a2, v19);
  }
  return result;
}

void type metadata completion function for PommesSearchRequest.Builder()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, MEMORY[0x1E4F89498]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for PommesCandidateId?, MEMORY[0x1E4F9FE60]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for PommesContext?, MEMORY[0x1E4F9FED8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, &lazy cache variable for type metadata for InputOrigin?, MEMORY[0x1E4FA51A0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, MEMORY[0x1E4FA25B0]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, MEMORY[0x1E4FA2990]);
            if (v5 <= 0x3F) {
              swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  type metadata accessor for PommesResponse();
  unint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    unint64_t v16 = v19;
    void v19[2] = v12;
    void v19[3] = v14;
  }
  v18[1] = 1;
  void v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
  unint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    unint64_t v16 = v19;
    void v19[2] = v12;
    void v19[3] = v14;
  }
  v18[1] = 1;
  void v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t PommesLocationInfo.init(location:accuracyAuthorization:locationNeedsUpdateForAccuracy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

unint64_t LocationStatus.description.getter()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000011;
  uint64_t v3 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(v1, (uint64_t)v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                      + 48)];
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      unint64_t v2 = 0x676E69646E65702ELL;
      break;
    case 2u:
      return v2;
    case 3u:
      unint64_t v2 = 0xD000000000000015;
      break;
    case 4u:
      unint64_t v2 = 0x6C696176616E752ELL;
      break;
    case 5u:
      unint64_t v2 = 0x6E776F6E6B6E752ELL;
      break;
    default:
      outlined destroy of LocationStatus((uint64_t)v5, type metadata accessor for LocationStatus);
      unint64_t v2 = 0xD00000000000001ELL;
      break;
  }
  return v2;
}

uint64_t type metadata accessor for LocationStatus(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for LocationStatus);
}

id PommesLocationInfo.location.getter()
{
  return *v0;
}

uint64_t PommesLocationInfo.accuracyAuthorization.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PommesLocationInfo.locationNeedsUpdateForAccuracy.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void PommesLocationInfo.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 16);
  id v3 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t static PommesLocationInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & (v2 == v4) & (v3 ^ v5 ^ 1);
}

Swift::Int PommesLocationInfo.hashValue.getter()
{
  uint64_t v2 = *(void **)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesLocationInfo()
{
  uint64_t v2 = *(void **)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PommesLocationInfo()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 16);
  id v3 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesLocationInfo()
{
  Swift::UInt8 v2 = *(void **)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & (v2 == v4) & (v3 ^ v5 ^ 1);
}

BOOL static LocationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LocationError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int LocationError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static LocationShiftingError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LocationShiftingError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int LocationShiftingError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

id one-time initialization function for shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesLocationManager(0)), sel_init);
  static PommesLocationManager.shared = (uint64_t)result;
  return result;
}

id PommesLocationManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id static PommesLocationManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static PommesLocationManager.shared;

  return v0;
}

id PommesLocationManager.locationShifter.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F64670]), sel_init);
    int v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t PommesLocationManager.locationShifter.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PommesLocationManager.locationShifter.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = PommesLocationManager.locationShifter.getter();
  return PommesLocationManager.locationShifter.modify;
}

void PommesLocationManager.locationShifter.modify(uint64_t *a1, uint64_t a2)
{
}

id PommesLocationManager.locationShiftQueue.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v5 = type metadata accessor for DispatchQoS();
    v14[0] = v14;
    MEMORY[0x1F4188790](v5 - 8);
    static DispatchQoS.userInitiated.getter();
    uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
    MEMORY[0x1F4188790](v6);
    v14[1] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    MEMORY[0x1F4188790](v7);
    (*(void (**)(char *, void))(v9 + 104))((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
    uint64_t v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v11 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v10;
    id v3 = v10;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

uint64_t PommesLocationManager.locationShiftQueue.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PommesLocationManager.locationShiftQueue.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = PommesLocationManager.locationShiftQueue.getter();
  return PommesLocationManager.locationShiftQueue.modify;
}

void PommesLocationManager.locationShiftQueue.modify(uint64_t *a1, uint64_t a2)
{
}

void PommesLocationManager.locationShifter.modify(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(void **)(v3 + *a3);
  *(void *)(v3 + *a3) = v4;
}

id PommesLocationManager.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter] = 0;
  *(void *)&v0[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue] = 0;
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v19 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v5);
  (*(void (**)(char *, void))(v7 + 104))((char *)&ObjectType - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)&v0[v1] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LocationStatus(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusPassthrough;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
  swift_allocObject();
  *(void *)&v3[v8] = PassthroughSubject.init()();
  *(void *)&v3[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher] = 0;
  *(void *)&v3[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait] = 0x4020000000000000;
  *(void *)&v3[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager] = 0;

  v18.receiver = v3;
  v18.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v18, sel_init);
  uint64_t v10 = one-time initialization token for pommes;
  id v11 = v9;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C8F83000, v13, v14, "PommesLocationManager init successfully", v15, 2u);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }

  return v11;
}

void PommesLocationManager.status.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  id v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();
}

void key path getter for PommesLocationManager.status : PommesLocationManager(void *a1)
{
  uint64_t v1 = *(void **)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  id v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t key path setter for PommesLocationManager.status : PommesLocationManager(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a1, (uint64_t)v4);
  return PommesLocationManager.status.setter((uint64_t)v4);
}

uint64_t PommesLocationManager.status.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocationStatus(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6 - 8);
  id v9 = *(void **)&v1[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue];
  outlined init with copy of LocationStatus(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  outlined init with take of LocationStatus((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in PommesLocationManager.status.setter;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  uint64_t v13 = _Block_copy(aBlock);
  os_log_type_t v14 = v9;
  v1;
  swift_retain();
  swift_release();
  dispatch_sync(v14, v13);

  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of LocationStatus(a1, (uint64_t)v5);
    swift_storeEnumTagMultiPayload();
    PassthroughSubject.send(_:)();
    outlined destroy of LocationStatus(a1, type metadata accessor for LocationStatus);
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PommesLocationManager.status.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager__status;
  swift_beginAccess();
  outlined assign with copy of LocationStatus(a2, v3);
  return swift_endAccess();
}

void (*PommesLocationManager.status.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for LocationStatus(0) - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  id v4 = *(id *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  OS_dispatch_queue.sync<A>(execute:)();

  return PommesLocationManager.status.modify;
}

void PommesLocationManager.status.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    outlined init with copy of LocationStatus((uint64_t)v3, (uint64_t)v2);
    PommesLocationManager.status.setter((uint64_t)v2);
    outlined destroy of LocationStatus((uint64_t)v3, type metadata accessor for LocationStatus);
  }
  else
  {
    PommesLocationManager.status.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t PommesLocationManager.statusPublisher.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Result<LocationStatus, LocationError>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t PommesLocationManager.statusPublisher.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = a1;
  return swift_release();
}

uint64_t (*PommesLocationManager.statusPublisher.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = PommesLocationManager.statusPublisher.getter();
  return PommesLocationManager.statusPublisher.modify;
}

uint64_t PommesLocationManager.statusPublisher.modify(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = *a1;
  return swift_release();
}

double PommesLocationManager.locationRequestDebounceWait.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PommesLocationManager.locationRequestDebounceWait.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*PommesLocationManager.locationRequestDebounceWait.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

id PommesLocationManager.manager.getter(uint64_t a1)
{
  void (*v11)(void **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, void (*)(void *@<X8>), void *, uint64_t);
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void v17[5];
  void *v18;

  uint64_t v2 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  if (v3)
  {
    id v4 = *(id *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  }
  else
  {
    uint64_t v5 = v1;
    if (one-time initialization token for shared != -1) {
      a1 = swift_once();
    }
    uint64_t v6 = static PerformanceUtil.shared;
    MEMORY[0x1F4188790](a1);
    v17[2] = v5;
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v7);
    unint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    uint64_t v11 = *(void (**)(void **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, void (*)(void *@<X8>), void *, uint64_t))(*(void *)v6 + 200);
    uint64_t v12 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocationManager);
    v11(&v18, 0xD00000000000002FLL, 0x80000001C91A40D0, 0, v10, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 157, "manager", 7, 2, partial apply for closure #1 in closure #1 in PommesLocationManager.manager.getter, v17, v12);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v13 = v18;
    os_log_type_t v14 = *(void **)(v5 + v2);
    *(void *)(v5 + v2) = v18;
    id v4 = v13;

    uint64_t v3 = 0;
  }
  uint64_t v15 = v3;
  return v4;
}

void key path setter for PommesLocationManager.manager : PommesLocationManager(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  id v4 = *(void **)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(void *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = *a1;
  id v5 = v2;

  id v7 = PommesLocationManager.manager.getter(v6);
  objc_msgSend(v7, sel_setDelegate_, v3);
}

void PommesLocationManager.manager.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = a1;
  id v3 = a1;

  id v5 = PommesLocationManager.manager.getter(v4);
  objc_msgSend(v5, sel_setDelegate_, v1);
}

void closure #1 in closure #1 in PommesLocationManager.manager.getter(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = (id)AFEffectiveSiriBundleForLocation();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v5 = (void *)static OS_dispatch_queue.main.getter();
  id v6 = objc_allocWithZone(MEMORY[0x1E4F1E608]);
  id v7 = a1;
  id v8 = objc_msgSend(v6, sel_initWithEffectiveBundle_delegate_onQueue_, v4, v7, v5);

  if (v8) {
    *a2 = v8;
  }
  else {
    __break(1u);
  }
}

void (*PommesLocationManager.manager.modify(id *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = PommesLocationManager.manager.getter((uint64_t)a1);
  return PommesLocationManager.manager.modify;
}

void PommesLocationManager.manager.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  id v5 = *(void **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = *(void *)a1;
  id v6 = v3;
  id v11 = v6;
  if (a2)
  {
    id v7 = v6;

    id v9 = PommesLocationManager.manager.getter(v8);
    objc_msgSend(v9, sel_setDelegate_, v4);
  }
  else
  {

    id v7 = PommesLocationManager.manager.getter(v10);
    objc_msgSend(v7, sel_setDelegate_, v4);
  }
}

uint64_t PommesLocationManager.fetchLocation()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  id v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  id v6 = v0;
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in PommesLocationManager.fetchLocation(), (uint64_t)v5);
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  v4[5] = type metadata accessor for LocationStatus(0);
  v4[6] = swift_task_alloc();
  v4[7] = type metadata accessor for PerformanceUtil.Ticket(0);
  v4[8] = swift_task_alloc();
  type metadata accessor for SignpostToken();
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PommesLocationManager.fetchLocation(), 0, 0);
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()()
{
  if (one-time initialization token for loc != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v3, (uint64_t)static Signposter.loc);
  uint64_t v4 = OSSignposter.begin(name:context:)("locationManager.startup", 23, 2u, v2, v1);
  id v5 = PommesLocationManager.manager.getter(v4);
  LODWORD(v2) = objc_msgSend(v5, sel_locationServicesAvailable);

  if (v2)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 32);
    id v7 = static PerformanceUtil.shared;
    uint64_t v8 = swift_task_alloc();
    *(void *)(v8 + 16) = v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = swift_task_alloc();
    Date.init()();
    (*(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, void (*)(uint64_t@<X0>, BOOL *@<X8>), uint64_t, void))(*(void *)v7 + 200))(0xD000000000000031, 0x80000001C91A43F0, 0, v11, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 176, "fetchLocation()", 15, 2, partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:), v8, MEMORY[0x1E4FBB390]);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v45 = v9;
    v12(v11, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    if (*(unsigned char *)(v0 + 80) == 1)
    {
      uint64_t v13 = *(void *)(v0 + 64);
      uint64_t v14 = *(void *)(v0 + 72);
      uint64_t v44 = *(int **)(v0 + 56);
      uint64_t v15 = *(void *)(v0 + 32);
      unint64_t v16 = static PerformanceUtil.shared;
      uint64_t v17 = swift_task_alloc();
      *(void *)(v17 + 16) = v15;
      uint64_t v18 = swift_task_alloc();
      Date.init()();
      uint64_t v43 = *(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(uint64_t@<X0>, void *@<X8>), uint64_t, uint64_t))(*(void *)v16 + 200);
      type metadata accessor for CLAccuracyAuthorization(0);
      LOBYTE(v42) = 2;
      v43(0xD00000000000002ELL, 0x80000001C91A4460, 0, v18, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 180, "fetchLocation()", 15, v42, partial apply for closure #2 in closure #1 in PommesLocationManager.fetchLocation(), v17, v19);
      v12(v18, v45);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = *(void *)(v0 + 16);
      Date.init()();
      uint64_t v21 = v13 + v44[5];
      *(void *)uint64_t v21 = "SiriInformationSearch/PommesLocationManager.swift";
      *(void *)(v21 + 8) = 49;
      *(unsigned char *)(v21 + 16) = 2;
      *(void *)(v13 + v44[6]) = 181;
      uint64_t v22 = v13 + v44[7];
      *(void *)uint64_t v22 = "fetchLocation()";
      *(void *)(v22 + 8) = 15;
      *(unsigned char *)(v22 + 16) = 2;
      uint64_t v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
      uint64_t v24 = (uint64_t *)(v13 + v44[8]);
      uint64_t *v24 = v23;
      v24[1] = v25;
      id v26 = PommesLocationManager.manager.getter(v23);
      PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(v26, v20, 0);

      (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v13, 0);
      outlined destroy of LocationStatus(v13, type metadata accessor for PerformanceUtil.Ticket);
      goto LABEL_19;
    }
    uint64_t v35 = *(void *)(v0 + 48);
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v35);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    int v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C8F83000, v37, v38, "Location use is not authorized. This may be due to Siri location permission reset. POMMES will trigger an authorization prompt if AFFeatureFlags.isSiriLocationServicesPromptingEnabled() is enabled.", v39, 2u);
      MEMORY[0x1CB77E470](v39, -1, -1);
    }
    uint64_t v14 = *(void *)(v0 + 72);

    unint64_t v34 = 0x80000001C91A4440;
    uint64_t v32 = v14;
    uint64_t v33 = 0xD000000000000018;
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 48);
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v27);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1C8F83000, v29, v30, "Location Services not enabled", v31, 2u);
      MEMORY[0x1CB77E470](v31, -1, -1);
    }
    uint64_t v14 = *(void *)(v0 + 72);

    uint64_t v32 = v14;
    uint64_t v33 = 0x616C696176616E75;
    unint64_t v34 = 0xEB00000000656C62;
  }
  OSSignposter.end(token:message:)(v32, v33, v34);
LABEL_19:
  outlined destroy of LocationStatus(v14, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  **(unsigned char **)(v0 + 24) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

BOOL PommesLocationManager.isLocationUseAuthorized(status:)(int a1)
{
  return (a1 - 3) < 2;
}

id PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  LODWORD(v55) = a3;
  uint64_t v56 = a2;
  uint64_t v6 = type metadata accessor for LocationStatus(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (void **)((char *)&v51 - v10);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C8F83000, v13, v14, "Requesting location", v15, 2u);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }

  id v16 = objc_msgSend(a1, sel_setDesiredAccuracy_, *MEMORY[0x1E4F1E6F0]);
  MEMORY[0x1F4188790](v16);
  *(&v51 - 2) = v4;
  id v18 = v17;
  OS_dispatch_queue.sync<A>(execute:)();

  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) < 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
    *(void *)uint64_t v9 = v56;
    v9[8] = 0;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v9);
    return objc_msgSend(a1, sel_requestLocation);
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v20 = *v11;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1C8F83000, v21, v22, "Location is already available, keep cached location until we have update", v23, 2u);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }

    uint64_t v24 = v56;
    *(void *)uint64_t v9 = v20;
    *((void *)v9 + 1) = v24;
    v9[16] = v55 & 1;
    swift_storeEnumTagMultiPayload();
    id v25 = v20;
    PommesLocationManager.status.setter((uint64_t)v9);

    return objc_msgSend(a1, sel_requestLocation);
  }
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v53 = &v51;
  uint64_t v27 = *(void *)(*(void *)(v26 - 8) + 64);
  MEMORY[0x1F4188790](v26);
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v54 = v29;
  int v55 = (char *)&v51 - v28;
  os_log_type_t v30 = *(void (**)(void))(v29 + 32);
  uint64_t v52 = v31;
  v30();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl(&dword_1C8F83000, v32, v33, "Location fetch is already pending, checking to see if we should re-fetch", v34, 2u);
    MEMORY[0x1CB77E470](v34, -1, -1);
  }

  MEMORY[0x1F4188790](v35);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v37 = v36;
  os_log_type_t v38 = *(void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v39 = (char *)&v51 - v28;
  uint64_t v40 = v52;
  v38(v39, v52);
  uint64_t v41 = (double *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait);
  swift_beginAccess();
  double v42 = *v41;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  if (v42 < v37)
  {
    if (v45)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1C8F83000, v43, v44, "Pending request has timed out, requesting location again", v46, 2u);
      MEMORY[0x1CB77E470](v46, -1, -1);
    }

    *(void *)uint64_t v9 = v56;
    v9[8] = 0;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v9);
    v38(v55, v40);
    return objc_msgSend(a1, sel_requestLocation);
  }
  if (v45)
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl(&dword_1C8F83000, v43, v44, "Pending request has not timed out, not requesting location again", v48, 2u);
    MEMORY[0x1CB77E470](v48, -1, -1);
  }

  uint64_t v49 = &v9[*(int *)(v51 + 48)];
  uint64_t v50 = v55;
  *(void *)uint64_t v9 = v56;
  v9[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v49, v50, v40);
  swift_storeEnumTagMultiPayload();
  PommesLocationManager.status.setter((uint64_t)v9);
  return (id)((uint64_t (*)(char *, uint64_t))v38)(v50, v40);
}

uint64_t closure #2 in PommesLocationManager.setCachedLocation(location:)(void *a1)
{
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = a1;
  id v6 = PommesLocationManager.manager.getter((uint64_t)v5);
  id v7 = objc_msgSend(v6, sel_accuracyAuthorization);

  *(void *)uint64_t v4 = v5;
  *((void *)v4 + 1) = v7;
  v4[16] = 0;
  swift_storeEnumTagMultiPayload();
  return PommesLocationManager.status.setter((uint64_t)v4);
}

uint64_t PommesLocationManager.shiftedLocation(for:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = 0;
  v11[3] = 0;
  v11[4] = v10;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  id v12 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply, (uint64_t)v11);
  swift_release();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t PommesLocationManager.cachedLocationInfo()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v3);
  id v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  uint64_t v15 = v1;
  id v7 = v6;
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v11 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                       + 48)];
      uint64_t v12 = type metadata accessor for Date();
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
      goto LABEL_4;
    case 2:
      long long v13 = xmmword_1C91996D0;
      goto LABEL_7;
    case 3:
      long long v13 = xmmword_1C91996C0;
LABEL_7:
      *(_OWORD *)a1 = v13;
      goto LABEL_8;
    case 4:
    case 5:
LABEL_4:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
LABEL_8:
      *(_WORD *)(a1 + 16) = 256;
      break;
    default:
      uint64_t v9 = *((void *)v5 + 1);
      unsigned __int8 v10 = v5[16];
      *(void *)a1 = *(void *)v5;
      *(void *)(a1 + 8) = v9;
      *(_WORD *)(a1 + 16) = v10;
      break;
  }
  return result;
}

Swift::String_optional __swiftcall PommesLocationManager.countryCode()()
{
  id v0 = (id)_AFPreferencesCountryCode();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](PommesLocationManager.shiftedLocation(for:), 0, 0);
}

uint64_t PommesLocationManager.shiftedLocation(for:)()
{
  uint64_t v1 = (void *)v0[3];
  objc_msgSend(v1, sel_coordinate);
  double v3 = v2;
  objc_msgSend(v1, sel_coordinate);
  double v5 = v4;
  if (objc_msgSend(v1, sel_referenceFrame) == 2)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_19;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    unsigned __int8 v10 = "Location shifting is not required for location, reference frame is set to ChinaShifted";
LABEL_18:
    _os_log_impl(&dword_1C8F83000, v7, v8, v10, v9, 2u);
    MEMORY[0x1CB77E470](v9, -1, -1);
LABEL_19:
    uint64_t v21 = (void *)v0[3];

    uint64_t v22 = v0[3];
    uint64_t v26 = (uint64_t (*)(uint64_t))v0[1];
    id v23 = v21;
    return v26(v22);
  }
  if (!objc_msgSend(self, sel_isLocationShiftRequiredForCoordinate_, v3, v5))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_19;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    unsigned __int8 v10 = "Location shifting is not required for location";
    goto LABEL_18;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1C8F83000, v12, v13, "Location shifting is required for location", v14, 2u);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }
  uint64_t v16 = v0[3];
  uint64_t v15 = v0[4];

  uint64_t v17 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
  id v18 = (double *)swift_task_alloc();
  v0[5] = v18;
  *((void *)v18 + 2) = v15;
  v18[3] = v3;
  void v18[4] = v5;
  *((void *)v18 + 5) = v16;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[6] = v19;
  *uint64_t v19 = v0;
  v19[1] = PommesLocationManager.shiftedLocation(for:);
  return MEMORY[0x1F4188080](v0 + 2, v17, v17, 0, 0, &async function pointer to partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:), v18, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    double v2 = PommesLocationManager.shiftedLocation(for:);
  }
  else
  {
    swift_task_dealloc();
    double v2 = AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  *(void *)(v6 + 64) = a4;
  *(double *)(v6 + 48) = a5;
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 24) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v6 + 72) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PommesLocationManager.shiftedLocation(for:), 0, 0);
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  double v2 = (void *)v0[8];
  uint64_t v1 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  double v5 = (void *)v0[5];
  uint64_t v6 = type metadata accessor for TaskPriority();
  id v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  void v8[3] = 0;
  void v8[4] = v5;
  _OWORD v8[5] = v4;
  v8[6] = v3;
  v8[7] = v2;
  id v9 = v5;
  id v10 = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:), (uint64_t)v8);
  outlined destroy of MediaUserStateCenter?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:), v11);
  outlined destroy of MediaUserStateCenter?(v1, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[10] = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<CLLocation, Error>);
  *uint64_t v12 = v0;
  v12[1] = closure #1 in PommesLocationManager.shiftedLocation(for:);
  return MEMORY[0x1F4187E30](v0 + 2, 0, 0, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    double v2 = closure #1 in PommesLocationManager.shiftedLocation(for:);
  }
  else {
    double v2 = closure #1 in PommesLocationManager.shiftedLocation(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    double v2 = *(uint64_t **)(v0 + 32);
    **(void **)(v0 + 24) = v1;
    uint64_t v3 = *v2;
    uint64_t v4 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
  }
  else
  {
    double v5 = *(void **)(v0 + 64);
    uint64_t v6 = *(uint64_t **)(v0 + 32);
    **(void **)(v0 + 24) = v5;
    uint64_t v3 = *v6;
    uint64_t v4 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
    id v7 = v5;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1CB77CF90](v3, v4, v8, MEMORY[0x1E4FBC0F0]);
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = **(void **)(v0 + 32);
  double v2 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1CB77CF90](v1, v2, v3, MEMORY[0x1E4FBC0F0]);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a7;
  *(double *)(v7 + 32) = a2;
  *(double *)(v7 + 40) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a6;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:), 0, 0);
}

uint64_t closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  double v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  v5[5] = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v7 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  uint64_t v8 = v0[2];
  return MEMORY[0x1F4188160](v8, 0, 0, 0xD000000000000015, 0x80000001C91A43B0, partial apply for closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:), v5, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

void closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C8F83000, v11, v12, "Calling Location shifting async API", v13, 2u);
    MEMORY[0x1CB77E470](v13, -1, -1);
  }

  id v38 = PommesLocationManager.locationShifter.getter();
  objc_msgSend(a3, sel_horizontalAccuracy);
  double v15 = v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  uint64_t v32 = &v31;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v37 = a2;
  unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  unint64_t v35 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v34((char *)&v31 - v35, a1, v16);
  uint64_t v33 = a1;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v21(v20 + ((v19 + 24) & ~v19), (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  uint64_t v43 = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  uint64_t v44 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v40 = 1107296256;
  uint64_t v41 = thunk for @escaping @callee_guaranteed (@unowned GEOLocationCoordinate2D, @unowned Double) -> ();
  double v42 = &block_descriptor_92;
  double v36 = _Block_copy(&aBlock);
  id v22 = a3;
  swift_release();
  uint64_t v43 = closure #2 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  uint64_t v44 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v40 = 1107296256;
  uint64_t v41 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  double v42 = &block_descriptor_95;
  id v23 = _Block_copy(&aBlock);
  uint64_t v32 = &v31;
  MEMORY[0x1F4188790](v23);
  uint64_t v24 = (char *)&v31 - v35;
  v34((char *)&v31 - v35, v33, v16);
  uint64_t v25 = (v19 + 16) & ~v19;
  uint64_t v26 = swift_allocObject();
  v21(v26 + v25, v24, v16);
  uint64_t v43 = partial apply for closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  uint64_t v44 = v26;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v40 = 1107296256;
  uint64_t v41 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  double v42 = &block_descriptor_101;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_release();
  id v28 = PommesLocationManager.locationShiftQueue.getter();
  id v29 = v38;
  os_log_type_t v30 = v36;
  objc_msgSend(v38, sel_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_, v36, v23, v27, v28, a4, a5, v15);

  _Block_release(v27);
  _Block_release(v23);
  _Block_release(v30);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1, double a2, double a3, double a4)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C8F83000, v9, v10, "Received shifted coordinates", v11, 2u);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }

  objc_msgSend(a1, sel_altitude);
  double v13 = v12;
  objc_msgSend(a1, sel_verticalAccuracy);
  double v15 = v14;
  id v16 = objc_msgSend(a1, sel_timestamp);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v21 = objc_allocWithZone(MEMORY[0x1E4F1E5F8]);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v23 = objc_msgSend(v21, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, isa, a2, a3, v13, a4, v15);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  objc_msgSend(v23, sel_setReferenceFrame_, 2);
  v25[1] = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned GEOLocationCoordinate2D, @unowned Double) -> ()(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v7 = *(void (**)(uint64_t, double, double, double))(a1 + 32);
  uint64_t v8 = swift_retain();
  v7(v8, a2, a3, a4);

  return swift_release();
}

void closure #2 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v1, "Location shifting must go to network...", v2, 2u);
    MEMORY[0x1CB77E470](v2, -1, -1);
  }
}

uint64_t closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  id v3 = a1;
  id v4 = a1;
  double v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v5, v6, "Error shifting location: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v8, -1, -1);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {
  }
  lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError();
  swift_allocError();
  *uint64_t v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return CheckedContinuation.resume(throwing:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  v0[8] = v2;
  v0[9] = *(void *)(v2 - 8);
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  id v3 = *(void *)(v0 + 72);
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x1CB77D5A0](2000000000000000000, 0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v2);
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  ContinuousClock.init()();
  double v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  os_log_type_t v6 = lazy protocol witness table accessor for type related decl 'e' for CLError and conformance related decl 'e' for CLError((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  *double v5 = v0;
  v5[1] = closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 40);
  return MEMORY[0x1F4187DE8](v7, v0 + 16, v8, v9, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  id v3 = (void (*)(uint64_t, uint64_t))v2[12];
  if (v0)
  {
    uint64_t v4 = v2[11];
    double v5 = v2[8];
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    v3(v4, v5);
    os_log_type_t v6 = closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  }
  else
  {
    uint64_t v7 = v2[11];
    uint64_t v8 = v2[8];
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    v3(v7, v8);
    os_log_type_t v6 = closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError();
  swift_allocError();
  *uint64_t v1 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  void v7[5] = a4;
  v7[6] = a5;
  return MEMORY[0x1F4188298](closure #1 in PommesLocationManager.shiftedLocation(for:completion:), 0, 0);
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1CB77E560](v1);
  *(void *)(v0 + 72) = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in PommesLocationManager.shiftedLocation(for:completion:);
    v4[3] = *(void *)(v0 + 48);
    v4[4] = v3;
    return MEMORY[0x1F4188298](PommesLocationManager.shiftedLocation(for:), 0, 0);
  }
  else
  {
    (*(void (**)(void))(v0 + 56))(*(void *)(v0 + 48));
    double v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 88);
  (*(void (**)(void *))(v0 + 56))(v1);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 56))(*(void *)(v0 + 48));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  os_log_type_t v6 = *(void **)(v4 + 72);
  if (v1)
  {

    uint64_t v7 = closure #1 in PommesLocationManager.shiftedLocation(for:completion:);
  }
  else
  {

    *(void *)(v5 + 88) = a1;
    uint64_t v7 = closure #1 in PommesLocationManager.shiftedLocation(for:completion:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = a1;
  *((void *)v7 + 1) = a3;
  v7[16] = 0;
  swift_storeEnumTagMultiPayload();
  id v8 = a1;
  return PommesLocationManager.status.setter((uint64_t)v7);
}

void PommesLocationManager.locationManager(_:didFailWithError:)(uint64_t a1, void *a2)
{
}

id PommesLocationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PommesLocationManaging.fetchLocation() in conformance PommesLocationManager()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  static TaskPriority.userInitiated.getter();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 0;
  v6[3] = 0;
  v6[4] = v4;
  id v7 = v4;
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&closure #1 in PommesLocationManager.fetchLocation()partial apply, (uint64_t)v6);
}

void protocol witness for PommesLocationManaging.status.getter in conformance PommesLocationManager()
{
  uint64_t v1 = *(void **)(*v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  id v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t protocol witness for PommesLocationManaging.statusPublisher.getter in conformance PommesLocationManager()
{
  return PommesLocationManager.statusPublisher.getter();
}

uint64_t specialized static LocationStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (LocationStatus, LocationStatus));
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 56)];
  outlined init with copy of LocationStatus(a1, (uint64_t)v13);
  outlined init with copy of LocationStatus(a2, v14);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of LocationStatus((uint64_t)v13, (uint64_t)v7);
      id v16 = *(void **)v7;
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                   + 48);
      uint64_t v18 = &v7[v17];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v33 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(&v7[v17], v33);
        goto LABEL_18;
      }
      LODWORD(v48) = v7[8];
      BOOL v45 = *(void **)v14;
      uint64_t v46 = (uint64_t *)(v14 + v17);
      int v44 = *(unsigned __int8 *)(v14 + 8);
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v49 = &v42;
      uint64_t v20 = *(void **)(v19 - 8);
      uint64_t v21 = v20[8];
      MEMORY[0x1F4188790](v19);
      unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v43 = v16;
      id v23 = (uint64_t (*)(char *, char *, uint64_t))v20[4];
      uint64_t v24 = v23((char *)&v42 - v22, v18, v19);
      int v47 = &v42;
      MEMORY[0x1F4188790](v24);
      uint64_t v25 = (char *)&v42 - v22;
      uint64_t v26 = v23((char *)&v42 - v22, (char *)v46, v19);
      uint64_t v46 = &v42;
      int v27 = (v43 == v45) & ~v44;
      if (v48) {
        int v27 = v44;
      }
      LODWORD(v45) = v27;
      MEMORY[0x1F4188790](v26);
      id v28 = (char *)&v42 - v22;
      id v29 = (uint64_t (*)(char *, char *, uint64_t))v20[2];
      uint64_t v48 = (char *)&v42 - v22;
      uint64_t v30 = v29((char *)&v42 - v22, (char *)&v42 - v22, v19);
      MEMORY[0x1F4188790](v30);
      uint64_t v31 = (char *)&v42 - v22;
      v29(v31, v25, v19);
      if (v45) {
        char v32 = static Date.== infix(_:_:)();
      }
      else {
        char v32 = 0;
      }
      uint64_t v40 = (void (*)(char *, uint64_t))v20[1];
      v40(v31, v19);
      v40(v28, v19);
      v40(v25, v19);
      v40(v48, v19);
      goto LABEL_22;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_18;
      }
      goto LABEL_16;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_18;
      }
LABEL_16:
      outlined destroy of LocationStatus((uint64_t)v13, type metadata accessor for LocationStatus);
      char v32 = 1;
      break;
    default:
      outlined init with copy of LocationStatus((uint64_t)v13, (uint64_t)v9);
      double v15 = *(void **)v9;
      if (swift_getEnumCaseMultiPayload())
      {

LABEL_18:
        outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for (LocationStatus, LocationStatus));
        char v32 = 0;
      }
      else
      {
        char v34 = v9[16];
        uint64_t v35 = *((void *)v9 + 1);
        double v36 = *(void **)v14;
        uint64_t v37 = *(void *)(v14 + 8);
        char v38 = *(unsigned char *)(v14 + 16);
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        char v39 = static NSObject.== infix(_:_:)();

        char v32 = v39 & (v35 == v37) & (v34 ^ v38 ^ 1);
LABEL_22:
        outlined destroy of LocationStatus((uint64_t)v13, type metadata accessor for LocationStatus);
      }
      break;
  }
  return v32 & 1;
}

uint64_t partial apply for closure #1 in PommesLocationManager.status.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in PommesLocationManager.status.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = *(void *)(v1 + 16) + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager__status;
  swift_beginAccess();
  return outlined init with copy of LocationStatus(v3, a1);
}

uint64_t sub_1C9160A6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationStatus(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  uint64_t v5 = (id *)(v0 + v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    id v7 = (char *)v5
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else if (!EnumCaseMultiPayload)
  {
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in PommesLocationManager.status.setter()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationStatus(0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in PommesLocationManager.status.setter(v2, v3);
}

uint64_t sub_1C9160BF0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in PommesLocationManager.manager.getter(void *a1@<X8>)
{
  closure #1 in closure #1 in PommesLocationManager.manager.getter(*(void **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in PommesLocationManager.fetchLocation()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in PommesLocationManager.fetchLocation()(a1, v4, v5, v6);
}

void partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:)(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
}

{
  id v3;
  unsigned int v4;

  uint64_t v3 = PommesLocationManager.manager.getter(a1);
  uint64_t v4 = objc_msgSend(v3, sel_authorizationStatus);

  *a2 = v4 - 3 < 2;
}

uint64_t sub_1C9160CEC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #2 in PommesLocationManager.setCachedLocation(location:)(void *a1)
{
  return closure #2 in PommesLocationManager.setCachedLocation(location:)(a1);
}

uint64_t sub_1C9160D2C()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return MEMORY[0x1F4188298](closure #1 in PommesLocationManager.shiftedLocation(for:completion:), 0, 0);
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return MEMORY[0x1F4188298](closure #1 in PommesLocationManager.shiftedLocation(for:completion:), 0, 0);
}

uint64_t partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  double v7 = v2[3];
  double v8 = v2[4];
  uint64_t v9 = *((void *)v2 + 5);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in PommesLocationManager.shiftedLocation(for:)(a1, a2, v6, v9, v7, v8);
}

uint64_t outlined destroy of LocationStatus(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:)@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*(id *)(v1 + 16), sel_accuracyAuthorization);
  *a1 = result;
  return result;
}

uint64_t sub_1C9161034()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(void *a1)
{
  return closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

void specialized PommesLocationManager.locationManager(_:didFailWithError:)(void *a1)
{
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  double v7 = (char *)v26 - v6;
  uint64_t v31 = a1;
  id v8 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for CLError(0);
  if (swift_dynamicCast())
  {
    uint64_t v9 = (void *)v30;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    id v11 = v9;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v30 = (uint64_t)v11;
      uint64_t v31 = (void *)v27;
      id v28 = v7;
      *(_DWORD *)uint64_t v14 = 136315138;
      v26[1] = v14 + 4;
      id v15 = v11;
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)&v31);
      double v7 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v12, v13, "PommesLocationManager: Location Error: %s", v14, 0xCu);
      uint64_t v18 = v27;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v14, -1, -1);
    }
    else
    {
    }
    uint64_t v30 = (uint64_t)v11;
    lazy protocol witness table accessor for type related decl 'e' for CLError and conformance related decl 'e' for CLError(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
    uint64_t v19 = _BridgedStoredNSError.code.getter();
    if (v31 == (void *)1)
    {
      MEMORY[0x1F4188790](v19);
      v26[-2] = v20;
      id v22 = v21;
      OS_dispatch_queue.sync<A>(execute:)();

      if (swift_getEnumCaseMultiPayload() == 1)
      {
        id v23 = &v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                         + 48)];
        uint64_t v24 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
        if (one-time initialization token for loc != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for OSSignposter();
        __swift_project_value_buffer(v25, (uint64_t)static Signposter.loc);
        OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, v29, 0x726F727265, 0xE500000000000000);
      }
      else
      {
        outlined destroy of LocationStatus((uint64_t)v7, type metadata accessor for LocationStatus);
      }
    }
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v5);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v5);
  }
}

unint64_t lazy protocol witness table accessor for type PommesLocationInfo and conformance PommesLocationInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo;
  if (!lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError;
  if (!lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError;
  if (!lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError);
  }
  return result;
}

id sub_1C9161660@<X0>(void *a1@<X8>)
{
  id result = PommesLocationManager.locationShifter.getter();
  *a1 = result;
  return result;
}

void sub_1C916168C(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

id sub_1C9161698@<X0>(void *a1@<X8>)
{
  id result = PommesLocationManager.locationShiftQueue.getter();
  *a1 = result;
  return result;
}

void sub_1C91616C4(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void keypath_setTm(void **a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  id v7 = *(id *)(*a2 + *a5);
  *(void *)(*a2 + *a5) = *a1;
  id v6 = v5;
}

uint64_t sub_1C9161724@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PommesLocationManager.statusPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C9161750(void *a1, void *a2)
{
  *(void *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = *a1;
  swift_retain();

  return swift_release();
}

id sub_1C916179C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = PommesLocationManager.manager.getter(a1);
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of PommesLocationManaging.fetchLocation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PommesLocationManaging.setCachedLocation(location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PommesLocationManaging.cachedLocationInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PommesLocationManaging.countryCode()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PommesLocationManaging.setServiceHelper(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PommesLocationManaging.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PommesLocationManaging.statusPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t initializeBufferWithCopyOfBuffer for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesLocationInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesLocationInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesLocationInfo()
{
  return &type metadata for PommesLocationInfo;
}

unsigned char *storeEnumTagSinglePayload for LocationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9161A90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationError()
{
  return &type metadata for LocationError;
}

unsigned char *storeEnumTagSinglePayload for LocationShiftingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9161B94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationShiftingError()
{
  return &type metadata for LocationShiftingError;
}

char *initializeBufferWithCopyOfBuffer for LocationStatus(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v11 = *a2;
    *(void *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      a1[8] = *((unsigned char *)a2 + 8);
      uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                   + 48);
      os_log_type_t v13 = &a1[v12];
      uint64_t v14 = (uint64_t)a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      id v8 = *a2;
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v9;
      a1[16] = *((unsigned char *)a2 + 16);
      id v10 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for LocationStatus(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    unsigned int v4 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    int v3 = *a1;
  }
}

uint64_t initializeWithCopy for LocationStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                 + 48);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    id v7 = *(void **)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    id v9 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for LocationStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of LocationStatus(a1, type metadata accessor for LocationStatus);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      id v9 = *(void **)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v9;
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                   + 48);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      id v7 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      id v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for LocationStatus(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    a1[8] = a2[8];
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    id v7 = &a1[v6];
    id v8 = &a2[v6];
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for LocationStatus(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of LocationStatus((uint64_t)a1, type metadata accessor for LocationStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                  + 48);
      id v7 = &a1[v6];
      id v8 = &a2[v6];
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for LocationStatus()
{
  v2[4] = &unk_1C919AF38;
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PommesLocationManager()
{
  return type metadata accessor for PommesLocationManager(0);
}

uint64_t type metadata accessor for PommesLocationManager(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesLocationManager);
}

uint64_t type metadata completion function for PommesLocationManager()
{
  uint64_t result = type metadata accessor for LocationStatus(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t objectdestroy_6Tm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in PommesLocationManager.fetchLocation()(a1, v4, v5, v6);
}

uint64_t sub_1C91624F4()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  id v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *id v8 = v2;
  v8[6] = v7;
  void v8[4] = v5;
  _OWORD v8[5] = v6;
  v8[2] = a1;
  void v8[3] = v4;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:), 0, 0);
}

uint64_t sub_1C916260C()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)();
}

uint64_t lazy protocol witness table accessor for type related decl 'e' for CLError and conformance related decl 'e' for CLError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 40), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1C9162804()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(double a1, double a2, double a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  uint64_t v7 = *(void **)(v3 + 16);

  return closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(v7, a1, a2, a3);
}

uint64_t sub_1C9162964()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);

  return closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(a1);
}

uint64_t sub_1C9162A6C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in closure #1 in PommesLocationManager.fetchLocation()(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = PommesLocationManager.manager.getter(a1);
  id v4 = objc_msgSend(v3, sel_accuracyAuthorization);

  *a2 = v4;
}

uint64_t outlined assign with copy of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t static NonSiriKitMediaAppLaunchPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000027;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.appDataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.supportedMediaIntents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.__allocating_init(appDataProvider:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:)(a1);
  return v2;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:)(long long *a1)
{
  uint64_t v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:));
  swift_arrayDestroy();
  *(void *)(v1 + 56) = v3;
  outlined init with take of AppDataProviding(a1, v1 + 16);
  return v1;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.isMediaIntent(bundleId:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  (*(void (**)(void *__return_ptr, uint64_t, unint64_t, void, uint64_t, uint64_t))(v6 + 8))(v36, a1, a2, 0, v5, v6);
  outlined init with take of AppData?((uint64_t)v36, (uint64_t)v37);
  uint64_t v7 = v38;
  if (v38)
  {
    uint64_t v34 = (uint64_t)v2;
    uint64_t v8 = v37[0];
    unint64_t v9 = v37[1];
    uint64_t v11 = v39;
    uint64_t v10 = v40;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v35[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      if (v9) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 7104878;
      }
      if (v9) {
        unint64_t v18 = v9;
      }
      else {
        unint64_t v18 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      _os_log_impl(&dword_1C8F83000, v13, v14, "App ID: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v16, -1, -1);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v35[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = Set.description.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      _os_log_impl(&dword_1C8F83000, v25, v26, "Supported intents: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v28, -1, -1);
      MEMORY[0x1CB77E470](v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
    }

    swift_bridgeObjectRetain();
    swift_retain();
    char v32 = specialized Sequence.contains(where:)(v7, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of [LNActionMetadata]((uint64_t)&v41);
    outlined release of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRelease();
    return v32 & 1;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v42 = v23;
      *(_DWORD *)id v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v20, v21, "Cannot look up the app %s on device, passing to Pegasus", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v23, -1, -1);
      MEMORY[0x1CB77E470](v22, -1, -1);

      return 2;
    }
    else
    {

      uint64_t v24 = 2;
      swift_bridgeObjectRelease_n();
    }
  }
  return v24;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance NonSiriKitMediaAppLaunchPreflightClient()
{
  return 0xD000000000000027;
}

uint64_t specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(entity:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v83 = (char *)v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for UsoIdentifier();
  uint64_t v4 = *(void *)(v84 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v84);
  uint64_t v7 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v80 = (char *)v74 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kind?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v14 = (char *)v74 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node)?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Edge, Node));
  MEMORY[0x1F4188790](v18);
  int v85 = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Node();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  if (!a1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v43))
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v44 = 0;
      _os_log_impl(&dword_1C8F83000, v39, v43, "Received a nil UsoEntity when extracting bundle ID", v44, 2u);
      MEMORY[0x1CB77E470](v44, -1, -1);
    }
    goto LABEL_13;
  }
  uint64_t v78 = v18;
  uint64_t v79 = v4;
  uint64_t v81 = (char *)v74 - v25;
  swift_retain();
  uint64_t v82 = a1;
  CodeGenBase.entity.getter();
  UsoEntity.usoValue.getter();
  swift_release();
  UsoValue.graphNode.getter();
  swift_release();
  uint64_t v26 = type metadata accessor for Kind();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v86 = v20;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v29 = 1;
  v28(v14, 1, 1, v26);
  v28(v12, 1, 1, v26);
  uint64_t v30 = Node.connectedNodes(nodeKind:edgeKind:)();
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Kind?);
  uint64_t v31 = v86;
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Kind?);
  uint64_t v77 = v21;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v32 = v21 + 8;
  uint64_t v76 = v33;
  v33(v24, v31);
  uint64_t v34 = *(void *)(v30 + 16);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node));
  uint64_t v36 = *(void *)(v35 - 8);
  if (v34)
  {
    outlined init with copy of MediaUserStateCenter?(v30+ ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v35 - 8) + 80)), (uint64_t)v17, &demangling cache variable for type metadata for (edge: Edge, node: Node));
    uint64_t v29 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v17, v29, 1, v35);
  swift_bridgeObjectRelease();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v17, 1, v37) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for (edge: Edge, node: Node)?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v39, v40))
    {

      swift_release();
      return 0;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl(&dword_1C8F83000, v39, v40, "Failed to retrieve the connected node, cannot lookup bundle ID", v41, 2u);
    MEMORY[0x1CB77E470](v41, -1, -1);
    swift_release();
LABEL_13:

    return 0;
  }
  BOOL v45 = &v17[*(int *)(v37 + 48)];
  v74[1] = v32;
  int v75 = v45;
  uint64_t v46 = v31;
  uint64_t v47 = v78;
  uint64_t v48 = v85;
  uint64_t v49 = &v85[*(int *)(v78 + 48)];
  uint64_t v50 = type metadata accessor for Edge();
  uint64_t v51 = *(void *)(v50 - 8);
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v17, v50);
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
  v52(v49, v75, v46);
  v52(v81, &v48[*(int *)(v47 + 48)], v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v50);
  uint64_t v53 = Node.identifiers.getter();
  uint64_t v54 = *(void *)(v53 + 16);
  if (!v54)
  {
    uint64_t v63 = 1;
    uint64_t v64 = v79;
    uint64_t v65 = (uint64_t)v83;
    uint64_t v59 = v84;
    uint64_t v66 = v76;
    goto LABEL_27;
  }
  int v55 = *(void (**)(char *, unint64_t, uint64_t))(v79 + 16);
  unint64_t v56 = v53 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
  uint64_t v57 = (void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v58 = *(void *)(v79 + 72);
  int v85 = (char *)v53;
  swift_bridgeObjectRetain();
  uint64_t v59 = v84;
  while (1)
  {
    v55(v7, v56, v59);
    uint64_t v61 = UsoIdentifier.namespace.getter();
    if (!v62) {
      goto LABEL_17;
    }
    if (v61 == 0x64695F6D657469 && v62 == 0xE700000000000000) {
      break;
    }
    char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v60) {
      goto LABEL_25;
    }
LABEL_17:
    (*v57)(v7, v59);
    v56 += v58;
    if (!--v54)
    {
      swift_bridgeObjectRelease();
      uint64_t v63 = 1;
      uint64_t v46 = v86;
      uint64_t v64 = v79;
      uint64_t v65 = (uint64_t)v83;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v64 = v79;
  uint64_t v65 = (uint64_t)v83;
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v83, v7, v59);
  uint64_t v63 = 0;
  uint64_t v46 = v86;
LABEL_26:
  uint64_t v66 = v76;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v65, v63, 1, v59);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v65, 1, v59) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for UsoIdentifier?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl(&dword_1C8F83000, v68, v69, "Cannot find a node that contains the app bundle ID", v70, 2u);
      MEMORY[0x1CB77E470](v70, -1, -1);
    }
    swift_release();

    v66(v81, v46);
    return 0;
  }
  else
  {
    uint64_t v73 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v80, v65, v59);
    uint64_t v71 = UsoIdentifier.value.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v73, v59);
    v66(v81, v46);
  }
  return v71;
}

uint64_t specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v22, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v21)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_open_common_App();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v0 = type metadata accessor for Logger();
      __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v1, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl(&dword_1C8F83000, v1, v2, "Converting UsoTask_open_common_App to UsoEntity_common_App", v3, 2u);
        MEMORY[0x1CB77E470](v3, -1, -1);
      }

      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      uint64_t v4 = v18;
      goto LABEL_22;
    }
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7)) {
        goto LABEL_19;
      }
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "Converting UsoTask_start_uso_NoEntity to UsoEntity_common_App";
LABEL_18:
      _os_log_impl(&dword_1C8F83000, v6, v7, v9, v8, 2u);
      MEMORY[0x1CB77E470](v8, -1, -1);
LABEL_19:

      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      if (v18)
      {
        uint64_t v4 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        uint64_t v4 = 0;
      }
LABEL_22:
      uint64_t v11 = specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(entity:)(v4);
      swift_release();
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      goto LABEL_29;
    }
    type metadata accessor for UsoTask_play_uso_NoEntity();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7)) {
        goto LABEL_19;
      }
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "Converting UsoTask_play_uso_NoEntity to UsoEntity_common_App";
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v19[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    void v19[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C616E6F6974704FLL, 0xED00003E796E413CLL, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v13, v14, "Received an unsupported type of UsoTask %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v16, -1, -1);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }

  outlined destroy of MediaUserStateCenter?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v11 = 0;
LABEL_29:
  outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v11;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v25 = a2;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(a2 + 56);
    if (*(void *)(v13 + 16))
    {
      os_log_type_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v19 = v17 & ~v18;
      if ((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
      {
        uint64_t v20 = *(void *)(v13 + 48);
        uint64_t v21 = (void *)(v20 + 16 * v19);
        BOOL v22 = *v21 == v16 && v21[1] == v15;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_36:
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
        while (1)
        {
          unint64_t v19 = (v19 + 1) & ~v18;
          if (((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            break;
          }
          uint64_t v23 = (void *)(v20 + 16 * v19);
          BOOL v24 = *v23 == v16 && v23[1] == v15;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      a2 = v25;
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v10 >= v27) {
    goto LABEL_37;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_22;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v27) {
    goto LABEL_37;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v7);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v27) {
    goto LABEL_37;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v7);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v27) {
    goto LABEL_37;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v7);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v27)
  {
LABEL_37:
    swift_release();
    return 0;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v12);
  int64_t v7 = v12;
  if (v11)
  {
LABEL_22:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v27) {
      goto LABEL_37;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NonSiriKitMediaAppLaunchPreflightClient()
{
  return self;
}

uint64_t method lookup function for NonSiriKitMediaAppLaunchPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NonSiriKitMediaAppLaunchPreflightClient);
}

uint64_t dispatch thunk of NonSiriKitMediaAppLaunchPreflightClient.__allocating_init(appDataProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NonSiriKitMediaAppLaunchPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t SourceMatchFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized SourceMatchFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t SourceMatchFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t SourceMatchFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1 = specialized SourceMatchFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void SourceMatchFeaturiser.featurise(candidate:rankedSlotIndex:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  uint64_t v9 = *MEMORY[0x1E4F88BE8];
  v29[0] = *(void *)(v5 + 104);
  ((void (*)(char *, uint64_t, uint64_t))v29[0])(v7, v9, v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun);
  v29[1] = v8;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v11 = v29[2];
  uint64_t v10 = v29[3];
  int64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if (v10 == v11)
  {
    if (*(unsigned char *)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source)) {
      char v13 = 1;
    }
    else {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = 0;
  }
  if (*(unsigned char *)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source))
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v15 = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if (v13) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_isRequestingAppleMusic) != 1) {
    goto LABEL_15;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29[0])(v7, v9, v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = ((uint64_t (*)(char *, uint64_t))v12)(v7, v4);
  if (v13)
  {
LABEL_16:
    uint64_t v21 = (void *)*a1;
    BOOL v22 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v21) + 0xB8))(v15);
    v23.n128_u32[0] = 1071225242;
    (*(void (**)(__n128))((*v22 & *v19) + 0xD0))(v23);
    goto LABEL_21;
  }
  if ((v16 & 1) == 0)
  {
    Swift::Int v17 = (void *)*a1;
    uint64_t v18 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0xB8))(v15);
    v20.n128_u32[0] = 1074580685;
    (*(void (**)(__n128))((*v18 & *v19) + 0xD0))(v20);
    goto LABEL_21;
  }
LABEL_17:
  BOOL v24 = (void *)*a1;
  if ((*(unsigned char *)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0
    || (uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v15 & 1) != 0))
  {
    uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v24) + 0xB8))(v15);
    v26.n128_u32[0] = 1065437102;
    (*(void (**)(__n128))((*v25 & *v19) + 0xD0))(v26);
  }
  else
  {
    int64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v19 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v24) + 0xB8))();
    v28.n128_u32[0] = 1.0;
    (*(void (**)(__n128))((*v27 & *v19) + 0xD0))(v28);
  }
LABEL_21:
}

uint64_t SourceMatchFeaturiser.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SourceMatchFeaturiser.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance SourceMatchFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance SourceMatchFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t specialized SourceMatchFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218240;
    Apple_Parsec_Siri_V2alpha_AudioNoun.rawValue.getter();
    uint64_t v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 1024;
    (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v5, v6, "SourceMatchFeaturiser : noun=%ld, isRequestingAppleMusic=%{BOOL}d", (uint8_t *)v7, 0x12u);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v9 = a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  uint64_t v10 = v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_isRequestingAppleMusic) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(v12) & 1;
  return v2;
}

uint64_t type metadata accessor for SourceMatchFeaturiser()
{
  uint64_t result = type metadata singleton initialization cache for SourceMatchFeaturiser;
  if (!type metadata singleton initialization cache for SourceMatchFeaturiser) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for SourceMatchFeaturiser()
{
  return type metadata accessor for SourceMatchFeaturiser();
}

uint64_t type metadata completion function for SourceMatchFeaturiser()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SourceMatchFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SourceMatchFeaturiser);
}

uint64_t dispatch thunk of SourceMatchFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SourceMatchFeaturiser.__allocating_init(query:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SourceMatchFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

id AFPreferences.siriLanguageCode.getter()
{
  id v1 = objc_msgSend(v0, sel_languageCode);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    id v1 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t SageSearchRequestProcessor.__allocating_init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t SageSearchRequestProcessor.remoteClient.getter()
{
  return swift_retain();
}

uint64_t SageSearchRequestProcessor.onDeviceSearchInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t key path setter for SageSearchRequestProcessor.pommesSearchRequest : SageSearchRequestProcessor(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(a1, (uint64_t)v6, type metadata accessor for PommesSearchRequest);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  outlined assign with take of PommesSearchRequest((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t SageSearchRequestProcessor.pommesSearchRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  return _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(v3, a1, type metadata accessor for PommesSearchRequest);
}

uint64_t key path setter for SageSearchRequestProcessor.clientEntities : SageSearchRequestProcessor(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_clientEntities);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SageSearchRequestProcessor.clientEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t SageSearchRequestProcessor.search()()
{
  v1[2] = v0;
  type metadata accessor for PommesSearchRequest(0);
  v1[3] = swift_task_alloc();
  type metadata accessor for PegasusSearchResponse(0);
  v1[4] = swift_task_alloc();
  return MEMORY[0x1F4188298](SageSearchRequestProcessor.search(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[2];
  uint64_t v3 = (*(uint64_t (**)(void))(*v1 + 128))();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*v1 + 152))(v3);
  v0[5] = v4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v2 + 328)
                                                         + **(int **)(*(void *)v2 + 328));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = SageSearchRequestProcessor.search();
  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  return v9(v6, v7, v4);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v2[3], type metadata accessor for PommesSearchRequest);
    swift_bridgeObjectRelease();
    return MEMORY[0x1F4188298](SageSearchRequestProcessor.search(), 0, 0);
  }
  else
  {
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v2[3], type metadata accessor for PommesSearchRequest);
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[8] = (uint64_t)v3;
    *uint64_t v3 = v2;
    v3[1] = SageSearchRequestProcessor.search();
    uint64_t v4 = v2[4];
    return SageSearchRequestProcessor.handlePegasusResponse(_:)(v4);
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v0[4], type metadata accessor for PegasusSearchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[10];
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(*(void *)(v0 + 32), type metadata accessor for PegasusSearchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SageSearchRequestProcessor.search()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = SageSearchRequestProcessor.search();
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = SageSearchRequestProcessor.search();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v2[32] = v4;
  v2[33] = *(void *)(v4 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v2[38] = v5;
  v2[39] = *(void *)(v5 - 8);
  v2[40] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v2[41] = v6;
  v2[42] = *(void *)(v6 - 8);
  v2[43] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v2[44] = v7;
  v2[45] = *(void *)(v7 - 8);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  return MEMORY[0x1F4188298](SageSearchRequestProcessor.handlePegasusResponse(_:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 408) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = SageSearchRequestProcessor.handlePegasusResponse(_:);
  }
  else
  {
    *(void *)(v4 + 416) = a1;
    uint64_t v5 = SageSearchRequestProcessor.handlePegasusResponse(_:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t SageSearchRequestProcessor.handlePegasusResponse(_:)()
{
  uint64_t v178 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[44];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[27];
  uint64_t v7 = type metadata accessor for PegasusSearchResponse(0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v6 + *(int *)(v7 + 20), v4);
  v1[5] = type metadata accessor for SportsResolver();
  v1[6] = &protocol witness table for SportsResolver;
  uint64_t v157 = (uint64_t)v2;
  __swift_allocate_boxed_opaque_existential_1(v2);
  SportsResolver.init()();
  if (one-time initialization token for sage != -1) {
    swift_once();
  }
  uint64_t v9 = v1[47];
  uint64_t v10 = v1[48];
  uint64_t v11 = v1[44];
  uint64_t v165 = type metadata accessor for Logger();
  __swift_project_value_buffer(v165, (uint64_t)static Logger.sage);
  uint64_t v167 = v8;
  v8(v9, v10, v11);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = v1[47];
  uint64_t v17 = v1[44];
  uint64_t v16 = v1[45];
  char v176 = v1;
  if (v14)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v170 = swift_slowAlloc();
    v177[0] = v170;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v163 = (uint64_t *)(v18 + 4);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v19 = Message.textFormatString()();
    v1[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19._countAndFlagsBits, (unint64_t)v19._object, v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __n128 v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v20(v15, v17);
    _os_log_impl(&dword_1C8F83000, v12, v13, "PireneResponse: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v170, -1, -1);
    MEMORY[0x1CB77E470](v18, -1, -1);
  }
  else
  {
    __n128 v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v20(v15, v17);
  }
  unint64_t v156 = v20;
  v1[49] = v20;
  uint64_t v22 = v1[42];
  uint64_t v21 = v1[43];
  uint64_t v24 = v1[40];
  uint64_t v23 = v1[41];
  uint64_t v25 = v1[38];
  uint64_t v26 = v1[39];
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  uint64_t v28 = MEMORY[0x1CB779330](v27);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  if (Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter())
  {
    int64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      uint64_t v30 = v1[33];
      uint64_t v31 = v1[30];
      v177[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16);
      v31 += 16;
      uint64_t v171 = v32;
      uint64_t v155 = v28;
      unint64_t v33 = v28 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
      uint64_t v34 = *(void *)(v31 + 56);
      uint64_t v35 = (void (**)(uint64_t, uint64_t))(v31 - 8);
      uint64_t v36 = v177[0];
      unint64_t v164 = v33;
      uint64_t v37 = v1;
      uint64_t v169 = v34;
      do
      {
        uint64_t v38 = v37[31];
        uint64_t v39 = v37[29];
        v171(v38, v33, v39);
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        (*v35)(v38, v39);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
          uint64_t v36 = v177[0];
        }
        unint64_t v41 = *(void *)(v36 + 16);
        unint64_t v40 = *(void *)(v36 + 24);
        uint64_t v42 = v169;
        if (v41 >= v40 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
          uint64_t v42 = v169;
          uint64_t v36 = v177[0];
        }
        uint64_t v43 = v37[35];
        uint64_t v44 = v37[32];
        *(void *)(v36 + 16) = v41 + 1;
        unint64_t v45 = v36 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
        uint64_t v46 = *(void *)(v30 + 72);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v45 + v46 * v41, v43, v44);
        v177[0] = v36;
        v33 += v42;
        --v29;
      }
      while (v29);
      uint64_t v159 = *(void *)(v36 + 16);
      if (!v159)
      {
        swift_release();
        unint64_t v67 = v164;
LABEL_47:
        uint64_t v94 = v155;
        uint64_t v95 = *(void *)(v155 + 16);
        if (v95)
        {
          unint64_t v96 = (void (**)(uint64_t, uint64_t))(v176[33] + 8);
          swift_bridgeObjectRetain();
          do
          {
            uint64_t v97 = v176[36];
            id v98 = (char *)v176[34];
            uint64_t v99 = v176[32];
            Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
            swift_beginAccess();
            specialized Set._Variant.insert(_:)(v97, v98);
            (*v96)(v97, v99);
            swift_endAccess();
            v67 += v169;
            --v95;
          }
          while (v95);
          uint64_t v94 = v155;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain_n();
        unint64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = v176[29];
          Swift::String v103 = (uint8_t *)swift_slowAlloc();
          uint64_t v104 = swift_slowAlloc();
          v177[0] = v104;
          *(_DWORD *)Swift::String v103 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v105 = MEMORY[0x1CB77CDC0](v155, v102);
          unint64_t v107 = v106;
          swift_bridgeObjectRelease();
          v176[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v100, v101, "Adding profile slice resolution requests: %s", v103, 0xCu);
          swift_arrayDestroy();
          uint64_t v108 = v104;
          uint64_t v94 = v155;
          MEMORY[0x1CB77E470](v108, -1, -1);
          MEMORY[0x1CB77E470](v103, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v109 = v176[28];
        uint64_t v110 = v109 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
        swift_beginAccess();
        *(void *)(v110 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 92)) = v94;
        swift_bridgeObjectRelease();
        uint64_t v173 = (uint64_t (*)(void))(*(void *)(*(void *)v109 + 208) + **(int **)(*(void *)v109 + 208));
        id v111 = (void *)swift_task_alloc();
        v176[50] = v111;
        *id v111 = v176;
        v111[1] = SageSearchRequestProcessor.handlePegasusResponse(_:);
        uint64_t v112 = v173;
        return v112();
      }
      uint64_t v64 = v176[33];
      uint64_t v65 = v176[28] + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_attemptedProfileSliceLabels;
      swift_bridgeObjectRetain();
      uint64_t v158 = v65;
      swift_beginAccess();
      uint64_t v66 = 0;
      int v172 = (void (**)(uint64_t, uint64_t))(v64 + 8);
      unsigned int v174 = (void (**)(uint64_t, unint64_t, uint64_t))(v64 + 16);
      unint64_t v67 = v164;
      while (1)
      {
        uint64_t v166 = v36;
        uint64_t v68 = *(void *)v158;
        if (*(void *)(*(void *)v158 + 16))
        {
          uint64_t v161 = v66;
          unint64_t v168 = v45;
          _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
          swift_bridgeObjectRetain();
          unint64_t v69 = v45 + v66 * v46;
          uint64_t v70 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v71 = -1 << *(unsigned char *)(v68 + 32);
          unint64_t v72 = v70 & ~v71;
          if ((*(void *)(v68 + 56 + ((v72 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v72))
          {
            uint64_t v73 = ~v71;
            uint64_t v74 = *v174;
            do
            {
              uint64_t v75 = v176[36];
              uint64_t v76 = v176[32];
              v74(v75, *(void *)(v68 + 48) + v72 * v46, v76);
              _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
              char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*v172)(v75, v76);
              if (v77) {
                break;
              }
              unint64_t v72 = (v72 + 1) & v73;
            }
            while (((*(void *)(v68 + 56 + ((v72 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v72) & 1) != 0);
          }
          else
          {
            char v77 = 0;
          }
          swift_bridgeObjectRelease();
          uint64_t v66 = v161;
          unint64_t v67 = v164;
        }
        else
        {
          unint64_t v69 = v45 + v66 * v46;
          unint64_t v168 = v45;
          char v77 = 0;
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v78 = v176[37];
        uint64_t v79 = v176[32];
        __swift_project_value_buffer(v165, (uint64_t)static Logger.pommes);
        (*v174)(v78, v69, v79);
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.debug.getter();
        BOOL v82 = os_log_type_enabled(v80, v81);
        uint64_t v83 = v176[37];
        uint64_t v84 = v176[32];
        if (v82)
        {
          uint64_t v85 = swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 134218240;
          uint64_t v86 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
          (*v172)(v83, v84);
          *(void *)(v85 + 4) = v86;
          *(_WORD *)(v85 + 12) = 1024;
          *(_DWORD *)(v85 + 14) = v77 & 1;
          _os_log_impl(&dword_1C8F83000, v80, v81, "ProfileSliceLabel %ld previously attempted? %{BOOL}d", (uint8_t *)v85, 0x12u);
          uint64_t v87 = v85;
          unint64_t v67 = v164;
          MEMORY[0x1CB77E470](v87, -1, -1);
        }
        else
        {
          (*v172)(v176[37], v176[32]);
        }
        uint64_t v36 = v166;
        unint64_t v45 = v168;

        if (v77) {
          break;
        }
        if (++v66 == v159)
        {
          swift_release_n();
          goto LABEL_47;
        }
      }
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v90 = 0;
        _os_log_impl(&dword_1C8F83000, v88, v89, "Already attempted profile slice resolution; yielding error response",
          v90,
          2u);
        MEMORY[0x1CB77E470](v90, -1, -1);
      }
      uint64_t v1 = v176;
      uint64_t v91 = v176[48];
      uint64_t v92 = v176[44];

      lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
      swift_allocError();
      *uint64_t v93 = 5;
      swift_willThrow();
      outlined destroy of DefaultExperiencesResolver(v157);
      v156(v91, v92);
LABEL_76:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v112 = (uint64_t (*)(void))v1[1];
      return v112();
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v47 = v1[48];
  uint64_t v48 = static PerformanceUtil.shared;
  uint64_t v49 = swift_task_alloc();
  *(void *)(v49 + 16) = v157;
  *(void *)(v49 + 24) = v47;
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = swift_task_alloc();
  Date.init()();
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t, uint64_t))(*(void *)v48 + 200);
  uint64_t v54 = *(void *)v48 + 200;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v53(0xD00000000000002ALL, 0x80000001C919E6E0, 0, v52, "SiriInformationSearch/SageSearchRequestProcessor.swift", 54, 2, 65, "handlePegasusResponse(_:)", 25, 2, partial apply for closure #4 in SageSearchRequestProcessor.handlePegasusResponse(_:), v49, v55);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v50);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v56 = v1[26];
  if (v56 >> 62)
  {
    swift_bridgeObjectRetain();
    id v57 = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v58 = v1 + 23;
    if (v57)
    {
LABEL_19:
      if ((v56 & 0xC000000000000001) == 0)
      {
        if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v57 = *(id *)(v56 + 32);
          swift_bridgeObjectRelease();
          uint64_t v54 = dispatch thunk of Experience.pluginIdentifier.getter();
          unint64_t v60 = v59;

          if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v61 = *(id *)(v56 + 32);
LABEL_23:
            dispatch thunk of Experience.queryConfidence.getter();
            uint64_t v63 = v62;

            goto LABEL_59;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_86:
        swift_once();
        goto LABEL_71;
      }
      uint64_t v153 = (void *)MEMORY[0x1CB77D510](0, v56);
      swift_bridgeObjectRelease();
      uint64_t v54 = dispatch thunk of Experience.pluginIdentifier.getter();
      unint64_t v60 = v154;

      swift_bridgeObjectRetain();
      id v61 = (id)MEMORY[0x1CB77D510](0, v56);
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  else
  {
    id v57 = *(id *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v58 = v1 + 23;
    if (v57) {
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v60 = 0xE700000000000000;
  uint64_t v54 = 0x6E776F6E6B6E55;
  uint64_t v63 = 0;
LABEL_59:
  uint64_t v114 = (uint64_t)v1 + 428;
  swift_bridgeObjectRetain();
  uint64_t v115 = Logger.logObject.getter();
  os_log_type_t v116 = static os_log_type_t.debug.getter();
  uint64_t v163 = v1 + 24;
  if (os_log_type_enabled(v115, v116))
  {
    uint64_t v160 = v54;
    uint64_t v117 = swift_slowAlloc();
    uint64_t v162 = swift_slowAlloc();
    v177[0] = v162;
    *(_DWORD *)uint64_t v117 = 136315394;
    swift_bridgeObjectRetain();
    v1[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v60, v177);
    uint64_t v114 = (uint64_t)v1 + 428;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v117 + 12) = 2048;
    *uint64_t v58 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v115, v116, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v117, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v162, -1, -1);
    MEMORY[0x1CB77E470](v117, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v54 = (uint64_t)v156;
  *((unsigned char *)v1 + 428) = 0;
  v1[10] = &type metadata for FeatureFlag;
  v1[11] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v118 = swift_allocObject();
  v1[7] = v118;
  *(void *)(v118 + 16) = 6;
  *(void *)(v118 + 24) = 0;
  *(void *)(v118 + 32) = 0;
  *(void *)(v118 + 40) = 0;
  *(unsigned char *)(v118 + 48) = 3;
  char v119 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 7));
  uint64_t v120 = &unk_1EBCB1000;
  if (v119)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v121 = v1[48];
    uint64_t v122 = v1[46];
    uint64_t v123 = v1[44];
    __swift_project_value_buffer(v165, (uint64_t)static Logger.pommes);
    v167(v122, v121, v123);
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.info.getter();
    BOOL v126 = os_log_type_enabled(v124, v125);
    uint64_t v127 = v1[46];
    uint64_t v128 = v1[44];
    if (v126)
    {
      uint64_t v129 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v129 = 67109120;
      int v130 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
      v156(v127, v128);
      *((_DWORD *)v1 + 106) = v130;
      uint64_t v114 = (uint64_t)v1 + 428;
      uint64_t v120 = (void *)&unk_1EBCB1000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v124, v125, "Low confidence knowledge fallback FF is on, Pegasus returned value is: %{BOOL}d", v129, 8u);
      uint64_t v131 = v129;
      uint64_t v54 = (uint64_t)v156;
      MEMORY[0x1CB77E470](v131, -1, -1);
    }
    else
    {
      v156(v1[46], v1[44]);
      uint64_t v114 = (uint64_t)v1 + 428;
    }

    *((unsigned char *)v1 + 428) = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
  }
  uint64_t v132 = v1[48];
  type metadata accessor for PommesResponse();
  uint64_t v133 = (int8x16_t *)swift_task_alloc();
  int8x16_t v134 = *(int8x16_t *)(v1 + 27);
  v133[1].i64[0] = v56;
  v133[1].i64[1] = v132;
  v133[2] = vextq_s8(v134, v134, 8uLL);
  v133[3].i64[0] = v114;
  id v57 = (id)PommesResponse.__allocating_init(_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (!v57)
  {
    uint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v146 = 0;
      _os_log_impl(&dword_1C8F83000, v144, v145, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v146, 2u);
      MEMORY[0x1CB77E470](v146, -1, -1);
    }
    uint64_t v147 = v1[48];
    uint64_t v148 = v1[44];

    lazy protocol witness table accessor for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError();
    swift_allocError();
    *(unsigned char *)uint64_t v149 = 0;
    *(void *)(v149 + 8) = 0xD000000000000051;
    *(void *)(v149 + 16) = 0x80000001C91A4670;
    swift_willThrow();
    outlined destroy of DefaultExperiencesResolver(v157);
    ((void (*)(uint64_t, uint64_t))v54)(v147, v148);
    goto LABEL_76;
  }
  if (v120[280] != -1) {
    goto LABEL_86;
  }
LABEL_71:
  __swift_project_value_buffer(v165, (uint64_t)static Logger.pommes);
  id v175 = v57;
  uint64_t v135 = Logger.logObject.getter();
  os_log_type_t v136 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v135, v136))
  {
    id v137 = (uint8_t *)swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    v177[0] = v138;
    *(_DWORD *)id v137 = 136315138;
    id v139 = objc_msgSend(v175, sel_debugDescription);
    uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v142 = v141;

    uint64_t v143 = v140;
    uint64_t v1 = v176;
    *uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v142, v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v54 = (uint64_t)v156;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v135, v136, "PommesSearchRequestProcessor#handleSuccess response: %s", v137, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v138, -1, -1);
    MEMORY[0x1CB77E470](v137, -1, -1);
  }
  else
  {
  }
  uint64_t v150 = v1[48];
  uint64_t v151 = v1[44];
  outlined destroy of DefaultExperiencesResolver(v157);
  ((void (*)(uint64_t, uint64_t))v54)(v150, v151);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v152 = (uint64_t (*)(id))v1[1];
  return v152(v175);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = v0[48];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v3 = v0[44];
  outlined destroy of DefaultExperiencesResolver((uint64_t)(v0 + 2));
  v2(v1, v3);
  uint64_t v6 = v0[52];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v6);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[48];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v3 = v0[44];
  outlined destroy of DefaultExperiencesResolver((uint64_t)(v0 + 2));
  v2(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #4 in SageSearchRequestProcessor.handlePegasusResponse(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = DefaultExperiencesResolver.buildExperiences(from:with:)(a1, (uint64_t)v6);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  *a2 = v8;
  return result;
}

uint64_t closure #5 in SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v91 = a6;
  uint64_t v89 = a5;
  uint64_t v96 = a4;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v88 = *(void *)(Context - 8);
  MEMORY[0x1F4188790](Context);
  uint64_t v87 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesSearchReason();
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v84 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v82 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v95);
  uint64_t v94 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = (void (*)(void))type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  uint64_t v97 = *((void *)v93 - 1);
  MEMORY[0x1F4188790](v93);
  uint64_t v92 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v83 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  os_log_type_t v81 = (char *)&v81 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v81 - v23;
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  PommesResponse.Builder.clientResults.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  uint64_t v102 = a3;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v27 = v24;
  uint64_t v100 = v18 + 8;
  uint64_t v101 = v17;
  id v98 = v26;
  v26(v24, v17);
  PommesResponse.Builder.metadataDomainName.setter();
  uint64_t v103 = v25;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v90 = Context;
    if (v28) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    PommesResponse.Builder.renderedTexts.setter();
    goto LABEL_17;
  }
  uint64_t v28 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v90 = Context;
  if (!v28) {
    goto LABEL_16;
  }
LABEL_3:
  if (v28 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v29 = 0;
  unint64_t v30 = a2 & 0xC000000000000001;
  do
  {
    if (v30) {
      id v31 = (id)MEMORY[0x1CB77D510](v29, a2);
    }
    else {
      id v31 = *(id *)(a2 + 8 * v29 + 32);
    }
    uint64_t v32 = v31;
    ++v29;
    uint64_t v33 = dispatch thunk of Experience.renderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v33);
  }
  while (v28 != v29);
  swift_bridgeObjectRelease();
  PommesResponse.Builder.renderedTexts.setter();
  uint64_t v103 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  do
  {
    if (v30) {
      id v35 = (id)MEMORY[0x1CB77D510](v34, a2);
    }
    else {
      id v35 = *(id *)(a2 + 8 * v34 + 32);
    }
    uint64_t v36 = v35;
    ++v34;
    uint64_t v37 = dispatch thunk of Experience.redactedRenderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v37);
  }
  while (v28 != v34);
  swift_bridgeObjectRelease();
LABEL_17:
  PommesResponse.Builder.redactedRenderedTexts.setter();
  uint64_t v38 = v27;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v39 = v92;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  uint64_t v99 = a1;
  unint64_t v40 = v98;
  v98(v38, v101);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  unint64_t v41 = *(void (**)(char *, void (*)(void)))(v97 + 8);
  uint64_t v42 = v93;
  v41(v39, v93);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v40(v38, v101);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v41(v39, v42);
  uint64_t result = PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  if (v28)
  {
    if ((a2 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      id v44 = *(id *)(a2 + 32);
      goto LABEL_21;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    id v44 = (id)MEMORY[0x1CB77D510](0, a2);
    swift_bridgeObjectRelease();
LABEL_21:
    dispatch thunk of Experience.listenAfterSpeaking.getter();
  }
  uint64_t v45 = PommesResponse.Builder.listenAfterSpeaking.setter();
  uint64_t v46 = *(void (**)(uint64_t))(*(void *)v96 + 128);
  uint64_t v47 = *(void *)v96 + 128;
  uint64_t v48 = (uint64_t)v94;
  v46(v45);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v48, type metadata accessor for PommesSearchRequest);
  uint64_t v49 = PommesResponse.Builder.requestId.setter();
  uint64_t v92 = (char *)v47;
  uint64_t v93 = v46;
  v46(v49);
  uint64_t v50 = v82;
  PommesSearchRequest.pommesCandidateId.getter(v82);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v48, type metadata accessor for PommesSearchRequest);
  uint64_t v51 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  uint64_t v52 = v81;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v53 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v98(v52, v101);
  int64_t v54 = *(void *)(v53 + 16);
  if (v54)
  {
    uint64_t v103 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
    uint64_t v55 = v103;
    unint64_t v56 = v53 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v57 = *(void *)(v97 + 72);
    do
    {
      uint64_t v58 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      uint64_t v60 = v59;
      uint64_t v103 = v55;
      unint64_t v62 = *(void *)(v55 + 16);
      unint64_t v61 = *(void *)(v55 + 24);
      if (v62 >= v61 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
        uint64_t v55 = v103;
      }
      *(void *)(v55 + 16) = v62 + 1;
      uint64_t v63 = v55 + 16 * v62;
      *(void *)(v63 + 32) = v58;
      *(void *)(v63 + 40) = v60;
      v56 += v57;
      --v54;
    }
    while (v54);
  }
  swift_bridgeObjectRelease();
  PommesResponse.Builder.taskStepLogs.setter();
  uint64_t v64 = v83;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v65 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v98(v64, v101);
  int64_t v66 = *(void *)(v65 + 16);
  if (v66)
  {
    uint64_t v103 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66, 0);
    uint64_t v67 = v103;
    unint64_t v68 = v65 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v69 = *(void *)(v97 + 72);
    do
    {
      uint64_t v70 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      uint64_t v72 = v71;
      uint64_t v103 = v67;
      unint64_t v74 = *(void *)(v67 + 16);
      unint64_t v73 = *(void *)(v67 + 24);
      if (v74 >= v73 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
        uint64_t v67 = v103;
      }
      *(void *)(v67 + 16) = v74 + 1;
      uint64_t v75 = v67 + 16 * v74;
      *(void *)(v75 + 32) = v70;
      *(void *)(v75 + 40) = v72;
      v68 += v69;
      --v66;
    }
    while (v66);
  }
  swift_bridgeObjectRelease();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  PommesResponse.Builder.componentsWarmedUp.setter();
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, *MEMORY[0x1E4F9FE98], v86);
  uint64_t v76 = PommesResponse.Builder.searchReason.setter();
  uint64_t v78 = v93;
  uint64_t v77 = (uint64_t)v94;
  v93(v76);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v77, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.searchRequestUtterance.setter();
  uint64_t v79 = v87;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
  Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v79, v90);
  PommesResponse.Builder.requestCountryCode.setter();
  uint64_t v80 = PommesResponse.Builder.isCachedResponse.setter();
  v78(v80);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v77, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.sharedUserId.setter();
  return PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter();
}

uint64_t SageSearchRequestProcessor.deinit()
{
  swift_release();
  swift_release();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SageSearchRequestProcessor.__deallocating_deinit()
{
  swift_release();
  swift_release();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  CommonAudio.Attribute.rawValue.getter(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_51:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_55;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xEA00000000007473;
    unint64_t v10 = 0x697472416D6F7266;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x676E6F536D6F7266;
        break;
      case 2:
        unint64_t v10 = 0x75626C416D6F7266;
        unint64_t v9 = 0xE90000000000006DLL;
        break;
      case 3:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x7478654E79616C70;
        break;
      case 4:
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x776F4E79616C70;
        break;
      case 5:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x7473614C79616C70;
        break;
      case 6:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x7974696E69666661;
        break;
      case 7:
        unint64_t v10 = 0x6E656D6D6F636572;
        unint64_t v9 = 0xEB00000000646564;
        break;
      case 8:
        unint64_t v9 = 0xE900000000000079;
        unint64_t v10 = 0x7265766F63736964;
        break;
      case 9:
        unint64_t v9 = 0x80000001C919C1E0;
        unint64_t v10 = 0xD000000000000018;
        break;
      case 0xA:
        unint64_t v9 = 0xE400000000000000;
        unint64_t v10 = 1954047342;
        break;
      case 0xB:
        unint64_t v9 = 0xE500000000000000;
        unint64_t v10 = 0x64656D616ELL;
        break;
      case 0xC:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x73756F6976657270;
        break;
      case 0xD:
        unint64_t v10 = 0x44657361656C6572;
        unint64_t v9 = 0xEB00000000657461;
        break;
      case 0xE:
        unint64_t v9 = 0xE800000000000000;
        unint64_t v10 = 0x6E6F697461727564;
        break;
      default:
        break;
    }
    uint64_t v11 = 0x697472416D6F7266;
    unint64_t v12 = 0xEA00000000007473;
    switch((char)a2)
    {
      case 1:
        unint64_t v12 = 0xE800000000000000;
        if (v10 == 0x676E6F536D6F7266) {
          goto LABEL_45;
        }
        goto LABEL_46;
      case 2:
        unint64_t v12 = 0xE90000000000006DLL;
        if (v10 != 0x75626C416D6F7266) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 3:
        unint64_t v12 = 0xE800000000000000;
        if (v10 != 0x7478654E79616C70) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 4:
        unint64_t v12 = 0xE700000000000000;
        if (v10 != 0x776F4E79616C70) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 5:
        unint64_t v12 = 0xE800000000000000;
        if (v10 != 0x7473614C79616C70) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 6:
        unint64_t v12 = 0xE800000000000000;
        if (v10 != 0x7974696E69666661) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 7:
        unint64_t v12 = 0xEB00000000646564;
        if (v10 != 0x6E656D6D6F636572) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 8:
        unint64_t v12 = 0xE900000000000079;
        if (v10 != 0x7265766F63736964) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 9:
        unint64_t v12 = 0x80000001C919C1E0;
        if (v10 != 0xD000000000000018) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 10:
        unint64_t v12 = 0xE400000000000000;
        if (v10 != 1954047342) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 11:
        unint64_t v12 = 0xE500000000000000;
        if (v10 != 0x64656D616ELL) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 12:
        unint64_t v12 = 0xE800000000000000;
        if (v10 != 0x73756F6976657270) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 13:
        uint64_t v11 = 0x44657361656C6572;
        unint64_t v12 = 0xEB00000000657461;
        goto LABEL_44;
      case 14:
        unint64_t v12 = 0xE800000000000000;
        if (v10 != 0x6E6F697461727564) {
          goto LABEL_46;
        }
        goto LABEL_45;
      default:
LABEL_44:
        if (v10 != v11) {
          goto LABEL_46;
        }
LABEL_45:
        if (v9 == v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_54;
        }
LABEL_46:
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_51;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_54:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_55:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  unint64_t v32 = *(void *)(matched - 8);
  uint64_t v7 = MEMORY[0x1F4188790](matched);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v31 = matched;
  uint64_t v13 = *(int *)(matched + 20);
  uint64_t v34 = a2;
  uint64_t v14 = a2 + v13;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  uint64_t v29 = v15;
  uint64_t v30 = v14;
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  uint64_t v19 = v12;
  if ((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    uint64_t v26 = v11;
    uint64_t v27 = v3;
    uint64_t v28 = a1;
    uint64_t v20 = ~v17;
    uint64_t v21 = *(void *)(v32 + 72);
    uint64_t v33 = v12;
    do
    {
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(*(void *)(v19 + 48) + v21 * v18, (uint64_t)v9, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v36 == v35)
      {
        _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
        unint64_t v32 = v21 * v18;
        dispatch thunk of RawRepresentable.rawValue.getter();
        unint64_t v22 = v32;
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v36 == v35)
        {
          _s21SiriInformationSearch06PommesC7RequestVWOhTm_1((uint64_t)v9, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
          swift_bridgeObjectRelease();
          _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(v34, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
          _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(*(void *)(*v27 + 48) + v22, v28, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
          return 0;
        }
      }
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_1((uint64_t)v9, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      unint64_t v18 = (v18 + 1) & v20;
      uint64_t v19 = v33;
    }
    while (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v3 = v27;
    a1 = v28;
    uint64_t v11 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = v34;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(v34, (uint64_t)v11, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  uint64_t v36 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v36;
  swift_bridgeObjectRelease();
  outlined init with take of AudioTypeFeaturiser.ExactMatchKey(v25, a1);
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  unint64_t v48;
  void (**v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v3 = v2;
  id v44 = a1;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1F4188790](v58);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for VideoCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v57 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Swift::Int v16 = (char *)&v41 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v42 = (uint64_t)&v41 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = *v3;
  Hasher.init(_seed:)();
  uint64_t v47 = a2;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v20, &demangling cache variable for type metadata for VideoCategory?);
  uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unint64_t v56 = v8 + 48;
  unint64_t v22 = v55(v20, 1, v7);
  uint64_t v46 = v10;
  if (v22 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v20, v7);
    Hasher._combine(_:)(1u);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v23 = Hasher._finalize()();
  uint64_t v24 = -1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = v23 & ~v24;
  int64_t v54 = v21 + 56;
  uint64_t v26 = *(void *)(v21 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25;
  uint64_t v43 = v3;
  if ((v26 & 1) == 0)
  {
    uint64_t v27 = v47;
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v36 = v43;
    uint64_t v37 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v42;
    outlined init with copy of MediaUserStateCenter?(v37, v42, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v59 = *v36;
    void *v36 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v39, v25, isUniquelyReferenced_nonNull_native);
    void *v36 = v59;
    swift_bridgeObjectRelease();
    outlined init with take of PommesSearchReason?(v37, v44, &demangling cache variable for type metadata for VideoCategory?);
    return 1;
  }
  uint64_t v50 = ~v24;
  uint64_t v52 = *(void *)(v52 + 72);
  uint64_t v53 = v7;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v49 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v27 = v47;
  uint64_t v51 = v21;
  while (1)
  {
    uint64_t v28 = v52 * v25;
    outlined init with copy of MediaUserStateCenter?(*(void *)(v21 + 48) + v52 * v25, (uint64_t)v16, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v29 = (uint64_t)&v6[*(int *)(v58 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v6, &demangling cache variable for type metadata for VideoCategory?);
    outlined init with copy of MediaUserStateCenter?(v27, v29, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v55;
    if (v55(v6, 1, v7) == 1) {
      break;
    }
    uint64_t v48 = v28;
    uint64_t v31 = v27;
    unint64_t v32 = v57;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v57, &demangling cache variable for type metadata for VideoCategory?);
    if (v30(v29, 1, v7) == 1)
    {
      (*v49)(v32, v7);
      uint64_t v27 = v31;
      goto LABEL_7;
    }
    uint64_t v33 = v46;
    (*v45)(v46, v29, v7);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
    uint64_t v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *v49;
    (*v49)((uint64_t)v33, v7);
    v35(v57, v7);
    uint64_t v27 = v47;
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for VideoCategory?);
    if (v34) {
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v21 = v51;
    uint64_t v25 = (v25 + 1) & v50;
    if (((*(void *)(v54 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
      goto LABEL_15;
    }
  }
  if (v30(v29, 1, v7) != 1)
  {
LABEL_7:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for VideoCategory?);
    goto LABEL_8;
  }
  uint64_t v48 = v28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for VideoCategory?);
  uint64_t v27 = v47;
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for VideoCategory?);
LABEL_17:
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for VideoCategory?);
  outlined init with copy of MediaUserStateCenter?(*(void *)(*v43 + 48) + v48, v44, &demangling cache variable for type metadata for VideoCategory?);
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  unint64_t v48;
  void (**v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v3 = v2;
  id v44 = a1;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1F4188790](v58);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StringSearchScope();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v57 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Swift::Int v16 = (char *)&v41 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v42 = (uint64_t)&v41 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = *v3;
  Hasher.init(_seed:)();
  uint64_t v47 = a2;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v20, &demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unint64_t v56 = v8 + 48;
  unint64_t v22 = v55(v20, 1, v7);
  uint64_t v46 = v10;
  if (v22 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v20, v7);
    Hasher._combine(_:)(1u);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v23 = Hasher._finalize()();
  uint64_t v24 = -1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = v23 & ~v24;
  int64_t v54 = v21 + 56;
  uint64_t v26 = *(void *)(v21 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25;
  uint64_t v43 = v3;
  if ((v26 & 1) == 0)
  {
    uint64_t v27 = v47;
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v36 = v43;
    uint64_t v37 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v42;
    outlined init with copy of MediaUserStateCenter?(v37, v42, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v59 = *v36;
    void *v36 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v39, v25, isUniquelyReferenced_nonNull_native);
    void *v36 = v59;
    swift_bridgeObjectRelease();
    outlined init with take of PommesSearchReason?(v37, v44, &demangling cache variable for type metadata for StringSearchScope?);
    return 1;
  }
  uint64_t v50 = ~v24;
  uint64_t v52 = *(void *)(v52 + 72);
  uint64_t v53 = v7;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v49 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v27 = v47;
  uint64_t v51 = v21;
  while (1)
  {
    uint64_t v28 = v52 * v25;
    outlined init with copy of MediaUserStateCenter?(*(void *)(v21 + 48) + v52 * v25, (uint64_t)v16, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v29 = (uint64_t)&v6[*(int *)(v58 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v6, &demangling cache variable for type metadata for StringSearchScope?);
    outlined init with copy of MediaUserStateCenter?(v27, v29, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v55;
    if (v55(v6, 1, v7) == 1) {
      break;
    }
    uint64_t v48 = v28;
    uint64_t v31 = v27;
    unint64_t v32 = v57;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v57, &demangling cache variable for type metadata for StringSearchScope?);
    if (v30(v29, 1, v7) == 1)
    {
      (*v49)(v32, v7);
      uint64_t v27 = v31;
      goto LABEL_7;
    }
    uint64_t v33 = v46;
    (*v45)(v46, v29, v7);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
    uint64_t v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *v49;
    (*v49)((uint64_t)v33, v7);
    v35(v57, v7);
    uint64_t v27 = v47;
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for StringSearchScope?);
    if (v34) {
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v21 = v51;
    uint64_t v25 = (v25 + 1) & v50;
    if (((*(void *)(v54 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
      goto LABEL_15;
    }
  }
  if (v30(v29, 1, v7) != 1)
  {
LABEL_7:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for StringSearchScope?);
    goto LABEL_8;
  }
  uint64_t v48 = v28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v27 = v47;
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_17:
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for StringSearchScope?);
  outlined init with copy of MediaUserStateCenter?(*(void *)(*v43 + 48) + v48, v44, &demangling cache variable for type metadata for StringSearchScope?);
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    Swift::Int v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    unint64_t v7 = ~(-1 << v5);
  }
  else {
    unint64_t v7 = -1;
  }
  int64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    uint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    uint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      uint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        uint64_t v20 = v6[v11];
        if (!v20)
        {
          uint64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          uint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              uint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    int64_t v8 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    unint64_t v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      int64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    uint64_t v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1C916B14CLL);
      }
      unint64_t v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      char v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    int64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  BOOL v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                BOOL v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        uint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v1 = v0;
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v33 = *(void *)(matched - 8);
  uint64_t v34 = matched;
  MEMORY[0x1F4188790](matched);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      unint64_t v10 = ~(-1 << v8);
    }
    else {
      unint64_t v10 = -1;
    }
    int64_t v11 = v10 & v9;
    uint64_t v30 = v0;
    uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    unint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        int64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        uint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          unint64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          uint64_t v19 = v32[v14];
          if (!v19)
          {
            unint64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            uint64_t v19 = v32[v14];
            if (!v19)
            {
              uint64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              uint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  unint64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  uint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v14 = v20;
            }
          }
        }
LABEL_23:
        int64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      outlined init with take of AudioTypeFeaturiser.ExactMatchKey(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
      Hasher.init(_seed:)();
      type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = outlined init with take of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        uint64_t v21 = v13 + 1;
        if (!v20)
        {
          uint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            uint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  uint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        unint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      char v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      BOOL v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      uint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                BOOL v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        uint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        uint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        unint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          unint64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            unint64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                char v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  unint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v19 = result & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        int64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v23 = v20 == v22;
          if (v20 == v22) {
            uint64_t v20 = 0;
          }
          v21 |= v23;
          unint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        int64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (**v44)(char *, uint64_t);
  void (**v45)(char *, char *, uint64_t);
  char *v46;
  int64_t v47;
  void *v48;
  unsigned int (**v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  int64_t v51;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for VideoCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v43 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v14 = v12;
  unint64_t v15 = v13;
  if (*(void *)(v14 + 16))
  {
    uint64_t v43 = v1;
    int64_t v16 = *(unsigned char *)(v14 + 32);
    unint64_t v17 = *(void *)(v14 + 56);
    uint64_t v48 = (void *)(v14 + 56);
    int64_t v18 = 1 << v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    uint64_t v20 = v19 & v17;
    uint64_t v47 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    id v44 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v21 = v13 + 56;
    uint64_t result = swift_retain();
    unint64_t v23 = 0;
    uint64_t v50 = v14;
    while (1)
    {
      if (v20)
      {
        char v25 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        uint64_t v51 = v23;
        unint64_t v26 = v25 | (v23 << 6);
      }
      else
      {
        BOOL v27 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v47) {
          goto LABEL_36;
        }
        uint64_t v28 = v48[v27];
        uint64_t v29 = v23 + 1;
        if (!v28)
        {
          uint64_t v29 = v23 + 2;
          if (v23 + 2 >= v47) {
            goto LABEL_36;
          }
          uint64_t v28 = v48[v29];
          if (!v28)
          {
            uint64_t v29 = v23 + 3;
            if (v23 + 3 >= v47) {
              goto LABEL_36;
            }
            uint64_t v28 = v48[v29];
            if (!v28)
            {
              uint64_t v30 = v23 + 4;
              if (v23 + 4 >= v47)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v43;
                uint64_t v42 = 1 << *(unsigned char *)(v14 + 32);
                if (v42 > 63) {
                  bzero(v48, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v48 = -1 << v42;
                }
                *(void *)(v14 + 16) = 0;
                break;
              }
              uint64_t v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  uint64_t v29 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_42;
                  }
                  if (v29 >= v47) {
                    goto LABEL_36;
                  }
                  uint64_t v28 = v48[v29];
                  ++v30;
                  if (v28) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v29 = v23 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v20 = (v28 - 1) & v28;
        uint64_t v51 = v29;
        unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      uint64_t v31 = *(void *)(v6 + 72);
      outlined init with take of PommesSearchReason?(*(void *)(v14 + 48) + v31 * v26, (uint64_t)v11, &demangling cache variable for type metadata for VideoCategory?);
      Hasher.init(_seed:)();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for VideoCategory?);
      if ((*v49)(v9, 1, v2) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v32 = v6;
        uint64_t v33 = v46;
        (*v45)(v46, v9, v2);
        Hasher._combine(_:)(1u);
        _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v34 = v33;
        uint64_t v6 = v32;
        (*v44)(v34, v2);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v35 = -1 << *(unsigned char *)(v15 + 32);
      uint64_t v36 = result & ~v35;
      uint64_t v37 = v36 >> 6;
      if (((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6))) != 0)
      {
        unint64_t v24 = __clz(__rbit64((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v14 = v50;
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = (unint64_t)(63 - v35) >> 6;
        unint64_t v14 = v50;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v40 = v37 == v39;
          if (v37 == v39) {
            uint64_t v37 = 0;
          }
          v38 |= v40;
          unint64_t v41 = *(void *)(v21 + 8 * v37);
        }
        while (v41 == -1);
        unint64_t v24 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      uint64_t result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(void *)(v15 + 48) + v24 * v31, &demangling cache variable for type metadata for VideoCategory?);
      ++*(void *)(v15 + 16);
      unint64_t v23 = v51;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v15;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (**v44)(char *, uint64_t);
  void (**v45)(char *, char *, uint64_t);
  char *v46;
  int64_t v47;
  void *v48;
  unsigned int (**v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  int64_t v51;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StringSearchScope();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v43 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v14 = v12;
  unint64_t v15 = v13;
  if (*(void *)(v14 + 16))
  {
    uint64_t v43 = v1;
    int64_t v16 = *(unsigned char *)(v14 + 32);
    unint64_t v17 = *(void *)(v14 + 56);
    uint64_t v48 = (void *)(v14 + 56);
    int64_t v18 = 1 << v16;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    uint64_t v20 = v19 & v17;
    uint64_t v47 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    id v44 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v21 = v13 + 56;
    uint64_t result = swift_retain();
    unint64_t v23 = 0;
    uint64_t v50 = v14;
    while (1)
    {
      if (v20)
      {
        char v25 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        uint64_t v51 = v23;
        unint64_t v26 = v25 | (v23 << 6);
      }
      else
      {
        BOOL v27 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v47) {
          goto LABEL_36;
        }
        uint64_t v28 = v48[v27];
        uint64_t v29 = v23 + 1;
        if (!v28)
        {
          uint64_t v29 = v23 + 2;
          if (v23 + 2 >= v47) {
            goto LABEL_36;
          }
          uint64_t v28 = v48[v29];
          if (!v28)
          {
            uint64_t v29 = v23 + 3;
            if (v23 + 3 >= v47) {
              goto LABEL_36;
            }
            uint64_t v28 = v48[v29];
            if (!v28)
            {
              uint64_t v30 = v23 + 4;
              if (v23 + 4 >= v47)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v43;
                uint64_t v42 = 1 << *(unsigned char *)(v14 + 32);
                if (v42 > 63) {
                  bzero(v48, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v48 = -1 << v42;
                }
                *(void *)(v14 + 16) = 0;
                break;
              }
              uint64_t v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  uint64_t v29 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_42;
                  }
                  if (v29 >= v47) {
                    goto LABEL_36;
                  }
                  uint64_t v28 = v48[v29];
                  ++v30;
                  if (v28) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v29 = v23 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v20 = (v28 - 1) & v28;
        uint64_t v51 = v29;
        unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      uint64_t v31 = *(void *)(v6 + 72);
      outlined init with take of PommesSearchReason?(*(void *)(v14 + 48) + v31 * v26, (uint64_t)v11, &demangling cache variable for type metadata for StringSearchScope?);
      Hasher.init(_seed:)();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for StringSearchScope?);
      if ((*v49)(v9, 1, v2) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v32 = v6;
        uint64_t v33 = v46;
        (*v45)(v46, v9, v2);
        Hasher._combine(_:)(1u);
        _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v34 = v33;
        uint64_t v6 = v32;
        (*v44)(v34, v2);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v35 = -1 << *(unsigned char *)(v15 + 32);
      uint64_t v36 = result & ~v35;
      uint64_t v37 = v36 >> 6;
      if (((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6))) != 0)
      {
        unint64_t v24 = __clz(__rbit64((-1 << v36) & ~*(void *)(v21 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v14 = v50;
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = (unint64_t)(63 - v35) >> 6;
        unint64_t v14 = v50;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v40 = v37 == v39;
          if (v37 == v39) {
            uint64_t v37 = 0;
          }
          v38 |= v40;
          unint64_t v41 = *(void *)(v21 + 8 * v37);
        }
        while (v41 == -1);
        unint64_t v24 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(void *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      uint64_t result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(void *)(v15 + 48) + v24 * v31, &demangling cache variable for type metadata for StringSearchScope?);
      ++*(void *)(v15 + 16);
      unint64_t v23 = v51;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v15;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_58;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    CommonAudio.Attribute.rawValue.getter(v5);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xEA00000000007473;
        unint64_t v12 = 0x697472416D6F7266;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x676E6F536D6F7266;
            break;
          case 2:
            unint64_t v12 = 0x75626C416D6F7266;
            unint64_t v11 = 0xE90000000000006DLL;
            break;
          case 3:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x7478654E79616C70;
            break;
          case 4:
            unint64_t v11 = 0xE700000000000000;
            unint64_t v12 = 0x776F4E79616C70;
            break;
          case 5:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x7473614C79616C70;
            break;
          case 6:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x7974696E69666661;
            break;
          case 7:
            unint64_t v12 = 0x6E656D6D6F636572;
            unint64_t v11 = 0xEB00000000646564;
            break;
          case 8:
            unint64_t v11 = 0xE900000000000079;
            unint64_t v12 = 0x7265766F63736964;
            break;
          case 9:
            unint64_t v11 = 0x80000001C919C1E0;
            unint64_t v12 = 0xD000000000000018;
            break;
          case 0xA:
            unint64_t v11 = 0xE400000000000000;
            unint64_t v12 = 1954047342;
            break;
          case 0xB:
            unint64_t v11 = 0xE500000000000000;
            unint64_t v12 = 0x64656D616ELL;
            break;
          case 0xC:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x73756F6976657270;
            break;
          case 0xD:
            unint64_t v12 = 0x44657361656C6572;
            unint64_t v11 = 0xEB00000000657461;
            break;
          case 0xE:
            unint64_t v11 = 0xE800000000000000;
            unint64_t v12 = 0x6E6F697461727564;
            break;
          default:
            break;
        }
        uint64_t v13 = 0x697472416D6F7266;
        unint64_t v14 = 0xEA00000000007473;
        switch(v5)
        {
          case 1:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x676E6F536D6F7266) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 2:
            unint64_t v14 = 0xE90000000000006DLL;
            if (v12 != 0x75626C416D6F7266) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 3:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x7478654E79616C70) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 4:
            unint64_t v14 = 0xE700000000000000;
            if (v12 != 0x776F4E79616C70) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 5:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x7473614C79616C70) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 6:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x7974696E69666661) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 7:
            uint64_t v15 = 0x6E656D6D6F636572;
            uint64_t v16 = 6579556;
            goto LABEL_48;
          case 8:
            unint64_t v14 = 0xE900000000000079;
            uint64_t v13 = 0x7265766F63736964;
            goto LABEL_51;
          case 9:
            unint64_t v14 = 0x80000001C919C1E0;
            if (v12 != 0xD000000000000018) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 10:
            unint64_t v14 = 0xE400000000000000;
            if (v12 != 1954047342) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 11:
            unint64_t v14 = 0xE500000000000000;
            if (v12 != 0x64656D616ELL) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 12:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x73756F6976657270) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 13:
            uint64_t v15 = 0x44657361656C6572;
            uint64_t v16 = 6648929;
LABEL_48:
            unint64_t v14 = v16 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v12 != v15) {
              goto LABEL_53;
            }
            goto LABEL_52;
          case 14:
            unint64_t v14 = 0xE800000000000000;
            if (v12 != 0x6E6F697461727564) {
              goto LABEL_53;
            }
            goto LABEL_52;
          default:
LABEL_51:
            if (v12 != v13) {
              goto LABEL_53;
            }
LABEL_52:
            if (v11 == v14) {
              goto LABEL_61;
            }
LABEL_53:
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            unint64_t result = swift_bridgeObjectRelease();
            if (v17) {
              goto LABEL_62;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_58:
  uint64_t v18 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v18 + 48) + a2) = v5;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease_n();
LABEL_62:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1C916D528);
  }
  *(void *)(v18 + 16) = v21;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v28 = a1;
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v6 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(*v3 + 16);
  unint64_t v10 = *(void *)(*v3 + 24);
  uint64_t v24 = v6;
  char v25 = v3;
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
  uint64_t v12 = v28;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = v12 + *(int *)(matched + 20);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  uint64_t v26 = v13;
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
  a2 = v14 & ~v15;
  if ((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v15;
    uint64_t v17 = *(void *)(v6 + 72);
    while (1)
    {
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(*(void *)(v11 + 48) + v17 * a2, (uint64_t)v8, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v30 == v29)
      {
        _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v30 == v29) {
          break;
        }
      }
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_1((uint64_t)v8, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      a2 = (a2 + 1) & v16;
      if (((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_1((uint64_t)v8, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  uint64_t v18 = *v25;
  *(void *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of AudioTypeFeaturiser.ExactMatchKey(v28, *(void *)(v18 + 48) + *(void *)(v24 + 72) * a2);
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v22;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  uint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  Swift::Int v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      BOOL v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  char v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1);
  BOOL v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (**v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v55 = a1;
  int64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1F4188790](v54);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VideoCategory();
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  Swift::Int v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v42 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  BOOL v21 = *(void *)(*v3 + 16);
  uint64_t v22 = *(void *)(*v3 + 24);
  uint64_t v43 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if (a3)
    {
      uint64_t v42 = v18;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v22 > v21)
      {
        specialized _NativeSet.copy()(&demangling cache variable for type metadata for VideoCategory?, &demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
        goto LABEL_21;
      }
      uint64_t v42 = v18;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v23 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?(v55, (uint64_t)v20, &demangling cache variable for type metadata for VideoCategory?);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v53 = v9 + 48;
    uint64_t v24 = v52(v20, 1, v8);
    uint64_t v46 = v23;
    if (v24 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      char v25 = v14;
      uint64_t v26 = v47;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v47, v20, v8);
      Hasher._combine(_:)(1u);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
      dispatch thunk of Hashable.hash(into:)();
      BOOL v27 = v26;
      Swift::Int v14 = v25;
      uint64_t v23 = v46;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
    }
    uint64_t v28 = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v23 + 32);
    a2 = v28 & ~v29;
    uint64_t v51 = v23 + 56;
    if ((*(void *)(v23 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v50 = ~v29;
      uint64_t v30 = *(void *)(v45 + 72);
      id v44 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
      uint64_t v48 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v49 = v30;
      do
      {
        outlined init with copy of MediaUserStateCenter?(*(void *)(v23 + 48) + v49 * a2, (uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
        uint64_t v35 = (uint64_t)&v7[*(int *)(v54 + 48)];
        outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v7, &demangling cache variable for type metadata for VideoCategory?);
        outlined init with copy of MediaUserStateCenter?(v55, v35, &demangling cache variable for type metadata for VideoCategory?);
        uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
        if (v52(v7, 1, v8) == 1)
        {
          if (v36(v35, 1, v8) == 1) {
            goto LABEL_24;
          }
        }
        else
        {
          outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v14, &demangling cache variable for type metadata for VideoCategory?);
          if (v36(v35, 1, v8) != 1)
          {
            uint64_t v31 = v47;
            (*v44)(v47, v35, v8);
            _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
            uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v33 = *v48;
            uint64_t v34 = v31;
            uint64_t v23 = v46;
            (*v48)(v34, v8);
            v33(v14, v8);
            outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for VideoCategory?);
            outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
            if (v32) {
              goto LABEL_25;
            }
            goto LABEL_14;
          }
          (*v48)(v14, v8);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
LABEL_14:
        a2 = (a2 + 1) & v50;
      }
      while (((*(void *)(v51 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  uint64_t v37 = *v43;
  *(void *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of PommesSearchReason?(v55, *(void *)(v37 + 48) + *(void *)(v45 + 72) * a2, &demangling cache variable for type metadata for VideoCategory?);
  uint64_t v39 = *(void *)(v37 + 16);
  unint64_t v40 = __OFADD__(v39, 1);
  unint64_t v41 = v39 + 1;
  if (v40)
  {
    __break(1u);
LABEL_24:
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
LABEL_25:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v37 + 16) = v41;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (**v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v55 = a1;
  int64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1F4188790](v54);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StringSearchScope();
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  Swift::Int v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v42 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  BOOL v21 = *(void *)(*v3 + 16);
  uint64_t v22 = *(void *)(*v3 + 24);
  uint64_t v43 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if (a3)
    {
      uint64_t v42 = v18;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v22 > v21)
      {
        specialized _NativeSet.copy()(&demangling cache variable for type metadata for StringSearchScope?, &demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
        goto LABEL_21;
      }
      uint64_t v42 = v18;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v23 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?(v55, (uint64_t)v20, &demangling cache variable for type metadata for StringSearchScope?);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v53 = v9 + 48;
    uint64_t v24 = v52(v20, 1, v8);
    uint64_t v46 = v23;
    if (v24 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      char v25 = v14;
      uint64_t v26 = v47;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v47, v20, v8);
      Hasher._combine(_:)(1u);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
      dispatch thunk of Hashable.hash(into:)();
      BOOL v27 = v26;
      Swift::Int v14 = v25;
      uint64_t v23 = v46;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
    }
    uint64_t v28 = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v23 + 32);
    a2 = v28 & ~v29;
    uint64_t v51 = v23 + 56;
    if ((*(void *)(v23 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v50 = ~v29;
      uint64_t v30 = *(void *)(v45 + 72);
      id v44 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
      uint64_t v48 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v49 = v30;
      do
      {
        outlined init with copy of MediaUserStateCenter?(*(void *)(v23 + 48) + v49 * a2, (uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
        uint64_t v35 = (uint64_t)&v7[*(int *)(v54 + 48)];
        outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v7, &demangling cache variable for type metadata for StringSearchScope?);
        outlined init with copy of MediaUserStateCenter?(v55, v35, &demangling cache variable for type metadata for StringSearchScope?);
        uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
        if (v52(v7, 1, v8) == 1)
        {
          if (v36(v35, 1, v8) == 1) {
            goto LABEL_24;
          }
        }
        else
        {
          outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v14, &demangling cache variable for type metadata for StringSearchScope?);
          if (v36(v35, 1, v8) != 1)
          {
            uint64_t v31 = v47;
            (*v44)(v47, v35, v8);
            _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
            uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v33 = *v48;
            uint64_t v34 = v31;
            uint64_t v23 = v46;
            (*v48)(v34, v8);
            v33(v14, v8);
            outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for StringSearchScope?);
            outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
            if (v32) {
              goto LABEL_25;
            }
            goto LABEL_14;
          }
          (*v48)(v14, v8);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_14:
        a2 = (a2 + 1) & v50;
      }
      while (((*(void *)(v51 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  uint64_t v37 = *v43;
  *(void *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of PommesSearchReason?(v55, *(void *)(v37 + 48) + *(void *)(v45 + 72) * a2, &demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v39 = *(void *)(v37 + 16);
  unint64_t v40 = __OFADD__(v39, 1);
  unint64_t v41 = v39 + 1;
  if (v40)
  {
    __break(1u);
LABEL_24:
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_25:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v37 + 16) = v41;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  uint64_t v1 = v0;
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v3 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  uint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      unint64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        unint64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    uint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(*(void *)(v6 + 48) + v19, (uint64_t)v5, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    uint64_t result = (void *)outlined init with take of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    unint64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      uint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        uint64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        uint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  uint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    uint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  int64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v5 = v12;
    return result;
  }
  uint64_t v29 = v5;
  id result = (void *)(v11 + 56);
  uint64_t v14 = v10 + 56;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v21) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v17);
      if (!v26)
      {
        int64_t v17 = v25 + 2;
        if (v25 + 2 >= v21) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v14 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    unint64_t v24 = *(void *)(v7 + 72) * v23;
    outlined init with copy of MediaUserStateCenter?(*(void *)(v10 + 48) + v24, (uint64_t)v9, a1);
    id result = (void *)outlined init with take of PommesSearchReason?((uint64_t)v9, *(void *)(v12 + 48) + v24, a1);
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v5 = v29;
    goto LABEL_30;
  }
  unint64_t v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    int64_t v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v17 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    uint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          uint64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          uint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              uint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    unint64_t v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = Hasher._finalize()();
    int64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      int64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    uint64_t v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x1C91701D0);
      }
      unint64_t v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      char v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    int64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        char v25 = v22 == v24;
        if (v22 == v24) {
          uint64_t v22 = 0;
        }
        v23 |= v25;
        unint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      int64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = v0;
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v32 = *(void *)(matched - 8);
  uint64_t v33 = matched;
  MEMORY[0x1F4188790](matched);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  unint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  int64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  int64_t v11 = v10 & v9;
  uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      int64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      unint64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      uint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        unint64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        uint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    Hasher.init(_seed:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = outlined init with take of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
    ++*(void *)(v7 + 16);
  }
  uint64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  uint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    unint64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  int64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        uint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    char v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v4 + 40);
    uint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        BOOL v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      int64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  char v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      int64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v23 = v20 == v22;
        if (v20 == v22) {
          uint64_t v20 = 0;
        }
        v21 |= v23;
        unint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      int64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  int64_t i;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  void (**v45)(char *, uint64_t);
  void (**v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  int64_t v49;
  unsigned int (**v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  int64_t v52;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for VideoCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v44 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
  int64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v14;
    return result;
  }
  unint64_t v15 = *(unsigned char *)(v12 + 32);
  int64_t v16 = *(void *)(v12 + 56);
  uint64_t v48 = v12 + 56;
  unint64_t v17 = 1 << v15;
  if (v17 < 64) {
    int64_t v18 = ~(-1 << v17);
  }
  else {
    int64_t v18 = -1;
  }
  uint64_t v19 = v18 & v16;
  uint64_t v49 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v46 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  id v44 = v1;
  uint64_t v45 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v20 = v13 + 56;
  uint64_t result = swift_retain();
  uint64_t v22 = v19;
  for (uint64_t i = 0; ; uint64_t i = v52)
  {
    if (v22)
    {
      uint64_t v51 = (v22 - 1) & v22;
      uint64_t v52 = i;
      char v25 = __clz(__rbit64(v22)) | (i << 6);
      goto LABEL_24;
    }
    unint64_t v26 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v49) {
      goto LABEL_36;
    }
    BOOL v27 = *(void *)(v48 + 8 * v26);
    uint64_t v28 = i + 1;
    if (!v27)
    {
      uint64_t v28 = i + 2;
      if (i + 2 >= v49) {
        goto LABEL_36;
      }
      BOOL v27 = *(void *)(v48 + 8 * v28);
      if (!v27)
      {
        uint64_t v28 = i + 3;
        if (i + 3 >= v49) {
          goto LABEL_36;
        }
        BOOL v27 = *(void *)(v48 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v51 = (v27 - 1) & v27;
    uint64_t v52 = v28;
    char v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_24:
    uint64_t v30 = *(void *)(v6 + 72);
    outlined init with copy of MediaUserStateCenter?(*(void *)(v12 + 48) + v30 * v25, (uint64_t)v11, &demangling cache variable for type metadata for VideoCategory?);
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for VideoCategory?);
    if ((*v50)(v9, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v31 = v14;
      uint64_t v32 = v11;
      uint64_t v33 = v12;
      uint64_t v34 = v6;
      uint64_t v35 = v47;
      (*v46)(v47, v9, v2);
      Hasher._combine(_:)(1u);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, MEMORY[0x1E4F183D0]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v36 = v35;
      uint64_t v6 = v34;
      unint64_t v12 = v33;
      int64_t v11 = v32;
      unint64_t v14 = v31;
      (*v45)(v36, v2);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v37 = -1 << *(unsigned char *)(v14 + 32);
    uint64_t v38 = result & ~v37;
    uint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          uint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v20 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(void *)(v14 + 48) + v24 * v30, &demangling cache variable for type metadata for VideoCategory?);
    ++*(void *)(v14 + 16);
    uint64_t v22 = v51;
  }
  int64_t v29 = i + 4;
  if (i + 4 >= v49)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v44;
    goto LABEL_38;
  }
  BOOL v27 = *(void *)(v48 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v49) {
      goto LABEL_36;
    }
    BOOL v27 = *(void *)(v48 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  int64_t i;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  void (**v45)(char *, uint64_t);
  void (**v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  int64_t v49;
  unsigned int (**v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  int64_t v52;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StringSearchScope();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v44 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
  int64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v14;
    return result;
  }
  unint64_t v15 = *(unsigned char *)(v12 + 32);
  int64_t v16 = *(void *)(v12 + 56);
  uint64_t v48 = v12 + 56;
  unint64_t v17 = 1 << v15;
  if (v17 < 64) {
    int64_t v18 = ~(-1 << v17);
  }
  else {
    int64_t v18 = -1;
  }
  uint64_t v19 = v18 & v16;
  uint64_t v49 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v46 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  id v44 = v1;
  uint64_t v45 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v20 = v13 + 56;
  uint64_t result = swift_retain();
  uint64_t v22 = v19;
  for (uint64_t i = 0; ; uint64_t i = v52)
  {
    if (v22)
    {
      uint64_t v51 = (v22 - 1) & v22;
      uint64_t v52 = i;
      char v25 = __clz(__rbit64(v22)) | (i << 6);
      goto LABEL_24;
    }
    unint64_t v26 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v49) {
      goto LABEL_36;
    }
    BOOL v27 = *(void *)(v48 + 8 * v26);
    uint64_t v28 = i + 1;
    if (!v27)
    {
      uint64_t v28 = i + 2;
      if (i + 2 >= v49) {
        goto LABEL_36;
      }
      BOOL v27 = *(void *)(v48 + 8 * v28);
      if (!v27)
      {
        uint64_t v28 = i + 3;
        if (i + 3 >= v49) {
          goto LABEL_36;
        }
        BOOL v27 = *(void *)(v48 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v51 = (v27 - 1) & v27;
    uint64_t v52 = v28;
    char v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_24:
    uint64_t v30 = *(void *)(v6 + 72);
    outlined init with copy of MediaUserStateCenter?(*(void *)(v12 + 48) + v30 * v25, (uint64_t)v11, &demangling cache variable for type metadata for StringSearchScope?);
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for StringSearchScope?);
    if ((*v50)(v9, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v31 = v14;
      uint64_t v32 = v11;
      uint64_t v33 = v12;
      uint64_t v34 = v6;
      uint64_t v35 = v47;
      (*v46)(v47, v9, v2);
      Hasher._combine(_:)(1u);
      _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, MEMORY[0x1E4F18550]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v36 = v35;
      uint64_t v6 = v34;
      unint64_t v12 = v33;
      int64_t v11 = v32;
      unint64_t v14 = v31;
      (*v45)(v36, v2);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v37 = -1 << *(unsigned char *)(v14 + 32);
    uint64_t v38 = result & ~v37;
    uint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          uint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v20 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(void *)(v14 + 48) + v24 * v30, &demangling cache variable for type metadata for StringSearchScope?);
    ++*(void *)(v14 + 16);
    uint64_t v22 = v51;
  }
  int64_t v29 = i + 4;
  if (i + 4 >= v49)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v44;
    goto LABEL_38;
  }
  BOOL v27 = *(void *)(v48 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v49) {
      goto LABEL_36;
    }
    BOOL v27 = *(void *)(v48 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v8 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = v8;
  *(void *)(v4 + 24) = v9;
  *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_attemptedProfileSliceLabels) = MEMORY[0x1E4FBC870];
  *(void *)(v4 + 16) = a1;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(a2, v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_clientEntities) = a3;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  swift_retain();
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v25[0] = 0xD000000000000026;
  v25[1] = 0x80000001C91A46D0;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  int64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v18 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v19);
  v25[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, void))(v22 + 104))((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(a2, type metadata accessor for PommesSearchRequest);
  *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_requestQueue) = v23;
  return v4;
}

uint64_t sub_1C9171FDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 128))();
}

uint64_t sub_1C9172024@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t ObjC metadata update function for SageSearchRequestProcessor()
{
  return type metadata accessor for SageSearchRequestProcessor();
}

uint64_t type metadata accessor for SageSearchRequestProcessor()
{
  uint64_t result = type metadata singleton initialization cache for SageSearchRequestProcessor;
  if (!type metadata singleton initialization cache for SageSearchRequestProcessor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SageSearchRequestProcessor()
{
  uint64_t result = type metadata accessor for PommesSearchRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SageSearchRequestProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SageSearchRequestProcessor);
}

uint64_t dispatch thunk of SageSearchRequestProcessor.pommesSearchRequest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.clientEntities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.__allocating_init(remoteClient:pommesSearchRequest:clientEntities:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.search()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 208) + **(int **)(*(void *)v0 + 208));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v4();
}

uint64_t partial apply for closure #4 in SageSearchRequestProcessor.handlePegasusResponse(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #4 in SageSearchRequestProcessor.handlePegasusResponse(_:)(*(void *)(v1 + 24), a1);
}

uint64_t sub_1C9172308()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t partial apply for closure #5 in SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1)
{
  return closure #5 in SageSearchRequestProcessor.handlePegasusResponse(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

unint64_t lazy protocol witness table accessor for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError()
{
  unint64_t result = lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError;
  if (!lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError);
  }
  return result;
}

uint64_t outlined init with take of AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2)
{
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(matched - 8) + 32))(a2, a1, matched);
  return a2;
}

uint64_t _s10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceLabelOACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id static PegasusOverrideUtil.overrideSupportsGenerativeModelSystems.getter()
{
  return static PegasusOverrideUtil.overrideSupportsGenerativeModelSystems.getter(0xD00000000000002CLL, 0x80000001C91A1F20);
}

id static PegasusOverrideUtil.overrideIsSAERequest.getter()
{
  return static PegasusOverrideUtil.overrideSupportsGenerativeModelSystems.getter(0xD00000000000001ALL, 0x80000001C91A1FA0);
}

id static PegasusOverrideUtil.overrideSupportsGenerativeModelSystems.getter(uint64_t a1, uint64_t a2)
{
  if (!AFIsInternalInstall()) {
    return 0;
  }
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v5 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v6 = objc_msgSend(v4, sel_initWithSuiteName_, v5);

  if (!v6) {
    return 0;
  }
  uint64_t v7 = (void *)MEMORY[0x1CB77CA90](a1, a2);
  id v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  return v8;
}

id static PegasusOverrideUtil.overrideTreatRandomAsFirst.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000020, 0x80000001C91A3570);
  id v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

unint64_t static PegasusOverrideUtil.overridesDomain.getter()
{
  return 0xD000000000000011;
}

unint64_t static PegasusOverrideUtil.overrideFeatureFlagKey.getter()
{
  return 0xD000000000000027;
}

unint64_t static PegasusOverrideUtil.overrideTreatRandomAsFirstKey.getter()
{
  return 0xD000000000000020;
}

unint64_t static PegasusOverrideUtil.overrideSupportsGenerativeModelSystemsKey.getter()
{
  return 0xD00000000000002CLL;
}

unint64_t static PegasusOverrideUtil.overrideIsSAERequestKey.getter()
{
  return 0xD00000000000001ALL;
}

char *PegasusOverrideUtil.enablePromptContextLogging.unsafeMutableAddressor()
{
  return &static PegasusOverrideUtil.enablePromptContextLogging;
}

uint64_t static PegasusOverrideUtil.enablePromptContextLogging.getter()
{
  return static PegasusOverrideUtil.enablePromptContextLogging;
}

uint64_t static PegasusOverrideUtil.enablePromptContextLogging.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static PegasusOverrideUtil.enablePromptContextLogging = a1;
  return result;
}

uint64_t (*static PegasusOverrideUtil.enablePromptContextLogging.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

void *one-time initialization function for overrideKeyHeaderKeyDict()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for overrideKeyHeaderKeyDict);
  static PegasusOverrideUtil.overrideKeyHeaderKeyDict = result;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::String v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    Swift::String v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *Swift::String v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v41 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v41;
    if ((*(void *)(v41 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v38 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      int64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v38(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        lazy protocol witness table accessor for type PommesCandidateId and conformance PommesCandidateId();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v39)
        {
          if (v19 < v39 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v39 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        uint64_t v22 = *(void *)(a2 + 48);
        unint64_t v23 = v22 + v15 * a1;
        unint64_t v24 = v22 + v17 + v15;
        if (v15 * a1 < v17 || v23 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v15 * a1 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v26 = *(void *)(a2 + 56);
        uint64_t v27 = *(void *)(*(void *)(type metadata accessor for PommesBridgeResultCandidateState(0) - 8) + 72);
        int64_t v28 = v27 * a1;
        unint64_t result = v26 + v27 * a1;
        int64_t v29 = v27 * v10;
        unint64_t v30 = v26 + v27 * v10 + v27;
        if (v28 < v29 || result >= v30)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v28 == v29) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v41;
      }
      while (((*(void *)(v41 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v32 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v32 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1 << a1) - 1;
  }
  *uint64_t v32 = v34 & v33;
  uint64_t v35 = *(void *)(a2 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized static PegasusOverrideUtil.pairedDeviceOverrideValue(forKey:)(uint64_t a1, void *a2)
{
  if (!AFIsInternalInstall()) {
    return 0;
  }
  v20[1] = 0x80000001C91A4730;
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  id v5 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  unint64_t v6 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (!v7) {
    goto LABEL_14;
  }
  unint64_t v8 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001BLL, 0x80000001C91A4730);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_stringForKey_, v8);

  if (!v9)
  {

    return 0;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {

LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.overrides);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v20[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v15, v16, "POMMES override enabled for paired device value %s header! Using value “%s”", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v18, -1, -1);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t specialized static PegasusOverrideUtil.requestFeatureFlag.getter()
{
  if (!AFIsInternalInstall()) {
    return 0;
  }
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0;
  }
  int64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000027, 0x80000001C91A4700);
  id v4 = objc_msgSend(v2, sel_stringForKey_, v3);

  if (!v4)
  {

    return 0;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.overrides);
  swift_bridgeObjectRetain_n();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v14 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v9, v10, "POMMES override enabled for Pegasus request feature flag! Using flag %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return v5;
}

uint64_t specialized static PegasusOverrideUtil.getHeaderOverrideValue(overrideKey:headerKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!AFIsInternalInstall()) {
    return 0;
  }
  id v8 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  id v9 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v10 = objc_msgSend(v8, sel_initWithSuiteName_, v9);

  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)MEMORY[0x1CB77CA90](a1, a2);
  id v12 = objc_msgSend(v10, sel_stringForKey_, v11);

  if (!v12)
  {

    return 0;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.overrides);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v23 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v18, v19, "POMMES override enabled for %s header! Using value “%s”", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v21, -1, -1);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return v13;
}

uint64_t specialized static PegasusOverrideUtil.headerOverrides.getter()
{
  id v0 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if (one-time initialization token for overrideKeyHeaderKeyDict != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v1 = static PegasusOverrideUtil.overrideKeyHeaderKeyDict;
  id v2 = (char *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 64;
  uint64_t v3 = 1 << *((unsigned char *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *((void *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 8);
  int64_t v43 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  for (i = v2; ; id v2 = i)
  {
    while (1)
    {
      if (v5)
      {
        unint64_t v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v8 = v7 | (v6 << 6);
      }
      else
      {
        int64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v9 >= v43) {
          goto LABEL_39;
        }
        unint64_t v10 = *(void *)&v2[8 * v9];
        ++v6;
        if (!v10)
        {
          int64_t v6 = v9 + 1;
          if (v9 + 1 >= v43) {
            goto LABEL_39;
          }
          unint64_t v10 = *(void *)&v2[8 * v6];
          if (!v10)
          {
            int64_t v6 = v9 + 2;
            if (v9 + 2 >= v43) {
              goto LABEL_39;
            }
            unint64_t v10 = *(void *)&v2[8 * v6];
            if (!v10)
            {
              int64_t v11 = v9 + 3;
              if (v11 >= v43)
              {
LABEL_39:
                swift_release();
                return (uint64_t)v0;
              }
              unint64_t v10 = *(void *)&v2[8 * v11];
              if (!v10)
              {
                while (1)
                {
                  int64_t v6 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_41;
                  }
                  if (v6 >= v43) {
                    goto LABEL_39;
                  }
                  unint64_t v10 = *(void *)&v2[8 * v6];
                  ++v11;
                  if (v10) {
                    goto LABEL_21;
                  }
                }
              }
              int64_t v6 = v11;
            }
          }
        }
LABEL_21:
        unint64_t v5 = (v10 - 1) & v10;
        unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
      }
      uint64_t v12 = 16 * v8;
      uint64_t v13 = (uint64_t *)(v1[6] + v12);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      uint64_t v16 = (uint64_t *)(v1[7] + v12);
      uint64_t v18 = *v16;
      unint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = specialized static PegasusOverrideUtil.getHeaderOverrideValue(overrideKey:headerKey:)(v14, v15, v18, v17);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      if (v21) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if (v24)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        swift_bridgeObjectRelease();
        specialized _NativeDictionary._delete(at:)(v22, (uint64_t)v0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    uint64_t v28 = v0[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_42;
    }
    if (v0[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v26) {
          goto LABEL_34;
        }
      }
      else
      {
        char v34 = v26;
        specialized _NativeDictionary.copy()();
        if (v34) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      char v41 = v26;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      if ((v41 & 1) != (v32 & 1)) {
        goto LABEL_45;
      }
      unint64_t v27 = v31;
      if (v41)
      {
LABEL_34:
        uint64_t v33 = (uint64_t *)(v0[7] + 16 * v27);
        swift_bridgeObjectRelease();
        uint64_t *v33 = v19;
        v33[1] = v21;
        goto LABEL_38;
      }
    }
    v0[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v35 = (uint64_t *)(v0[6] + 16 * v27);
    *uint64_t v35 = v18;
    v35[1] = v17;
    BOOL v36 = (uint64_t *)(v0[7] + 16 * v27);
    uint64_t *v36 = v19;
    v36[1] = v21;
    uint64_t v37 = v0[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      break;
    }
    v0[2] = v39;
    swift_bridgeObjectRetain();
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_45:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PegasusOverrideUtil()
{
  return &type metadata for PegasusOverrideUtil;
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId and conformance PommesCandidateId()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId;
  if (!lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId)
  {
    type metadata accessor for PommesCandidateId();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId);
  }
  return result;
}

uint64_t static NowPlayingInfo.createIdentifierUrl(scheme:host:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10 = type metadata accessor for URLComponents();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  MEMORY[0x1CB776780](a3, a4);
  v17[0] = 47;
  v17[1] = 0xE100000000000000;
  v14._uint64_t countAndFlagsBits = a5;
  v14._object = a6;
  String.append(_:)(v14);
  URLComponents.path.setter();
  uint64_t v15 = URLComponents.string.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v15;
}

void *NowPlayingInfo.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = v10;
  if (a1)
  {
    if (a3) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = a2;
    }
    void v10[2] = a1;
    v10[3] = v12;
    if (a5) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = 0xE000000000000000;
    if (a5) {
      unint64_t v14 = a5;
    }
    void v10[4] = v13;
    v10[5] = v14;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v11;
}

uint64_t NowPlayingInfo.state.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NowPlayingInfo.applicationBundleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *NowPlayingInfo.init(_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  if (a1)
  {
    if (a3) {
      a2 = 0;
    }
    v5[2] = a1;
    v5[3] = a2;
    if (a5) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = 0xE000000000000000;
    if (a5) {
      unint64_t v8 = a5;
    }
    v5[4] = v7;
    v5[5] = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for NowPlayingInfo();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

void NowPlayingInfo.externalContentIdentifier.getter()
{
  if (*MEMORY[0x1E4F774E0])
  {
    if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v6, 0, sizeof(v6));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v7[3])
    {
      if (swift_dynamicCast())
      {
        v7[0] = v5[0];
        v7[1] = v5[1];
        uint64_t v1 = type metadata accessor for CharacterSet();
        uint64_t v2 = *(void *)(v1 - 8);
        MEMORY[0x1F4188790](v1);
        uint64_t v4 = (char *)v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
        static CharacterSet.urlPathAllowed.getter();
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
}

void NowPlayingInfo.uniqueIdentifier.getter()
{
  if (*MEMORY[0x1E4F77630])
  {
    if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(v22, v23);
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v22);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSString);
      if (swift_dynamicCast())
      {
        uint64_t v1 = (void *)v21[0];
        uint64_t v2 = type metadata accessor for CharacterSet();
        uint64_t v3 = *(void *)(v2 - 8);
        MEMORY[0x1F4188790](v2);
        unint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
        static CharacterSet.urlPathAllowed.getter();
        Class isa = CharacterSet._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        id v7 = objc_msgSend(v1, sel_stringByAddingPercentEncodingWithAllowedCharacters_, isa);

        if (v7)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        goto LABEL_14;
      }
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        unint64_t v8 = (void *)v21[0];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_1C91947A0;
        id v10 = objc_msgSend(v8, sel_longLongValue);
        uint64_t v11 = MEMORY[0x1E4FBC240];
        *(void *)(v9 + 56) = MEMORY[0x1E4FBC1C8];
        *(void *)(v9 + 64) = v11;
        *(void *)(v9 + 32) = v10;
        String.init(format:_:)();

LABEL_14:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v21);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v20 = v16;
        *(_DWORD *)uint64_t v15 = 136315138;
        __swift_project_boxed_opaque_existential_1(v21, v21[3]);
        swift_getDynamicType();
        uint64_t v17 = _typeName(_:qualified:)();
        uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        _os_log_impl(&dword_1C8F83000, v13, v14, "Bad NowPlayingInfo, kMRMediaRemoteNowPlayingInfoUniqueIdentifier gave unexpected item of class %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v16, -1, -1);
        MEMORY[0x1CB77E470](v15, -1, -1);
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
  }
  else
  {
    __break(1u);
  }
}

void static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  outlined init with copy of Any(a1, (uint64_t)v35);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    outlined init with copy of Any(a1, (uint64_t)v35);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v14))
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
LABEL_27:

      return;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(void *)&v33[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    _os_log_impl(&dword_1C8F83000, v13, v14, "Ignoring non-string key: %s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v16;
    goto LABEL_14;
  }
  if (!*MEMORY[0x1E4F77408])
  {
    __break(1u);
    return;
  }
  long long v6 = v34[0];
  if (*(void *)&v34[0] == static String._unconditionallyBridgeFromObjectiveC(_:)() && *((void *)&v34[0] + 1) == v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_17:
    outlined init with copy of Any(a2, (uint64_t)v35);
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v13, v28)) {
        goto LABEL_27;
      }
      BOOL v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v29 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v28, "Unexpected non-dictionary value for kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers", v29, 2u);
      uint64_t v20 = v29;
      goto LABEL_26;
    }
    uint64_t v21 = *(void **)&v34[0];
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v35[0] = v26;
      *(_DWORD *)char v25 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, *((unint64_t *)&v6 + 1), v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v23, v24, "Processing kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers key: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v26, -1, -1);
      MEMORY[0x1CB77E470](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    NSDictionary.makeIterator()();
    NSDictionary.Iterator.next()();
    outlined init with take of PommesSearchReason?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    while (v36)
    {
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v37, v33);
      static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)(v34, v33, a3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      NSDictionary.Iterator.next()();
      outlined init with take of PommesSearchReason?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    }
    swift_release();

    return;
  }
  outlined init with copy of Any(a2, (uint64_t)v35);
  if (swift_dynamicCast())
  {
    long long v10 = v34[0];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35[0] = *a3;
    *a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, *((uint64_t *)&v10 + 1), v6, *((uint64_t *)&v6 + 1), isUniquelyReferenced_nonNull_native);
    *a3 = v35[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v31))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v35[0] = v32;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, *((unint64_t *)&v6 + 1), v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v13, v31, "Could not make safe value for key: %s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v32;
LABEL_14:
    MEMORY[0x1CB77E470](v19, -1, -1);
    uint64_t v20 = v15;
LABEL_26:
    MEMORY[0x1CB77E470](v20, -1, -1);
    goto LABEL_27;
  }

  swift_bridgeObjectRelease_n();
}

uint64_t NowPlayingInfo.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for NowPlayingInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NowPlayingInfo);
}

uint64_t dispatch thunk of NowPlayingInfo.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 128))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of NowPlayingInfo.title.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NowPlayingInfo.artist.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NowPlayingInfo.album.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NowPlayingInfo.mediaType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NowPlayingInfo.externalContentIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NowPlayingInfo.uniqueIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NowPlayingInfo.isRadio.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NowPlayingInfo.queueIndex.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 192))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of NowPlayingInfo.totalQueueCount.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of NowPlayingInfo.collectionInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NowPlayingInfo.mediaItemIdURL.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t UsoTask.getArgumentsAsType<A>(arguments:asType:)()
{
  static Array._allocateUninitialized(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTask.Arguments]);
  type metadata accessor for Array();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UsoTask.Arguments] and conformance [A], &demangling cache variable for type metadata for [UsoTask.Arguments]);
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Siri_Nlu_External_UserParse.pommesUSOTasks()@<X0>(void *a1@<X8>)
{
  uint64_t v38 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v3 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  unint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v6 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v36 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    v32[0] = a1;
    uint64_t v10 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
    unint64_t v11 = v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    v32[1] = v8;
    uint64_t v33 = v12;
    char v34 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v35 = (void (**)(char *, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      os_log_type_t v14 = v36;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
      Siri_Nlu_External_UserStatedTask.task.getter();
      (*v34)(v14, v37);
      static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
      if (v1)
      {
        (*v35)(v5, v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v15 = v5;
      (*v35)(v5, v38);
      uint64_t v16 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      uint64_t v18 = v17;
      unint64_t v19 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      swift_bridgeObjectRetain();
      uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology7UsoTaskCG_0D17InformationSearch06PommesfG0Vs5NeverOTg504_s12d40NLUTypes0A23_Nlu_External_UserParseV0A17hi29E14pommesUSOTasksQryKFSayAD13jfG55VGAA0a1_c1_d1_E9DialogActVKXEfU_AG0A8Ontology0lM0CXEfU_SSTf1cn_nTf4ng_n(v19, v16, v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      uint64_t v21 = *(void *)(v20 + 16);
      int64_t v22 = v13[2];
      int64_t v23 = v22 + v21;
      if (__OFADD__(v22, v21)) {
        break;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v23 > v13[3] >> 1)
      {
        if (v22 <= v23) {
          int64_t v25 = v22 + v21;
        }
        else {
          int64_t v25 = v22;
        }
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v25, 1, v13);
      }
      unint64_t v5 = v15;
      if (*(void *)(v20 + 16))
      {
        uint64_t v26 = v13[2];
        if ((v13[3] >> 1) - v26 < v21) {
          goto LABEL_25;
        }
        unint64_t v27 = (unint64_t)&v13[3 * v26 + 4];
        if (v20 + 32 < v27 + 24 * v21 && v27 < v20 + 32 + 24 * v21) {
          goto LABEL_27;
        }
        swift_arrayInitWithCopy();
        if (v21)
        {
          uint64_t v28 = v13[2];
          BOOL v29 = __OFADD__(v28, v21);
          uint64_t v30 = v28 + v21;
          if (v29) {
            goto LABEL_26;
          }
          v13[2] = v30;
        }
      }
      else if (v21)
      {
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      v11 += v33;
      if (!--v9)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        *(void *)v32[0] = v13;
        return result;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t UsoTask.userEntities.getter()
{
  return UsoTask.userEntities.getter(byte_1F236F918, MEMORY[0x1E4FA2B98], (void (*)(uint64_t))specialized Array.append<A>(contentsOf:));
}

uint64_t UsoTask.references.getter()
{
  return UsoTask.userEntities.getter(byte_1F236F970, MEMORY[0x1E4FA2B70], (void (*)(uint64_t))specialized Array.append<A>(contentsOf:));
}

uint64_t UsoTask.triggers.getter()
{
  return UsoTask.userEntities.getter(byte_1F236F998, MEMORY[0x1E4FA32E8], (void (*)(uint64_t))specialized Array.append<A>(contentsOf:));
}

uint64_t UsoTask.codeGenUserEntities.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for CodeGenTaskBase();
  if ((swift_dynamicCast() & 1) == 0) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for UsoEntity_common_UserEntity();
  uint64_t v0 = dispatch thunk of CodeGenTaskBase.getAsListHelper<A>(argumentName:entryType:)();
  swift_release();
  if (v0) {
    return v0;
  }
  else {
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t UsoTask.referencedMediaItems()()
{
  return UsoTask.userEntities.getter(byte_1F236FB50, MEMORY[0x1E4FA31F8], (void (*)(uint64_t))specialized Array.append<A>(contentsOf:));
}

uint64_t UsoTask.isWHARelevantTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v4, (uint64_t)v2);
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_play_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
    goto LABEL_7;
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
  if (v1[0])
  {
    swift_release();
    outlined destroy of Any?((uint64_t)v2);
    return 1;
  }
LABEL_7:
  outlined init with take of Any?((uint64_t)v2, (uint64_t)v1);
  if (v1[3])
  {
    type metadata accessor for UsoTask_update_common_MediaItem();
    if (swift_dynamicCast())
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1);
  }
  return 0;
}

uint64_t UsoTask.phoneCallEntities.getter()
{
  return UsoTask.userEntities.getter(byte_1F23706A8, MEMORY[0x1E4FA3200], (void (*)(uint64_t))specialized Array.append<A>(contentsOf:));
}

uint64_t UsoTask.userEntities.getter(unsigned __int8 *a1, void (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v6 = UsoTask.arguments.getter();
  uint64_t v7 = 0xEC00000073656974;
  uint64_t v8 = 0x69746E4572657375;
  switch(v5)
  {
    case 1:
      uint64_t v7 = 0xE600000000000000;
      uint64_t v8 = 0x746567726174;
      if (*(void *)(v6 + 16)) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 2:
      uint64_t v7 = 0xE900000000000065;
      uint64_t v8 = 0x636E657265666572;
      goto LABEL_5;
    case 3:
      uint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x72656767697274;
      if (!*(void *)(v6 + 16)) {
        goto LABEL_20;
      }
      goto LABEL_6;
    default:
LABEL_5:
      if (!*(void *)(v6 + 16)) {
        goto LABEL_20;
      }
LABEL_6:
      unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v10 & 1) == 0)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return MEMORY[0x1E4FBC860];
      }
      unint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = MEMORY[0x1E4FBC860];
      uint64_t v19 = MEMORY[0x1E4FBC860];
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        if (v13) {
          goto LABEL_9;
        }
LABEL_23:
        swift_bridgeObjectRelease();
        uint64_t v17 = MEMORY[0x1E4FBC860];
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v13) {
        goto LABEL_23;
      }
LABEL_9:
      a2(0);
      if (v13 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C9175610);
      }
      for (uint64_t i = 0; i != v13; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](i, v11);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v15 = swift_release();
        if (v18)
        {
          MEMORY[0x1CB77CD90](v15);
          if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = v19;
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      a3(v17);
      swift_bridgeObjectRelease();
      return v12;
  }
}

uint64_t UsoTask.Arguments.rawValue.getter(char a1)
{
  uint64_t result = 0x69746E4572657375;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746567726174;
      break;
    case 2:
      uint64_t result = 0x636E657265666572;
      break;
    case 3:
      uint64_t result = 0x72656767697274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UsoTask.Arguments(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 0xEC00000073656974;
  uint64_t v3 = 0x69746E4572657375;
  uint64_t v4 = *a1;
  uint64_t v5 = 0x69746E4572657375;
  unint64_t v6 = 0xEC00000073656974;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x746567726174;
      break;
    case 2:
      uint64_t v5 = 0x636E657265666572;
      unint64_t v6 = 0xE900000000000065;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x72656767697274;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      if (v5 == 0x746567726174) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x636E657265666572;
      unint64_t v2 = 0xE900000000000065;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x72656767697274) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsoTask.Arguments()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoTask.Arguments()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UsoTask.Arguments()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoTask.Arguments@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized UsoTask.Arguments.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UsoTask.Arguments(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEC00000073656974;
  uint64_t v3 = 0x69746E4572657375;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x746567726174;
      goto LABEL_3;
    case 2:
      *a1 = 0x636E657265666572;
      a1[1] = 0xE900000000000065;
      break;
    case 3:
      *a1 = 0x72656767697274;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = UsoTask.arguments.getter();
  uint64_t v7 = 0xEC00000073656974;
  uint64_t v8 = 0x69746E4572657375;
  switch(v5)
  {
    case 1:
      uint64_t v7 = 0xE600000000000000;
      uint64_t v8 = 0x746567726174;
      if (*(void *)(v6 + 16)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 2:
      uint64_t v7 = 0xE900000000000065;
      uint64_t v8 = 0x636E657265666572;
      goto LABEL_5;
    case 3:
      uint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x72656767697274;
      if (!*(void *)(v6 + 16)) {
        goto LABEL_9;
      }
      goto LABEL_6;
    default:
LABEL_5:
      if (!*(void *)(v6 + 16)) {
        goto LABEL_9;
      }
LABEL_6:
      specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if (v9)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v10 = swift_bridgeObjectRelease();
        MEMORY[0x1F4188790](v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoValue]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UsoValue] and conformance [A], &demangling cache variable for type metadata for [UsoValue]);
        Sequence.compactMap<A>(_:)();
        swift_bridgeObjectRelease();
        uint64_t v11 = static Array.+ infix(_:_:)();
        uint64_t result = swift_bridgeObjectRelease();
        *a3 = v11;
      }
      else
      {
LABEL_9:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *a3 = v4;
        return swift_bridgeObjectRetain();
      }
      return result;
  }
}

uint64_t closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(void *a1@<X8>)
{
  dispatch thunk of UsoValue.getAsEntity()();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t PommesUsoTask.graphDescription.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PommesUsoTask.description.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesUsoTask()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t partial apply for closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(a1, a2, a3);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology7UsoTaskCG_0D17InformationSearch06PommesfG0Vs5NeverOTg504_s12d40NLUTypes0A23_Nlu_External_UserParseV0A17hi29E14pommesUSOTasksQryKFSayAD13jfG55VGAA0a1_c1_d1_E9DialogActVKXEfU_AG0A8Ontology0lM0CXEfU_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
    if (!v5) {
      return v6;
    }
    uint64_t v14 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0) {
      break;
    }
    uint64_t v8 = 0;
    uint64_t v6 = v14;
    while (v5 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = MEMORY[0x1CB77D510](v8, a1);
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 8 * v8 + 32);
        swift_retain();
      }
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      ++v8;
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = (void *)(v14 + 24 * v11);
      uint64_t v12[4] = v9;
      v12[5] = a2;
      v12[6] = a3;
      if (v5 == v8) {
        return v6;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t specialized UsoTask.Arguments.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoTask.Arguments.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type UsoTask.Arguments and conformance UsoTask.Arguments()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments;
  if (!lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UsoTask.Arguments(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C91761E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoTask.Arguments()
{
  return &type metadata for UsoTask.Arguments;
}

uint64_t destroy for PommesUsoTask()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PommesUsoTask(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PommesUsoTask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for PommesUsoTask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesUsoTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesUsoTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesUsoTask()
{
  return &type metadata for PommesUsoTask;
}

uint64_t sub_1C91763E0()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [PommesUsoTask] and conformance [A], &demangling cache variable for type metadata for [PommesUsoTask]);
}

uint64_t partial apply for closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(a1);
}

unint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  uint64_t v56 = *(void *)(v0 - 8);
  unint64_t v57 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v39 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.getter();
  uint64_t v55 = v6;
  uint64_t v49 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.musicTitle.getter();
  uint64_t v54 = v7;
  uint64_t v48 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.getter();
  uint64_t v53 = v8;
  uint64_t v47 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.getter();
  uint64_t v51 = v9;
  uint64_t v46 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.podcastTitle.getter();
  uint64_t v50 = v10;
  uint64_t v45 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
  uint64_t v42 = v11;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.getter();
  uint64_t v43 = Apple_Parsec_Siri_V2alpha_AudioDecade.toString.getter();
  uint64_t v58 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v59 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.activity.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v44 = v13;
  swift_bridgeObjectRelease();
  uint64_t v59 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.getter();
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v40 = v14;
  swift_bridgeObjectRelease();
  uint64_t v59 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.mood.getter();
  uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v34 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.getter();
  uint64_t v37 = v17;
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.getter();
  uint64_t v20 = v19;
  uint64_t v21 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationName.getter();
  uint64_t v23 = v22;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  uint64_t v24 = 0;
  int64_t v25 = 0;
  if (v26 >= 0.01)
  {
    Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
    uint64_t v24 = Double.description.getter();
    int64_t v25 = v27;
  }
  uint64_t v28 = v39;
  _OWORD v33[2] = v25;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.getter();
  uint64_t v29 = Apple_Parsec_Siri_V2alpha_AudioRadioType.toString.getter();
  os_log_type_t v31 = v30;
  uint64_t v35 = v30;
  (*(void (**)(char *, unint64_t))(v56 + 8))(v28, v57);
  v33[1] = v23;
  uint64_t v56 = v16;
  unint64_t v57 = specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(v52, v55, v49, v54, v48, v53, v47, v51, v46, v50, v45, v42, v43, v58, v41, v44, v38, v40, v36,
          v16,
          v34,
          v37,
          v18,
          v20,
          v21,
          v23,
          v24,
          v25,
          v29,
          v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v57;
}

unint64_t static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,char *a30)
{
  return specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

unint64_t specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,char *a30)
{
  uint64_t v179 = a8;
  uint64_t v176 = a7;
  uint64_t v203 = a6;
  uint64_t v177 = a5;
  uint64_t v206 = a4;
  uint64_t v175 = a3;
  int v207 = a1;
  uint64_t v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v204 = (char *)&v174 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v202 = (char *)&v174 - v35;
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  uint64_t v208 = *(void *)(v193 - 8);
  uint64_t v36 = v208;
  uint64_t v37 = MEMORY[0x1F4188790](v193);
  uint64_t v209 = (char *)&v174 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v205 = (uint64_t)&v174 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v210 = (uint64_t)&v174 - v41;
  uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v191 = (char *)&v174 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v187 = (char *)&v174 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v190 = (char *)&v174 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  int v189 = (char *)&v174 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  unint64_t v188 = (char *)&v174 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v186 = (char *)&v174 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v185 = (char *)&v174 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v184 = (char *)&v174 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v183 = (char *)&v174 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v181 = (char *)&v174 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  unint64_t v195 = (char *)&v174 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v178 = (char *)&v174 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v180 = (char *)&v174 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v72 = (char *)&v174 - v71;
  uint64_t v73 = MEMORY[0x1F4188790](v70);
  uint64_t v75 = (char *)&v174 - v74;
  MEMORY[0x1F4188790](v73);
  uint64_t v77 = (char *)&v174 - v76;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?>);
  uint64_t v78 = *(void *)(v36 + 72);
  unint64_t v79 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
  uint64_t v208 = v78;
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_1C919B300;
  uint64_t v192 = v80;
  unint64_t v81 = v80 + v79;
  uint64_t v82 = *(void (**)(void))(v43 + 104);
  unsigned int v182 = *MEMORY[0x1E4F88FB8];
  uint64_t v198 = v43 + 104;
  uint64_t v201 = v82;
  v82(v77);
  os_log_type_t v197 = v75;
  if (a2)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v75, v77, v42);
    MEMORY[0x1CB778820](v75);
    MEMORY[0x1CB778840](v207, a2);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    unint64_t v84 = v81;
    uint64_t v85 = 0;
  }
  else
  {
    uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    unint64_t v84 = v81;
    uint64_t v85 = 1;
  }
  int v207 = v83;
  v83(v84, v85, 1, v31);
  uint64_t v86 = v32;
  uint64_t v199 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v200 = v43 + 8;
  v199(v77, v42);
  uint64_t v87 = v81 + v208;
  uint64_t v88 = v72;
  ((void (*)(char *, void, uint64_t))v201)(v72, *MEMORY[0x1E4F88F78], v42);
  uint64_t v89 = v43;
  uint64_t v90 = v206;
  if (v206)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v91 = v197;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v197, v88, v42);
    MEMORY[0x1CB778820](v91);
    MEMORY[0x1CB778840](v175, v90);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v92 = 0;
  }
  else
  {
    uint64_t v92 = 1;
  }
  uint64_t v93 = 1;
  uint64_t v206 = v32 + 56;
  v207(v87, v92, 1, v31);
  v199(v88, v42);
  unint64_t v94 = v81 + 2 * v208;
  uint64_t v95 = v180;
  ((void (*)(char *, void, uint64_t))v201)(v180, *MEMORY[0x1E4F88F80], v42);
  uint64_t v96 = v203;
  if (v203)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v97 = v197;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v197, v95, v42);
    MEMORY[0x1CB778820](v97);
    MEMORY[0x1CB778840](v177, v96);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v93 = 0;
  }
  uint64_t v203 = v86;
  uint64_t v177 = a10;
  uint64_t v98 = 1;
  v207(v94, v93, 1, v31);
  v199(v95, v42);
  unint64_t v99 = v81 + 3 * v208;
  uint64_t v100 = v178;
  LODWORD(v180) = *MEMORY[0x1E4F88FA0];
  v201(v178);
  uint64_t v101 = v179;
  uint64_t v196 = v89;
  if (v179)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v102 = v197;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v197, v100, v42);
    MEMORY[0x1CB778820](v102);
    MEMORY[0x1CB778840](v176, v101);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v98 = 0;
  }
  uint64_t v103 = 1;
  v207(v99, v98, 1, v31);
  v199(v100, v42);
  unint64_t v104 = v81 + 4 * v208;
  uint64_t v105 = v195;
  ((void (*)(char *, void, uint64_t))v201)(v195, *MEMORY[0x1E4F88F30], v42);
  unint64_t v106 = v181;
  if (v177)
  {
    uint64_t v107 = v177;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v108 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v195, v42);
    MEMORY[0x1CB778820](v108);
    uint64_t v105 = v195;
    MEMORY[0x1CB778840](a9, v107);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v103 = 0;
  }
  uint64_t v179 = a14;
  uint64_t v109 = 1;
  v207(v104, v103, 1, v31);
  v199(v105, v42);
  unint64_t v110 = v81 + 5 * v208;
  ((void (*)(char *, void, uint64_t))v201)(v106, *MEMORY[0x1E4F88FC0], v42);
  if (a12)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    id v111 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v106, v42);
    MEMORY[0x1CB778820](v111);
    MEMORY[0x1CB778840](a11, a12);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v109 = 0;
  }
  else
  {
    id v111 = v197;
  }
  uint64_t v112 = 1;
  v207(v110, v109, 1, v31);
  v199(v106, v42);
  unint64_t v113 = v81 + 6 * v208;
  uint64_t v114 = v183;
  LODWORD(v195) = *MEMORY[0x1E4F88F88];
  v201(v183);
  uint64_t v115 = v179;
  if (v179)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v111, v114, v42);
    MEMORY[0x1CB778820](v111);
    MEMORY[0x1CB778840](a13, v115);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v112 = 0;
  }
  os_log_type_t v116 = v184;
  uint64_t v117 = 1;
  v207(v113, v112, 1, v31);
  v199(v114, v42);
  uint64_t v118 = v81 - v208 + 8 * v208;
  ((void (*)(char *, void, uint64_t))v201)(v116, v182, v42);
  if (a16)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    char v119 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v116, v42);
    MEMORY[0x1CB778820](v119);
    MEMORY[0x1CB778840](a15, a16);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v117 = 0;
  }
  uint64_t v120 = 1;
  v207(v118, v117, 1, v31);
  v199(v116, v42);
  unint64_t v121 = v81 + 8 * v208;
  uint64_t v122 = v185;
  uint64_t v123 = v195;
  ((void (*)(char *, void, uint64_t))v201)(v185, v195, v42);
  if (a18)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v124 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v122, v42);
    MEMORY[0x1CB778820](v124);
    MEMORY[0x1CB778840](a17, a18);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v120 = 0;
  }
  uint64_t v185 = a22;
  uint64_t v125 = 1;
  v207(v121, v120, 1, v31);
  v199(v122, v42);
  unint64_t v126 = v81 + 9 * v208;
  uint64_t v127 = v186;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v186, v123, v42);
  if (a20)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v128 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v127, v42);
    MEMORY[0x1CB778820](v128);
    MEMORY[0x1CB778840](a19, a20);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v125 = 0;
  }
  unint64_t v195 = a24;
  uint64_t v129 = 1;
  v207(v126, v125, 1, v31);
  v199(v127, v42);
  unint64_t v130 = v81 + 10 * v208;
  uint64_t v131 = v188;
  ((void (*)(char *, void, uint64_t))v201)(v188, v180, v42);
  uint64_t v132 = v185;
  if (v185)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v133 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v131, v42);
    MEMORY[0x1CB778820](v133);
    MEMORY[0x1CB778840](a21, v132);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v129 = 0;
  }
  else
  {
    uint64_t v133 = v197;
  }
  uint64_t v134 = 1;
  v207(v130, v129, 1, v31);
  v199(v131, v42);
  unint64_t v135 = v81 + 11 * v208;
  os_log_type_t v136 = v189;
  ((void (*)(char *, void, uint64_t))v201)(v189, *MEMORY[0x1E4F88FC8], v42);
  id v137 = v195;
  if (v195)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v133, v136, v42);
    MEMORY[0x1CB778820](v133);
    MEMORY[0x1CB778840](a23, v137);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v134 = 0;
  }
  unint64_t v195 = a28;
  uint64_t v138 = 1;
  v207(v135, v134, 1, v31);
  v199(v136, v42);
  unint64_t v139 = v81 + 12 * v208;
  uint64_t v140 = *MEMORY[0x1E4F88F40];
  unint64_t v141 = v190;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v190, v140, v42);
  if (a26)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v133, v141, v42);
    MEMORY[0x1CB778820](v133);
    MEMORY[0x1CB778840](a25, a26);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v138 = 0;
  }
  int v189 = a30;
  uint64_t v142 = 1;
  v207(v139, v138, 1, v31);
  v199(v141, v42);
  unint64_t v143 = v81 + 13 * v208;
  uint64_t v144 = v187;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v187, v140, v42);
  os_log_type_t v145 = v195;
  if (v195)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v146 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v144, v42);
    MEMORY[0x1CB778820](v146);
    MEMORY[0x1CB778840](a27, v145);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v142 = 0;
  }
  uint64_t v147 = 1;
  v207(v143, v142, 1, v31);
  v199(v144, v42);
  unint64_t v148 = v81 + 14 * v208;
  uint64_t v149 = v191;
  ((void (*)(char *, uint64_t, uint64_t))v201)(v191, v140, v42);
  uint64_t v150 = v189;
  uint64_t v194 = v81;
  if (v189)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    uint64_t v151 = v197;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v197, v149, v42);
    MEMORY[0x1CB778820](v151);
    MEMORY[0x1CB778840](a29, v150);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    uint64_t v147 = 0;
  }
  v207(v148, v147, 1, v31);
  v199(v149, v42);
  uint64_t v152 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
  uint64_t v153 = (void (**)(char *, uint64_t))(v203 + 8);
  unint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v203 + 32);
  unint64_t v155 = MEMORY[0x1E4FBC860];
  uint64_t v156 = 15;
  uint64_t v157 = v194;
  uint64_t v158 = (uint64_t)v209;
  uint64_t v159 = v205;
  do
  {
    uint64_t v160 = v210;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v157, v210);
    outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v160, v158);
    uint64_t v161 = *v152;
    if ((*v152)(v158, 1, v31) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v158);
    }
    else
    {
      uint64_t v162 = MEMORY[0x1CB778830]();
      unint64_t v164 = v163;
      (*v153)(v209, v31);
      swift_bridgeObjectRelease();
      uint64_t v165 = HIBYTE(v164) & 0xF;
      uint64_t v166 = v162 & 0xFFFFFFFFFFFFLL;
      uint64_t v158 = (uint64_t)v209;
      BOOL v167 = (v164 & 0x2000000000000000) == 0;
      uint64_t v159 = v205;
      if (v167) {
        uint64_t v165 = v166;
      }
      if (v165)
      {
        outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v210, v205);
        goto LABEL_45;
      }
    }
    v207(v159, 1, 1, v31);
LABEL_45:
    outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v210);
    if (v161(v159, 1, v31) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v159);
    }
    else
    {
      uint64_t v168 = v159;
      uint64_t v169 = *v154;
      uint64_t v170 = v202;
      (*v154)(v202, v168, v31);
      v169(v204, (uint64_t)v170, v31);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v155 + 16) + 1, 1, v155);
      }
      unint64_t v172 = *(void *)(v155 + 16);
      unint64_t v171 = *(void *)(v155 + 24);
      if (v172 >= v171 >> 1) {
        unint64_t v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v171 > 1, v172 + 1, 1, v155);
      }
      *(void *)(v155 + 16) = v172 + 1;
      v169((char *)(v155+ ((*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80))+ *(void *)(v203 + 72) * v172), (uint64_t)v204, v31);
      uint64_t v158 = (uint64_t)v209;
      uint64_t v159 = v205;
    }
    v157 += v208;
    --v156;
  }
  while (v156);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v155;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FeatureChecker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FeatureChecker.isSystemAssistantExperienceEnabled.getter()
{
  return AFDeviceSupportsSAE();
}

uint64_t FeatureChecker.deinit()
{
  return v0;
}

uint64_t FeatureChecker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FeatureChecker.init()()
{
  return v0;
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceEnabled.getter in conformance FeatureChecker()
{
  return AFDeviceSupportsSAE();
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for FeatureChecker()
{
  return self;
}

uint64_t method lookup function for FeatureChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FeatureChecker);
}

uint64_t dispatch thunk of FeatureChecker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

Swift::Bool __swiftcall AudioIntent.hasResolvedReference()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 256))();
  if (v1) {
    swift_release();
  }
  return v1 != 0;
}

Swift::Bool __swiftcall AudioIntent.isReferringToCurrentlyPlayingForAdd()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = *(void *)(v0 - 8);
  uint64_t v7 = ((uint64_t (*)())MEMORY[0x1F4188790])();
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v23 - v11;
  char v14 = (*(uint64_t (**)(uint64_t))(v13 + 280))(v10);
  if (v14 == 17)
  {
    return 0;
  }
  else
  {
    if (CommonAudio.Verb.rawValue.getter(v14) == 0x657461647075 && v16 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v15 = 0;
      if ((v18 & 1) == 0) {
        return v15;
      }
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(v5, v4);
    swift_release();
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v20(v12, v3, v5);
    if (v19) {
      LOBYTE(v19) = AudioIntent.isWithoutTitlesAndArtist()();
    }
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v12, v5);
    v20(v9, v3, v5);
    BOOL v15 = (v19 & 1) != 0 || AudioIntent.isWithoutTitlesAndArtistAndGenre()();
    v21(v9, v5);
  }
  return v15;
}

Swift::Bool __swiftcall AudioIntent.isWithoutTitlesAndArtist()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = *(void *)(v0 - 8);
  uint64_t v7 = ((uint64_t (*)())MEMORY[0x1F4188790])();
  uint64_t v24 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  char v14 = (char *)&v23 - v13;
  uint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t))(v15 + 136))(v12) + 16);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v14, v3, v5);
  if (v16)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(v4[25](v5, v4) + 16);
    swift_bridgeObjectRelease();
    LODWORD(v18) = v18 == 0;
  }
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v14, v5);
  v17(v11, v3, v5);
  if (v18)
  {
    uint64_t v20 = *(void *)(v4[12](v5, v4) + 16);
    swift_bridgeObjectRelease();
    v19(v11, v5);
    uint64_t v21 = v24;
    v17(v24, v3, v5);
    if (v20)
    {
      LOBYTE(v18) = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(v4[2](v5, v4) + 16);
      swift_bridgeObjectRelease();
      LOBYTE(v18) = v18 == 0;
    }
  }
  else
  {
    v19(v11, v5);
    uint64_t v21 = v24;
    v17(v24, v3, v5);
  }
  v19(v21, v5);
  return v18;
}

Swift::Bool __swiftcall AudioIntent.isWithoutTitlesAndArtistAndGenre()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = *(void *)(v0 - 8);
  uint64_t v7 = ((uint64_t (*)())MEMORY[0x1F4188790])();
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v22 - v10;
  Swift::Bool v12 = AudioIntent.isWithoutTitlesAndArtist()();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, v3, v5);
  if (v12)
  {
    uint64_t v14 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 152))(v5, v4) + 16);
    swift_bridgeObjectRelease();
    int v15 = v14 == 0;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  v13(v9, v3, v5);
  if (v15)
  {
    char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 168))(v5, v4);
    if (v17 == 28)
    {
      LOBYTE(v15) = 1;
    }
    else if (CommonAudio.MediaType.rawValue.getter(v17) == 0x65726E6567 && v18 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v15) = 0;
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      LOBYTE(v15) = v20 ^ 1;
    }
  }
  v16(v9, v5);
  return v15 & 1;
}

Swift::Bool __swiftcall AudioIntent.isBeats1Only()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Bool v6 = AudioIntent.hasBeats1ItemOrRadioStationNameOnly()();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  BOOL v7 = v6 || AudioIntent.hasBeats1NounOnly()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

Swift::Bool __swiftcall AudioIntent.hasBeats1ItemOrRadioStationNameOnly()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(v1 + 136))();
  if (v4[2])
  {
    uint64_t v6 = v4[4];
    unint64_t v5 = v4[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  BOOL v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 232))(v3, v2);
  if (v7[2])
  {
    uint64_t v9 = v7[4];
    unint64_t v8 = v7[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 & 0x2000000000000000;
  uint64_t v11 = HIBYTE(v5) & 0xF;
  uint64_t v12 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v13 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v8 & 0x2000000000000000;
    uint64_t v11 = HIBYTE(v8) & 0xF;
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v10) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    Swift::String v15 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v16 = String.lowercased()();
    if (v15._countAndFlagsBits == v16._countAndFlagsBits && v15._object == v16._object) {
      char v17 = 1;
    }
    else {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17 & 1;
}

Swift::Bool __swiftcall AudioIntent.hasBeats1NounOnly()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v0 - 8);
  uint64_t v6 = ((uint64_t (*)())MEMORY[0x1F4188790])();
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(v9 + 136))(v6);
  if (v10[2])
  {
    uint64_t v12 = v10[4];
    unint64_t v11 = v10[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v14 = v13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
  if (v14)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 208))(v4, v3);
    char v16 = 1;
    switch(v15)
    {
      case 1:
        goto LABEL_11;
      case 3:
        break;
      default:
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_11:
        swift_bridgeObjectRelease();
        LOBYTE(v14) = v16;
        break;
    }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v14 & 1;
}

Swift::Bool __swiftcall AudioIntent.isAddToUpNext()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v0 - 8);
  uint64_t v6 = ((uint64_t (*)())MEMORY[0x1F4188790])();
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  unint64_t v11 = (char *)&v27 - v10;
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v12 + 280);
  uint64_t v28 = v2;
  char v14 = v13(v9);
  if (v14 == 17)
  {
    char v15 = 0;
  }
  else if (CommonAudio.Verb.rawValue.getter(v14) == 2036427888 && v16 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v15 = 1;
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v11, v28, v4);
  if (v15)
  {
    char v19 = 1;
  }
  else
  {
    char v20 = ((uint64_t (*)(uint64_t, uint64_t))v13)(v4, v3);
    if (v20 == 17)
    {
      char v19 = 0;
    }
    else if (CommonAudio.Verb.rawValue.getter(v20) == 0x657461647075 && v21 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      char v19 = 1;
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v11, v4);
  v18(v8, v28, v4);
  if (v19)
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v4, v3);
    char v25 = specialized Set.contains(_:)(3u, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v25 = 0;
  }
  v23(v8, v4);
  return v25 & 1;
}

Swift::Bool __swiftcall AudioIntent.hasAttribute(_:)(SiriInformationSearch::CommonAudio::Attribute a1)
{
  uint64_t v3 = (*(uint64_t (**)())(v1 + 104))();
  char v4 = specialized Set.contains(_:)(a1, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

BOOL AudioIntent.hasAnyAttribute(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
  LOBYTE(a1) = specialized Set.isDisjoint(with:)(a1, v4);
  swift_bridgeObjectRelease();
  return (a1 & 1) == 0;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v31 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v30 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v29 = v4;
  do
  {
    do
    {
LABEL_13:
      while (1)
      {
        int64_t v11 = v10;
        if (!v8) {
          break;
        }
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v10 << 6);
        if (*(void *)(v5 + 16)) {
          goto LABEL_30;
        }
      }
      int64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_88;
      }
      if (v14 >= v30) {
        goto LABEL_86;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v14);
      ++v10;
      if (!v15)
      {
        int64_t v10 = v11 + 2;
        if (v11 + 2 >= v30) {
          goto LABEL_86;
        }
        unint64_t v15 = *(void *)(v31 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v11 + 3;
          if (v11 + 3 >= v30) {
            goto LABEL_86;
          }
          unint64_t v15 = *(void *)(v31 + 8 * v10);
          if (!v15)
          {
            int64_t v16 = v11 + 4;
            if (v11 + 4 >= v30)
            {
LABEL_86:
              swift_bridgeObjectRelease();
              uint64_t v27 = 1;
              goto LABEL_84;
            }
            unint64_t v15 = *(void *)(v31 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  break;
                }
                if (v10 >= v30) {
                  goto LABEL_86;
                }
                unint64_t v15 = *(void *)(v31 + 8 * v10);
                ++v16;
                if (v15) {
                  goto LABEL_29;
                }
              }
LABEL_88:
              __break(1u);
              JUMPOUT(0x1C9179594);
            }
            int64_t v10 = v11 + 4;
          }
        }
      }
LABEL_29:
      unint64_t v8 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    while (!*(void *)(v5 + 16));
LABEL_30:
    unint64_t v32 = v8;
    uint64_t v17 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v13);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v20 = v18 & ~v19;
  }
  while (((*(void *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0);
  uint64_t v21 = ~v19;
  while (2)
  {
    unint64_t v22 = 0xEA00000000007473;
    unint64_t v23 = 0x697472416D6F7266;
    switch(*(unsigned char *)(*(void *)(v5 + 48) + v20))
    {
      case 1:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x676E6F536D6F7266;
        break;
      case 2:
        unint64_t v23 = 0x75626C416D6F7266;
        unint64_t v22 = 0xE90000000000006DLL;
        break;
      case 3:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x7478654E79616C70;
        break;
      case 4:
        unint64_t v22 = 0xE700000000000000;
        unint64_t v23 = 0x776F4E79616C70;
        break;
      case 5:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x7473614C79616C70;
        break;
      case 6:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x7974696E69666661;
        break;
      case 7:
        unint64_t v23 = 0x6E656D6D6F636572;
        unint64_t v22 = 0xEB00000000646564;
        break;
      case 8:
        unint64_t v22 = 0xE900000000000079;
        unint64_t v23 = 0x7265766F63736964;
        break;
      case 9:
        unint64_t v22 = 0x80000001C919C1E0;
        unint64_t v23 = 0xD000000000000018;
        break;
      case 0xA:
        unint64_t v22 = 0xE400000000000000;
        unint64_t v23 = 1954047342;
        break;
      case 0xB:
        unint64_t v22 = 0xE500000000000000;
        unint64_t v23 = 0x64656D616ELL;
        break;
      case 0xC:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x73756F6976657270;
        break;
      case 0xD:
        unint64_t v23 = 0x44657361656C6572;
        unint64_t v22 = 0xEB00000000657461;
        break;
      case 0xE:
        unint64_t v22 = 0xE800000000000000;
        unint64_t v23 = 0x6E6F697461727564;
        break;
      default:
        break;
    }
    uint64_t v24 = 0x697472416D6F7266;
    unint64_t v25 = 0xEA00000000007473;
    switch(v17)
    {
      case 1:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x676E6F536D6F7266) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 2:
        unint64_t v25 = 0xE90000000000006DLL;
        if (v23 != 0x75626C416D6F7266) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 3:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x7478654E79616C70) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 4:
        unint64_t v25 = 0xE700000000000000;
        if (v23 != 0x776F4E79616C70) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 5:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x7473614C79616C70) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 6:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x7974696E69666661) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 7:
        unint64_t v25 = 0xEB00000000646564;
        if (v23 != 0x6E656D6D6F636572) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 8:
        unint64_t v25 = 0xE900000000000079;
        if (v23 != 0x7265766F63736964) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 9:
        unint64_t v25 = 0x80000001C919C1E0;
        if (v23 != 0xD000000000000018) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 10:
        unint64_t v25 = 0xE400000000000000;
        if (v23 != 1954047342) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 11:
        unint64_t v25 = 0xE500000000000000;
        if (v23 != 0x64656D616ELL) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 12:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x73756F6976657270) {
          goto LABEL_75;
        }
        goto LABEL_74;
      case 13:
        uint64_t v24 = 0x44657361656C6572;
        unint64_t v25 = 0xEB00000000657461;
        goto LABEL_73;
      case 14:
        unint64_t v25 = 0xE800000000000000;
        if (v23 != 0x6E6F697461727564) {
          goto LABEL_75;
        }
        goto LABEL_74;
      default:
LABEL_73:
        if (v23 != v24) {
          goto LABEL_75;
        }
LABEL_74:
        if (v22 == v25)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_83;
        }
LABEL_75:
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          unint64_t v20 = (v20 + 1) & v21;
          if ((*(void *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20)) {
            continue;
          }
          uint64_t v4 = v29;
          unint64_t v8 = v32;
          goto LABEL_13;
        }
        swift_bridgeObjectRelease();
LABEL_83:
        uint64_t v27 = 0;
LABEL_84:
        outlined consume of [String : AppData].Iterator._Variant();
        return v27;
    }
  }
}

uint64_t dispatch thunk of AudioIntent.activities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AudioIntent.albums.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AudioIntent.appAudiobookAuthors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AudioIntent.appAudiobookTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AudioIntent.appMusicArtistNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AudioIntent.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AudioIntent.appPlaylistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AudioIntent.appShowTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AudioIntent.applePlaylistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of AudioIntent.applePodcastTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AudioIntent.apps.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of AudioIntent.artists.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of AudioIntent.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of AudioIntent.confirmationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of AudioIntent.dateTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of AudioIntent.decade.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of AudioIntent.entities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of AudioIntent.frequency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of AudioIntent.genres.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of AudioIntent.mediaIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of AudioIntent.mediaType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of AudioIntent.targetMediaType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of AudioIntent.modifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of AudioIntent.moods.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of AudioIntent.musicTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of AudioIntent.noun.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of AudioIntent.playlistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of AudioIntent.podcastTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of AudioIntent.radioStationNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of AudioIntent.radioType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of AudioIntent.reference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of AudioIntent.resolvedReference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of AudioIntent.showTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of AudioIntent.sort.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t dispatch thunk of AudioIntent.verb.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t DomainWarmup.__allocating_init(warmupClients:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  DomainWarmup.init(warmupClients:)(a1);
  return v2;
}

void *DomainWarmup.init(warmupClients:)(uint64_t a1)
{
  type metadata accessor for OS_dispatch_queue();
  uint64_t v3 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCB40], v3);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v7 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  v15[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, void))(v12 + 104))((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  void v1[4] = a1;
  v1[5] = 0;
  v1[3] = v13;
  return v1;
}

uint64_t DomainWarmup.setServiceHelper(_:)(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

Swift::Bool __swiftcall DomainWarmup.warmupCalled(for:)(Swift::String a1)
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t closure #1 in DomainWarmup.warmupCalled(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  *a4 = v10 & 1;
  return result;
}

uint64_t DomainWarmup.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DomainWarmup.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in DomainWarmup.warmupCalled(for:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in DomainWarmup.warmupCalled(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1C9179E40()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t dispatch thunk of DomainWarmupHandling.warmup(request:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for DomainWarmup()
{
  return self;
}

uint64_t method lookup function for DomainWarmup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DomainWarmup);
}

uint64_t dispatch thunk of DomainWarmup.__allocating_init(warmupClients:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of DomainWarmup.warmupFirstExperience(request:response:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of DomainWarmup.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of DomainWarmup.warmup(request:domain:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of DomainWarmup.warmupCalled(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of DomainWarmup.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t outlined destroy of DomainWarmupHandling?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DomainWarmupHandling?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudioQuery.queryFields.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL AudioQuery.removeLibraryGenreCandidates.getter()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F88BE8], v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun, MEMORY[0x1E4F88BF8]);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (v4 & 1) == 0;
}

uint64_t AudioQuery.requestedType.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, MEMORY[0x1E4F89478], a1);
}

uint64_t AudioQuery.audioSort.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, MEMORY[0x1E4F88C68], a1);
}

uint64_t AudioQuery.verb.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, MEMORY[0x1E4F88C80], a1);
}

uint64_t AudioQuery.noun.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, MEMORY[0x1E4F88BF8], a1);
}

uint64_t AudioQuery.requestedType.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t AudioQuery.appName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioQuery.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(v1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, a1);
}

uint64_t AudioQuery.hasNonExplicitReference.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference);
}

uint64_t AudioQuery.isGlideEligible.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
}

uint64_t AudioQuery.networkAvailableAtRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest);
}

uint64_t AudioQuery.isRequestingAppleMusic.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName + 8)) {
    return 0;
  }
  Swift::String v1 = String.lowercased()();
  if (v1._countAndFlagsBits == 0x636973756DLL && v1._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v3 & 1;
  }
}

uint64_t AudioQuery.__allocating_init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unsigned __int8 a38,unsigned __int8 a39)
{
  uint64_t v81 = a8;
  unint64_t v80 = a7;
  uint64_t v79 = a6;
  uint64_t v78 = a5;
  uint64_t v75 = a4;
  uint64_t v77 = a3;
  uint64_t v93 = a2;
  uint64_t v73 = a1;
  uint64_t v91 = a36;
  uint64_t v92 = a35;
  int v89 = a39;
  int v90 = a38;
  uint64_t v86 = a34;
  uint64_t v87 = a37;
  uint64_t v100 = a32;
  uint64_t v101 = a31;
  uint64_t v102 = a33;
  uint64_t v74 = a9;
  uint64_t v70 = a10;
  uint64_t v72 = a11;
  uint64_t v71 = a13;
  uint64_t v69 = a15;
  uint64_t v68 = a17;
  uint64_t v67 = a19;
  uint64_t v65 = a21;
  v59[4] = a22;
  uint64_t v64 = a23;
  uint64_t v63 = a25;
  void v59[3] = a26;
  uint64_t v62 = a27;
  v59[2] = a28;
  uint64_t v61 = a29;
  v59[1] = a30;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1F4188790](v39 - 8);
  uint64_t v85 = (uint64_t)v59 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v83 = *(void *)(v41 - 8);
  uint64_t v84 = v41;
  MEMORY[0x1F4188790](v41);
  uint64_t v82 = (char *)v59 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  uint64_t v99 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v76 = (char *)v59 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  uint64_t v97 = *(void *)(v44 - 8);
  uint64_t v98 = v44;
  MEMORY[0x1F4188790](v44);
  uint64_t v66 = (char *)v59 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v94 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96);
  uint64_t v60 = (char *)v59 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v80 = specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(v73, v93, v77, v75, v78, v79, v80, v81, v74, v70, v72, a12, v71, a14, v69, a16, v68, a18, v67,
          a20,
          v65,
          a22,
          v64,
          a24,
          v63,
          a26,
          v62,
          a28,
          v61,
          a30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v60, v101, v96);
  uint64_t v48 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v66, v100, v98);
  uint64_t v49 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v76, v102, v95);
  uint64_t v50 = v82;
  uint64_t v51 = v83;
  uint64_t v52 = v86;
  uint64_t v53 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v86, v84);
  uint64_t v54 = v87;
  uint64_t v55 = v85;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(v87, v85);
  BYTE2(v58) = 1;
  BYTE1(v58) = v89;
  LOBYTE(v58) = v90;
  uint64_t v56 = (*(uint64_t (**)(unint64_t, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t, int))(v88 + 176))(v80, v47, v48, v49, v50, v92, v91, v55, v58);
  outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v102, v95);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v100, v98);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v101, v96);
  return v56;
}

uint64_t AudioQuery.__allocating_init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  uint64_t v20 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a2, v21);
  uint64_t v22 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, a3, v23);
  uint64_t v24 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a4, v25);
  uint64_t v26 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, a5, v27);
  uint64_t v28 = (void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  *uint64_t v28 = a6;
  v28[1] = a7;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(a8, v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = a9;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = a10;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = a11;
  return v19;
}

uint64_t AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  *(void *)(v11 + 16) = a1;
  uint64_t v19 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a2, v20);
  uint64_t v21 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a3, v22);
  uint64_t v23 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, a4, v24);
  uint64_t v25 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  uint64_t v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v25, a5, v26);
  uint64_t v27 = (void *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  *uint64_t v27 = a6;
  v27[1] = a7;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(a8, v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(unsigned char *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = a9;
  *(unsigned char *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = a10;
  *(unsigned char *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = a11;
  return v11;
}

unint64_t closure #1 in static AudioQuery.makeNormalQuery(audioExperience:mode:)()
{
  uint64_t v0 = *(void *)(Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter() + 16);
  swift_bridgeObjectRelease();
  if (v0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      char v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v4 = 0;
      _os_log_impl(&dword_1C8F83000, v2, v3, "AudioQuery : librarySearchTerms from ClientSignals", v4, 2u);
      MEMORY[0x1CB77E470](v4, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v9 = 0;
      _os_log_impl(&dword_1C8F83000, v7, v8, "AudioQuery : librarySearchTerms from AudioUnderstanding", v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
  }
}

unint64_t closure #1 in static AudioQuery.makePlaylistQuery(audioExperience:)()
{
  uint64_t v69 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v0 = *(void *)(v69 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v69);
  uint64_t v68 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v70 = (char *)&v54 - v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v67 = (char *)&v54 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v56 = (char *)&v54 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = *(void *)(Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    uint64_t v45 = v8;
    uint64_t v46 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v49 = HIBYTE(v48) & 0xF;
    if ((v48 & 0x2000000000000000) == 0) {
      uint64_t v49 = v46 & 0xFFFFFFFFFFFFLL;
    }
    if (v49)
    {
      Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
      uint64_t v50 = v70;
      (*(void (**)(char *, void, uint64_t))(v0 + 104))(v70, *MEMORY[0x1E4F88FC0], v69);
      MEMORY[0x1CB778820](v50);
      uint64_t v51 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
      MEMORY[0x1CB778840](v51);
      Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm>);
      unint64_t v52 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      unint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_1C91947A0;
      (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))(v27 + v52, v11, v7);
      return v27;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v23 = *(uint64_t (**)(char *))(v8 + 16);
  uint64_t v21 = v8 + 16;
  uint64_t v22 = v23;
  unint64_t v24 = (*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64);
  uint64_t v54 = v19;
  unint64_t v55 = v24;
  unint64_t v25 = v19 + v24;
  uint64_t v26 = *(void *)(v21 + 56);
  unsigned int v63 = *MEMORY[0x1E4F88FC0];
  uint64_t v61 = v0 + 8;
  uint64_t v62 = (void (**)(char *, void, uint64_t))(v0 + 104);
  uint64_t v59 = (void (**)(char *, uint64_t))(v21 - 8);
  uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 40);
  uint64_t v71 = v21;
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  int v58 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  unint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v65 = v23;
  uint64_t v66 = v6;
  uint64_t v64 = v26;
  uint64_t v28 = (void (**)(char *, uint64_t))(v0 + 8);
  do
  {
    unint64_t v73 = v27;
    uint64_t v74 = v20;
    unint64_t v72 = v25;
    uint64_t v30 = v22(v17);
    uint64_t v31 = v70;
    MEMORY[0x1CB778810](v30);
    unint64_t v32 = v68;
    uint64_t v33 = v7;
    uint64_t v34 = v69;
    (*v62)(v68, v63, v69);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v36 = v75;
    uint64_t v35 = v76;
    uint64_t v37 = *v28;
    (*v28)(v32, v34);
    v37(v31, v34);
    if (v35 == v36)
    {
      uint64_t v38 = (uint64_t)v66;
      ((void (*)(char *, char *, uint64_t))v22)(v66, v17, v33);
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = 1;
      uint64_t v38 = (uint64_t)v66;
    }
    uint64_t v7 = v33;
    (*v60)(v38, v39, 1, v33);
    (*v59)(v17, v33);
    int v40 = (*v58)(v38, 1, v33);
    unint64_t v27 = v73;
    if (v40 == 1)
    {
      outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
      uint64_t v29 = v64;
    }
    else
    {
      uint64_t v41 = v56;
      uint64_t v42 = *v57;
      (*v57)(v56, v38, v33);
      v42(v67, (uint64_t)v41, v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27);
      }
      unint64_t v44 = *(void *)(v27 + 16);
      unint64_t v43 = *(void *)(v27 + 24);
      if (v44 >= v43 >> 1) {
        unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v27);
      }
      *(void *)(v27 + 16) = v44 + 1;
      uint64_t v29 = v64;
      v42((char *)(v27 + v55 + v44 * v64), (uint64_t)v67, v33);
    }
    unint64_t v25 = v72 + v29;
    uint64_t v20 = v74 - 1;
    uint64_t v22 = v65;
  }
  while (v74 != 1);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t AudioQuery.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  return v0;
}

uint64_t AudioQuery.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);

  return swift_deallocClassInstance();
}

uint64_t specialized static AudioQuery.makeNormalQuery(audioExperience:mode:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v68 = &v47[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v65 = &v47[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v61 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v60 = v8;
  MEMORY[0x1F4188790](v8);
  int v58 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  MEMORY[0x1F4188790](v10);
  unint64_t v55 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioReference();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = &v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v54 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = &v47[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v51 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v23 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  unint64_t v25 = &v47[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AudioExperience.audioUnderstanding.getter();
  uint64_t v62 = a1;
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v19, v16);
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.reference.getter();
  int v26 = (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 88))(v15, v12);
  BOOL v31 = v26 == *MEMORY[0x1E4F89108]
     || v26 == *MEMORY[0x1E4F89118]
     || v26 == *MEMORY[0x1E4F89110]
     || v26 == *MEMORY[0x1E4F89120]
     || v26 == *MEMORY[0x1E4F89100]
     || v26 == *MEMORY[0x1E4F890F8];
  int v32 = v31;
  int v52 = v32;
  if (!v31) {
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
  }
  unint64_t v33 = closure #1 in static AudioQuery.makeNormalQuery(audioExperience:mode:)();
  uint64_t v34 = v55;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.requestedMediaType.getter();
  uint64_t v35 = v58;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.sort.getter();
  uint64_t v36 = v61;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  uint64_t v37 = v65;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.noun.getter();
  uint64_t v38 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.getter();
  uint64_t v49 = v39;
  uint64_t v50 = v38;
  uint64_t v40 = (uint64_t)v68;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.getter();
  uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
  int v48 = dispatch thunk of AudioExperience.isGlideEligible.getter();
  char v42 = dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();
  (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v22, v54);
  (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v25, v51);
  type metadata accessor for AudioQuery();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v33;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v56 + 32))(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v34, v57);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v59 + 32))(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v35, v60);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v63 + 32))(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, v36, v64);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v66 + 32))(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, v37, v67);
  unint64_t v44 = (uint64_t *)(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  uint64_t v45 = v49;
  uint64_t *v44 = v50;
  v44[1] = v45;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(v40, v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(unsigned char *)(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = v52;
  *(unsigned char *)(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = v48 & 1;
  *(unsigned char *)(v43 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = v42 & 1;
  return v43;
}

uint64_t specialized static AudioQuery.makePlaylistQuery(audioExperience:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  uint64_t v46 = *(void *)(v0 - 8);
  uint64_t v47 = v0;
  MEMORY[0x1F4188790](v0);
  unint64_t v44 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v50 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  MEMORY[0x1F4188790](v4);
  int v52 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v51 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v9;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v14 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v17 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  AudioExperience.audioUnderstanding.getter();
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t v35 = closure #1 in static AudioQuery.makePlaylistQuery(audioExperience:)();
  uint64_t v20 = v37;
  uint64_t v21 = v38;
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v9, *MEMORY[0x1E4F89460], v38);
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.noun.getter();
  uint64_t v22 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.getter();
  uint64_t v40 = v23;
  uint64_t v41 = v22;
  uint64_t v24 = v50;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.getter();
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  LOBYTE(v11) = dispatch thunk of AudioExperience.isGlideEligible.getter();
  char v26 = dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v42);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v39);
  uint64_t v28 = v46;
  uint64_t v27 = v47;
  uint64_t v29 = v44;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v44, *MEMORY[0x1E4F88C48], v47);
  type metadata accessor for AudioQuery();
  uint64_t v30 = swift_allocObject();
  BOOL v31 = v36;
  *(void *)(v30 + 16) = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v31, v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v29, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, v51, v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, v52, v49);
  int v32 = (uint64_t *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  uint64_t v33 = v40;
  *int v32 = v41;
  v32[1] = v33;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(v50, v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(unsigned char *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = 0;
  *(unsigned char *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = v11 & 1;
  *(unsigned char *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = v26 & 1;
  return v30;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for AudioQuery()
{
  return type metadata accessor for AudioQuery();
}

uint64_t type metadata accessor for AudioQuery()
{
  uint64_t result = type metadata singleton initialization cache for AudioQuery;
  if (!type metadata singleton initialization cache for AudioQuery) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AudioQuery()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier?();
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for AudioQuery(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioQuery);
}

uint64_t dispatch thunk of AudioQuery.removeLibraryGenreCandidates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AudioQuery.isRequestingAppleMusic.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of AudioQuery.__allocating_init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier?()
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AssistantDataCache.__allocating_init(_:)(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  unint64_t v4 = *(uint64_t (**)(uint64_t, id, _UNKNOWN **, void))(v1 + 168);

  return v4(a1, v3, &protocol witness table for CNContactStore, 0);
}

uint64_t closure #1 in variable initialization expression of AssistantDataCache.contactsQueue()
{
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCB40], v0);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v4 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v5);
  v10[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0F0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, void))(v8 + 104))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t key path setter for AssistantDataCache.lastAssistantDataSnapshot : AssistantDataCache(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *a2;
  __int16 v11 = *(_WORD *)(a1 + 88);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v10 + 56);
  uint64_t v19 = *(void *)(v10 + 48);
  uint64_t v16 = *(void *)(v10 + 72);
  uint64_t v17 = *(void *)(v10 + 64);
  *(void *)(v10 + 48) = v15;
  *(void *)(v10 + 56) = v14;
  *(void *)(v10 + 64) = v13;
  *(void *)(v10 + 72) = v2;
  *(void *)(v10 + 80) = v3;
  *(void *)(v10 + 88) = v4;
  *(void *)(v10 + 96) = v5;
  *(void *)(v10 + 104) = v6;
  *(void *)(v10 + 112) = v7;
  *(void *)(v10 + 120) = v8;
  *(void *)(v10 + 128) = v9;
  *(_WORD *)(v10 + 136) = v11;
  outlined copy of AssistantDataSnapshot?(v15, v14, v13, v2);
  return outlined consume of AssistantDataSnapshot?(v19, v18, v17, v16);
}

void key path setter for AssistantDataCache.profileConnection : AssistantDataCache(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 144);
  *(void *)(v3 + 144) = v2;
  id v5 = v2;
}

void *AssistantDataCache.profileConnection.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = v1;
  return v1;
}

uint64_t AssistantDataCache.__allocating_init(_:contactFetching:profileConnection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(void *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 122) = 0u;
  *(void *)(v8 + 16) = v9;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  swift_beginAccess();
  uint64_t v10 = *(void **)(v8 + 144);
  *(void *)(v8 + 144) = a4;

  return v8;
}

uint64_t AssistantDataCache.init(_:contactFetching:profileConnection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(void *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 122) = 0u;
  *(void *)(v4 + 16) = v9;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  swift_beginAccess();
  uint64_t v10 = *(void **)(v4 + 144);
  *(void *)(v4 + 144) = a4;

  return v4;
}

void AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v49 - v11;
  if ((a2 & 1) != 0
    && ((*(void (**)(void *__return_ptr, uint64_t))(*v3 + 120))(v64, v10),
        outlined init with take of AssistantDataSnapshot?((uint64_t)v64, (uint64_t)&v57),
        outlined init with take of AssistantDataSnapshot?((uint64_t)v64, (uint64_t)v65),
        v66)
    && (char v13 = v57, outlined consume of AssistantDataSnapshot?(v57, v58, (uint64_t)v59, (uint64_t)v60), (v13 & 1) == 0))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_1C8F83000, v46, v47, "#AssistantData Skipping snapshot update", v48, 2u);
      MEMORY[0x1CB77E470](v48, -1, -1);
    }
  }
  else
  {
    uint64_t v53 = v7;
    uint64_t v54 = v8;
    uint64_t v56 = a1;
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    MEMORY[0x1F4188790](v14);
    uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    uint64_t v51 = UUID.uuidString.getter();
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    int v52 = (int *)v6;
    uint64_t v55 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v50 = v3;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v57 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v25 = v51;
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v19, &v57);
      uint64_t v3 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v21, v22, "#AssistantData Updating snapshot from POMMES service helper (request aceId=%s)", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v24, -1, -1);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v25 = v51;
    }
    id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96650]), sel_init);
    uint64_t v27 = (void *)MEMORY[0x1CB77CA90](v25, v19);
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setAceId_, v27);

    objc_msgSend(v26, sel_setRefId_, 0);
    Date.init()();
    uint64_t v28 = v52;
    uint64_t v29 = &v12[v52[5]];
    *(void *)uint64_t v29 = "SiriInformationSearch/AssistantDataCache.swift";
    *((void *)v29 + 1) = 46;
    v29[16] = 2;
    *(void *)&v12[v28[6]] = 74;
    uint64_t v30 = &v12[v28[7]];
    *(void *)uint64_t v30 = "updateSnapshot(on:onlyIfNeeded:)";
    *((void *)v30 + 1) = 32;
    v30[16] = 2;
    uint64_t v31 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
    int v32 = (uint64_t *)&v12[v28[8]];
    *int v32 = v31;
    v32[1] = v33;
    uint64_t v34 = (void *)v3[3];
    uint64_t v35 = v55;
    outlined init with copy of PerformanceUtil.Ticket((uint64_t)v12, v55);
    unint64_t v36 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    unint64_t v37 = (v54 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = v3;
    unint64_t v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = swift_allocObject();
    outlined init with take of PerformanceUtil.Ticket(v35, v40 + v36);
    *(void *)(v40 + v37) = v38;
    uint64_t v41 = v56;
    *(void *)(v40 + v39) = v56;
    uint64_t v61 = partial apply for closure #1 in AssistantDataCache.updateSnapshot(on:onlyIfNeeded:);
    uint64_t v62 = v40;
    uint64_t v57 = MEMORY[0x1E4F143A8];
    uint64_t v58 = 1107296256;
    uint64_t v59 = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    uint64_t v60 = &block_descriptor_22;
    uint64_t v42 = _Block_copy(&v57);
    id v43 = v26;
    swift_retain();
    id v44 = v41;
    swift_release();
    objc_msgSend(v34, sel_handleCommand_completion_, v43, v42);
    _Block_release(v42);

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
  }
}