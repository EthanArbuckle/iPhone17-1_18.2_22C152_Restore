E5RT::ExecutionStream *cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::AJAXExtendE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5)
{
  void *v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v14;
  std::string v15;
  void *__p[2];
  unint64_t v17;
  unsigned char v18[48];

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    v15 = *(std::string *)a2;
  }
  v9 = __p;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      v10 = __len | 7;
    }
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __p[1] = (void *)__len;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v9;
    goto LABEL_11;
  }
  HIBYTE(v17) = __len;
  if (__len) {
LABEL_11:
  }
    memmove(v9, __src, __len);
  *((unsigned char *)v9 + __len) = 0;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v18, a5);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(a1, (uint64_t)&v15);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkIOTypes(a1);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts((E5RT::ExecutionStreamOperation **)a1);
  v12 = (std::__shared_weak_count *)*((void *)a1 + 2);
  v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  E5RT::ExecutionStream::PreWireInUseAllocations(*(E5RT::ExecutionStream **)a1);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(a1, 0);
  return a1;
}

void sub_25FA531FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::~EspressoE5MLModule(v22);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::espresso_inference::E5MLModuleSettings::~E5MLModuleSettings(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkIOTypes(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_new_token_mask");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  MEMORY[0x261205F50](v26, v32);
  v3 = operator new(0x20uLL);
  v28 = v3 + 2;
  v29 = v3 + 2;
  _OWORD *v3 = xmmword_25FB5F170;
  v3[1] = unk_25FB5F180;
  v27 = v3;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v26, (uint64_t)&v27);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  *((void *)this + 3) = E5RT::TensorDescriptor::GetNumElements(v5);
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_cached_keys");
  v6 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MEMORY[0x261205F50](v25, v32);
  uint64_t v7 = *((void *)this + 3);
  v8 = operator new(0x28uLL);
  v23 = (char *)v8 + 40;
  v24 = (char *)v8 + 40;
  _OWORD *v8 = xmmword_25FB5F140;
  v8[1] = xmmword_25FB5F140;
  *((void *)v8 + 4) = v7;
  __p = v8;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v6, (uint64_t)v25, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_cached_values");
  v9 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MEMORY[0x261205F50](v21, v32);
  uint64_t v10 = *((void *)this + 3);
  v11 = operator new(0x28uLL);
  v23 = (char *)v11 + 40;
  v24 = (char *)v11 + 40;
  _OWORD *v11 = xmmword_25FB5F140;
  v11[1] = xmmword_25FB5F140;
  *((void *)v11 + 4) = v10;
  __p = v11;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v9, (uint64_t)v21, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v21);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkInputTokenIDTensorType(this);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkSelfAttentionTensorType((E5RT::ExecutionStreamOperation **)this);
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_logits");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MEMORY[0x261205F50](v20, v32);
  v13 = operator new(0x20uLL);
  v23 = v13 + 2;
  v24 = (char *)(v13 + 2);
  _OWORD *v13 = xmmword_25FB5F190;
  v13[1] = unk_25FB5F1A0;
  __p = v13;
  cgm::token_generation_inference::ajax::utils::checkTensorType(OutputPortRef, (uint64_t)v20, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v20);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_cached_keys");
  v14 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MEMORY[0x261205F50](v19, v32);
  v15 = operator new(0x28uLL);
  v23 = v15 + 5;
  v24 = (char *)(v15 + 5);
  v15[4] = 1;
  *(_OWORD *)v15 = xmmword_25FB5F1B0;
  *((_OWORD *)v15 + 1) = unk_25FB5F1C0;
  __p = v15;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v14, (uint64_t)v19, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v19);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_cached_values");
  v16 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MEMORY[0x261205F50](v18, v32);
  v17 = operator new(0x28uLL);
  v23 = v17 + 5;
  v24 = (char *)(v17 + 5);
  v17[4] = 1;
  *(_OWORD *)v17 = xmmword_25FB5F1B0;
  *((_OWORD *)v17 + 1) = unk_25FB5F1C0;
  __p = v17;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v16, (uint64_t)v18, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v18);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v30);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v31);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v32);
}

void sub_25FA536AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a13);
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 80));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 64));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 48));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, unint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  v4 = (void *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v5 < 2) {
    v4 = 0;
  }
  if ((uint64_t)(v5 & 0xFFFFFFFFFFFFFFFELL) >= 1) {
    memset_pattern16(v4, &unk_25FB5F160, 2 * (((v5 & 0xFFFFFFFFFFFFFFFELL) >> 1) - ((v5 & 0xFFFFFFFFFFFFFFFELL) != 1)) + 2);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(this, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_mask");
  v6 = (void *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v7 < 2) {
    v6 = 0;
  }
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) >= 1) {
    bzero(v6, 2 * (((v7 & 0xFFFFFFFFFFFFFFFELL) >> 1) - ((v7 & 0xFFFFFFFFFFFFFFFELL) != 1)) + 2);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(this, (uint64_t)&__p);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&__p, a2);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_25FA53924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::~EspressoE5MLModule(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, __int16 a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  uint64_t v3 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  unint64_t v5 = v4;
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v5 >= 2) {
    v6 = (_WORD *)v3;
  }
  else {
    v6 = 0;
  }
  _WORD *v6 = a2;
}

void sub_25FA53A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v6, "in_cached_keys");
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort((_OWORD *)a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values");
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort((_OWORD *)(a2 + 16));
  *(void *)(a2 + 32) = *((void *)this + 3);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_25FA53ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, __int16 a2, unint64_t a3)
{
  unint64_t v5 = *((void *)this + 3);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(this, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_mask");
  uint64_t v6 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  unint64_t v7 = a3 % v5;
  if (v8 >= 2) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(v9 + 2 * v7) = COERCE_UNSIGNED_INT(1.0);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setSelfAttentionBuffer((E5RT::ExecutionStreamOperation **)this, a3);
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)this);
  *(_WORD *)(v9 + 2 * v7) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_keys");
  uint64_t v10 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  unint64_t v12 = v11;
  std::string::basic_string[abi:ne180100]<0>(v24, "in_cached_keys");
  uint64_t v13 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v12 >= 2) {
    v15 = (void *)v10;
  }
  else {
    v15 = 0;
  }
  if (v14 >= 2) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0;
  }
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v15, v12 >> 1, 0, 1uLL, v16, v14 >> 1, v7, *((void *)this + 3), 1);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_values");
  uint64_t v17 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  unint64_t v19 = v18;
  std::string::basic_string[abi:ne180100]<0>(v24, "in_cached_values");
  uint64_t v20 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v19 >= 2) {
    v22 = (void *)v17;
  }
  else {
    v22 = 0;
  }
  if (v21 >= 2) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = 0;
  }
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v22, v19 >> 1, 0, 1uLL, v23, v21 >> 1, v7, *((void *)this + 3), 1);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25FA53D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setSelfAttentionBuffer(E5RT::ExecutionStreamOperation **this, unint64_t a2)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v18, InputPorts);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  uint64_t v4 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v5 >= 2) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v17 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = 0;
  short float v8 = (short float)a2;
  uint64_t v9 = 1;
  if (a2 + 1 > 1) {
    uint64_t v9 = a2 + 1;
  }
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(v9 - 1);
  unint64_t v11 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
  int64x2_t v12 = (int64x2_t)xmmword_25FB5F150;
  int64x2_t v13 = vdupq_n_s64(2uLL);
  do
  {
    int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)v12));
    if (v14.i8[0]) {
      *(short float *)(v6 + 2 * v7) = (short float)v7 - v8;
    }
    if (v14.i8[4]) {
      *(short float *)(v6 + 2 * v7 + 2) = (short float)(v7 + 1) - v8;
    }
    v7 += 2;
    int64x2_t v12 = vaddq_s64(v12, v13);
  }
  while (v11 != v7);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v18);
}

void sub_25FA53E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  return *((void *)this + 3);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (v4 - *a2 != v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Tried to purge key-value cache, but the number of source destinations does not match the number of target destinations.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v4 != *a2)
  {
    uint64_t v30 = a4;
    unint64_t v9 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v34, "in_cached_values");
      uint64_t v10 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      unint64_t v12 = v11;
      uint64_t v13 = *(unsigned int *)(*a2 + 4 * v9);
      unint64_t v14 = *(void *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values");
      uint64_t v15 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      if (v12 >= 2) {
        char v17 = (void *)v10;
      }
      else {
        char v17 = 0;
      }
      if (v16 >= 2) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 0;
      }
      _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v17, v12 >> 1, v13, v14, v18, v16 >> 1, *(unsigned int *)(*a3 + 4 * v9), *(void *)(a1 + 24), 1);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v34, "in_cached_keys");
      uint64_t v19 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      unint64_t v21 = v20;
      uint64_t v22 = *(unsigned int *)(*a2 + 4 * v9);
      unint64_t v23 = *(void *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_keys");
      uint64_t v24 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      if (v21 >= 2) {
        v26 = (void *)v19;
      }
      else {
        v26 = 0;
      }
      if (v25 >= 2) {
        uint64_t v27 = v24;
      }
      else {
        uint64_t v27 = 0;
      }
      _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v26, v21 >> 1, v22, v23, v27, v25 >> 1, *(unsigned int *)(*a3 + 4 * v9), *(void *)(a1 + 24), 1);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      ++v9;
    }
    while (v9 < (uint64_t)(a2[1] - *a2) >> 2);
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1] - *a3;
    a4 = v30;
  }
  return *(unsigned int *)(v6 + v5 - 4) - a4;
}

void sub_25FA540F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkInputTokenIDTensorType(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  MEMORY[0x261205F50](v3, v7);
  v2 = operator new(0x18uLL);
  uint64_t v5 = v2 + 3;
  uint64_t v6 = (char *)(v2 + 3);
  v2[2] = 2;
  *(_OWORD *)v2 = xmmword_25FB5F1D8;
  __p = v2;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v3, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v3);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v7);
}

void sub_25FA54218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v17 - 32));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkSelfAttentionTensorType(E5RT::ExecutionStreamOperation **this)
{
  E5RT::TensorDataType::TensorDataType();
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v10, InputPorts);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  MEMORY[0x261205F50](v6, v11);
  uint64_t v4 = this[3];
  uint64_t v5 = (int64x2_t *)operator new(0x20uLL);
  short float v8 = v5 + 2;
  unint64_t v9 = v5 + 2;
  v5->i64[0] = 1;
  v5->i64[1] = (uint64_t)v4;
  v5[1] = vdupq_n_s64(1uLL);
  __p = v5;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v6, (uint64_t)&__p);
  if (__p)
  {
    short float v8 = (int64x2_t *)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v11);
}

void sub_25FA5435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a17);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v17 - 32));
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    short float v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265541A58, MEMORY[0x263F8C060]);
}

void sub_25FA544C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25FA54740(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25FA54C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25FA54C88(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_25FA55270(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *_ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(void *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v27 = result;
  unint64_t v28 = a2;
  uint64_t v25 = a5;
  unint64_t v26 = a6;
  if ((a6 - a7 - a9) / a8 != (a2 - a3 - a9) / a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Number of src strides dont match number of dst strides");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (!a9)
  {
    uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v23, 0);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Strided Chunk length < 0: ", &v23, &v24);
    std::runtime_error::runtime_error(v22, &v24);
    __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v9 = a3;
  uint64_t v10 = a9 - 1;
  if (a9 - 1 + a3 < a2)
  {
    unint64_t v12 = a7;
    uint64_t v15 = result;
    do
    {
      if (v10 + v12 >= v26) {
        break;
      }
      if (a9 == 1)
      {
        *(_WORD *)(a5 + 2 * v12) = v15[v9];
      }
      else
      {
        unint64_t v16 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v27, v9, a9);
        uint64_t v18 = v17;
        uint64_t v19 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v25, v12, a9);
        uint64_t result = _ZN3cgm26token_generation_inference4ajax5utils4copyIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEES7_(v16, v18, v19, v20);
        a2 = v28;
      }
      v9 += a4;
      v12 += a8;
    }
    while (v10 + v9 < a2);
  }
  return result;
}

void sub_25FA55508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  int v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *_ZN3cgm26token_generation_inference4ajax5utils4copyIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEES7_(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (a2 != a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "dimensions mismatch");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a2)
  {
    return memmove(__dst, __src, 2 * a2);
  }
  return __src;
}

void sub_25FA5565C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((unint64_t v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_265541A50, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_25FA556E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  __n128 result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25FA55790(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25FA55A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25FA55A8C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::AJAXE5MLModelBase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  E5RT::ProgramLibrary::OpenLibrary();
  if (v12) {
    operator new();
  }
  uint64_t v12 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&v11);
  std::string::size_type v4 = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[0] = 0;
  if (v4) {
    (*(void (**)(std::string::size_type))(*(void *)v4 + 8))(v4);
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable((uint64_t)&v9, (uint64_t *)&v11);
  long long v5 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = 0uLL;
  size_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (v11.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11.__r_.__value_.__l.__size_);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_25FA55E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v17 + 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  size_t v21 = *(std::__shared_weak_count **)(v17 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::shared_ptr[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((uint64_t *)&v6, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::create(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = *this;
  }
  E5RT::ProgramLibrary::OpenLibrary();
  if (v8) {
    operator new();
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  for (i = *(long long **)(E5RT::ProgramLibrary::GetExportedFunctions(0) + 16); i; i = *(long long **)i)
  {
    std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](&v9, i + 1);
    char v3 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v9.__r_.__value_.__l.__size_;
    }
    if (size == strlen("load_embeddings"))
    {
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v5 = &v9;
      }
      else {
        long long v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
      }
      BOOL v6 = memcmp(v5, "load_embeddings", size) != 0;
    }
    else
    {
      BOOL v6 = 1;
    }
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      char v3 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    if (v3 < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (v6) {
      operator new();
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v9, "Failed to load base model due to no valid E5 functions found.");
  cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v9);
}

void sub_25FA56184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::AJAXE5MLModelBase(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::getSharedConstants(cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((void *)this + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "in_embeddings");
    long long v4 = (std::__shared_weak_count *)*((void *)this + 3);
    *((void *)&v6 + 1) = *((void *)this + 2);
    uint64_t v7 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(a2, (unsigned __int8 *)__p, 1);
  }
  else
  {
    uint64_t v7 = 0;
    *(_OWORD *)__p = 0u;
    long long v6 = 0u;
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(a2, (unsigned __int8 *)__p, 1);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SBYTE7(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_25FA56304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t *std::shared_ptr<E5RT::ExecutionStreamOperation>::shared_ptr[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::string *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, a2, (long long *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_25FA565FC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXE5MLModelLoader::createModelFromBundle(TGIE5ModelConfiguration *this, const TGIE5ModelConfiguration *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  p_var1 = (std::string *)&this->var1;
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)&this->var1, (uint64_t)&v41);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".mil");
  v43.__data_ = (const std::string_view::value_type *)&__p;
  BOOL v4 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v41, v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_5:
      if (this->var0 != 2)
      {
        if (this->var0 == 1) {
          operator new();
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "Cannot load a MIL model without being told the ModelType");
        cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v41);
      }
      operator new();
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, this->var1.var0.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var0.var1.var1);
  }
  else {
    std::string v41 = *p_var1;
  }
  E5RT::ProgramLibrary::OpenLibrary();
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v40);
  TGIE5ModelConfiguration::e5FunctionNames(this, (uint64_t *)&v37);
  if (v37 == v38)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(v41.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_25FA51000, &_os_log_internal, OS_LOG_TYPE_INFO, "No function names in the model configuration, reading from the model bundle", (uint8_t *)&v41, 2u);
    }
    long long v6 = (uint64_t *)ExportedFunctions[2];
    if (v6)
    {
      uint64_t v7 = &_os_log_internal;
      do
      {
        uint64_t v8 = (std::string::size_type *)(v6 + 2);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v9 = (std::string::size_type)(v6 + 2);
          if (*((char *)v6 + 39) < 0) {
            std::string::size_type v9 = *v8;
          }
          LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v9;
          _os_log_impl(&dword_25FA51000, v7, OS_LOG_TYPE_INFO, "Found exported function in model bundle: %s", (uint8_t *)&v41, 0xCu);
        }
        unint64_t v10 = v38;
        if ((unint64_t)v38 >= v39)
        {
          uint64_t v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v37, (long long *)v6 + 1);
        }
        else
        {
          if (*((char *)v6 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v6[2], v6[3]);
          }
          else
          {
            long long v11 = *(_OWORD *)v8;
            v38->__r_.__value_.__r.__words[2] = v6[4];
            *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
          }
          uint64_t v12 = v10 + 1;
        }
        unint64_t v38 = v12;
        long long v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
  }
  unint64_t v13 = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v40);
  *((unsigned char *)&v41.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v41, "load_embeddings");
  BOOL v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v13, (unsigned __int8 *)&v41);
  unint64_t v15 = v14;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if (v15) {
LABEL_33:
    }
      operator new();
  }
  else if (v14)
  {
    goto LABEL_33;
  }
  float v16 = (char *)v37;
  uint64_t v17 = v38;
  if (v37 == v38)
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v36 = 0;
  }
  else
  {
    BOOL v18 = &_os_log_internal;
    do
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        std::string::size_type v19 = (std::string::size_type)v16;
        if (v16[23] < 0) {
          std::string::size_type v19 = *(void *)v16;
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = v19;
        _os_log_impl(&dword_25FA51000, v18, OS_LOG_TYPE_INFO, "Found exported function in model bundle: %s", (uint8_t *)&v41, 0xCu);
      }
      if (cgm::token_generation_inference::ajax::utils::isPromptFunctionName(v16))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
        {
          LOWORD(v41.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_25FA51000, &_os_log_internal, OS_LOG_TYPE_INFO, "Creating enumerated shape model", (uint8_t *)&v41, 2u);
        }
        operator new();
      }
      v16 += 24;
    }
    while (v16 != (char *)v17);
    unint64_t v20 = v37;
    size_t v21 = v38;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v36 = 0;
    if (v37 != v38)
    {
      while (!cgm::token_generation_inference::ajax::utils::isExtendFunctionName((char *)v20))
      {
        if (++v20 == v21) {
          goto LABEL_64;
        }
      }
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&__p, v20);
LABEL_64:
      if (v36)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_impl(&dword_25FA51000, &_os_log_internal, OS_LOG_TYPE_INFO, "Creating static shape model with extend function name: %s", (uint8_t *)&v41, 0xCu);
        }
        TGIE5ModelConfiguration::mutableWeightsSymbolToPath(this, (unsigned __int8 **)&__p, (uint64_t)&v41);
        operator new();
      }
    }
  }
  char v34 = 4;
  strcpy((char *)v33, "main");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v33))
  {
    uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v33);
    unint64_t v23 = v22;
    if (v22)
    {
      uint64_t v24 = *((void *)v22 + 5);
      uint64_t v25 = *((void *)v23 + 6);
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      if (this->var0 == 1) {
        goto LABEL_58;
      }
      if (!this->var0)
      {
        unint64_t v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24);
        std::string::basic_string[abi:ne180100]<0>(&v41, "out_logits");
        uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v26, (unsigned __int8 *)&v41);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        if (!v27)
        {
          uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v32, "Missing port output logits required to determine ane vs gpu");
          __cxa_throw(v32, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        unint64_t v28 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v27 + 5));
        if (E5RT::TensorDescriptor::GetRank(v28) == 4)
        {
LABEL_58:
          TGIE5ModelConfiguration::mutableWeightsSymbolToPath(this, (unsigned __int8 **)v33, (uint64_t)&v41);
          operator new();
        }
      }
      operator new();
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v31, "Bundle does not contain extend or main function.");
  __cxa_throw(v31, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25FA56E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int16 *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  MEMORY[0x2612065E0](v44, 0x10B3C405ED29779);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a39);
  if (a24 && a23 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v46 = a31;
  a31 = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  _Unwind_Resume(a1);
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t *TGIE5ModelConfiguration::e5FunctionNames@<X0>(TGIE5ModelConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::for_each[abi:ne180100]<std::__wrap_iter<TGIE5Function const*>,TGIE5ModelConfiguration::e5FunctionNames(void)::{lambda(std::__wrap_iter<TGIE5Function const*> const&)#1}>(*(long long **)&this[1].var0, (long long *)this[1].var1.var0.var0.var0.var0.var1.var0, a2);
}

void sub_25FA57210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t TGIE5ModelConfiguration::mutableWeightsSymbolToPath@<X0>(void *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  v18.__r_.__value_.__s.__data_[0] = 0;
  char v19 = 0;
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  if (v5 != v6)
  {
    char v7 = *((unsigned char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v8 = a2[1];
    }
    if (v7 >= 0) {
      unint64_t v9 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    do
    {
      uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
      if ((v10 & 0x80u) == 0) {
        long long v11 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
      }
      else {
        long long v11 = *(unsigned __int8 **)(v5 + 8);
      }
      if (v11 == v8)
      {
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v5, v9, *(void *)(v5 + 8)))
          {
LABEL_21:
            std::optional<TGIE5Function>::operator=[abi:ne180100]<TGIE5Function const&,void>(&v18, (std::string *)v5);
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v5 + 23)) {
            goto LABEL_21;
          }
          uint64_t v12 = 0;
          while (*(unsigned __int8 *)(v5 + v12) == v9[v12])
          {
            if (v10 == ++v12) {
              goto LABEL_21;
            }
          }
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v14 = a1[4];
  uint64_t v13 = a1[5];
  v20[0] = &v18;
  v20[1] = a3;
  if (v14 != v13)
  {
    do
    {
      BOOL v15 = _ZZNK23TGIE5ModelConfiguration26mutableWeightsSymbolToPathERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEENKUlRKT_E_clI25TGIE5AdapterConfigurationEEDaSB_(v20, v14);
      v14 += 72;
      char v16 = v14 == v13 || v15;
    }
    while ((v16 & 1) == 0);
  }
  return std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
}

void sub_25FA573B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::for_each[abi:ne180100]<std::__wrap_iter<TGIE5Function const*>,TGIE5ModelConfiguration::e5FunctionNames(void)::{lambda(std::__wrap_iter<TGIE5Function const*> const&)#1}>(long long *a1, long long *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    unint64_t v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        unint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v5);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v5);
        v6 += 24;
      }
      a3[1] = v6;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_25FA574AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_25FA575C4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::optional<TGIE5Function>::operator=[abi:ne180100]<TGIE5Function const&,void>(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[16])
  {
    std::string::operator=(this, __str);
    this[1].__r_.__value_.__r.__words[0] = __str[1].__r_.__value_.__r.__words[0];
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 32), (std::string *)((char *)__str + 32));
  }
  else
  {
    std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function const&,TGIE5Function*>(this, (long long *)__str);
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

std::string *std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function const&,TGIE5Function*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), a2 + 2);
  return this;
}

void sub_25FA579D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_25FA57A1C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

BOOL _ZZNK23TGIE5ModelConfiguration26mutableWeightsSymbolToPathERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEENKUlRKT_E_clI25TGIE5AdapterConfigurationEEDaSB_(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(*a1 + 64))
  {
    BOOL result = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(*a1 + 32), (unsigned __int8 *)a2);
    if (!result) {
      return result;
    }
    if (*(char *)(a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
    }
    else {
      std::string v8 = *(std::string *)(a2 + 48);
    }
  }
  else if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    std::string v8 = *(std::string *)(a2 + 48);
  }
  uint64_t v5 = a1[1];
  uint64_t v9 = (long long *)(a2 + 24);
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)(a2 + 24), (uint64_t)&std::piecewise_construct, &v9);
  uint64_t v7 = (void **)(v6 + 40);
  if ((char)v6[63] < 0) {
    operator delete(*v7);
  }
  *(std::string *)uint64_t v7 = v8;
  return 1;
}

void sub_25FA57BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[24];
  if (a1[24])
  {
    uint64_t v3 = a1[23];
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = a1[23];
    }
    else {
      uint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v5 = a2[23];
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v4 == v5)
    {
      if (v6 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        uint64_t v7 = v3 - 1;
        do
        {
          int v9 = *a1++;
          int v8 = v9;
          int v11 = *a2++;
          int v10 = v11;
          BOOL v13 = v7-- != 0;
          BOOL v14 = v8 == v10;
          uint64_t v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25FA57EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA57F94(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_25FA580E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  unint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    BOOL v14 = this;
    if ((v6 & 0x80) != 0) {
      BOOL v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint8x8_t v12 = __p;
    }
    else {
      uint8x8_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_25FA5825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    BOOL result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265541A60, MEMORY[0x263F8C068]);
}

void sub_25FA5846C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

E5RT::ExecutionStream *cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::AJAXPromptE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  unint64_t v9 = __p;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v10 = __len | 7;
    }
    size_t v11 = v10 + 1;
    unint64_t v9 = operator new(v10 + 1);
    __p[1] = (void *)__len;
    unint64_t v15 = v11 | 0x8000000000000000;
    __p[0] = v9;
    goto LABEL_11;
  }
  HIBYTE(v15) = __len;
  if (__len) {
LABEL_11:
  }
    memmove(v9, __src, __len);
  *((unsigned char *)v9 + __len) = 0;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v16, a5);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(a1, (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::checkIOTypes(a1);
  return a1;
}

void sub_25FA586F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::~EspressoE5MLModule(v20);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::checkIOTypes(cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *this)
{
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&v22, "in_new_token_id_2U8LE");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  MEMORY[0x261205F50](v21, v26);
  uint64_t v3 = operator new(0x18uLL);
  unint64_t v23 = v3 + 3;
  unint64_t v24 = (char *)(v3 + 3);
  v3[2] = 2;
  *(_OWORD *)uint64_t v3 = xmmword_25FB5F2A0;
  size_t v22 = v3;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v21, (uint64_t)&v22);
  if (v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v21);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  int8x8_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  *((void *)this + 3) = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v5) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v22, "in_relative_positions");
  unint64_t v6 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MEMORY[0x261205F50](v20, v25);
  uint64_t v7 = *((void *)this + 3);
  unint64_t v8 = operator new(0x20uLL);
  float v18 = v8 + 4;
  BOOL v19 = (char *)(v8 + 4);
  void *v8 = 1;
  v8[1] = v7;
  v8[2] = 1;
  v8[3] = v7;
  std::string __p = v8;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v6, (uint64_t)v20, (uint64_t)&__p);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v20);
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "out_cached_keys");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MEMORY[0x261205F50](v16, v25);
  uint64_t v10 = *((void *)this + 3);
  size_t v11 = operator new(0x28uLL);
  float v18 = (char *)v11 + 40;
  BOOL v19 = (char *)v11 + 40;
  _OWORD *v11 = xmmword_25FB5F140;
  v11[1] = xmmword_25FB5F140;
  *((void *)v11 + 4) = v10;
  std::string __p = v11;
  cgm::token_generation_inference::ajax::utils::checkTensorType(OutputPortRef, (uint64_t)v16, (uint64_t)&__p);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v16);
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "out_cached_values");
  uint64_t v12 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MEMORY[0x261205F50](v15, v25);
  uint64_t v13 = *((void *)this + 3);
  BOOL v14 = operator new(0x28uLL);
  float v18 = (char *)v14 + 40;
  BOOL v19 = (char *)v14 + 40;
  _OWORD *v14 = xmmword_25FB5F140;
  v14[1] = xmmword_25FB5F140;
  *((void *)v14 + 4) = v13;
  std::string __p = v14;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v12, (uint64_t)v15, (uint64_t)&__p);
  if (__p)
  {
    float v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v15);
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
}

void sub_25FA58A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a11);
  if (*(char *)(v20 - 65) < 0) {
    operator delete(*(void **)(v20 - 88));
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v20 - 64));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v20 - 48));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::setUp(E5RT::ExecutionStreamOperation **this, const cgm::token_generation_inference::ajax::utils::AJAXKVCache *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_keys");
  uint64_t OutputPortRef = E5RT::ExecutionStreamOperation::GetOutputPortRef();
  int8x8_t v5 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v25 = *(void *)a2;
  unint64_t v26 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(OutputPortRef, (uint64_t)&v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_values");
  uint64_t v6 = E5RT::ExecutionStreamOperation::GetOutputPortRef();
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v23 = *((void *)a2 + 2);
  unint64_t v24 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(v6, (uint64_t)&v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(this);
  unint64_t v8 = (std::__shared_weak_count *)this[2];
  size_t v22 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  E5RT::ExecutionStream::PreWireInUseAllocations(*this);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
  uint64_t v9 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  unint64_t v11 = v10 >> 1;
  if (v10 >= 2) {
    uint64_t v12 = (void *)v9;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if ((uint64_t)(2 * v11) >= 1) {
    memset_pattern16(v12, &unk_25FB5F160, 2 * (((2 * v11) >> 1) - (2 * v11 != 1)) + 2);
  }
  uint64_t v13 = this[3];
  if (v13)
  {
    BOOL v14 = 0;
    unint64_t v15 = (unint64_t)v13 + 1;
    uint64_t v16 = -(uint64_t)v13;
    uint64_t v17 = (uint64_t)v12 + 2 * (void)v13 - 2;
    do
    {
      if ((uint64_t)((char *)v13 - 1) >= (uint64_t)v14)
      {
        unint64_t v18 = 0;
        uint64x2_t v19 = (uint64x2_t)vdupq_n_s64((unint64_t)v13 + ~(unint64_t)v14);
        uint64_t v20 = (short float *)v17;
        do
        {
          int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v19, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v18), (int8x16_t)xmmword_25FB5F150)));
          if (v21.i8[0]) {
            *uint64_t v20 = (short float)(uint64_t)(v16 + v18 + 1);
          }
          if (v21.i8[4]) {
            *(v20 - 1) = (short float)(uint64_t)(v16 + v18 + 2);
          }
          v18 += 2;
          v20 -= 2;
        }
        while ((v15 & 0xFFFFFFFFFFFFFFFELL) != v18);
      }
      BOOL v14 = (E5RT::ExecutionStreamOperation *)((char *)v14 + 1);
      --v15;
      ++v16;
      v17 += 2 * (void)v13;
    }
    while (v14 != v13);
  }
}

void sub_25FA58D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::forward(E5RT::ExecutionStream **a1, int **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  uint64_t v4 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  unint64_t v6 = v5 >> 1;
  if (v5 >= 2) {
    uint64_t v7 = (_WORD *)v4;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if ((uint64_t)(2 * v6) >= 1) {
    bzero(v7, 2 * (((2 * v6) >> 1) - (2 * v6 != 1)) + 2);
  }
  unint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  while (v8 != v9)
  {
    int v10 = *v8++;
    *v7++ = v10;
  }
  return E5RT::ExecutionStream::ExecuteStreamSync(*a1);
}

void sub_25FA58E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::getMaxStateLength(cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *this)
{
  return *((void *)this + 3);
}

std::runtime_error *cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(std::runtime_error *a1, int a2, std::string *a3)
{
  BOOL result = std::runtime_error::runtime_error(a1, a3);
  result->__vftable = (std::runtime_error_vtbl *)&unk_270BD1C88;
  LODWORD(result[1].__vftable) = a2;
  return result;
}

{
  std::runtime_error *result;

  BOOL result = std::runtime_error::runtime_error(a1, a3);
  result->__vftable = (std::runtime_error_vtbl *)&unk_270BD1C88;
  LODWORD(result[1].__vftable) = a2;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::AJAXE5Error::getErrorCode(cgm::token_generation_inference::ajax::AJAXE5Error *this)
{
  return *((unsigned int *)this + 4);
}

void cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::to_string(&v16, a1);
  unint64_t v5 = std::string::insert(&v16, 0, "Context length of ", 0x12uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v17, " was exceeded during ", 0x15uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a2;
  }
  else {
    int v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = std::string::append(&v18, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  BOOL v14 = std::string::append(&v19, ".", 1uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v20);
  *(void *)a3 = &unk_270BD1C88;
  *(_DWORD *)(a3 + 16) = 2;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_25FA59080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::AJAXE5Error::~AJAXE5Error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x2612065E0);
}

void cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  unint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5 != v4)
  {
    uint64_t v7 = v5 + 1;
    if (v5 + 1 == v4)
    {
      long long v8 = 0;
    }
    else
    {
      long long v8 = 0;
      int v9 = a3 + 2;
      do
      {
        int v10 = v7;
        uint64_t v11 = v5[1] - *v5;
        uint64_t v12 = v11 - 1;
        if (v11 != 1)
        {
          uint64_t v13 = *v5 + 1;
          uint64_t v14 = (((uint64_t)v5 - *(void *)a2) >> 3) + 1;
          if ((unint64_t)v8 >= *v9)
          {
            long long v15 = *a3;
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a3);
            unint64_t v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(*v9 - (void)v15) >> 3) > v17) {
              unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v9 - (void)v15) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v9 - (void)v15) >> 3) >= 0x555555555555555) {
              unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18)
            {
              std::string v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v18);
              long long v15 = *a3;
              long long v8 = a3[1];
            }
            else
            {
              std::string v19 = 0;
            }
            std::string v20 = (uint64_t *)&v19[24 * v16];
            *std::string v20 = v13;
            v20[1] = v12;
            void v20[2] = v14;
            int32x2_t v21 = v20;
            if (v8 != v15)
            {
              do
              {
                long long v22 = *(_OWORD *)(v8 - 3);
                *(v21 - 1) = *(v8 - 1);
                *(_OWORD *)(v21 - 3) = v22;
                v21 -= 3;
                v8 -= 3;
              }
              while (v8 != v15);
              long long v15 = *a3;
            }
            long long v8 = v20 + 3;
            *a3 = v21;
            a3[1] = v20 + 3;
            a3[2] = (uint64_t *)&v19[24 * v18];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            uint64_t *v8 = v13;
            v8[1] = v12;
            v8[2] = v14;
            v8 += 3;
          }
          a3[1] = v8;
          uint64_t v4 = *(void **)(a2 + 8);
        }
        uint64_t v7 = v10 + 1;
        unint64_t v5 = v10;
      }
      while (v10 + 1 != v4);
    }
    uint64_t v23 = *(v4 - 1);
    if (v23 != a1 - 1)
    {
      uint64_t v24 = v23 + 1;
      uint64_t v25 = ~v23 + a1;
      uint64_t v26 = ((uint64_t)v4 - *(void *)a2) >> 3;
      unint64_t v27 = (unint64_t)a3[2];
      if ((unint64_t)v8 >= v27)
      {
        uint64_t v29 = *a3;
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)v29) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          char v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v33);
          uint64_t v29 = *a3;
          long long v8 = a3[1];
        }
        else
        {
          char v34 = 0;
        }
        uint64_t v35 = &v34[24 * v30];
        char v36 = &v34[24 * v33];
        *(void *)uint64_t v35 = v24;
        *((void *)v35 + 1) = v25;
        *((void *)v35 + 2) = v26;
        uint64_t v28 = (uint64_t *)(v35 + 24);
        if (v8 != v29)
        {
          do
          {
            long long v37 = *(_OWORD *)(v8 - 3);
            *((void *)v35 - 1) = *(v8 - 1);
            *(_OWORD *)(v35 - 24) = v37;
            v35 -= 24;
            v8 -= 3;
          }
          while (v8 != v29);
          uint64_t v29 = *a3;
        }
        *a3 = (uint64_t *)v35;
        a3[1] = v28;
        a3[2] = (uint64_t *)v36;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t *v8 = v24;
        v8[1] = v25;
        uint64_t v28 = v8 + 3;
        v8[2] = v26;
      }
      a3[1] = v28;
    }
  }
}

void sub_25FA59420(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

cgm::token_generation_inference::common::logging::CGMTGILogger *cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(cgm::token_generation_inference::common::logging::CGMTGILogger *result, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a4 && *a3 != a3[1])
  {
    uint64_t v12 = result;
    uint64_t v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(result);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v14)
    {
      uint64_t v15 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)buf = 134219008;
      *(void *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 2048;
      unint64_t v27 = a5;
      *(_WORD *)uint64_t v28 = 2048;
      *(void *)&v28[2] = a6;
      *(_WORD *)&v28[10] = 2048;
      *(void *)&v28[12] = a7;
      _os_log_impl(&dword_25FA51000, v13, OS_LOG_TYPE_INFO, "Filling cache holes for {numHoles=%zu, currentCacheSize=%zu, maxCacheSize=%zu, sequentialElementsPerToken=%zu, numSequencesPerToken=%zu}", buf, 0x34u);
    }
    unint64_t v16 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v14);
    unint64_t v17 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v16);
    unint64_t v18 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v17);
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      std::string v19 = v18;
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_25FA51000, v19, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "Fill_Cache_Holes", "", buf, 2u);
      }
    }
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIaEEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke;
    unint64_t v27 = &__block_descriptor_tmp;
    *(void *)uint64_t v28 = v17;
    *(void *)&v28[8] = a3;
    cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(a4, (uint64_t)a3, (uint64_t **)&__p);
    std::string v20 = __p;
    if (a7)
    {
      uint64_t v21 = 0;
      long long v22 = v25;
      do
      {
        if (v20 != v22)
        {
          uint64_t v23 = v20;
          do
          {
            memmove((char *)v12 + (*v23 + v21 * (void)a5 - v23[2]) * a6, (char *)v12 + (*v23 + v21 * (void)a5) * a6, v23[1] * a6);
            v23 += 3;
          }
          while (v23 != v22);
        }
        ++v21;
      }
      while (v21 != a7);
    }
    if (v20)
    {
      uint64_t v25 = v20;
      operator delete(v20);
    }
    return (cgm::token_generation_inference::common::logging::CGMTGILogger *)(*(uint64_t (**)(unsigned char *))&buf[16])(buf);
  }
  return result;
}

{
  cgm::token_generation_inference::common::logging::CGMTGILogger *v12;
  NSObject *v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *__p;
  void *v25;
  unsigned char buf[24];
  void *v27;
  unsigned char v28[20];
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a4 && *a3 != a3[1])
  {
    uint64_t v12 = result;
    uint64_t v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(result);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v14)
    {
      uint64_t v15 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)buf = 134219008;
      *(void *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 2048;
      unint64_t v27 = a5;
      *(_WORD *)uint64_t v28 = 2048;
      *(void *)&v28[2] = a6;
      *(_WORD *)&v28[10] = 2048;
      *(void *)&v28[12] = a7;
      _os_log_impl(&dword_25FA51000, v13, OS_LOG_TYPE_INFO, "Filling cache holes for {numHoles=%zu, currentCacheSize=%zu, maxCacheSize=%zu, sequentialElementsPerToken=%zu, numSequencesPerToken=%zu}", buf, 0x34u);
    }
    unint64_t v16 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v14);
    unint64_t v17 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v16);
    unint64_t v18 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v17);
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      std::string v19 = v18;
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_25FA51000, v19, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "Fill_Cache_Holes", "", buf, 2u);
      }
    }
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke;
    unint64_t v27 = &__block_descriptor_tmp_8;
    *(void *)uint64_t v28 = v17;
    *(void *)&v28[8] = a3;
    cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(a4, (uint64_t)a3, (uint64_t **)&__p);
    std::string v20 = __p;
    if (a7)
    {
      uint64_t v21 = 0;
      long long v22 = v25;
      do
      {
        if (v20 != v22)
        {
          uint64_t v23 = v20;
          do
          {
            memmove((char *)v12 + 2 * (*v23 + v21 * (void)a5 - v23[2]) * a6, (char *)v12 + 2 * (*v23 + v21 * (void)a5) * a6, 2 * a6 * v23[1]);
            v23 += 3;
          }
          while (v23 != v22);
        }
        ++v21;
      }
      while (v21 != a7);
    }
    if (v20)
    {
      uint64_t v25 = v20;
      operator delete(v20);
    }
    return (cgm::token_generation_inference::common::logging::CGMTGILogger *)(*(uint64_t (**)(unsigned char *))&buf[16])(buf);
  }
  return result;
}

void sub_25FA5967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void (*a15)(char *))
{
}

void sub_25FA598F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void (*a15)(char *))
{
}

void ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIaEEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  os_signpost_id_t v3 = *((void *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      uint64_t v5 = (uint64_t)(*(void *)(*((void *)a1 + 5) + 8) - **((void **)a1 + 5)) >> 3;
      int v6 = 134217984;
      uint64_t v7 = v5;
      _os_signpost_emit_with_name_impl(&dword_25FA51000, v4, OS_SIGNPOST_INTERVAL_END, v3, "Fill_Cache_Holes", "Number of holes: %zu", (uint8_t *)&v6, 0xCu);
    }
  }
}

void ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  os_signpost_id_t v3 = *((void *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      uint64_t v5 = (uint64_t)(*(void *)(*((void *)a1 + 5) + 8) - **((void **)a1 + 5)) >> 3;
      int v6 = 134217984;
      uint64_t v7 = v5;
      _os_signpost_emit_with_name_impl(&dword_25FA51000, v4, OS_SIGNPOST_INTERVAL_END, v3, "Fill_Cache_Holes", "Number of holes: %zu", (uint8_t *)&v6, 0xCu);
    }
  }
}

void cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions(cgm::token_generation_inference::ajax::utils *this@<X0>, uint64_t *a2@<X8>)
{
  *(void *)&long long v11 = *MEMORY[0x263EF8340];
  E5RT::E5CompilerOptions::Create(a2, this);
  E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns((E5RT::E5CompilerOptions *)*a2);
  E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps((E5RT::E5CompilerOptions *)*a2);
  E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup((E5RT::E5CompilerOptions *)*a2);
  os_signpost_id_t v3 = operator new(0x10uLL);
  std::string __p = v3;
  _OWORD *v3 = xmmword_25FB5F2D0;
  uint64_t v5 = v3 + 1;
  int v6 = (char *)(v3 + 1);
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "*");
  std::string __p = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  p_p = &__p;
  char v8 = 0;
  std::string __p = operator new(0x18uLL);
  uint64_t v5 = __p;
  int v6 = (char *)__p + 24;
  uint64_t v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (long long *)v9, &v11, (std::string *)__p);
  E5RT::E5CompilerOptions::SetMilEntryPoints();
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "OptimizeKernelCoalescing=true,BSSLimit=3758096384,EnableAggressiveNETransposeFusion=true");
  E5RT::E5CompilerOptions::SetCustomAneCompilerOptions();
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
}

void sub_25FA59C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v25 = *v23;
  uint64_t *v23 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions(cgm::token_generation_inference::ajax::utils *this@<X0>, uint64_t *a2@<X8>)
{
  *(void *)&long long v10 = *MEMORY[0x263EF8340];
  E5RT::E5CompilerOptions::Create(a2, this);
  uint64_t v2 = operator new(8uLL);
  std::string __p = v2;
  void *v2 = 2;
  uint64_t v4 = v2 + 1;
  uint64_t v5 = (char *)(v2 + 1);
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "*");
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  p_p = &__p;
  char v7 = 0;
  std::string __p = operator new(0x18uLL);
  uint64_t v4 = __p;
  uint64_t v5 = (char *)__p + 24;
  uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, (long long *)v8, &v10, (std::string *)__p);
  E5RT::E5CompilerOptions::SetMilEntryPoints();
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_25FA59E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v20;
  *std::string v20 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::makeProgramLibrary(cgm::token_generation_inference::ajax::utils *this@<X0>, std::string *a2@<X2>, void *a3@<X8>)
{
  cgm::token_generation_inference::ajax::utils::getBundleCacheLocation(a2, &__p);
  cgm::token_generation_inference::ajax::utils::makeProgramLibrary((std::string::size_type)this, (uint64_t)&__p, a3);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_25FA59F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::makeProgramLibrary(std::string::size_type a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *a3 = 0;
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)a1, (uint64_t)&buf);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".bundle");
  v22.__data_ = (const std::string_view::value_type *)&__p;
  BOOL v6 = std::__fs::filesystem::operator==[abi:ne180100](&buf, v22);
  BOOL v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    if (v7) {
      goto LABEL_5;
    }
  }
  else if (v7)
  {
LABEL_5:
    char v8 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0) {
        std::string::size_type v9 = a1;
      }
      else {
        std::string::size_type v9 = *(void *)a1;
      }
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v9;
      _os_log_impl(&dword_25FA51000, v8, OS_LOG_TYPE_INFO, "Loading precompiled model from path %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&buf.__pn_, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      buf.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
    }
    E5RT::ProgramLibrary::OpenLibrary();
    *a3 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)a1, (uint64_t)&buf);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".mil");
  v23.__data_ = (const std::string_view::value_type *)&__p;
  BOOL v10 = std::__fs::filesystem::operator==[abi:ne180100](&buf, v23);
  BOOL v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Unexpected model path extension.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &buf.__pn_);
  }
  uint64_t v12 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v10);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string::size_type v13 = a1;
    }
    else {
      std::string::size_type v13 = *(void *)a1;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v13;
    _os_log_impl(&dword_25FA51000, v12, OS_LOG_TYPE_INFO, "Loading MIL model from path %{public}s", (uint8_t *)&buf, 0xCu);
  }
  cgm::token_generation_inference::ajax::utils::createE5Compiler(a2);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&buf.__pn_, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    buf.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
  }
  IsNewCompileRequired = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::E5Compiler::IsNewCompileRequired();
  int v15 = (int)IsNewCompileRequired;
  if ((SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!IsNewCompileRequired) {
      goto LABEL_35;
    }
LABEL_33:
    unint64_t v16 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(IsNewCompileRequired);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_25FA51000, v16, OS_LOG_TYPE_INFO, "MIL model will require on-demand compilation during load", (uint8_t *)&buf, 2u);
    }
    goto LABEL_35;
  }
  operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (v15) {
    goto LABEL_33;
  }
LABEL_35:
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&buf.__pn_, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    buf.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
  }
  E5RT::E5Compiler::Compile();
  *a3 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  if (v18) {
    (*(void (**)())(*(void *)v18 + 8))();
  }
}

void sub_25FA5A2C8(uint64_t a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::string *a8)
{
}

void sub_25FA5A3D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  uint64_t v22 = *v21;
  *uint64_t v21 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  JUMPOUT(0x25FA5A4E0);
}

void sub_25FA5A41C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x25FA5A4E0);
}

void sub_25FA5A42C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  JUMPOUT(0x25FA5A478);
}

void sub_25FA5A4B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x25FA5A4DCLL);
}

void sub_25FA5A4D8(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  _Unwind_Resume(exception_object);
}

std::string *cgm::token_generation_inference::ajax::utils::getBundleCacheLocation@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  if (this) {
    return std::optional<std::string>::operator=[abi:ne180100]<char const(&)[67],void>(a2, "/var/mobile/Library/com.apple.modelcatalog/compiled/e5bundlecache/");
  }
  return this;
}

void sub_25FA5A524(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::createE5Compiler(uint64_t a1)
{
  MEMORY[0x261206060](v3);
  if (*(unsigned char *)(a1 + 24)) {
    E5RT::E5CompilerConfigOptions::SetBundleCacheLocation();
  }
  E5RT::E5Compiler::MakeCompiler();
  return MEMORY[0x261206070](v3);
}

uint64_t cgm::token_generation_inference::ajax::utils::modelRequiresCompilation(cgm::token_generation_inference::ajax::utils *this, const std::__fs::filesystem::path *a2, std::string *a3)
{
  cgm::token_generation_inference::ajax::utils::getBundleCacheLocation(a3, &__p);
  uint64_t v5 = cgm::token_generation_inference::ajax::utils::modelRequiresCompilation((uint64_t)this, (uint64_t)a2, (uint64_t)&__p);
  if (v8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_25FA5A620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::modelRequiresCompilation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  cgm::token_generation_inference::ajax::utils::createE5Compiler(a3);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t IsNewCompileRequired = E5RT::E5Compiler::IsNewCompileRequired();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return IsNewCompileRequired;
}

void sub_25FA5A708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  BOOL v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      BOOL v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25FA5A808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const(&)[67],void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    long long v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    long long v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void *cgm::token_generation_inference::ajax::utils::operator<<(void *a1, E5RT::TensorDataType *a2)
{
  void v25[3] = *MEMORY[0x263EF8340];
  LODWORD(v21.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v21.__r_.__value_.__l.__size_, "uint");
  int v22 = 1;
  std::string::basic_string[abi:ne180100]<0>(v23, "int");
  int v24 = 4;
  std::string::basic_string[abi:ne180100]<0>(v25, "float");
  std::unordered_map<E5RT::ComponentDataType,std::string>::unordered_map((uint64_t)v20, (int *)&v21, 3);
  for (uint64_t i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v25[i + 2]) < 0) {
      operator delete((void *)v25[i]);
    }
  }
  LODWORD(v21.__r_.__value_.__l.__data_) = E5RT::TensorDataType::GetComponentDataType(a2);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::find<E5RT::ComponentDataType>(v20, (int *)&v21);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = v5[3];
  unint64_t v6 = v5 + 3;
  uint64_t v7 = v8;
  int v9 = *((char *)v6 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)v6;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    uint64_t v11 = v6[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  int ComponentSize = E5RT::TensorDataType::GetComponentSize(a2);
  std::to_string(&v21, 8 * ComponentSize);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = &v21;
  }
  else {
    std::string::size_type v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v13, size);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"x", 1);
  int NumComponents = E5RT::TensorDataType::GetNumComponents(a2);
  std::to_string(&v21, NumComponents);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v17 = &v21;
  }
  else {
    unint64_t v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v21.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table((uint64_t)v20);
  return a1;
}

void sub_25FA5ABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *cgm::token_generation_inference::ajax::utils::operator<<(void *a1, E5RT::TensorDescriptor *this)
{
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v5 = *(unint64_t **)TensorShape;
  unint64_t v6 = *(unint64_t **)(TensorShape + 8);
  if (*(unint64_t **)TensorShape != v6)
  {
    do
    {
      std::to_string(&v15, *v5);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v15;
      }
      else {
        uint64_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v15.__r_.__value_.__l.__size_;
      }
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"@ ", 2);
  E5RT::TensorDescriptor::GetTensorDataType((uint64_t *)&v15, this);
  cgm::token_generation_inference::ajax::utils::operator<<(v10, (E5RT::TensorDataType *)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" :", 2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v15);
  TensorStrides = (uint64_t *)E5RT::TensorDescriptor::GetTensorStrides(this);
  uint64_t v12 = *TensorStrides;
  uint64_t v13 = TensorStrides[1];
  if (*TensorStrides != v13)
  {
    do
    {
      v12 += 8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
    while (v12 != v13);
  }
  return a1;
}

void sub_25FA5ADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t cgm::token_generation_inference::ajax::utils::checkTensorType(E5RT::IOPort *a1, uint64_t a2, uint64_t a3)
{
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(a1);
  uint64_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::GetTensorDataTypeRef(v5);
  if (E5RT::operator!=())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid dtype");
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  uint64_t result = E5RT::TensorDescriptor::GetTensorShape(v5);
  uint64_t v7 = *(uint64_t **)a3;
  unint64_t v8 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3;
  int v9 = *(void **)result;
  uint64_t v10 = *(void **)(result + 8);
  if (v8 != ((uint64_t)v10 - *(void *)result) >> 3)
  {
    std::string v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid rank");
    std::runtime_error::runtime_error(v15, &v16);
    v15->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  if (v10 != v9)
  {
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v12 = *v7++;
      uint64_t v11 = v12;
      if (v12 != -1 && v11 != *v9)
      {
        uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid shape");
        std::runtime_error::runtime_error(v13, &v16);
        v13->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_25FA5AFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::fillWithALiBi(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v32 = (void *)result;
  if (a5)
  {
    unint64_t v7 = a5 * a3;
    int v8 = 1 << (int)log2((double)a2);
    long double v9 = exp2(-8.0 / (double)v8);
    uint64_t v10 = 0;
    uint64_t v11 = v8;
    unint64_t v12 = a3 - 1;
    int64x2_t v35 = vdupq_n_s64(2uLL);
    unint64_t v13 = a4;
    do
    {
      if (v13 >= v12) {
        unint64_t v14 = a3 - 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v10 + a4 >= v12) {
        unint64_t v15 = a3 - 1;
      }
      else {
        unint64_t v15 = v10 + a4;
      }
      uint64_t result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(v32, v10 * a3);
      v37[0] = result;
      v37[1] = v16;
      if (a2)
      {
        uint64_t v17 = 0;
        unint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
        uint64x2_t v36 = (uint64x2_t)vdupq_n_s64(v15);
        do
        {
          if (v17 >= v11) {
            double v19 = 0.5;
          }
          else {
            double v19 = 1.0;
          }
          double v20 = pow(v9, v19 + (double)((int)v17 % (int)v11));
          uint64_t result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v37, v7 * v17, a3);
          if (a3)
          {
            unint64_t v21 = 0;
            double v22 = -v20;
            unint64_t v23 = v13;
            int64x2_t v24 = (int64x2_t)xmmword_25FB5F150;
            do
            {
              int32x2_t v25 = vmovn_s64((int64x2_t)vcgeq_u64(v36, (uint64x2_t)v24));
              if (v25.i8[0])
              {
                _D3 = v22 * (double)v21;
                __asm { FCVT            H3, D3 }
                *(_WORD *)(result + 2 * (v23 % a3)) = LOWORD(_D3);
              }
              if (v25.i8[4])
              {
                _D2 = v22 * (double)(v21 + 1);
                __asm { FCVT            H2, D2 }
                *(_WORD *)(result + 2 * ((v23 - 1) % a3)) = LOWORD(_D2);
              }
              v21 += 2;
              int64x2_t v24 = vaddq_s64(v24, v35);
              v23 -= 2;
            }
            while (v18 != v21);
          }
          ++v17;
        }
        while (v17 != a2);
      }
      ++v10;
      ++v13;
    }
    while (v10 != a5);
  }
  return result;
}

uint64_t _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_265541A50, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_25FA5B258(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::ajax::utils::isPromptFunctionName(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    os_signpost_id_t v3 = *(char **)a1;
  }
  else {
    os_signpost_id_t v3 = a1;
  }
  size_t v4 = &v3[v1];
  if (v1 >= 10)
  {
    uint64_t v5 = v3;
    do
    {
      unint64_t v6 = (char *)memchr(v5, 97, v1 - 9);
      if (!v6) {
        break;
      }
      if (*(void *)v6 == 0x6D6F72705F656E61 && *((_WORD *)v6 + 4) == 29808) {
        return v6 != v4 && v6 - v3 != -1;
      }
      uint64_t v5 = v6 + 1;
      uint64_t v1 = v4 - (unsigned char *)v5;
    }
    while (v4 - (unsigned char *)v5 > 9);
  }
  unint64_t v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

BOOL cgm::token_generation_inference::ajax::utils::isExtendFunctionName(char *a1)
{
  uint64_t v1 = a1[23];
  BOOL v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v2) {
    os_signpost_id_t v3 = *(char **)a1;
  }
  else {
    os_signpost_id_t v3 = a1;
  }
  size_t v4 = &v3[v1];
  if (v1 >= 10)
  {
    uint64_t v5 = v3;
    do
    {
      unint64_t v6 = (char *)memchr(v5, 97, v1 - 9);
      if (!v6) {
        break;
      }
      if (*(void *)v6 == 0x657478655F656E61 && *((_WORD *)v6 + 4) == 25710) {
        return v6 != v4 && v6 - v3 != -1;
      }
      uint64_t v5 = v6 + 1;
      uint64_t v1 = v4 - (unsigned char *)v5;
    }
    while (v4 - (unsigned char *)v5 > 9);
  }
  unint64_t v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

uint64_t cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans@<X0>(E5RT::MemoryObject **this@<X0>, uint64_t *a2@<X8>)
{
  size_t v4 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*this);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(v4);
  unint64_t v7 = v6 >> 1;
  if (v6 >= 2) {
    uint64_t v8 = DataSpan;
  }
  else {
    uint64_t v8 = 0;
  }
  long double v9 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(this[2]);
  uint64_t result = E5RT::BufferObject::GetDataSpan(v9);
  *a2 = v8;
  a2[1] = v7;
  if (v11 >= 2) {
    uint64_t v12 = result;
  }
  else {
    uint64_t v12 = 0;
  }
  a2[2] = v12;
  a2[3] = v11 >> 1;
  return result;
}

void cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this, unint64_t a2)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans((E5RT::MemoryObject **)this, (uint64_t *)&v7);
  if (a2)
  {
    __int16 v6 = 0;
    _ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(v7, v8, &v6, a2, *((void *)this + 4), *((void *)this + 4) - a2);
    __int16 v6 = 0;
    _ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(v9, v10, &v6, a2, *((void *)this + 4), *((void *)this + 4) - a2);
  }
  else
  {
    if ((uint64_t)(2 * v8) >= 1) {
      bzero(v7, 2 * (((2 * v8) >> 1) - (2 * v8 != 1)) + 2);
    }
    if ((uint64_t)(2 * v10) >= 1)
    {
      size_t v4 = v9;
      size_t v5 = 2 * (((2 * v10) >> 1) - (2 * v10 != 1)) + 2;
      bzero(v4, v5);
    }
  }
}

_WORD *_ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(_WORD *result, unint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = result;
  unint64_t v14 = a2;
  uint64_t v6 = a6 - 1;
  if (a6 - 1 + a4 < a2)
  {
    unint64_t v9 = a4;
    do
    {
      if (a6 == 1)
      {
        v13[v9] = *a3;
      }
      else
      {
        uint64_t result = (_WORD *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v13, v9, a6);
        if (2 * v11 >= 1)
        {
          unint64_t v12 = ((unint64_t)(2 * v11) >> 1) + 1;
          do
          {
            *result++ = *a3;
            --v12;
          }
          while (v12 > 1);
        }
      }
      v9 += a5;
    }
    while (v6 + v9 < v14);
  }
  return result;
}

void *cgm::token_generation_inference::ajax::utils::AJAXKVCache::overwrite(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this, E5RT::MemoryObject **a2)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset(this, 0);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans(a2, (uint64_t *)v9);
  unint64_t v4 = (unint64_t)a2[4];
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans((E5RT::MemoryObject **)this, v8);
  unint64_t v5 = *((void *)this + 4);
  if (v5 >= v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v5;
  }
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v9[0], (unint64_t)v9[1], 0, v4, v8[0], v8[1], 0, v5, v6);
  return _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v9[2], (unint64_t)v9[3], 0, v4, v8[2], v8[3], 0, v5, v6);
}

uint64_t cgm::token_generation_inference::ajax::utils::AJAXKVCache::getStateLength(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this)
{
  return *((void *)this + 4);
}

uint64_t cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation *a1, int a2)
{
  unint64_t v10 = a1;
  int v11 = a2;
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v9, InputPorts);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v9);
  uint64_t v4 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v8, v4);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v8);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v7, OutputPorts);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v7);
}

void sub_25FA5B718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(uint64_t ***)(a2 + 16); i; uint64_t i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPort *)i[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject(&v6, (E5RT::IOPort *)i[5]);
      uint64_t v3 = v6;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (!v3)
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)i[5]);
        E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
        E5RT::TensorDescriptor::AllocateMemory();
        if (v6) {
          operator new();
        }
        uint64_t v6 = 0;
        E5RT::IOPort::BindMemoryObject();
        uint64_t v5 = v6;
        uint64_t v6 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
    }
  }
}

void sub_25FA5B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(cgm::token_generation_inference::ajax::utils *this, const E5RT::ExecutionStreamOperation *a2, E5RT::ExecutionStreamOperation *a3)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v17, InputPorts);
  uint64_t v6 = E5RT::ExecutionStreamOperation::GetInputPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v16, v6);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v17, (uint64_t)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v17);
  uint64_t v7 = E5RT::ExecutionStreamOperation::GetInOutPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v15, v7);
  uint64_t v8 = E5RT::ExecutionStreamOperation::GetInOutPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v14, v8);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v15, (uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v15);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v13, OutputPorts);
  uint64_t v10 = E5RT::ExecutionStreamOperation::GetOutputPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v12, v10);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v12);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v13);
}

void sub_25FA5B9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(void *a1, uint64_t a2)
{
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
  {
    std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](&__p, i + 1);
    if ((E5RT::IOPort::IsDynamic(v11) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject(&v8, v11);
      if (v8) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a1, (unsigned __int8 *)&__p) == 0;
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (!v4)
      {
        uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
        if (!v5) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        E5RT::IOPort::GetMemoryObject(&v8, *((E5RT::IOPort **)v5 + 5));
        uint64_t v6 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v7 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        E5RT::IOPort::BindMemoryObject();
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_25FA5BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::makeLinearTokenTreeIndexes(cgm::token_generation_inference::ajax::utils *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (this)
  {
    BOOL v4 = 0;
    do
    {
      BOOL v4 = (cgm::token_generation_inference::ajax::utils *)((char *)v4 + 1);
      std::vector<unsigned long>::vector(&__p, (unint64_t)v4);
      uint64_t v5 = __p;
      uint64_t v6 = v11;
      if (__p != v11)
      {
        unsigned int v7 = 0;
        do
          *v5++ = v7++;
        while (v5 != v6);
      }
      unint64_t v8 = a2[1];
      if (v8 >= a2[2])
      {
        uint64_t v9 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a2, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a2, (uint64_t)&__p);
        uint64_t v9 = v8 + 24;
      }
      a2[1] = v9;
      if (__p)
      {
        int v11 = __p;
        operator delete(__p);
      }
    }
    while (v4 != this);
  }
}

void sub_25FA5BC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(void *a1)
{
  cgm::token_generation_inference::ajax::utils::makeLinearTokenTreeIndexes((cgm::token_generation_inference::ajax::utils *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), v10);
  BOOL v4 = a1;
  uint64_t v2 = *a1;
  uint64_t v3 = v4[1];
  if (v3 - v2 != v10[1] - v10[0])
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  if (v2 != v3)
  {
    uint64_t v5 = (void *)(v10[0] + 8);
    do
    {
      size_t v6 = *(void *)(v2 + 8) - *(void *)v2;
      unsigned int v7 = (const void *)*(v5 - 1);
      if (v6 != *v5 - (void)v7 || memcmp(*(const void **)v2, v7, v6)) {
        goto LABEL_8;
      }
      v2 += 24;
      v5 += 3;
    }
    while (v2 != v3);
  }
  uint64_t v8 = 1;
LABEL_9:
  int v11 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v8;
}

void cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(short float *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  std::vector<unsigned long>::vector(&__p, a4);
  unint64_t v14 = __p;
  unint64_t v15 = v18;
  if (__p != v18)
  {
    unsigned int v16 = 1;
    do
      *v14++ = v16++;
    while (v14 != v15);
  }
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, 0, &__p, a5, a6, a7, a4 + a3);
  if (__p)
  {
    unint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_25FA5BE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

short float *cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(short float *result, unint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  v42[5] = *MEMORY[0x263EF8340];
  uint64_t v10 = (void *)*a5;
  uint64_t v9 = (void *)a5[1];
  uint64_t v11 = (uint64_t)v9 - *a5;
  unint64_t v12 = a3 + (v11 >> 3);
  if (v12 - 2049 <= 0xFFFFFFFFFFFFF7FFLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The max relative position must be less than 2048 due to FP16 accuracy");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a2 < v12 * a6)
  {
    unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v42[1] = 0;
    v42[2] = 7;
    v41[2] = 7;
    v42[0] = a2;
    memset(&v40, 0, sizeof(v40));
    v41[0] = 1;
    v41[1] = (uint64_t)v42;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v40, "Relative positions span should be of shape [context, query], not {}", 67, v41);
    std::runtime_error::runtime_error(v39, &v40);
    __cxa_throw(v39, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v14 = *(void **)a8;
  unint64_t v15 = *(void **)(a8 + 8);
  if (v15 == *(void **)a8)
  {
    uint64_t v17 = *(void **)(a8 + 8);
    if (!a9) {
      return result;
    }
  }
  else
  {
    unint64_t v16 = ((uint64_t)v15 - *(void *)a8) >> 3;
    uint64_t v17 = *(void **)a8;
    do
    {
      unint64_t v18 = v16 >> 1;
      double v19 = &v17[v16 >> 1];
      unint64_t v21 = *v19;
      double v20 = v19 + 1;
      v16 += ~(v16 >> 1);
      if (v21 < a3) {
        uint64_t v17 = v20;
      }
      else {
        unint64_t v16 = v18;
      }
    }
    while (v16);
    if (!a9) {
      return result;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = a6 + a3;
  unint64_t v25 = v17 - v14 - a3;
  uint64_t v26 = a4 + a3;
  unint64_t v27 = &result[a4 * (a6 + a3)];
  result += a4;
  uint64_t v28 = v11 >> 3;
  if ((unint64_t)(v11 >> 3) <= 1) {
    uint64_t v28 = 1;
  }
  uint64_t v29 = 2 * v24;
  do
  {
    if (v14 == v15 || *v14 != v22)
    {
      if (v9 != v10)
      {
        unint64_t v30 = result;
        uint64_t v31 = v26;
        unint64_t v32 = v10;
        uint64_t v33 = v28;
        char v34 = v27;
        int64x2_t v35 = v17;
        do
        {
          if (v35 == v15 || v31 != *v35)
          {
            uint64_t v36 = v25 + v23 - *v32;
            if (v36 + v35 - v17 < 0)
            {
              short float v37 = (short float)(v36 + v35 - v17 + 1);
              if (a7) {
                *char v34 = v37;
              }
              else {
                *unint64_t v30 = v37;
              }
            }
          }
          else
          {
            ++v35;
          }
          char v34 = (short float *)((char *)v34 + v29);
          ++v32;
          ++v31;
          ++v30;
          --v33;
        }
        while (v33);
      }
      ++v23;
    }
    else
    {
      ++v14;
    }
    ++v22;
    ++v27;
    result += a6;
  }
  while (v22 != a9);
  return result;
}

void sub_25FA5C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::utils::setTreeRelativePositions(short float *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  std::string __p = 0;
  std::string v41 = 0;
  uint64_t v42 = 0;
  unint64_t v14 = *(void **)a5;
  unint64_t v13 = *(void **)(a5 + 8);
  if (*(void **)a5 != v13)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = (uint64_t)(v14[1] - *v14) >> 3;
      if (v15 >= v42)
      {
        unint64_t v18 = (uint64_t *)__p;
        uint64_t v19 = ((char *)v15 - (unsigned char *)__p) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)v42 - (unsigned char *)__p;
        if (((char *)v42 - (unsigned char *)__p) >> 2 > v20) {
          unint64_t v20 = v21 >> 2;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v42, v22);
          unint64_t v18 = (uint64_t *)__p;
          int v15 = v41;
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = (uint64_t *)&v23[8 * v19];
        uint64_t *v24 = v16;
        uint64_t v17 = v24 + 1;
        while (v15 != v18)
        {
          uint64_t v25 = *--v15;
          *--uint64_t v24 = v25;
        }
        std::string __p = v24;
        std::string v41 = v17;
        uint64_t v42 = (uint64_t *)&v23[8 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        uint64_t *v15 = v16;
        uint64_t v17 = v15 + 1;
      }
      std::string v41 = v17;
      v14 += 3;
      int v15 = v17;
    }
    while (v14 != v13);
  }
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a4, &__p, a6, a7, a8, a3);
  uint64_t v26 = (uint64_t *)__p;
  if (v41 != __p)
  {
    uint64_t v27 = 0;
    unint64_t v28 = ((char *)v41 - (unsigned char *)__p) >> 3;
    uint64_t v29 = *(void **)a5;
    if (v28 <= 1) {
      unint64_t v28 = 1;
    }
    do
    {
      unint64_t v30 = (void *)v29[3 * v27];
      uint64_t v31 = v29[3 * v27 + 1] - (void)v30;
      if (v31)
      {
        if ((unint64_t)(v31 >> 3) <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v31 >> 3;
        }
        uint64_t v33 = 1 - (v31 >> 3);
        do
        {
          if (v33 <= 0)
          {
            unint64_t v34 = *v30 + a3;
            uint64_t v35 = v34 + (v27 + a4) * (a6 + a3);
            uint64_t v36 = v27 + a4 + v34 * a6;
            if (a7) {
              uint64_t v36 = v35;
            }
            a1[v36] = (short float)v33;
          }
          ++v33;
          ++v30;
          --v32;
        }
        while (v32);
      }
      ++v27;
    }
    while (v27 != v28);
  }
  if (v26)
  {
    std::string v41 = v26;
    operator delete(v26);
  }
}

void sub_25FA5C31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::setRelativePositions(short float *a1, unint64_t a2, unint64_t a3, void *a4, unint64_t a5, unint64_t a6, uint64_t a7, void *a8)
{
  v23[7] = *MEMORY[0x263EF8340];
  if (*a4 == a4[1])
  {
LABEL_5:
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a6 + a5, a7, 0, (uint64_t)a8);
    return;
  }
  if (cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(a4))
  {
    uint64_t v16 = a4[1];
    if (*a4 != v16) {
      a6 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *a4) >> 3);
    }
    goto LABEL_5;
  }
  uint64_t v17 = a8[1];
  if (*a8 != v17 && *(void *)(v17 - 8) >= a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v19 = a8;
    unint64_t v20 = exception;
    v23[0] = *(void *)(v19[1] - 8);
    v23[1] = 0;
    void v23[3] = 0;
    v23[4] = 231;
    v23[2] = a3;
    memset(&v21, 0, sizeof(v21));
    v22[0] = 2;
    v22[1] = (uint64_t)v23;
    v22[2] = 231;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v21, "Tree attention not supported with holes in query; last hole is {}, past {}",
      74,
      v22);
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a5) {
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a5, a7, 0, (uint64_t)a8);
  }

  cgm::token_generation_inference::ajax::utils::setTreeRelativePositions(a1, a2, a5 + a3, a5, (uint64_t)a4, a7, 0, (uint64_t)a8);
}

void sub_25FA5C55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    a4->__begin_ = 0;
    std::vector<std::string>::reserve(a4, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    unint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    for (uint64_t i = a4; v12 != v13; v12 += 24)
    {
      unint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a3, v12);
      if (!v14) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((void *)v14 + 5), *((void *)v14 + 6), (unsigned __int8 **)(v11 + 16)) != *((void *)v14 + 6))std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&i, (long long *)v12); {
    }
      }
  }
  else
  {
    if (v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "Unexpectedly asked to run with more than 1 mutable weight symbol adapted.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v16);
    }
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    unsigned int v7 = (long long *)*a2;
    uint64_t v8 = (long long *)a2[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)*a2) >> 3);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a4, v7, v8, v9);
  }
}

void sub_25FA5C730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_25FA5C820(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void cgm::token_generation_inference::ajax::utils::setCausalMaskAndPositionIds(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  v25[0] = a1;
  v25[1] = a2;
  uint64_t v8 = a7 + a6;
  uint64_t v10 = *a5;
  uint64_t v9 = a5[1];
  if (v9 == *a5)
  {
    uint64_t v19 = a7;
    if (a7)
    {
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = a6 + 1;
        if ((unint64_t)(a6 + 1) > 1) {
          uint64_t v22 = a6 + 1;
        }
        else {
          uint64_t v22 = 1;
        }
        size_t v23 = 2 * v22;
        *a3++ = a6;
        uint64_t v24 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v25, v20, v8);
        bzero(v24, v23);
        v20 += v8;
        a6 = v21;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = (_WORD *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v25, v11 * v8, v8);
      unint64_t v13 = *(uint64_t **)v10;
      uint64_t v14 = *(void *)(v10 + 8) - *(void *)v10;
      if (v14)
      {
        unint64_t v15 = v14 >> 3;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        int v17 = -1;
        do
        {
          uint64_t v18 = *v13++;
          if (v18 == 1)
          {
            *unint64_t v12 = 0;
            ++v17;
          }
          ++v12;
          --v16;
        }
        while (v16);
      }
      else
      {
        int v17 = -1;
      }
      a3[v11++] = v17;
      v10 += 24;
    }
    while (v10 != v9);
  }
}

void cgm::token_generation_inference::ajax::utils::createKVCacheEntry()
{
}

void sub_25FA5CB00(_Unwind_Exception *a1)
{
  MEMORY[0x2612065C0](v2, 0x1000C8077774924);
  MEMORY[0x2612065C0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

char *cgm::token_generation_inference::ajax::utils::setKVCacheEntry(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, uint64_t **a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)a8;
  if (*(void *)(*(void *)a8 + 24) + a7 > a7)
  {
    uint64_t v10 = 0;
    uint64_t v25 = **a5;
    uint64_t v11 = (*a5)[2];
    uint64_t v12 = **a6;
    uint64_t v14 = (*a6)[2];
    size_t v13 = (*a6)[3];
    size_t v15 = a3 + v13 * a7;
    uint64_t v16 = &result[v13 * a7];
    unint64_t v17 = a7;
    uint64_t v24 = v11;
    do
    {
      if (v25)
      {
        unint64_t v21 = v17;
        uint64_t v22 = v16;
        uint64_t v18 = 0;
        size_t v23 = v15;
        do
        {
          if (v11)
          {
            uint64_t v19 = 0;
            do
            {
              memcpy(&v16[v19], (const void *)(**(void **)a8 + v10), v13);
              uint64_t result = (char *)memcpy((void *)(v15 + v19), (const void *)(*(void *)(*(void *)a8 + 8) + v10), v13);
              v10 += v13;
              v19 += v14;
              --v11;
            }
            while (v11);
          }
          ++v18;
          v15 += v12;
          v16 += v12;
          uint64_t v11 = v24;
        }
        while (v18 != v25);
        uint64_t v8 = *(void **)a8;
        uint64_t v16 = v22;
        size_t v15 = v23;
        unint64_t v17 = v21;
      }
      ++v17;
      v15 += v13;
      v16 += v13;
    }
    while (v17 < v8[3] + a7);
  }
  return result;
}

uint64_t cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(cgm::token_generation_inference::ajax::utils *this, E5RT::ExecutionStreamOperation *a2)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v14, InputPorts);
  for (uint64_t i = v15; i; uint64_t i = (void *)*i)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v14);
  uint64_t v5 = E5RT::ExecutionStreamOperation::GetInOutPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v12, v5);
  for (j = v13; j; j = (void *)*j)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v12);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v10, OutputPorts);
  for (k = v11; k; k = (void *)*k)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v10);
}

void sub_25FA5CD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BOOL v4 = *(std::__shared_weak_count **)(v2 - 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(E5RT::ExecutionStreamOperation *a1, void *a2)
{
  BOOL v4 = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInputPorts(a1) + 16);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, v4 + 16);
      if (!v5) {
        break;
      }
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 6);
      uint64_t v19 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPort::BindMemoryObject();
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      BOOL v4 = *(unsigned __int8 **)v4;
      if (!v4) {
        goto LABEL_8;
      }
    }
LABEL_31:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
LABEL_8:
  for (uint64_t i = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInOutPorts(a1) + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, i + 16);
    if (!v8) {
      goto LABEL_31;
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  for (j = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetOutputPorts(a1) + 16); j; j = *(unsigned __int8 **)j)
  {
    if (E5RT::IOPort::IsDynamic(*((E5RT::IOPort **)j + 5)))
    {
      uint64_t v11 = (std::__shared_weak_count *)*((void *)j + 6);
      size_t v15 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT_Private::GetMaxPortDescriptor();
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (!v16) {
        continue;
      }
    }
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, j + 16);
    if (!v12) {
      goto LABEL_31;
    }
    size_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
    uint64_t v14 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_25FA5CF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(E5RT::ExecutionStreamOperation *a1, void *a2)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v24, InputPorts);
  for (uint64_t i = v25; i; uint64_t i = *(unsigned __int8 **)i)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, i + 16))
    {
      E5RT::IOPort::GetMemoryObject((uint64_t *)&v26, *((E5RT::IOPort **)i + 5));
      if (v26)
      {
        uint64_t v6 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v26);
        uint64_t DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v6);
        if (v8 >= 1) {
          bzero(DataSpan, v8);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v24);
  uint64_t v9 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v22, v9);
  for (j = v23; j; j = *(unsigned __int8 **)j)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, j + 16))
    {
      E5RT::IOPort::GetMemoryObject((uint64_t *)&v26, *((E5RT::IOPort **)j + 5));
      if (v26)
      {
        uint64_t v11 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v26);
        uint64_t v12 = (void *)E5RT::BufferObject::GetDataSpan(v11);
        if (v13 >= 1) {
          bzero(v12, v13);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v22);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v20, OutputPorts);
  for (k = v21; k; k = *(unsigned __int8 **)k)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, k + 16))
    {
      E5RT::IOPort::GetMemoryObject((uint64_t *)&v26, *((E5RT::IOPort **)k + 5));
      if (v26)
      {
        uint64_t v16 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v26);
        unint64_t v17 = (void *)E5RT::BufferObject::GetDataSpan(v16);
        if (v18 >= 1) {
          bzero(v17, v18);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v20);
}

void sub_25FA5D12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BOOL v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::espresso_inference::EspressoInferenceException::~EspressoInferenceException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x2612065E0);
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25FA5D2D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_25FA5D3BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  size_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_25FA5D4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25FA5D53C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v17 = v16;
  long long v18 = xmmword_25FB5F2F0;
  uint64_t v19 = std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke;
  unint64_t v20 = v16;
  uint64_t v4 = *a4;
  v12[0] = a2;
  v12[1] = &a2[a3];
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v4;
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = a4[2];
  char v5 = 0;
  char v6 = 0;
  uint64_t v7 = &v17;
  LOBYTE(v10.__locale_) = 0;
  char v11 = 0;
  std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v12, (uint64_t **)&v7);
  if (v11) {
    std::locale::~locale(&v10);
  }
  v19(v17, *((void *)&v18 + 1), (uint64_t)v20);
}

void sub_25FA5D938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t *std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char **a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *a2;
  if (*a1 != v4)
  {
    while (1)
    {
      int v7 = *v3;
      if (v7 == 125) {
        break;
      }
      if (v7 != 123) {
        goto LABEL_10;
      }
      if (++v3 == v4) {
        std::__throw_format_error[abi:ne180100]("The format string terminates at a '{'");
      }
      if (*v3 == 123)
      {
LABEL_10:
        long long v8 = v3 + 1;
        std::locale v10 = v5;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v10, v3);
        uint64_t v3 = v8;
        if (v8 == v4) {
          return v5;
        }
      }
      else
      {
        *a2 = v5;
        uint64_t v3 = std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3, v4, a1, a2);
        char v5 = *a2;
        if (v3 == v4) {
          return v5;
        }
      }
    }
    if (++v3 == v4 || *v3 != 125) {
      std::__throw_format_error[abi:ne180100]("The format string contains an invalid escape sequence");
    }
    goto LABEL_10;
  }
  return v5;
}

uint64_t std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke(std::string::value_type *a1, std::string::size_type __n_add, uint64_t a3)
{
  uint64_t v4 = *(std::string **)(a3 + 296);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v6 = v4->__r_.__value_.__r.__words[0];
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = *(void *)(a3 + 296);
  }
  return std::string::__insert_with_size<char *,char *>(v4, v6 + size, a1, &a1[__n_add], __n_add);
}

uint64_t std::string::__insert_with_size<char *,char *>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::size_type v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    std::string::size_type v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }

  return std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(this, __n_add, v7, a3, a4);
}

void sub_25FA5DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_25FA5DD38(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_25FA5DD54(_Unwind_Exception *a1)
{
}

void std::__throw_format_error[abi:ne180100](const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::format_error::format_error[abi:ne180100](exception, a1);
}

void sub_25FA5DDB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, char **a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::string::size_type v7 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, (uint64_t)a3);
  if (v7 == a2) {
    goto LABEL_14;
  }
  int v9 = *v7;
  BOOL v20 = v9 == 58;
  if (v9 == 125) {
    goto LABEL_5;
  }
  if (v9 != 58) {
LABEL_14:
  }
    std::__throw_format_error[abi:ne180100]("The argument index should end with a ':' or a '}'");
  ++v7;
LABEL_5:
  *a3 = v7;
  v19[0] = (uint64_t)a3;
  v19[1] = (uint64_t)a4;
  v19[2] = (uint64_t)&v20;
  unint64_t v10 = a4[1];
  if (v10 <= v8)
  {
    LOBYTE(v22) = 0;
  }
  else if (v10 > 0xC)
  {
    uint64_t v15 = (long long *)(a4[2] + 32 * v8);
    long long v16 = v15[1];
    long long v21 = *v15;
    long long v22 = v16;
  }
  else
  {
    std::string::size_type v11 = (uint64_t *)(a4[2] + 16 * v8);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    uint64_t v14 = (a4[3] >> (5 * v8)) & 0x1FLL;
    *(void *)&long long v21 = v13;
    *((void *)&v21 + 1) = v12;
    LOBYTE(v22) = v14;
  }
  std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v19, (uint64_t)&v21);
  unint64_t v17 = *a3;
  if (*a3 == a2 || *v17 != 125) {
    std::__throw_format_error[abi:ne180100]("The replacement field misses a terminating '}'");
  }
  return v17 + 1;
}

uint64_t **std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](uint64_t **a1, char *a2)
{
  uint64_t v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[2];
  v3[2] = v6 + 1;
  *(unsigned char *)(v5 + v6) = v4;
  if (v3[2] == v3[1])
  {
    ((void (*)(uint64_t))v3[3])(*v3);
    v3[2] = 0;
  }
  return a1;
}

std::runtime_error *std::format_error::format_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_270BD1D68;
  return result;
}

void std::format_error::~format_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x2612065E0);
}

char *std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *a1;
  if (v4 == 125 || v4 == 58)
  {
    std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](a3);
    return v3;
  }
  if (v4 == 48)
  {
    int v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
      if (v5 == 2) {
        std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
      }
    }
    else
    {
      *(_DWORD *)(a3 + 16) = 1;
    }
    return a1 + 1;
  }
  if ((v4 - 58) <= 0xF5u) {
    std::__throw_format_error[abi:ne180100]("The argument index starts with an invalid character");
  }

  return std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((unint64_t)a1, a2, a3);
}

void *std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t *a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>((uint64_t)a1, (unsigned __int8 *)a2);
      break;
    case 2:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>((uint64_t)a1, (unsigned __int8 *)a2);
      break;
    case 3:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>((uint64_t)a1, (int *)a2);
      break;
    case 4:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>((uint64_t)a1, (uint64_t *)a2);
      break;
    case 5:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 6:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>((uint64_t)a1, (unsigned int *)a2);
      break;
    case 7:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 8:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 9:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>((uint64_t)a1, (float *)a2);
      break;
    case 0xA:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>((uint64_t)a1, (double *)a2);
      break;
    case 0xB:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>((uint64_t)a1, (double *)a2);
      break;
    case 0xC:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>((uint64_t)a1, (char **)a2);
      break;
    case 0xD:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>((uint64_t)a1, a2);
      break;
    case 0xE:
      uint64_t result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 0xF:
      uint64_t v3 = a1[1];
      uint64_t v4 = *(void *)a2;
      int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 8);
      uint64_t v6 = *a1;
      uint64_t result = (void *)v5(v6, v3, v4);
      break;
    default:
      std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
  }
  return result;
}

char *std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(unint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result = std::__format::__parse_number[abi:ne180100]<char const*>(a1, a2);
  int v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    if (v5 == 2) {
      std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
    }
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1) {
      std::__throw_format_error[abi:ne180100]("Using automatic argument numbering in manual argument numbering mode");
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 2;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 + 1;
  return v2;
}

char *std::__format::__parse_number[abi:ne180100]<char const*>(unint64_t a1, char *a2)
{
  if ((uint64_t)&a2[-a1] <= 9) {
    uint64_t v2 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v2 = (unsigned __int8 *)(a1 + 9);
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 1);
  unsigned int v4 = *(char *)a1 - 48;
  if ((unsigned __int8 *)(a1 + 1) == v2)
  {
LABEL_8:
    if (v2 == (unsigned __int8 *)a2)
    {
      return a2;
    }
    else
    {
      uint64_t v6 = *v2;
      if ((v6 - 48) > 9)
      {
        return (char *)v2;
      }
      else if ((v6 + 10 * (unint64_t)v4 - 48) >> 31 {
             || (uint64_t v3 = (unsigned __int8 *)(a1 + 2), (char *)(a1 + 2) != a2) && *v3 - 48 <= 9)
      }
      {
        std::__throw_format_error[abi:ne180100]("The numeric value of the format specifier is too large");
      }
    }
  }
  else
  {
    a1 += (unint64_t)&v2[~a1];
    while (1)
    {
      int v5 = *v3;
      if ((v5 - 58) < 0xFFFFFFF6) {
        break;
      }
      unsigned int v4 = v5 + 10 * v4 - 48;
      if (++v3 == v2) {
        goto LABEL_8;
      }
    }
  }
  return (char *)v3;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>((uint64_t)&v8, "a BOOL");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3 != 0, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_char[abi:ne180100]<char>((uint64_t)&v8, "a character");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v9 = 0;
  int v10 = -1;
  char v11 = 32;
  __int16 v12 = 0;
  char v13 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    unsigned __int8 *v5 = v6;
  }
  std::string::size_type v7 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *std::string::size_type v7 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    std::string::value_type *v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v9 = 0;
  int v10 = -1;
  char v11 = 32;
  __int16 v12 = 0;
  char v13 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    unsigned __int8 *v5 = v6;
  }
  std::string::size_type v7 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(uint64_t a1, float *a2)
{
  float v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    std::string::value_type *v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  uint64_t result = std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(uint64_t a1, double *a2)
{
  double v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    std::string::value_type *v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  uint64_t result = std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(uint64_t a1, double *a2)
{
  double v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    std::string::value_type *v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  uint64_t result = std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(uint64_t a1, char **a2)
{
  double v3 = *a2;
  int v7 = 1;
  unint64_t v8 = 0xFFFFFFFF00000000;
  char v9 = 32;
  __int16 v10 = 0;
  char v11 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    std::string::value_type *v4 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  int v5 = *(uint64_t ***)(a1 + 8);
  uint64_t result = std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  unsigned __int8 *v5 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(uint64_t a1, uint64_t a2)
{
  double v3 = *(char **)a2;
  size_t v4 = *(void *)(a2 + 8);
  int v11 = 1;
  unint64_t v12 = 0xFFFFFFFF00000000;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    unsigned __int8 *v5 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = (void *)*v6;
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v6);
  uint64_t result = std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v3, v4, v7, v8, v9);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v7 = 0;
  int v8 = -1;
  char v9 = 32;
  __int16 v10 = 0;
  char v11 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    size_t v4 = *(unsigned __int8 ***)a1;
    std::string::value_type *v4 = std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  int v5 = *(void **)(a1 + 8);
  uint64_t result = std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  void *v5 = result;
  return result;
}

void *std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned int a2, void *a3)
{
  if (*(unsigned __int8 *)(a1 + 1) > 1u)
  {
    unint64_t v9 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v9, v8, 0);
  }
  else
  {
    unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5);
  }
}

unsigned __int8 *std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2, unsigned __int16 a3)
{
  unint64_t v3 = *a2;
  size_t v4 = a2[1];
  unint64_t v17 = (char *)v3;
  if (v3 == v4) {
    return v3;
  }
  int v8 = std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(a1, (unsigned __int8 **)&v17, v4, (a3 >> 6) & 1);
  unint64_t v9 = (unsigned __int8 *)v17;
  if (v8) {
    BOOL v10 = v17 == (char *)v4;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_14;
    }
    int v11 = *v17;
    switch(v11)
    {
      case ' ':
        char v12 = *a1 | 0x18;
        break;
      case '+':
        char v12 = *a1 & 0xE7 | 0x10;
        break;
      case '-':
        char v12 = *a1 & 0xE7 | 8;
        break;
      default:
LABEL_14:
        if ((a3 & 2) == 0 || *v9 != 35 || (*a1 |= 0x20u, ++v9, unint64_t v17 = (char *)v9, v9 != v4))
        {
          if ((a3 & 4) == 0 || *v9 != 48) {
            goto LABEL_22;
          }
          if ((*a1 & 7) == 0) {
            *a1 = *a1 & 0xF8 | 4;
          }
          unint64_t v17 = (char *)(v9 + 1);
          if (v9 + 1 != v4)
          {
LABEL_22:
            int v13 = std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, (unint64_t *)&v17, (char *)v4, (uint64_t)a2);
            __int16 v14 = (unsigned __int8 *)v17;
            if (!v13 || v17 != (char *)v4)
            {
              if ((a3 & 8) == 0
                || (v16 = std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, &v17, (char *)v4, (uint64_t)a2), __int16 v14 = (unsigned __int8 *)v17, !v16)|| v17 != (char *)v4)
              {
                if ((a3 & 0x10) == 0 || *v14 != 76 || (*a1 |= 0x40u, ++v14, unint64_t v17 = (char *)v14, v14 != v4))
                {
                  if ((a3 & 0x80) == 0 || *v14 != 110 || (*a1 |= 0x80u, unint64_t v17 = (char *)(v14 + 1), v14 + 1 != v4))
                  {
                    if ((a3 & 0x20) != 0) {
                      std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>((uint64_t)a1, &v17);
                    }
                    unint64_t v3 = (unsigned __int8 *)v17;
                    if ((a3 & 0x100) == 0) {
                      return v3;
                    }
                    if (v17 != (char *)v4)
                    {
                      size_t v4 = (unsigned __int8 *)v17;
                      if (*v17 != 125) {
                        std::__throw_format_error[abi:ne180100]("The format specifier should consume the input or end with a '}'");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v4;
    }
    *a1 = v12;
    unint64_t v17 = (char *)++v9;
    if (v9 == v4) {
      return v4;
    }
    goto LABEL_14;
  }
  return v4;
}

uint64_t std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    if (v2 > 1) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    unint64_t v3 = (unsigned char *)result;
    uint64_t result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v3 & 7) == 0) {
      unsigned char *v3 = *v3 & 0xF8 | 1;
    }
  }
  return result;
}

uint64_t std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(unsigned char *a1, unsigned __int8 **a2, unsigned __int8 *a3, int a4)
{
  v17[0] = *a2;
  v17[1] = a3;
  if ((std::__unicode::__code_point_view<char>::__consume[abi:ne180100](v17) & 0x80000000) != 0) {
    std::__throw_format_error[abi:ne180100]("The format specifier contains malformed Unicode characters");
  }
  int v8 = v17[0];
  if (v17[0] >= a3) {
    goto LABEL_7;
  }
  int v9 = (char)*v17[0];
  switch(v9)
  {
    case '<':
      char v10 = 1;
      goto LABEL_17;
    case '>':
      char v10 = 3;
LABEL_17:
      *a1 = *a1 & 0xF8 | v10;
      char v15 = *a2;
      size_t v16 = v8 - *a2;
      if (v16 == 1)
      {
        std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100]((uint64_t)a1, (char)*v15, a4);
        char v15 = *a2;
      }
      else if (v8 == v15)
      {
LABEL_21:
        int v13 = &v8[v16];
        goto LABEL_22;
      }
      memmove(a1 + 12, v15, v16);
      int v8 = *a2;
      goto LABEL_21;
    case '^':
      char v10 = 2;
      goto LABEL_17;
  }
LABEL_7:
  int v11 = (char)**a2;
  switch(v11)
  {
    case '<':
      char v12 = 1;
      break;
    case '>':
      char v12 = 3;
      break;
    case '^':
      char v12 = 2;
      break;
    default:
      return 0;
  }
  *a1 = *a1 & 0xF8 | v12;
  int v13 = *a2;
LABEL_22:
  *a2 = v13 + 1;
  return 1;
}

uint64_t std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4)
{
  unint64_t v6 = *a2;
  int v7 = *(unsigned __int8 *)*a2;
  if (v7 == 123)
  {
    int v9 = (char *)(v6 + 1);
    *a2 = (unint64_t)v9;
    char v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v9, a3, a4);
    *(_WORD *)(a1 + 2) |= 0x4000u;
  }
  else
  {
    if (v7 == 48) {
      std::__throw_format_error[abi:ne180100]("The width option should not have a leading zero");
    }
    if ((v7 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    char v10 = std::__format::__parse_number[abi:ne180100]<char const*>(v6, a3);
  }
  *(_DWORD *)(a1 + 4) = v11;
  *a2 = (unint64_t)v10;
  return 1;
}

BOOL std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, char **a2, char *a3, uint64_t a4)
{
  size_t v4 = *a2;
  int v5 = **a2;
  if (v5 == 46)
  {
    int v8 = (unsigned __int8 *)(v4 + 1);
    *a2 = v4 + 1;
    if (v4 + 1 == a3) {
      std::__throw_format_error[abi:ne180100]("End of input while parsing format specifier precision");
    }
    int v9 = *v8;
    if (v9 == 123)
    {
      *a2 = v4 + 2;
      char v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v4 + 2, a3, a4);
      *(_WORD *)(a1 + 2) |= 0x8000u;
      *(_DWORD *)(a1 + 8) = v11;
    }
    else
    {
      if ((v9 - 58) <= 0xFFFFFFF5) {
        std::__throw_format_error[abi:ne180100]("The precision option does not contain a value or an argument index");
      }
      char v10 = std::__format::__parse_number[abi:ne180100]<char const*>((unint64_t)v8, a3);
      *(_DWORD *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 2) &= ~0x8000u;
    }
    *a2 = v10;
  }
  return v5 == 46;
}

uint64_t std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>(uint64_t result, char **a2)
{
  unsigned int v2 = *a2;
  int v3 = **a2;
  if (v3 <= 96)
  {
    int v5 = v3 - 65;
    char v4 = 12;
    switch(v5)
    {
      case 0:
        goto LABEL_19;
      case 1:
        char v4 = 3;
        goto LABEL_19;
      case 4:
        char v4 = 14;
        goto LABEL_19;
      case 5:
        char v4 = 16;
        goto LABEL_19;
      case 6:
        char v4 = 18;
LABEL_19:
        *(unsigned char *)(result + 1) = v4;
        *a2 = v2 + 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(**a2)
    {
      case 'a':
        char v4 = 11;
        goto LABEL_19;
      case 'b':
        char v4 = 2;
        goto LABEL_19;
      case 'c':
        char v4 = 10;
        goto LABEL_19;
      case 'd':
        char v4 = 5;
        goto LABEL_19;
      case 'e':
        char v4 = 13;
        goto LABEL_19;
      case 'f':
        char v4 = 15;
        goto LABEL_19;
      case 'g':
        char v4 = 17;
        goto LABEL_19;
      case 'o':
        char v4 = 4;
        goto LABEL_19;
      case 'p':
        char v4 = 8;
        goto LABEL_19;
      case 's':
        char v4 = 1;
        goto LABEL_19;
      case 'x':
        char v4 = 6;
        goto LABEL_19;
      default:
        return result;
    }
  }
  return result;
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:ne180100](unsigned __int8 **a1)
{
  int v1 = *a1;
  int v2 = **a1;
  unsigned int v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255) {
    int v4 = 8;
  }
  else {
    int v4 = v3;
  }
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      uint64_t v5 = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80) {
        goto LABEL_35;
      }
      *a1 = v1 + 1;
      char v6 = *v1;
      *a1 = v1 + 2;
      unsigned int v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = 2147549181;
      }
      break;
    case 3:
      if (a1[1] - v1 < 3) {
        goto LABEL_35;
      }
      uint64_t v8 = 1;
      do
        int v9 = v1[v8] & 0xC0;
      while (v9 == 128 && v8++ != 2);
      if (v9 != 128) {
        goto LABEL_35;
      }
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      int v11 = *v1 & 0xF;
      *a1 = v1 + 2;
      int v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v13 >= 0x800)
      {
        if ((v12 & 0xF800) == 0xD800) {
          uint64_t v5 = 2147549181;
        }
        else {
          uint64_t v5 = v13;
        }
      }
      break;
    case 4:
      if (a1[1] - v1 < 4) {
        goto LABEL_35;
      }
      uint64_t v14 = 1;
      do
        int v15 = v1[v14] & 0xC0;
      while (v15 == 128 && v14++ != 3);
      if (v15 != 128) {
        goto LABEL_35;
      }
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      int v17 = *v1 & 7;
      *a1 = v1 + 2;
      int v18 = (v17 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v19 = v18 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      unsigned int v20 = v1[3] & 0x3F | (v19 << 6);
      if (v20 >= 0x10000)
      {
        if (v20 >= 0x110000) {
          uint64_t v5 = 2147549181;
        }
        else {
          uint64_t v5 = v20;
        }
      }
      break;
    default:
LABEL_35:
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      break;
  }
  return v5;
}

void std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100](uint64_t a1, int a2, int a3)
{
  if (a3 && a2 == 58 || a2 == 125 || a2 == 123) {
    std::__throw_format_error[abi:ne180100]("The fill option contains an invalid value");
  }
}

char *std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  if (a1 == a2) {
    std::__throw_format_error[abi:ne180100]("End of input while parsing an argument index");
  }
  int v4 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, a3);
  if (v4 == a2 || *v4 != 125) {
    std::__throw_format_error[abi:ne180100]("The argument index is invalid");
  }
  return v4 + 1;
}

void std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](const char *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "The type option contains an invalid value for ");
  size_t v2 = strlen(a1);
  unsigned int v3 = std::string::append(&v8, a1, v2);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v9, " formatting argument", 0x14uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v11 = v5->__r_.__value_.__r.__words[2];
  long long v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    unsigned int v7 = (const char *)&v10;
  }
  else {
    unsigned int v7 = (const char *)v10;
  }
  std::__throw_format_error[abi:ne180100](v7);
}

void sub_25FA5F824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:ne180100](uint64_t result, char a2, const char *a3, int a4)
{
  if ((a2 & 1) == 0 && (*(unsigned char *)result & 0x18) != 0)
  {
    long long v6 = "sign";
    goto LABEL_23;
  }
  if ((a2 & 2) == 0 && (*(unsigned char *)result & 0x20) != 0)
  {
    long long v6 = "alternate form";
    goto LABEL_23;
  }
  if ((a2 & 4) == 0 && (*(unsigned char *)result & 7) == 4)
  {
    long long v6 = "zero-padding";
    goto LABEL_23;
  }
  if ((a2 & 8) == 0 && *(_DWORD *)(result + 8) != -1)
  {
    long long v6 = "precision";
    goto LABEL_23;
  }
  if ((a2 & 0x10) == 0 && (*(unsigned char *)result & 0x40) != 0)
  {
    long long v6 = "locale-specific form";
LABEL_23:
    std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](a3, v6);
  }
  unsigned int v4 = *(unsigned __int8 *)(result + 1);
  if (*(unsigned char *)(result + 1))
  {
    if (v4 >= 0x20) {
      std::__throw_format_error[abi:ne180100]("The type does not fit in the mask");
    }
    int v5 = 1 << v4;
  }
  else
  {
    int v5 = 1;
  }
  if ((v5 & a4) == 0) {
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a3);
  }
  return result;
}

void std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](const char *a1, const char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v15, "The format specifier for ");
  size_t v4 = strlen(a1);
  int v5 = std::string::append(&v15, a1, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned int v7 = std::string::append(&v16, " does not allow the ", 0x14uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  size_t v9 = strlen(a2);
  long long v10 = std::string::append(&v17, a2, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v18, " option", 7uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v20 = v12->__r_.__value_.__r.__words[2];
  long long v19 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    uint64_t v14 = (const char *)&v19;
  }
  else {
    uint64_t v14 = (const char *)v19;
  }
  std::__throw_format_error[abi:ne180100](v14);
}

void sub_25FA5FA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(int a1, void **a2, uint64_t a3, unint64_t a4)
{
  if ((a3 & 0x40) != 0)
  {
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v17);
    int v12 = std::locale::use_facet(&v17, MEMORY[0x263F8C150]);
    std::locale::~locale(&v17);
    long long v13 = v12->__vftable;
    if (a1) {
      ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v13[2].~facet)(&v17, v12);
    }
    else {
      ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v13[2].~facet_0)(&v17, v12);
    }
    if ((v19 & 0x80u) == 0) {
      locale = (char *)&v17;
    }
    else {
      locale = (char *)v17.__locale_;
    }
    if ((v19 & 0x80u) == 0) {
      size_t v15 = v19;
    }
    else {
      size_t v15 = v18;
    }
    std::string v16 = std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(locale, v15, *a2, a3, a4);
    if ((char)v19 < 0) {
      operator delete(v17.__locale_);
    }
    return v16;
  }
  else
  {
    if (a1) {
      size_t v8 = 4;
    }
    else {
      size_t v8 = 5;
    }
    size_t v9 = *a2;
    if (a1) {
      long long v10 = "true";
    }
    else {
      long long v10 = "false";
    }
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v8, v9, a3, a4, v8);
  }
}

void sub_25FA5FC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, void *a2)
{
  char v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  return (v5 << 8) | (v6 << 32) | v4 & 0x7F;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x25FA5FE1CLL);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      size_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      size_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unsigned int v7 = (uint64_t *)v12;
      if (a1) {
        size_t v8 = "0";
      }
      else {
        size_t v8 = 0;
      }
      unsigned int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      size_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      size_t v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v11, 0, 0xAu);
      break;
  }
  return result;
}

std::locale *std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  unsigned int v3 = (std::locale *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 40))
  {
    MEMORY[0x261206490](&v5);
    std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(v3, &v5);
    std::locale::~locale(&v5);
  }
  return std::locale::locale(a2, v3);
}

void sub_25FA5FE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5)
{
  if (a4 <= 0)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    uint64_t v10 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, __len, HIDWORD(a4), 1);
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, __len, a3, a4, a5, v10);
  }
}

std::locale *std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(std::locale *this, const std::locale *a2)
{
  if (LOBYTE(this[1].__locale_))
  {
    std::locale::operator=(this, a2);
  }
  else
  {
    std::locale::locale(this, a2);
    LOBYTE(this[1].__locale_) = 1;
  }
  return this;
}

uint64_t std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>(unsigned __int8 *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    if ((char)*a1 < 0)
    {
      size_t v8 = a1;
    }
    else
    {
      uint64_t v7 = 0;
      size_t v8 = &a1[a3 - 1];
      while (1)
      {
        if (a2 - 1 == v7) {
          return a2;
        }
        if (a3 - 1 == v7) {
          break;
        }
        int v9 = (char)a1[++v7];
        if (v9 < 0)
        {
          a3 = a3 - v7 + 1;
          size_t v8 = &a1[v7 - 1];
          return v8
               - a1
               + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
        }
      }
      if (((char)a1[a3] & 0x80000000) == 0) {
        return a3;
      }
      a3 = 1;
    }
    return v8
         - a1
         + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
  }
  return result;
}

void *std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  size_t v9 = (a4 >> 32) - a6;
  if (a4 >> 32 <= a6)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    unint64_t v10 = HIDWORD(a5);
    size_t v11 = 0;
    switch(a4 & 7)
    {
      case 1:
        break;
      case 2:
        size_t v11 = v9 >> 1;
        v9 -= v9 >> 1;
        break;
      default:
        size_t v11 = (a4 >> 32) - a6;
        size_t v9 = 0;
        break;
    }
    uint64_t v13 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v11, SHIDWORD(a5));
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, __src, __len);
    return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13, v9, v10);
  }
}

void *std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(void *result, char *__src, size_t __len)
{
  size_t v3 = __len;
  std::locale v5 = result;
  size_t v7 = result[1];
  uint64_t v6 = result[2];
  if (v6 + __len >= v7)
  {
    uint64_t result = (void *)((uint64_t (*)(void))result[3])(*result);
    uint64_t v6 = 0;
    v5[2] = 0;
    size_t v7 = v5[1];
  }
  if (v3 >= v7)
  {
    do
    {
      if (v5[1] >= v3) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = v5[1];
      }
      if (v8) {
        memmove((void *)(*v5 + v6), __src, v8);
      }
      v5[2] = v8;
      __src += v8;
      v3 -= v8;
      uint64_t result = (void *)((uint64_t (*)(void, size_t, void))v5[3])(*v5, v8, v5[4]);
      uint64_t v6 = 0;
      v5[2] = 0;
    }
    while (v3);
  }
  else
  {
    if (v3)
    {
      uint64_t result = memmove((void *)(*v5 + v6), __src, v3);
      uint64_t v6 = v5[2];
    }
    v5[2] = v6 + v3;
  }
  return result;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint64_t v14 = a1;
  size_t v15 = a2;
  unsigned int v16 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100](&v14) & 0x7FFFFFFF;
  char v17 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v16);
  if (a1 == a2) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    unsigned int v9 = v16;
    unint64_t v10 = v14;
    if (v14 == v15) {
      char v17 = 15;
    }
    else {
      unint64_t v10 = std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100]((uint64_t)&v14);
    }
    int v11 = std::__width_estimation_table::__estimated_width[abi:ne180100](v9);
    unint64_t v12 = v8 + v11;
    if (!a4 && v12 > a3) {
      break;
    }
    if (v10 == a2)
    {
      v8 += v11;
      return v8;
    }
    v8 += v11;
  }
  while (v12 <= a3);
  return v8;
}

uint64_t std::__width_estimation_table::__estimated_width[abi:ne180100](unsigned int a1)
{
  if (a1 - 262142 < 0xFFFC1102) {
    return 1;
  }
  unint64_t v2 = 108;
  size_t v3 = (unsigned int *)&std::__width_estimation_table::__entries;
  do
  {
    unint64_t v4 = v2 >> 1;
    std::locale v5 = &v3[v2 >> 1];
    unsigned int v7 = *v5;
    uint64_t v6 = v5 + 1;
    v2 += ~(v2 >> 1);
    if (((a1 << 14) | 0x3FFF) < v7) {
      unint64_t v2 = v4;
    }
    else {
      size_t v3 = v6;
    }
  }
  while (v2);
  uint64_t v1 = 1;
  if (v3 != (unsigned int *)&std::__width_estimation_table::__entries)
  {
    if ((*(v3 - 1) & 0x3FFF) + (*(v3 - 1) >> 14) < a1) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return v1;
}

uint64_t std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](unsigned int a1)
{
  unint64_t v1 = 1496;
  unint64_t v2 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    unint64_t v3 = v1 >> 1;
    unint64_t v4 = &v2[v1 >> 1];
    unsigned int v6 = *v4;
    std::locale v5 = v4 + 1;
    v1 += ~(v1 >> 1);
    if (((a1 << 11) | 0x7FF) < v6) {
      unint64_t v1 = v3;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v1);
  uint64_t v7 = 16;
  if (v2 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    unsigned int v8 = *(v2 - 1);
    unsigned int v9 = ((v8 >> 4) & 0x7F) + (v8 >> 11);
    unsigned int v10 = v8 & 0xF;
    if (v9 >= a1) {
      return v10;
    }
    else {
      return 16;
    }
  }
  return v7;
}

unsigned __int8 *std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100](uint64_t a1)
{
  int v2 = 0;
  char v8 = 1;
  while (1)
  {
    unint64_t v3 = *(unsigned __int8 **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8)) {
      break;
    }
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    unsigned int v5 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100]((unsigned __int8 **)a1) & 0x7FFFFFFF;
    *(_DWORD *)(a1 + 16) = v5;
    unsigned int v6 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v5);
    *(unsigned char *)(a1 + 20) = v6;
    v2 |= v4 == 3;
    if (std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](&v8, v2 & 1, v4, v6)) {
      return v3;
    }
  }
  *(unsigned char *)(a1 + 20) = 15;
  return v3;
}

BOOL std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](unsigned char *a1, int a2, unsigned int a3, unsigned int a4)
{
  if (!a3 && a4 == 5) {
    return 0;
  }
  if (a3 > 5 || (BOOL v4 = 1, ((1 << a3) & 0x23) == 0))
  {
    if (a4 > 5 || (BOOL v4 = 1, ((1 << a4) & 0x23) == 0))
    {
      if (a3 == 12 || a3 == 6)
      {
        if ((a4 - 11) >= 2u) {
          goto LABEL_16;
        }
      }
      else if (a3 != 4 || a4 - 4 >= 9 || ((0x10Du >> (a4 - 4)) & 1) == 0)
      {
LABEL_16:
        BOOL v6 = a3 == 11 || a3 == 7;
        if (v6 && a4 == 11 || a4 <= 0xD && ((1 << a4) & 0x2404) != 0 || a3 == 8 || a3 == 13 && a2 && a4 == 3) {
          return 0;
        }
        BOOL v4 = 1;
        if (a3 == 9 && a4 == 9)
        {
          BOOL v4 = *a1 == 0;
          *a1 ^= 1u;
        }
        return v4;
      }
      return 0;
    }
  }
  return v4;
}

void *std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(void *a1, size_t __len, int a3)
{
  size_t v3 = __len;
  unsigned int v5 = __clz(~(_BYTE)a3) - 24;
  int __src = a3;
  if ((_BYTE)a3 == 0xFF) {
    size_t v6 = 8;
  }
  else {
    size_t v6 = v5;
  }
  if (v6)
  {
    if (__len)
    {
      do
      {
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, (char *)&__src, v6);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, __len, (char)a3);
  }
  return a1;
}

void *std::__format::__output_buffer<char>::__fill[abi:ne180100](void *result, size_t __len, int __c)
{
  uint64_t v5 = (uint64_t)result;
  size_t v7 = result[1];
  uint64_t v6 = result[2];
  if (v6 + __len >= v7)
  {
    uint64_t result = (void *)((uint64_t (*)(void))result[3])(*result);
    uint64_t v6 = 0;
    *(void *)(v5 + 16) = 0;
    size_t v7 = *(void *)(v5 + 8);
  }
  if (v7 <= __len)
  {
    do
    {
      uint64_t v8 = *(void *)v5;
      if (*(void *)(v5 + 8) >= __len) {
        size_t v9 = __len;
      }
      else {
        size_t v9 = *(void *)(v5 + 8);
      }
      if (v9)
      {
        memset((void *)(v8 + v6), __c, v9);
        uint64_t v8 = *(void *)v5;
      }
      *(void *)(v5 + 16) = v9;
      __len -= v9;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(v5 + 24))(v8, v9, *(void *)(v5 + 32));
      uint64_t v6 = 0;
      *(void *)(v5 + 16) = 0;
    }
    while (__len);
  }
  else
  {
    if (__len)
    {
      uint64_t result = memset((void *)(*(void *)v5 + v6), __c, __len);
      uint64_t v6 = *(void *)(v5 + 16);
    }
    *(void *)(v5 + 16) = v6 + __len;
  }
  return result;
}

unint64_t std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, void *a2)
{
  *(void *)&v14[23] = *MEMORY[0x263EF8340];
  __int16 v3 = *(_WORD *)(a1 + 2);
  unint64_t result = *(unsigned int *)(a1 + 4);
  if ((v3 & 0x4000) != 0)
  {
    unint64_t v5 = (int)result;
    unint64_t v6 = a2[1];
    if (v6 <= (int)result)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      uint64_t v9 = a2[2] + 32 * (int)result;
      unint64_t v2 = *(void *)v9;
      unint64_t v5 = *(void *)(v9 + 8);
      LOBYTE(v8) = *(unsigned char *)(v9 + 16);
      v11[0] = *(void *)(v9 + 17);
      *(void *)((char *)v11 + 7) = *(void *)(v9 + 24);
    }
    else
    {
      uint64_t v7 = a2[2];
      uint64_t v8 = (a2[3] >> (5 * result)) & 0x1FLL;
      unint64_t v2 = *(void *)(v7 + 16 * (int)result);
      unint64_t v5 = *(void *)(v7 + 16 * (int)result + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    char v13 = v8;
    *(void *)uint64_t v14 = v11[0];
    *(void *)&v14[7] = *(void *)((char *)v11 + 7);
    return std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, v12);
  }
  return result;
}

unint64_t std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, void *a2)
{
  *(void *)&v14[23] = *MEMORY[0x263EF8340];
  int v3 = *(__int16 *)(a1 + 2);
  unint64_t result = *(unsigned int *)(a1 + 8);
  if (v3 < 0)
  {
    unint64_t v5 = (int)result;
    unint64_t v6 = a2[1];
    if (v6 <= (int)result)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      uint64_t v9 = a2[2] + 32 * (int)result;
      unint64_t v2 = *(void *)v9;
      unint64_t v5 = *(void *)(v9 + 8);
      LOBYTE(v8) = *(unsigned char *)(v9 + 16);
      v11[0] = *(void *)(v9 + 17);
      *(void *)((char *)v11 + 7) = *(void *)(v9 + 24);
    }
    else
    {
      uint64_t v7 = a2[2];
      uint64_t v8 = (a2[3] >> (5 * result)) & 0x1FLL;
      unint64_t v2 = *(void *)(v7 + 16 * (int)result);
      unint64_t v5 = *(void *)(v7 + 16 * (int)result + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    char v13 = v8;
    *(void *)uint64_t v14 = v11[0];
    *(void *)&v14[7] = *(void *)((char *)v11 + 7);
    return std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, v12);
  }
  return result;
}

unint64_t std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unint64_t *a2)
{
  switch(*((unsigned char *)a2 + 16))
  {
    case 1:
    case 2:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      std::__throw_format_error[abi:ne180100]("Replacement argument isn't a standard signed or unsigned integer type");
    case 3:
      unint64_t result = *(unsigned int *)a2;
      if ((result & 0x80000000) != 0) {
        std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
      }
      return result;
    case 4:
      return std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(a1, a2);
    case 6:
      unint64_t result = *(unsigned int *)a2;
      if ((result & 0x80000000) != 0) {
        goto LABEL_8;
      }
      return result;
    case 7:
      unint64_t result = *a2;
      if (*a2 >> 31) {
LABEL_8:
      }
        std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
      return result;
    default:
      std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
  }
}

unint64_t std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t result = *a2;
  if ((*a2 & 0x8000000000000000) != 0) {
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  }
  if (result >> 31) {
    std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, unsigned int a9)
{
  uint64_t v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    unsigned int v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  unsigned int v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        size_t v18 = a8 + 1;
        do
        {
          *(unsigned char *)unsigned int v16 = v17;
          unsigned int v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  int64_t v20 = std::__to_chars_integral[abi:ne180100]<unsigned int>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      uint64_t v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    unint64_t v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  uint64_t v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    uint64_t v24 = (std::string::value_type *)&v45;
  }
  else {
    uint64_t v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v25 = (char *)&v45 + v47;
  }
  else {
    uint64_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    uint64_t v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        uint64_t v24 = v28;
      }
      else
      {
        uint64_t v29 = v24 + 1;
        unint64_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          uint64_t v29 = v30;
        }
        while (!v32);
        uint64_t v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  unint64_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_25FA60D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(void *a1, char *__src, char *a3, int a4, uint64_t *a5, char a6, uint64_t a7, unint64_t a8)
{
  unsigned __int16 v8 = a7;
  int v11 = a3;
  char v13 = a1;
  unint64_t v14 = HIDWORD(a7);
  unint64_t v15 = HIDWORD(a8);
  size_t v16 = a3 - __src;
  LODWORD(v17) = *((unsigned __int8 *)a5 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = a5[1];
  }
  int v18 = a4 - __src - 1 + v17;
  if ((a7 & 7) == 4)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
    if ((int)v14 > v18) {
      std::__format::__output_buffer<char>::__fill[abi:ne180100](v13, (int)v14 - v18, 48);
    }
    size_t v19 = 0;
  }
  else
  {
    if (SHIDWORD(a7) <= v18)
    {
      size_t v19 = 0;
    }
    else
    {
      size_t v19 = (a7 >> 32) - v18;
      size_t v20 = 0;
      switch(a7 & 7)
      {
        case 1:
          break;
        case 2:
          size_t v20 = v19 >> 1;
          v19 -= v19 >> 1;
          break;
        default:
          size_t v20 = (a7 >> 32) - v18;
          size_t v19 = 0;
          break;
      }
      char v13 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v20, SHIDWORD(a8));
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, __src, v16);
  }
  uint64_t v21 = *((unsigned __int8 *)a5 + 23);
  int v22 = (char)v21;
  uint64_t v23 = (char *)a5 + v21;
  if (v22 >= 0) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = (char *)(*a5 + a5[1]);
  }
  if (v22 >= 0) {
    uint64_t v25 = a5;
  }
  else {
    uint64_t v25 = (uint64_t *)*a5;
  }
  std::string::value_type v26 = (char *)v25 + 1;
  uint64_t v27 = v8 & 0xFF00;
  while (1)
  {
    uint64_t v29 = v24 - 1;
    size_t v28 = *(v24 - 1);
    if (v27 == 1792)
    {
      unint64_t v30 = &v11[v28];
      std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)v13, v11, &v11[v28], (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
      int v11 = v30;
    }
    else
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, v11, v28);
      v11 += *v29;
    }
    if (v24 == v26) {
      break;
    }
    uint64_t v31 = *v13;
    uint64_t v32 = v13[2];
    v13[2] = v32 + 1;
    *(unsigned char *)(v31 + v32) = a6;
    --v24;
    if (v13[2] == v13[1])
    {
      ((void (*)(void))v13[3])(*v13);
      v13[2] = 0;
      uint64_t v24 = v29;
    }
  }

  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13, v19, v15);
}

void *std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, char *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void))
{
  size_t v10 = (a4 >> 32) - (a2 - a1);
  if (a4 >> 32 <= a2 - a1)
  {
    std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)a3, a1, a2, a6);
    return a3;
  }
  else
  {
    unint64_t v11 = HIDWORD(a5);
    size_t v12 = 0;
    switch(a4 & 7)
    {
      case 1:
        break;
      case 2:
        size_t v12 = v10 >> 1;
        v10 -= v10 >> 1;
        break;
      default:
        size_t v12 = v10;
        size_t v10 = 0;
        break;
    }
    unint64_t v14 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v12, SHIDWORD(a5));
    std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)v14, a1, a2, a6);
    return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v14, v10, v11);
  }
}

uint64_t std::__formatter::__hex_to_upper[abi:ne180100](int a1)
{
  if ((a1 - 97) >= 6) {
    return (char)a1;
  }
  else {
    return (char)(a1 - 32);
  }
}

char *std::__to_chars_integral[abi:ne180100]<unsigned int>(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  BOOL v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  int v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5) {
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    }
    if (v5 == 3) {
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    }
    if (v5 != 7)
    {
      uint64_t v10 = a2 - (void)a1;
      int v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned int>(a3, a4);
      if (v10 < v11) {
        return (char *)a2;
      }
      BOOL v4 = (char *)a1 + v11;
      size_t v12 = v4 - 1;
      unsigned int v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[v13 % a4];
        BOOL v14 = v13 >= a4;
        v13 /= a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 9) {
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  }
  unsigned int v7 = (1233 * (32 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= (((__PAIR64__(v7, a3) - std::__itoa::__pow10_32[v7]) >> 32) + 1)) {
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  }
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 < a2) {
    return 1;
  }
  unsigned int v3 = a1;
  unsigned int v4 = a2 * a2;
  unsigned int v5 = v4 * v4;
  uint64_t result = 4;
  while (1)
  {
    if (v3 < v4) {
      return (result - 2);
    }
    if (v3 < a2 * a2 * a2) {
      break;
    }
    if (v3 < v5) {
      return result;
    }
    v3 /= v5;
    uint64_t result = (result + 4);
    if (v3 < a2) {
      return (result - 3);
    }
  }
  return (result - 1);
}

_WORD *std::__itoa::__base_10_u32[abi:ne180100](_WORD *a1, unsigned int a2)
{
  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      if (a2 > 0x3B9AC9FF)
      {
        return std::__itoa::__append10[abi:ne180100]<unsigned int>(a1, a2);
      }
      else
      {
        *(unsigned char *)a1 = a2 / 0x5F5E100 + 48;
        *(_WORD *)((char *)a1 + 1) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (a2 % 0x5F5E100 / 0xF4240)];
        unsigned int v7 = a2 % 0x5F5E100 % 0xF4240;
        *(_WORD *)((char *)a1 + 3) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v7 / 0x2710uLL)];
        v7 %= 0x2710u;
        *(_WORD *)((char *)a1 + 5) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v7 / 0x64u)];
        *(_WORD *)((char *)a1 + 7) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v7 % 0x64u)];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      unsigned int v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * v3];
        a1[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (a2 % 0xF4240 / 0x2710uLL)];
        unsigned int v9 = a2 % 0xF4240 % 0x2710;
        a1[2] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v9 / 0x64u)];
        a1[3] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v9 % 0x64u)];
        return a1 + 4;
      }
      else
      {
        *(unsigned char *)a1 = v3 + 48;
        unint64_t v4 = (429497 * (unint64_t)(a2 % 0xF4240)) >> 32;
        *(_WORD *)((char *)a1 + 1) = *(_WORD *)&std::__itoa::__digits_base_10[2 * v4];
        unsigned __int16 v5 = a2 % 0xF4240 - 10000 * v4;
        *(_WORD *)((char *)a1 + 3) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v5 / 0x64u)];
        *(_WORD *)((char *)a1 + 5) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v5 % 0x64u)];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    unsigned int v6 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * v6];
      unsigned __int16 v10 = a2 % 0x2710;
      a1[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v10 / 0x64u)];
      a1[2] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v10 % 0x64u)];
      return a1 + 3;
    }
    else
    {
      *(unsigned char *)a1 = v6 + 48;
      *(_WORD *)((char *)a1 + 1) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((5243 * (a2 % 0x2710)) >> 19)];
      *(_WORD *)((char *)a1 + 3) = *(_WORD *)&std::__itoa::__digits_base_10[2
                                                                          * (unsigned __int16)(a2 % 0x2710
                                                                                             - 100
                                                                                             * ((unsigned __int16)((5243 * (a2 % 0x2710)) >> 16) >> 3))];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    unsigned int v8 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * v8];
      a1[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)a2 % 0x64u)];
      return a1 + 2;
    }
    else
    {
      *(unsigned char *)a1 = v8 + 48;
      *(_WORD *)((char *)a1 + 1) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)a2 % 0x64u)];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * a2];
    return a1 + 1;
  }
  else
  {
    *(unsigned char *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned int>(_WORD *a1, unsigned int a2)
{
  *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * (a2 / 0x5F5E100uLL)];
  a1[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (a2 % 0x5F5E100 / 0xF4240uLL)];
  unsigned int v2 = a2 % 0x5F5E100 % 0xF4240;
  a1[2] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v2 / 0x2710uLL)];
  v2 %= 0x2710u;
  a1[3] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v2 / 0x64u)];
  a1[4] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v2 % 0x64u)];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x11)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      BOOL v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  unsigned int v8 = (unsigned char *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    BOOL v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x41)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    BOOL v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x101)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_16_lut[a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    BOOL v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

uint64_t std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(uint64_t result, char *a2, char *a3, uint64_t (*a4)(void))
{
  unsigned int v6 = a2;
  uint64_t v7 = result;
  unint64_t v8 = a3 - a2;
  unint64_t v10 = *(void *)(result + 8);
  uint64_t v9 = *(void *)(result + 16);
  if (v9 + v8 >= v10)
  {
    uint64_t result = (*(uint64_t (**)(void))(result + 24))(*(void *)result);
    uint64_t v9 = 0;
    *(void *)(v7 + 16) = 0;
    unint64_t v10 = *(void *)(v7 + 8);
  }
  if (v8 >= v10)
  {
    do
    {
      uint64_t v13 = *(void *)v7;
      if (*(void *)(v7 + 8) >= v8) {
        unint64_t v14 = v8;
      }
      else {
        unint64_t v14 = *(void *)(v7 + 8);
      }
      if (v14)
      {
        unint64_t v15 = (unsigned char *)(v13 + v9);
        unint64_t v16 = v14;
        uint64_t v17 = v6;
        do
        {
          unsigned int v18 = *v17++;
          *v15++ = a4(v18);
          --v16;
        }
        while (v16);
        uint64_t v13 = *(void *)v7;
      }
      v6 += v14;
      *(void *)(v7 + 16) = v14;
      v8 -= v14;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, void))(v7 + 24))(v13, v14, *(void *)(v7 + 32));
      uint64_t v9 = 0;
      *(void *)(v7 + 16) = 0;
    }
    while (v8);
  }
  else
  {
    if (v6 != a3)
    {
      int v11 = (unsigned char *)(*(void *)v7 + v9);
      do
      {
        unsigned int v12 = *v6++;
        uint64_t result = a4(v12);
        *v11++ = result;
      }
      while (v6 != a3);
      uint64_t v9 = *(void *)(v7 + 16);
    }
    *(void *)(v7 + 16) = v9 + v8;
  }
  return result;
}

void *std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned __int8 a2, void *a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 10 || v5 == 0)
  {
    uint64_t v7 = (void *)*a3;
    unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    unsigned __int8 __src = a2;
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)&__src, 1uLL, v7, v8, v9, 1);
  }
  else
  {
    unint64_t v11 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v11, v12, 0);
  }
}

uint64_t std::__format_spec::__process_parsed_char[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    BOOL v3 = v2 > 0x13;
    int v4 = (1 << v2) & 0x80401;
    if (v3 || v4 == 0) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    unsigned int v6 = (unsigned char *)result;
    uint64_t result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v6 & 7) == 0) {
      unsigned char *v6 = *v6 & 0xF8 | 1;
    }
  }
  return result;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, int a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    unint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    if (a2 >= 0) {
      unsigned int v10 = a2;
    }
    else {
      unsigned int v10 = -a2;
    }
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v10, (void **)a3, v6, v5, a2 < 0);
  }
}

uint64_t std::__format_spec::__process_parsed_integer[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  int v2 = *(unsigned __int8 *)(result + 1);
  if ((v2 - 2) >= 6 && v2 != 0)
  {
    if (v2 != 10) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    int v4 = (unsigned char *)result;
    uint64_t result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v4 & 7) == 0) {
      unsigned char *v4 = *v4 & 0xF8 | 1;
    }
  }
  return result;
}

void *std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(int a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 != (char)a1) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    unint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    if (a2 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = -a2;
    }
    return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v10, (void **)a3, v6, v5, a2 < 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 != (char)a1) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x25FA61D54);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unint64_t v7 = &v13;
      signed int v9 = 2;
      unint64_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unint64_t v7 = &v13;
      signed int v9 = 2;
      unint64_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unint64_t v7 = (uint64_t *)&v12[3];
      if (a1) {
        unint64_t v8 = "0";
      }
      else {
        unint64_t v8 = 0;
      }
      signed int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      unint64_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      unint64_t v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v12, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, signed int a9)
{
  signed int v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    unint64_t v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  unint64_t v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        unsigned int v18 = a8 + 1;
        do
        {
          *(unsigned char *)unint64_t v16 = v17;
          unint64_t v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  size_t v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      signed int v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    unint64_t v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  uint64_t v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    uint64_t v24 = (std::string::value_type *)&v45;
  }
  else {
    uint64_t v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v25 = (char *)&v45 + v47;
  }
  else {
    uint64_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    size_t v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        uint64_t v24 = v28;
      }
      else
      {
        uint64_t v29 = v24 + 1;
        unint64_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          uint64_t v29 = v30;
        }
        while (!v32);
        uint64_t v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  unint64_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_25FA62094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, signed int a4)
{
  int v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  int v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5) {
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    }
    if (v5 == 3) {
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    }
    if (v5 != 7)
    {
      uint64_t v10 = a2 - (void)a1;
      int v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(a3, a4);
      if (v10 < v11) {
        return (char *)a2;
      }
      int v4 = (char *)a1 + v11;
      unint64_t v12 = v4 - 1;
      unint64_t v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[(v13 % a4)];
        BOOL v14 = v13 >= a4;
        v13 /= (unint64_t)a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 19) {
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  unsigned int v7 = (1233 * (64 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1) {
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  if (a2 > a1) {
    return 1;
  }
  unint64_t v3 = a1;
  unint64_t v4 = a2 * a2;
  unint64_t v5 = (v4 * v4);
  uint64_t result = 4;
  while (1)
  {
    if (v3 < v4) {
      return (result - 2);
    }
    if (v3 < v4 * a2) {
      break;
    }
    if (v3 < v5) {
      return result;
    }
    v3 /= v5;
    uint64_t result = (result + 4);
    if (v3 < a2) {
      return (result - 3);
    }
  }
  return (result - 1);
}

_WORD *std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](_WORD *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (HIDWORD(a2))
  {
    if (a2 > 0x2540BE3FFLL)
    {
      a1 = std::__itoa::__base_10_u32[abi:ne180100](a1, a2 / 0x2540BE400);
      v2 %= 0x2540BE400uLL;
    }
    return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a1, v2);
  }
  else
  {
    return std::__itoa::__base_10_u32[abi:ne180100](a1, a2);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned long long>(_WORD *a1, unint64_t a2)
{
  *a1 = *(_WORD *)&std::__itoa::__digits_base_10[2 * (a2 / 0x5F5E100)];
  unsigned int v2 = a2 % 0x5F5E100;
  a1[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v2 / 0xF4240uLL)];
  v2 %= 0xF4240u;
  a1[2] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v2 / 0x2710uLL)];
  v2 %= 0x2710u;
  a1[3] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v2 / 0x64u)];
  a1[4] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v2 % 0x64u)];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x11)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unint64_t v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      BOOL v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  unint64_t v8 = (unsigned char *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    BOOL v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x41)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unint64_t v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    BOOL v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = 67 - __clz(a3 | 1);
  if (a2 - a1 < (uint64_t)(v3 >> 2)) {
    return a2;
  }
  uint64_t v4 = a1 + (v3 >> 2);
  if (a3 < 0x101)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + (v3 >> 2);
    do
    {
      unint64_t v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_16_lut[a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    BOOL v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    signed int v9 = (void *)*a4;
    return std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, v9, v8, v7);
  }
  else
  {
    unsigned long long v11 = __PAIR128__(a3 ^ (unint64_t)(a3 >> 63), a2 ^ (a3 >> 63)) - __PAIR128__(a3 >> 63, a3 >> 63);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v11, *((unint64_t *)&v11 + 1), (void **)a4, v8, v7, a3 < 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (__PAIR128__(-1, -257) >= __PAIR128__((unint64_t)(a1 >= 0x80) + a2 - 1, a1 - 128)) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, void **a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(BYTE1(a4))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x25FA62818);
    case 2:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unint64_t v8 = &v15;
      signed int v10 = 2;
      signed int v9 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unint64_t v8 = &v15;
      signed int v10 = 2;
      signed int v9 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unint64_t v8 = (uint64_t *)v14;
      if (a1 | a2) {
        signed int v9 = "0";
      }
      else {
        signed int v9 = 0;
      }
      signed int v10 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unint64_t v8 = (uint64_t *)v12;
      signed int v10 = 16;
      signed int v9 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unint64_t v8 = (uint64_t *)v12;
      signed int v10 = 16;
      signed int v9 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, v7, a5, a6, v11, (uint64_t)v8, v9, v10);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, v11, (uint64_t)v13, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, void **a3, unint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, unsigned char *a9, signed int a10)
{
  signed int v10 = a7;
  char v14 = a4;
  if (a6)
  {
    char v15 = 45;
LABEL_7:
    *a7 = v15;
    char v17 = a7 + 1;
    goto LABEL_8;
  }
  int v16 = (a4 >> 3) & 3;
  if (v16 == 2)
  {
    char v15 = 43;
    goto LABEL_7;
  }
  char v17 = a7;
  if (v16 == 3)
  {
    char v15 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      char v18 = *a9;
      if (*a9)
      {
        int v19 = a9 + 1;
        do
        {
          *v17++ = v18;
          int v20 = *v19++;
          char v18 = v20;
        }
        while (v20);
      }
    }
  }
  uint64_t v21 = (char *)std::__to_chars_integral[abi:ne180100]<unsigned __int128>(v17, a8, a1, a2, a10);
  if ((v14 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a3, &v46);
  int v22 = std::locale::use_facet(&v46, MEMORY[0x263F8C150]);
  std::locale::~locale(&v46);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v22->__vftable[1].__on_zero_shared)(&v46, v22);
  if ((char)v48 < 0)
  {
    locale = (char *)v46.__locale_;
    if (!v47)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v48) {
      goto LABEL_44;
    }
    locale = (char *)&v46;
  }
  if (v21 - v17 <= *locale)
  {
    if ((v48 & 0x80) != 0)
    {
      locale = (char *)v46.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v36 = HIDWORD(a4);
    if ((v14 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a3, v10, v17 - v10);
      unsigned __int8 v37 = a4 & 0xF8 | 3;
      if (SHIDWORD(a4) >= (int)v17 - (int)v10) {
        int v38 = v17 - v10;
      }
      else {
        int v38 = HIDWORD(a4);
      }
      unint64_t v36 = (HIDWORD(a4) - v38);
      unsigned __int8 v39 = 48;
      signed int v10 = v17;
    }
    else
    {
      unsigned __int8 v39 = BYTE4(a5);
      unsigned __int8 v37 = a4;
    }
    uint64_t v40 = *a3;
    uint64_t v41 = a4 & 0xFFFFFF00 | (v36 << 32) | v37;
    unint64_t v42 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v39 << 32);
    if ((a4 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21, v40, v41, v42, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21 - v10, v40, v41, v42, v21 - v10);
    }
  }
  uint64_t v24 = *a3;
  memset(&__p, 0, sizeof(__p));
  if ((v48 & 0x80u) == 0) {
    uint64_t v25 = (std::string::value_type *)&v46;
  }
  else {
    uint64_t v25 = (std::string::value_type *)v46.__locale_;
  }
  if ((v48 & 0x80u) == 0) {
    std::string::value_type v26 = (char *)&v46 + v48;
  }
  else {
    std::string::value_type v26 = (char *)v46.__locale_ + v47;
  }
  std::string::value_type v27 = *v25;
  uint64_t v28 = v21 - v17 - *v25;
  if (v28 >= 1)
  {
    uint64_t v29 = v26 - 1;
    do
    {
      std::string::push_back(&__p, v27);
      if (v25 == v29)
      {
        std::string::value_type v27 = *v29;
        uint64_t v25 = v29;
      }
      else
      {
        unint64_t v30 = v25 + 1;
        int v31 = v25 + 1;
        do
        {
          int v32 = *v31++;
          std::string::value_type v27 = v32;
          if (v32) {
            BOOL v33 = 1;
          }
          else {
            BOOL v33 = v30 == v29;
          }
          unint64_t v30 = v31;
        }
        while (!v33);
        uint64_t v25 = v31 - 1;
      }
      v28 -= v27;
    }
    while (v28 > 0);
  }
  std::string::push_back(&__p, v27 + v28);
  char v34 = ((uint64_t (*)(const std::locale::facet *))v22->__vftable[1].~facet_0)(v22);
  unint64_t v35 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v24, v10, v17, (int)v21, (uint64_t *)&__p, v34, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v46.__locale_);
  }
  return v35;
}

void sub_25FA62B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

_WORD *std::__to_chars_integral[abi:ne180100]<unsigned __int128>(unsigned char *a1, uint64_t a2, unint64_t a3, unint64_t a4, signed int a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a3;
  unint64_t v7 = (unsigned char *)a2;
  HIDWORD(v9) = a5;
  LODWORD(v9) = a5 - 2;
  int v8 = v9 >> 1;
  if (v8 != 4)
  {
    if (!v8) {
      return (_WORD *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    }
    if (v8 == 3) {
      return (_WORD *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    }
    if (v8 != 7)
    {
      uint64_t v18 = a2 - (void)a1;
      int v19 = std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(a3, a4, a5);
      if (v18 >= v19)
      {
        unint64_t v7 = &a1[v19];
        int v20 = v7 - 1;
        do
        {
          uint64_t v21 = __udivti3();
          BOOL v22 = __PAIR128__(v5, v6) >= a5;
          *v20-- = a0123456789abcd[(v6 - v21 * a5)];
          unint64_t v6 = v21;
          unint64_t v5 = v23;
        }
        while (v22);
      }
      return v7;
    }
    return (_WORD *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
  }
  uint64_t v10 = a2 - (void)a1;
  if (a4)
  {
    if (v10 > 38) {
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    }
    unsigned int v11 = (1233 * (128 - __clz(a4))) >> 12;
    if (v10 >= v11 - (__PAIR128__(a4, a3) < std::__itoa::__pow10_128[v11]) + 1) {
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    }
  }
  else
  {
    if (v10 > 19) {
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    }
    unsigned int v13 = (1233 * (64 - __clz(a3 | 1))) >> 12;
    if (v10 >= v13 - (std::__itoa::__pow10_64[v13] > a3) + 1) {
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    }
  }
  return v7;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (__PAIR128__(a2, a1) < a3) {
    return 1;
  }
  unsigned int v5 = a3 * a3;
  unsigned int v6 = a3 * a3 * a3;
  uint64_t v3 = 4;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v5) {
      return (v3 - 2);
    }
    if (__PAIR128__(a2, a1) < v6) {
      break;
    }
    if (__PAIR128__(a2, a1) < v5 * v5) {
      return v3;
    }
    a1 = __udivti3();
    uint64_t v3 = (v3 + 4);
    if (__PAIR128__(a2, a1) < a3) {
      return (v3 - 3);
    }
  }
  return (v3 - 1);
}

_WORD *std::__itoa::__base_10_u128[abi:ne180100](unsigned char *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (__PAIR128__(a3, a2) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
  {
    *a1 = __udivti3() | 0x30;
    unsigned int v7 = __udivti3();
    *((unsigned char *)v3 + 1) = v7 / 0x5F5E100 + 48;
    v3[1] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v7 % 0x5F5E100 / 0xF4240)];
    unsigned int v8 = v7 % 0x5F5E100 % 0xF4240;
    v3[2] = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v8 / 0x2710uLL)];
    v8 %= 0x2710u;
    v3[3] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v8 / 0x64u)];
    v3[4] = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v8 % 0x64u)];
    unint64_t v9 = __udivti3();
    uint64_t v10 = v3 + 5;
  }
  else
  {
    unint64_t v4 = __udivti3();
    unint64_t v5 = v4;
    if (!HIDWORD(v4))
    {
      unsigned int v6 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4);
      goto LABEL_9;
    }
    if (v4 > 0x2540BE3FFLL)
    {
      uint64_t v3 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4 / 0x2540BE400);
      v5 %= 0x2540BE400uLL;
    }
    uint64_t v10 = v3;
    unint64_t v9 = v5;
  }
  unsigned int v6 = std::__itoa::__append10[abi:ne180100]<unsigned long long>(v10, v9);
LABEL_9:
  unsigned int v11 = v6;
  unint64_t v12 = __umodti3();
  *(unsigned char *)unsigned int v11 = v12 / 0x2540BE400 / 0x5F5E100 + 48;
  unsigned int v13 = v12 / 0x2540BE400 % 0x5F5E100;
  *(_WORD *)((char *)v11 + 1) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v13 / 0xF4240)];
  v13 %= 0xF4240u;
  *(_WORD *)((char *)v11 + 3) = *(_WORD *)&std::__itoa::__digits_base_10[2 * (v13 / 0x2710uLL)];
  v13 %= 0x2710u;
  *(_WORD *)((char *)v11 + 5) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v13 / 0x64u)];
  *(_WORD *)((char *)v11 + 7) = *(_WORD *)&std::__itoa::__digits_base_10[2 * ((unsigned __int16)v13 % 0x64u)];

  return std::__itoa::__append10[abi:ne180100]<unsigned long long>((_WORD *)((char *)v11 + 9), v12 % 0x2540BE400);
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  int64_t v6 = 128 - v4;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    unint64_t v9 = a3;
    unint64_t v12 = a4;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + v6;
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 4;
      BOOL v11 = a3 <= 0x10F;
      unint64_t v12 = a4 >> 4;
      *(_DWORD *)(v8 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v8 -= 4;
      a3 = v9;
      a4 >>= 4;
    }
    while (!v11);
  }
  unsigned int v13 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v14 = v9 & 1;
    BOOL v11 = v9 <= 1;
    *((void *)&v15 + 1) = v12;
    *(void *)&long long v15 = v9;
    unint64_t v9 = v15 >> 1;
    v12 >>= 1;
    *v13-- = a01[v14];
  }
  while (!v11);
  return v7;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4 = __clz(a3 | 1) | 0x40;
  char v5 = __clz(a4);
  if (a4) {
    char v4 = v5;
  }
  uint64_t v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    unint64_t v9 = a3;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + v6;
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 6;
      a4 >>= 6;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x40);
  }
  BOOL v11 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v12 = v9 & 7;
    BOOL v13 = v9 <= 7;
    *((void *)&v14 + 1) = a4;
    *(void *)&long long v14 = v9;
    unint64_t v9 = v14 >> 3;
    a4 >>= 3;
    *v11-- = a01234567[v12];
  }
  while (!v13);
  return v7;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = 131 - v4;
  if (a2 - a1 < (uint64_t)(v6 >> 2)) {
    return a2;
  }
  uint64_t v7 = a1 + (v6 >> 2);
  if (__PAIR128__(a4, a3) < 0x101)
  {
    unint64_t v9 = a3;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + (v6 >> 2);
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 8;
      a4 >>= 8;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_16_lut[a3];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x100);
  }
  BOOL v11 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v12 = v9 & 0xF;
    BOOL v13 = v9 <= 0xF;
    *((void *)&v14 + 1) = a4;
    *(void *)&long long v14 = v9;
    unint64_t v9 = v14 >> 4;
    a4 >>= 4;
    *v11-- = a0123456789abcd_0[v12];
  }
  while (!v13);
  return v7;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unsigned int a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    uint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned int a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    uint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    unint64_t v9 = (void *)*a4;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, v9, v8, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, a3, (void **)a4, v8, v7, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (__PAIR128__(a2, a1) >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void *std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, float a4)
{
  v46[32] = *MEMORY[0x263EF8340];
  int v7 = LODWORD(a4) >> 31;
  if ((LODWORD(a4) & 0x7FFFFFFFu) < 0x7F800000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      float v9 = a4;
    }
    else {
      float v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 149;
    }
    else {
      int v10 = a3;
    }
    int v42 = v10;
    int v43 = 0;
    if (v10 < 150)
    {
      unint64_t v44 = v10 + 45;
      if ((v10 + 45) >= 0x101)
      {
        BOOL v11 = operator new(v10 + 45);
LABEL_13:
        std::string __p = v11;
        std::__formatter::__format_buffer[abi:ne180100]<float,float>((unsigned int *)&v42, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v38, v9);
        if ((a2 & 0x20) != 0)
        {
          unint64_t v12 = v39;
          if (v39 == *(char **)v41)
          {
            *(void *)uint64_t v41 = v39 + 1;
            *unsigned __int8 v39 = 46;
            BOOL v13 = v40;
            long long v14 = (char *)(*(void *)v41 - 1);
            if (v40 != (char *)(*(void *)v41 - 1))
            {
              if (v40 + 1 == v14)
              {
                char v16 = *v40;
                *uint64_t v40 = *v14;
                char *v14 = v16;
              }
              else
              {
                char v15 = *(unsigned char *)(*(void *)v41 - 1);
                memmove(v40 + 1, v40, *(void *)v41 - 1 - (void)v40);
                char *v13 = v15;
              }
            }
            unint64_t v12 = v40;
            unsigned __int8 v39 = v40++;
          }
          if ((BYTE1(a2) - 17) <= 1u)
          {
            if (a3 <= 1) {
              int v17 = 1;
            }
            else {
              int v17 = a3;
            }
            if ((a3 & 0x80000000) != 0) {
              int v17 = 6;
            }
            if (v40 == *(char **)v41) {
              int v18 = v38 - v12;
            }
            else {
              int v18 = -1;
            }
            int v19 = v18 + v17;
            int v20 = &v40[~(unint64_t)v12];
            if ((uint64_t)v20 < v19) {
              v43 += v19 - v20;
            }
          }
        }
        if ((a2 & 0x40) != 0)
        {
          uint64_t v28 = *a1;
          std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v37);
          uint64_t v29 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(v28, (uint64_t)&v42, &v38, &v37, a2, a3);
          std::locale::~locale(&v37);
        }
        else
        {
          uint64_t v21 = *(void *)v41;
          BOOL v22 = (char *)__p;
          uint64_t v23 = *(void *)v41 - (void)__p;
          size_t v24 = v43;
          if (*(void *)v41 - (void)__p + v43 >= a2 >> 32)
          {
            if (!v43 || (unint64_t v30 = v40, v40 == *(char **)v41))
            {
              uint64_t v29 = *a1;
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v41 - (void)__p);
              std::__format::__output_buffer<char>::__fill[abi:ne180100](v29, v24, 48);
            }
            else
            {
              uint64_t v29 = *a1;
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v40 - (unsigned char *)__p);
              std::__format::__output_buffer<char>::__fill[abi:ne180100](v29, v24, 48);
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v29, v30, v21 - (void)v30);
            }
          }
          else
          {
            uint64_t v25 = *a1;
            if ((a2 & 7) == 4)
            {
              if (__p != v38)
              {
                unint64_t v36 = v25;
                std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v36, (char *)__p);
                ++v22;
              }
              unsigned __int8 v26 = a2 & 0xF8 | 3;
              unsigned __int8 v27 = 48;
            }
            else
            {
              unsigned __int8 v27 = BYTE4(a3);
              unsigned __int8 v26 = a2;
            }
            unint64_t v31 = a2 & 0xFFFFFFFFFFFFFF00 | v26;
            unint64_t v32 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v27 << 32);
            if (v24) {
              BOOL v33 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v22, *(uint64_t *)v41, v25, v31, v32, v23, v40, v24);
            }
            else {
              BOOL v33 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v22, *(void *)v41 - (void)v22, v25, v31, v32, v23);
            }
            uint64_t v29 = v33;
          }
        }
        if (v44 >= 0x101) {
          operator delete(__p);
        }
        return v29;
      }
    }
    else
    {
      int v42 = 149;
      int v43 = v10 - 149;
      unint64_t v44 = 194;
    }
    BOOL v11 = v46;
    goto LABEL_13;
  }
  unint64_t v35 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v35, a2, a3, a4 < 0.0, 0);
}

void sub_25FA639D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x101) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(void *a1, uint64_t a2, unint64_t a3, char a4, int a5)
{
  if (a4)
  {
    char v5 = 45;
  }
  else
  {
    int v6 = (a2 >> 3) & 3;
    if (v6 == 2)
    {
      char v5 = 43;
    }
    else
    {
      if (v6 != 3)
      {
        p_src = &__src;
        goto LABEL_8;
      }
      char v5 = 32;
    }
  }
  p_src = v14;
  char __src = v5;
LABEL_8:
  if (BYTE1(a2) <= 0x10u && ((1 << SBYTE1(a2)) & 0x15000) != 0)
  {
    uint64_t v8 = 6;
  }
  else
  {
    uint64_t v8 = 6;
    if (BYTE1(a2) != 18) {
      uint64_t v8 = 0;
    }
  }
  uint64_t v9 = 3;
  if (!a5) {
    uint64_t v9 = 0;
  }
  int v10 = &aInfnaninfnan[v8 + v9];
  *(_WORD *)p_src = *(_WORD *)v10;
  p_src[2] = v10[2];
  if ((a2 & 7) == 4) {
    unsigned __int8 v11 = a2 & 0xF8 | 3;
  }
  else {
    unsigned __int8 v11 = a2;
  }
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, p_src - &__src + 3, a1, a2 & 0xFFFFFFFFFFFFFF00 | v11, a3, p_src - &__src + 3);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<float,float>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, float a7@<S0>)
{
  uint64_t v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)uint64_t v9 = v10;
  uint64_t v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x25FA63CC8);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x261206560](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<float,float>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

void *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(void *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = std::locale::use_facet(this, MEMORY[0x263F8C150]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  unint64_t v12 = a3[2];
  int v13 = *a3;
  if (v12 >= a3[1]) {
    unint64_t v12 = a3[1];
  }
  int64_t __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_29;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_29;
    }
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v56, 0, sizeof(v56));
  int v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  std::string::value_type v18 = p_p->__r_.__value_.__s.__data_[0];
  uint64_t v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    int v20 = v17 - 1;
    do
    {
      std::string::push_back(&v56, v18);
      if (p_p == (std::string *)v20)
      {
        std::string::value_type v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        uint64_t v21 = &p_p->__r_.__value_.__s.__data_[1];
        BOOL v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          int v23 = *v22++;
          std::string::value_type v18 = v23;
          if (v23) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = v21 == v20;
          }
          uint64_t v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v56, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v56;
LABEL_29:
  unint64_t v25 = HIDWORD(a6);
  unsigned __int8 v26 = *(char **)(a2 + 16);
  std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  int64_t v28 = a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0);
  int v29 = a5 & 7;
  size_t v30 = (a5 >> 32) - v28;
  if (a5 >> 32 <= v28)
  {
    size_t v34 = 0;
    size_t v33 = 0;
    unsigned __int8 v31 = v25;
  }
  else
  {
    if (v29 == 4) {
      unsigned __int8 v31 = 48;
    }
    else {
      unsigned __int8 v31 = v25;
    }
    if (v29 == 4) {
      uint64_t v32 = 3;
    }
    else {
      uint64_t v32 = a5 & 7;
    }
    size_t v33 = 0;
    size_t v34 = (a5 >> 32) - v28;
    switch(v32)
    {
      case 1:
        break;
      case 2:
        size_t v33 = v30 >> 1;
        size_t v34 = v30 - (v30 >> 1);
        break;
      default:
        size_t v34 = 0;
        size_t v33 = v30;
        break;
    }
  }
  size_t v54 = v34;
  if (v29 == 4 && v13 != v26)
  {
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v26);
  }
  int v35 = v25 & 0xFFFFFF00 | v31;
  unint64_t v36 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v33, v35);
  std::locale v37 = v36;
  if (v29 != 4)
  {
    int v38 = *(char **)(a2 + 16);
    if (v13 != v38)
    {
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v38);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v40 = &__p.__r_.__value_.__s.__data_[1];
      uint64_t v41 = &__p;
      goto LABEL_52;
    }
LABEL_56:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, __len);
    goto LABEL_57;
  }
  std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_56;
  }
  uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  uint64_t v40 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_52:
  int v42 = (char *)v41 + v39;
  char v43 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    unint64_t v44 = v42 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, *(v42 - 1));
    if (v42 == v40) {
      break;
    }
    v13 += *(v42 - 1);
    uint64_t v45 = *v37;
    uint64_t v46 = v37[2];
    void v37[2] = v46 + 1;
    *(unsigned char *)(v45 + v46) = v43;
    --v42;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      void v37[2] = 0;
      int v42 = v44;
    }
  }
LABEL_57:
  uint64_t v47 = a3[1];
  if (v47 != a3[3])
  {
    char v48 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    uint64_t v49 = *v37;
    uint64_t v50 = v37[2];
    void v37[2] = v50 + 1;
    *(unsigned char *)(v49 + v50) = v48;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      void v37[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v37, *(int *)(a2 + 4), 48);
    uint64_t v47 = a3[3];
  }
  v51 = a3[2];
  if (v51 != v47) {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v51, v47 - v51);
  }
  v52 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v37, v54, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v52;
}

void sub_25FA64188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, char *a7, size_t a8)
{
  size_t v8 = (a4 >> 32) - (a6 + a8);
  size_t v13 = 0;
  switch(a4 & 7)
  {
    case 1:
      break;
    case 2:
      size_t v13 = v8 >> 1;
      v8 -= v8 >> 1;
      break;
    default:
      size_t v13 = (a4 >> 32) - (a6 + a8);
      size_t v8 = 0;
      break;
  }
  unint64_t v14 = HIDWORD(a5);
  uint64_t v15 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v13, SHIDWORD(a5));
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v15, a1, a7 - a1);
  std::__format::__output_buffer<char>::__fill[abi:ne180100](v15, a8, 48);
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v15, a7, a2 - (void)a7);

  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v15, v8, v14);
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x261206560](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<float,float>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    size_t v13 = result;
  }
  else {
    size_t v13 = v10;
  }
  if (v13 == v10) {
    size_t v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x261206560](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 5), 112, 3uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x261206560](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

void *std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  v47[128] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)&a4 >> 63;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      double v9 = a4;
    }
    else {
      double v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 1074;
    }
    else {
      int v10 = a3;
    }
    int v43 = v10;
    int v44 = 0;
    if (v10 < 1075)
    {
      size_t v11 = v10 + 316;
      unint64_t v45 = v11;
      if ((v10 + 316) < 0x401)
      {
        unint64_t v12 = v47;
        goto LABEL_13;
      }
    }
    else
    {
      int v43 = 1074;
      int v44 = v10 - 1074;
      size_t v11 = 1390;
      unint64_t v45 = 1390;
    }
    unint64_t v12 = operator new(v11);
LABEL_13:
    std::string __p = v12;
    std::__formatter::__format_buffer[abi:ne180100]<double,double>((unsigned int *)&v43, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v39, v9);
    if ((a2 & 0x20) != 0)
    {
      size_t v13 = v40;
      if (v40 == *(char **)v42)
      {
        *(void *)int v42 = v40 + 1;
        *uint64_t v40 = 46;
        unint64_t v14 = v41;
        uint64_t v15 = (char *)(*(void *)v42 - 1);
        if (v41 != (char *)(*(void *)v42 - 1))
        {
          if (v41 + 1 == v15)
          {
            char v17 = *v41;
            *uint64_t v41 = *v15;
            char *v15 = v17;
          }
          else
          {
            char v16 = *(unsigned char *)(*(void *)v42 - 1);
            memmove(v41 + 1, v41, *(void *)v42 - 1 - (void)v41);
            char *v14 = v16;
          }
        }
        size_t v13 = v41;
        uint64_t v40 = v41++;
      }
      if ((BYTE1(a2) - 17) <= 1u)
      {
        if (a3 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a3;
        }
        if ((a3 & 0x80000000) != 0) {
          int v18 = 6;
        }
        if (v41 == *(char **)v42) {
          int v19 = v39 - v13;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 + v18;
        uint64_t v21 = &v41[~(unint64_t)v13];
        if ((uint64_t)v21 < v20) {
          v44 += v20 - v21;
        }
      }
    }
    if ((a2 & 0x40) != 0)
    {
      int v29 = *a1;
      std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v38);
      size_t v30 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v29, (uint64_t)&v43, &v39, &v38, a2, a3);
      std::locale::~locale(&v38);
    }
    else
    {
      uint64_t v22 = *(void *)v42;
      int v23 = (char *)__p;
      uint64_t v24 = *(void *)v42 - (void)__p;
      size_t v25 = v44;
      if (*(void *)v42 - (void)__p + v44 >= a2 >> 32)
      {
        if (!v44 || (unsigned __int8 v31 = v41, v41 == *(char **)v42))
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v42 - (void)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
        }
        else
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v41 - (unsigned char *)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v30, v31, v22 - (void)v31);
        }
      }
      else
      {
        unsigned __int8 v26 = *a1;
        if ((a2 & 7) == 4)
        {
          if (__p != v39)
          {
            std::locale v37 = v26;
            std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v37, (char *)__p);
            ++v23;
          }
          unsigned __int8 v27 = a2 & 0xF8 | 3;
          unsigned __int8 v28 = 48;
        }
        else
        {
          unsigned __int8 v28 = BYTE4(a3);
          unsigned __int8 v27 = a2;
        }
        unint64_t v32 = a2 & 0xFFFFFFFFFFFFFF00 | v27;
        unint64_t v33 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v28 << 32);
        if (v25) {
          size_t v34 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(uint64_t *)v42, v26, v32, v33, v24, v41, v25);
        }
        else {
          size_t v34 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(void *)v42 - (void)v23, v26, v32, v33, v24);
        }
        size_t v30 = v34;
      }
    }
    if (v45 >= 0x401) {
      operator delete(__p);
    }
    return v30;
  }
  unint64_t v36 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v36, a2, a3, a4 < 0.0, 0);
}

void sub_25FA649F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<double,double>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, double a7@<D0>)
{
  double v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)double v9 = v10;
  double v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x25FA64BDCLL);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x261206500](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<double,double>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

void *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(void *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = std::locale::use_facet(this, MEMORY[0x263F8C150]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  unint64_t v12 = a3[2];
  int v13 = *a3;
  if (v12 >= a3[1]) {
    unint64_t v12 = a3[1];
  }
  int64_t __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_29;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_29;
    }
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v56, 0, sizeof(v56));
  int v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  std::string::value_type v18 = p_p->__r_.__value_.__s.__data_[0];
  uint64_t v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    int v20 = v17 - 1;
    do
    {
      std::string::push_back(&v56, v18);
      if (p_p == (std::string *)v20)
      {
        std::string::value_type v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        uint64_t v21 = &p_p->__r_.__value_.__s.__data_[1];
        uint64_t v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          int v23 = *v22++;
          std::string::value_type v18 = v23;
          if (v23) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = v21 == v20;
          }
          uint64_t v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v56, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v56;
LABEL_29:
  unint64_t v25 = HIDWORD(a6);
  unsigned __int8 v26 = *(char **)(a2 + 16);
  std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  int64_t v28 = a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0);
  int v29 = a5 & 7;
  size_t v30 = (a5 >> 32) - v28;
  if (a5 >> 32 <= v28)
  {
    size_t v34 = 0;
    size_t v33 = 0;
    unsigned __int8 v31 = v25;
  }
  else
  {
    if (v29 == 4) {
      unsigned __int8 v31 = 48;
    }
    else {
      unsigned __int8 v31 = v25;
    }
    if (v29 == 4) {
      uint64_t v32 = 3;
    }
    else {
      uint64_t v32 = a5 & 7;
    }
    size_t v33 = 0;
    size_t v34 = (a5 >> 32) - v28;
    switch(v32)
    {
      case 1:
        break;
      case 2:
        size_t v33 = v30 >> 1;
        size_t v34 = v30 - (v30 >> 1);
        break;
      default:
        size_t v34 = 0;
        size_t v33 = v30;
        break;
    }
  }
  size_t v54 = v34;
  if (v29 == 4 && v13 != v26)
  {
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v26);
  }
  int v35 = v25 & 0xFFFFFF00 | v31;
  unint64_t v36 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v33, v35);
  std::locale v37 = v36;
  if (v29 != 4)
  {
    std::locale v38 = *(char **)(a2 + 16);
    if (v13 != v38)
    {
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v38);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v40 = &__p.__r_.__value_.__s.__data_[1];
      uint64_t v41 = &__p;
      goto LABEL_52;
    }
LABEL_56:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, __len);
    goto LABEL_57;
  }
  std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_56;
  }
  uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  uint64_t v40 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_52:
  int v42 = (char *)v41 + v39;
  char v43 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    int v44 = v42 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, *(v42 - 1));
    if (v42 == v40) {
      break;
    }
    v13 += *(v42 - 1);
    uint64_t v45 = *v37;
    uint64_t v46 = v37[2];
    void v37[2] = v46 + 1;
    *(unsigned char *)(v45 + v46) = v43;
    --v42;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      void v37[2] = 0;
      int v42 = v44;
    }
  }
LABEL_57:
  uint64_t v47 = a3[1];
  if (v47 != a3[3])
  {
    char v48 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    uint64_t v49 = *v37;
    uint64_t v50 = v37[2];
    void v37[2] = v50 + 1;
    *(unsigned char *)(v49 + v50) = v48;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      void v37[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v37, *(int *)(a2 + 4), 48);
    uint64_t v47 = a3[3];
  }
  v51 = a3[2];
  if (v51 != v47) {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v51, v47 - v51);
  }
  v52 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v37, v54, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v52;
}

void sub_25FA6509C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x261206500](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<double,double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    int v13 = result;
  }
  else {
    int v13 = v10;
  }
  if (v13 == v10) {
    int v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x261206500](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 6), 112, 4uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x261206500](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

void *std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  v47[128] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)&a4 >> 63;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      double v9 = a4;
    }
    else {
      double v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 1074;
    }
    else {
      int v10 = a3;
    }
    int v43 = v10;
    int v44 = 0;
    if (v10 < 1075)
    {
      size_t v11 = v10 + 316;
      unint64_t v45 = v11;
      if ((v10 + 316) < 0x401)
      {
        unint64_t v12 = v47;
        goto LABEL_13;
      }
    }
    else
    {
      int v43 = 1074;
      int v44 = v10 - 1074;
      size_t v11 = 1390;
      unint64_t v45 = 1390;
    }
    unint64_t v12 = operator new(v11);
LABEL_13:
    std::string __p = v12;
    std::__formatter::__format_buffer[abi:ne180100]<double,long double>((unsigned int *)&v43, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v39, v9);
    if ((a2 & 0x20) != 0)
    {
      int v13 = v40;
      if (v40 == *(char **)v42)
      {
        *(void *)int v42 = v40 + 1;
        *uint64_t v40 = 46;
        int v14 = v41;
        uint64_t v15 = (char *)(*(void *)v42 - 1);
        if (v41 != (char *)(*(void *)v42 - 1))
        {
          if (v41 + 1 == v15)
          {
            char v17 = *v41;
            *uint64_t v41 = *v15;
            char *v15 = v17;
          }
          else
          {
            char v16 = *(unsigned char *)(*(void *)v42 - 1);
            memmove(v41 + 1, v41, *(void *)v42 - 1 - (void)v41);
            char *v14 = v16;
          }
        }
        int v13 = v41;
        uint64_t v40 = v41++;
      }
      if ((BYTE1(a2) - 17) <= 1u)
      {
        if (a3 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a3;
        }
        if ((a3 & 0x80000000) != 0) {
          int v18 = 6;
        }
        if (v41 == *(char **)v42) {
          int v19 = v39 - v13;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 + v18;
        uint64_t v21 = &v41[~(unint64_t)v13];
        if ((uint64_t)v21 < v20) {
          v44 += v20 - v21;
        }
      }
    }
    if ((a2 & 0x40) != 0)
    {
      int v29 = *a1;
      std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v38);
      size_t v30 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v29, (uint64_t)&v43, &v39, &v38, a2, a3);
      std::locale::~locale(&v38);
    }
    else
    {
      uint64_t v22 = *(void *)v42;
      int v23 = (char *)__p;
      uint64_t v24 = *(void *)v42 - (void)__p;
      size_t v25 = v44;
      if (*(void *)v42 - (void)__p + v44 >= a2 >> 32)
      {
        if (!v44 || (unsigned __int8 v31 = v41, v41 == *(char **)v42))
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v42 - (void)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
        }
        else
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v41 - (unsigned char *)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v30, v31, v22 - (void)v31);
        }
      }
      else
      {
        unsigned __int8 v26 = *a1;
        if ((a2 & 7) == 4)
        {
          if (__p != v39)
          {
            std::locale v37 = v26;
            std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v37, (char *)__p);
            ++v23;
          }
          unsigned __int8 v27 = a2 & 0xF8 | 3;
          unsigned __int8 v28 = 48;
        }
        else
        {
          unsigned __int8 v28 = BYTE4(a3);
          unsigned __int8 v27 = a2;
        }
        unint64_t v32 = a2 & 0xFFFFFFFFFFFFFF00 | v27;
        unint64_t v33 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v28 << 32);
        if (v25) {
          size_t v34 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(uint64_t *)v42, v26, v32, v33, v24, v41, v25);
        }
        else {
          size_t v34 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(void *)v42 - (void)v23, v26, v32, v33, v24);
        }
        size_t v30 = v34;
      }
    }
    if (v45 >= 0x401) {
      operator delete(__p);
    }
    return v30;
  }
  unint64_t v36 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v36, a2, a3, a4 < 0.0, 0);
}

void sub_25FA6580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<double,long double>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, double a7@<D0>)
{
  double v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)double v9 = v10;
  double v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x25FA659F8);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x261206530](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x261206530](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    int v13 = result;
  }
  else {
    int v13 = v10;
  }
  if (v13 == v10) {
    int v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x261206530](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 6), 112, 4uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x261206530](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

unsigned __int8 *std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2)
{
  uint64_t result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x128u);
  unsigned int v4 = a1[1];
  if (v4 >= 2 && v4 != 19) {
    std::__throw_format_error[abi:ne180100]("The type option contains an invalid value for a string formatting argument");
  }
  return result;
}

uint64_t *std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, uint64_t **a3)
{
  unint64_t v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if (SHIDWORD(v5) > 0 || (v6 & 0x80000000) == 0)
  {
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    size_t v10 = strlen(a2);
    return std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v10, *a3, v8, v9);
  }
  else
  {
    uint64_t v11 = *a3;
    if (*a2)
    {
      do
      {
        int v14 = v11;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v14, a2);
      }
      while (*++a2);
    }
  }
  return v11;
}

void *std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x80000000) != 0)
  {
    return std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
  }
  else
  {
    int v9 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, a2, a5, 0);
    size_t v11 = v10 - (void)__src;
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, v11, a3, a4, a5, v9);
  }
}

unsigned __int8 *std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2)
{
  uint64_t result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x124u);
  int v4 = a1[1];
  if ((v4 - 8) >= 2 && v4 != 0) {
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a pointer");
  }
  return result;
}

void *std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  uint64_t v7 = 1536;
  if ((v5 & 0xFF00) == 0x900) {
    uint64_t v7 = 1792;
  }

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v5 & 0xFFFFFFFFFFFF00FFLL | v7 | 0x20, v6, 0);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x25FA660F0);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      uint64_t v7 = &v13;
      signed int v9 = 2;
      uint64_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      uint64_t v7 = &v13;
      signed int v9 = 2;
      uint64_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      uint64_t v7 = (uint64_t *)&v12[3];
      if (a1) {
        uint64_t v8 = "0";
      }
      else {
        uint64_t v8 = 0;
      }
      signed int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      uint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      uint64_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      uint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      uint64_t v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v12, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, signed int a9)
{
  signed int v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    char v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  char v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        uint64_t v18 = a8 + 1;
        do
        {
          *(unsigned char *)char v16 = v17;
          char v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  int v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      signed int v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    std::string::size_type v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  int v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    uint64_t v24 = (std::string::value_type *)&v45;
  }
  else {
    uint64_t v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    size_t v25 = (char *)&v45 + v47;
  }
  else {
    size_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    unsigned __int8 v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        uint64_t v24 = v28;
      }
      else
      {
        int v29 = v24 + 1;
        size_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          int v29 = v30;
        }
        while (!v32);
        uint64_t v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  size_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_25FA66430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_25FA664DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  size_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25FA665FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  unint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      unint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::unordered_map<E5RT::ComponentDataType,std::string>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__emplace_unique_key_args<E5RT::ComponentDataType,std::pair<E5RT::ComponentDataType const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_25FA66780(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__emplace_unique_key_args<E5RT::ComponentDataType,std::pair<E5RT::ComponentDataType const,std::string> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
      {
        unint64_t v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__construct_node_hash<std::pair<E5RT::ComponentDataType const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  char v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    void *v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  uint64_t result = (uint64_t *)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_25FA669A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__construct_node_hash<std::pair<E5RT::ComponentDataType const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  uint64_t v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA66A64(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    unsigned int v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::find<E5RT::ComponentDataType>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x261206400](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x261206410](v13);
  return a1;
}

void sub_25FA66D58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x261206410](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x25FA66D38);
}

void sub_25FA66DAC(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      BOOL v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_25FA66F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

BOOL cgm::token_generation_inference::ajax::ane::isExtendOp(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_step");
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3 != 0;
}

void sub_25FA67058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::isExtendFunction(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_step");
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_25FA670F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::doesFunctionComputeLogits(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_25FA67198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::doesOpComputeLogits(E5RT::ExecutionStreamOperation **a1)
{
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_25FA6721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::OperandDescriptor *a2)
{
  int8x8_t v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  return *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v2) + 8);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions_CT");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v8, InputPortRef);
  if (v7 < 0) {
    operator delete(__p);
  }
  unint64_t v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v8);
  uint64_t v4 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v3) + 8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v4;
}

void sub_25FA672DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  return cgm::token_generation_inference::ajax::ane::getContextLength(*a1, a2);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::OperandDescriptor *a2)
{
  int8x8_t v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  return *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v2) + 8);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_ids");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  uint64_t v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  uint64_t v5 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v4) + 8);
  if (v8 < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_25FA673A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  return cgm::token_generation_inference::ajax::ane::getQueryLength(*a1, a2);
}

BOOL cgm::token_generation_inference::ajax::ane::anyOpComputingLogits@<W0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    goto LABEL_11;
  }
  while (1)
  {
    BOOL result = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits((E5RT::ExecutionStreamOperation **)v2);
    if (result) {
      break;
    }
    v2 += 32;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == a1[1])
  {
LABEL_11:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "No ops computing logits were found on the model.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v10);
  }
  *a2 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  a2[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a2[2] = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  a2[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_25FA674C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::ane::vocabSizeFromExtendOps(uint64_t *a1)
{
  cgm::token_generation_inference::ajax::ane::anyOpComputingLogits(a1, &v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  uint64_t OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  if (v7 < 0) {
    operator delete(__p);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
  uint64_t v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  uint64_t v4 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v3) + 8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v4;
}

void sub_25FA67594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a16);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::ane::maxContextLengthFromExtendOps(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(v1 - 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 - 24);
  int64_t v12 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(v1 - 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
  uint64_t v14 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "state_keys_LHC");
  uint64_t v4 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  if (v10 < 0) {
    operator delete(__p);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  char v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  uint64_t v7 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v6) + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v7;
}

void sub_25FA67698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a16);
  _Unwind_Resume(a1);
}

unint64_t cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = v3 - *(void *)a2;
  if (v3 == *(void *)a2) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t result = 0;
  unint64_t v8 = v4 >> 3;
  if (v8 <= 1) {
    unint64_t v8 = 1;
  }
  while (1)
  {
    unint64_t v9 = result ? v2[result] + ~v2[result - 1] : *v2;
    if (a1 - v6 <= v9) {
      break;
    }
    v6 += v9;
    if (v8 == ++result) {
      return v8;
    }
  }
  return result;
}

void cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary(E5RT::ProgramLibrary **a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(*a1);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, a2);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v9 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v9 = 0;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  *a3 = v8;
  if (v8) {
    operator new();
  }
  a3[1] = 0;
  if (v10) {
    (*(void (**)())(*(void *)v10 + 8))();
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_25FA67874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary();
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::ane::filterFunctions(E5RT::ProgramLibrary **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  for (uint64_t i = *(long long **)(E5RT::ProgramLibrary::GetExportedFunctions(*a1) + 16); i; uint64_t i = *(long long **)i)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 48))(v8, (uint64_t *)i + 2, *((void *)i + 5)))
    {
      unint64_t v9 = *(void *)(a4 + 8);
      if (v9 >= *(void *)(a4 + 16))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, i + 1);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, i + 1);
        uint64_t v10 = v9 + 24;
      }
      *(void *)(a4 + 8) = v10;
    }
  }
  if (*(void *)(a2 + 64) != *(void *)(a2 + 56))
  {
    TGIE5ModelConfiguration::e5FunctionNames((TGIE5ModelConfiguration *)a2, &v21);
    uint64_t v11 = *(unsigned __int8 ***)a4;
    int64_t v12 = *(unsigned __int8 ***)(a4 + 8);
    if (*(unsigned __int8 ***)a4 == v12)
    {
LABEL_14:
      uint64_t v15 = v12;
    }
    else
    {
      uint64_t v13 = v22;
      while (1)
      {
        uint64_t v14 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v21, v13, v11);
        uint64_t v13 = v22;
        if (v14 == v22) {
          break;
        }
        v11 += 3;
        if (v11 == v12) {
          goto LABEL_14;
        }
      }
      uint64_t v15 = v12;
      if (v11 != v12)
      {
        char v18 = v11 + 3;
        uint64_t v15 = v11;
        while (v18 != v12)
        {
          uint64_t v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v21, v22, v18);
          if (v19 != v22)
          {
            if (*((char *)v15 + 23) < 0) {
              operator delete(*v15);
            }
            long long v20 = *(_OWORD *)v18;
            v15[2] = v18[2];
            *(_OWORD *)uint64_t v15 = v20;
            v15 += 3;
            *((unsigned char *)v18 + 23) = 0;
            *(unsigned char *)char v18 = 0;
          }
          v18 += 3;
        }
      }
    }
    v16.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a4 + 8);
    v17.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)v15;
    std::vector<std::string>::erase((std::vector<std::string> *)a4, v17, v16);
    int v23 = (void **)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

void sub_25FA67A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  unint64_t QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(*a1, a2);
  unint64_t ContextLength = cgm::token_generation_inference::ajax::ane::getContextLength(*a1, v5);
  unint64_t v8 = cgm::token_generation_inference::ajax::ane::getQueryLength(*(cgm::token_generation_inference::ajax::ane **)a2, v7);
  BOOL v10 = ContextLength < cgm::token_generation_inference::ajax::ane::getContextLength(*(cgm::token_generation_inference::ajax::ane **)a2, v9);
  if (QueryLength == v8) {
    return v10;
  }
  else {
    return QueryLength < v8;
  }
}

unint64_t cgm::token_generation_inference::ajax::ane::stepForContextLength(unint64_t this, unint64_t a2)
{
  return this / a2 * a2;
}

uint64_t cgm::token_generation_inference::ajax::ane::checkIOPorts(uint64_t a1, uint64_t a2)
{
  v21[3] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v13, "in_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v14, "in_relative_positions_CT");
  std::string::basic_string[abi:ne180100]<0>(v15, "in_new_token_ids");
  std::string::basic_string[abi:ne180100]<0>(v16, "in_step");
  std::string::basic_string[abi:ne180100]<0>(v17, "state_keys_LHC");
  std::string::basic_string[abi:ne180100]<0>(v18, "state_values_LHC");
  std::string::basic_string[abi:ne180100]<0>(v19, "embeddings");
  std::string::basic_string[abi:ne180100]<0>(v20, "out_logits");
  std::string::basic_string[abi:ne180100]<0>(v21, "placeholder_out_opt_logits");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v13, 9);
  for (uint64_t i = 0; i != -27; i -= 3)
  {
    if (SHIBYTE(v21[i + 2]) < 0) {
      operator delete((void *)v21[i]);
    }
  }
  v13[0] = a1;
  v13[1] = v12;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v11, v5);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v11);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v10, v6);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v10);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v9, v7);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
}

void sub_25FA67D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

unsigned __int8 *cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t **)result;
  v7[7] = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned __int8 *)(a2 + 16);
  while (1)
  {
    uint64_t v3 = *(unsigned __int8 **)v3;
    if (!v3) {
      break;
    }
    unint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v2[1], v3 + 16);
    if (!result)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::make_format_args[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>,std::string const,std::string const>((uint64_t *)v3 + 2, *v2, v7);
      memset(&v5, 0, sizeof(v5));
      v6[0] = 2;
      v6[1] = (uint64_t)v7;
      v6[2] = v7[4];
      std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v5, "Found unknown port named {} on function {}.", 43, v6);
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v5);
    }
  }
  return result;
}

void sub_25FA67F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::utils::getAneQoSForNSQoS(cgm::token_generation_inference::ajax::utils *this, NSQualityOfService a2)
{
  if ((uint64_t)this <= 16)
  {
    if (this != (cgm::token_generation_inference::ajax::utils *)-1)
    {
      if (this != (cgm::token_generation_inference::ajax::utils *)9) {
        goto LABEL_12;
      }
      return 7;
    }
    return 5;
  }
  if (this == (cgm::token_generation_inference::ajax::utils *)17) {
    return 5;
  }
  if (this != (cgm::token_generation_inference::ajax::utils *)33)
  {
    if (this == (cgm::token_generation_inference::ajax::utils *)25) {
      return 4;
    }
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v4, "Could not find corresponding ANE priority for the thread QoS");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v4);
  }
  return 3;
}

void sub_25FA68058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)a1);
  std::string::basic_string[abi:ne180100]<0>(v14, "load_embeddings");
  std::string v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v14);
  uint64_t v6 = v5;
  if (SBYTE7(v15) < 0)
  {
    operator delete(v14[0]);
    if (v6) {
      goto LABEL_3;
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  if (!v5) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t v7 = *(E5RT::ProgramLibrary **)a1;
  unint64_t v8 = *(atomic_ullong **)(a1 + 8);
  v19[0] = v7;
  v19[1] = (E5RT::ProgramLibrary *)v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "load_embeddings");
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  int v16 = 1065353216;
  cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary(v19, (unsigned __int8 *)__p, &v20);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v14);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
  unint64_t v9 = (E5RT::ExecutionStream *)cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(v20, 0);
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)__p, v9);
  BOOL v10 = v21;
  uint64_t v13 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "embeddings");
  uint64_t OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::IOPort::GetMemoryObject(a2, OutputPortRef);
  if (SBYTE7(v15) < 0) {
    operator delete(v14[0]);
  }
  int64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    (*(void (**)(void *))(*(void *)v12 + 8))(v12);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_25FA68240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  if (*(void *)(v24 - 40)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v24 - 40));
  }
  _Unwind_Resume(exception_object);
}

cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  v39[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_270BD1D90;
  *((void *)this + 5) = &unk_270BD1E10;
  if (*((char *)&a2[2].var1.var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, a2[2].var1.var0.var0.var0.var0.var1.var0, a2[2].var1.var0.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v4 = *(_OWORD *)a2[2].var1.var0.var0.var0.var0.var0.var0;
    *((void *)this + 8) = *((void *)&a2[2].var1.var0.var0.var0.var0.var1 + 2);
    *((_OWORD *)this + 3) = v4;
  }
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 225) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions(this, (uint64_t *)v27);
  cgm::token_generation_inference::ajax::utils::makeProgramLibrary((cgm::token_generation_inference::ajax::utils *)&a2->var1, (std::string *)LOBYTE(a2[2].var1.var0.var0.var1.var0[0]), buf);
  if (buf[0].__r_.__value_.__r.__words[0]) {
    operator new();
  }
  buf[0].__r_.__value_.__r.__words[0] = 0;
  std::string v5 = v27[0];
  v27[0] = 0;
  if (v5) {
    (*(void (**)(std::__fs::filesystem::path *))(v5->__pn_.__r_.__value_.__r.__words[0] + 8))(v5);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "in_embeddings");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((void *)&a2[1].var1.var0.var0.var0.var0.var1 + 2, (unsigned __int8 *)buf);
  uint64_t v7 = v6;
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf[0].__r_.__value_.__l.__data_);
    if (v7) {
      goto LABEL_10;
    }
  }
  else if (v6)
  {
LABEL_10:
    unint64_t v8 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_25FA51000, v8, OS_LOG_TYPE_DEFAULT, "Shared embedding table found in shared constants.", (uint8_t *)buf, 2u);
    }

    std::string::basic_string[abi:ne180100]<0>(buf, "in_embeddings");
    unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((void *)&a2[1].var1.var0.var0.var0.var0.var1 + 2, (unsigned __int8 *)buf);
    if (!v9) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v11 = *((void *)v9 + 5);
    uint64_t v10 = *((void *)v9 + 6);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    int64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
    *((void *)this + 22) = v11;
    *((void *)this + 23) = v10;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_25;
  }
  uint64_t v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v6);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_25FA51000, v13, OS_LOG_TYPE_DEFAULT, "Created new embedding table since none found in shared constants.", (uint8_t *)buf, 2u);
  }

  v35[0] = 0;
  v35[1] = 0;
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable((uint64_t)v35, (uint64_t *)buf);
  long long v14 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
  long long v15 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (buf[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
    }
  }
LABEL_25:
  v33[0] = 0;
  v33[1] = 0;
  v39[0] = &unk_270BD1F98;
  v39[3] = v39;
  cgm::token_generation_inference::ajax::ane::filterFunctions(v33, (uint64_t)a2, (uint64_t)v39, (uint64_t)&v34);
  std::__function::__value_func<BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__value_func[abi:ne180100](v39);
  v31[0] = 0;
  v31[1] = 0;
  v38[0] = &unk_270BD2028;
  v38[3] = v38;
  cgm::token_generation_inference::ajax::ane::filterFunctions(v31, (uint64_t)a2, (uint64_t)v38, (uint64_t)&v32);
  std::__function::__value_func<BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__value_func[abi:ne180100](v38);
  if (v32.__begin_ == v32.__end_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "No extend functions found, can't run this model.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, buf);
  }
  TGIE5ModelConfiguration::mutableWeightsSymbolToPath(a2, (unsigned __int8 **)v32.__begin_, (uint64_t)buf);
  if (*(char **)&a2[1].var0 == a2[1].var1.var0.var0.var0.var0.var1.var0)
  {
    uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(0);
    *(_OWORD *)uint64_t v27 = 0u;
    long long v28 = 0u;
    int v29 = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)v27, (unint64_t)(float)*(unint64_t *)(ExportedFunctions + 24));
    for (uint64_t i = *(uint64_t **)(ExportedFunctions + 16); i; uint64_t i = (uint64_t *)*i)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)i[5] + 72))(&v26);
      unsigned __int8 v36 = (long long *)(i + 2);
      char v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v27, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v36);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v18 + 40));
      *(std::string *)(v18 + 40) = v26;
      memset(&v26, 0, sizeof(v26));
      int v37 = &v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    }
    cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols((uint64_t)buf, (unsigned __int8 **)&v34, v27, (std::vector<std::string> *)&v26);
    std::vector<std::string>::__vdeallocate(&v34);
    std::vector<std::string> v34 = (std::vector<std::string>)v26;
    memset(&v26, 0, sizeof(v26));
    int v37 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols((uint64_t)buf, (unsigned __int8 **)&v32, v27, (std::vector<std::string> *)&v26);
    std::vector<std::string>::__vdeallocate(&v32);
    std::vector<std::string> v32 = (std::vector<std::string>)v26;
    memset(&v26, 0, sizeof(v26));
    int v37 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    if (v32.__begin_ == v32.__end_)
    {
      uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "No extend functions found for the provided adapter, can't run this model.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v24, 1, &v26);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v27);
  }
  v25[0] = 0;
  v25[1] = 0;
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prepareStreamOps((uint64_t *)this, v25, (uint64_t)buf, (uint64_t)&v34, (uint64_t)&v32);
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(this);
  *((void *)this + 10) = cgm::token_generation_inference::ajax::ane::vocabSizeFromExtendOps((uint64_t *)this + 19);
  std::vector<unsigned int>::size_type v19 = cgm::token_generation_inference::ajax::ane::maxContextLengthFromExtendOps((uint64_t)this + 152);
  *((void *)this + 9) = v19;
  std::vector<int>::reserve((std::vector<unsigned int> *)this + 8, v19);
  std::vector<unsigned long>::reserve((void **)this + 27, *((void *)this + 9));
  uint64_t v21 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel((uint64_t *)this + 10, (uint64_t *)this + 9, v21);
  }

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)buf);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return this;
}

void sub_25FA68A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&a20);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a26);
      a20 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      a20 = &a43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      v51 = *v47;
      if (*v47)
      {
        *(void *)(v43 + 224) = v51;
        operator delete(v51);
      }
      v52 = *a10;
      if (*a10)
      {
        *(void *)(v43 + 200) = v52;
        operator delete(v52);
      }
      v53 = *(std::__shared_weak_count **)(v43 + 184);
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      a20 = (char *)v45;
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      a20 = (char *)(v45 - 24);
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      if (*(char *)(v43 + 71) < 0) {
        operator delete(*v44);
      }
      cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v43);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prepareStreamOps(uint64_t *a1, E5RT::ProgramLibrary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  memset(&v70, 0, sizeof(v70));
  std::vector<std::string>::reserve(&v70, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)- 0x5555555555555555 * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v70, v70.__end_, *(std::string **)a4, *(long long **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v70, v70.__end_, *(std::string **)a5, *(long long **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3));
  uint64_t v67 = 0;
  v68 = 0;
  unint64_t v69 = 0;
  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::reserve(&v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3));
  std::vector<std::string>::pointer begin = v70.__begin_;
  for (std::vector<std::string>::pointer i = v70.__end_; begin != i; ++begin)
  {
    uint64_t ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(*a2);
    int64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)begin);
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v13 = (void **)*((void *)v12 + 5);
    long long v14 = (std::__shared_weak_count *)*((void *)v12 + 6);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    cgm::token_generation_inference::ajax::ane::checkIOPorts((uint64_t)begin, (uint64_t)v13);
    v64 = (std::__shared_weak_count *)v13;
    v65 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::PrecompiledComputeOpCreateOptions::Create();
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
    long long v15 = (void *)(*((uint64_t (**)(void **))*v13 + 4))(v13);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
    int v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v15, __p);
    if (!v16) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::vector<std::string>::const_iterator v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v16 + 5));
    uint64_t v18 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v17) + 8);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    std::vector<unsigned int>::size_type v19 = (void *)(*((uint64_t (**)(void **))*v13 + 4))(v13);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions_CT");
    long long v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v19, __p);
    if (!v20) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v20 + 5));
    uint64_t v22 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v21) + 8);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    BOOL doesFunctionComputeLogits = cgm::token_generation_inference::ajax::ane::doesFunctionComputeLogits((uint64_t)v13);
    BOOL v24 = doesFunctionComputeLogits;
    size_t v25 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)doesFunctionComputeLogits);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string __p = 134218496;
      *(void *)&__p[4] = v18;
      *(_WORD *)&__p[12] = 2048;
      *(void *)&__p[14] = v22;
      *(_WORD *)&__p[22] = 1024;
      LODWORD(v72) = v24;
      _os_log_debug_impl(&dword_25FA51000, v25, OS_LOG_TYPE_DEBUG, "Loading operation with (query_length, context_length): (%zu, %zu) and computesLogits: %i.", __p, 0x1Cu);
    }

    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v60) {
      operator new();
    }
    v60 = 0;
    std::string v26 = v68;
    if ((unint64_t)v68 >= v69)
    {
      uint64_t v28 = ((uint64_t)v68 - v67) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v69 - v67;
      if ((uint64_t)(v69 - v67) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      v73 = &v69;
      std::vector<std::string> v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)&v69, v31);
      char v33 = &v32[16 * v28];
      *(void *)std::string __p = v32;
      *(void *)&__p[8] = v33;
      v72 = &v32[16 * v34];
      *(void *)char v33 = 0;
      *((void *)v33 + 1) = 0;
      *(void *)&__p[16] = v33 + 16;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__swap_out_circular_buffer(&v67, __p);
      uint64_t v27 = v68;
      std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((void **)__p);
    }
    else
    {
      void *v68 = 0;
      v26[1] = 0;
      uint64_t v27 = v26 + 2;
    }
    v68 = v27;
    unint64_t v35 = v60;
    v60 = 0;
    if (v35) {
      (*(void (**)(uint64_t (*)(uint64_t *, uint64_t *)))(*(void *)v35 + 8))(v35);
    }
  }
  MEMORY[0x2612060E0](__p, &v67);
  v64 = 0;
  v65 = 0;
  uint64_t v66 = 0;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::reserve((uint64_t *)&v64, (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::back_insert_iterator<std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>>>((uint64_t)&v60, *(uint64_t **)__p, *(uint64_t **)&__p[8], (uint64_t *)&v64);
  unint64_t v36 = 126 - 2 * __clz(((char *)v65 - (char *)v64) >> 4);
  v60 = (uint64_t (*)(uint64_t *, uint64_t *))cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext;
  if (v65 == v64) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>((uint64_t *)v64, (uint64_t *)v65, &v60, v37, 1);
  std::string::size_type v39 = (uint64_t *)v65;
  if (v65 != v64)
  {
    do
    {
      uint64_t v40 = (cgm::token_generation_inference::ajax::ane *)*(v39 - 2);
      v39 -= 2;
      v62 = v40;
      unint64_t v41 = (std::__shared_weak_count *)v39[1];
      v63 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&v59, v38);
      v60 = v59;
      if (v59) {
        operator new();
      }
      v61 = 0;
      if (cgm::token_generation_inference::ajax::ane::isExtendOp(v62, v42))
      {
        uint64_t v43 = (cgm::token_generation_inference::ajax::ane **)a1[20];
        if ((unint64_t)v43 >= a1[21])
        {
          uint64_t v46 = std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(a1 + 19, &v62, &v60);
        }
        else
        {
          *uint64_t v43 = v62;
          int v44 = v63;
          v43[1] = (cgm::token_generation_inference::ajax::ane *)v63;
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v45 = v61;
          v43[2] = (cgm::token_generation_inference::ajax::ane *)v60;
          v43[3] = (cgm::token_generation_inference::ajax::ane *)v45;
          if (v45) {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v46 = (uint64_t)(v43 + 4);
        }
        a1[20] = v46;
      }
      else
      {
        unsigned __int8 v47 = (cgm::token_generation_inference::ajax::ane **)a1[17];
        if ((unint64_t)v47 >= a1[18])
        {
          uint64_t v50 = std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(a1 + 16, &v62, &v60);
        }
        else
        {
          *unsigned __int8 v47 = v62;
          char v48 = v63;
          v47[1] = (cgm::token_generation_inference::ajax::ane *)v63;
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v49 = v61;
          v47[2] = (cgm::token_generation_inference::ajax::ane *)v60;
          v47[3] = (cgm::token_generation_inference::ajax::ane *)v49;
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v50 = (uint64_t)(v47 + 4);
        }
        a1[17] = v50;
      }
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      unsigned __int8 v38 = (E5RT::ExecutionStream *)v63;
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
    }
    while (v39 != (uint64_t *)v64);
  }
  v51 = (long long *)a1[16];
  v52 = (long long *)a1[17];
  unint64_t v53 = 126 - 2 * __clz(((char *)v52 - (char *)v51) >> 5);
  if (v52 == v51) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = v53;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(v51, v52, &v60, v54, 1);
  v55 = (long long *)a1[19];
  std::string v56 = (long long *)a1[20];
  unint64_t v57 = 126 - 2 * __clz(((char *)v56 - (char *)v55) >> 5);
  if (v56 == v55) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = v57;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(v55, v56, &v60, v58, 1);
  v62 = (cgm::token_generation_inference::ajax::ane *)&v64;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v64 = (std::__shared_weak_count *)__p;
  std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  *(void *)std::string __p = &v67;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)std::string __p = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_25FA69360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  a16 = &a21;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a21 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  std::vector<std::string> v32 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::reserve((uint64_t *)&v32, ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 5)+ ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 5));
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>((uint64_t *)&v32, v33, *((uint64_t **)this + 19), *((void **)this + 20), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 5);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>((uint64_t *)&v32, v33, *((uint64_t **)this + 16), *((void **)this + 17), (uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 5);
  long long v2 = 0uLL;
  long long v29 = 0u;
  long long v30 = 0u;
  int v31 = 1065353216;
  uint64_t v28 = &v29;
  uint64_t v3 = v32;
  long long v4 = v33;
  if (v32 == v33)
  {
    unint64_t v8 = 0;
  }
  else
  {
    do
    {
      uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v27, InputPorts);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v28, (uint64_t)v27);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v27);
      uint64_t v6 = E5RT::ExecutionStreamOperation::GetInOutPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v26, v6);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v28, (uint64_t)v26);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v26);
      uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v25, OutputPorts);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v28, (uint64_t)v25);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v25);
      v3 += 4;
    }
    while (v3 != v4);
    unint64_t v8 = *((void *)&v30 + 1);
    long long v2 = 0uLL;
  }
  v23[0] = v2;
  v23[1] = v2;
  int v24 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)v23, (unint64_t)(float)v8);
  for (std::vector<std::string>::pointer i = (unsigned __int8 *)v30; i; std::vector<std::string>::pointer i = *(unsigned __int8 **)i)
  {
    __p[0] = i + 16;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v29, i + 16, (uint64_t)&std::piecewise_construct, (long long **)__p);
    E5RT::BufferObject::AllocMemory();
    __p[0] = i + 16;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v23, i + 16, (uint64_t)&std::piecewise_construct, (long long **)__p);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)v10 + 5, (uint64_t *)&v35);
    uint64_t v11 = v35;
    unint64_t v35 = 0;
    if (v11) {
      (*((void (**)(void **))*v11 + 1))(v11);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "in_embeddings");
  unint64_t v35 = __p;
  int64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v23, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v35);
  uint64_t v14 = *((void *)this + 22);
  uint64_t v13 = *((void *)this + 23);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)v12 + 6);
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  int v16 = v32;
  for (j = v33; v16 != j; v16 += 4)
  {
    uint64_t v18 = *v16;
    std::vector<unsigned int>::size_type v19 = (std::__shared_weak_count *)v16[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(v18, v23);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    E5RT::ExecutionStream::PreWireInUseAllocations(v16[2]);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v23);
  long long v20 = (void ***)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v29);
  *(void *)&long long v29 = &v32;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_25FA69818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a18);
  unint64_t v36 = (void ***)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v34 - 128);
  *(void *)(v34 - 128) = v34 - 88;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::__split_buffer<std::string>::pointer end = this->__end_;
    int64_t v12 = v7;
    if (end != this->__begin_)
    {
      int64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--int64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    int64_t v12 = v7;
    if (v11 != *a1)
    {
      int64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(cgm::token_generation_inference::ajax::AJAXE5MLModel *this)
{
  *(void *)this = &unk_270BD1E88;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x2612065E0](v2, 0x81C40B8603338);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void **std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer(v7);
  }
  return result;
}

void sub_25FA69B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer(v7);
  }
  return result;
}

void sub_25FA69BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::ajax::anonymous namespace'::compareStreamOps(uint64_t a1, void *a2)
{
  uint64_t v2 = *(atomic_ullong **)(a1 + 8);
  v7[0] = *(cgm::token_generation_inference::ajax::ane **)a1;
  v7[1] = (cgm::token_generation_inference::ajax::ane *)v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL Context = cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext(v7, (const E5RT::ExecutionStreamOperation *)v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  }
  return Context;
}

void sub_25FA69C64(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)result;
    do
    {
      uint64_t v4 = v2[39];
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        uint64_t v4 = *((void *)v2 + 3);
      }
      if (v4 != 13
        || (v5 >= 0 ? (uint64_t v6 = (uint64_t *)(v2 + 16)) : (uint64_t v6 = (uint64_t *)*((void *)v2 + 2)),
            (uint64_t v7 = *v6, v8 = *(uint64_t *)((char *)v6 + 5), v7 == 0x6465626D655F6E69)
          ? (BOOL v9 = v8 == 0x73676E6964646562)
          : (BOOL v9 = 0),
            !v9))
      {
        E5RT::IOPort::GetPortDescriptor((uint64_t *)&v14, *((E5RT::IOPort **)v2 + 5));
        uint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v14);
        unint64_t Size = E5RT::TensorDescriptor::GetSize(v10);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v12 = *v3;
        uint64_t v14 = (E5RT::OperandDescriptor *)(v2 + 16);
        unint64_t result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, v2 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v14);
        if (Size > *((void *)result + 5))
        {
          uint64_t v13 = *v3;
          uint64_t v14 = (E5RT::OperandDescriptor *)(v2 + 16);
          unint64_t result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v2 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v14);
          *((void *)result + 5) = Size;
        }
      }
      uint64_t v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return result;
}

void sub_25FA69DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::MemoryObject>::shared_ptr[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, void *a2)
{
  if (a2[1] != *a2)
  {
    unint64_t v4 = 0;
    while (*((void *)this + 11) || *((void *)this + 17) == *((void *)this + 16))
    {
      memset(v5, 0, sizeof(v5));
      v4 += cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(this, a2, v5, v4);
      long long v6 = (void **)v5;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      if (v4 == (uint64_t)(a2[1] - *a2) >> 2) {
        return;
      }
    }
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt((uint64_t)this, a2);
  }
}

void sub_25FA69EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt(uint64_t a1, void *a2)
{
  __p[3] = *(void **)MEMORY[0x263EF8340];
  if (*(void *)(a1 + 88)) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt();
  }
  if (*(unsigned char *)(a1 + 240)) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt();
  }
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v4 > *(void *)(a1 + 72))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    unint64_t v21 = *(void *)(a1 + 72);
    std::string::basic_string[abi:ne180100]<0>(&v22, "prompt");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v21, (uint64_t)&v22, (uint64_t)exception);
  }
  cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t *)(a1 + 128), 0, v4, &v22);
  unint64_t QueryLength = (cgm::token_generation_inference::common::logging::CGMTGILogger *)cgm::token_generation_inference::ajax::ane::getQueryLength(v22, v5);
  uint64_t v7 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(QueryLength);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = (uint64_t)(a2[1] - *a2) >> 2;
    LODWORD(__p[0]) = 134218240;
    *(void **)((char *)__p + 4) = QueryLength;
    WORD2(__p[1]) = 2048;
    *(void **)((char *)&__p[1] + 6) = (void *)v19;
    _os_log_debug_impl(&dword_25FA51000, v7, OS_LOG_TYPE_DEBUG, "Selected prompt op with query length: %zu for num tokens %zu\n", (uint8_t *)__p, 0x16u);
  }

  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions_CT");
  uint64_t v8 = (void *)_ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  unint64_t v10 = v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if ((uint64_t)(2 * v10) >= 1) {
    memset_pattern16(v8, &unk_25FB5F160, 2 * (((2 * v10) >> 1) - (2 * v10 != 1)) + 2);
  }
  unint64_t v11 = (uint64_t)(a2[1] - *a2) >> 2;
  memset(__p, 0, 24);
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions((short float *)v8, v10, 0, v11, (uint64_t)QueryLength, 0, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
  uint64_t v12 = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (char *)*a2;
  if (a2[1] != *a2)
  {
    unint64_t v14 = 0;
    do
    {
      unsigned int v15 = *(_DWORD *)&v13[4 * v14];
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab(a1, v15);
      *(_DWORD *)(v12 + 4 * v14++) = v15;
      uint64_t v13 = (char *)*a2;
    }
    while (v14 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(v24);
  *(void *)(a1 + 112) = 0;
  int v16 = (char *)*a2;
  std::vector<std::string>::const_iterator v17 = (char *)a2[1];
  uint64_t v18 = (uint64_t)&v17[-*a2] >> 2;
  *(void *)(a1 + 120) = v18;
  *(void *)(a1 + 104) = QueryLength;
  *(void *)(a1 + 88) += v18;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(a1 + 192), *(void *)(a1 + 200), v16, v17, v18);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_25FA6A1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

unint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, void *a2, void *a3, unint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 2;
  unint64_t v5 = v4 - a4;
  if (v4 < a4) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend();
  }
  if (*((unsigned char *)this + 240)) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend();
  }
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(this, v5, *a3 != a3[1]);
  unint64_t v9 = (const E5RT::ExecutionStreamOperation *)*((void *)this + 11);
  if ((unint64_t)v9 + ((uint64_t)(a2[1] - *a2) >> 2) - a4 > *((void *)this + 9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    unint64_t v49 = *((void *)this + 9);
    std::string::basic_string[abi:ne180100]<0>(&buf, "singleExtend");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v49, (uint64_t)&buf, (uint64_t)exception);
  }
  cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t *)this + 19, v9, v5, &v60);
  unint64_t v10 = v60;
  unint64_t QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(v60, v11);
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::alignContextForQueryLength(this, QueryLength, ((uint64_t)(a2[1] - *a2) >> 2) - a4);
  unint64_t ContextLength = (cgm::token_generation_inference::common::logging::CGMTGILogger *)cgm::token_generation_inference::ajax::ane::getContextLength(v10, v13);
  unsigned int v15 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(ContextLength);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    BOOL doesOpComputeLogits = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits(&v60);
    uint64_t v17 = *((void *)this + 11);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134219008;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)ContextLength;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = QueryLength;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    BOOL v65 = doesOpComputeLogits;
    __int16 v66 = 2048;
    uint64_t v67 = v17;
    __int16 v68 = 2048;
    unint64_t v69 = v5;
    _os_log_impl(&dword_25FA51000, v15, OS_LOG_TYPE_INFO, "Using extend_%zu_%zu computingLogits: %i for %zu context, %zu token(s)", (uint8_t *)&buf, 0x30u);
  }

  unint64_t v18 = *((void *)this + 11);
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_step");
  uint64_t v19 = (_DWORD *)cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  uint64_t v50 = a3;
  unint64_t v51 = v5;
  unint64_t v20 = v18 / QueryLength * QueryLength;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  *uint64_t v19 = v20;
  uint64_t v21 = *((void *)this + 11);
  unint64_t v22 = v21 - v20;
  if (v21 - v20 > (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2) {
    __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 290, "mContextTokens.size() >= numContextTokensNeeded");
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_new_token_ids");
  uint64_t v52 = QueryLength;
  uint64_t v23 = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v21 != v20)
  {
    uint64_t v24 = 0;
    if (v22 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v21 - v20;
    }
    std::string v26 = (unsigned int *)v23;
    do
    {
      if (*(_DWORD *)(*((void *)this + 24) + 4 * (v24 + v20)) == -1) {
        unsigned int v27 = 0;
      }
      else {
        unsigned int v27 = *(_DWORD *)(*((void *)this + 24) + 4 * (v24 + v20));
      }
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab((uint64_t)this, v27);
      *v26++ = v27;
      ++v24;
      --v25;
    }
    while (v25);
  }
  unint64_t v28 = v52 - v22;
  if (v52 != v22)
  {
    unint64_t v29 = 0;
    if (v28 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v52 - v22;
    }
    do
    {
      if (v29 >= ((uint64_t)(a2[1] - *a2) >> 2) - a4) {
        break;
      }
      unsigned int v31 = *(_DWORD *)(*a2 + 4 * a4 + 4 * v29);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab((uint64_t)this, v31);
      *(_DWORD *)(v23 + 4 * (v29 + v22)) = v31;
      ++v29;
    }
    while (v30 != v29);
  }
  if (v28 >= v51) {
    unint64_t v32 = v51;
  }
  else {
    unint64_t v32 = v52 - v22;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_relative_positions_CT");
  v59[0] = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v59[1] = v33;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = (short float *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v59, 0, *((void *)this + 9) * v52);
  unint64_t v36 = v34;
  unint64_t v37 = v35;
  if ((uint64_t)(2 * v35) >= 1) {
    memset_pattern16(v34, &unk_25FB5F160, 2 * (((2 * v35) >> 1) - (2 * v35 != 1)) + 2);
  }
  cgm::token_generation_inference::ajax::utils::setRelativePositions(v36, v37, v20, v50, v22, v32, v52, (void *)this + 27);
  unsigned __int8 v38 = (const std::string::value_type **)((char *)this + 48);
  if (*((char *)this + 71) < 0)
  {
    std::string::size_type v39 = *((void *)this + 7);
    if (!v39) {
      goto LABEL_46;
    }
    std::string::__init_copy_ctor_external(&v58, *v38, v39);
  }
  else
  {
    if (!*((unsigned char *)this + 71)) {
      goto LABEL_46;
    }
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v38;
    v58.__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
  std::to_string(&v55, *((void *)this + 12));
  uint64_t v40 = std::string::insert(&v55, 0, "Inference_", 0xAuLL);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  int v42 = std::string::append(&buf, "_", 1uLL);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  std::string::size_type v57 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  E5RT::ExecutionStreamOperation::SerializeInferenceFrameData();
  if (SHIBYTE(v57) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
LABEL_46:
  qos_class_t v44 = qos_class_self();
  uint64_t v54 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT_Private::SetQualityOfServiceForStream();
  uint64_t v45 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)v54;
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v46 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(v44, v46);
  }

  E5RT::ExecutionStream::ExecuteStreamSync(v62);
  *((void *)this + 14) = v22;
  *((void *)this + 15) = v32 + v22;
  *((void *)this + 13) = v52;
  *((void *)this + 11) += v32;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)this + 8, *((void *)this + 25), (char *)(*a2 + 4 * a4), (char *)(*a2 + 4 * a4 + 4 * v32), v32);
  ++*((void *)this + 12);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  return v32;
}

void sub_25FA6A850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a40);
  _Unwind_Resume(a1);
}

unint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *a1, void *a2, void *a3)
{
  if (cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(a3))
  {
    long long v6 = **(uint64_t (***)(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *, void *))a1;
    return v6(a1, a2);
  }
  else
  {
    unint64_t result = cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(a1, a2, a3, 0);
    if (result != (uint64_t)(a2[1] - *a2) >> 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v9, "Model query length exceeded for tree decoding.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v9);
    }
  }
  return result;
}

void sub_25FA6AA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t non-virtual thunk to'cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(uint64_t a1, void *a2, void *a3)
{
  return cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward((cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *)(a1 - 40), a2, a3);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this;
  v8[7] = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(this + 80) <= (signed int)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    v8[0] = a2;
    v8[1] = 0;
    uint64_t v5 = *(void *)(v2 + 80);
    v8[3] = 0;
    uint64_t v8[4] = 227;
    v8[2] = v5;
    memset(&v6, 0, sizeof(v6));
    v7[0] = 2;
    v7[1] = (uint64_t)v8;
    v7[2] = 227;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v6, "Input token {} is not in bounds [0, {})", 39, v7);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 4, &v6);
  }
  return this;
}

void sub_25FA6ABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, unint64_t a2, char a3)
{
  if (*((void *)this + 27) != *((void *)this + 28))
  {
    unint64_t v22 = this;
    if ((a3 & 1) != 0 || *((void *)this + 9) - *((void *)this + 11) < a2)
    {
      unint64_t v4 = *(std::__shared_weak_count **)(*((void *)this + 19) + 8);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "state_keys_LHC");
      uint64_t v5 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
      if (v21 < 0) {
        operator delete(__p);
      }
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v5);
      E5RT::IOPort::GetMemoryObject((uint64_t *)&__p, v5);
      uint64_t v7 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)__p);
      uint64_t DataSpan = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::BufferObject::GetDataSpan(v7);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()((uint64_t *)&v22, PortDescriptorRef, DataSpan, v9);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "state_values_LHC");
      unint64_t v10 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
      if (v21 < 0) {
        operator delete(__p);
      }
      unint64_t v11 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v10);
      E5RT::IOPort::GetMemoryObject((uint64_t *)&__p, v10);
      uint64_t v12 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)__p);
      uint64_t v13 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::BufferObject::GetDataSpan(v12);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()((uint64_t *)&v22, v11, v13, v14);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      uint64_t v15 = *((void *)this + 27);
      *((void *)this + 11) -= (*((void *)this + 28) - v15) >> 3;
      *((void *)this + 28) = v15;
      int v16 = (_DWORD *)*((void *)this + 24);
      uint64_t v17 = (_DWORD *)*((void *)this + 25);
      LODWORD(__p) = -1;
      unint64_t v18 = std::remove[abi:ne180100]<std::__wrap_iter<int *>,int>(v16, v17, &__p);
      if (*((_DWORD **)this + 25) != v18) {
        *((void *)this + 25) = v18;
      }
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
  }
}

void sub_25FA6ADC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>(uint64_t *a1@<X0>, const E5RT::ExecutionStreamOperation *a2@<X1>, unint64_t a3@<X2>, cgm::token_generation_inference::ajax::ane **a4@<X8>)
{
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v4 = *a1;
  uint64_t v28 = a1[1];
  if (*a1 == v28) {
    goto LABEL_48;
  }
  unint64_t v22 = 0;
  std::string::size_type v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  unint64_t v27 = -1;
  while (1)
  {
    uint64_t v7 = *(cgm::token_generation_inference::ajax::ane **)v4;
    v29.__r_.__value_.__r.__words[0] = *(void *)v4;
    uint64_t v8 = *(std::__shared_weak_count **)(v4 + 8);
    v29.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v9 = *(void *)(v4 + 16);
    v29.__r_.__value_.__r.__words[2] = v9;
    unint64_t v10 = *(std::__shared_weak_count **)(v4 + 24);
    uint64_t v30 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(v7, a2);
    unint64_t ContextLength = cgm::token_generation_inference::ajax::ane::getContextLength(v7, v12);
    BOOL doesOpComputeLogits = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits((E5RT::ExecutionStreamOperation **)&v29);
    unint64_t v15 = (unint64_t)a2 % QueryLength;
    if (QueryLength >= a3) {
      unint64_t v16 = a3;
    }
    else {
      unint64_t v16 = QueryLength;
    }
    if (v15 + v16 <= QueryLength) {
      unint64_t v17 = 0;
    }
    else {
      unint64_t v17 = QueryLength;
    }
    if ((unint64_t)a2 + QueryLength - v15 + v17 > ContextLength) {
      goto LABEL_34;
    }
    if (QueryLength < a3)
    {
      BOOL v18 = QueryLength == v26;
      BOOL v19 = ContextLength < v27 && QueryLength == v26;
      if (ContextLength != v27) {
        BOOL v18 = 0;
      }
      if (QueryLength > v26 || v19 || v18 && !doesOpComputeLogits)
      {
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v31 = v7;
        *((void *)&v31 + 1) = v8;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v32 = v9;
        *((void *)&v32 + 1) = v10;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        unint64_t v22 = v7;
        std::string::size_type v23 = v9;
        uint64_t v24 = v8;
        uint64_t v25 = v10;
        unint64_t v26 = QueryLength;
        unint64_t v27 = ContextLength;
      }
      goto LABEL_34;
    }
    if (doesOpComputeLogits) {
      break;
    }
LABEL_34:
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v4 += 32;
    if (v4 == v28)
    {
      if (v27 != -1)
      {
        *a4 = v22;
        a4[1] = (cgm::token_generation_inference::ajax::ane *)v24;
        a4[2] = (cgm::token_generation_inference::ajax::ane *)v23;
        a4[3] = (cgm::token_generation_inference::ajax::ane *)v25;
        return;
      }
LABEL_48:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v29, "Could not find op to run next query");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v29);
    }
  }
  *a4 = v7;
  a4[1] = (cgm::token_generation_inference::ajax::ane *)v8;
  a4[2] = (cgm::token_generation_inference::ajax::ane *)v9;
  a4[3] = (cgm::token_generation_inference::ajax::ane *)v10;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_25FA6B0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::alignContextForQueryLength(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 11) % a2;
  unint64_t v4 = a2 - v3;
  if (v3) {
    BOOL v5 = v4 >= a3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void **)((char *)this + 216);
    std::string::size_type v9 = (char *)this + 232;
    unint64_t v10 = (void **)((char *)this + 192);
    unint64_t v11 = (char *)this + 208;
    if (v4 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a2 - v3;
    }
    do
    {
      uint64_t v13 = *((void *)this + 11);
      *((void *)this + 11) = v13 + 1;
      unint64_t v15 = (char *)*((void *)this + 28);
      unint64_t v14 = *((void *)this + 29);
      if ((unint64_t)v15 >= v14)
      {
        unint64_t v17 = (char *)*v8;
        uint64_t v18 = (v15 - (unsigned char *)*v8) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v9, v21);
          unint64_t v17 = (char *)*((void *)this + 27);
          unint64_t v15 = (char *)*((void *)this + 28);
        }
        else
        {
          unint64_t v22 = 0;
        }
        std::string::size_type v23 = &v22[8 * v18];
        *(void *)std::string::size_type v23 = v13;
        unint64_t v16 = v23 + 8;
        while (v15 != v17)
        {
          uint64_t v24 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v23 - 1) = v24;
          v23 -= 8;
        }
        *((void *)this + 27) = v23;
        *((void *)this + 28) = v16;
        *((void *)this + 29) = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)unint64_t v15 = v13;
        unint64_t v16 = v15 + 8;
      }
      *((void *)this + 28) = v16;
      unint64_t v26 = (char *)*((void *)this + 25);
      unint64_t v25 = *((void *)this + 26);
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v28 = (char *)*v10;
        uint64_t v29 = (v26 - (unsigned char *)*v10) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v11, v32);
          uint64_t v28 = (char *)*((void *)this + 24);
          unint64_t v26 = (char *)*((void *)this + 25);
        }
        else
        {
          uint64_t v33 = 0;
        }
        uint64_t v34 = &v33[4 * v29];
        *(_DWORD *)uint64_t v34 = -1;
        unint64_t v27 = v34 + 4;
        while (v26 != v28)
        {
          int v35 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *((void *)this + 24) = v34;
        *((void *)this + 25) = v27;
        *((void *)this + 26) = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v26 = -1;
        unint64_t v27 = v26 + 4;
      }
      *((void *)this + 25) = v27;
      ++v7;
    }
    while (v7 != v12);
  }
}

uint64_t cgm::token_generation_inference::ajax::utils::inputSpan<int>()
{
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  uint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  uint64_t result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 4) {
    return 0;
  }
  return result;
}

uint64_t _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE()
{
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  uint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  uint64_t result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 2) {
    return 0;
  }
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()(uint64_t *a1, E5RT::OperandDescriptor *this, cgm::token_generation_inference::common::logging::CGMTGILogger *a3, unint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  E5RT::TensorDescriptor::GetTensorDataType(v19, v8);
  std::string::size_type v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  uint64_t TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(v9);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType *)v19);
  if (TensorShape[1] - *TensorShape != 40)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v18, "Unexpected KV cache shape.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v18);
  }
  unsigned int v12 = NumComponents;
  uint64_t v13 = *(void *)(*TensorShape + 16) * *(void *)*TensorShape;
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v19) == 4
    && E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v19) == 2)
  {
    if (a4 >= 2) {
      unint64_t v14 = a3;
    }
    else {
      unint64_t v14 = 0;
    }
    cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(v14, a4 >> 1, (void *)(v7 + 216), *(void *)(v7 + 88), *(void **)(v7 + 72), v12, v13);
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v19) != 1
      || E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v19) != 1)
    {
      unint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "Unexpected KV cache dtype.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v16, 1, &v18);
    }
    if (a4) {
      unint64_t v15 = a3;
    }
    else {
      unint64_t v15 = 0;
    }
    cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(v15, a4, (void *)(v7 + 216), *(void *)(v7 + 88), *(void **)(v7 + 72), v12, v13);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v19);
}

void sub_25FA6B550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

_DWORD *std::remove[abi:ne180100]<std::__wrap_iter<int *>,int>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (std::vector<std::string>::pointer i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getLastForwardLogits(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 14);
  uint64_t v4 = *((void *)this + 15);
  cgm::token_generation_inference::ajax::ane::anyOpComputingLogits((uint64_t *)this + 19, &v14);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v13[0] = _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v13[1] = v6;
  if (v12 < 0) {
    operator delete(__p);
  }
  uint64_t v7 = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(v13, *((void *)this + 14));
  *a2 = v4 - v5;
  a2[1] = v7;
  uint64_t v8 = *((void *)this + 13);
  a2[2] = v9;
  a2[3] = v8;
  uint64_t v10 = *((void *)this + 10);
  a2[4] = 1;
  a2[5] = v10;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_25FA6B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE()
{
  uint64_t OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(OutputPortRef);
  uint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  uint64_t result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 2) {
    return 0;
  }
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset(std::vector<int> *this, unint64_t a2)
{
  if (this[3].__end_cap_.__value_ < (int *)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v7 = this;
    uint64_t v8 = exception;
    unint64_t begin = (unint64_t)v7[3].__begin_;
    std::string::basic_string[abi:ne180100]<0>(v10, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(begin, (uint64_t)v10, (uint64_t)v8);
  }
  unint64_t v4 = cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(a2, (uint64_t)&this[9]);
  if (v4 > ((char *)this[9].__end_ - (char *)this[9].__begin_) >> 3) {
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset();
  }
  unint64_t v5 = v4;
  std::vector<unsigned long>::resize((uint64_t)&this[9], v4);
  this[3].__end_cap_.__value_ = (int *)(v5 + a2);

  std::vector<int>::resize(this + 8, v5 + a2);
}

void sub_25FA6B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeSteps(void *a1, uint64_t a2)
{
  std::string v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v3 = v19;
  if (v19 != v18)
  {
    unint64_t v4 = 0;
    unint64_t v5 = "mContextTokens[shiftedStep] != -1";
    unint64_t v3 = v18;
    while (1)
    {
      unint64_t v6 = v3[v4] - v4;
      unint64_t v7 = v6 + cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(v6 + 1, (uint64_t)(a1 + 27));
      unint64_t v17 = v7;
      uint64_t v8 = a1[24];
      if (*(_DWORD *)(v8 + 4 * v7) == -1) {
        break;
      }
      if (v7 >= (a1[25] - v8) >> 2)
      {
        int v16 = 512;
        unint64_t v5 = "shiftedStep < mContextTokens.size()";
LABEL_17:
        __assert_rtn("purgeSteps", "ane_ajax_e5ml_model.mm", v16, v5);
      }
      *(_DWORD *)(v8 + 4 * v7) = -1;
      uint64_t v9 = (char *)a1[27];
      uint64_t v10 = a1[28] - (void)v9;
      if (v10)
      {
        unint64_t v11 = v10 >> 3;
        do
        {
          unint64_t v12 = v11 >> 1;
          uint64_t v13 = (unint64_t *)&v9[8 * (v11 >> 1)];
          unint64_t v15 = *v13;
          uint64_t v14 = (char *)(v13 + 1);
          v11 += ~(v11 >> 1);
          if (v7 < v15) {
            unint64_t v11 = v12;
          }
          else {
            uint64_t v9 = v14;
          }
        }
        while (v11);
      }
      std::vector<unsigned long>::insert((uint64_t)(a1 + 27), v9, (char *)&v17);
      ++v4;
      unint64_t v3 = v18;
      if (v4 >= v19 - v18) {
        goto LABEL_12;
      }
    }
    int v16 = 511;
    goto LABEL_17;
  }
LABEL_12:
  if (v3)
  {
    unint64_t v19 = v3;
    operator delete(v3);
  }
}

void sub_25FA6BA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    unint64_t v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        std::string::size_type v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        unint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    unint64_t v4 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_25FA6BC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeSteps(uint64_t a1, uint64_t a2)
{
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((void *)this + 11);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((void *)this + 9);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((void *)this + 10);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeUnusedKeyValueCache()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unsupported for now");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25FA6BCF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::utils ***this)
{
  std::vector<int>::size_type v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 0;
    _os_log_impl(&dword_25FA51000, v2, OS_LOG_TYPE_DEFAULT, "ANE model moving to dynamic state. Unwiring and deallocating IO buffers", (uint8_t *)v12, 2u);
  }

  uint64_t result = ((uint64_t (*)(cgm::token_generation_inference::ajax::utils ***, void))(*this)[1])(this, 0);
  unint64_t v4 = this[19];
  unint64_t v5 = this[20];
  while (v4 != v5)
  {
    E5RT::ExecutionStream::ResetStream(v4[2]);
    unint64_t v6 = *v4;
    v4 += 4;
    uint64_t result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(v6, v7);
  }
  uint64_t v8 = this[16];
  uint64_t v9 = this[17];
  while (v8 != v9)
  {
    E5RT::ExecutionStream::ResetStream(v8[2]);
    uint64_t v10 = *v8;
    v8 += 4;
    uint64_t result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(v10, v11);
  }
  *((unsigned char *)this + 240) = 1;
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::moveToFullyLoadedState(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  std::vector<int>::size_type v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl(&dword_25FA51000, v2, OS_LOG_TYPE_DEFAULT, "ANE model moving to fully loaded state from dynamic state. Allocating and wiring new IO buffers", v3, 2u);
  }

  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(this);
  *((unsigned char *)this + 240) = 0;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::clearAllState(E5RT::ExecutionStreamOperation ***this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  unint64_t v5 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v4);
  unint64_t v6 = v5;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_signpost_emit_with_name_impl(&dword_25FA51000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v3, "TGI_ANE_Clear_State", "", v10, 2u);
  }

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN3cgm26token_generation_inference4ajax16ANEAJAXE5MLModel13clearAllStateEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = v3;
  unint64_t v7 = (void (**)(void))_Block_copy(aBlock);
  ((void (*)(E5RT::ExecutionStreamOperation ***, void))(*this)[1])(this, 0);
  uint64_t v8 = this[19];
  if (this[20] == v8) {
    __assert_rtn("clearAllState", "ane_ajax_e5ml_model.mm", 566, "mExtendStreamOps.size() > 0 && \"Expected ANE model to always have at least 1 extend op.\"");
  }
  uint64_t v9 = *v8;
  std::string::basic_string[abi:ne180100]<0>(v12, "in_embeddings");
  std::unordered_set<std::string>::unordered_set((uint64_t)v10, (unsigned __int8 *)v12, 1);
  cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(v9, v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  v7[2](v7);
}

void sub_25FA6C040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN3cgm26token_generation_inference4ajax16ANEAJAXE5MLModel13clearAllStateEv_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  std::vector<int>::size_type v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  os_signpost_id_t v3 = v2;
  os_signpost_id_t v4 = *((void *)a1 + 4);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25FA51000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TGI_ANE_Clear_State", "", v5, 2u);
  }
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::~ANEAJAXE5MLModel(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::~ANEAJAXE5MLModel(this);

  JUMPOUT(0x2612065E0);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_270BD1D90;
  *((void *)this + 5) = &unk_270BD1E10;
  std::vector<int>::size_type v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  os_signpost_id_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (void **)((char *)this + 152);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 128);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (long long *)__last.__i_, (long long *)this->__end_, (uint64_t)__first.__i_);
    unint64_t v6 = v5;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)unint64_t v5 = 0;
      unint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::make_format_args[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>,std::string const,std::string const>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *((unsigned __int8 *)result + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = result[1];
  }
  if (v4 >= 0) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = (uint64_t *)*result;
  }
  *a3 = v5;
  a3[1] = v3;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  a3[3] = v6;
  a3[4] = 429;
  a3[2] = v8;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::AJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::AJAXE5MLModel *this)
{
  return (*(uint64_t (**)(cgm::token_generation_inference::ajax::AJAXE5MLModel *, void))(*(void *)this + 8))(this, 0);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  std::vector<int>::size_type v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::__destroy_at[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair,0>(uint64_t a1)
{
  std::vector<int>::size_type v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  unint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperation>>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperation>>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  unint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperation>>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperation>>,std::reverse_iterator<std::shared_ptr<E5RT::ExecutionStreamOperation>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>,std::reverse_iterator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::back_insert_iterator<std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::shared_ptr<E5RT::ExecutionStreamOperation>::shared_ptr[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((uint64_t *)&v19, v5);
      uint64_t v8 = (_OWORD *)a4[1];
      unint64_t v7 = a4[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v9 = ((uint64_t)v8 - *a4) >> 4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - *a4;
        if (v11 >> 3 > v10) {
          unint64_t v10 = v11 >> 3;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        v20[4] = a4 + 2;
        char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)(a4 + 2), v12);
        long long v14 = &v13[16 * v9];
        v20[0] = v13;
        v20[1] = v14;
        void v20[3] = &v13[16 * v15];
        *(_OWORD *)long long v14 = v19;
        long long v19 = 0uLL;
        void v20[2] = v14 + 16;
        std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__swap_out_circular_buffer(a4, v20);
        uint64_t v16 = a4[1];
        std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer(v20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)&v19 + 1);
        a4[1] = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
      else
      {
        _OWORD *v8 = v19;
        a4[1] = (uint64_t)(v8 + 1);
      }
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_25FA6C990(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((void **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v26 = *a3;
          unint64_t v27 = (std::__shared_weak_count *)*(a2 - 1);
          uint64_t v38 = *(a2 - 2);
          std::string::size_type v39 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = (std::__shared_weak_count *)v11[1];
          uint64_t v36 = *v11;
          unint64_t v37 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v29 = v26(&v38, &v36);
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          if (v29)
          {
            uint64_t v30 = *v11;
            uint64_t *v11 = *(a2 - 2);
            *(a2 - 2) = v30;
            uint64_t v31 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, a2, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11 + 2, v17 - 2, a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_21;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_21;
      }
    }
    long long v19 = *a3;
    uint64_t v20 = (std::__shared_weak_count *)*(v11 - 1);
    uint64_t v34 = *(v11 - 2);
    int v35 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v21 = (std::__shared_weak_count *)v11[1];
    uint64_t v32 = *v11;
    uint64_t v33 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v22 = v19(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if ((v22 & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(v11, a2, a3);
      goto LABEL_26;
    }
LABEL_21:
    std::string::size_type v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(v11, a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_24;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, v23, a3);
    uint64_t v11 = v23 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v23 + 2, a2, a3))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_24:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>(a1, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 2;
LABEL_26:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v11, a2, a2, a3);
  }
}

void sub_25FA6CD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 2;
  if (a1 + 2 == a2) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = v5;
    unint64_t v10 = *a3;
    uint64_t v11 = (std::__shared_weak_count *)v9[3];
    uint64_t v31 = v9[2];
    uint64_t v32 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v9[1];
    uint64_t v29 = *v9;
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = v10(&v31, &v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (!v13) {
      goto LABEL_32;
    }
    uint64_t v14 = *v8;
    unint64_t v15 = (std::__shared_weak_count *)v9[3];
    uint64_t v16 = v7;
    uint64_t *v8 = 0;
    v8[1] = 0;
    while (1)
    {
      uint64_t v17 = (char *)a1 + v16;
      long long v18 = *(_OWORD *)((char *)a1 + v16);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
      long long v19 = *(std::__shared_weak_count **)((char *)a1 + v16 + 24);
      *((_OWORD *)v17 + 1) = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (!v16)
      {
        std::string::size_type v23 = a1;
        goto LABEL_30;
      }
      uint64_t v20 = *a3;
      uint64_t v27 = v14;
      uint64_t v28 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v21 = *(std::__shared_weak_count **)((char *)a1 + v16 - 8);
      uint64_t v25 = *(uint64_t *)((char *)a1 + v16 - 16);
      unint64_t v26 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v22 = v20(&v27, &v25);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (!v28) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if ((v22 & 1) == 0) {
        goto LABEL_29;
      }
LABEL_27:
      v16 -= 16;
    }
    if (v22) {
      goto LABEL_27;
    }
LABEL_29:
    std::string::size_type v23 = (uint64_t *)((char *)a1 + v16);
LABEL_30:
    char v24 = (std::__shared_weak_count *)v23[1];
    uint64_t *v23 = v14;
    v23[1] = (uint64_t)v15;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
LABEL_32:
    char v5 = v8 + 2;
    v7 += 16;
  }
  while (v8 + 2 != a2);
}

void sub_25FA6CF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = a1 + 2;
    if (a1 + 2 != a2)
    {
      uint64_t v7 = (std::__shared_weak_count **)(a1 + 3);
      do
      {
        uint64_t v8 = v4;
        uint64_t v4 = v5;
        uint64_t v9 = *a3;
        unint64_t v10 = (std::__shared_weak_count *)v8[3];
        uint64_t v28 = v8[2];
        uint64_t v29 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (std::__shared_weak_count *)v8[1];
        uint64_t v26 = *v8;
        uint64_t v27 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v12 = v9(&v28, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v12)
        {
          int v13 = (std::__shared_weak_count *)*v4;
          uint64_t v14 = (std::__shared_weak_count *)v8[3];
          unint64_t v15 = v7;
          uint64_t *v4 = 0;
          v4[1] = 0;
          do
          {
            long long v16 = *(_OWORD *)(v15 - 3);
            *(v15 - 3) = 0;
            *(v15 - 2) = 0;
            uint64_t v17 = *v15;
            *(_OWORD *)(v15 - 1) = v16;
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            long long v18 = *a3;
            char v24 = v13;
            uint64_t v25 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v19 = *(v15 - 4);
            uint64_t v22 = (uint64_t)*(v15 - 5);
            std::string::size_type v23 = v19;
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v20 = v18((uint64_t *)&v24, &v22);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            v15 -= 2;
          }
          while ((v20 & 1) != 0);
          unint64_t v21 = *v15;
          *(v15 - 1) = v13;
          std::__shared_weak_count *v15 = v14;
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        char v5 = v4 + 2;
        v7 += 2;
      }
      while (v4 + 2 != a2);
    }
  }
}

void sub_25FA6D0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(void *a1, void *a2, void *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t v8 = *a4;
  unint64_t v10 = (std::__shared_weak_count **)(a2 + 1);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v55 = *a2;
  std::string v56 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count **)(a1 + 1);
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v53 = *a1;
  uint64_t v54 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = v8(&v55, &v53);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v14 = *a4;
  unint64_t v15 = (std::__shared_weak_count **)(a3 + 1);
  if (v13)
  {
    long long v16 = *v15;
    uint64_t v43 = *a3;
    qos_class_t v44 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (std::__shared_weak_count *)a2[1];
    uint64_t v41 = *a2;
    int v42 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = v14(&v43, &v41);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    uint64_t v19 = *a1;
    if (v18)
    {
      *a1 = *a3;
      *a3 = v19;
      uint64_t result = 1;
LABEL_49:
      unint64_t v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_50;
    }
    *a1 = *a2;
    *a2 = v19;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v31;
    uint64_t v32 = *a4;
    uint64_t v33 = (std::__shared_weak_count *)a3[1];
    uint64_t v39 = *a3;
    uint64_t v40 = v33;
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v31 = *v10;
    }
    uint64_t v37 = *a2;
    uint64_t v38 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v34 = v32(&v39, &v37);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    if (v34)
    {
      uint64_t v35 = *a2;
      *a2 = *a3;
      *a3 = v35;
      uint64_t result = 2;
      int v12 = v10;
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v21 = *v15;
    uint64_t v51 = *a3;
    uint64_t v52 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)a2[1];
    uint64_t v49 = *a2;
    uint64_t v50 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v23 = v14(&v51, &v49);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if ((v23 & 1) == 0) {
      return 0;
    }
    uint64_t v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    uint64_t v25 = a2[1];
    a2[1] = a3[1];
    a3[1] = v25;
    uint64_t v26 = *a4;
    uint64_t v27 = (std::__shared_weak_count *)a2[1];
    uint64_t v47 = *a2;
    char v48 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)a1[1];
    uint64_t v45 = *a1;
    uint64_t v46 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v29 = v26(&v47, &v45);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    if (v29)
    {
      uint64_t v30 = *a1;
      *a1 = *a2;
      *a2 = v30;
      uint64_t result = 2;
LABEL_50:
      uint64_t v36 = *v12;
      *int v12 = *v10;
      *unint64_t v10 = v36;
      return result;
    }
  }
  return 1;
}

void sub_25FA6D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  char v6 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v8 = *a3;
  uint64_t v56 = v7;
  std::string::size_type v57 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*(a2 - 1);
  uint64_t v54 = *(a2 - 2);
  uint64_t v55 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = v8(&v56, &v54);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v10)
  {
    std::vector<std::string>::pointer i = a1;
    do
    {
      int v12 = *a3;
      uint64_t v52 = v7;
      uint64_t v53 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v13 = (std::__shared_weak_count *)i[3];
      uint64_t v50 = i[2];
      uint64_t v51 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = v12(&v52, &v50);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      i += 2;
    }
    while ((v14 & 1) == 0);
  }
  else
  {
    for (std::vector<std::string>::pointer i = a1 + 2; i < v4; i += 2)
    {
      unint64_t v15 = *a3;
      uint64_t v48 = v7;
      uint64_t v49 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = (std::__shared_weak_count *)i[1];
      uint64_t v46 = *i;
      uint64_t v47 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v17 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (v17) {
        break;
      }
    }
  }
  if (i < v4)
  {
    do
    {
      int v18 = *a3;
      uint64_t v44 = v7;
      uint64_t v45 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v42 = *(v4 - 2);
      uint64_t v43 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v20 = v18(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      v4 -= 2;
    }
    while ((v20 & 1) != 0);
  }
  while (i < v4)
  {
    uint64_t v21 = *i;
    uint64_t *i = *v4;
    uint64_t *v4 = v21;
    uint64_t v22 = i[1];
    i[1] = v4[1];
    v4[1] = v22;
    do
    {
      char v23 = *a3;
      uint64_t v40 = v7;
      uint64_t v41 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)i[3];
      uint64_t v38 = i[2];
      uint64_t v39 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v23(&v40, &v38);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      i += 2;
    }
    while (!v25);
    do
    {
      uint64_t v26 = *a3;
      uint64_t v36 = v7;
      uint64_t v37 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = (std::__shared_weak_count *)*(v4 - 1);
      uint64_t v34 = *(v4 - 2);
      uint64_t v35 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v28 = v26(&v36, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      v4 -= 2;
    }
    while ((v28 & 1) != 0);
  }
  int v29 = (long long *)(i - 2);
  if (i - 2 != a1)
  {
    long long v30 = *v29;
    *(void *)int v29 = 0;
    *(i - 1) = 0;
    uint64_t v31 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  uint64_t v32 = (std::__shared_weak_count *)*(i - 1);
  *(i - 2) = v7;
  *(i - 1) = (uint64_t)v6;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  return i;
}

void sub_25FA6D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v29 = *(std::__shared_weak_count **)(v27 - 104);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  long long v30 = *(std::__shared_weak_count **)(v27 - 88);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  do
  {
    uint64_t v9 = *a3;
    char v10 = (std::__shared_weak_count *)a1[v6 + 3];
    uint64_t v56 = a1[v6 + 2];
    std::string::size_type v57 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v8;
    uint64_t v55 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v11 = v9(&v56, &v54);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    v6 += 2;
  }
  while ((v11 & 1) != 0);
  int v12 = &a1[v6];
  if (v6 == 2)
  {
    if (v12 < a2)
    {
      for (a2 -= 2; ; a2 -= 2)
      {
        char v17 = *a3;
        int v18 = (std::__shared_weak_count *)a2[1];
        uint64_t v52 = *a2;
        uint64_t v53 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v8;
        uint64_t v51 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v19 = v17(&v52, &v50);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        char v20 = v12 >= a2 ? 1 : v19;
        if (v20) {
          break;
        }
      }
    }
  }
  else
  {
    do
    {
      uint64_t v14 = *(a2 - 2);
      char v13 = (std::__shared_weak_count *)*(a2 - 1);
      a2 -= 2;
      unint64_t v15 = *a3;
      uint64_t v48 = v14;
      uint64_t v49 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = v8;
      uint64_t v47 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v16 = v15(&v48, &v46);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
    }
    while ((v16 & 1) == 0);
  }
  if (v12 >= a2)
  {
    uint64_t v21 = &a1[v6];
  }
  else
  {
    uint64_t v21 = &a1[v6];
    uint64_t v22 = a2;
    do
    {
      uint64_t v23 = *v21;
      *uint64_t v21 = *v22;
      uint64_t *v22 = v23;
      uint64_t v24 = v21[1];
      v21[1] = v22[1];
      v22[1] = v24;
      do
      {
        uint64_t v26 = v21[2];
        int v25 = (std::__shared_weak_count *)v21[3];
        v21 += 2;
        uint64_t v27 = *a3;
        uint64_t v44 = v26;
        uint64_t v45 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v42 = v8;
        uint64_t v43 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v28 = v27(&v44, &v42);
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
      }
      while ((v28 & 1) != 0);
      do
      {
        uint64_t v30 = *(v22 - 2);
        int v29 = (std::__shared_weak_count *)*(v22 - 1);
        v22 -= 2;
        uint64_t v31 = *a3;
        uint64_t v40 = v30;
        uint64_t v41 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = v8;
        uint64_t v39 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v32 = v31(&v40, &v38);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
      }
      while (!v32);
    }
    while (v21 < v22);
  }
  uint64_t v33 = (long long *)(v21 - 2);
  if (v21 - 2 != a1)
  {
    long long v34 = *v33;
    *(void *)uint64_t v33 = 0;
    *(v21 - 1) = 0;
    uint64_t v35 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v34;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  uint64_t v36 = (std::__shared_weak_count *)*(v21 - 1);
  *(v21 - 2) = v8;
  *(v21 - 1) = (uint64_t)v7;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  return v21 - 2;
}

void sub_25FA6DB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      uint64_t v9 = (std::__shared_weak_count *)*(a2 - 1);
      uint64_t v44 = *(a2 - 2);
      uint64_t v45 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v10 = (std::__shared_weak_count *)a1[1];
      uint64_t v42 = *a1;
      uint64_t v43 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = v8(&v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      if (v11)
      {
        uint64_t v12 = *a1;
        *a1 = *(v4 - 2);
        *(v4 - 2) = v12;
        uint64_t v13 = a1[1];
        a1[1] = *(v4 - 1);
        *(v4 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v14 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v15 = a1 + 6;
      if (a1 + 6 == v4) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      int v32 = v4;
      break;
  }
  while (1)
  {
    int v18 = *a3;
    char v19 = (std::__shared_weak_count *)v15[1];
    uint64_t v40 = *v15;
    uint64_t v41 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v20 = (std::__shared_weak_count *)v14[1];
    uint64_t v38 = *v14;
    uint64_t v39 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v40, &v38);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v21)
    {
      int v33 = v17;
      uint64_t v22 = *v15;
      uint64_t v23 = (std::__shared_weak_count *)v15[1];
      uint64_t v24 = v16;
      uint64_t *v15 = 0;
      v15[1] = 0;
      while (1)
      {
        int v25 = (char *)a1 + v24;
        long long v26 = *(_OWORD *)((char *)a1 + v24 + 32);
        *((void *)v25 + 4) = 0;
        *((void *)v25 + 5) = 0;
        uint64_t v27 = *(std::__shared_weak_count **)((char *)a1 + v24 + 56);
        *((_OWORD *)v25 + 3) = v26;
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v24 == -32) {
          break;
        }
        char v28 = *a3;
        uint64_t v36 = v22;
        uint64_t v37 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v29 = *(std::__shared_weak_count **)((char *)a1 + v24 + 24);
        uint64_t v34 = *(uint64_t *)((char *)a1 + v24 + 16);
        uint64_t v35 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v28(&v36, &v34);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (v37)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          if ((v30 & 1) == 0)
          {
            uint64_t v14 = (uint64_t *)((char *)a1 + v24 + 32);
            goto LABEL_40;
          }
        }
        else if (!v30)
        {
          goto LABEL_40;
        }
        v14 -= 2;
        v24 -= 16;
      }
      uint64_t v14 = a1;
LABEL_40:
      uint64_t v31 = (std::__shared_weak_count *)v14[1];
      uint64_t *v14 = v22;
      v14[1] = (uint64_t)v23;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      int v17 = v33 + 1;
      uint64_t v4 = v32;
      if (v33 == 7) {
        return v15 + 2 == v32;
      }
    }
    uint64_t v14 = v15;
    v16 += 16;
    v15 += 2;
    if (v15 == v4) {
      return 1;
    }
  }
}

void sub_25FA6DE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a2, a3, a5);
  char v10 = *a5;
  int v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v38 = *a4;
  uint64_t v39 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v36 = *a3;
  uint64_t v37 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = v10(&v38, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v13)
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    uint64_t v16 = *a5;
    int v17 = (std::__shared_weak_count *)a3[1];
    uint64_t v34 = *a3;
    uint64_t v35 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = (std::__shared_weak_count *)a2[1];
    uint64_t v32 = *a2;
    int v33 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = v16(&v34, &v32);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v19)
    {
      uint64_t v20 = *a2;
      *a2 = *a3;
      *a3 = v20;
      uint64_t v21 = a2[1];
      a2[1] = a3[1];
      a3[1] = v21;
      uint64_t v22 = *a5;
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      uint64_t v31 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (std::__shared_weak_count *)a1[1];
      uint64_t v28 = *a1;
      int v29 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v22(&v30, &v28);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v25)
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
        uint64_t v27 = a1[1];
        a1[1] = a2[1];
        a2[1] = v27;
      }
    }
  }
}

void sub_25FA6E0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v50 = *a5;
  uint64_t v51 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v48 = *a4;
  uint64_t v49 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = v12(&v50, &v48);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v15)
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = a4[1];
    a4[1] = a5[1];
    a5[1] = v17;
    int v18 = *a6;
    int v19 = (std::__shared_weak_count *)a4[1];
    uint64_t v46 = *a4;
    uint64_t v47 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)a3[1];
    uint64_t v44 = *a3;
    uint64_t v45 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v21 = v18(&v46, &v44);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v21)
    {
      uint64_t v22 = *a3;
      *a3 = *a4;
      *a4 = v22;
      uint64_t v23 = a3[1];
      a3[1] = a4[1];
      a4[1] = v23;
      uint64_t v24 = *a6;
      int v25 = (std::__shared_weak_count *)a3[1];
      uint64_t v42 = *a3;
      uint64_t v43 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = (std::__shared_weak_count *)a2[1];
      uint64_t v40 = *a2;
      uint64_t v41 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v27 = v24(&v42, &v40);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v27)
      {
        uint64_t v28 = *a2;
        *a2 = *a3;
        *a3 = v28;
        uint64_t v29 = a2[1];
        a2[1] = a3[1];
        a3[1] = v29;
        uint64_t v30 = *a6;
        uint64_t v31 = (std::__shared_weak_count *)a2[1];
        uint64_t v38 = *a2;
        uint64_t v39 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = (std::__shared_weak_count *)a1[1];
        uint64_t v36 = *a1;
        uint64_t v37 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v33 = v30(&v38, &v36);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v33)
        {
          uint64_t v34 = *a1;
          *a1 = *a2;
          *a2 = v34;
          uint64_t v35 = a1[1];
          a1[1] = a2[1];
          a2[1] = v35;
        }
      }
    }
  }
}

void sub_25FA6E398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v14 = (uint64_t *)v6;
      do
      {
        int v15 = *a4;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        uint64_t v26 = *v14;
        int v27 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (std::__shared_weak_count *)a1[1];
        uint64_t v24 = *a1;
        int v25 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v18 = v15(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v18)
        {
          uint64_t v19 = *v14;
          uint64_t *v14 = *a1;
          *a1 = v19;
          uint64_t v20 = v14[1];
          v14[1] = a1[1];
          a1[1] = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v21 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, v6, (uint64_t (**)(long long *, uint64_t *))a4, v21);
        v6 -= 16;
      }
      while (v21-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_25FA6E598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  char v5 = a4;
  uint64_t v6 = a1;
  uint64_t v36 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4) {
    return;
  }
  uint64_t v9 = ((uint64_t)a4 - a1) >> 3;
  uint64_t v10 = v9 + 1;
  unint64_t v11 = (long long *)(a1 + 16 * (v9 + 1));
  uint64_t v12 = v9 + 2;
  if (v9 + 2 < a3)
  {
    uint64_t v13 = *a2;
    long long v50 = *v11;
    if (*((void *)&v50 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 3);
    uint64_t v48 = *((void *)v11 + 2);
    uint64_t v49 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v13((uint64_t *)&v50, &v48);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    if (*((void *)&v50 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (v15)
    {
LABEL_12:
      ++v11;
      uint64_t v10 = v12;
    }
  }
LABEL_13:
  uint64_t v16 = *a2;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v11 + 1);
  uint64_t v46 = *(void *)v11;
  uint64_t v47 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v18 = (std::__shared_weak_count *)v5[1];
  uint64_t v44 = *v5;
  uint64_t v45 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = v16(&v46, &v44);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v21 = *v5;
    uint64_t v20 = (std::__shared_weak_count *)v5[1];
    uint64_t *v5 = 0;
    v5[1] = 0;
    uint64_t v35 = v6;
    while (1)
    {
      uint64_t v22 = (uint64_t *)v11;
      long long v23 = *v11;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      uint64_t v24 = (std::__shared_weak_count *)v5[1];
      *(_OWORD *)char v5 = v23;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v36 < v10)
      {
LABEL_48:
        uint64_t v34 = (std::__shared_weak_count *)v22[1];
        uint64_t *v22 = v21;
        v22[1] = (uint64_t)v20;
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        return;
      }
      uint64_t v25 = 2 * v10;
      uint64_t v10 = (2 * v10) | 1;
      unint64_t v11 = (long long *)(v6 + 16 * v10);
      uint64_t v26 = v25 + 2;
      if (v25 + 2 < a3)
      {
        int v27 = (uint64_t (*)(long long *, uint64_t *))*a2;
        long long v28 = *v11;
        long long v43 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (std::__shared_weak_count *)*((void *)v11 + 3);
        uint64_t v41 = *((void *)v11 + 2);
        uint64_t v42 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = v27(&v43, &v41);
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        if (!*((void *)&v43 + 1))
        {
          if (!v30) {
            goto LABEL_36;
          }
LABEL_35:
          ++v11;
          uint64_t v10 = v26;
          goto LABEL_36;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
        if (v30) {
          goto LABEL_35;
        }
      }
LABEL_36:
      uint64_t v31 = *a2;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v11 + 1);
      uint64_t v39 = *(void *)v11;
      uint64_t v40 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = v21;
      uint64_t v38 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v33 = v31(&v39, &v37);
      uint64_t v6 = v35;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      char v5 = v22;
      if (v33) {
        goto LABEL_48;
      }
    }
  }
}

void sub_25FA6E860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (*(void *)(v24 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v24 - 88));
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      int v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_25FA6E9D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t (**a2)(long long *, uint64_t *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_14;
    }
    uint64_t v12 = *a2;
    long long v13 = *(_OWORD *)v9;
    long long v21 = v13;
    if (*((void *)&v13 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v9 + 24);
    uint64_t v19 = *(void *)(v9 + 16);
    uint64_t v20 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v12(&v21, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (*((void *)&v21 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      if ((v15 & 1) == 0) {
        goto LABEL_14;
      }
LABEL_13:
      v9 += 16;
      uint64_t v6 = v11;
      goto LABEL_14;
    }
    if (v15) {
      goto LABEL_13;
    }
LABEL_14:
    long long v16 = *(_OWORD *)v9;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void sub_25FA6EB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(a1 + 16 * (v4 >> 1));
    uint64_t v10 = *a3;
    long long v11 = *(_OWORD *)v9;
    long long v29 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a2 - 8);
    long long v13 = (void *)(a2 - 16);
    uint64_t v27 = *(void *)(a2 - 16);
    long long v28 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = v10(&v29, &v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 - 16);
      int v15 = *(std::__shared_weak_count **)(a2 - 8);
      void *v13 = 0;
      v13[1] = 0;
      do
      {
        uint64_t v17 = v9;
        long long v18 = *(_OWORD *)v9;
        void *v9 = 0;
        v9[1] = 0;
        uint64_t v19 = (std::__shared_weak_count *)v13[1];
        *(_OWORD *)long long v13 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(a1 + 16 * v8);
        uint64_t v20 = *a3;
        long long v21 = *(_OWORD *)v9;
        long long v26 = v21;
        if (*((void *)&v21 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = v16;
        uint64_t v25 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v22 = v20(&v26, &v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (*((void *)&v26 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
        }
        long long v13 = v17;
      }
      while ((v22 & 1) != 0);
      long long v23 = (std::__shared_weak_count *)v17[1];
      void *v17 = v16;
      v17[1] = v15;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
  }
}

void sub_25FA6ECA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  v18[4] = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  void v18[3] = &v12[32 * v11];
  *(void *)long long v13 = *a2;
  uint64_t v14 = a2[1];
  *((void *)v13 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v13 + 2) = *a3;
  uint64_t v15 = a3[1];
  *((void *)v13 + 3) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  v18[2] = v13 + 32;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_25FA6EDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 32);
    v2 -= 32;
    *(_OWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  uint64_t *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__destroy_at[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair,0>(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(long long *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v9 = (uint64_t *)a2;
  uint64_t v10 = a1;
  uint64_t v53 = a2;
  uint64_t v54 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = ((char *)v9 - (char *)v10) >> 5;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int v30 = *a3;
          uint64_t v53 = (long long *)(v9 - 4);
          uint64_t v49 = *(v9 - 4);
          uint64_t v31 = (std::__shared_weak_count *)*(v9 - 3);
          long long v50 = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v51 = *(v9 - 2);
          uint64_t v32 = (std::__shared_weak_count *)*(v9 - 1);
          uint64_t v52 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v33 = (std::__shared_weak_count *)*((void *)v10 + 1);
          uint64_t v45 = *(void *)v10;
          uint64_t v46 = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v34 = (std::__shared_weak_count *)*((void *)v10 + 3);
          uint64_t v47 = *((void *)v10 + 2);
          uint64_t v48 = v34;
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v35 = v30(&v49, &v45);
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          if (v46) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
          if (v35) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v54, &v53);
          }
          break;
        case 3uLL:
          uint64_t v53 = (long long *)(v9 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, v10 + 2, (long long *)v9 - 2, a3);
          break;
        case 4uLL:
          uint64_t v53 = (long long *)(v9 - 4);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, v10 + 2, v10 + 4, (long long *)v9 - 2, a3);
          break;
        case 5uLL:
          uint64_t v53 = (long long *)(v9 - 4);
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, v10 + 2, v10 + 4, v10 + 6, (long long *)v9 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)v10, v9, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, v9, a3);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (long long *)(v9 - 4);
    if ((unint64_t)v12 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, &v10[2 * (v13 >> 1)], v15, a3);
      uint64_t v16 = v53;
      uint64_t v17 = 32 * v14 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v54 + 2, (long long *)((char *)v54 + v17), v53 - 4, a3);
      uint64_t v18 = 32 * v14 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v54 + 4, (long long *)((char *)v54 + v18), v16 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((long long *)((char *)v54 + v17), &v54[2 * v14], (long long *)((char *)v54 + v18), a3);
      uint64_t v44 = &v54[2 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v54, &v44);
      if (a5) {
        goto LABEL_29;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(&v10[2 * (v13 >> 1)], v10, v15, a3);
      if (a5) {
        goto LABEL_29;
      }
    }
    uint64_t v19 = *a3;
    uint64_t v20 = v54;
    uint64_t v40 = *((void *)v54 - 4);
    long long v21 = (std::__shared_weak_count *)*((void *)v54 - 3);
    uint64_t v41 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = *((void *)v20 - 2);
    char v22 = (std::__shared_weak_count *)*((void *)v20 - 1);
    long long v43 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v23 = (std::__shared_weak_count *)*((void *)v20 + 1);
    uint64_t v36 = *(void *)v20;
    uint64_t v37 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = *((void *)v20 + 2);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)v20 + 3);
    uint64_t v38 = v25;
    uint64_t v39 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v26 = v19(&v40, &v36);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if ((v26 & 1) == 0)
    {
      uint64_t v9 = (uint64_t *)v53;
      uint64_t v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>((uint64_t)v54, v53, a3);
      goto LABEL_38;
    }
LABEL_29:
    uint64_t v9 = (uint64_t *)v53;
    uint64_t v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>(v54, v53, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_36;
    }
    BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)v54, v27, a3);
    uint64_t v10 = v27 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)v27 + 4, (long long *)v9, a3))
    {
      if (v29) {
        return;
      }
      uint64_t v53 = v27;
      uint64_t v10 = v54;
      uint64_t v9 = (uint64_t *)v27;
    }
    else
    {
      if (!v29)
      {
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(v54, v27, a3, -i, a5 & 1);
        uint64_t v10 = v27 + 2;
LABEL_38:
        a5 = 0;
        uint64_t v54 = v10;
        a4 = -i;
        goto LABEL_2;
      }
      uint64_t v54 = v27 + 2;
    }
  }
  if (v10 != (long long *)v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, (long long *)v9, (long long *)v9, a3);
  }
}

void sub_25FA6F2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va1);
  _Unwind_Resume(a1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(long long **a1, long long **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v10 = **a1;
  long long v11 = (*a1)[1];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  long long v4 = *v3;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  char v5 = (std::__shared_weak_count *)*((void *)v2 + 1);
  long long *v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = v3[1];
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 + 3);
  v2[1] = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v3 + 1);
  long long *v3 = v10;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v3 + 3);
  v3[1] = v11;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 4;
  if (a1 + 4 == a2) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    uint64_t v9 = v5;
    long long v10 = *a3;
    long long v11 = (std::__shared_weak_count *)v8[5];
    uint64_t v49 = v8[4];
    long long v50 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v8[7];
    unint64_t v13 = v8 + 6;
    uint64_t v51 = v8[6];
    uint64_t v52 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)v8[1];
    uint64_t v45 = *v8;
    uint64_t v46 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = v8[2];
    uint64_t v15 = (std::__shared_weak_count *)v8[3];
    uint64_t v47 = v16;
    uint64_t v48 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v17 = v10(&v49, &v45);
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (!v17) {
      goto LABEL_56;
    }
    long long v18 = *(_OWORD *)v9;
    uint64_t *v9 = 0;
    v9[1] = 0;
    long long v19 = *(_OWORD *)v13;
    long long v43 = v18;
    long long v44 = v19;
    void *v13 = 0;
    v13[1] = 0;
    for (uint64_t i = v7; ; i -= 32)
    {
      long long v21 = (char *)a1 + i;
      long long v22 = *(_OWORD *)((char *)a1 + i);
      *(void *)long long v21 = 0;
      *((void *)v21 + 1) = 0;
      long long v23 = *(std::__shared_weak_count **)((char *)a1 + i + 40);
      *((_OWORD *)v21 + 2) = v22;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v24 = *((_OWORD *)v21 + 1);
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 3) = 0;
      uint64_t v25 = (std::__shared_weak_count *)*((void *)v21 + 7);
      *((_OWORD *)v21 + 3) = v24;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      long long v26 = v43;
      if (!i)
      {
        int v33 = (char *)a1;
        goto LABEL_48;
      }
      uint64_t v27 = *a3;
      long long v41 = v43;
      if (*((void *)&v43 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v42 = v44;
      if (*((void *)&v44 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v28 = (char *)a1 + i;
      BOOL v29 = *(std::__shared_weak_count **)((char *)a1 + i - 24);
      uint64_t v37 = *(uint64_t *)((char *)a1 + i - 32);
      uint64_t v38 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *((void *)v28 - 2);
      int v30 = (std::__shared_weak_count *)*((void *)v28 - 1);
      uint64_t v39 = v31;
      uint64_t v40 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v32 = v27((uint64_t *)&v41, &v37);
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (*((void *)&v42 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
      }
      if (!*((void *)&v41 + 1)) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
      if ((v32 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_45:
      ;
    }
    if (v32) {
      goto LABEL_45;
    }
LABEL_47:
    int v33 = (char *)a1 + i;
LABEL_48:
    long long v43 = 0uLL;
    uint64_t v34 = (std::__shared_weak_count *)*((void *)v33 + 1);
    *(_OWORD *)int v33 = v26;
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    long long v35 = v44;
    long long v44 = 0uLL;
    *(uint64_t *)((char *)a1 + i + 16) = v35;
    uint64_t v36 = (std::__shared_weak_count *)*((void *)v33 + 3);
    *((void *)v33 + 3) = *((void *)&v35 + 1);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (*((void *)&v44 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
    }
    if (*((void *)&v43 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
    }
LABEL_56:
    char v5 = v9 + 4;
    v7 += 32;
    uint64_t v8 = v9;
  }
  while (v9 + 4 != a2);
}

void sub_25FA6F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v16 - 120));
  _Unwind_Resume(a1);
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(void *result, void *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  if (result != a2)
  {
    long long v4 = result + 4;
    if (result + 4 != a2)
    {
      long long v6 = (std::__shared_weak_count **)(result + 7);
      do
      {
        uint64_t v7 = v4;
        uint64_t v8 = *a3;
        uint64_t v9 = (std::__shared_weak_count *)result[5];
        uint64_t v42 = result[4];
        long long v43 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v10 = (std::__shared_weak_count *)result[7];
        long long v11 = result + 6;
        uint64_t v44 = result[6];
        uint64_t v45 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = (std::__shared_weak_count *)result[1];
        uint64_t v38 = *result;
        uint64_t v39 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v13 = (std::__shared_weak_count *)result[3];
        uint64_t v40 = result[2];
        long long v41 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v14 = v8(&v42, &v38);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        if (v14)
        {
          long long v15 = *(_OWORD *)v7;
          *uint64_t v7 = 0;
          v7[1] = 0;
          long long v16 = *(_OWORD *)v11;
          long long v36 = v15;
          long long v37 = v16;
          void *v11 = 0;
          v11[1] = 0;
          int v17 = v6;
          do
          {
            long long v18 = *(_OWORD *)(v17 - 7);
            *(v17 - 7) = 0;
            *(v17 - 6) = 0;
            long long v19 = *(v17 - 2);
            *(_OWORD *)(v17 - 3) = v18;
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            long long v20 = *(_OWORD *)(v17 - 5);
            *(v17 - 5) = 0;
            *(v17 - 4) = 0;
            long long v21 = *v17;
            *(_OWORD *)(v17 - 1) = v20;
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            long long v22 = *a3;
            long long v23 = v36;
            long long v34 = v36;
            if (*((void *)&v36 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v35 = v37;
            if (*((void *)&v37 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v24 = *(v17 - 10);
            uint64_t v30 = (uint64_t)*(v17 - 11);
            uint64_t v31 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v25 = *(v17 - 8);
            uint64_t v32 = (uint64_t)*(v17 - 9);
            int v33 = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v26 = v22((uint64_t *)&v34, &v30);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if (*((void *)&v35 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
            }
            if (*((void *)&v34 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
            }
            v17 -= 4;
          }
          while ((v26 & 1) != 0);
          long long v36 = 0uLL;
          uint64_t v27 = *(v17 - 2);
          *(_OWORD *)(v17 - 3) = v23;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          long long v28 = v37;
          long long v37 = 0uLL;
          BOOL v29 = *v17;
          *(_OWORD *)(v17 - 1) = v28;
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (*((void *)&v37 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
          }
          if (*((void *)&v36 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
          }
        }
        long long v4 = v7 + 4;
        v6 += 4;
        BOOL result = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

void sub_25FA6F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v14 - 120));
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  v93 = a2;
  v94 = a1;
  v92 = a3;
  char v5 = *a4;
  long long v6 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v88 = *(void *)a2;
  v89 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v90 = *((void *)a2 + 2);
  v91 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v84 = *(void *)a1;
  v85 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 3);
  uint64_t v86 = *((void *)a1 + 2);
  v87 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = v5(&v88, &v84);
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  long long v11 = *a4;
  uint64_t v12 = v92;
  if (v10)
  {
    unint64_t v13 = (std::__shared_weak_count *)*((void *)v92 + 1);
    uint64_t v64 = *(void *)v92;
    BOOL v65 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((void *)v12 + 2);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 3);
    uint64_t v66 = v15;
    uint64_t v67 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v16 = v93;
    int v17 = (std::__shared_weak_count *)*((void *)v93 + 1);
    uint64_t v60 = *(void *)v93;
    v61 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *((void *)v16 + 2);
    long long v18 = (std::__shared_weak_count *)*((void *)v16 + 3);
    uint64_t v62 = v19;
    v63 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v20 = v11(&v64, &v60);
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    if (v20)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v94, &v92);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v94, &v93);
    long long v41 = *a4;
    uint64_t v42 = v92;
    long long v43 = (std::__shared_weak_count *)*((void *)v92 + 1);
    uint64_t v56 = *(void *)v92;
    std::string::size_type v57 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = *((void *)v42 + 2);
    uint64_t v44 = (std::__shared_weak_count *)*((void *)v42 + 3);
    uint64_t v58 = v45;
    v59 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = v93;
    uint64_t v47 = (std::__shared_weak_count *)*((void *)v93 + 1);
    uint64_t v52 = *(void *)v93;
    uint64_t v53 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v49 = *((void *)v46 + 2);
    uint64_t v48 = (std::__shared_weak_count *)*((void *)v46 + 3);
    uint64_t v54 = v49;
    uint64_t v55 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v50 = v41(&v56, &v52);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (!v50) {
      return 1;
    }
    uint64_t v39 = &v93;
    uint64_t v40 = &v92;
LABEL_89:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(v39, v40);
    return 2;
  }
  long long v21 = (std::__shared_weak_count *)*((void *)v92 + 1);
  uint64_t v80 = *(void *)v92;
  v81 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *((void *)v12 + 2);
  long long v22 = (std::__shared_weak_count *)*((void *)v12 + 3);
  uint64_t v82 = v23;
  v83 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = v93;
  uint64_t v25 = (std::__shared_weak_count *)*((void *)v93 + 1);
  uint64_t v76 = *(void *)v93;
  v77 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *((void *)v24 + 2);
  char v26 = (std::__shared_weak_count *)*((void *)v24 + 3);
  uint64_t v78 = v27;
  v79 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v28 = v11(&v80, &v76);
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (v28)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v93, &v92);
    BOOL v29 = *a4;
    uint64_t v30 = v93;
    uint64_t v31 = (std::__shared_weak_count *)*((void *)v93 + 1);
    uint64_t v72 = *(void *)v93;
    v73 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *((void *)v30 + 2);
    uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 3);
    uint64_t v74 = v33;
    v75 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v34 = v94;
    long long v35 = (std::__shared_weak_count *)*((void *)v94 + 1);
    uint64_t v68 = *(void *)v94;
    unint64_t v69 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = *((void *)v34 + 2);
    long long v36 = (std::__shared_weak_count *)*((void *)v34 + 3);
    uint64_t v70 = v37;
    v71 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v38 = v29(&v72, &v68);
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
    if (v75) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v75);
    }
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    if (!v38) {
      return 1;
    }
    uint64_t v39 = &v94;
    uint64_t v40 = &v93;
    goto LABEL_89;
  }
  return 0;
}

void sub_25FA6FD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va1);
  _Unwind_Resume(a1);
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>(uint64_t a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  v106 = a2;
  uint64_t i = (long long *)a1;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)&long long v104 = *(void *)a1;
  uint64_t v5 = v104;
  *((void *)&v104 + 1) = v6;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)&long long v105 = v7;
  *((void *)&v105 + 1) = v8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v9 = *a3;
  uint64_t v100 = v5;
  v101 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v102 = v7;
  v103 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = (std::__shared_weak_count *)*((void *)a2 - 3);
  uint64_t v96 = *((void *)a2 - 4);
  v97 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)a2 - 1);
  uint64_t v98 = *((void *)a2 - 2);
  v99 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v12 = v9(&v100, &v96);
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  if (v97) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v97);
  }
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
  if (v12)
  {
    do
    {
      unint64_t v13 = i;
      i += 2;
      uint64_t v14 = *a3;
      uint64_t v92 = v5;
      v93 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v94 = v7;
      v95 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 + 5);
      uint64_t v88 = *((void *)v13 + 4);
      v89 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *((void *)v13 + 6);
      long long v16 = (std::__shared_weak_count *)*((void *)v13 + 7);
      uint64_t v90 = v17;
      v91 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v18 = v14(&v92, &v88);
      if (v91) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v91);
      }
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      if (v95) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v95);
      }
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
    }
    while ((v18 & 1) == 0);
  }
  else
  {
    uint64_t v19 = i;
    int v20 = i + 2;
    for (uint64_t i = v20; v20 < v106; uint64_t i = v20)
    {
      long long v21 = *a3;
      uint64_t v84 = v5;
      v85 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v86 = v7;
      v87 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *(void *)v20;
      uint64_t v23 = (std::__shared_weak_count *)*((void *)v19 + 5);
      uint64_t v80 = v22;
      v81 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = *((void *)v19 + 6);
      long long v24 = (std::__shared_weak_count *)*((void *)v19 + 7);
      uint64_t v82 = v25;
      v83 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v26 = v21(&v84, &v80);
      if (v83) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v83);
      }
      if (v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      }
      if (v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      }
      if (v85) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      }
      if (v26) {
        break;
      }
      uint64_t v19 = i;
      int v20 = i + 2;
    }
  }
  uint64_t v27 = v106;
  char v28 = i;
  if (i < v106)
  {
    do
    {
      BOOL v29 = v106;
      v106 -= 2;
      uint64_t v30 = *a3;
      uint64_t v76 = v5;
      v77 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v78 = v7;
      v79 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = *((void *)v29 - 4);
      uint64_t v31 = (std::__shared_weak_count *)*((void *)v29 - 3);
      v73 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v74 = *((void *)v29 - 2);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v29 - 1);
      v75 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v33 = v30(&v76, &v72);
      if (v75) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      }
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      if (v77) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
    }
    while ((v33 & 1) != 0);
    uint64_t v27 = v106;
    char v28 = i;
  }
  if (v28 < v27)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&i, &v106);
      do
      {
        long long v34 = i;
        i += 2;
        long long v35 = *a3;
        uint64_t v68 = v5;
        unint64_t v69 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v70 = v7;
        v71 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v36 = (std::__shared_weak_count *)*((void *)v34 + 5);
        uint64_t v64 = *((void *)v34 + 4);
        BOOL v65 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = *((void *)v34 + 6);
        uint64_t v37 = (std::__shared_weak_count *)*((void *)v34 + 7);
        uint64_t v66 = v38;
        uint64_t v67 = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v39 = v35(&v68, &v64);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        if (v69) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v69);
        }
      }
      while (!v39);
      do
      {
        uint64_t v40 = v106;
        v106 -= 2;
        long long v41 = *a3;
        uint64_t v60 = v5;
        v61 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v62 = v7;
        v63 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v56 = *((void *)v40 - 4);
        uint64_t v42 = (std::__shared_weak_count *)*((void *)v40 - 3);
        std::string::size_type v57 = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v58 = *((void *)v40 - 2);
        long long v43 = (std::__shared_weak_count *)*((void *)v40 - 1);
        v59 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v44 = v41(&v60, &v56);
        if (v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        }
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
      }
      while ((v44 & 1) != 0);
      char v28 = i;
    }
    while (i < v106);
  }
  uint64_t v45 = v28 - 2;
  if (v28 - 2 != (long long *)a1)
  {
    long long v46 = *v45;
    *(void *)uint64_t v45 = 0;
    *((void *)v28 - 3) = 0;
    uint64_t v47 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v46;
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    long long v48 = *(v28 - 1);
    *((void *)v28 - 2) = 0;
    *((void *)v28 - 1) = 0;
    uint64_t v49 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v48;
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  long long v50 = v104;
  long long v104 = 0uLL;
  uint64_t v51 = (std::__shared_weak_count *)*((void *)v28 - 3);
  *(v28 - 2) = v50;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  long long v52 = v105;
  long long v105 = 0uLL;
  uint64_t v53 = (std::__shared_weak_count *)*((void *)v28 - 1);
  *(v28 - 1) = v52;
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  uint64_t v54 = i;
  if (*((void *)&v105 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105 + 1));
  }
  if (*((void *)&v104 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v104 + 1));
  }
  return v54;
}

void sub_25FA702B4(_Unwind_Exception *a1)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v1 - 192));
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v1 - 160));
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v1 - 128));
  _Unwind_Resume(a1);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>(long long *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  v91 = a2;
  uint64_t v92 = a1;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v87 = *(void *)a1;
  uint64_t v88 = v6;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 3);
  uint64_t v89 = v7;
  uint64_t v90 = v8;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  do
  {
    uint64_t v9 = v92;
    uint64_t v10 = *((void *)v92 + 4);
    v92 += 2;
    long long v11 = *a3;
    char v12 = (std::__shared_weak_count *)*((void *)v9 + 5);
    uint64_t v83 = v10;
    uint64_t v84 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *((void *)v9 + 6);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)v9 + 7);
    uint64_t v85 = v14;
    uint64_t v86 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v79 = v5;
    uint64_t v80 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v81 = v7;
    uint64_t v82 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v15 = v11(&v83, &v79);
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
  }
  while ((v15 & 1) != 0);
  if (v92 - 2 == a1)
  {
    for (uint64_t i = v91; v92 < v91; uint64_t i = v91)
    {
      uint64_t v22 = *a3;
      v91 = i - 2;
      uint64_t v75 = *((void *)i - 4);
      uint64_t v23 = (std::__shared_weak_count *)*((void *)i - 3);
      uint64_t v76 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v77 = *((void *)i - 2);
      long long v24 = (std::__shared_weak_count *)*((void *)i - 1);
      uint64_t v78 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v71 = v5;
      uint64_t v72 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v73 = v7;
      uint64_t v74 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v25 = v22(&v75, &v71);
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      if (v78) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v78);
      }
      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
      if (v25) {
        break;
      }
    }
  }
  else
  {
    do
    {
      long long v16 = v91;
      v91 -= 2;
      uint64_t v17 = *a3;
      uint64_t v67 = *(void *)v91;
      char v18 = (std::__shared_weak_count *)*((void *)v16 - 3);
      uint64_t v68 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v69 = *((void *)v16 - 2);
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v16 - 1);
      uint64_t v70 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v63 = v5;
      uint64_t v64 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v65 = v7;
      uint64_t v66 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v20 = v17(&v67, &v63);
      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
    }
    while ((v20 & 1) == 0);
  }
  for (j = v92; v92 < v91; j = v92)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v92, &v91);
    do
    {
      uint64_t v27 = v92;
      uint64_t v28 = *((void *)v92 + 4);
      v92 += 2;
      BOOL v29 = *a3;
      uint64_t v30 = (std::__shared_weak_count *)*((void *)v27 + 5);
      uint64_t v59 = v28;
      uint64_t v60 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *((void *)v27 + 6);
      uint64_t v31 = (std::__shared_weak_count *)*((void *)v27 + 7);
      uint64_t v61 = v32;
      uint64_t v62 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v55 = v5;
      uint64_t v56 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v57 = v7;
      uint64_t v58 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v33 = v29(&v59, &v55);
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
    }
    while ((v33 & 1) != 0);
    do
    {
      long long v34 = v91;
      v91 -= 2;
      long long v35 = *a3;
      uint64_t v51 = *(void *)v91;
      long long v36 = (std::__shared_weak_count *)*((void *)v34 - 3);
      long long v52 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = *((void *)v34 - 2);
      uint64_t v37 = (std::__shared_weak_count *)*((void *)v34 - 1);
      uint64_t v54 = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = v5;
      long long v48 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = v7;
      long long v50 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v38 = v35(&v51, &v47);
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
    }
    while (!v38);
  }
  int v39 = j - 2;
  if (j - 2 != a1)
  {
    long long v40 = *v39;
    *(void *)int v39 = 0;
    *((void *)j - 3) = 0;
    long long v41 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v40;
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    long long v42 = *(j - 1);
    *((void *)j - 2) = 0;
    *((void *)j - 1) = 0;
    long long v43 = (std::__shared_weak_count *)*((void *)a1 + 3);
    a1[1] = v42;
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
  }
  char v44 = (std::__shared_weak_count *)*((void *)j - 3);
  *((void *)j - 4) = v5;
  *((void *)j - 3) = v6;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  uint64_t v45 = (std::__shared_weak_count *)*((void *)j - 1);
  *((void *)j - 2) = v7;
  *((void *)j - 1) = v8;
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  return j - 2;
}

void sub_25FA707A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a34);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a38);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v38 - 136));
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  long long v4 = a2;
  uint64_t v65 = a2;
  uint64_t v66 = (std::__shared_weak_count **)a1;
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      uint64_t v9 = *((void *)a2 - 4);
      uint64_t v65 = a2 - 2;
      uint64_t v10 = (std::__shared_weak_count *)*((void *)a2 - 3);
      uint64_t v61 = v9;
      uint64_t v62 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v11 = (std::__shared_weak_count *)*((void *)a2 - 1);
      uint64_t v63 = *((void *)a2 - 2);
      uint64_t v64 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v12 = (std::__shared_weak_count *)a1[1];
      uint64_t v57 = (std::__shared_weak_count *)*a1;
      uint64_t v58 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = (std::__shared_weak_count *)a1[3];
      uint64_t v59 = a1[2];
      uint64_t v60 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = v8(&v61, (uint64_t *)&v57);
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (v14) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>((long long **)&v66, &v65);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((long long *)a1, (long long *)a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((long long *)a1, (long long *)a1 + 2, (long long *)a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((long long *)a1, (long long *)a1 + 2, (long long *)a1 + 4, (long long *)a1 + 6, a2 - 2, a3);
      return 1;
    default:
      char v15 = (long long *)(a1 + 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((long long *)a1, (long long *)a1 + 2, (long long *)a1 + 4, a3);
      long long v16 = (long long *)(a1 + 12);
      if (a1 + 12 == (uint64_t *)v4) {
        return 1;
      }
      int v17 = 0;
      char v18 = (std::__shared_weak_count **)(a1 + 15);
      break;
  }
  while (1)
  {
    uint64_t v19 = *a3;
    char v20 = (std::__shared_weak_count *)*((void *)v16 + 1);
    uint64_t v53 = *(void *)v16;
    uint64_t v54 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = (std::__shared_weak_count *)*((void *)v16 + 3);
    uint64_t v55 = *((void *)v16 + 2);
    uint64_t v56 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v15 + 1);
    uint64_t v49 = *(void *)v15;
    long long v50 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = (std::__shared_weak_count *)*((void *)v15 + 3);
    uint64_t v51 = *((void *)v15 + 2);
    long long v52 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v24 = v19(&v53, &v49);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    if (v24)
    {
      long long v25 = *v16;
      long long v26 = v16[1];
      *(void *)long long v16 = 0;
      *((void *)v16 + 1) = 0;
      long long v47 = v25;
      long long v48 = v26;
      *((void *)v16 + 2) = 0;
      *((void *)v16 + 3) = 0;
      for (uint64_t i = v18; ; i -= 4)
      {
        uint64_t v28 = i - 7;
        long long v29 = *(_OWORD *)(i - 7);
        long long *v28 = 0;
        v28[1] = 0;
        uint64_t v30 = *(i - 2);
        *((_OWORD *)v28 + 2) = v29;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        long long v31 = *(_OWORD *)(i - 5);
        *(i - 5) = 0;
        *(i - 4) = 0;
        uint64_t v32 = *i;
        *(_OWORD *)(i - 1) = v31;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        long long v33 = v47;
        if (v28 == v66) {
          break;
        }
        long long v34 = *a3;
        long long v45 = v47;
        if (*((void *)&v47 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v46 = v48;
        if (*((void *)&v48 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v35 = *(i - 10);
        uint64_t v41 = (uint64_t)*(i - 11);
        long long v42 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v36 = *(i - 8);
        uint64_t v43 = (uint64_t)*(i - 9);
        char v44 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v37 = v34((uint64_t *)&v45, &v41);
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        if (*((void *)&v46 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
        }
        if (*((void *)&v45 + 1))
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
          if ((v37 & 1) == 0) {
            break;
          }
        }
        else if (!v37)
        {
          break;
        }
      }
      long long v47 = 0uLL;
      uint64_t v38 = *(i - 6);
      *(_OWORD *)(i - 7) = v33;
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      long long v39 = v48;
      long long v48 = 0uLL;
      long long v40 = *(i - 4);
      *(_OWORD *)(i - 5) = v39;
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      long long v4 = v65;
      if (*((void *)&v48 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
      }
      if (*((void *)&v47 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
      }
      if (++v17 == 8) {
        return v16 + 2 == v4;
      }
    }
    char v15 = v16;
    v18 += 4;
    v16 += 2;
    if (v16 == v4) {
      return 1;
    }
  }
}

void sub_25FA70BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&a30);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v30 - 136));
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t v58 = a2;
  uint64_t v59 = a1;
  uint64_t v56 = a4;
  uint64_t v57 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  long long v11 = (std::__shared_weak_count *)*((void *)a4 + 1);
  uint64_t v52 = *(void *)a4;
  uint64_t v53 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v12 = (std::__shared_weak_count *)*((void *)a4 + 3);
  uint64_t v54 = *((void *)a4 + 2);
  uint64_t v55 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)a3 + 1);
  uint64_t v48 = *(void *)a3;
  uint64_t v49 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = (std::__shared_weak_count *)*((void *)a3 + 3);
  uint64_t v50 = *((void *)a3 + 2);
  uint64_t v51 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = v10(&v52, &v48);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v15)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v57, &v56);
    long long v16 = *a5;
    int v17 = v57;
    char v18 = (std::__shared_weak_count *)*((void *)v57 + 1);
    uint64_t v44 = *(void *)v57;
    long long v45 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *((void *)v17 + 2);
    uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 3);
    uint64_t v46 = v20;
    long long v47 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = (std::__shared_weak_count *)*((void *)a2 + 1);
    uint64_t v40 = *(void *)a2;
    uint64_t v41 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)*((void *)a2 + 3);
    uint64_t v42 = *((void *)a2 + 2);
    uint64_t v43 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v23 = v16(&v44, &v40);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (v23)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v58, &v57);
      int v24 = *a5;
      long long v25 = v58;
      long long v26 = (std::__shared_weak_count *)*((void *)v58 + 1);
      uint64_t v36 = *(void *)v58;
      int v37 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = *((void *)v25 + 2);
      uint64_t v27 = (std::__shared_weak_count *)*((void *)v25 + 3);
      uint64_t v38 = v28;
      long long v39 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = (std::__shared_weak_count *)*((void *)a1 + 1);
      uint64_t v32 = *(void *)a1;
      long long v33 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = (std::__shared_weak_count *)*((void *)a1 + 3);
      uint64_t v34 = *((void *)a1 + 2);
      long long v35 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v31 = v24(&v36, &v32);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (v31) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v59, &v58);
      }
    }
  }
}

void sub_25FA70ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t v78 = a2;
  uint64_t v79 = a1;
  uint64_t v76 = a4;
  uint64_t v77 = a3;
  uint64_t v75 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a2, a3, a4, a6);
  long long v11 = *a6;
  char v12 = (std::__shared_weak_count *)*((void *)a5 + 1);
  uint64_t v71 = *(void *)a5;
  uint64_t v72 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)a5 + 3);
  uint64_t v73 = *((void *)a5 + 2);
  uint64_t v74 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = (std::__shared_weak_count *)*((void *)a4 + 1);
  uint64_t v67 = *(void *)a4;
  uint64_t v68 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = (std::__shared_weak_count *)*((void *)a4 + 3);
  uint64_t v69 = *((void *)a4 + 2);
  uint64_t v70 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = v11(&v71, &v67);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v16)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v76, &v75);
    int v17 = *a6;
    char v18 = v76;
    uint64_t v19 = (std::__shared_weak_count *)*((void *)v76 + 1);
    uint64_t v63 = *(void *)v76;
    uint64_t v64 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *((void *)v18 + 2);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)v18 + 3);
    uint64_t v65 = v21;
    uint64_t v66 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = v77;
    int v23 = (std::__shared_weak_count *)*((void *)v77 + 1);
    uint64_t v59 = *(void *)v77;
    uint64_t v60 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = *((void *)v22 + 2);
    int v24 = (std::__shared_weak_count *)*((void *)v22 + 3);
    uint64_t v61 = v25;
    uint64_t v62 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v26 = v17(&v63, &v59);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    if (v26)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v77, &v76);
      uint64_t v27 = *a6;
      uint64_t v28 = v77;
      long long v29 = (std::__shared_weak_count *)*((void *)v77 + 1);
      uint64_t v55 = *(void *)v77;
      uint64_t v56 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *((void *)v28 + 2);
      uint64_t v30 = (std::__shared_weak_count *)*((void *)v28 + 3);
      uint64_t v57 = v31;
      uint64_t v58 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = (std::__shared_weak_count *)*((void *)a2 + 1);
      uint64_t v51 = *(void *)a2;
      uint64_t v52 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v33 = (std::__shared_weak_count *)*((void *)a2 + 3);
      uint64_t v53 = *((void *)a2 + 2);
      uint64_t v54 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v34 = v27(&v55, &v51);
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (v34)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v78, &v77);
        long long v35 = *a6;
        uint64_t v36 = v78;
        int v37 = (std::__shared_weak_count *)*((void *)v78 + 1);
        uint64_t v47 = *(void *)v78;
        uint64_t v48 = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = *((void *)v36 + 2);
        uint64_t v38 = (std::__shared_weak_count *)*((void *)v36 + 3);
        uint64_t v49 = v39;
        uint64_t v50 = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = (std::__shared_weak_count *)*((void *)a1 + 1);
        uint64_t v43 = *(void *)a1;
        uint64_t v44 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v41 = (std::__shared_weak_count *)*((void *)a1 + 3);
        uint64_t v45 = *((void *)a1 + 2);
        uint64_t v46 = v41;
        if (v41) {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v42 = v35(&v47, &v43);
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        if (v42) {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v79, &v78);
        }
      }
    }
  }
}

void sub_25FA71254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va1);
  _Unwind_Resume(a1);
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  long long v35 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (uint64_t *)a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v7, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v34 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      unint64_t v13 = v6;
      do
      {
        int v14 = *a4;
        int v15 = (std::__shared_weak_count *)*((void *)v13 + 1);
        uint64_t v30 = *(void *)v13;
        uint64_t v31 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((void *)v13 + 2);
        int v16 = (std::__shared_weak_count *)*((void *)v13 + 3);
        uint64_t v32 = v17;
        long long v33 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v18 = v35;
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v35 + 1);
        uint64_t v26 = *(void *)v35;
        uint64_t v27 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((void *)v18 + 2);
        uint64_t v20 = (std::__shared_weak_count *)*((void *)v18 + 3);
        uint64_t v28 = v21;
        long long v29 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = v14(&v30, &v26);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v22)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *&,cgm::token_generation_inference::ajax::utils::StreamOpPair *&>(&v34, &v35);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v35, a4, v9, v35);
        }
        unint64_t v13 = v34 + 2;
        int v34 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = (uint64_t *)v35;
      uint64_t v8 = (char *)v6 - (char *)v35;
    }
    if (v8 >= 33)
    {
      unint64_t v23 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v7, (uint64_t)v6, a4, v23);
        v6 -= 2;
      }
      while (v23-- > 2);
      return v34;
    }
  }
  return a3;
}

void sub_25FA7146C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v52 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 5) {
    return;
  }
  uint64_t v8 = ((uint64_t)a4 - a1) >> 4;
  uint64_t v9 = v8 + 1;
  unint64_t v10 = (void *)(a1 + 32 * (v8 + 1));
  uint64_t v11 = v8 + 2;
  if (v8 + 2 >= a3) {
    goto LABEL_21;
  }
  char v12 = *a2;
  unint64_t v13 = (std::__shared_weak_count *)v10[1];
  uint64_t v82 = *v10;
  uint64_t v83 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a1 + 32 * v9;
  uint64_t v16 = *(void *)(v14 + 16);
  int v15 = *(std::__shared_weak_count **)(v14 + 24);
  uint64_t v84 = v16;
  uint64_t v85 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)v10[5];
  uint64_t v78 = v10[4];
  uint64_t v79 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v18 = (std::__shared_weak_count *)v10[7];
  uint64_t v80 = v10[6];
  uint64_t v81 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = v12(&v82, &v78);
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if (!v83)
  {
    if (!v19) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  if (v19)
  {
LABEL_20:
    v10 += 4;
    uint64_t v9 = v11;
  }
LABEL_21:
  uint64_t v20 = *a2;
  uint64_t v21 = (std::__shared_weak_count *)v10[1];
  uint64_t v74 = *v10;
  uint64_t v75 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v22 = (std::__shared_weak_count *)v10[3];
  uint64_t v76 = v10[2];
  uint64_t v77 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = (std::__shared_weak_count *)v5[1];
  uint64_t v70 = *v5;
  uint64_t v71 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = (std::__shared_weak_count *)v5[3];
  uint64_t v72 = v5[2];
  uint64_t v73 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v25 = v20(&v74, &v70);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (v25) {
    return;
  }
  long long v26 = *(_OWORD *)v5;
  long long v27 = *((_OWORD *)v5 + 1);
  void *v5 = 0;
  v5[1] = 0;
  long long v68 = v26;
  long long v69 = v27;
  v5[2] = 0;
  void v5[3] = 0;
  while (1)
  {
    uint64_t v28 = v10;
    long long v29 = *(_OWORD *)v10;
    *unint64_t v10 = 0;
    v10[1] = 0;
    uint64_t v30 = (std::__shared_weak_count *)v5[1];
    *(_OWORD *)uint64_t v5 = v29;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    long long v31 = *((_OWORD *)v10 + 1);
    v10[2] = 0;
    void v10[3] = 0;
    uint64_t v32 = (std::__shared_weak_count *)v5[3];
    *((_OWORD *)v5 + 1) = v31;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v52 < v9) {
      break;
    }
    uint64_t v33 = (2 * v9) | 1;
    unint64_t v10 = (void *)(a1 + 32 * v33);
    uint64_t v34 = 2 * v9 + 2;
    if (v34 >= a3)
    {
      uint64_t v9 = (2 * v9) | 1;
    }
    else
    {
      long long v35 = *a2;
      uint64_t v36 = (std::__shared_weak_count *)v10[1];
      uint64_t v64 = *v10;
      uint64_t v65 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = a1 + 32 * v33;
      uint64_t v39 = *(void *)(v37 + 16);
      uint64_t v38 = *(std::__shared_weak_count **)(v37 + 24);
      uint64_t v66 = v39;
      uint64_t v67 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = (std::__shared_weak_count *)v10[5];
      uint64_t v60 = v10[4];
      uint64_t v61 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = (std::__shared_weak_count *)v10[7];
      uint64_t v62 = v10[6];
      uint64_t v63 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v42 = v35(&v64, &v60);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (v65)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        uint64_t v9 = (2 * v9) | 1;
        if ((v42 & 1) == 0) {
          goto LABEL_65;
        }
LABEL_64:
        v10 += 4;
        uint64_t v9 = v34;
        goto LABEL_65;
      }
      uint64_t v9 = (2 * v9) | 1;
      if (v42) {
        goto LABEL_64;
      }
    }
LABEL_65:
    uint64_t v43 = *a2;
    uint64_t v44 = (std::__shared_weak_count *)v10[1];
    uint64_t v56 = *v10;
    uint64_t v57 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = (std::__shared_weak_count *)v10[3];
    uint64_t v58 = v10[2];
    uint64_t v59 = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = *((void *)&v68 + 1);
    uint64_t v47 = v68;
    long long v54 = v68;
    if (*((void *)&v68 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v55 = v69;
    if (*((void *)&v69 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v48 = v43(&v56, (uint64_t *)&v54);
    if (*((void *)&v55 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
    }
    if (*((void *)&v54 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    uint64_t v5 = v28;
    if (v48) {
      goto LABEL_84;
    }
  }
  uint64_t v46 = *((void *)&v68 + 1);
  uint64_t v47 = v68;
LABEL_84:
  long long v68 = 0uLL;
  uint64_t v49 = (std::__shared_weak_count *)v28[1];
  void *v28 = v47;
  v28[1] = v46;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  long long v50 = v69;
  long long v69 = 0uLL;
  uint64_t v51 = (std::__shared_weak_count *)v28[3];
  *((_OWORD *)v28 + 1) = v50;
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (*((void *)&v68 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
  }
}

void sub_25FA718AC(_Unwind_Exception *a1)
{
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v1 - 152));
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v1 - 120));
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[2];
    uint64_t v9 = a1[3];
    a1[2] = 0;
    a1[3] = 0;
    uint64_t v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a3, a4);
    char v12 = v11;
    if (v11 == (uint64_t *)(a2 - 32))
    {
      uint64_t v20 = (std::__shared_weak_count *)v11[1];
      *char v12 = v8;
      v12[1] = v7;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      uint64_t v21 = (std::__shared_weak_count *)v12[3];
      unint64_t v12[2] = v10;
      void v12[3] = v9;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 - 32);
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      uint64_t v14 = (std::__shared_weak_count *)v11[1];
      *(_OWORD *)char v12 = v13;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      long long v15 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v16 = (std::__shared_weak_count *)v12[3];
      *((_OWORD *)v12 + 1) = v15;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      uint64_t v17 = (uint64_t)(v12 + 4);
      char v18 = *(std::__shared_weak_count **)(a2 - 24);
      *(void *)(a2 - 32) = v8;
      *(void *)(a2 - 24) = v7;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      int v19 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v10;
      *(void *)(a2 - 8) = v9;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)a1, v17, a3, (v17 - (uint64_t)a1) >> 5);
    }
  }
}

void sub_25FA71A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = v6 + 1;
    uint64_t v10 = &a1[4 * v6 + 4];
    uint64_t v11 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 >= a3) {
      goto LABEL_22;
    }
    long long v13 = *a2;
    uint64_t v14 = (std::__shared_weak_count *)v10[1];
    uint64_t v30 = *v10;
    long long v31 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v15 = &a1[4 * v9];
    uint64_t v17 = v15[2];
    uint64_t v16 = (std::__shared_weak_count *)v15[3];
    uint64_t v32 = v17;
    uint64_t v33 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v18 = (std::__shared_weak_count *)v10[5];
    uint64_t v26 = v10[4];
    long long v27 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = (std::__shared_weak_count *)v10[7];
    uint64_t v28 = v10[6];
    long long v29 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v20 = v13(&v30, &v26);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v31)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      if ((v20 & 1) == 0) {
        goto LABEL_22;
      }
LABEL_21:
      v10 += 4;
      uint64_t v6 = v12;
      goto LABEL_22;
    }
    if (v20) {
      goto LABEL_21;
    }
LABEL_22:
    long long v21 = *(_OWORD *)v10;
    *uint64_t v10 = 0;
    v10[1] = 0;
    int v22 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v21;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    long long v23 = *((_OWORD *)v10 + 1);
    v10[2] = 0;
    void v10[3] = 0;
    int v24 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    a1 = v10;
  }
  while (v6 <= v8);
  return v10;
}

void sub_25FA71BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (void *)(a1 + 32 * (v4 >> 1));
    uint64_t v9 = *a3;
    uint64_t v10 = (std::__shared_weak_count *)v8[1];
    uint64_t v44 = *v8;
    uint64_t v45 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)v8[3];
    uint64_t v46 = v8[2];
    uint64_t v47 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a2 - 24);
    long long v13 = (void *)(a2 - 32);
    uint64_t v40 = *(void *)(a2 - 32);
    uint64_t v41 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
    long long v15 = (long long *)(a2 - 16);
    uint64_t v42 = *(void *)(a2 - 16);
    uint64_t v43 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = v9(&v44, &v40);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (v16)
    {
      long long v17 = *(_OWORD *)v13;
      void *v13 = 0;
      v13[1] = 0;
      long long v18 = *v15;
      long long v38 = v17;
      long long v39 = v18;
      *(void *)long long v15 = 0;
      *((void *)v15 + 1) = 0;
      while (1)
      {
        int v19 = v8;
        long long v20 = *(_OWORD *)v8;
        void *v8 = 0;
        v8[1] = 0;
        long long v21 = (std::__shared_weak_count *)v13[1];
        *(_OWORD *)long long v13 = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        long long v22 = *((_OWORD *)v8 + 1);
        v8[2] = 0;
        v8[3] = 0;
        long long v23 = (std::__shared_weak_count *)v13[3];
        *((_OWORD *)v13 + 1) = v22;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (void *)(a1 + 32 * v7);
        int v24 = *a3;
        char v25 = (std::__shared_weak_count *)v8[1];
        uint64_t v34 = *v8;
        long long v35 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = (std::__shared_weak_count *)v8[3];
        uint64_t v36 = v8[2];
        uint64_t v37 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = *((void *)&v38 + 1);
        uint64_t v27 = v38;
        long long v32 = v38;
        if (*((void *)&v38 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v33 = v39;
        if (*((void *)&v39 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v29 = v24(&v34, (uint64_t *)&v32);
        if (*((void *)&v33 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
        }
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        long long v13 = v19;
        if ((v29 & 1) == 0) {
          goto LABEL_44;
        }
      }
      uint64_t v28 = *((void *)&v38 + 1);
      uint64_t v27 = v38;
LABEL_44:
      uint64_t v30 = (std::__shared_weak_count *)v19[1];
      *int v19 = v27;
      v19[1] = v28;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      long long v31 = (std::__shared_weak_count *)v19[3];
      *((_OWORD *)v19 + 1) = v39;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
}

void sub_25FA71E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)va);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)(v14 - 120));
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    BOOL result = v4;
    void *v3 = 0;
    if (v4) {
      BOOL result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  uint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      long long v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      long long v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    uint64_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    long long v21 = &__src[4 * a5];
    long long v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    int v24 = &v5[a5];
    char v25 = &v23[-a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  long long v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  long long v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_25FA72188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  unint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    unint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--unint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<std::string>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    unint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  long long v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  std::vector<int>::pointer v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    std::vector<int>::pointer v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      std::vector<int>::pointer v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    unint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<std::string>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<std::string>::pointer end = this->__end_;
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    unint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::pointer v6 = result;
    BOOL result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25FA72520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  std::vector<int>::pointer v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x2612065E0);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_25FA72800(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_25FA72A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA72B1C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25FA72C80(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__func()
{
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_270BD1F98;
  return result;
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270BD1F98;
}

BOOL std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (cgm::token_generation_inference::ajax::ane::isExtendFunction(a3)) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 != 15) {
    return 1;
  }
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(uint64_t *)((char *)v7 + 7);
  return v8 != 0x626D655F64616F6CLL || v9 != 0x73676E6964646562;
}

uint64_t std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__func()
{
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_270BD2028;
  return result;
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270BD2028;
}

BOOL std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return cgm::token_generation_inference::ajax::ane::isExtendFunction(a3);
}

uint64_t std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25FA73290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA73334(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    unint64_t v10 = value;
    uint8x8_t v12 = (std::string *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        unint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        unint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string*,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      std::vector<std::string>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        BOOL v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v18);
      }
      else {
        BOOL v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>((uint64_t)&__v, (long long *)a3, a5);
      uint64_t v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_25FA73548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  unint64_t v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    int v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  *(void *)(a1 + 16) = v4;
}

void sub_25FA73664(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string*,0>(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_25FA739B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 5;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[4 * a5];
      }
      else
      {
        unint64_t v21 = &a3[4 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[4 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 5;
      uint64_t v16 = v10 - v13;
      if (v16 >> 4 > v14) {
        unint64_t v14 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v30 = v9;
      if (v17) {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      size_t v22 = (uint64_t *)&v18[32 * v15];
      v27[0] = v18;
      v27[1] = v22;
      uint64_t v28 = v22;
      uint64_t v29 = &v18[32 * v17];
      unint64_t v23 = &v22[4 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22[2] = v7[2];
        uint64_t v25 = v7[3];
        uint64_t v22[3] = v25;
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 4;
        v7 += 4;
      }
      while (v22 != v23);
      uint64_t v28 = v23;
      uint64_t v5 = (void *)std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v27, (uint64_t)v5);
      std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_25FA73B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  char v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    char v8 = *(_OWORD **)(a1 + 8);
    do
    {
      _OWORD *v8 = *(_OWORD *)v9;
      void *v9 = 0;
      v9[1] = 0;
      v8[1] = *((_OWORD *)v9 + 1);
      v9[2] = 0;
      void v9[3] = 0;
      v8 += 2;
      v9 += 4;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *(_OWORD *)(v7 - 32);
      v7 -= 32;
      *(_OWORD *)(v6 - 32) = v8;
      v6 -= 32;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *uint64_t v10 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      v10[1] = *(_OWORD *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      v10 += 2;
      a3 += 32;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 4)
  {
    uint64_t v5 = a2[1];
    void *result = *a2;
    result[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = a2[3];
    result[2] = a2[2];
    result[3] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    result += 4;
  }
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    long long v8 = a3;
    uint64_t v9 = a4;
    do
    {
      long long v10 = *((_OWORD *)v8 - 2);
      v8 -= 4;
      void *v8 = 0;
      v8[1] = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(v4 - 24);
      *(_OWORD *)(v9 - 32) = v10;
      v9 -= 32;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      long long v12 = *((_OWORD *)v7 - 1);
      *(v7 - 2) = 0;
      *(v7 - 1) = 0;
      uint64_t v13 = *(std::__shared_weak_count **)(v4 - 8);
      *(_OWORD *)(v4 - 16) = v12;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v4 = v9;
      uint64_t v7 = v8;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v11 = v5[2];
    uint64_t v10 = v5[3];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    long long v12 = (std::__shared_weak_count *)a4[3];
    a4[2] = v11;
    a4[3] = v10;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    a4 += 4;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_25FA740C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA74174(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25FA74414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25FA744B4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<E5RT::MemoryObject>::shared_ptr[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  float v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  void v17[5] = 0;
  v17[6] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_25FA747D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

os_log_t cgm::token_generation_inference::common::logging::createLogForCategoryString(cgm::token_generation_inference::common::logging *this, const char *a2)
{
  return os_log_create("com.apple.tokengeneration", (const char *)this);
}

uint64_t cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(cgm::token_generation_inference::common::logging::CGMTGILogger *this)
{
  uint64_t v1 = &demangling cache variable for type metadata for KeyedEncodingContainer<GuidedGenerationConfiguration.CodingKeys>;
  {
    uint64_t v1 = (void *)&demangling cache variable for type metadata for KeyedEncodingContainer<GuidedGenerationConfiguration.CodingKeys>;
    if (v3)
    {
      cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(void)::logger = (uint64_t)os_log_create("com.apple.tokengeneration", "OnDeviceLanguageModel");
      uint64_t v1 = (void *)&demangling cache variable for type metadata for KeyedEncodingContainer<GuidedGenerationConfiguration.CodingKeys>;
    }
  }
  return v1[72];
}

cgm::token_generation_inference::ajax::AJAXE5Error *cgm::token_generation_inference::ajax::e5RunnerErrorCodeFromRuntimeError(cgm::token_generation_inference::ajax *this, const std::runtime_error *a2)
{
  if (result)
  {
    uint64_t v3 = cgm::token_generation_inference::ajax::AJAXE5Error::getErrorCode(result) - 1;
    if (v3 > 3) {
      return 0;
    }
    else {
      return (cgm::token_generation_inference::ajax::AJAXE5Error *)(v3 + 1);
    }
  }
  return result;
}

void sub_25FA74DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, TGIE5ModelConfiguration *a11)
{
  _Unwind_Resume(a1);
}

void TGIE5ModelConfiguration::~TGIE5ModelConfiguration(TGIE5ModelConfiguration *this)
{
  if (*((char *)&this[2].var1.var0.var0.var0.var0.var1 + 23) < 0) {
    operator delete(this[2].var1.var0.var0.var0.var0.var1.var0);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)(&this[1].var1.var0.var0.var0.var0.var1 + 1));
  p_var1 = (__raw *)&this[1];
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_var1);
  p_var1 = &this->var1.var0.var0.var1;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_var1);
  if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0) {
    operator delete(this->var1.var0.var0.var0.var0.var1.var0);
  }
}

void sub_25FA759A0()
{
  __cxa_end_catch();
  JUMPOUT(0x25FA75794);
}

void sub_25FA759C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::tokenNSArrayToVector(void *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  id v3 = a1;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  id v19 = v3;
  std::vector<int>::reserve(a2, [v3 count]);
  for (unint64_t i = 0; i < [v19 count]; ++i)
  {
    uint64_t v5 = [v19 objectAtIndexedSubscript:i];
    unsigned int v6 = [v5 intValue];
    unsigned int v7 = v6;
    std::vector<unsigned int>::pointer end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a2->__begin_;
      uint64_t v12 = end - a2->__begin_;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v15);
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        std::vector<unsigned int>::pointer end = a2->__end_;
      }
      else
      {
        unint64_t v16 = 0;
      }
      float v17 = (unsigned int *)&v16[4 * v12];
      unsigned int *v17 = v7;
      unint64_t v10 = v17 + 1;
      while (end != begin)
      {
        unsigned int v18 = *--end;
        *--float v17 = v18;
      }
      a2->__begin_ = v17;
      a2->__end_ = v10;
      a2->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = v6;
      unint64_t v10 = end + 1;
    }
    a2->__end_ = v10;
  }
}

void sub_25FA75B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_25FA75D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25FA75E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::tokenNSArrayToUIntVector(void *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  id v3 = a1;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  id v19 = v3;
  std::vector<int>::reserve(a2, [v3 count]);
  for (unint64_t i = 0; i < [v19 count]; ++i)
  {
    uint64_t v5 = [v19 objectAtIndexedSubscript:i];
    unsigned int v6 = [v5 unsignedIntValue];
    unsigned int v7 = v6;
    std::vector<unsigned int>::pointer end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a2->__begin_;
      uint64_t v12 = end - a2->__begin_;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v15);
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        std::vector<unsigned int>::pointer end = a2->__end_;
      }
      else
      {
        unint64_t v16 = 0;
      }
      float v17 = (unsigned int *)&v16[4 * v12];
      unsigned int *v17 = v7;
      uint64_t v10 = v17 + 1;
      while (end != begin)
      {
        unsigned int v18 = *--end;
        *--float v17 = v18;
      }
      a2->__begin_ = v17;
      a2->__end_ = v10;
      a2->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = v6;
      uint64_t v10 = end + 1;
    }
    a2->__end_ = v10;
  }
}

void sub_25FA75FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_25FA76238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA76570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA766CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA769D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (a2 == 1)
  {
    uint64_t v34 = (cgm::token_generation_inference::ajax *)__cxa_begin_catch(a1);
    long long v35 = [*(id *)(v31 + 2400) log];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      +[E5RunnerObjC compiledModelWithConfiguration:bundleCachePath:error:]();
    }

    if (v30)
    {
      uint64_t v37 = (void *)MEMORY[0x263F087E8];
      long long v38 = cgm::token_generation_inference::ajax::e5RunnerErrorCodeFromRuntimeError(v34, v36);
      a20 = *MEMORY[0x263F08320];
      long long v39 = NSString;
      (*(void (**)(cgm::token_generation_inference::ajax *))(*(void *)v34 + 16))(v34);
      uint64_t v40 = [v39 stringWithFormat:@"Failed to compile model: %s."];
      a21 = (uint64_t)v40;
      uint64_t v41 = [NSDictionary dictionaryWithObjects:&a21 forKeys:&a20 count:1];
      *char v30 = [v37 errorWithDomain:@"com.apple.TokenGenerationInference.E5Runner" code:v38 userInfo:v41];
    }
    __cxa_end_catch();
    JUMPOUT(0x25FA76980);
  }

  _Unwind_Resume(a1);
}

void anonymous namespace'::compilerOptionsForModelType(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1 == 1)
  {
    cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions((cgm::token_generation_inference::ajax::utils *)1, a2);
  }
  else
  {
    if (a1 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Can't compile unknown model type.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions((cgm::token_generation_inference::ajax::utils *)2, a2);
  }
}

void sub_25FA76CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_25FA76D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA77028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24 && a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  if (a2 == 1)
  {
    char v30 = __cxa_begin_catch(a1);
    uint64_t v31 = [*(id *)(v27 + 2400) log];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      +[E5RunnerObjC doesModelRequireCompilationWithConfiguration:bundleCachePath:]((uint64_t)v26, (uint64_t)v30, v31);
    }

    __cxa_end_catch();
    JUMPOUT(0x25FA76FE0);
  }

  _Unwind_Resume(a1);
}

void sub_25FA772B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<TGIE5Function,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<TGIE5Function,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_25FA775E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unsigned int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *unsigned int v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unsigned int v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_25FA77720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::common::IdleDurationTelemetrySampler<std::chrono::steady_clock>::shouldEmitTelemetryForNextEvent(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if ((double)(v2.__d_.__rep_ - *(void *)(a1 + 24)) / 1000000.0 >= (double)*(unint64_t *)(a1 + 8))
    {
      *(std::chrono::steady_clock::time_point *)(a1 + 24) = v2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = 1;
    *(unsigned char *)(a1 + 16) = 1;
    *(std::chrono::steady_clock::time_point *)(a1 + 24) = std::chrono::steady_clock::now();
  }
  return v3;
}

void std::default_delete<TGIE5KVCacheEntry>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[1];
    a2[1] = 0;
    if (v3) {
      MEMORY[0x2612065C0](v3, 0x1000C8077774924);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      MEMORY[0x2612065C0](v4, 0x1000C8077774924);
    }
    JUMPOUT(0x2612065E0);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_25FA77880(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_3()
{
  return v0;
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule::PromptExtendModule(void *this, cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *a2, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::EnumeratedShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_270BD2178;
  *((_DWORD *)this + 10) = 4;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  uint64_t v3 = (char *)this + 64;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 9) = 0;
  uint64_t v4 = (std::vector<unsigned int> *)((char *)this + 88);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPromptExtendModules(this, a2);
  unint64_t v5 = (char *)*((void *)this + 8);
  *((void *)this + 14) = *(void *)(*((void *)this + 7) + 48);
  if (v5)
  {
    do
    {
      unint64_t v6 = v5;
      unint64_t v5 = (char *)*((void *)v5 + 1);
    }
    while (v5);
  }
  else
  {
    do
    {
      unint64_t v6 = (char *)*((void *)v3 + 2);
      BOOL v7 = *(void *)v6 == (void)v3;
      uint64_t v3 = v6;
    }
    while (v7);
  }
  std::vector<unsigned int>::size_type v8 = *((void *)v6 + 4);
  *((void *)this + 6) = v8;
  std::vector<int>::reserve(v4, v8);
  return this;
}

void sub_25FA779E0(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(v2, *(void **)(v1 + 64));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v1);
  _Unwind_Resume(a1);
}

E5RT::ProgramLibrary *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPromptExtendModules(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  if (*((char *)&a2->var1.var0.var0.var0.var0.var1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&var0, a2->var1.var0.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var0.var1.var1);
  }
  else {
    std::string var0 = (std::string)a2->var1.var0.var0.var0;
  }
  E5RT::ProgramLibrary::OpenLibrary();
  if (SHIBYTE(var0.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(var0.__r_.__value_.__l.__data_);
  }
  uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(v28);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  size_t v25 = (uint64_t *)&v26;
  BOOL v22 = (unint64_t *)&v23;
  unint64_t v23 = 0;
  unint64_t v5 = *(unsigned __int8 ***)(ExportedFunctions + 16);
  if (v5)
  {
    do
    {
      TGIE5ModelConfiguration::mutableWeightsSymbolToPath(a2, v5 + 2, (uint64_t)&var0);
      if (cgm::token_generation_inference::ajax::utils::isPromptFunctionName((char *)v5 + 16)) {
        operator new();
      }
      if (cgm::token_generation_inference::ajax::utils::isExtendFunctionName((char *)v5 + 16)) {
        operator new();
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&var0);
      unint64_t v5 = (unsigned __int8 **)*v5;
    }
    while (v5);
    if (v27 != v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Number of prompt functions doesn't match number of extend functions");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  unint64_t v6 = v22;
  if (v22 != (unint64_t *)&v23)
  {
    BOOL v7 = (uint64_t **)((char *)this + 56);
    do
    {
      var0.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 4);
      std::vector<unsigned int>::size_type v8 = (E5RT::ExecutionStreamOperation **)std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v25, v6 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&var0)[5];
      if (!v8)
      {
        unint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v18, v6[4]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Prompt function for state length: ", &v18, &v19);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" doesn't exist", &v19, &var0);
        std::runtime_error::runtime_error(v16, &var0);
        v16->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
      }
      cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v6[5], (uint64_t)&var0);
      cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::setUp(v8, (const cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&var0);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (var0.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)var0.__r_.__value_.__l.__size_);
      }
      std::string::size_type v9 = v6[5];
      var0.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      var0.__r_.__value_.__l.__size_ = v9;
      std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>(v7, v6 + 4, v6 + 4, (long long *)&var0);
      std::string::size_type size = (uint64_t *)var0.__r_.__value_.__l.__size_;
      var0.__r_.__value_.__l.__size_ = 0;
      if (size) {
        std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)&var0.__r_.__value_.__l.__size_, size);
      }
      unint64_t v11 = (uint64_t *)var0.__r_.__value_.__r.__words[0];
      var0.__r_.__value_.__r.__words[0] = 0;
      if (v11) {
        std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)&var0, v11);
      }
      unint64_t v12 = (unint64_t *)v6[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          unint64_t v12 = (unint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (unint64_t *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          unint64_t v6 = v13;
        }
        while (!v14);
      }
      unint64_t v6 = v13;
    }
    while (v13 != (unint64_t *)&v23);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&v25, v26);
  uint64_t result = v28;
  uint64_t v28 = 0;
  if (result) {
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_25FA77E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,char a33,void *a34)
{
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&a30, a31);
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&a33, a34);
  uint64_t v36 = *(void *)(v34 - 96);
  *(void *)(v34 - 96) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6 = strlen(__s);
  BOOL v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule::~PromptExtendModule(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule *this)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  unint64_t v5 = *(uint64_t **)this;
  *(void *)this = 0;
  if (v5) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)this, v5);
  }
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a1, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a2)
{
  if (a1 + 8 == a2) {
    return 0;
  }
  uint64_t v2 = a2[6];
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "Found null extend module from the map");
    std::runtime_error::runtime_error(exception, &v10);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  uint64_t v3 = a1 + 14;
  if (v2 == a1[14]) {
    return 0;
  }
  uint64_t v4 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(v3, v2, v4);
  }
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(v2, 0);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(v2, (uint64_t)&v10);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(*v3, (uint64_t)&v7);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::overwrite((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&v10, &v7);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10.__r_.__value_.__l.__size_);
  }
  uint64_t *v3 = v2;
  return 1;
}

void sub_25FA78178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  return *((void *)this + 10);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::purgeUnusedKeyValueCache(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(*(void *)(a1 + 112), a2, a3, *(void *)(a1 + 80));
  *(void *)(a1 + 80) -= result;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchToNextExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **this)
{
  unint64_t MaxStateLength = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(this[14]);
  uint64_t v3 = this + 8;
  uint64_t v4 = this[8];
  if (v4)
  {
    do
    {
      unint64_t v5 = *((void *)v4 + 4);
      BOOL v6 = MaxStateLength >= v5;
      if (MaxStateLength >= v5) {
        BOOL v7 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)((char *)v4 + 8);
      }
      else {
        BOOL v7 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v4;
      }
      if (!v6) {
        uint64_t v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v4;
      }
      uint64_t v4 = *v7;
    }
    while (*v7);
  }

  return cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(this, v3);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::reset(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, unint64_t a2)
{
  uint64_t v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((void *)this + 14);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Found null extend module");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  if (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v3) <= a2)
  {
    unint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Can't reset starting from index more than number of tokens processed");
    std::runtime_error::runtime_error(v11, &v12);
    v11->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  unint64_t v5 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)((char *)this + 64);
  BOOL v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 > a2;
      if (v7 <= a2) {
        std::string::size_type v9 = v6 + 1;
      }
      else {
        std::string::size_type v9 = v6;
      }
      if (v8) {
        unint64_t v5 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v6;
      }
      BOOL v6 = (void *)*v9;
    }
    while (*v9);
  }
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this, v5);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(*((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this + 14), a2);
  *((void *)this + 10) = a2;

  std::vector<int>::resize((std::vector<int> *)((char *)this + 88), a2);
}

void sub_25FA783F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  return *((void *)this + 6);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(this);
  return v1;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  uint64_t v1 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  unint64_t v3 = v2;
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v3 >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_25FA784B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(this);
  *a2 = 1;
  a2[1] = result;
  a2[2] = v4;
  a2[3] = 1;
  a2[4] = v4;
  a2[5] = v4;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPrompt(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v6 = (v5 - *a2) >> 2;
  unint64_t v7 = *(void *)(a1 + 48);
  if (v6 >= v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v39, (a2[1] - *a2) >> 2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Number of prompt tokens = ", &v39, &v40);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" greater than or equal to maxStateLength = ", &v40, &v41);
    std::to_string(&v38, *(void *)(a1 + 48));
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v33 = &v38;
    }
    else {
      long long v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v38.__r_.__value_.__l.__size_;
    }
    long long v35 = std::string::append(&v41, (const std::string::value_type *)v33, size);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v42);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  if (v4 == v5 || *(void *)(a1 + 80) >= v7)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 8))(a1, 0);
    return 0;
  }
  else
  {
    BOOL v8 = *(void **)(a1 + 64);
    if (!v8) {
      goto LABEL_40;
    }
    std::string::size_type v9 = (void *)(a1 + 64);
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= v6;
      if (v10 >= v6) {
        std::string v12 = v8;
      }
      else {
        std::string v12 = v8 + 1;
      }
      if (v11) {
        std::string::size_type v9 = v8;
      }
      BOOL v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 == (void *)(a1 + 64))
    {
LABEL_40:
      uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v41, (a2[1] - *a2) >> 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Couldn't find a module for the prompt with size: ", &v41, &v42);
      std::runtime_error::runtime_error(v37, &v42);
      v37->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
    }
    BOOL v14 = (void *)(a1 + 88);
    uint64_t v13 = *(void *)(a1 + 88);
    uint64_t v15 = (E5RT::ExecutionStream **)v9[5];
    *(void *)(a1 + 96) = v13;
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(a1 + 88), v13, v4, a2[1] - 4, (a2[1] - 4 - v4) >> 2);
    cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::forward(v15, (int **)(a1 + 88));
    int v16 = *((_DWORD *)a2[1] - 1);
    float v17 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v9[6];
    *(void *)(a1 + 112) = v17;
    cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(v17, v16, (uint64_t)(*(void *)(a1 + 96) - *v14) >> 2);
    std::string v18 = *(_DWORD **)(a1 + 96);
    unint64_t v19 = *(void *)(a1 + 104);
    if ((unint64_t)v18 >= v19)
    {
      BOOL v22 = (_DWORD *)*v14;
      uint64_t v23 = ((uint64_t)v18 - *v14) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v19 - (void)v22;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 104, v26);
        BOOL v22 = *(_DWORD **)(a1 + 88);
        std::string v18 = *(_DWORD **)(a1 + 96);
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[4 * v23];
      uint64_t v29 = &v27[4 * v26];
      *(_DWORD *)uint64_t v28 = v16;
      int v20 = v28 + 4;
      while (v18 != v22)
      {
        int v30 = *--v18;
        *((_DWORD *)v28 - 1) = v30;
        v28 -= 4;
      }
      *(void *)(a1 + 88) = v28;
      *(void *)(a1 + 96) = v20;
      *(void *)(a1 + 104) = v29;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *std::string v18 = v16;
      int v20 = v18 + 1;
    }
    *(void *)(a1 + 96) = v20;
    uint64_t result = ((uint64_t)v20 - *(void *)(a1 + 88)) >> 2;
    *(void *)(a1 + 80) = result;
  }
  return result;
}

void sub_25FA78868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v33) {
    __cxa_free_exception(v32);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, int a2)
{
  unint64_t v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((void *)this + 14);
  if (!v3) {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward();
  }
  unint64_t v5 = *((void *)this + 10);
  if (v5 >= cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v3)) {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchToNextExtendModule((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this);
  }
  unint64_t v6 = *((void *)this + 10);
  unint64_t v7 = *((void *)this + 6);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(*((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this + 14), a2, v6);
  unint64_t v8 = *((void *)this + 10) + 1;
  *((void *)this + 10) = v8;
  if (v8 >= *((void *)this + 6))
  {
    *(_DWORD *)(*((void *)this + 11) + 4 * (v6 % v7)) = a2;
  }
  else
  {
    unint64_t v9 = *((void *)this + 13);
    unint64_t v10 = (char *)*((void *)this + 12);
    if ((unint64_t)v10 >= v9)
    {
      std::string v12 = (char *)*((void *)this + 11);
      uint64_t v13 = (v10 - v12) >> 2;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = v9 - (void)v12;
      unint64_t v15 = (uint64_t)(v9 - (void)v12) >> 1;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 104, v16);
        std::string v12 = (char *)*((void *)this + 11);
        unint64_t v10 = (char *)*((void *)this + 12);
      }
      else
      {
        float v17 = 0;
      }
      std::string v18 = &v17[4 * v13];
      unint64_t v19 = &v17[4 * v16];
      *(_DWORD *)std::string v18 = a2;
      BOOL v11 = v18 + 4;
      while (v10 != v12)
      {
        int v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *((void *)this + 11) = v18;
      *((void *)this + 12) = v11;
      *((void *)this + 13) = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v10 = a2;
      BOOL v11 = v10 + 4;
    }
    *((void *)this + 12) = v11;
  }
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, char **a2)
{
  if (*((void *)this + 10))
  {
    unint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    while (v3 != v4)
    {
      int v5 = *(_DWORD *)v3;
      v3 += 4;
      cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(this, v5);
    }
  }
  else
  {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPrompt((uint64_t)this, a2);
  }
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  uint64_t v1 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(v1);
  }
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::~EnumeratedShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  *(void *)this = &unk_270BD2178;
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy((uint64_t)this + 56, *((void **)this + 8));

  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270BD2178;
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);

  JUMPOUT(0x2612065E0);
}

void std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    unint64_t v3 = (std::__shared_weak_count *)a2[2];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    JUMPOUT(0x2612065E0);
  }
}

void std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>(uint64_t a1)
{
  unint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v1 = (void *)(a1 + 16);
  unint64_t v2 = v3;
  uint64_t v4 = (uint64_t **)(v1 - 1);
  void *v1 = 0;
  if (v3) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
  int v5 = *v4;
  char *v4 = 0;
  if (v5)
  {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v4, v5);
  }
}

void std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>(uint64_t **a1, unint64_t *a2, void *a3, long long *a4)
{
  int v8 = a1 + 1;
  uint64_t v7 = a1[1];
  unint64_t v9 = a1 + 1;
  unint64_t v10 = a1 + 1;
  if (v7)
  {
    unint64_t v11 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v12 = v7[4];
        if (v11 >= v12) {
          break;
        }
        uint64_t v7 = *v10;
        unint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      if (v12 >= v11) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        unint64_t v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v13 = (char *)operator new(0x38uLL);
    v16[1] = v8;
    *((void *)v13 + 4) = *a3;
    long long v14 = *a4;
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
    *(_OWORD *)(v13 + 40) = v14;
    char v17 = 1;
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(a1, (uint64_t)v10, v9, (uint64_t *)v13);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
    return (uint64_t **)v13;
  }
  return v10;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

E5RT::ExecutionStream *cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  E5RT::ExecutionStream::CreateExecutionStream(a1);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a2 + 72))
  {
    uint64_t v4 = E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
    for (unint64_t i = *(uint64_t **)(a2 + 64); i; unint64_t i = (uint64_t *)*i)
    {
      int v6 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v4);
      uint64_t v4 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      if (v4)
      {
        uint64_t v7 = i + 2;
        if (*((char *)i + 39) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        int v8 = i + 5;
        if (*((char *)i + 63) < 0) {
          int v8 = (void *)*v8;
        }
        LODWORD(v12.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_debug_impl(&dword_25FA51000, v6, OS_LOG_TYPE_DEBUG, "Loading operation with mutable weights symbol %s from weight file %s", (uint8_t *)&v12, 0x16u);
      }
    }
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1 + 1, (uint64_t *)&v12);
  std::string::size_type v9 = v12.__r_.__value_.__r.__words[0];
  v12.__r_.__value_.__r.__words[0] = 0;
  if (v9) {
    (*(void (**)(std::string::size_type))(*(void *)v9 + 8))(v9);
  }
  if (v11) {
    (*(void (**)())(*(void *)v11 + 8))();
  }
  return a1;
}

void sub_25FA793BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  int v20 = (std::__shared_weak_count *)v18[2];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = *v18;
  *std::string v18 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

double cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort@<D0>(_OWORD *a1@<X8>)
{
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetMemoryObject((uint64_t *)&v4, InputPortRef);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToOutputPort@<D0>(_OWORD *a1@<X8>)
{
  uint64_t OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::IOPort::GetMemoryObject((uint64_t *)&v4, OutputPortRef);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan()
{
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  unint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);

  return E5RT::BufferObject::GetDataSpan(v2);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inoutSpan()
{
  uint64_t v0 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v0);
  unint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);

  return E5RT::BufferObject::GetDataSpan(v2);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan()
{
  uint64_t OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(OutputPortRef);
  unint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);

  return E5RT::BufferObject::GetDataSpan(v2);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  uint64_t v3 = E5RT::ExecutionStreamOperation::GetInOutPorts(this[1]);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[1]);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(*(uint64_t **)(InputPorts + 16), 0);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(*(uint64_t **)(v3 + 16), 0);
  int v5 = *(uint64_t **)(OutputPorts + 16);

  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(v5, 0);
}

void std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v10 = v2;
    uint64_t v11 = v3;
    int v5 = a1;
    do
    {
      E5RT::IOPort::GetMemoryObject(&v8, (E5RT::IOPort *)v5[5]);
      uint64_t v7 = v8;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (!v7) {
        cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindNewMemoryToPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)v5[5], v6);
      }
      int v5 = (uint64_t *)*v5;
    }
    while (v5 != a2);
  }
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[1]);
  for (unint64_t i = *(uint64_t ***)(InputPorts + 16); i; unint64_t i = (uint64_t **)*i)
    cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)i[5], v3);
  for (j = *(uint64_t ***)(OutputPorts + 16); j; j = (uint64_t **)*j)
    cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)j[5], v3);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getTensorDescriptorForPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, const E5RT::IOPort *a2)
{
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v7, this);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v6, "Found a null pointer to a port descriptor.");
    std::runtime_error::runtime_error(exception, &v6);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(v7))
  {
    int v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v6, "All ports should be buffers.");
    std::runtime_error::runtime_error(v5, &v6);
    v5->__vftable = (std::runtime_error_vtbl *)&unk_270BD1CC8;
  }
  uint64_t v2 = E5RT::OperandDescriptor::TensorDescriptor(v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v2;
}

void sub_25FA79830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindNewMemoryToPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
  TensorDescriptorForPort = (E5RT::TensorDescriptor *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getTensorDescriptorForPort(this, a2);
  E5RT::TensorDescriptor::GetSize(TensorDescriptorForPort);
  E5RT::BufferObject::AllocMemory();
  if (v4) {
    operator new();
  }
  E5RT::IOPort::BindMemoryObject();
  return 0;
}

void sub_25FA79960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::BindMemoryObject();
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_25FA79A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
}

void sub_25FA79A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::modelIsMilFormat(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, ".mil");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    BOOL v3 = 0;
    goto LABEL_30;
  }
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  if ((v21 & 0x80u) == 0) {
    size_t v4 = v21;
  }
  else {
    size_t v4 = v20;
  }
  std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
    BOOL v3 = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v18;
  }
  else {
    uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v21 & 0x80) != 0)
  {
    BOOL v3 = memcmp(v19, v7, v20) == 0;
    goto LABEL_27;
  }
  if (v21)
  {
    uint64_t v8 = v21 - 1;
    std::string::size_type v9 = &v19;
    do
    {
      int v11 = *(unsigned __int8 *)v9;
      std::string::size_type v9 = (void **)((char *)v9 + 1);
      int v10 = v11;
      int v13 = v7->__r_.__value_.__s.__data_[0];
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v3 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_27:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_25:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  BOOL v3 = 1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_30:
  if ((char)v21 < 0) {
    operator delete(v19);
  }
  return v3;
}

void sub_25FA79BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::modelIsE5Format(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, ".e5");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    BOOL v3 = 0;
    goto LABEL_30;
  }
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  if ((v21 & 0x80u) == 0) {
    size_t v4 = v21;
  }
  else {
    size_t v4 = v20;
  }
  std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
    BOOL v3 = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v18;
  }
  else {
    uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v21 & 0x80) != 0)
  {
    BOOL v3 = memcmp(v19, v7, v20) == 0;
    goto LABEL_27;
  }
  if (v21)
  {
    uint64_t v8 = v21 - 1;
    std::string::size_type v9 = &v19;
    do
    {
      int v11 = *(unsigned __int8 *)v9;
      std::string::size_type v9 = (void **)((char *)v9 + 1);
      int v10 = v11;
      int v13 = v7->__r_.__value_.__s.__data_[0];
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v3 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_27:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_25:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  BOOL v3 = 1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_30:
  if ((char)v21 < 0) {
    operator delete(v19);
  }
  return v3;
}

void sub_25FA79D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(exception_object);
}

void PresampleArgmax(uint64_t a1, int a2, int a3, int a4, int a5, void *__b)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  if (a5 <= 64)
  {
    switch(a5)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        if (!a2) {
          goto LABEL_72;
        }
        v111 = (float16x4_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          __p[1] = 0;
          float16x4_t v112 = (float16x4_t)0x400040004000400;
          __p[0] = 0;
        }
        else
        {
          float16x4_t v112 = (float16x4_t)0x400040004000400;
          int8x16_t v113 = 0uLL;
          v114.i64[0] = 0x100000001;
          v114.i64[1] = 0x100000001;
          int v115 = a2 - 1;
          int32x4_t v116 = 0uLL;
          do
          {
            int8x16_t v113 = vbslq_s8((int8x16_t)vmovl_s16(vcgt_f16(*v111, v112)), (int8x16_t)v116, v113);
            int32x4_t v116 = vaddq_s32(v116, v114);
            float16x4_t v112 = vmaxnm_f16(v112, *v111);
            v111 = (float16x4_t *)((char *)v111 + 2 * a3);
            --v115;
          }
          while (v115);
          *(int8x16_t *)std::string __p = v113;
          if (a5 < 1)
          {
LABEL_72:
            memcpy(__b, __p, 4 * a5);
            return;
          }
        }
        uint64_t v128 = 0;
        do
        {
          short float v129 = *(short float *)&v111->i16[v128];
          float16x4_t v164 = v112;
          if (v129 > *(short float *)((unint64_t)&v164 & 0xFFFFFFFFFFFFFFF9 | (2 * (v128 & 3)))) {
            *((_DWORD *)__p + v128) = a2 - 1;
          }
          ++v128;
        }
        while (a5 != v128);
        goto LABEL_72;
      case 5:
      case 6:
      case 7:
      case 8:
        if (!a2) {
          goto LABEL_72;
        }
        v117 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          *(_OWORD *)std::string __p = 0u;
          int8x16_t v171 = 0u;
          v119.i64[0] = 0x400040004000400;
          v119.i64[1] = 0x400040004000400;
        }
        else
        {
          int8x16_t v118 = 0uLL;
          v119.i64[0] = 0x400040004000400;
          v119.i64[1] = 0x400040004000400;
          v120.i64[0] = 0x100000001;
          v120.i64[1] = 0x100000001;
          int v121 = a2 - 1;
          int8x16_t v122 = 0uLL;
          int32x4_t v123 = 0uLL;
          int32x4_t v124 = 0uLL;
          do
          {
            int16x8_t v125 = vcgtq_f16(*v117, v119);
            int8x16_t v122 = vbslq_s8((int8x16_t)vmovl_high_s16(v125), (int8x16_t)v124, v122);
            int8x16_t v118 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v125.i8), (int8x16_t)v123, v118);
            int32x4_t v123 = vaddq_s32(v123, v120);
            int32x4_t v124 = vaddq_s32(v124, v120);
            float16x8_t v119 = vmaxnmq_f16(v119, *v117);
            v117 = (float16x8_t *)((char *)v117 + 2 * a3);
            --v121;
          }
          while (v121);
          *(int8x16_t *)std::string __p = v118;
          int8x16_t v171 = v122;
          if (a5 < 1) {
            goto LABEL_72;
          }
        }
        uint64_t v130 = 0;
        do
        {
          short float v131 = *(short float *)&v117->i16[v130];
          float16x8_t v165 = v119;
          if (v131 > *(short float *)((unint64_t)&v165 & 0xFFFFFFFFFFFFFFF1 | (2 * (v130 & 7)))) {
            *((_DWORD *)__p + v130) = a2 - 1;
          }
          ++v130;
        }
        while (a5 != v130);
        goto LABEL_72;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        if (!a2) {
          goto LABEL_72;
        }
        v93 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v172 = 0u;
          int8x16_t v173 = 0u;
          *(_OWORD *)std::string __p = 0u;
          int8x16_t v171 = 0u;
          v94.i64[0] = 0x400040004000400;
          v94.i64[1] = 0x400040004000400;
          v101.i64[0] = 0x400040004000400;
          v101.i64[1] = 0x400040004000400;
        }
        else
        {
          v94.i64[0] = 0x400040004000400;
          v94.i64[1] = 0x400040004000400;
          int8x16_t v95 = 0uLL;
          v96.i64[0] = 0x100000001;
          v96.i64[1] = 0x100000001;
          int v97 = a2 - 1;
          int8x16_t v98 = 0uLL;
          int8x16_t v99 = 0uLL;
          int8x16_t v100 = 0uLL;
          v101.i64[0] = 0x400040004000400;
          v101.i64[1] = 0x400040004000400;
          int32x4_t v102 = 0uLL;
          int32x4_t v103 = 0uLL;
          int32x4_t v104 = 0uLL;
          int32x4_t v105 = 0uLL;
          do
          {
            float16x8_t v106 = v93[1];
            int16x8_t v107 = vcgtq_f16(*v93, v94);
            int16x8_t v108 = vcgtq_f16(v106, v101);
            int8x16_t v100 = vbslq_s8((int8x16_t)vmovl_high_s16(v108), (int8x16_t)v105, v100);
            int8x16_t v98 = vbslq_s8((int8x16_t)vmovl_high_s16(v107), (int8x16_t)v103, v98);
            int8x16_t v99 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v108.i8), (int8x16_t)v104, v99);
            int8x16_t v95 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v107.i8), (int8x16_t)v102, v95);
            int32x4_t v102 = vaddq_s32(v102, v96);
            int32x4_t v103 = vaddq_s32(v103, v96);
            int32x4_t v104 = vaddq_s32(v104, v96);
            int32x4_t v105 = vaddq_s32(v105, v96);
            float16x8_t v101 = vmaxnmq_f16(v101, v106);
            float16x8_t v94 = vmaxnmq_f16(v94, *v93);
            v93 = (float16x8_t *)((char *)v93 + 2 * a3);
            --v97;
          }
          while (v97);
          *(int8x16_t *)std::string __p = v95;
          int8x16_t v171 = v98;
          int8x16_t v172 = v99;
          int8x16_t v173 = v100;
          if (a5 < 1) {
            goto LABEL_72;
          }
        }
        uint64_t v126 = 0;
        do
        {
          short float v127 = *(short float *)&v93->i16[v126];
          v166[0] = v94;
          v166[1] = v101;
          if (v127 > *((short float *)v166 + (v126 & 0xF))) {
            *((_DWORD *)__p + v126) = a2 - 1;
          }
          ++v126;
        }
        while (a5 != v126);
        goto LABEL_72;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        if (!a2) {
          goto LABEL_72;
        }
        uint64_t v61 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v176 = 0u;
          int8x16_t v177 = 0u;
          int8x16_t v174 = 0u;
          int8x16_t v175 = 0u;
          int8x16_t v172 = 0u;
          int8x16_t v173 = 0u;
          v62.i64[0] = 0x400040004000400;
          v62.i64[1] = 0x400040004000400;
          v73.i64[0] = 0x400040004000400;
          v73.i64[1] = 0x400040004000400;
          v74.i64[0] = 0x400040004000400;
          v74.i64[1] = 0x400040004000400;
          v75.i64[0] = 0x400040004000400;
          v75.i64[1] = 0x400040004000400;
          *(_OWORD *)std::string __p = 0u;
          int8x16_t v171 = 0u;
        }
        else
        {
          v62.i64[0] = 0x400040004000400;
          v62.i64[1] = 0x400040004000400;
          int8x16_t v63 = 0uLL;
          v64.i64[0] = 0x100000001;
          v64.i64[1] = 0x100000001;
          int v65 = a2 - 1;
          int8x16_t v66 = 0uLL;
          int8x16_t v67 = 0uLL;
          int8x16_t v68 = 0uLL;
          int8x16_t v69 = 0uLL;
          int8x16_t v70 = 0uLL;
          int8x16_t v71 = 0uLL;
          int8x16_t v72 = 0uLL;
          v73.i64[0] = 0x400040004000400;
          v73.i64[1] = 0x400040004000400;
          v74.i64[0] = 0x400040004000400;
          v74.i64[1] = 0x400040004000400;
          v75.i64[0] = 0x400040004000400;
          v75.i64[1] = 0x400040004000400;
          int32x4_t v76 = 0uLL;
          int32x4_t v77 = 0uLL;
          int32x4_t v78 = 0uLL;
          int32x4_t v79 = 0uLL;
          int32x4_t v80 = 0uLL;
          int32x4_t v81 = 0uLL;
          int32x4_t v82 = 0uLL;
          int32x4_t v83 = 0uLL;
          do
          {
            float16x8_t v84 = v61[1];
            int16x8_t v85 = vcgtq_f16(*v61, v62);
            int16x8_t v86 = vcgtq_f16(v84, v73);
            int8x16_t v68 = vbslq_s8((int8x16_t)vmovl_high_s16(v86), (int8x16_t)v79, v68);
            int8x16_t v66 = vbslq_s8((int8x16_t)vmovl_high_s16(v85), (int8x16_t)v77, v66);
            float16x8_t v87 = v61[2];
            float16x8_t v88 = v61[3];
            int8x16_t v67 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v86.i8), (int8x16_t)v78, v67);
            int16x8_t v89 = vcgtq_f16(v87, v74);
            int8x16_t v63 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v85.i8), (int8x16_t)v76, v63);
            int8x16_t v70 = vbslq_s8((int8x16_t)vmovl_high_s16(v89), (int8x16_t)v81, v70);
            int16x8_t v90 = vcgtq_f16(v88, v75);
            int8x16_t v69 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v89.i8), (int8x16_t)v80, v69);
            int8x16_t v71 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v90.i8), (int8x16_t)v82, v71);
            int8x16_t v72 = vbslq_s8((int8x16_t)vmovl_high_s16(v90), (int8x16_t)v83, v72);
            float16x8_t v73 = vmaxnmq_f16(v73, v84);
            float16x8_t v62 = vmaxnmq_f16(v62, *v61);
            float16x8_t v74 = vmaxnmq_f16(v74, v87);
            float16x8_t v75 = vmaxnmq_f16(v75, v88);
            int32x4_t v76 = vaddq_s32(v76, v64);
            int32x4_t v77 = vaddq_s32(v77, v64);
            int32x4_t v78 = vaddq_s32(v78, v64);
            int32x4_t v79 = vaddq_s32(v79, v64);
            int32x4_t v80 = vaddq_s32(v80, v64);
            int32x4_t v81 = vaddq_s32(v81, v64);
            int32x4_t v82 = vaddq_s32(v82, v64);
            uint64_t v61 = (float16x8_t *)((char *)v61 + 2 * a3);
            int32x4_t v83 = vaddq_s32(v83, v64);
            --v65;
          }
          while (v65);
          *(int8x16_t *)std::string __p = v63;
          int8x16_t v171 = v66;
          int8x16_t v172 = v67;
          int8x16_t v173 = v68;
          int8x16_t v174 = v69;
          int8x16_t v175 = v70;
          int8x16_t v176 = v71;
          int8x16_t v177 = v72;
          if (a5 < 1) {
            goto LABEL_72;
          }
        }
        uint64_t v109 = 0;
        do
        {
          short float v110 = *(short float *)&v61->i16[v109];
          v167[0] = v62;
          v167[1] = v73;
          v167[2] = v74;
          v167[3] = v75;
          if (v110 > *((short float *)v167 + (v109 & 0x1F))) {
            *((_DWORD *)__p + v109) = a2 - 1;
          }
          ++v109;
        }
        while (a5 != v109);
        goto LABEL_72;
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        if (!a2) {
          goto LABEL_72;
        }
        int v11 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v184 = 0u;
          int8x16_t v185 = 0u;
          int8x16_t v182 = 0u;
          int8x16_t v183 = 0u;
          int8x16_t v180 = 0u;
          int8x16_t v181 = 0u;
          int8x16_t v178 = 0u;
          int8x16_t v179 = 0u;
          int8x16_t v176 = 0u;
          int8x16_t v177 = 0u;
          v49.i64[0] = 0x400040004000400;
          v49.i64[1] = 0x400040004000400;
          int8x16_t v174 = 0u;
          int8x16_t v175 = 0u;
          v50.i64[0] = 0x400040004000400;
          v50.i64[1] = 0x400040004000400;
          v24.i64[0] = 0x400040004000400;
          v24.i64[1] = 0x400040004000400;
          v51.i64[0] = 0x400040004000400;
          v51.i64[1] = 0x400040004000400;
          int8x16_t v172 = 0u;
          int8x16_t v173 = 0u;
          v52.i64[0] = 0x400040004000400;
          v52.i64[1] = 0x400040004000400;
          v53.i64[0] = 0x400040004000400;
          v53.i64[1] = 0x400040004000400;
          v54.i64[0] = 0x400040004000400;
          v54.i64[1] = 0x400040004000400;
          *(_OWORD *)std::string __p = 0u;
          int8x16_t v171 = 0u;
          v48.i64[0] = 0x400040004000400;
          v48.i64[1] = 0x400040004000400;
        }
        else
        {
          v12.i64[0] = 0x400040004000400;
          v12.i64[1] = 0x400040004000400;
          float16x8_t v162 = v12;
          int8x16_t v13 = 0uLL;
          int v14 = a2 - 1;
          int8x16_t v15 = 0uLL;
          int8x16_t v16 = 0uLL;
          int8x16_t v17 = 0uLL;
          int8x16_t v151 = 0u;
          int8x16_t v152 = 0u;
          int8x16_t v150 = 0u;
          int8x16_t v18 = 0uLL;
          int8x16_t v19 = 0uLL;
          int8x16_t v20 = 0uLL;
          int8x16_t v21 = 0uLL;
          int8x16_t v22 = 0uLL;
          int8x16_t v23 = 0uLL;
          int8x16_t v154 = 0u;
          int8x16_t v155 = 0u;
          int8x16_t v153 = 0u;
          v12.i64[0] = 0x400040004000400;
          v12.i64[1] = 0x400040004000400;
          float16x8_t v160 = v12;
          float16x8_t v161 = v12;
          v24.i64[0] = 0x400040004000400;
          v24.i64[1] = 0x400040004000400;
          float16x8_t v158 = v12;
          float16x8_t v159 = v12;
          float16x8_t v156 = v12;
          float16x8_t v157 = v12;
          int32x4_t v25 = 0uLL;
          int32x4_t v26 = 0uLL;
          int32x4_t v27 = 0uLL;
          int8x16_t v28 = 0uLL;
          int32x4_t v29 = 0uLL;
          int8x16_t v30 = 0uLL;
          int32x4_t v31 = 0uLL;
          int32x4_t v148 = 0u;
          int32x4_t v149 = 0u;
          int32x4_t v146 = 0u;
          int32x4_t v147 = 0u;
          int32x4_t v144 = 0u;
          int32x4_t v145 = 0u;
          int32x4_t v142 = 0u;
          int32x4_t v143 = 0u;
          int32x4_t v32 = 0uLL;
          do
          {
            int32x4_t v139 = (int32x4_t)v30;
            int32x4_t v140 = (int32x4_t)v28;
            float16x8_t v163 = v24;
            float16x8_t v134 = v11[2];
            int32x4_t v135 = v32;
            int16x8_t v33 = vcgtq_f16(v134, v24);
            float16x8_t v132 = v11[3];
            float16x8_t v133 = v11[1];
            int16x8_t v34 = vcgtq_f16(*v11, v162);
            int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
            int16x8_t v36 = vcgtq_f16(v133, v161);
            int8x16_t v37 = vbslq_s8((int8x16_t)vmovl_high_s16(v36), v28, v17);
            int8x16_t v141 = vbslq_s8((int8x16_t)vmovl_high_s16(v34), (int8x16_t)v26, v15);
            float16x8_t v39 = v11[4];
            float16x8_t v38 = v11[5];
            float16x8_t v40 = v11[6];
            float16x8_t v41 = v11[7];
            int8x16_t v150 = vbslq_s8((int8x16_t)vmovl_high_s16(v33), v30, v150);
            int16x8_t v42 = vcgtq_f16(v132, v160);
            int8x16_t v152 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v33.i8), (int8x16_t)v29, v152);
            int8x16_t v43 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v42.i8), (int8x16_t)v31, v18);
            int16x8_t v44 = vcgtq_f16(v39, v159);
            int8x16_t v19 = vbslq_s8((int8x16_t)vmovl_high_s16(v42), (int8x16_t)v149, v19);
            int8x16_t v136 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v44.i8), (int8x16_t)v148, v20);
            int16x8_t v45 = vcgtq_f16(v38, v158);
            int8x16_t v151 = vbslq_s8((int8x16_t)vmovl_high_s16(v44), (int8x16_t)v147, v151);
            int8x16_t v137 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v45.i8), (int8x16_t)v146, v21);
            int16x8_t v46 = vcgtq_f16(v40, v157);
            int8x16_t v138 = vbslq_s8((int8x16_t)vmovl_high_s16(v45), (int8x16_t)v145, v22);
            int8x16_t v23 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v46.i8), (int8x16_t)v144, v23);
            int16x8_t v47 = vcgtq_f16(v41, v156);
            int8x16_t v155 = vbslq_s8((int8x16_t)vmovl_high_s16(v46), (int8x16_t)v143, v155);
            int8x16_t v153 = vbslq_s8((int8x16_t)vmovl_high_s16(v47), (int8x16_t)v135, v153);
            int8x16_t v154 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v47.i8), (int8x16_t)v142, v154);
            float16x8_t v161 = vmaxnmq_f16(v161, v133);
            float16x8_t v162 = vmaxnmq_f16(v162, *v11);
            float16x8_t v24 = vmaxnmq_f16(v163, v134);
            int8x16_t v13 = vbslq_s8((int8x16_t)v35, (int8x16_t)v25, v13);
            float16x8_t v159 = vmaxnmq_f16(v159, v39);
            float16x8_t v160 = vmaxnmq_f16(v160, v132);
            int8x16_t v16 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v36.i8), (int8x16_t)v27, v16);
            int8x16_t v18 = v43;
            float16x8_t v157 = vmaxnmq_f16(v157, v40);
            float16x8_t v158 = vmaxnmq_f16(v158, v38);
            int8x16_t v17 = v37;
            int8x16_t v21 = v137;
            int8x16_t v22 = v138;
            int8x16_t v15 = v141;
            float16x8_t v156 = vmaxnmq_f16(v156, v41);
            int8x16_t v20 = v136;
            v35.i64[0] = 0x100000001;
            v35.i64[1] = 0x100000001;
            int32x4_t v25 = vaddq_s32(v25, v35);
            int32x4_t v26 = vaddq_s32(v26, v35);
            int32x4_t v27 = vaddq_s32(v27, v35);
            int8x16_t v28 = (int8x16_t)vaddq_s32(v140, v35);
            int32x4_t v29 = vaddq_s32(v29, v35);
            int8x16_t v30 = (int8x16_t)vaddq_s32(v139, v35);
            int32x4_t v31 = vaddq_s32(v31, v35);
            int32x4_t v148 = vaddq_s32(v148, v35);
            int32x4_t v149 = vaddq_s32(v149, v35);
            int32x4_t v146 = vaddq_s32(v146, v35);
            int32x4_t v147 = vaddq_s32(v147, v35);
            int32x4_t v144 = vaddq_s32(v144, v35);
            int32x4_t v145 = vaddq_s32(v145, v35);
            int32x4_t v142 = vaddq_s32(v142, v35);
            int32x4_t v143 = vaddq_s32(v143, v35);
            int v11 = (float16x8_t *)((char *)v11 + 2 * a3);
            int32x4_t v32 = vaddq_s32(v135, v35);
            --v14;
          }
          while (v14);
          *(int8x16_t *)std::string __p = v13;
          int8x16_t v171 = v141;
          int8x16_t v172 = v16;
          int8x16_t v173 = v37;
          int8x16_t v174 = v152;
          int8x16_t v175 = v150;
          int8x16_t v176 = v18;
          int8x16_t v177 = v19;
          int8x16_t v178 = v136;
          int8x16_t v179 = v151;
          int8x16_t v180 = v137;
          int8x16_t v181 = v138;
          float16x8_t v48 = v156;
          int8x16_t v182 = v23;
          int8x16_t v183 = v155;
          int8x16_t v184 = v154;
          int8x16_t v185 = v153;
          float16x8_t v50 = v161;
          float16x8_t v49 = v162;
          float16x8_t v52 = v159;
          float16x8_t v51 = v160;
          float16x8_t v54 = v157;
          float16x8_t v53 = v158;
          if (a5 < 1) {
            goto LABEL_72;
          }
        }
        uint64_t v91 = 0;
        do
        {
          short float v92 = *(short float *)&v11->i16[v91];
          v168[0] = v49;
          v168[1] = v50;
          v168[2] = v24;
          v168[3] = v51;
          v168[4] = v52;
          v168[5] = v53;
          v168[6] = v54;
          v168[7] = v48;
          if (v92 > *((short float *)v168 + (v91 & 0x3F))) {
            *((_DWORD *)__p + v91) = a2 - 1;
          }
          ++v91;
        }
        while (a5 != v91);
        goto LABEL_72;
      default:
        goto LABEL_72;
    }
  }
  uint64_t v55 = a5;
  memset_pattern4(__b, &PresampleArgmax::negativeOne, 4 * a5);
  __int16 v169 = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(__p, v55, &v169);
  uint64_t v56 = (short float *)__p[0];
  if (a2 < 1)
  {
    if (!__p[0]) {
      return;
    }
  }
  else
  {
    int v57 = 0;
    uint64_t v58 = a1 + 2 * a4;
    do
    {
      for (uint64_t i = 0; i != v55; ++i)
      {
        short float v60 = *(short float *)(v58 + 2 * i);
        if (v60 > v56[i])
        {
          v56[i] = v60;
          *((_DWORD *)__b + i) = v57;
        }
      }
      ++v57;
      v58 += 2 * a3;
    }
    while (v57 != a2);
  }
  __p[1] = v56;
  operator delete(v56);
}

void PresampleTopK2(uint64_t a1, int a2, int a3, int a4, int a5, void *__b, void *a7)
{
  uint64_t v441 = *MEMORY[0x263EF8340];
  if (a5 <= 64)
  {
    switch(a5)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        v215 = (float16x4_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          *(_OWORD *)char __src = 0u;
          *(_OWORD *)std::string __p = 0u;
          float16x4_t v216 = (float16x4_t)0x400040004000400;
          float16x4_t v222 = (float16x4_t)0x400040004000400;
        }
        else
        {
          float16x4_t v216 = (float16x4_t)0x400040004000400;
          int8x16_t v217 = 0uLL;
          v218.i64[0] = 0x100000001;
          v218.i64[1] = 0x100000001;
          int v219 = a2 - 1;
          int8x16_t v220 = 0uLL;
          int32x4_t v221 = 0uLL;
          float16x4_t v222 = (float16x4_t)0x400040004000400;
          do
          {
            int16x4_t v223 = vcgt_f16(*v215, v222);
            int8x16_t v224 = (int8x16_t)vmovl_s16(v223);
            int8x16_t v225 = (int8x16_t)vmovl_s16(vcgt_f16(*v215, v216));
            float16x4_t v216 = (float16x4_t)vbsl_s8((int8x8_t)v223, (int8x8_t)v222, (int8x8_t)vmaxnm_f16(*v215, v216));
            float16x4_t v222 = vmaxnm_f16(*v215, v222);
            int8x16_t v220 = vbslq_s8(v224, v217, vbslq_s8(v225, (int8x16_t)v221, v220));
            int8x16_t v217 = vbslq_s8(v224, (int8x16_t)v221, v217);
            int32x4_t v221 = vaddq_s32(v221, v218);
            v215 = (float16x4_t *)((char *)v215 + 2 * a3);
            --v219;
          }
          while (v219);
          *(int8x16_t *)char __src = v217;
          *(int8x16_t *)std::string __p = v220;
          if (a5 < 1)
          {
LABEL_131:
            size_t v264 = 4 * a5;
            memcpy(__b, __src, v264);
            memcpy(a7, __p, v264);
            return;
          }
        }
        uint64_t v248 = 0;
        do
        {
          short float v249 = *(short float *)&v215->i16[v248];
          float16x4_t v340 = v222;
          short float v250 = *(short float *)((unint64_t)&v340 & 0xFFFFFFFFFFFFFFF9 | (2 * (v248 & 3)));
          if (v249 <= v250)
          {
            v252 = (short float *)((unint64_t)&v339 & 0xFFFFFFFFFFFFFFF9 | (2 * (v248 & 3)));
            float16x4_t v339 = v216;
            short float v253 = *v252;
            if (v249 >= v250) {
              short float v250 = v249;
            }
            BOOL v254 = v249 <= v253;
            if (v249 >= v253) {
              short float v253 = v249;
            }
            short float *v252 = v253;
            float16x4_t v216 = v339;
            float16x4_t v338 = v222;
            *(short float *)((unint64_t)&v338 & 0xFFFFFFFFFFFFFFF9 | (2 * (v248 & 3))) = v250;
            int v255 = a2 - 1;
            if (v254) {
              int v255 = *((_DWORD *)__p + v248);
            }
            float16x4_t v222 = v338;
            *((_DWORD *)__p + v248) = v255;
            int v251 = *((_DWORD *)__src + v248);
          }
          else
          {
            float16x4_t v336 = v216;
            *(short float *)((unint64_t)&v336 & 0xFFFFFFFFFFFFFFF9 | (2 * (v248 & 3))) = v250;
            float16x4_t v216 = v336;
            if (v249 < v250) {
              short float v249 = v250;
            }
            float16x4_t v337 = v222;
            *(short float *)((unint64_t)&v337 & 0xFFFFFFFFFFFFFFF9 | (2 * (v248 & 3))) = v249;
            float16x4_t v222 = v337;
            *((_DWORD *)__p + v248) = *((_DWORD *)__src + v248);
            int v251 = a2 - 1;
          }
          *((_DWORD *)__src + v248++) = v251;
        }
        while (a5 != v248);
        goto LABEL_131;
      case 5:
      case 6:
      case 7:
      case 8:
        v226 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v426 = 0u;
          *(_OWORD *)char __src = 0u;
          int8x16_t v410 = 0u;
          *(_OWORD *)std::string __p = 0u;
          v228.i64[0] = 0x400040004000400;
          v228.i64[1] = 0x400040004000400;
          v236.i64[0] = 0x400040004000400;
          v236.i64[1] = 0x400040004000400;
        }
        else
        {
          int8x16_t v227 = 0uLL;
          v228.i64[0] = 0x400040004000400;
          v228.i64[1] = 0x400040004000400;
          v229.i64[0] = 0x100000001;
          v229.i64[1] = 0x100000001;
          int v230 = a2 - 1;
          int8x16_t v231 = 0uLL;
          int8x16_t v232 = 0uLL;
          int8x16_t v233 = 0uLL;
          int32x4_t v234 = 0uLL;
          int32x4_t v235 = 0uLL;
          v236.i64[0] = 0x400040004000400;
          v236.i64[1] = 0x400040004000400;
          do
          {
            int16x8_t v237 = vcgtq_f16(*v226, v236);
            int8x16_t v238 = (int8x16_t)vmovl_s16(*(int16x4_t *)v237.i8);
            int8x16_t v239 = (int8x16_t)vmovl_high_s16(v237);
            int16x8_t v240 = vcgtq_f16(*v226, v228);
            float16x8_t v228 = (float16x8_t)vbslq_s8((int8x16_t)v237, (int8x16_t)v236, (int8x16_t)vmaxnmq_f16(*v226, v228));
            float16x8_t v236 = vmaxnmq_f16(*v226, v236);
            int8x16_t v233 = vbslq_s8(v239, v231, vbslq_s8((int8x16_t)vmovl_high_s16(v240), (int8x16_t)v235, v233));
            int8x16_t v232 = vbslq_s8(v238, v227, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v240.i8), (int8x16_t)v234, v232));
            int8x16_t v231 = vbslq_s8(v239, (int8x16_t)v235, v231);
            int8x16_t v227 = vbslq_s8(v238, (int8x16_t)v234, v227);
            int32x4_t v234 = vaddq_s32(v234, v229);
            int32x4_t v235 = vaddq_s32(v235, v229);
            v226 = (float16x8_t *)((char *)v226 + 2 * a3);
            --v230;
          }
          while (v230);
          *(int8x16_t *)char __src = v227;
          int8x16_t v426 = v231;
          *(int8x16_t *)std::string __p = v232;
          int8x16_t v410 = v233;
          if (a5 < 1) {
            goto LABEL_131;
          }
        }
        uint64_t v256 = 0;
        do
        {
          short float v257 = *(short float *)&v226->i16[v256];
          float16x8_t v345 = v236;
          short float v258 = *(short float *)((unint64_t)&v345 & 0xFFFFFFFFFFFFFFF1 | (2 * (v256 & 7)));
          if (v257 <= v258)
          {
            v260 = (short float *)((unint64_t)&v344 & 0xFFFFFFFFFFFFFFF1 | (2 * (v256 & 7)));
            float16x8_t v344 = v228;
            short float v261 = *v260;
            if (v257 >= v258) {
              short float v258 = v257;
            }
            BOOL v262 = v257 <= v261;
            if (v257 >= v261) {
              short float v261 = v257;
            }
            short float *v260 = v261;
            float16x8_t v228 = v344;
            float16x8_t v343 = v236;
            *(short float *)((unint64_t)&v343 & 0xFFFFFFFFFFFFFFF1 | (2 * (v256 & 7))) = v258;
            int v263 = a2 - 1;
            if (v262) {
              int v263 = *((_DWORD *)__p + v256);
            }
            float16x8_t v236 = v343;
            *((_DWORD *)__p + v256) = v263;
            int v259 = *((_DWORD *)__src + v256);
          }
          else
          {
            float16x8_t v341 = v228;
            *(short float *)((unint64_t)&v341 & 0xFFFFFFFFFFFFFFF1 | (2 * (v256 & 7))) = v258;
            float16x8_t v228 = v341;
            if (v257 < v258) {
              short float v257 = v258;
            }
            float16x8_t v342 = v236;
            *(short float *)((unint64_t)&v342 & 0xFFFFFFFFFFFFFFF1 | (2 * (v256 & 7))) = v257;
            float16x8_t v236 = v342;
            *((_DWORD *)__p + v256) = *((_DWORD *)__src + v256);
            int v259 = a2 - 1;
          }
          *((_DWORD *)__src + v256++) = v259;
        }
        while (a5 != v256);
        goto LABEL_131;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        int8x16_t v178 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v428 = 0u;
          int8x16_t v427 = 0u;
          int8x16_t v426 = 0u;
          *(_OWORD *)char __src = 0u;
          int8x16_t v412 = 0u;
          int8x16_t v411 = 0u;
          v179.i64[0] = 0x400040004000400;
          v179.i64[1] = 0x400040004000400;
          v194.i64[0] = 0x400040004000400;
          v194.i64[1] = 0x400040004000400;
          int8x16_t v410 = 0u;
          v195.i64[0] = 0x400040004000400;
          v195.i64[1] = 0x400040004000400;
          v196.i64[0] = 0x400040004000400;
          v196.i64[1] = 0x400040004000400;
          *(_OWORD *)std::string __p = 0u;
        }
        else
        {
          v179.i64[0] = 0x400040004000400;
          v179.i64[1] = 0x400040004000400;
          int8x16_t v180 = 0uLL;
          v181.i64[0] = 0x100000001;
          v181.i64[1] = 0x100000001;
          int v182 = a2 - 1;
          int8x16_t v183 = 0uLL;
          int8x16_t v184 = 0uLL;
          int8x16_t v185 = 0uLL;
          int8x16_t v186 = 0uLL;
          int8x16_t v187 = 0uLL;
          int8x16_t v188 = 0uLL;
          int8x16_t v189 = 0uLL;
          int32x4_t v190 = 0uLL;
          int32x4_t v191 = 0uLL;
          int32x4_t v192 = 0uLL;
          int32x4_t v193 = 0uLL;
          v194.i64[0] = 0x400040004000400;
          v194.i64[1] = 0x400040004000400;
          v195.i64[0] = 0x400040004000400;
          v195.i64[1] = 0x400040004000400;
          v196.i64[0] = 0x400040004000400;
          v196.i64[1] = 0x400040004000400;
          do
          {
            float16x8_t v197 = v178[1];
            int16x8_t v198 = vcgtq_f16(*v178, v195);
            int8x16_t v199 = (int8x16_t)vmovl_s16(*(int16x4_t *)v198.i8);
            int16x8_t v200 = vcgtq_f16(v197, v196);
            int8x16_t v201 = (int8x16_t)vmovl_s16(*(int16x4_t *)v200.i8);
            int8x16_t v202 = (int8x16_t)vmovl_high_s16(v198);
            int8x16_t v203 = (int8x16_t)vmovl_high_s16(v200);
            int16x8_t v204 = vcgtq_f16(v197, v194);
            int16x8_t v205 = vcgtq_f16(*v178, v179);
            float16x8_t v194 = (float16x8_t)vbslq_s8((int8x16_t)v200, (int8x16_t)v196, (int8x16_t)vmaxnmq_f16(v197, v194));
            float16x8_t v179 = (float16x8_t)vbslq_s8((int8x16_t)v198, (int8x16_t)v195, (int8x16_t)vmaxnmq_f16(*v178, v179));
            float16x8_t v196 = vmaxnmq_f16(v197, v196);
            float16x8_t v195 = vmaxnmq_f16(*v178, v195);
            int8x16_t v189 = vbslq_s8(v203, v185, vbslq_s8((int8x16_t)vmovl_high_s16(v204), (int8x16_t)v193, v189));
            int8x16_t v187 = vbslq_s8(v202, v183, vbslq_s8((int8x16_t)vmovl_high_s16(v205), (int8x16_t)v191, v187));
            int8x16_t v188 = vbslq_s8(v201, v184, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v204.i8), (int8x16_t)v192, v188));
            int8x16_t v186 = vbslq_s8(v199, v180, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v205.i8), (int8x16_t)v190, v186));
            int8x16_t v185 = vbslq_s8(v203, (int8x16_t)v193, v185);
            int8x16_t v183 = vbslq_s8(v202, (int8x16_t)v191, v183);
            int8x16_t v184 = vbslq_s8(v201, (int8x16_t)v192, v184);
            int8x16_t v180 = vbslq_s8(v199, (int8x16_t)v190, v180);
            int32x4_t v190 = vaddq_s32(v190, v181);
            int32x4_t v191 = vaddq_s32(v191, v181);
            int32x4_t v192 = vaddq_s32(v192, v181);
            int32x4_t v193 = vaddq_s32(v193, v181);
            int8x16_t v178 = (float16x8_t *)((char *)v178 + 2 * a3);
            --v182;
          }
          while (v182);
          *(int8x16_t *)char __src = v180;
          int8x16_t v426 = v183;
          int8x16_t v427 = v184;
          int8x16_t v428 = v185;
          *(int8x16_t *)std::string __p = v186;
          int8x16_t v410 = v187;
          int8x16_t v411 = v188;
          int8x16_t v412 = v189;
          if (a5 < 1) {
            goto LABEL_131;
          }
        }
        uint64_t v241 = 0;
        do
        {
          short float v242 = *(short float *)&v178->i16[v241];
          v355[0] = v195;
          v355[1] = v196;
          short float v243 = *((short float *)v355 + (v241 & 0xF));
          if (v242 <= v243)
          {
            v354[0] = v179;
            v354[1] = v194;
            short float v245 = *((short float *)v354 + (v241 & 0xF));
            if (v242 >= v243) {
              short float v243 = v242;
            }
            BOOL v246 = v242 <= v245;
            if (v242 < v245) {
              short float v242 = *((short float *)v354 + (v241 & 0xF));
            }
            float16x8_t v352 = v179;
            float16x8_t v353 = v194;
            *(short float *)&v352.i16[v241 & 0xF] = v242;
            float16x8_t v179 = v352;
            float16x8_t v194 = v353;
            float16x8_t v350 = v195;
            float16x8_t v351 = v196;
            *(short float *)&v350.i16[v241 & 0xF] = v243;
            int v247 = a2 - 1;
            if (v246) {
              int v247 = *((_DWORD *)__p + v241);
            }
            float16x8_t v195 = v350;
            float16x8_t v196 = v351;
            *((_DWORD *)__p + v241) = v247;
            int v244 = *((_DWORD *)__src + v241);
          }
          else
          {
            float16x8_t v348 = v179;
            float16x8_t v349 = v194;
            *(short float *)&v348.i16[v241 & 0xF] = v243;
            float16x8_t v179 = v348;
            float16x8_t v194 = v349;
            if (v242 < v243) {
              short float v242 = v243;
            }
            float16x8_t v346 = v195;
            float16x8_t v347 = v196;
            *(short float *)&v346.i16[v241 & 0xF] = v242;
            float16x8_t v196 = v347;
            float16x8_t v195 = v346;
            *((_DWORD *)__p + v241) = *((_DWORD *)__src + v241);
            int v244 = a2 - 1;
          }
          *((_DWORD *)__src + v241++) = v244;
        }
        while (a5 != v241);
        goto LABEL_131;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        float16x8_t v106 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v432 = 0u;
          int8x16_t v431 = 0u;
          int8x16_t v430 = 0u;
          int8x16_t v429 = 0u;
          int8x16_t v428 = 0u;
          int8x16_t v427 = 0u;
          int8x16_t v426 = 0u;
          *(_OWORD *)char __src = 0u;
          int8x16_t v416 = 0u;
          int8x16_t v415 = 0u;
          int8x16_t v414 = 0u;
          v107.i64[0] = 0x400040004000400;
          v107.i64[1] = 0x400040004000400;
          int8x16_t v413 = 0u;
          v168.i64[0] = 0x400040004000400;
          v168.i64[1] = 0x400040004000400;
          v167.i64[0] = 0x400040004000400;
          v167.i64[1] = 0x400040004000400;
          int8x16_t v412 = 0u;
          v166.i64[0] = 0x400040004000400;
          v166.i64[1] = 0x400040004000400;
          int8x16_t v411 = 0u;
          v132.i64[0] = 0x400040004000400;
          v132.i64[1] = 0x400040004000400;
          v133.i64[0] = 0x400040004000400;
          v133.i64[1] = 0x400040004000400;
          int8x16_t v410 = 0u;
          v134.i64[0] = 0x400040004000400;
          v134.i64[1] = 0x400040004000400;
          *(_OWORD *)std::string __p = 0u;
          v135.i64[0] = 0x400040004000400;
          v135.i64[1] = 0x400040004000400;
        }
        else
        {
          v107.i64[0] = 0x400040004000400;
          v107.i64[1] = 0x400040004000400;
          int8x16_t v108 = 0uLL;
          int v109 = a2 - 1;
          int8x16_t v110 = 0uLL;
          int8x16_t v111 = 0uLL;
          int8x16_t v335 = 0u;
          int8x16_t v112 = 0uLL;
          int8x16_t v113 = 0uLL;
          int8x16_t v114 = 0uLL;
          int8x16_t v115 = 0uLL;
          int8x16_t v116 = 0uLL;
          int8x16_t v327 = 0u;
          int8x16_t v117 = 0uLL;
          int8x16_t v118 = 0uLL;
          int8x16_t v119 = 0uLL;
          int8x16_t v120 = 0uLL;
          int8x16_t v121 = 0uLL;
          int32x4_t v122 = 0uLL;
          int32x4_t v123 = 0uLL;
          int32x4_t v124 = 0uLL;
          int32x4_t v125 = 0uLL;
          int32x4_t v126 = 0uLL;
          int32x4_t v127 = 0uLL;
          int32x4_t v128 = 0uLL;
          int32x4_t v129 = 0uLL;
          v130.i64[0] = 0x400040004000400;
          v130.i64[1] = 0x400040004000400;
          v131.i64[0] = 0x400040004000400;
          v131.i64[1] = 0x400040004000400;
          float16x8_t v329 = v131;
          int8x16_t v331 = 0u;
          float16x8_t v333 = v131;
          v132.i64[0] = 0x400040004000400;
          v132.i64[1] = 0x400040004000400;
          v133.i64[0] = 0x400040004000400;
          v133.i64[1] = 0x400040004000400;
          v134.i64[0] = 0x400040004000400;
          v134.i64[1] = 0x400040004000400;
          v135.i64[0] = 0x400040004000400;
          v135.i64[1] = 0x400040004000400;
          do
          {
            int8x16_t v315 = v116;
            int8x16_t v317 = v121;
            int8x16_t v319 = v117;
            int8x16_t v321 = v112;
            int8x16_t v323 = v114;
            int8x16_t v325 = v108;
            float16x8_t v136 = v106[2];
            float16x8_t v137 = v106[3];
            int16x8_t v138 = vcgtq_f16(v137, v135);
            int8x16_t v139 = v118;
            int16x8_t v140 = vcgtq_f16(v136, v134);
            float16x8_t v141 = v106[1];
            int8x16_t v142 = v119;
            int16x8_t v143 = vcgtq_f16(*v106, v132);
            int16x8_t v144 = vcgtq_f16(v141, v133);
            int16x8_t v145 = vcgtq_f16(v141, v130);
            int8x16_t v313 = vbslq_s8((int8x16_t)v144, (int8x16_t)v133, (int8x16_t)vmaxnmq_f16(v141, v130));
            float16x8_t v133 = vmaxnmq_f16(v141, v133);
            int16x8_t v146 = vcgtq_f16(*v106, v107);
            int8x16_t v147 = vbslq_s8((int8x16_t)v143, (int8x16_t)v132, (int8x16_t)vmaxnmq_f16(*v106, v107));
            int16x8_t v148 = vcgtq_f16(v136, v329);
            float16x8_t v329 = (float16x8_t)vbslq_s8((int8x16_t)v140, (int8x16_t)v134, (int8x16_t)vmaxnmq_f16(v136, v329));
            float16x8_t v134 = vmaxnmq_f16(v136, v134);
            int16x8_t v149 = vcgtq_f16(v137, v333);
            float16x8_t v333 = (float16x8_t)vbslq_s8((int8x16_t)v138, (int8x16_t)v135, (int8x16_t)vmaxnmq_f16(v137, v333));
            float16x8_t v135 = vmaxnmq_f16(v137, v135);
            int8x16_t v150 = vbslq_s8((int8x16_t)vmovl_high_s16(v149), (int8x16_t)v129, v317);
            int8x16_t v151 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v149.i8), (int8x16_t)v128, v120);
            int8x16_t v152 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v148.i8), (int8x16_t)v126, v139);
            int8x16_t v153 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v146.i8), (int8x16_t)v122, v315);
            int8x16_t v154 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v145.i8), (int8x16_t)v124, v319);
            int8x16_t v155 = v113;
            int8x16_t v156 = v111;
            int8x16_t v157 = v110;
            int8x16_t v158 = (int8x16_t)vmovl_high_s16(v144);
            int8x16_t v331 = vbslq_s8(v158, v335, vbslq_s8((int8x16_t)vmovl_high_s16(v145), (int8x16_t)v125, v331));
            int8x16_t v335 = vbslq_s8(v158, (int8x16_t)v125, v335);
            float16x8_t v132 = vmaxnmq_f16(*v106, v132);
            int8x16_t v159 = (int8x16_t)vmovl_high_s16(v143);
            int8x16_t v327 = vbslq_s8(v159, v157, vbslq_s8((int8x16_t)vmovl_high_s16(v146), (int8x16_t)v123, v327));
            int8x16_t v110 = vbslq_s8(v159, (int8x16_t)v123, v157);
            int8x16_t v160 = (int8x16_t)vmovl_s16(*(int16x4_t *)v144.i8);
            int8x16_t v117 = vbslq_s8(v160, v156, v154);
            int8x16_t v111 = vbslq_s8(v160, (int8x16_t)v124, v156);
            int8x16_t v161 = (int8x16_t)vmovl_s16(*(int16x4_t *)v143.i8);
            int8x16_t v116 = vbslq_s8(v161, v325, v153);
            float16x8_t v107 = (float16x8_t)v147;
            int8x16_t v108 = vbslq_s8(v161, (int8x16_t)v122, v325);
            int8x16_t v162 = (int8x16_t)vmovl_high_s16(v140);
            int8x16_t v119 = vbslq_s8(v162, v155, vbslq_s8((int8x16_t)vmovl_high_s16(v148), (int8x16_t)v127, v142));
            float16x8_t v130 = (float16x8_t)v313;
            int8x16_t v113 = vbslq_s8(v162, (int8x16_t)v127, v155);
            int8x16_t v163 = (int8x16_t)vmovl_s16(*(int16x4_t *)v140.i8);
            int8x16_t v118 = vbslq_s8(v163, v321, v152);
            int8x16_t v112 = vbslq_s8(v163, (int8x16_t)v126, v321);
            int8x16_t v164 = (int8x16_t)vmovl_s16(*(int16x4_t *)v138.i8);
            int8x16_t v120 = vbslq_s8(v164, v323, v151);
            int8x16_t v114 = vbslq_s8(v164, (int8x16_t)v128, v323);
            int32x4_t v165 = vmovl_high_s16(v138);
            int8x16_t v121 = vbslq_s8((int8x16_t)v165, v115, v150);
            int8x16_t v115 = vbslq_s8((int8x16_t)v165, (int8x16_t)v129, v115);
            v165.i64[0] = 0x100000001;
            v165.i64[1] = 0x100000001;
            int32x4_t v122 = vaddq_s32(v122, v165);
            int32x4_t v123 = vaddq_s32(v123, v165);
            int32x4_t v124 = vaddq_s32(v124, v165);
            int32x4_t v125 = vaddq_s32(v125, v165);
            int32x4_t v126 = vaddq_s32(v126, v165);
            int32x4_t v127 = vaddq_s32(v127, v165);
            int32x4_t v128 = vaddq_s32(v128, v165);
            float16x8_t v106 = (float16x8_t *)((char *)v106 + 2 * a3);
            int32x4_t v129 = vaddq_s32(v129, v165);
            --v109;
          }
          while (v109);
          *(int8x16_t *)char __src = v108;
          int8x16_t v426 = v110;
          int8x16_t v427 = v111;
          float16x8_t v166 = v333;
          int8x16_t v428 = v335;
          int8x16_t v429 = v112;
          int8x16_t v430 = v113;
          int8x16_t v431 = v114;
          int8x16_t v432 = v115;
          *(int8x16_t *)std::string __p = v116;
          float16x8_t v167 = v329;
          int8x16_t v410 = v327;
          int8x16_t v411 = v117;
          int8x16_t v412 = v331;
          int8x16_t v413 = v118;
          int8x16_t v414 = v119;
          int8x16_t v415 = v120;
          int8x16_t v416 = v121;
          int8x16_t v168 = v313;
          if (a5 < 1) {
            goto LABEL_131;
          }
        }
        uint64_t v206 = 0;
        do
        {
          short float v207 = *(short float *)&v106->i16[v206];
          v373[0] = v132;
          v373[1] = v133;
          v373[2] = v134;
          v373[3] = v135;
          short float v208 = *((short float *)v373 + (v206 & 0x1F));
          if (v207 <= v208)
          {
            v372[0] = v107;
            v372[1] = v168;
            v372[2] = v167;
            v372[3] = v166;
            short float v211 = *((short float *)v372 + (v206 & 0x1F));
            if (v207 >= v208) {
              short float v212 = v207;
            }
            else {
              short float v212 = v208;
            }
            BOOL v213 = v207 <= v211;
            if (v207 >= v211) {
              short float v211 = v207;
            }
            float16x8_t v368 = v107;
            int8x16_t v369 = v168;
            float16x8_t v370 = v167;
            float16x8_t v371 = v166;
            *(short float *)&v368.i16[v206 & 0x1F] = v211;
            float16x8_t v167 = v370;
            float16x8_t v166 = v371;
            float16x8_t v107 = v368;
            int8x16_t v168 = v369;
            float16x8_t v364 = v132;
            float16x8_t v365 = v133;
            float16x8_t v366 = v134;
            float16x8_t v367 = v135;
            *(short float *)&v364.i16[v206 & 0x1F] = v212;
            int v214 = a2 - 1;
            if (v213) {
              int v214 = *((_DWORD *)__p + v206);
            }
            float16x8_t v134 = v366;
            float16x8_t v135 = v367;
            float16x8_t v132 = v364;
            float16x8_t v133 = v365;
            *((_DWORD *)__p + v206) = v214;
            int v210 = *((_DWORD *)__src + v206);
          }
          else
          {
            float16x8_t v360 = v107;
            int8x16_t v361 = v168;
            float16x8_t v362 = v167;
            float16x8_t v363 = v166;
            *(short float *)&v360.i16[v206 & 0x1F] = v208;
            float16x8_t v167 = v362;
            float16x8_t v166 = v363;
            float16x8_t v107 = v360;
            int8x16_t v168 = v361;
            if (v207 >= v208) {
              short float v209 = v207;
            }
            else {
              short float v209 = v208;
            }
            float16x8_t v356 = v132;
            float16x8_t v357 = v133;
            float16x8_t v358 = v134;
            float16x8_t v359 = v135;
            *(short float *)&v356.i16[v206 & 0x1F] = v209;
            float16x8_t v134 = v358;
            float16x8_t v135 = v359;
            float16x8_t v132 = v356;
            float16x8_t v133 = v357;
            *((_DWORD *)__p + v206) = *((_DWORD *)__src + v206);
            int v210 = a2 - 1;
          }
          *((_DWORD *)__src + v206++) = v210;
        }
        while (a5 != v206);
        goto LABEL_131;
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        int8x16_t v13 = (float16x8_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          int8x16_t v440 = 0u;
          int8x16_t v439 = 0u;
          int8x16_t v438 = 0u;
          int8x16_t v437 = 0u;
          int8x16_t v436 = 0u;
          int8x16_t v435 = 0u;
          int8x16_t v434 = 0u;
          int8x16_t v433 = 0u;
          int8x16_t v432 = 0u;
          int8x16_t v431 = 0u;
          int8x16_t v430 = 0u;
          int8x16_t v429 = 0u;
          int8x16_t v428 = 0u;
          int8x16_t v427 = 0u;
          int8x16_t v426 = 0u;
          *(_OWORD *)char __src = 0u;
          int8x16_t v424 = 0u;
          int8x16_t v423 = 0u;
          int8x16_t v422 = 0u;
          int8x16_t v421 = 0u;
          int8x16_t v420 = 0u;
          int8x16_t v419 = 0u;
          v169.i64[0] = 0x400040004000400;
          v169.i64[1] = 0x400040004000400;
          float16x8_t v322 = v169;
          float16x8_t v324 = v169;
          float16x8_t v316 = v169;
          float16x8_t v318 = v169;
          int8x16_t v418 = 0u;
          int8x16_t v417 = 0u;
          float16x8_t v326 = v169;
          float16x8_t v328 = v169;
          int8x16_t v416 = 0u;
          int8x16_t v415 = 0u;
          float16x8_t v320 = v169;
          int8x16_t v414 = 0u;
          v37.i64[0] = 0x400040004000400;
          v37.i64[1] = 0x400040004000400;
          int8x16_t v413 = 0u;
          v38.i64[0] = 0x400040004000400;
          v38.i64[1] = 0x400040004000400;
          v39.i64[0] = 0x400040004000400;
          v39.i64[1] = 0x400040004000400;
          int8x16_t v412 = 0u;
          v40.i64[0] = 0x400040004000400;
          v40.i64[1] = 0x400040004000400;
          int8x16_t v411 = 0u;
          v41.i64[0] = 0x400040004000400;
          v41.i64[1] = 0x400040004000400;
          float16x8_t v334 = v169;
          int8x16_t v410 = 0u;
          v42.i64[0] = 0x400040004000400;
          v42.i64[1] = 0x400040004000400;
          *(_OWORD *)std::string __p = 0u;
          v170.i64[0] = 0x400040004000400;
          v170.i64[1] = 0x400040004000400;
          float16x8_t v330 = v169;
          float16x8_t v332 = v170;
        }
        else
        {
          v14.i64[0] = 0x400040004000400;
          v14.i64[1] = 0x400040004000400;
          float16x8_t v322 = v14;
          int8x16_t v15 = 0uLL;
          int v16 = a2 - 1;
          int8x16_t v17 = 0uLL;
          int8x16_t v18 = 0uLL;
          int8x16_t v310 = 0u;
          int8x16_t v311 = 0u;
          int8x16_t v297 = 0u;
          int8x16_t v298 = 0u;
          int8x16_t v19 = 0uLL;
          int8x16_t v20 = 0uLL;
          int8x16_t v21 = 0uLL;
          int8x16_t v22 = 0uLL;
          int8x16_t v23 = 0uLL;
          int8x16_t v24 = 0uLL;
          int8x16_t v25 = 0uLL;
          int8x16_t v26 = 0uLL;
          int8x16_t v27 = 0uLL;
          int8x16_t v306 = 0u;
          int8x16_t v307 = 0u;
          int8x16_t v308 = 0u;
          int8x16_t v309 = 0u;
          int8x16_t v304 = 0u;
          int8x16_t v305 = 0u;
          int8x16_t v302 = 0u;
          int8x16_t v303 = 0u;
          int8x16_t v299 = 0u;
          int8x16_t v300 = 0u;
          int8x16_t v291 = 0u;
          int8x16_t v293 = 0u;
          int8x16_t v295 = 0u;
          int8x16_t v296 = 0u;
          int8x16_t v287 = 0u;
          int8x16_t v289 = 0u;
          int32x4_t v285 = 0u;
          int32x4_t v286 = 0u;
          int32x4_t v283 = 0u;
          int32x4_t v284 = 0u;
          int32x4_t v28 = 0uLL;
          int8x16_t v29 = 0uLL;
          int32x4_t v314 = 0u;
          int32x4_t v30 = 0uLL;
          int8x16_t v31 = 0uLL;
          int32x4_t v281 = 0u;
          int32x4_t v282 = 0u;
          int32x4_t v32 = 0uLL;
          int32x4_t v33 = 0uLL;
          int32x4_t v34 = 0uLL;
          int32x4_t v35 = 0uLL;
          int32x4_t v36 = 0uLL;
          v14.i64[0] = 0x400040004000400;
          v14.i64[1] = 0x400040004000400;
          float16x8_t v316 = v14;
          float16x8_t v318 = v14;
          float16x8_t v324 = v14;
          float16x8_t v326 = v14;
          float16x8_t v328 = v14;
          float16x8_t v330 = v14;
          float16x8_t v320 = v14;
          v37.i64[0] = 0x400040004000400;
          v37.i64[1] = 0x400040004000400;
          v38.i64[0] = 0x400040004000400;
          v38.i64[1] = 0x400040004000400;
          v39.i64[0] = 0x400040004000400;
          v39.i64[1] = 0x400040004000400;
          v40.i64[0] = 0x400040004000400;
          v40.i64[1] = 0x400040004000400;
          v41.i64[0] = 0x400040004000400;
          v41.i64[1] = 0x400040004000400;
          float16x8_t v332 = v14;
          float16x8_t v334 = v14;
          v42.i64[0] = 0x400040004000400;
          v42.i64[1] = 0x400040004000400;
          do
          {
            int32x4_t v312 = (int32x4_t)v31;
            int8x16_t v267 = v27;
            int8x16_t v268 = v26;
            int8x16_t v269 = v25;
            int8x16_t v271 = v23;
            int8x16_t v272 = v22;
            int8x16_t v273 = v21;
            int8x16_t v274 = v19;
            int8x16_t v275 = v18;
            int8x16_t v276 = v17;
            int8x16_t v277 = v15;
            float16x8_t v44 = v13[2];
            float16x8_t v43 = v13[3];
            int16x8_t v265 = vcgtq_f16(v44, v39);
            float16x8_t v45 = v13[1];
            float16x8_t v46 = v37;
            int16x8_t v47 = vcgtq_f16(*v13, v37);
            int16x8_t v48 = vcgtq_f16(v45, v38);
            int16x8_t v49 = vcgtq_f16(v45, v316);
            float16x8_t v316 = (float16x8_t)vbslq_s8((int8x16_t)v48, (int8x16_t)v38, (int8x16_t)vmaxnmq_f16(v45, v316));
            int16x8_t v50 = vcgtq_f16(*v13, v322);
            float16x8_t v322 = (float16x8_t)vbslq_s8((int8x16_t)v47, (int8x16_t)v46, (int8x16_t)vmaxnmq_f16(*v13, v322));
            float16x8_t v266 = vmaxnmq_f16(*v13, v46);
            int16x8_t v51 = vcgtq_f16(v44, v318);
            float16x8_t v318 = (float16x8_t)vbslq_s8((int8x16_t)v265, (int8x16_t)v39, (int8x16_t)vmaxnmq_f16(v44, v318));
            float16x8_t v278 = vmaxnmq_f16(v45, v38);
            float16x8_t v279 = vmaxnmq_f16(v44, v39);
            int16x8_t v52 = vcgtq_f16(v43, v324);
            int16x8_t v53 = vcgtq_f16(v43, v40);
            float16x8_t v324 = (float16x8_t)vbslq_s8((int8x16_t)v53, (int8x16_t)v40, (int8x16_t)vmaxnmq_f16(v43, v324));
            float16x8_t v54 = vmaxnmq_f16(v43, v40);
            float16x8_t v55 = v13[4];
            float16x8_t v56 = v13[5];
            int16x8_t v57 = vcgtq_f16(v55, v326);
            int16x8_t v58 = vcgtq_f16(v55, v41);
            float16x8_t v326 = (float16x8_t)vbslq_s8((int8x16_t)v58, (int8x16_t)v41, (int8x16_t)vmaxnmq_f16(v55, v326));
            float16x8_t v280 = vmaxnmq_f16(v55, v41);
            int16x8_t v59 = vcgtq_f16(v56, v328);
            int16x8_t v60 = vcgtq_f16(v56, v334);
            float16x8_t v328 = (float16x8_t)vbslq_s8((int8x16_t)v60, (int8x16_t)v334, (int8x16_t)vmaxnmq_f16(v56, v328));
            float16x8_t v334 = vmaxnmq_f16(v56, v334);
            float16x8_t v61 = v13[6];
            float16x8_t v62 = v13[7];
            int16x8_t v63 = vcgtq_f16(v61, v330);
            int16x8_t v64 = vcgtq_f16(v61, v42);
            float16x8_t v330 = (float16x8_t)vbslq_s8((int8x16_t)v64, (int8x16_t)v42, (int8x16_t)vmaxnmq_f16(v61, v330));
            float16x8_t v270 = vmaxnmq_f16(v61, v42);
            int16x8_t v65 = vcgtq_f16(v62, v320);
            int16x8_t v66 = vcgtq_f16(v62, v332);
            float16x8_t v320 = (float16x8_t)vbslq_s8((int8x16_t)v66, (int8x16_t)v332, (int8x16_t)vmaxnmq_f16(v62, v320));
            float16x8_t v332 = vmaxnmq_f16(v62, v332);
            int8x16_t v288 = vbslq_s8((int8x16_t)vmovl_high_s16(v65), (int8x16_t)v36, v287);
            int8x16_t v290 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v65.i8), (int8x16_t)v35, v289);
            int8x16_t v67 = v24;
            int8x16_t v294 = vbslq_s8((int8x16_t)vmovl_high_s16(v59), (int8x16_t)v32, v293);
            int8x16_t v292 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v59.i8), (int8x16_t)v281, v291);
            int8x16_t v68 = vbslq_s8((int8x16_t)vmovl_high_s16(v57), (int8x16_t)v282, v299);
            int8x16_t v301 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v57.i8), (int8x16_t)v283, v300);
            int8x16_t v69 = vbslq_s8((int8x16_t)vmovl_high_s16(v52), v31, v302);
            int8x16_t v70 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v51.i8), v29, v304);
            int8x16_t v71 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v49.i8), (int8x16_t)v28, v307);
            int32x4_t v72 = (int32x4_t)v29;
            int8x16_t v73 = (int8x16_t)vmovl_high_s16(v48);
            int8x16_t v309 = vbslq_s8(v73, v311, vbslq_s8((int8x16_t)vmovl_high_s16(v49), (int8x16_t)v285, v309));
            int8x16_t v311 = vbslq_s8(v73, (int8x16_t)v285, v311);
            int8x16_t v74 = (int8x16_t)vmovl_high_s16(v47);
            int8x16_t v308 = vbslq_s8(v74, v276, vbslq_s8((int8x16_t)vmovl_high_s16(v50), (int8x16_t)v284, v308));
            int8x16_t v17 = vbslq_s8(v74, (int8x16_t)v284, v276);
            int8x16_t v75 = (int8x16_t)vmovl_s16(*(int16x4_t *)v48.i8);
            int8x16_t v307 = vbslq_s8(v75, v275, v71);
            int8x16_t v18 = vbslq_s8(v75, (int8x16_t)v28, v275);
            int8x16_t v76 = (int8x16_t)vmovl_s16(*(int16x4_t *)v47.i8);
            int8x16_t v306 = vbslq_s8(v76, v277, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v50.i8), (int8x16_t)v286, v306));
            int8x16_t v15 = vbslq_s8(v76, (int8x16_t)v286, v277);
            int8x16_t v77 = (int8x16_t)vmovl_high_s16(v265);
            int8x16_t v305 = vbslq_s8(v77, v298, vbslq_s8((int8x16_t)vmovl_high_s16(v51), (int8x16_t)v314, v305));
            int8x16_t v78 = vbslq_s8(v77, (int8x16_t)v314, v298);
            int8x16_t v79 = (int8x16_t)vmovl_s16(*(int16x4_t *)v265.i8);
            int8x16_t v304 = vbslq_s8(v79, v297, v70);
            int8x16_t v297 = vbslq_s8(v79, (int8x16_t)v72, v297);
            int8x16_t v298 = v78;
            int8x16_t v80 = (int8x16_t)vmovl_s16(*(int16x4_t *)v53.i8);
            int8x16_t v303 = vbslq_s8(v80, v274, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v52.i8), (int8x16_t)v30, v303));
            int8x16_t v19 = vbslq_s8(v80, (int8x16_t)v30, v274);
            int8x16_t v81 = (int8x16_t)vmovl_high_s16(v53);
            int8x16_t v302 = vbslq_s8(v81, v20, v69);
            int8x16_t v20 = vbslq_s8(v81, (int8x16_t)v312, v20);
            int8x16_t v82 = (int8x16_t)vmovl_s16(*(int16x4_t *)v58.i8);
            int8x16_t v300 = vbslq_s8(v82, v273, v301);
            int8x16_t v21 = vbslq_s8(v82, (int8x16_t)v283, v273);
            int8x16_t v83 = (int8x16_t)vmovl_high_s16(v58);
            float16x8_t v39 = v279;
            float16x8_t v40 = v54;
            int8x16_t v299 = vbslq_s8(v83, v272, v68);
            float16x8_t v37 = v266;
            int8x16_t v22 = vbslq_s8(v83, (int8x16_t)v282, v272);
            int8x16_t v84 = (int8x16_t)vmovl_s16(*(int16x4_t *)v60.i8);
            int8x16_t v291 = vbslq_s8(v84, v271, v292);
            int8x16_t v23 = vbslq_s8(v84, (int8x16_t)v281, v271);
            int8x16_t v85 = (int8x16_t)vmovl_high_s16(v60);
            float16x8_t v41 = v280;
            int8x16_t v293 = vbslq_s8(v85, v310, v294);
            int8x16_t v310 = vbslq_s8(v85, (int8x16_t)v32, v310);
            int8x16_t v86 = (int8x16_t)vmovl_s16(*(int16x4_t *)v64.i8);
            int8x16_t v296 = vbslq_s8(v86, v67, vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v63.i8), (int8x16_t)v33, v296));
            int8x16_t v87 = v67;
            float16x8_t v38 = v278;
            int8x16_t v24 = vbslq_s8(v86, (int8x16_t)v33, v87);
            int8x16_t v88 = (int8x16_t)vmovl_high_s16(v64);
            int8x16_t v295 = vbslq_s8(v88, v269, vbslq_s8((int8x16_t)vmovl_high_s16(v63), (int8x16_t)v34, v295));
            int8x16_t v25 = vbslq_s8(v88, (int8x16_t)v34, v269);
            int8x16_t v89 = (int8x16_t)vmovl_s16(*(int16x4_t *)v66.i8);
            int8x16_t v289 = vbslq_s8(v89, v268, v290);
            float16x8_t v42 = v270;
            int8x16_t v26 = vbslq_s8(v89, (int8x16_t)v35, v268);
            int32x4_t v90 = vmovl_high_s16(v66);
            int8x16_t v91 = vbslq_s8((int8x16_t)v90, v267, v288);
            int8x16_t v27 = vbslq_s8((int8x16_t)v90, (int8x16_t)v36, v267);
            v90.i64[0] = 0x100000001;
            v90.i64[1] = 0x100000001;
            int32x4_t v286 = vaddq_s32(v286, v90);
            int8x16_t v287 = v91;
            int32x4_t v28 = vaddq_s32(v28, v90);
            int32x4_t v284 = vaddq_s32(v284, v90);
            int32x4_t v285 = vaddq_s32(v285, v90);
            int8x16_t v29 = (int8x16_t)vaddq_s32(v72, v90);
            int32x4_t v314 = vaddq_s32(v314, v90);
            int32x4_t v30 = vaddq_s32(v30, v90);
            int8x16_t v31 = (int8x16_t)vaddq_s32(v312, v90);
            int32x4_t v282 = vaddq_s32(v282, v90);
            int32x4_t v283 = vaddq_s32(v283, v90);
            int32x4_t v281 = vaddq_s32(v281, v90);
            int32x4_t v32 = vaddq_s32(v32, v90);
            int32x4_t v33 = vaddq_s32(v33, v90);
            int32x4_t v34 = vaddq_s32(v34, v90);
            int32x4_t v35 = vaddq_s32(v35, v90);
            int8x16_t v13 = (float16x8_t *)((char *)v13 + 2 * a3);
            int32x4_t v36 = vaddq_s32(v36, v90);
            --v16;
          }
          while (v16);
          *(int8x16_t *)char __src = v15;
          int8x16_t v426 = v17;
          int8x16_t v427 = v18;
          int8x16_t v428 = v311;
          int8x16_t v429 = v297;
          int8x16_t v430 = v298;
          int8x16_t v431 = v19;
          int8x16_t v432 = v20;
          int8x16_t v433 = v21;
          int8x16_t v434 = v22;
          int8x16_t v435 = v23;
          int8x16_t v436 = v310;
          int8x16_t v437 = v24;
          int8x16_t v438 = v25;
          int8x16_t v439 = v26;
          int8x16_t v440 = v27;
          *(int8x16_t *)std::string __p = v306;
          int8x16_t v410 = v308;
          int8x16_t v411 = v307;
          int8x16_t v412 = v309;
          int8x16_t v413 = v304;
          int8x16_t v414 = v305;
          int8x16_t v415 = v303;
          int8x16_t v416 = v302;
          int8x16_t v417 = v300;
          int8x16_t v418 = v299;
          int8x16_t v419 = v291;
          int8x16_t v420 = v293;
          int8x16_t v421 = v296;
          int8x16_t v422 = v295;
          int8x16_t v423 = v289;
          int8x16_t v424 = v287;
          if (a5 < 1) {
            goto LABEL_131;
          }
        }
        uint64_t v171 = 0;
        do
        {
          short float v172 = *(short float *)&v13->i16[v171];
          v407[0] = v37;
          v407[1] = v38;
          v407[2] = v39;
          v407[3] = v40;
          v407[4] = v41;
          v407[5] = v334;
          v407[6] = v42;
          v407[7] = v332;
          short float v173 = *((short float *)v407 + (v171 & 0x3F));
          if (v172 <= v173)
          {
            v406[0] = v322;
            v406[1] = v316;
            v406[2] = v318;
            v406[3] = v324;
            v406[4] = v326;
            v406[5] = v328;
            v406[6] = v330;
            v406[7] = v320;
            short float v175 = *((short float *)v406 + (v171 & 0x3F));
            if (v172 >= v173) {
              short float v173 = v172;
            }
            BOOL v176 = v172 <= v175;
            if (v172 < v175) {
              short float v172 = *((short float *)v406 + (v171 & 0x3F));
            }
            float16x8_t v398 = v322;
            float16x8_t v399 = v316;
            float16x8_t v400 = v318;
            float16x8_t v401 = v324;
            float16x8_t v402 = v326;
            float16x8_t v403 = v328;
            float16x8_t v404 = v330;
            float16x8_t v405 = v320;
            *(short float *)&v398.i16[v171 & 0x3F] = v172;
            float16x8_t v320 = v405;
            float16x8_t v330 = v404;
            float16x8_t v328 = v403;
            float16x8_t v326 = v402;
            float16x8_t v324 = v401;
            float16x8_t v318 = v400;
            float16x8_t v316 = v399;
            float16x8_t v322 = v398;
            float16x8_t v390 = v37;
            float16x8_t v391 = v38;
            float16x8_t v392 = v39;
            float16x8_t v393 = v40;
            float16x8_t v394 = v41;
            float16x8_t v395 = v334;
            float16x8_t v396 = v42;
            float16x8_t v397 = v332;
            *(short float *)&v390.i16[v171 & 0x3F] = v173;
            int v177 = a2 - 1;
            if (v176) {
              int v177 = *((_DWORD *)__p + v171);
            }
            float16x8_t v332 = v397;
            float16x8_t v42 = v396;
            float16x8_t v334 = v395;
            float16x8_t v40 = v393;
            float16x8_t v41 = v394;
            float16x8_t v38 = v391;
            float16x8_t v39 = v392;
            float16x8_t v37 = v390;
            *((_DWORD *)__p + v171) = v177;
            int v174 = *((_DWORD *)__src + v171);
          }
          else
          {
            float16x8_t v382 = v322;
            float16x8_t v383 = v316;
            float16x8_t v384 = v318;
            float16x8_t v385 = v324;
            float16x8_t v386 = v326;
            float16x8_t v387 = v328;
            float16x8_t v388 = v330;
            float16x8_t v389 = v320;
            *(short float *)&v382.i16[v171 & 0x3F] = v173;
            float16x8_t v320 = v389;
            float16x8_t v330 = v388;
            float16x8_t v328 = v387;
            float16x8_t v326 = v386;
            float16x8_t v324 = v385;
            float16x8_t v318 = v384;
            float16x8_t v316 = v383;
            float16x8_t v322 = v382;
            if (v172 < v173) {
              short float v172 = v173;
            }
            float16x8_t v374 = v37;
            float16x8_t v375 = v38;
            float16x8_t v376 = v39;
            float16x8_t v377 = v40;
            float16x8_t v378 = v41;
            float16x8_t v379 = v334;
            float16x8_t v380 = v42;
            float16x8_t v381 = v332;
            *(short float *)&v374.i16[v171 & 0x3F] = v172;
            float16x8_t v332 = v381;
            float16x8_t v42 = v380;
            float16x8_t v334 = v379;
            float16x8_t v40 = v377;
            float16x8_t v41 = v378;
            float16x8_t v38 = v375;
            float16x8_t v39 = v376;
            float16x8_t v37 = v374;
            *((_DWORD *)__p + v171) = *((_DWORD *)__src + v171);
            int v174 = a2 - 1;
          }
          *((_DWORD *)__src + v171++) = v174;
        }
        while (a5 != v171);
        goto LABEL_131;
      default:
        goto LABEL_131;
    }
  }
  uint64_t v92 = a5;
  size_t v93 = 4 * a5;
  memset_pattern4(__b, &PresampleTopK2::negativeOne, v93);
  memset_pattern4(__b, &PresampleTopK2::negativeOne, v93);
  LOWORD(__p[0]) = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(__src, v92, __p);
  __int16 v408 = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(__p, v92, &v408);
  float16x8_t v94 = (short float *)__p[0];
  if (a2 >= 1)
  {
    int v95 = 0;
    uint64_t v96 = a1 + 2 * a4;
    int v97 = (short float *)__src[0];
    do
    {
      for (uint64_t i = 0; i != v92; ++i)
      {
        short float v99 = *(short float *)(v96 + 2 * i);
        short float v100 = v97[i];
        if (v99 <= v100)
        {
          short float v102 = v94[i];
          if (v99 >= v102) {
            short float v103 = *(short float *)(v96 + 2 * i);
          }
          else {
            short float v103 = v94[i];
          }
          v94[i] = v103;
          short float v104 = v97[i];
          if (v99 >= v104) {
            short float v104 = v99;
          }
          v97[i] = v104;
          int v105 = v95;
          if (v99 <= v102) {
            int v105 = *((_DWORD *)a7 + i);
          }
          *((_DWORD *)a7 + i) = v105;
          int v101 = *((_DWORD *)__b + i);
        }
        else
        {
          v94[i] = v100;
          if (v99 < v97[i]) {
            short float v99 = v97[i];
          }
          v97[i] = v99;
          *((_DWORD *)a7 + i) = *((_DWORD *)__b + i);
          int v101 = v95;
        }
        *((_DWORD *)__b + i) = v101;
      }
      ++v95;
      v96 += 2 * a3;
    }
    while (v95 != a2);
    float16x8_t v94 = (short float *)__p[0];
  }
  if (v94)
  {
    __p[1] = v94;
    operator delete(v94);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
}

void sub_25FA7BC6C(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0xA80];
  if (STACK[0xA80])
  {
    STACK[0xA88] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE11__vallocateB8ne180100Em(a1, a2);
    int v6 = (_WORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25FA7BDF8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE11__vallocateB8ne180100Em(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDF16_EEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS5_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDF16_EEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS5_m(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::FlexibleShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this, const TGIE5ModelConfiguration *a2)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_270BD2200;
  *((void *)this + 5) = &unk_270BD2288;
  uint64_t v4 = (cgm::token_generation_inference::ajax::utils *)std::string::basic_string[abi:ne180100]<0>(__p, "main");
  cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions(v4, (uint64_t *)&v45);
  cgm::token_generation_inference::ajax::utils::makeProgramLibrary((cgm::token_generation_inference::ajax::utils *)&a2->var1, (std::string *)LOBYTE(a2[2].var1.var0.var0.var1.var0[0]), &v42);
  int v5 = v45;
  float16x8_t v45 = 0;
  if (v5) {
    (*(void (**)(std::__fs::filesystem::path *))(v5->__pn_.__r_.__value_.__r.__words[0] + 8))(v5);
  }
  uint64_t ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v42);
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = (std::__fs::filesystem::path *)*((void *)v7 + 5);
  std::string::size_type v9 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    float16x8_t v46 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    float16x8_t v46 = 0;
  }
  float16x8_t v45 = v8;
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(v41);
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(v41);
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(v41);
  int v10 = (E5RT::ExecutionStreamOperation **)((char *)this + 48);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)this + 6, (uint64_t *)&v40);
  int v11 = v40;
  float16x8_t v40 = 0;
  if (v11) {
    int v11 = (E5RT::ExecutionStream *)(*(uint64_t (**)(E5RT::ExecutionStream *))(*(void *)v11 + 8))(v11);
  }
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&v40, v11);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)this + 8, (uint64_t *)&v40);
  uint64_t v12 = (uint64_t)v40;
  float16x8_t v40 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  int8x16_t v13 = v41;
  float16x8_t v41 = 0;
  if (v13) {
    (*(void (**)(E5RT::PrecompiledComputeOpCreateOptions *))(*(void *)v13 + 8))(v13);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  float16x8_t v14 = v42;
  float16x8_t v42 = 0;
  if (v14) {
    (*(void (**)(E5RT::ProgramLibrary *))(*(void *)v14 + 8))(v14);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  int8x16_t v15 = (void *)E5RT::ExecutionStreamOperation::GetInOutPorts(*v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  int v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v15, (unsigned __int8 *)__p);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v45, *((E5RT::IOPort **)v16 + 5));
  int8x16_t v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v45);
  uint64_t v18 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v17) + 24);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 10) = v18;
  int8x16_t v19 = (void *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  int8x16_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v19, (unsigned __int8 *)__p);
  if (!v20) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v45, *((E5RT::IOPort **)v20 + 5));
  int8x16_t v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v45);
  uint64_t v22 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v21) + 16);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 11) = v22;
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  int8x16_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)__p);
  if (!v24) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v45, *((E5RT::IOPort **)v24 + 5));
  int8x16_t v25 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v45);
  uint64_t v26 = *(void *)(*(void *)E5RT::TensorDescriptor::GetTensorShape(v25) + 16);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 12) = v26;
  if (*((char *)&a2[2].var1.var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), a2[2].var1.var0.var0.var0.var0.var1.var0, a2[2].var1.var0.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v27 = *(_OWORD *)a2[2].var1.var0.var0.var0.var0.var0.var0;
    *((void *)this + 15) = *((void *)&a2[2].var1.var0.var0.var0.var0.var1 + 2);
    *(_OWORD *)((char *)this + 104) = v27;
  }
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  int32x4_t v28 = (void *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  int8x16_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v28, (unsigned __int8 *)__p);
  if (!v29) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v45, *((E5RT::IOPort **)v29 + 5));
  int32x4_t v30 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v45);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v30);
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 22, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  int32x4_t v32 = (void *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  int32x4_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v32, (unsigned __int8 *)__p);
  if (!v33) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v45, *((E5RT::IOPort **)v33 + 5));
  int32x4_t v34 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v45);
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v34);
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)this + 25, *(const void **)TensorStrides, *(void *)(TensorStrides + 8), (uint64_t)(*(void *)(TensorStrides + 8) - *(void *)TensorStrides) >> 3);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  *((unsigned char *)this + 224) = 0;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::checkIOTypes(this);
  int32x4_t v36 = (E5RT::ExecuteOptions *)cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(*v10, 2);
  E5RT::ExecuteOptions::Create((uint64_t *)__p, v36);
  long long v37 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  float16x8_t v38 = (std::__shared_weak_count *)*((void *)this + 21);
  *((_OWORD *)this + 10) = v37;
  if (v38)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  return this;
}

void sub_25FA7C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  long long v27 = *v25;
  if (*v25)
  {
    *(void *)(v21 + 208) = v27;
    operator delete(v27);
  }
  int32x4_t v28 = *v24;
  if (*v24)
  {
    *(void *)(v21 + 184) = v28;
    operator delete(v28);
  }
  int8x16_t v29 = *(std::__shared_weak_count **)(v21 + 168);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v21 + 127) < 0) {
    operator delete(*v23);
  }
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::~AJAXKVCache(v22);
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v21);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::checkIOTypes(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  uint64_t v4 = (E5RT::ExecutionStreamOperation *)*((void *)this + 6);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  BOOL v3 = (E5RT::ExecutionStreamOperation **)((char *)this + 48);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_ids");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v6 = (void *)E5RT::ExecutionStreamOperation::GetInOutPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_keys_state");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v6, (unsigned __int8 *)&__p))
  {
    int8x16_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v19, 1, &v32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values_state");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v6, (unsigned __int8 *)&__p))
  {
    int8x16_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v20, 1, &v32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p))
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v21, 1, &v32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "in_cached_keys_state");
  uint64_t v8 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&__p, v8);
  std::string::size_type v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "in_cached_values_state");
  int v10 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&__p, v10);
  int v11 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (isV4)
  {
    uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v9);
    memset(&v32, 0, sizeof(v32));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v32, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
    uint64_t v14 = E5RT::TensorDescriptor::GetTensorShape(v11);
    int8x16_t v15 = (void *)v32.__r_.__value_.__r.__words[0];
    std::string::size_type v16 = v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0];
    if (v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0] != *(void *)(v14 + 8) - *(void *)v14
      || memcmp(v32.__r_.__value_.__l.__data_, *(const void **)v14, v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]))
    {
      uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Key shape must match the value shape");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v22, 1, &__p);
    }
    if (v16 != 40)
    {
      int8x16_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "KeyValue cache shape size is not equal to 5");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v23, 1, &__p);
    }
    if (v15[1] != 1)
    {
      int8x16_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Second dimension of kv cache must be 1");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v24, 1, &__p);
    }
    if (v15[3] != *((void *)this + 10))
    {
      int8x16_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Fourth dimension of kv cache must be equal to max state length");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v25, 1, &__p);
    }
    if (v15[2] != *((void *)this + 11))
    {
      uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Third dimension of kv cache must be equal to number of attention heads");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v26, 1, &__p);
    }
    E5RT::TensorDataType::TensorDataType();
    E5RT::TensorDescriptor::GetTensorDataTypeRef(v9);
    if (E5RT::operator!=())
    {
      int32x4_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Key data type is not Float 16");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v28, 1, &__p);
    }
    E5RT::TensorDescriptor::GetTensorDataType((uint64_t *)&__p, v11);
    int v17 = E5RT::operator!=();
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
    if (v17)
    {
      int8x16_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Value data type is not Float 16");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v29, 1, &__p);
    }
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v30);
    if (v32.__r_.__value_.__r.__words[0])
    {
      v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
    && !isV4)
  {
    long long v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v32, "checkIOTypes failed, unexpected model version");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v27, 1, &v32);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_25FA7CD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
      if (a17)
      {
        a18 = (uint64_t)a17;
        operator delete(a17);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

char *cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(uint64_t a1, unint64_t a2, uint64_t a3)
{
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v45, "setKVCacheEntry is only supported for V4 model");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v45);
  }
  unint64_t v6 = *(void *)(*(void *)a3 + 24);
  if (v6 + a2 + *(void *)(a1 + 144) > *(void *)(a1 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "Failed to set kv cache entry, invalid range: ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("(", &v36, &v37);
    std::to_string(&v35, a2);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x16_t v15 = &v35;
    }
    else {
      int8x16_t v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    int v17 = std::string::append(&v37, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v38, &v39);
    std::to_string(&v34, v6);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x16_t v19 = &v34;
    }
    else {
      int8x16_t v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v34.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = std::string::append(&v39, (const std::string::value_type *)v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(")", &v40, &v41);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", tokens processed ", &v41, &v42);
    std::to_string(&v33, *(void *)(a1 + 144));
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x16_t v23 = &v33;
    }
    else {
      int8x16_t v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = v33.__r_.__value_.__l.__size_;
    }
    int8x16_t v25 = std::string::append(&v42, (const std::string::value_type *)v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("max state length: ", &v43, &v44);
    std::to_string(&__p, *(void *)(a1 + 80));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    int8x16_t v29 = std::string::append(&v44, (const std::string::value_type *)p_p, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    int8x16_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v31, 0, &v45);
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_keys_state");
  uint64_t v7 = (char *)cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  uint64_t v9 = v8;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_values_state");
  uint64_t v10 = cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  uint64_t v12 = v11;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  double result = cgm::token_generation_inference::ajax::utils::setKVCacheEntry(v7, v9, v10, v12, (uint64_t **)(a1 + 176), (uint64_t **)(a1 + 200), a2, a3);
  *(void *)(a1 + 144) += v6;
  return result;
}

void sub_25FA7D348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (*(char *)(v62 - 89) < 0) {
    operator delete(*(void **)(v62 - 112));
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::anonymous namespace'::isV4(E5RT::ExecutionStreamOperation **a1)
{
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(v8, "in_causal_mask");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)v8))
  {
    BOOL v3 = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_position_ids");
    BOOL v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v3, (unsigned __int8 *)__p) != 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return v4;
}

void sub_25FA7D594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>()
{
  uint64_t v0 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v0);
  uint64_t v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  uint64_t result = E5RT::BufferObject::GetDataSpan(v2);
  if (!v4) {
    return 0;
  }
  return result;
}

char *non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(a1 - 40, a2, a3);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::createKVCacheEntry(uint64_t a1, unint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  {
    std::string::size_type v4 = a2[1];
    std::string::size_type v5 = *(void *)(a1 + 144);
    if (v4 + *a2 <= v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_keys_state");
      cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values_state");
      cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      cgm::token_generation_inference::ajax::utils::createKVCacheEntry();
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *a2;
    __p.__r_.__value_.__r.__words[2] = v4;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 7399;
    std::string::size_type v12 = v5;
    memset(&v8, 0, sizeof(v8));
    v9[0] = 3;
    v9[1] = (uint64_t)&__p;
    v9[2] = 7399;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v8, "Failed to create kv cache entry, invalid range: (%z, %z), tokens processed: %z", 78, v9);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v8);
  }
  unint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&__p, "createKVCacheEntry is only supported for V4 model");
  cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v6, 0, &__p);
}

void sub_25FA7D804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::createKVCacheEntry(uint64_t a1, unint64_t *a2)
{
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((void *)this + 18);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(uint64_t a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, v2);
  BOOL v3 = (void **)v2;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_25FA7D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this, int **a2, uint64_t *a3)
{
  if (*((unsigned char *)this + 224)) {
    cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward();
  }
  if (*a3 != a3[1]
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "prompt modules are not supported for non-V4 model");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v54);
  }
  char v7 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = (char *)v6 - (char *)*a2;
  uint64_t v9 = *((void *)this + 18);
  if ((unint64_t)(v9 + (v8 >> 2)) > *((void *)this + 10))
  {
    std::string v42 = __cxa_allocate_exception(0x18uLL);
    unint64_t v43 = *((void *)this + 10);
    std::string::basic_string[abi:ne180100]<0>(&v54, "forward");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v43, (uint64_t)&v54, (uint64_t)v42);
  }
  unint64_t v10 = v8 >> 2;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize((E5RT::ExecutionStream **)this, v9, (std::__shared_weak_count *)(v8 >> 2), 1);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 7);
  uint64_t v52 = *((void *)this + 6);
  int16x8_t v53 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  uint64_t v12 = *((void *)this + 18);
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, "in_relative_positions");
    uint64_t v13 = (void *)_ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
    unint64_t v15 = v14;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if ((uint64_t)(2 * v15) >= 1) {
      memset_pattern16(v13, &unk_25FB5F160, 2 * (((2 * v15) >> 1) - (2 * v15 != 1)) + 2);
    }
    unint64_t v16 = *((void *)this + 18);
    memset(&v54, 0, sizeof(v54));
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions((short float *)v13, v15, v16, v10, v10, 1, (uint64_t)&v54);
    if (v54.__r_.__value_.__r.__words[0])
    {
      v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
      operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v17 = v12 + v10;
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, "in_self_attention_logit_biases");
      v46.__r_.__value_.__r.__words[0] = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
      v46.__r_.__value_.__l.__size_ = v18;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      int8x16_t v19 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v46, 0, v17 * v10 * *((void *)this + 11));
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v46.__r_.__value_.__l.__size_ = v20;
      if ((uint64_t)(2 * v20) >= 1) {
        memset_pattern16(v19, &unk_25FB5F160, 2 * (((2 * v20) >> 1) - (2 * v20 != 1)) + 2);
      }
      cgm::token_generation_inference::ajax::utils::fillWithALiBi((uint64_t)&v46, *((void *)this + 11), v17, *((void *)this + 18), v10);
    }
    else
    {
      {
        std::string v45 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v54, "Failed to run inference, unexpected model version");
        cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v45, 1, &v54);
      }
      std::string::basic_string[abi:ne180100]<0>(&v54, "in_position_ids");
      v46.__r_.__value_.__r.__words[0] = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
      v46.__r_.__value_.__l.__size_ = v21;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      v46.__r_.__value_.__r.__words[0] = E5RT::Span<int,18446744073709551615ul>::Slice(&v46, 0, v10);
      v46.__r_.__value_.__l.__size_ = v22;
      std::string::basic_string[abi:ne180100]<0>(&v54, "in_causal_mask");
      uint64_t v50 = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
      uint64_t v51 = v23;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      std::string::size_type v24 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v50, 0, v17 * v10);
      uint64_t v26 = (uint64_t)v24;
      uint64_t v27 = v25;
      uint64_t v50 = (uint64_t)v24;
      uint64_t v51 = v25;
      if (2 * v25 >= 1) {
        memset_pattern16(v24, &unk_25FB5F160, 2 * (((unint64_t)(2 * v25) >> 1) - (2 * v25 != 1)) + 2);
      }
      cgm::token_generation_inference::ajax::utils::setCausalMaskAndPositionIds(v26, v27, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_, a3, *((void *)this + 18), a2[1] - *a2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "in_new_token_ids");
  std::string::size_type v28 = (_DWORD *)cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v6 != v7)
  {
    int8x16_t v29 = *a2;
    if (v10 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v10;
    }
    do
    {
      int v31 = *v29++;
      *v28++ = v31;
      --v30;
    }
    while (v30);
  }
  std::string v32 = (const std::string::value_type **)((char *)this + 104);
  if (*((char *)this + 127) < 0)
  {
    std::string::size_type v33 = *((void *)this + 14);
    if (!v33) {
      goto LABEL_50;
    }
    std::string::__init_copy_ctor_external(&v49, *v32, v33);
  }
  else
  {
    if (!*((unsigned char *)this + 127)) {
      goto LABEL_50;
    }
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)v32;
    v49.__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
  std::to_string(&v46, *((void *)this + 16));
  std::string v34 = std::string::insert(&v46, 0, "Inference_", 0xAuLL);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string v36 = std::string::append(&v54, "_", 1uLL);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  std::string::size_type v48 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  E5RT::ExecutionStreamOperation::SerializeInferenceFrameData();
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
LABEL_50:
  std::string v38 = (uint64_t (***)(void))*((void *)this + 4);
  if (v38)
  {
    if (*((char *)this + 31) < 0)
    {
      if (!*((void *)this + 2)) {
        goto LABEL_58;
      }
    }
    else if (!*((unsigned char *)this + 31))
    {
      goto LABEL_58;
    }
    int v39 = (**v38)(v38);
    std::string v40 = (E5RT::ExecuteOptions *)*((void *)this + 20);
    if (v39)
    {
      E5RT::ExecuteOptions::SetEnableResourceTelemetry(v40);
      E5RT::ExecuteOptions::SetExecutionIdentifier();
    }
    else
    {
      E5RT::ExecuteOptions::SetEnableResourceTelemetry(v40);
    }
  }
LABEL_58:
  uint64_t result = E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 8), *((const E5RT::ExecuteOptions **)this + 20));
  *((void *)this + 18) += v10;
  ++*((void *)this + 16);
  return result;
}

void sub_25FA7DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 89) < 0)
  {
    operator delete(*(void **)(v30 - 112));
    if ((v29 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void sub_25FA7E020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  JUMPOUT(0x25FA7E018);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize(E5RT::ExecutionStream **this, uint64_t a2, std::__shared_weak_count *a3, int a4)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  E5RT::ExecutionStream::ResetStream(this[8]);
  uint64_t v8 = this + 6;
  uint64_t v9 = this[6];
  memset(v69, 0, sizeof(v69));
  int v70 = 1065353216;
  for (uint64_t i = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInputPorts(v9) + 16); i; uint64_t i = (uint64_t *)*i)
  {
    E5RT::IOPort::GetMemoryObject((uint64_t *)&buf, (E5RT::IOPort *)i[5]);
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v73, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      long long v73 = *((_OWORD *)i + 1);
      v74.__r_.__value_.__r.__words[0] = i[4];
    }
    *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v69, (unsigned __int8 *)&v73, &v73);
    if (v74.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__r_.__value_.__r.__words[2]);
    }
    if (v74.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v73);
    }
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    __p[0] = 0;
    __p[1] = 0;
    E5RT::IOPort::BindMemoryObject();
  }
  for (j = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInOutPorts(v9) + 16); j; j = (uint64_t *)*j)
  {
    E5RT::IOPort::GetMemoryObject((uint64_t *)&buf, (E5RT::IOPort *)j[5]);
    if (*((char *)j + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v73, (const std::string::value_type *)j[2], j[3]);
    }
    else
    {
      long long v73 = *((_OWORD *)j + 1);
      v74.__r_.__value_.__r.__words[0] = j[4];
    }
    *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v69, (unsigned __int8 *)&v73, &v73);
    if (v74.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__r_.__value_.__r.__words[2]);
    }
    if (v74.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v73);
    }
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    p_std::string buf = 0;
    int8x16_t v76 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
  }
  for (k = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetOutputPorts(v9) + 16); k; k = (uint64_t *)*k)
  {
    E5RT::IOPort::GetMemoryObject((uint64_t *)&buf, (E5RT::IOPort *)k[5]);
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v73, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      long long v73 = *((_OWORD *)k + 1);
      v74.__r_.__value_.__r.__words[0] = k[4];
    }
    *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v69, (unsigned __int8 *)&v73, &v73);
    if (v74.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__r_.__value_.__r.__words[2]);
    }
    if (v74.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v73);
    }
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    uint64_t v71 = 0;
    int32x4_t v72 = 0;
    E5RT::IOPort::BindMemoryObject();
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
  }
  long long v73 = 0u;
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0u;
  LODWORD(v74.__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_keys_state");
  uint64_t v13 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v13);
  unint64_t v14 = (cgm::token_generation_inference::ajax::_anonymous_namespace_ *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_values_state");
  unint64_t v15 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v15);
  unint64_t v17 = (cgm::token_generation_inference::ajax::_anonymous_namespace_ *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_keys_state");
  std::string::size_type v18 = __p[0];
  __p[0] = 0;
  int8x16_t v80 = v18;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)&buf, (long long *)&buf);
  std::string::size_type v20 = v80;
  int8x16_t v80 = 0;
  if (v20) {
    (*(void (**)(void *))(*(void *)v20 + 8))(v20);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::size_type v21 = __p[0];
  __p[0] = 0;
  if (v21) {
    (*(void (**)(void *))(*(void *)v21 + 8))(v21);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_values_state");
  std::string::size_type v22 = __p[0];
  __p[0] = 0;
  int8x16_t v80 = v22;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)&buf, (long long *)&buf);
  uint64_t v23 = v80;
  int8x16_t v80 = 0;
  if (v23) {
    (*(void (**)(void *))(*(void *)v23 + 8))(v23);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::size_type v24 = __p[0];
  __p[0] = 0;
  if (v24) {
    (*(void (**)(void *))(*(void *)v24 + 8))(v24);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_new_token_ids");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, InputPortRef);
  uint64_t v26 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  p_std::string buf = 1;
  int8x16_t v76 = a3;
  std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, (unint64_t *)&p_buf, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
  uint64_t v27 = v71;
  uint64_t v71 = 0;
  uint64_t v68 = v27;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)__p, (long long *)__p);
  uint64_t v28 = v68;
  uint64_t v68 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v29 = v71;
  uint64_t v71 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_relative_positions");
    uint64_t v30 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v30);
    int v31 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    p_std::string buf = 2;
    int8x16_t v76 = a3;
    uint64_t v77 = 3;
    int8x16_t v78 = (char *)a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, (unint64_t *)&p_buf, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
    uint64_t v32 = v71;
    uint64_t v71 = 0;
    uint64_t v68 = v32;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)__p, (long long *)__p);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_self_attention_logit_biases");
    std::string::size_type v33 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v33);
    std::string v34 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    p_std::string buf = 2;
    int8x16_t v76 = a3;
    uint64_t v77 = 3;
    int8x16_t v78 = (char *)a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, (unint64_t *)&p_buf, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_self_attention_logit_biases");
    uint64_t v35 = v71;
    uint64_t v71 = 0;
    uint64_t v68 = v35;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)__p, (long long *)__p);
  }
  else
  {
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&buf, "reshapeForPromptSize failed, unexpected model version");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &buf);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_causal_mask");
    std::string v36 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v36);
    long long v37 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    p_std::string buf = 2;
    int8x16_t v76 = a3;
    uint64_t v77 = 3;
    int8x16_t v78 = (char *)a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, (unint64_t *)&p_buf, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_causal_mask");
    uint64_t v38 = v71;
    uint64_t v71 = 0;
    uint64_t v68 = v38;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)__p, (long long *)__p);
    uint64_t v39 = v68;
    uint64_t v68 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    if (v67 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v40 = v71;
    uint64_t v71 = 0;
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    std::string v41 = (void *)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
    std::string::basic_string[abi:ne180100]<0>(v41, "in_position_ids");
    std::string v42 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor((uint64_t *)__p, v42);
    unint64_t v43 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    p_std::string buf = 1;
    int8x16_t v76 = a3;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, (unint64_t *)&p_buf, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_position_ids");
    uint64_t v44 = v71;
    uint64_t v71 = 0;
    uint64_t v68 = v44;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v73, (unsigned __int8 *)__p, (long long *)__p);
  }
  uint64_t v45 = v68;
  uint64_t v68 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v46 = v71;
  uint64_t v71 = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*v8);
  std::string::basic_string[abi:ne180100]<0>(&buf, "out_logits");
  std::string::size_type v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&buf);
  if (!v48) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v50 = (E5RT::IOPort *)*((void *)v48 + 5);
  std::string v49 = (std::__shared_weak_count *)*((void *)v48 + 6);
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!a4) {
      goto LABEL_135;
    }
  }
  else if (!a4)
  {
    goto LABEL_135;
  }
  if (E5RT::IOPort::IsDynamic(v50))
  {
    E5RT::TensorDataType::TensorDataType();
    uint64_t v51 = this[12];
    uint64_t v52 = operator new(0x18uLL);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v52 + 3);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v52 + 3);
    void *v52 = 1;
    v52[1] = a3;
    v52[2] = v51;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    E5RT::TensorDescriptor::CreateTensorDesc();
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    int16x8_t v64 = v50;
    int16x8_t v65 = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v62 = v71;
    if (v71) {
      operator new();
    }
    uint64_t v63 = 0;
    uint64_t v71 = 0;
    E5RT_Private::SetMaxPortDescriptor();
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    if (this[19] < (E5RT::ExecutionStream *)a3)
    {
      v60[1] = (uint64_t)v50;
      float16x8_t v61 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT_Private::GetMaxPortDescriptor();
      E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)buf.__r_.__value_.__l.__data_);
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      int16x8_t v53 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)v61;
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      std::string v54 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        _os_log_impl(&dword_25FA51000, v54, OS_LOG_TYPE_DEFAULT, "Allocating a new logits buffer for numTokens: %zu", (uint8_t *)&buf, 0xCu);
      }
      E5RT::TensorDescriptor::AllocateMemory();
      std::string::basic_string[abi:ne180100]<0>(&buf, "out_logits");
      p_std::string buf = (uint64_t)&buf;
      float16x8_t v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)&p_buf);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)v55 + 5, v60);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = v60[0];
      v60[0] = 0;
      if (v56) {
        (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
      }
      this[19] = (E5RT::ExecutionStream *)a3;
    }
    uint64_t v57 = v71;
    uint64_t v71 = 0;
    if (v57) {
      (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
    }
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)__p);
  }
LABEL_135:
  cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(*v8, v69);
  this[17] = (E5RT::ExecutionStream *)a3;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v73);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v69);
}

void sub_25FA7ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v31 = a27;
  a27 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a17);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_25FA7F074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x25FA7F064);
  }
  JUMPOUT(0x25FA7F060);
}

BOOL cgm::token_generation_inference::ajax::anonymous namespace'::isV3(E5RT::ExecutionStreamOperation **a1)
{
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_25FA7F0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::anonymous namespace'::isV2(E5RT::ExecutionStreamOperation **a1)
{
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_self_attention_logit_biases");
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_25FA7F170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Span<int,18446744073709551615ul>::Slice(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((unint64_t v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_265541A50, MEMORY[0x263F8C050]);
  }
  return *a1 + 4 * a2;
}

void sub_25FA7F204(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(uint64_t a1, int **a2, uint64_t *a3)
{
  return cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward((cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *)(a1 - 40), a2, a3);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reset(uint64_t this, unint64_t a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 144) < a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    unint64_t v4 = *(void *)(v2 + 80);
    std::string::basic_string[abi:ne180100]<0>(v5, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v4, (uint64_t)v5, (uint64_t)exception);
  }
  *(void *)(this + 144) = a2;
  return this;
}

void sub_25FA7F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((void *)this + 10);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((void *)this + 12);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v10[0] = _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v10[1] = v4;
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v10, 0, *((void *)this + 12) * *((void *)this + 17));
  *a2 = *((void *)this + 17);
  a2[1] = result;
  a2[2] = v6;
  a2[3] = 1;
  uint64_t v7 = *((void *)this + 12);
  a2[4] = v7;
  a2[5] = v7;
  return result;
}

void sub_25FA7F39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::purgeUnusedKeyValueCache()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Purging key value cache entries is not yet implemented for flexible shape models.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25FA7F400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::anonymous namespace'::copyTensorDescriptor(cgm::token_generation_inference::ajax::_anonymous_namespace_ *this, const E5RT::TensorDescriptor *a2)
{
  E5RT::TensorDescriptor::GetTensorShape(this);
  E5RT::TensorDescriptor::GetTensorDataType(v3, this);
  E5RT::TensorDescriptor::CreateTensorDesc();
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v3);
}

void sub_25FA7F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void cgm::token_generation_inference::ajax::anonymous namespace'::copyTensorDescriptor(E5RT::TensorDescriptor *a1, uint64_t a2)
{
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  char v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = __p;
    do
    {
      v6[v5[2]] = v5[3];
      char v5 = (void *)*v5;
    }
    while (v5);
  }
  E5RT::TensorDescriptor::GetTensorDataType(v7, a1);
  E5RT::TensorDescriptor::CreateTensorDesc();
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v7);
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_25FA7F594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::utils **this)
{
  uint64_t v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v5 = 0;
    _os_log_impl(&dword_25FA51000, v2, OS_LOG_TYPE_DEFAULT, "GPU model moving to dynamic state.", v5, 2u);
  }
  (*((void (**)(cgm::token_generation_inference::ajax::utils **, void))*this + 1))(this, 0);
  E5RT::ExecutionStream::ResetStream(this[8]);
  uint64_t result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(this[6], v3);
  this[19] = 0;
  *((unsigned char *)this + 224) = 1;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::moveToFullyLoadedState(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize((E5RT::ExecutionStream **)this, 0, *((std::__shared_weak_count **)this + 10), 0);
  uint64_t result = cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(*((E5RT::ExecutionStreamOperation **)this + 6), 2);
  *((unsigned char *)this + 224) = 0;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::clearAllState(E5RT::ExecutionStreamOperation **this)
{
  uint64_t v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  unint64_t v3 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v2);
  uint64_t v4 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v3);
  if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v5 = v4;
    if (os_signpost_enabled(v4))
    {
      LOWORD(v8[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_25FA51000, v5, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "TGI_GPU_Clear_State", "", (uint8_t *)v8, 2u);
    }
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  uint64_t v11 = ___ZN3cgm26token_generation_inference4ajax26FlexibleShapeAJAXE5MLModel13clearAllStateEv_block_invoke;
  uint64_t v12 = &__block_descriptor_tmp_0;
  uint64_t v13 = v3;
  (*((void (**)(E5RT::ExecutionStreamOperation **, void))*this + 1))(this, 0);
  uint64_t v6 = this[6];
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(v6, v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v8);
  return ((uint64_t (*)(void *))v11)(v10);
}

void sub_25FA7F7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void (*a16)(char *))
{
}

void ___ZN3cgm26token_generation_inference4ajax26FlexibleShapeAJAXE5MLModel13clearAllStateEv_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  uint64_t v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  os_signpost_id_t v3 = *((void *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)char v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_25FA51000, v4, OS_SIGNPOST_INTERVAL_END, v3, "TGI_GPU_Clear_State", "", v5, 2u);
    }
  }
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::~FlexibleShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::~FlexibleShapeAJAXE5MLModel(this);

  JUMPOUT(0x2612065E0);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_270BD2200;
  *((void *)this + 5) = &unk_270BD2288;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  os_signpost_id_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }

  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

void *std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::ExecutionStream>::shared_ptr[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((uint64_t *)&v6, a2);
  os_signpost_id_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t *std::shared_ptr<E5RT::ExecutionStream>::shared_ptr[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25FA7F9EC(_Unwind_Exception *exception_object)
{
  os_signpost_id_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string::size_type v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25FA7FC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25FA7FCEC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string::size_type v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25FA80188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25FA80200(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::unordered_map<unsigned long,unsigned long>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_25FA80330(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *unint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25FA8054C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::StaticShapeAJAXE5MLModel(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270BD2348;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = 10;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  E5RT::ProgramLibrary::OpenLibrary();
  operator new();
}

void sub_25FA807C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2612065E0](v18, 0x1020C4016EE4530);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  unint64_t v20 = *v17;
  cgm::token_generation_inference::ajax::_anonymous_namespace_ *v17 = 0;
  if (v20) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v17, v20);
  }
  size_t v21 = *v16;
  if (*v16)
  {
    *((void *)v15 + 9) = v21;
    operator delete(v21);
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(v15);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::reset(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, std::vector<int>::size_type a2)
{
  if (*((void *)this + 6) <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    unint64_t v6 = *((void *)this + 6);
    std::string::basic_string[abi:ne180100]<0>(v7, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v6, (uint64_t)v7, (uint64_t)exception);
  }
  *((void *)this + 7) = a2;
  std::vector<int>::resize((std::vector<int> *)((char *)this + 64), a2);
  long long v4 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((void *)this + 11);

  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(v4, a2);
}

void sub_25FA80934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  return *((void *)this + 6);
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(this);
  return v1;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  uint64_t v1 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  unint64_t v3 = v2;
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v3 >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_25FA809F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this@<X0>, void *a2@<X8>)
{
  uint64_t result = cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(this);
  *a2 = 1;
  a2[1] = result;
  a2[2] = v4;
  a2[3] = 1;
  a2[4] = v4;
  a2[5] = v4;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::purgeUnusedKeyValueCache(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(*(void *)(a1 + 88), a2, a3, *(void *)(a1 + 56));
  *(void *)(a1 + 56) -= result;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  return *((void *)this + 7);
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, int a2)
{
  unint64_t v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((void *)this + 11);
  if (!v3) {
    cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward();
  }
  unint64_t v6 = *((void *)this + 6);
  unint64_t v5 = *((void *)this + 7);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(v3, a2, v5);
  unint64_t v7 = *((void *)this + 6);
  unint64_t v8 = *((void *)this + 7) + 1;
  *((void *)this + 7) = v8;
  if (v8 >= v7)
  {
    *(_DWORD *)(*((void *)this + 8) + 4 * (v5 % vstd::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 6)) = a2;
  }
  else
  {
    unint64_t v9 = *((void *)this + 10);
    unint64_t v10 = (char *)*((void *)this + 9);
    if ((unint64_t)v10 >= v9)
    {
      float v12 = (char *)*((void *)this + 8);
      uint64_t v13 = (v10 - v12) >> 2;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = v9 - (void)v12;
      unint64_t v15 = (uint64_t)(v9 - (void)v12) >> 1;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v16);
        float v12 = (char *)*((void *)this + 8);
        unint64_t v10 = (char *)*((void *)this + 9);
      }
      else
      {
        size_t v17 = 0;
      }
      uint64_t v18 = &v17[4 * v13];
      unint64_t v19 = &v17[4 * v16];
      *(_DWORD *)uint64_t v18 = a2;
      unint64_t v11 = v18 + 4;
      while (v10 != v12)
      {
        int v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *((void *)this + 8) = v18;
      *((void *)this + 9) = v11;
      *((void *)this + 10) = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v10 = a2;
      unint64_t v11 = v10 + 4;
    }
    *((void *)this + 9) = v11;
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, int **a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      int v5 = *v2++;
      cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(this, v5);
    }
    while (v2 != v3);
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  uint64_t v1 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(v1);
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::~StaticShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  *(void *)this = &unk_270BD2348;
  uint64_t v4 = (uint64_t *)*((void *)this + 11);
  unint64_t v2 = (void *)((char *)this + 88);
  unint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  int v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }

  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_270BD2348;
  uint64_t v4 = (uint64_t *)*((void *)this + 11);
  unint64_t v2 = (void *)((char *)this + 88);
  unint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  int v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);

  JUMPOUT(0x2612065E0);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_25FA80D70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25FA80F04(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_25FA81014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (*(char *)(v13 + 47) < 0) {
    operator delete(*v15);
  }

  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }

  a12 = (void **)&a9;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_25FA8110C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA8125C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA81688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA81848(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25FA8193C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA819C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v10 = v9;

  a9.super_class = (Class)TGIE5ANESessionObjC;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25FA81A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25FA81B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25FA81CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA81EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2 == 1)
  {
    uint64_t v27 = (cgm::token_generation_inference::ajax *)__cxa_begin_catch(a1);
    uint64_t v28 = *(NSObject **)(v23 + 8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      -[TGIE5BaseModelObjC load:]((uint64_t)v27, v28);
    }
    if (v22)
    {
      uint64_t v30 = (void *)MEMORY[0x263F087E8];
      uint64_t v31 = cgm::token_generation_inference::ajax::e5RunnerErrorCodeFromRuntimeError(v27, v29);
      a15 = *MEMORY[0x263F08320];
      uint64_t v32 = NSString;
      (*(void (**)(cgm::token_generation_inference::ajax *))(*(void *)v27 + 16))(v27);
      std::string::size_type v33 = [v32 stringWithFormat:@"Failed to load model: %s."];
      a16 = (uint64_t)v33;
      std::string v34 = [NSDictionary dictionaryWithObjects:&a16 forKeys:&a15 count:1];
      void *v22 = [v30 errorWithDomain:@"com.apple.TokenGenerationInference.E5Runner" code:v31 userInfo:v34];
    }
    __cxa_end_catch();
    JUMPOUT(0x25FA81E84);
  }
  _Unwind_Resume(a1);
}

void sub_25FA820F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_25FA82150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25FA821AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  std::string *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __assign_helper_atomic_property_(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::default_delete<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x2612065E0);
  }
}

void std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612065E0);
}

void std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_25FA82564(_Unwind_Exception *a1)
{
  unint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_25FA82690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type **a2)
{
  uint64_t v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_25FA827B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA82924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *TGIE5ModelTypeObjcToString(unint64_t a1)
{
  if (a1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown model type: %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_265541B70[a1];
  }

  return v1;
}

void sub_25FA82C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA830FC(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, void *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,TGIE5AdapterConfiguration *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a34);
  a34 = &a31;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = (uint64_t *)&a52;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TGIE5AdapterConfiguration>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    void v21[4] = result;
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>(result, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    size_t v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)size_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[3];
    *((void *)v17 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    std::vector<TGIE5AdapterConfiguration>::__swap_out_circular_buffer(a1, v21);
    uint64_t v11 = a1[1];
    uint64_t result = std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[3];
    *(void *)(v7 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_25FA833FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TGIE5AdapterConfiguration::~TGIE5AdapterConfiguration(TGIE5AdapterConfiguration *this)
{
  if (*((char *)&this[1].var0.var0.var0.var0.var1 + 23) < 0) {
    operator delete(this[1].var0.var0.var0.var0.var1.var0);
  }
  if (SHIBYTE(this->var0.var0.var1.var0[2]) < 0) {
    operator delete((void *)this->var0.var0.var1.var0[0]);
  }
  if (*((char *)&this->var0.var0.var0.var0.var1 + 23) < 0) {
    operator delete(this->var0.var0.var0.var0.var1.var0);
  }
}

void TGIE5Function::~TGIE5Function(TGIE5Function *this)
{
  if (this[1].var0.var0.var0.var0.var0.var0[8] && this[1].var0.var0.var0.var0.var0.var0[7] < 0) {
    operator delete((void *)this->var0.var0.var1.var0[1]);
  }
  if (*((char *)&this->var0.var0.var0.var0.var1 + 23) < 0) {
    operator delete(this->var0.var0.var0.var0.var1.var0);
  }
}

void sub_25FA835E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA83758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA838B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA83B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t TGIIsEqualAllowingNil(objc_object *a1, objc_object *a2)
{
  unint64_t v3 = a1;
  BOOL v4 = a2;
  unint64_t v5 = v4;
  if (v3 | (unint64_t)v4)
  {
    if (!v3 || v4) {
      uint64_t v6 = [(id)v3 isEqual:v4];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_25FA83C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25FA83E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TGIE5AdapterConfiguration>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 56) = *(void *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 72) = 0;
      long long v7 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v7;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      long long v8 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v8;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  std::string *result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<TGIE5Function>::__push_back_slow_path<TGIE5Function>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[64 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *((void *)v11 + 3) = *((void *)a2 + 3);
  v11[32] = 0;
  v11[56] = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v13 = a2[2];
    *((void *)v11 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v11 + 2) = v13;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    v11[56] = 1;
  }
  void v16[2] = v11 + 64;
  std::vector<TGIE5Function>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<TGIE5Function>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_25FA8421C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TGIE5Function>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TGIE5Function>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(unsigned char *)(v4 + v5 - 32) = 0;
      *(unsigned char *)(v6 - 8) = 0;
      if (*(unsigned char *)(v2 + v5 - 8))
      {
        long long v9 = *(_OWORD *)(v7 - 32);
        *(void *)(v4 + v5 - 16) = *(void *)(v7 - 16);
        *(_OWORD *)(v4 + v5 - 32) = v9;
        *(void *)(v7 - 24) = 0;
        *(void *)(v7 - 16) = 0;
        *(void *)(v7 - 32) = 0;
        *(unsigned char *)(v6 - 8) = 1;
      }
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  std::string *result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__split_buffer<TGIE5Function>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<TGIE5Function,0>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<TGIE5AdapterConfiguration>::__init_with_size[abi:ne180100]<TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<TGIE5AdapterConfiguration>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25FA843E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<TGIE5AdapterConfiguration>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<TGIE5AdapterConfiguration,TGIE5AdapterConfiguration&,TGIE5AdapterConfiguration*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25FA844B8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<TGIE5AdapterConfiguration,TGIE5AdapterConfiguration&,TGIE5AdapterConfiguration*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_25FA84590(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TGIE5Function>::__init_with_size[abi:ne180100]<TGIE5Function*,TGIE5Function*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<TGIE5Function>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5Function>,TGIE5Function*,TGIE5Function*,TGIE5Function*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25FA8462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<TGIE5Function>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5Function>,TGIE5Function*,TGIE5Function*,TGIE5Function*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function&,TGIE5Function*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25FA846F0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 64;
    do
    {
      std::__destroy_at[abi:ne180100]<TGIE5Function,0>(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function&,TGIE5Function*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), a2 + 2);
  return this;
}

void sub_25FA84778(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

std::string *std::__fs::filesystem::path::assign[abi:ne180100]<char const*>(std::string *this, char **a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::result_type std::mersenne_twister_engine<unsigned long long,64ul,312ul,156ul,31ul,13043109905998158313ull,29ul,6148914691236517205ull,17ul,8202884508482404352ull,37ul,18444473444759240704ull,43ul,6364136223846793005ull>::operator()(std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x138;
  std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::result_type v3 = this->__x_[(i + 156) % 0x138] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(this->__x_[v2] << 63) >> 63) & 0xB5026F5AA96619E9;
  this->__x_[i] = v3;
  this->__i_ = v2;
  uint64_t v4 = (((v3 >> 29) & 0x5555555555555555 ^ v3) << 17) & 0x71D67FFFEDA60000 ^ (v3 >> 29) & 0x5555555555555555 ^ v3;
  return (v4 << 37) & 0xFFF7EEE000000000 ^ v4 ^ (((v4 << 37) & 0xFFF7EEE000000000 ^ v4) >> 43);
}

uint64_t BasicDecoder.__allocating_init(languageModel:sampler:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v4 + 16);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  *(void *)(v4 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v4 + 64);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

uint64_t BasicDecoder.init(languageModel:sampler:)(void *a1, void *a2)
{
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v2 + 16);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  *(void *)(v2 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v2 + 64);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v8 + 32))(v10, v7, v8);
  outlined init with take of LogitCollection(v10, v2 + 104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

Swift::Void __swiftcall BasicDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v2 = v1;
  uint64_t v3 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v4 = v1[7];
  long long v8 = *(_OWORD *)prompt.queryTokens._rawValue;
  uint64_t v9 = v3;
  swift_beginAccess();
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v6 + 48))(v4, &v8, v5, v6);
  swift_endAccess();
  v2[7] = v7;
}

uint64_t BasicDecoder.decodeNextChunk()()
{
  *(void *)(v1 + 224) = v0;
  return MEMORY[0x270FA2498](BasicDecoder.decodeNextChunk(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[28];
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 7));
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v2);
  v0[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v4 = swift_allocObject();
  v0[30] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
  *(void *)(v4 + 32) = *(void *)(v1 + 56);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 104, (uint64_t)(v0 + 12));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[31] = v5;
  void *v5 = v0;
  v5[1] = BasicDecoder.decodeNextChunk();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v4, (uint64_t)(v0 + 12), v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(void);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  uint64_t v1 = *(void *)(v0 + 256);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 136);
  }
  else
  {
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v0 + 160))
  {
    outlined init with take of LogitCollection((long long *)(v0 + 136), v0 + 16);
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    LOBYTE(v3) = BitSet.isEmpty.getter();
    swift_bridgeObjectRelease();
    if (v3)
    {
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Log.device);
      uint64_t v6 = Logger.logObject.getter();
      uint64_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        long long v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v8 = 0;
        _os_log_impl(&dword_25FA51000, v6, v7, "Logit indexSet is empty. This is invalid", v8, 2u);
        MEMORY[0x261206F80](v8, -1, -1);
      }

      lazy protocol witness table accessor for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError();
      swift_allocError();
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
      return v9();
    }
    else
    {
      uint64_t v10 = *(void **)(v0 + 224);
      unint64_t v11 = v10[11];
      unint64_t v12 = v10[12];
      __swift_project_boxed_opaque_existential_1(v10 + 8, v11);
      long long v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v0 + 16, v11, v12);
      uint64_t v14 = v10[7];
      swift_beginAccess();
      unint64_t v15 = v10[5];
      unint64_t v16 = v10[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v10 + 2), v15);
      size_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v16 + 16))(v14, v13, 0, v15, v16);
      swift_endAccess();
      v10[7] = v17;
      long long v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_25FB61DF0;
      *(void *)(v18 + 32) = v13;
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      long long v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v19(v18);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t BasicDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 96;
  *(void *)(v3 + 256) = a1;
  *(void *)(v3 + 264) = v1;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v4);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v5 = BasicDecoder.decodeNextChunk();
  }
  else {
    uint64_t v5 = BasicDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t BasicDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return v0;
}

uint64_t BasicDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SamplingDecoder.append(prompt:) in conformance BasicDecoder(long long *a1)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  long long v9 = *a1;
  uint64_t v10 = v3;
  swift_beginAccess();
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v6 + 48))(v4, &v9, v5, v6);
  uint64_t result = swift_endAccess();
  v2[7] = v7;
  return result;
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  v3[28] = v2;
  return MEMORY[0x270FA2498](BasicDecoder.decodeNextChunk(), 0, 0);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t default argument 1 of BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  return 10;
}

float default argument 2 of BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  return 16.0;
}

uint64_t default argument 1 of E5TransformerLanguageModel.init(e5Runner:shouldFlattenPromptModules:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator()
{
  unint64_t result = lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator;
  if (!lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of LogitPresampler?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DeterministicLanguageModelProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of LogitCollection(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError;
  if (!lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError;
  if (!lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError);
  }
  return result;
}

double default argument 1 of TopK.init(k:temperature:randomSeed:)()
{
  return 1.0;
}

double default argument 1 of TopK.init(k:temperature:generator:)()
{
  return 1.0;
}

double default argument 1 of NucleusSampling.init(p:temperature:randomSeed:)()
{
  return 1.0;
}

double default argument 1 of NucleusSampling.init(p:temperature:generator:)()
{
  return 1.0;
}

uint64_t default argument 1 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)()
{
  return 0;
}

uint64_t default argument 4 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)()
{
  return 0;
}

uint64_t default argument 5 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)()
{
  return 0;
}

uint64_t default argument 4 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)()
{
  return 0;
}

uint64_t default argument 2 of SamplingDecoderPrompt.init(queryTokens:promptModulesTokens:healingOverflowTokens:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)()
{
  return 1;
}

uint64_t default argument 1 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)()
{
  return 0;
}

uint64_t default argument 2 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)()
{
  return 1;
}

uint64_t default argument 5 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)()
{
  return 0;
}

void default argument 2 of TokenGenerationConfiguration.init(decoder:tokenizerPath:sampling:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
}

uint64_t default argument 4 of TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  return 0;
}

uint64_t default argument 1 of BasicDecoder.init(languageModel:sampler:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6 = &type metadata for SeedableRandomNumberGenerator;
  unint64_t v7 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(void *)&long long v5 = 0;
  uint64_t v2 = type metadata accessor for GreedySampling();
  uint64_t v3 = swift_allocObject();
  uint64_t result = outlined init with take of LogitCollection(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for GreedySampling;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for BasicDecoder()
{
  return self;
}

uint64_t method lookup function for BasicDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BasicDecoder);
}

uint64_t dispatch thunk of BasicDecoder.__allocating_init(languageModel:sampler:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
    }
  }
}

TokenGenerationInference::BasicDecoderPerformanceMeasurement __swiftcall BasicDecoderPerformanceMeasurement.init(totalInferenceLatency:inferenceCallCount:)(Swift::Double totalInferenceLatency, Swift::Int inferenceCallCount)
{
  *(Swift::Double *)uint64_t v2 = totalInferenceLatency;
  *(void *)(v2 + 8) = inferenceCallCount;
  result.totalInferenceLatency = totalInferenceLatency;
  result.inferenceCallCount = inferenceCallCount;
  return result;
}

Swift::Void __swiftcall BasicDecoderPerformanceMeasurement.printToOSLogForLLMWheel()()
{
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v0._countAndFlagsBits = 0xD000000000000020;
  v0._object = (void *)0x800000025FB6B1C0;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._object = (void *)0x800000025FB6B1F0;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  if (one-time initialization token for speculativeDecode != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.speculativeDecode);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v8[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v7, -1, -1);
    MEMORY[0x261206F80](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BasicDecoderPerformanceMeasurement(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BasicDecoderPerformanceMeasurement(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BasicDecoderPerformanceMeasurement()
{
  return &type metadata for BasicDecoderPerformanceMeasurement;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BeamSearchDecoder.__allocating_init(languageModel:maxActiveNodesPerStep:logBeamWidth:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 112) = MEMORY[0x263F8EE78];
  outlined init with copy of DeterministicLanguageModelProtocol(a1, v6 + 16);
  *(void *)(v6 + 56) = a2;
  *(float *)(v6 + 64) = a3;
  int64_t v7 = &protocol witness table for TopK2Presampler;
  int64_t v8 = &type metadata for TopK2Presampler;
  int64_t v9 = &protocol witness table for BasicLogitPresampler;
  uint64_t v10 = &type metadata for BasicLogitPresampler;
  if (a2 == 1)
  {
    uint64_t v10 = &type metadata for ArgmaxPresampler;
    int64_t v9 = &protocol witness table for ArgmaxPresampler;
  }
  if (a2 != 2)
  {
    int64_t v8 = v10;
    int64_t v7 = v9;
  }
  long long v13 = v8;
  uint64_t v14 = v7;
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of LogitCollection(&v12, v6 + 72);
  return v6;
}

uint64_t BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)(uint64_t a1, uint64_t a2, float a3)
{
  *(void *)(v3 + 112) = MEMORY[0x263F8EE78];
  outlined init with copy of DeterministicLanguageModelProtocol(a1, v3 + 16);
  *(void *)(v3 + 56) = a2;
  *(float *)(v3 + 64) = a3;
  int64_t v7 = &protocol witness table for TopK2Presampler;
  int64_t v8 = &type metadata for TopK2Presampler;
  int64_t v9 = &protocol witness table for BasicLogitPresampler;
  uint64_t v10 = &type metadata for BasicLogitPresampler;
  if (a2 == 1)
  {
    uint64_t v10 = &type metadata for ArgmaxPresampler;
    int64_t v9 = &protocol witness table for ArgmaxPresampler;
  }
  if (a2 != 2)
  {
    int64_t v8 = v10;
    int64_t v7 = v9;
  }
  long long v13 = v8;
  uint64_t v14 = v7;
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of LogitCollection(&v12, v3 + 72);
  return v3;
}

Swift::Void __swiftcall BeamSearchDecoder.append(prompt:)(Swift::OpaquePointer prompt)
{
  uint64_t v2 = *((void *)prompt._rawValue + 2);
  if (v2)
  {
    uint64_t v3 = v1;
    rawValue = prompt._rawValue;
    uint64_t v5 = v1 + 14;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v31 = v1 + 2;
    uint64_t v6 = swift_beginAccess();
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    long long v30 = xmmword_25FB61DF0;
    uint64_t v32 = rawValue;
    uint64_t v33 = v2;
    while (1)
    {
      uint64_t v11 = rawValue[v8 + 4];
      if (*(void *)(*v5 + 16))
      {
        MEMORY[0x270FA5388](v6, v7);
        uint64_t v12 = swift_bridgeObjectRetain();
        uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay24TokenGenerationInference17BeamSearchDecoderC0I4Node33_A7FE2FA43B970D1C0025663E659989E9LLVGG_AMs5NeverOTg506_sSi24fg11Inference17ijk11C0D4Node33_mnopqrst36LLVAFIgyyd_Si6offset_AF7elementtAFs5U11OIegnrzr_TRSiA2MIgyyd_Tf1cn_nTf4ng_n(v12, (uint64_t (*)(uint64_t, void, void, void, float))partial apply for closure #1 in BeamSearchDecoder.append(prompt:));
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v10 = (void *)v3[14];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v3[14] = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
          void *v5 = v10;
        }
        unint64_t v16 = v10[2];
        unint64_t v15 = v10[3];
        int64_t v17 = v16 + 1;
        if (v16 < v15 >> 1) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v34 = v9;
        uint64_t v18 = v3[5];
        uint64_t v19 = v3[6];
        long long v20 = v31;
        size_t v21 = __swift_project_boxed_opaque_existential_1(v31, v18);
        uint64_t v22 = *(void *)(v18 - 8);
        MEMORY[0x270FA5388](v21, v21);
        std::string::size_type v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v22 + 16))(v24);
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v18);
        swift_beginAccess();
        uint64_t v27 = v3[5];
        uint64_t v26 = v3[6];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v20, v27);
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v11, 1, v27, v26);
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BeamSearchDecoder.BeamNode>);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = v30;
        *(void *)(v13 + 32) = v28;
        *(void *)(v13 + 40) = v11;
        *(_DWORD *)(v13 + 48) = 0;
        *(void *)(v13 + 56) = -1;
        swift_beginAccess();
        uint64_t v10 = (void *)v3[14];
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        v3[14] = v10;
        if ((v29 & 1) == 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
          void *v5 = v10;
        }
        unint64_t v16 = v10[2];
        unint64_t v15 = v10[3];
        int64_t v17 = v16 + 1;
        rawValue = v32;
        uint64_t v2 = v33;
        uint64_t v9 = v34;
        if (v16 < v15 >> 1) {
          goto LABEL_4;
        }
      }
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v17, 1, v10, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
      void *v5 = v10;
LABEL_4:
      long long v10[2] = v17;
      v10[v16 + 4] = v13;
      uint64_t v6 = swift_endAccess();
      if (v2 == ++v8)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

float closure #1 in BeamSearchDecoder.append(prompt:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a6 + 16;
  swift_beginAccess();
  uint64_t v12 = *(void *)(a6 + 40);
  uint64_t v13 = *(void *)(a6 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a3, a7, 1, v12, v13);
  swift_endAccess();
  return a1;
}

float partial apply for closure #1 in BeamSearchDecoder.append(prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  return closure #1 in BeamSearchDecoder.append(prompt:)(a5, a1, a2, a3, a4, *(void *)(v5 + 16), *(void *)(v5 + 24));
}

uint64_t protocol witness for Error._domain.getter in conformance BeamSearchDecoder.NoValidGenerationError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance BeamSearchDecoder.NoValidGenerationError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance BeamSearchDecoder.NoValidGenerationError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance BeamSearchDecoder.NoValidGenerationError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t BeamSearchDecoder.bestTokenPath.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = *(void *)(v1 + 8 * v2 + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v5 = *(void *)(v3 + 40);
  unint64_t v6 = *(void *)(v3 + 56);
  uint64_t v7 = v4 - 1;
  if (v7)
  {
    float v8 = *(float *)(v3 + 48);
    uint64_t v9 = (float *)(v3 + 88);
    do
    {
      uint64_t v10 = *((void *)v9 - 2);
      float v11 = *(v9 - 2);
      unint64_t v13 = *(void *)v9;
      v9 += 8;
      unint64_t v12 = v13;
      if (v8 < v11)
      {
        uint64_t v5 = v10;
        unint64_t v6 = v12;
        float v8 = v11;
      }
      --v7;
    }
    while (v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25FB61DF0;
  *(void *)(v14 + 32) = v5;
  if (((v2 - 1) & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return v14;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  uint64_t v16 = 8 * (v2 - 1) + 24;
  while ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = *(void *)(v1 + v16);
    if (v6 >= *(void *)(v17 + 16)) {
      goto LABEL_19;
    }
    uint64_t v18 = v17 + 32 * v6;
    uint64_t v19 = *(void *)(v18 + 40);
    unint64_t v6 = *(void *)(v18 + 56);
    unint64_t v20 = *(void *)(v14 + 24);
    if (v15 + 1 >= v20 >> 1) {
      uint64_t v14 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v15 + 2, 1, (void *)v14);
    }
    *(void *)(v14 + 16) = v15 + 2;
    *(void *)(v14 + 8 * v15++ + 40) = v19;
    v16 -= 8;
    if (((v2 - 1) & 0x7FFFFFFFFFFFFFFFLL) == v15) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v14 + 16);
  if (v22 < 2) {
    return v14;
  }
  unint64_t v23 = 0;
  for (unint64_t i = v22 + 3; ; --i)
  {
    unint64_t v25 = *(void *)(v14 + 16);
    if (v23 >= v25) {
      break;
    }
    if (i - 4 >= v25) {
      goto LABEL_27;
    }
    uint64_t v26 = v14 + 8 * v23;
    uint64_t v27 = *(void *)(v26 + 32);
    *(void *)(v26 + 32) = *(void *)(v14 + 8 * i);
    *(void *)(v14 + 8 * i) = v27;
    ++v23;
    int64_t v28 = i - 5;
    if ((uint64_t)v23 >= v28) {
      return v14;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(uint64_t a1)
{
  uint64_t v5 = a1 - 1;
  if (a1 < 1) {
    return 0;
  }
  uint64_t v6 = a1;
  uint64_t v7 = v1 + 14;
  swift_beginAccess();
  uint64_t v8 = v1[14];
  if (*(void *)(v8 + 16) <= (unint64_t)v6) {
    goto LABEL_30;
  }
  uint64_t v26 = (void *)v6;
  uint64_t v3 = *(void *)(v8 + 8 * v6 + 32);
  uint64_t v2 = *(void **)(v3 + 16);
  if (v2)
  {
    v28[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v2, 0);
    uint64_t v1 = (void *)v28[0];
    unint64_t v9 = *(void *)(v28[0] + 16);
    uint64_t v10 = (uint64_t *)(v3 + 56);
    do
    {
      uint64_t v12 = *v10;
      v10 += 4;
      uint64_t v11 = v12;
      v28[0] = v1;
      unint64_t v13 = v1[3];
      if (v9 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v9 + 1, 1);
        uint64_t v1 = (void *)v28[0];
      }
      v1[2] = v9 + 1;
      v1[v9++ + 4] = v11;
      uint64_t v2 = (void *)((char *)v2 - 1);
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = (void *)specialized Set.init<A>(_:)((uint64_t)v1);
  swift_bridgeObjectRelease();
  if (v5 >= *(void *)(*v7 + 16)) {
    goto LABEL_31;
  }
  if (v4[2] == *(void *)(*(void *)(*v7 + 8 * v5 + 32) + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  uint64_t v6 = (uint64_t)&v25;
  unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  MEMORY[0x270FA5388](v29, v15);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized Sequence.compactMap<A>(_:)(v16, (void (*)(void *__return_ptr, void, void, void, void, float))partial apply for closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v4 = (void *)*v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = (uint64_t)v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    if (v5 >= v4[2])
    {
      __break(1u);
LABEL_34:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = (void *)result;
      *uint64_t v7 = result;
      goto LABEL_26;
    }
    v4[v5 + 4] = v2;
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void **)(v3 + 16);
    if (!v2) {
      break;
    }
    v28[0] = v1;
    uint64_t v1 = v28;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v2, 0);
    uint64_t v5 = v28[0];
    uint64_t v4 = (void *)v29;
    uint64_t v18 = (uint64_t *)(v3 + 56);
    while (v4[2])
    {
      long long v27 = *(_OWORD *)(v18 - 3);
      int v19 = *((_DWORD *)v18 - 2);
      uint64_t v1 = v4;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(*v18);
      if ((v21 & 1) == 0) {
        goto LABEL_29;
      }
      uint64_t v22 = *(void *)(v4[7] + 8 * v20);
      v28[0] = v5;
      uint64_t v6 = *(void *)(v5 + 16);
      unint64_t v23 = *(void *)(v5 + 24);
      if (v6 >= v23 >> 1)
      {
        uint64_t v1 = v28;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v6 + 1, 1);
        uint64_t v5 = v28[0];
      }
      *(void *)(v5 + 16) = v6 + 1;
      uint64_t v24 = v5 + 32 * v6;
      *(_OWORD *)(v24 + 32) = v27;
      *(_DWORD *)(v24 + 48) = v19;
      *(void *)(v24 + 56) = v22;
      v18 += 4;
      uint64_t v2 = (void *)((char *)v2 - 1);
      if (!v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    *uint64_t v7 = (uint64_t)v4;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_25:
  swift_beginAccess();
  uint64_t v1 = (void *)*v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = (uint64_t)v1;
  uint64_t v6 = (uint64_t)v26;
  if ((result & 1) == 0) {
    goto LABEL_34;
  }
LABEL_26:
  if (v1[2] <= v6)
  {
    __break(1u);
  }
  else
  {
    v1[v6 + 4] = v5;
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>, unsigned int a8@<S0>)
{
  uint64_t result = specialized Set.contains(_:)(a1, a5);
  char v16 = result;
  if (result)
  {
    uint64_t v17 = *(void *)(*a6 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *a6;
    *a6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a1, isUniquelyReferenced_nonNull_native);
    *a6 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = a8;
  }
  else
  {
    a2 = 0;
    a3 = 0;
    uint64_t v19 = 0;
    a4 = 0;
  }
  *(void *)a7 = a2;
  *(void *)(a7 + 8) = a3;
  *(void *)(a7 + 16) = v19;
  *(void *)(a7 + 24) = a4;
  *(unsigned char *)(a7 + 32) = (v16 & 1) == 0;
  return result;
}

uint64_t BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v14[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v14);
  uint64_t v3 = v14[0];
  uint64_t v15 = v14[0];
  int64_t v4 = *(void *)(v14[0] + 16);
  uint64_t v5 = *(void *)(v2 + 56);
  if (v5 < v4)
  {
    specialized Array.replaceSubrange<A>(_:with:)(v5, v4);
    uint64_t v3 = v15;
  }
  uint64_t v6 = (uint64_t *)(v2 + 112);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v2 + 112);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 112) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
      uint64_t *v6 = (uint64_t)v7;
    }
    uint64_t v7[2] = v10 + 1;
    v7[v10 + 4] = v3;
    uint64_t v3 = *v6;
    uint64_t result = swift_endAccess();
    uint64_t v12 = *(void *)(v3 + 16);
    if (!v12) {
      break;
    }
    if (v12 == 1) {
      return result;
    }
    uint64_t v13 = *(void *)(v3 + 16);
    while (v12 >= v13)
    {
      uint64_t v7 = (void *)(v13 - 1);
      if (v13 - 1 >= *(void *)(*v6 + 16)) {
        goto LABEL_16;
      }
      if (*(void *)(*(void *)(*v6 + 8 * v13 + 24) + 16) != 1)
      {
        uint64_t v3 = v2;
        uint64_t result = BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(v13 - 1);
        if (v13 != 2)
        {
          --v13;
          if (result) {
            continue;
          }
        }
      }
      return result;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
    uint64_t *v6 = (uint64_t)v7;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t BeamSearchDecoder.decode()()
{
  *(void *)(v1 + 416) = v0;
  return MEMORY[0x270FA2498](BeamSearchDecoder.decode(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = *(void *)(v0 + 416);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    int64_t v4 = *(void *)(v2 + 8 * v3 + 24);
    *(void *)(v0 + 424) = v4;
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      unint64_t v29 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v6 = v29;
      uint64_t v7 = (uint64_t *)(v4 + 32);
      uint64_t v8 = *(void *)(v29 + 16);
      do
      {
        unint64_t v10 = *v7;
        v7 += 4;
        unint64_t v9 = v10;
        uint64_t v11 = *(void *)(v29 + 24);
        if (v8 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + 1, 1);
        }
        *(void *)(v29 + 16) = v8 + 1;
        *(void *)(v29 + 8 * v8++ + 32) = v9;
        --v5;
      }
      while (v5);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    unint64_t v23 = *(void *)(v0 + 416);
    uint64_t v24 = specialized Set.init<A>(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v24);
    *(void *)(v0 + 432) = v25;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v23 + 16, v0 + 96);
    uint64_t v26 = *(void *)(v0 + 120);
    long long v27 = *(void *)(v0 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v26);
    outlined init with copy of DeterministicLanguageModelProtocol(v23 + 72, v0 + 136);
    int64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v28;
    NSObject *v28 = v0;
    v28[1] = BeamSearchDecoder.decode();
    return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)((uint64_t)v25, v0 + 136, v26, v27);
  }
  else
  {
    uint64_t v12 = *(void **)(v0 + 416);
    uint64_t v13 = v12 + 2;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v12 + 2), v0 + 56);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v14);
    char v16 = v12[5];
    uint64_t v17 = v12[6];
    __swift_project_boxed_opaque_existential_1(v13, v16);
    uint64_t v18 = *(void *)(v16 - 8);
    uint64_t v19 = swift_task_alloc();
    *(void *)(v0 + 464) = v19;
    (*(void (**)(void))(v18 + 16))();
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v16);
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    char v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v21;
    *char v21 = v0;
    v21[1] = BeamSearchDecoder.decode();
    return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 256, v20, v0 + 16, 0, v14, v15);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int value;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  long long *v44;
  uint64_t v45;
  void v46[4];
  void *v47;
  uint64_t v48;
  Swift::Int_optional v49;

  int16x8_t v47 = v0;
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[54];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  if (*(void *)(v1 + 16) >= *(void *)(v2 + 16)) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = *(void *)(v1 + 16);
  }
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    int64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int64_t v4 = MEMORY[0x263F8EE80];
  }
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[57];
  uint64_t v7 = v0[54];
  v46[0] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, v5, 1, v46);
  if (v6)
  {
    return swift_unexpectedError();
  }
  unint64_t v9 = v0[53];
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v10 = v46[0];
  swift_retain();
  uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v9, v10);
  swift_release();
  uint64_t v12 = specialized Sequence<>.max()((uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t result = v0[53];
  if ((v12 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_35:
    lazy protocol witness table accessor for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError();
    swift_allocError();
    swift_willThrow();
    uint64_t v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  uint64_t v13 = *(void *)(result + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
LABEL_30:
    swift_release();
    if (v17[2])
    {
      BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)((uint64_t)v17);
      swift_bridgeObjectRelease();
      uint64_t v38 = BeamSearchDecoder.bestTokenPath.getter();
      uint64_t v39 = (uint64_t (*)(uint64_t))v0[1];
      return v39(v38);
    }
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t v14 = 0;
  uint64_t v44 = (long long *)(v0 + 27);
  std::string v42 = v0[52];
  uint64_t v15 = *(float *)&v12 - *(float *)(v42 + 64);
  char v16 = result + 32;
  uint64_t v17 = (void *)MEMORY[0x263F8EE78];
  uint64_t v45 = *(void *)(result + 16);
  unint64_t v43 = v10;
  std::string v41 = result + 32;
  while (v14 < *(void *)(v0[53] + 16))
  {
    if (*(void *)(v10 + 16))
    {
      uint64_t v18 = v16 + 32 * v14;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(float *)(v18 + 16);
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)v18);
      if (v21)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v10 + 56) + 40 * result, (uint64_t)v44);
        outlined init with take of LogitCollection(v44, (uint64_t)(v0 + 22));
        uint64_t v22 = v0[25];
        unint64_t v23 = v0[26];
        __swift_project_boxed_opaque_existential_1(v0 + 22, v22);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
        v46[0] = BitSet.Iterator.init(_:)();
        v46[1] = v24;
        v46[2] = v25;
        while (1)
        {
          std::string v49 = BitSet.Iterator.next()();
          if (v49.is_nil) {
            break;
          }
          value = v49.value;
          int64_t v28 = v0[25];
          long long v27 = v0[26];
          __swift_project_boxed_opaque_existential_1(v0 + 22, v28);
          unint64_t v29 = v20 + (*(float (**)(Swift::Int, uint64_t, uint64_t))(v27 + 16))(value, v28, v27);
          if (v29 >= v15)
          {
            long long v30 = v0[52] + 16;
            swift_beginAccess();
            uint64_t v31 = *(void *)(v42 + 40);
            uint64_t v32 = *(void *)(v42 + 48);
            __swift_mutable_project_boxed_opaque_existential_1(v30, v31);
            uint64_t v33 = (*(uint64_t (**)(uint64_t, Swift::Int, void, uint64_t, uint64_t))(v32 + 16))(v19, value, 0, v31, v32);
            swift_endAccess();
            uint64_t v34 = v17;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            }
            std::string v36 = v34[2];
            uint64_t v35 = v34[3];
            if (v36 >= v35 >> 1) {
              uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v34);
            }
            v34[2] = v36 + 1;
            uint64_t v17 = v34;
            long long v37 = (float *)&v34[4 * v36];
            *((void *)v37 + 4) = v33;
            *((void *)v37 + 5) = value;
            v37[12] = v29;
            *((void *)v37 + 7) = v14;
            char v16 = v41;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 22));
        uint64_t v13 = v45;
        unint64_t v10 = v43;
      }
    }
    if (++v14 == v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2);
  if (v0)
  {
    uint64_t v3 = BeamSearchDecoder.decode();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = BeamSearchDecoder.decode();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::Int value;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v27;
  Swift::Int_optional v28;

  uint64_t v1 = v0[52];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 32, v0[35]);
  uint64_t v2 = LogitCollection.max()() - *(float *)(v1 + 64);
  int64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v5 = __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), v4);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))(v7, v5, v4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v4);
  unint64_t v9 = v0[35];
  unint64_t v10 = v0[36];
  __swift_project_boxed_opaque_existential_1(v0 + 32, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  BitSet.Iterator.init(_:)();
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    int64_t v28 = BitSet.Iterator.next()();
    if (v28.is_nil) {
      break;
    }
    value = v28.value;
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[36];
    __swift_project_boxed_opaque_existential_1(v0 + 32, v13);
    uint64_t v15 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v14 + 16))(value, v13, v14) + 0.0;
    if (v15 >= v2)
    {
      char v16 = v0[52];
      uint64_t v17 = v16 + 16;
      swift_beginAccess();
      uint64_t v18 = *(void *)(v16 + 40);
      uint64_t v19 = *(void *)(v16 + 48);
      __swift_mutable_project_boxed_opaque_existential_1(v17, v18);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, Swift::Int, void, uint64_t, uint64_t))(v19 + 16))(v8, value, 0, v18, v19);
      swift_endAccess();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      uint64_t v22 = v11[2];
      char v21 = v11[3];
      if (v22 >= v21 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v11);
      }
      unsigned char v11[2] = v22 + 1;
      unint64_t v23 = (float *)&v11[4 * v22];
      *((void *)v23 + 4) = v20;
      *((void *)v23 + 5) = value;
      v23[12] = v15;
      *((void *)v23 + 7) = -1;
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)((uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t v24 = BeamSearchDecoder.bestTokenPath.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 32));
  uint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
  return v25(v24);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t BeamSearchDecoder.decode()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 448) = a1;
  *(void *)(v3 + 456) = v1;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v3 + 136);
  if (v1)
  {
    swift_bridgeObjectRelease();
    int64_t v4 = BeamSearchDecoder.decode();
  }
  else
  {
    int64_t v4 = BeamSearchDecoder.decode();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

unint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    float v2 = *(float *)(a1 + 32);
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      int64_t v4 = (float *)(a1 + 36);
      do
      {
        float v5 = *v4++;
        float v6 = v5;
        if (v2 < v5) {
          float v2 = v6;
        }
        --v3;
      }
      while (v3);
    }
    uint64_t v7 = LODWORD(v2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

int64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      float v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v2 <= v14) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

Swift::Int specialized Sequence<>.max()()
{
  BitSet.Iterator.init(_:)();
  Swift::Int_optional v2 = BitSet.Iterator.next()();
  Swift::Int value = v2.value;
  if (!v2.is_nil)
  {
    while (1)
    {
      Swift::Int_optional v3 = BitSet.Iterator.next()();
      if (v3.is_nil) {
        break;
      }
      if (value <= v3.value) {
        Swift::Int value = v3.value;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return value;
}

uint64_t BeamSearchDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BeamSearchDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07508];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  Swift::Int_optional v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F07508], &lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x263F07528]);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for Prompt.SpecialToken();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F7FB28];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, MEMORY[0x263F7FB28]);
  Swift::Int_optional v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x263F7FB28], &lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, v2, MEMORY[0x263F7FB38]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = a1[2];
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::Int_optional v3 = a1 + 4;
    do
    {
      Swift::UInt v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    uint64_t v7 = a1[2];
    while (1)
    {
      uint64_t v8 = *(void **)(*(void *)(v2 + 48) + 8 * result);
      if (v8[2] == v7)
      {
        if (!v7 || v8 == a1) {
          return result;
        }
        if (v8[4] == a1[4])
        {
          if (v7 == 1) {
            return result;
          }
          if (v8[5] == a1[5]) {
            break;
          }
        }
      }
LABEL_3:
      unint64_t result = (result + 1) & v6;
      if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    uint64_t v9 = v8 + 6;
    uint64_t v10 = v7 - 2;
    BOOL v11 = a1 + 6;
    while (v10)
    {
      uint64_t v13 = *v9++;
      uint64_t v12 = v13;
      uint64_t v14 = *v11++;
      --v10;
      if (v12 != v14) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    char v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8);
      lazy protocol witness table accessor for type UUID and conformance UUID(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TGICAPILanguageModel.NodeState>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<E5NodeState>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(node: Int, token: Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BeamSearchDecoder.BeamNode>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Float)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(draftModel: E5TransformerLanguageModel, behavior: DraftingBehavior)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OneTokenHealingPrefixMatchingLanguageModel.NodeState>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TwoStageSpeculativeDecoder.TokenWithNodes>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TwoStageSpeculativeDecoder.BufferedToken>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ThreeStageSpeculativeDecoder.TokenWithNodes>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ThreeStageSpeculativeDecoder.BufferedToken>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CompositeLanguageModel.Node>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MaskedLanguageModel.Node>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LogitCollection>, &demangling cache variable for type metadata for LogitCollection);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, &demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OnDeviceInferenceAssetObject>, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>, &demangling cache variable for type metadata for [TokenTreeNode]);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      unsigned char v11[2] = v9;
      void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4]) {
          memmove(v13, a4 + 4, 24 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OnDeviceInferenceSuspendedFetch>, type metadata accessor for OnDeviceInferenceSuspendedFetch, type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OnDeviceInferenceAssetObjectE5Runner>, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, MEMORY[0x263F7FB20], MEMORY[0x263F7FB20]);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      void v13[2] = v11;
      void v13[3] = 2 * (v15 >> 3);
      char v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      char v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  void *v15;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      void v13[2] = v11;
      void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  Swift::UInt *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[NSNumber]>, &demangling cache variable for type metadata for [NSNumber]);
  Swift::UInt *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
  Swift::UInt *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>, MEMORY[0x263F7F8C8]);
  Swift::UInt *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<OnDeviceInferenceAssetObjectE5Runner>, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  Swift::UInt *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  Swift::UInt *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, MEMORY[0x263F7FB20]);
  Swift::UInt *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  Swift::UInt *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int : (next: Int, logit: Float)]>, &demangling cache variable for type metadata for [Int : (next: Int, logit: Float)]);
  Swift::UInt *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  Swift::UInt *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BeamSearchDecoder.BeamNode>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OneTokenHealingPrefixMatchingLanguageModel.NodeState>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TwoStageSpeculativeDecoder.TokenWithNodes>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ThreeStageSpeculativeDecoder.TokenWithNodes>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LogitCollection>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    long long v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitCollection);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [Int])>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    long long v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [Int]));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(tokenID: Int, remaining: String)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    long long v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, remaining: String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    void v13[2] = v11;
    void v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x263F8EE78];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      char v5 = (int64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      char v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      uint64_t v5[2] = v2;
      void v5[3] = 2 * (v7 >> 3);
    }
    Swift::Int result = specialized Sequence._copySequenceContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  uint64_t v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  int64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  uint64_t v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  int64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  uint64_t v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  int64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
    uint64_t v4 = 4 * a2;
    uint64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 2);
    uint64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v89 = *a1;
      uint64_t v90 = *a1 + 32;
      uint64_t v91 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float v93 = *(float *)(v89 + 32 * i + 16);
        uint64_t v94 = v91;
        uint64_t v95 = v90;
        do
        {
          if (*(float *)(v95 - 16) >= v93) {
            break;
          }
          if (!v89) {
            goto LABEL_141;
          }
          uint64_t v96 = *(void *)(v95 + 24);
          long long v97 = *(_OWORD *)v95;
          long long v98 = *(_OWORD *)(v95 - 16);
          *(_OWORD *)uint64_t v95 = *(_OWORD *)(v95 - 32);
          *(_OWORD *)(v95 + 16) = v98;
          *(float *)(v95 - 16) = v93;
          *(void *)(v95 - 8) = v96;
          *(_OWORD *)(v95 - 32) = v97;
          v95 -= 32;
        }
        while (!__CFADD__(v94++, 1));
        v90 += 32;
        --v91;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  int8x16_t v108 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    long long __dst = (float *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      short float v100 = v12;
      uint64_t v110 = v9;
      if (v13 >= 2)
      {
        uint64_t v101 = *v108;
        do
        {
          unint64_t v102 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v101) {
            goto LABEL_145;
          }
          short float v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v101 + 32 * v104), (float *)(v101 + 32 * *(void *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            short float v103 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_134;
          }
          float16x8_t v106 = &v103[16 * v102 + 32];
          *(void *)float16x8_t v106 = v104;
          *((void *)v106 + 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v13 > v107) {
            goto LABEL_135;
          }
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          short float v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v110 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v110 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v110 = v8;
    long long __dst = (float *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v109 = *a1 + 80;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v111 = v6;
  Swift::Int v112 = v3;
  uint64_t v113 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      float v15 = *(float *)(v11 + 32 * v10 + 16);
      float v16 = *(float *)(v11 + 32 * v14 + 16);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        unint64_t v17 = (float *)(v109 + 32 * v14);
        float v18 = v15;
        while (1)
        {
          float v19 = v18;
          float v18 = *v17;
          if (v16 < v15 == v19 >= *v17) {
            break;
          }
          ++v10;
          v17 += 8;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = 32 * v10;
          uint64_t v21 = 32 * v14;
          Swift::Int v22 = v10;
          Swift::Int v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = (_OWORD *)(v11 + v21);
              uint64_t v25 = v11 + v20;
              int v26 = *(_DWORD *)(v11 + v21 + 16);
              uint64_t v27 = *(void *)(v11 + v21 + 24);
              long long v28 = *(_OWORD *)(v11 + v21);
              long long v29 = *(_OWORD *)(v11 + v20 - 16);
              _OWORD *v24 = *(_OWORD *)(v11 + v20 - 32);
              v24[1] = v29;
              *(_OWORD *)(v25 - 32) = v28;
              *(_DWORD *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v23;
            v20 -= 32;
            v21 += 32;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v30 >= v3) {
      Swift::Int v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v31 = (float *)(v11 + 32 * v10);
      do
      {
        float v32 = *(float *)(v11 + 32 * v10 + 16);
        Swift::Int v33 = v14;
        uint64_t v34 = v31;
        do
        {
          if (*(v34 - 4) >= v32) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v35 = *((void *)v34 + 3);
          long long v36 = *(_OWORD *)v34;
          long long v37 = *((_OWORD *)v34 - 1);
          *(_OWORD *)uint64_t v34 = *((_OWORD *)v34 - 2);
          *((_OWORD *)v34 + 1) = v37;
          *(v34 - 4) = v32;
          *((void *)v34 - 1) = v35;
          *((_OWORD *)v34 - 2) = v36;
          v34 -= 8;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 8;
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v39 = *((void *)v12 + 2);
    unint64_t v38 = *((void *)v12 + 3);
    unint64_t v13 = v39 + 1;
    uint64_t v11 = v113;
    if (v39 >= v38 >> 1)
    {
      int8x16_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v12);
      uint64_t v11 = v113;
      uint64_t v12 = v88;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v40 = v12 + 32;
    std::string v41 = &v12[16 * v39 + 32];
    *(void *)std::string v41 = v14;
    *((void *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v13 - 1;
        if (v13 >= 4)
        {
          int16x8_t v47 = &v40[16 * v13];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_120;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_121;
          }
          unint64_t v54 = v13 - 2;
          float16x8_t v55 = &v40[16 * v13 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_123;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_126;
          }
          if (v59 >= v50)
          {
            uint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_130;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v71 = *((void *)v12 + 4);
            uint64_t v72 = *((void *)v12 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_77;
          }
          uint64_t v44 = *((void *)v12 + 4);
          uint64_t v43 = *((void *)v12 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_122;
        }
        unint64_t v54 = v13 - 2;
        int16x8_t v60 = &v40[16 * v13 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_125;
        }
        int16x8_t v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_128;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_129;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_83:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v65) {
          goto LABEL_124;
        }
        long long v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_127;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        int8x16_t v82 = v12;
        int8x16_t v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        int8x16_t v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v11 + 32 * *(void *)v83), (float *)(v11 + 32 * *(void *)v85), v11 + 32 * v86, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v86 < v84) {
          goto LABEL_117;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_118;
        }
        *(void *)int8x16_t v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_119;
        }
        uint64_t v12 = v82;
        unint64_t v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        uint64_t v11 = v113;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v111;
    Swift::Int v3 = v112;
    if (v10 >= v112)
    {
      uint64_t v9 = v110;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__src, float *a2, unint64_t a3, float *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 31;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  long long v28 = __src;
  uint64_t v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      float v19 = &v4[8 * v13];
      int v26 = (char *)v19;
      long long v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        uint64_t v20 = (float *)(a3 - 32);
        do
        {
          uint64_t v21 = v20 + 8;
          if (*(v6 - 4) >= *(v19 - 4))
          {
            int v26 = (char *)(v19 - 8);
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              long long v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)uint64_t v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }
            Swift::Int v22 = v6;
            v19 -= 8;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            Swift::Int v22 = v6 - 8;
            if (v21 != v6 || v20 >= v6)
            {
              long long v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }
            long long v28 = v6 - 8;
            if (v22 <= v7) {
              break;
            }
          }
          v20 -= 8;
          Swift::Int v6 = v22;
        }
        while (v19 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, (const void **)&v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    Swift::Int v14 = &v4[8 * v10];
    int v26 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      float v15 = v4;
      while (1)
      {
        if (v15[4] >= v6[4])
        {
          uint64_t v4 = v15 + 8;
          unint64_t v17 = v15;
          float v16 = v6;
          if (v7 == v15)
          {
            v15 += 8;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 8;
          }
        }
        else
        {
          float v16 = v6 + 8;
          unint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        long long v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 8;
        if (v15 < v14)
        {
          Swift::Int v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        uint64_t v27 = v4;
        long long v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v44 = v10;
  outlined init with copy of DeterministicLanguageModelProtocol(a2 + 32, (uint64_t)v45);
  uint64_t v46 = v10;
  outlined init with take of LogitCollection(v45, (uint64_t)v43);
  uint64_t v11 = (void *)*a4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  BOOL v16 = __OFADD__(v14, v15);
  uint64_t v17 = v14 + v15;
  if (v16)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v18 = v13;
  if (v11[3] < v17)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v18 & 1) != (v19 & 1))
    {
LABEL_6:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_9:
    if (v18) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if (a3) {
    goto LABEL_9;
  }
  unint64_t v22 = v12;
  specialized _NativeDictionary.copy()();
  unint64_t v12 = v22;
  if (v18)
  {
LABEL_10:
    uint64_t v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_28;
  }
LABEL_13:
  long long v23 = (void *)*a4;
  *(void *)(*a4 + 8 * (v12 >> 6) + 64) |= 1 << v12;
  *(void *)(v23[6] + 8 * v12) = v10;
  outlined init with take of LogitCollection(v43, v23[7] + 40 * v12);
  uint64_t v24 = v23[2];
  BOOL v16 = __OFADD__(v24, 1);
  uint64_t v25 = v24 + 1;
  if (!v16)
  {
    _OWORD v23[2] = v25;
    uint64_t v42 = v6 - 1;
    if (v6 != 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = a2 + 72;
      while (v9 - 1 != v26)
      {
        if ((unint64_t)(v26 + 1) >= *(void *)(a2 + 16)) {
          goto LABEL_27;
        }
        uint64_t v44 = *(void *)(a1 + 40 + 8 * v26);
        uint64_t v28 = v44;
        outlined init with copy of DeterministicLanguageModelProtocol(v27, (uint64_t)v45);
        uint64_t v46 = v28;
        outlined init with take of LogitCollection(v45, (uint64_t)v43);
        long long v29 = (void *)*a4;
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        uint64_t v32 = v29[2];
        BOOL v33 = (v31 & 1) == 0;
        BOOL v16 = __OFADD__(v32, v33);
        uint64_t v34 = v32 + v33;
        if (v16) {
          goto LABEL_25;
        }
        char v35 = v31;
        if (v29[3] < v34)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
          unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
          if ((v35 & 1) != (v36 & 1)) {
            goto LABEL_6;
          }
        }
        if (v35) {
          goto LABEL_10;
        }
        long long v37 = (void *)*a4;
        *(void *)(*a4 + 8 * (v30 >> 6) + 64) |= 1 << v30;
        *(void *)(v37[6] + 8 * v30) = v28;
        outlined init with take of LogitCollection(v43, v37[7] + 40 * v30);
        uint64_t v38 = v37[2];
        BOOL v16 = __OFADD__(v38, 1);
        uint64_t v39 = v38 + 1;
        if (v16) {
          goto LABEL_26;
        }
        void v37[2] = v39;
        ++v26;
        v27 += 40;
        if (v42 == v26) {
          break;
        }
      }
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  _StringGuts.grow(_:)(30);
  v40._object = (void *)0x800000025FB6B660;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)();
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (draftModel: E5TransformerLanguageModel, behavior: DraftingBehavior));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v10 = Set.init(minimumCapacity:)();
  uint64_t v4 = a2 + 32;
  uint64_t result = swift_beginAccess();
  while ((a1 & 0x8000000000000000) == 0)
  {
    if (a1 >= *(void *)(*(void *)v4 + 16)) {
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)v4 + 72 * a1;
    unint64_t v7 = *(void *)(v6 + 48);
    int v8 = *(unsigned __int8 *)(v6 + 56);
    uint64_t result = specialized Set._Variant.insert(_:)(&v9, a1);
    a1 = v7;
    if (v8 == 1) {
      return v10;
    }
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay24TokenGenerationInference17BeamSearchDecoderC0I4Node33_A7FE2FA43B970D1C0025663E659989E9LLVGG_AMs5NeverOTg506_sSi24fg11Inference17ijk11C0D4Node33_mnopqrst36LLVAFIgyyd_Si6offset_AF7elementtAFs5U11OIegnrzr_TRSiA2MIgyyd_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, float))
{
  uint64_t v18 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (float *)(a1 + 56);
    do
    {
      uint64_t v6 = a2(v4, *((void *)v5 - 3), *((void *)v5 - 2), *(void *)v5, *(v5 - 2));
      uint64_t v8 = v7;
      int v10 = v9;
      uint64_t v12 = v11;
      unint64_t v14 = *(void *)(v18 + 16);
      unint64_t v13 = *(void *)(v18 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      ++v4;
      v5 += 8;
      *(void *)(v18 + 16) = v14 + 1;
      uint64_t v15 = v18 + 32 * v14;
      *(void *)(v15 + 32) = v6;
      *(void *)(v15 + 40) = v8;
      *(_DWORD *)(v15 + 48) = v10;
      *(void *)(v15 + 56) = v12;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v18;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(void *__return_ptr, void, void, void, void, float))
{
  void (*v18)(void *__return_ptr, void, void, void, void, float);

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = 0;
  uint64_t v5 = (float *)(swift_bridgeObjectRetain() + 56);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  uint64_t v18 = a2;
  do
  {
    a2(&v14, v4, *((void *)v5 - 3), *((void *)v5 - 2), *(void *)v5, *(v5 - 2));
    long long v13 = v14;
    int v8 = v15;
    uint64_t v9 = v16;
    outlined init with take of BeamSearchDecoder.BeamNode?((uint64_t)&v14, (uint64_t)v17);
    if ((v17[32] & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v6);
      }
      void v6[2] = v11 + 1;
      uint64_t v7 = &v6[4 * v11];
      *((_OWORD *)v7 + 2) = v13;
      *((_DWORD *)v7 + 12) = v8;
      v7[7] = v9;
      a2 = v18;
    }
    ++v4;
    v5 += 8;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TGIE5AdapterConfigurationObjC();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TGIE5AdapterConfigurationObjC);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)MEMORY[0x261205930](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        int v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = (float *)(swift_bridgeObjectRetain() + 48);
  uint64_t v5 = (char *)MEMORY[0x263F8EE78];
  do
  {
    if (*(void *)(a2 + 16))
    {
      float v6 = *v4;
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*((void *)v4 - 2));
      if (v8)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(a2 + 56) + 40 * v7, (uint64_t)v13);
        outlined init with take of LogitCollection(v13, (uint64_t)v14);
        __swift_project_boxed_opaque_existential_1(v14, v14[3]);
        float v9 = LogitCollection.max()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v11 = *((void *)v5 + 2);
        unint64_t v10 = *((void *)v5 + 3);
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v11 + 1;
        *(float *)&v5[4 * v11 + 32] = v6 + v9;
      }
    }
    v4 += 8;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t lazy protocol witness table accessor for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError;
  if (!lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError);
  }
  return result;
}

uint64_t type metadata accessor for BeamSearchDecoder()
{
  return self;
}

uint64_t method lookup function for BeamSearchDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BeamSearchDecoder);
}

uint64_t dispatch thunk of BeamSearchDecoder.__allocating_init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for BeamSearchDecoder.NoValidGenerationError()
{
  return &type metadata for BeamSearchDecoder.NoValidGenerationError;
}

uint64_t initializeBufferWithCopyOfBuffer for BeamSearchDecoder.BeamNode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BeamSearchDecoder.BeamNode(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BeamSearchDecoder.BeamNode(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void *type metadata accessor for BeamSearchDecoder.BeamNode()
{
  return &unk_270BD2678;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for TGIE5AdapterConfigurationObjC()
{
  unint64_t result = lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC;
  if (!lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, unsigned int a6@<S0>)
{
  return closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(a1, a2, a3, a4, *(void *)(v6 + 16), *(uint64_t **)(v6 + 24), a5, a6);
}

uint64_t outlined init with take of BeamSearchDecoder.BeamNode?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BeamSearchDecoder.BeamNode?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int __swiftcall CompositeLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v6 = v3;
  uint64_t v10 = (uint64_t)(v3 + 2);
  swift_beginAccess();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v6[2];
  unint64_t v12 = *(void *)(v11 + 16);
  if (v12 <= forPreviousNode)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)forPreviousNode = result;
    goto LABEL_7;
  }
  Swift::Int v38 = v10;
  unint64_t v13 = (void *)(v11 + 24 * forPreviousNode);
  uint64_t v15 = v13[4];
  uint64_t v14 = v13[5];
  uint64_t v16 = v13[6];
  if (*(void *)(v16 + 16))
  {
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(token);
    if (v18) {
      return *(void *)(*(void *)(v16 + 56) + 8 * v17);
    }
  }
  unint64_t v37 = forPreviousNode;
  uint64_t v34 = v12;
  swift_beginAccess();
  Swift::Int v20 = token;
  uint64_t v22 = v6[6];
  uint64_t v21 = v6[7];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 3), v22);
  uint64_t v36 = v14;
  long long v23 = *(uint64_t (**)(uint64_t, Swift::Int, BOOL, uint64_t, uint64_t))(v21 + 16);
  swift_bridgeObjectRetain();
  BOOL v24 = isPrompt;
  token = v23(v15, v20, v24, v22, v21);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v25 = v6[12];
  uint64_t v26 = v6[13];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 9), v25);
  uint64_t v27 = v36;
  uint64_t v35 = v20;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, Swift::Int, BOOL, uint64_t, uint64_t))(v26 + 16))(v27, v20, v24, v25, v26);
  swift_endAccess();
  swift_bridgeObjectRelease();
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  forPreviousNode = v38;
  swift_beginAccess();
  uint64_t v5 = (void *)v6[2];
  Swift::Int result = swift_isUniquelyReferenced_nonNull_native();
  void v6[2] = v5;
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v30 = v5[2];
  unint64_t v29 = v5[3];
  if (v30 >= v29 >> 1)
  {
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)forPreviousNode = result;
  }
  uint64_t v5[2] = v30 + 1;
  char v31 = &v5[3 * v30];
  v31[4] = token;
  v31[5] = v10;
  v31[6] = v4;
  if (*(void *)(*(void *)forPreviousNode + 16) > v37)
  {
    uint64_t v32 = *(void *)forPreviousNode + 24 * v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *(void *)(v32 + 48);
    *(void *)(v32 + 48) = 0x8000000000000000;
    Swift::Int v19 = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v35, isUniquelyReferenced_nonNull_native);
    *(void *)(v32 + 48) = v39;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v19;
  }
  __break(1u);
  return result;
}

float CompositeLanguageModel.CompositeLogitCollection.subscript.getter(Swift::Int a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  LOBYTE(v3) = BitSet.contains(_:)(a1);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = *(void *)(v1 + 32);
    __swift_project_boxed_opaque_existential_1((void *)v1, v5);
    float v7 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v6 + 16))(a1, v5, v6);
  }
  else
  {
    float v7 = -65504.0;
  }
  float v8 = *(float *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 40), v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  LOBYTE(v9) = BitSet.contains(_:)(a1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v11 = *(void *)(v1 + 64);
    uint64_t v12 = *(void *)(v1 + 72);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 40), v11);
    (*(void (**)(Swift::Int, uint64_t, uint64_t))(v12 + 16))(a1, v11, v12);
  }
  else
  {
    float v13 = -65504.0;
  }
  return (float)(v7 * v8) + (float)(v13 * *(float *)(v1 + 84));
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance CompositeLanguageModel.CompositeLogitCollection()
{
  return swift_bridgeObjectRetain();
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 184) = a2;
  *(void *)(v4 + 192) = v3;
  *(unsigned char *)(v4 + 264) = a3;
  *(void *)(v4 + 176) = a1;
  return MEMORY[0x270FA2498](CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  int64_t v1 = *(void *)(*(void *)(v0 + 176) + 16);
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, v2);
  if (v1)
  {
    uint64_t v24 = v0;
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v6 = *(void *)(v0 + 192) + 16;
    float v7 = (unint64_t *)(v5 + 32);
    swift_bridgeObjectRetain();
    uint64_t v26 = v6;
    uint64_t result = swift_beginAccess();
    while (1)
    {
      unint64_t v10 = *v7++;
      unint64_t v9 = v10;
      if ((v10 & 0x8000000000000000) != 0) {
        break;
      }
      if (v9 >= *(void *)(*(void *)v26 + 16)) {
        goto LABEL_15;
      }
      uint64_t v11 = *(void *)v26 + 24 * v9;
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(void *)(v11 + 40);
      unint64_t v14 = v3[2];
      unint64_t v15 = v3[3];
      swift_bridgeObjectRetain();
      if (v14 >= v15 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v14 + 1, 1, v3);
      }
      uint64_t v3[2] = v14 + 1;
      v3[v14 + 4] = v12;
      unint64_t v17 = v4[2];
      unint64_t v16 = v4[3];
      if (v17 >= v16 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v4);
      }
      v4[2] = v17 + 1;
      v4[v17 + 4] = v13;
      uint64_t result = swift_bridgeObjectRelease();
      if (!--v1)
      {
        uint64_t v0 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
LABEL_11:
    *(void *)(v0 + 200) = v3;
    *(void *)(v0 + 208) = v4;
    uint64_t v18 = *(void *)(v0 + 192) + 24;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v18, v0 + 16);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v20 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v19);
    uint64_t v25 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 24)
                                                                               + **(int **)(v20 + 24));
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v21;
    *uint64_t v21 = v0;
    v21[1] = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v22 = *(unsigned __int8 *)(v0 + 264);
    uint64_t v23 = *(void *)(v0 + 184);
    return v25(v3, v23, v22, v19, v20);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  int64_t v1 = *(void *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 72, v0 + 56);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v2);
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v4;
  void *v4 = v0;
  v4[1] = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 264);
  float v7 = *(void *)(v0 + 184);
  return v9(v5, v7, v6, v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  int64_t v1 = v0[32];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[24];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  uint64_t v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_nTf4ng_n(v2, v1, (void (*)(long long *__return_ptr, _OWORD *, uint64_t))partial apply for closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v4 = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 256) = a1;
    uint64_t v5 = CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v25);
  outlined init with copy of DeterministicLanguageModelProtocol(a2, (uint64_t)v22);
  swift_beginAccess();
  unsigned int v7 = *(_DWORD *)(a3 + 64);
  swift_beginAccess();
  unsigned int v8 = *(_DWORD *)(a3 + 112);
  a4[3] = &type metadata for CompositeLanguageModel.CompositeLogitCollection;
  a4[4] = &protocol witness table for CompositeLanguageModel.CompositeLogitCollection;
  unint64_t v9 = (_OWORD *)swift_allocObject();
  *a4 = v9;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v25, (uint64_t)v19);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v22, (uint64_t)v20 + 8);
  *(void *)&long long v21 = __PAIR64__(v8, v7);
  uint64_t v10 = v26;
  uint64_t v11 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  uint64_t v12 = v23;
  uint64_t v13 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v14 = BitSet.union(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((void *)&v21 + 1) = v14;
  long long v15 = v20[1];
  uint64_t v9[3] = v20[0];
  v9[4] = v15;
  long long v16 = v19[1];
  v9[1] = v19[0];
  v9[2] = v16;
  long long v17 = v21;
  v9[5] = v20[2];
  v9[6] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
}

uint64_t CompositeLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of (lm: DeterministicLanguageModelProtocol, scale: Float)(v0 + 24);
  outlined destroy of (lm: DeterministicLanguageModelProtocol, scale: Float)(v0 + 72);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompositeLanguageModel()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for CompositeLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CompositeLanguageModel.Node()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for CompositeLanguageModel.Node(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CompositeLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeLanguageModel.Node(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeLanguageModel.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositeLanguageModel.Node()
{
  return &type metadata for CompositeLanguageModel.Node;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance CompositeLanguageModel()
{
  return 0;
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance CompositeLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return CompositeLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance CompositeLanguageModel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  *(void *)(v9 + 184) = a2;
  *(void *)(v9 + 192) = v8;
  *(unsigned char *)(v9 + 264) = a3;
  *(void *)(v9 + 176) = a1;
  return MEMORY[0x270FA2498](CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t partial apply for closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(a1, a2, v3, a3);
}

uint64_t sub_25FA8FC34()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t outlined destroy of (lm: DeterministicLanguageModelProtocol, scale: Float)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lm: DeterministicLanguageModelProtocol, scale: Float));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          char *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeLanguageModel.CompositeLogitCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositeLanguageModel.CompositeLogitCollection()
{
  return &type metadata for CompositeLanguageModel.CompositeLogitCollection;
}

uint64_t type metadata instantiation function for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for DataStream()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t result = type metadata accessor for AsyncThrowingStream();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    uint64_t v7 = type metadata accessor for AsyncThrowingStream();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = type metadata accessor for UUID();
    long long v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_retain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t destroy for DataStream(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v4 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_retain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 32);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FA9090C);
}

uint64_t sub_25FA9090C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for DataStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FA90A6C);
}

uint64_t sub_25FA90A6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t result = type metadata accessor for AsyncThrowingStream();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for DataStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in DataStream<A>()
{
  return swift_getWitnessTable();
}

uint64_t DataStream.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v5 = type metadata accessor for AsyncThrowingStream.Iterator();
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = type metadata accessor for AsyncThrowingStream();
  MEMORY[0x261205660](v9);
  DataStream.AsyncIterator.init(wrapped:onCancel:)((uint64_t)v8, *(void *)(v2 + *(int *)(a1 + 28)), *(void *)(v2 + *(int *)(a1 + 28) + 8), a2);
  return swift_retain();
}

uint64_t DataStream.AsyncIterator.init(wrapped:onCancel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v8 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for DataStream.AsyncIterator();
  unint64_t v10 = (void *)(a4 + *(int *)(result + 28));
  *unint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t DataStream.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  uint64_t v3[2] = a1;
  return MEMORY[0x270FA2498](DataStream.AsyncIterator.next(), 0, 0);
}

uint64_t DataStream.AsyncIterator.next()()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = *(void *)(v2 + 16);
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(v2 + 28));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  v0[6] = v6;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  uint64_t v8 = type metadata accessor for Optional();
  *uint64_t v7 = v0;
  v7[1] = DataStream.AsyncIterator.next();
  uint64_t v9 = v0[2];
  return MEMORY[0x270FA2338](v9, &async function pointer to partial apply for closure #1 in DataStream.AsyncIterator.next(), v3, v5, v6, 0, 0, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    return MEMORY[0x270FA2498](DataStream.AsyncIterator.next(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in DataStream.AsyncIterator.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v3[2] = a1;
  return MEMORY[0x270FA2498](closure #1 in DataStream.AsyncIterator.next(), 0, 0);
}

uint64_t closure #1 in DataStream.AsyncIterator.next()()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for AsyncThrowingStream.Iterator();
  void *v1 = v0;
  v1[1] = closure #1 in DataStream.AsyncIterator.next();
  uint64_t v3 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2100](v3, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  uint64_t v6[3] = a2;
  v6[4] = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  void v6[2] = a1;
  return MEMORY[0x270FA2498](DataStream.AsyncIterator.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v12;
  *uint64_t v12 = v6;
  v12[1] = _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x270FA1E90](a1, a2, a3, a5, a6, v6 + 16);
}

uint64_t _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance DataStream<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  DataStream.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in DataStream<A>.AsyncIterator()
{
  return MEMORY[0x263F8E4E0];
}

uint64_t partial apply for closure #1 in DataStream.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  int8x16_t v5 = v1[1];
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  *(int8x16_t *)(v4 + 24) = vextq_s8(v5, v5, 8uLL);
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x270FA2498](closure #1 in DataStream.AsyncIterator.next(), 0, 0);
}

uint64_t type metadata accessor for DataStream.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata completion function for DataStream.AsyncIterator()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t result = type metadata accessor for AsyncThrowingStream.Iterator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataStream.AsyncIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    uint64_t v7 = type metadata accessor for AsyncThrowingStream.Iterator();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DataStream.AsyncIterator(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t initializeWithCopy for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FA91CC0);
}

uint64_t sub_25FA91CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FA91DB4);
}

uint64_t sub_25FA91DB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t result = type metadata accessor for AsyncThrowingStream.Iterator();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

void closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7, v10);
  uint64_t v11 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(a1 + 16) = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 24) + 16));
  if (*(unsigned char *)(a1 + 17) == 1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      char v16 = 1;
    }
    else
    {
      uint64_t v17 = a1 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID;
      uint64_t v23 = *(void *)(a1
                      + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_dataStreamStateManager);
      uint64_t v18 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v17, v7);
      unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v24 = v3;
      unint64_t v20 = (v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = 0;
      *(void *)(v21 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21 + v19, v11, v7);
      *(void *)(v21 + v20) = v23;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&closure #1 in DataStreamCancellationHandler.cancel()partial apply, v21);
      swift_release();
      char v16 = *(unsigned char *)(a1 + 17);
    }
  }
  else
  {
    char v16 = 0;
  }
  *a3 = v16;
}

void closure #1 in DataStreamCancellationHandler.setisCancelled(isCancelled:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v8 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8, v10);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(a1 + 17) = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 24) + 16));
  if (*(unsigned char *)(a1 + 17) == 1 && (*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v13 = a1 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID;
    uint64_t v14 = *(void *)(a1
                    + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_dataStreamStateManager);
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v4);
    unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v17 = (v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18 + v16, v8, v4);
    *(void *)(v18 + v17) = v14;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in DataStreamCancellationHandler.cancel(), v18);
    swift_release();
  }
}

uint64_t closure #1 in DataStreamCancellationHandler.cancel()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  v5[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DataStreamState(0);
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in DataStreamCancellationHandler.cancel(), 0, 0);
}

uint64_t closure #1 in DataStreamCancellationHandler.cancel()()
{
  unint64_t v19 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = v17;
    *(_DWORD *)uint64_t v12 = 136315138;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_25FA51000, v6, v7, "Handling cancellation for request %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v17, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  uint64_t v15 = v0[7];
  return MEMORY[0x270FA2498](closure #1 in DataStreamCancellationHandler.cancel(), v15, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  uint64_t v1 = v0[7];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v0[6];
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    os_log_type_t v7 = v0[8];
    if (v8)
    {
      outlined init with copy of DataStreamState(*(void *)(v2 + 56) + *(void *)(v6 + 72) * v4, v0[8]);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v6 + 56))(v0[8], 1, 1, v5);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[10] + 56))(v0[8], 1, 1, v0[9]);
  }
  return MEMORY[0x270FA2498](closure #1 in DataStreamCancellationHandler.cancel(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 48))(v2, 1, v1) == 1)
  {
    outlined destroy of DataStreamState?(v2, &demangling cache variable for type metadata for DataStreamState?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[11];
    outlined init with take of DataStreamState(v2, v5);
    uint64_t v6 = v5 + *(int *)(v1 + 44);
    outlined destroy of DataStreamState?(v6, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    os_log_type_t v7 = *MEMORY[0x263F4FD50];
    BOOL v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    *uint64_t v10 = v0;
    v10[1] = closure #1 in DataStreamCancellationHandler.cancel();
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[6];
    return DataStreamStateManager.removeState(uuid:state:)(v12, v11);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in DataStreamCancellationHandler.cancel(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DataStreamState(*(void *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DataStreamCancellationHandler.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DataStreamCancellationHandler()
{
  return type metadata accessor for DataStreamCancellationHandler();
}

uint64_t type metadata accessor for DataStreamCancellationHandler()
{
  uint64_t result = type metadata singleton initialization cache for DataStreamCancellationHandler;
  if (!type metadata singleton initialization cache for DataStreamCancellationHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DataStreamCancellationHandler()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in DataStreamCancellationHandler.cancel()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return closure #1 in DataStreamCancellationHandler.cancel()(a1, v6, v7, v8, v9);
}

uint64_t outlined init with take of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DataStreamState?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of DataStreamState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t closure #1 in DataStreamCancellationHandler.cancel()partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in DataStreamCancellationHandler.cancel()(a1, v6, v7, v8, v9);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  return swift_task_create();
}

uint64_t DataStreamStateManager.startPromptProcessingInstrumenter(uuid:onBehalfOfUserIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5, v6);
  unint64_t v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v34 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v16 - 8, v17);
  unint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DataStreamState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v2 + 112);
  if (!*(void *)(v25 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v27)
  {
    outlined init with copy of DataStreamState(*(void *)(v25 + 56) + *(void *)(v21 + 72) * v26, (uint64_t)v19);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v28, 1, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  outlined init with take of DataStreamState((uint64_t)v19, (uint64_t)v24);
  uint64_t v30 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v34, v33, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v3 + OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  PromptProcessingInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)();
  uint64_t v31 = type metadata accessor for PromptProcessingInstrumenter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 0, 1, v31);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v30);
  swift_endAccess();
  return outlined destroy of DataStreamState((uint64_t)v24);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v33 = a1;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
  uint64_t v7 = MEMORY[0x270FA5388](v32, v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v10);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v30 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v31 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v18 << 6);
LABEL_19:
    uint64_t v24 = *(void *)(a3 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v12, v24 + *(void *)(*(void *)(v25 - 8) + 72) * v20, v25);
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v27 = type metadata accessor for DataStreamState(0);
    outlined init with copy of DataStreamState(v26 + *(void *)(*(void *)(v27 - 8) + 72) * v20, (uint64_t)&v12[*(int *)(v32 + 48)]);
    outlined init with take of (key: UUID, value: DataStreamState)((uint64_t)v12, (uint64_t)v9);
    char v28 = v33(v9);
    uint64_t result = outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
    if (v3) {
      goto LABEL_28;
    }
    if (v28)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v31) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v18);
  if (v22)
  {
LABEL_18:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v31) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v31) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v31) {
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v23);
  if (v22) {
    goto LABEL_17;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v31)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v23);
  if (v22)
  {
LABEL_17:
    int64_t v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v31) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v30 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t DataStreamStateManager.endPromptProcessingInstrumenter(uuid:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v61 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Instrumenter();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  MEMORY[0x270FA5388](v8, v9);
  uint64_t v56 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  uint64_t v13 = MEMORY[0x270FA5388](v11 - 8, v12);
  uint64_t v51 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v52 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18, v19);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  uint64_t v24 = MEMORY[0x270FA5388](v22 - 8, v23);
  float16x8_t v55 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24, v26);
  char v28 = (char *)&v49 - v27;
  uint64_t v29 = type metadata accessor for PromptProcessingInstrumenter();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29, v31);
  uint64_t v33 = (char *)&v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v2 + 144;
  swift_beginAccess();
  uint64_t v34 = *(void *)(v2 + 144);
  if (!*(void *)(v34 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, 1, 1, v29);
    return outlined destroy of DataStreamState?((uint64_t)v28, &demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  }
  swift_bridgeObjectRetain();
  uint64_t v50 = a1;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v36)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))(v28, *(void *)(v34 + 56) + *(void *)(v30 + 72) * v35, v29);
    unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v37(v28, 0, 1, v29);
  }
  else
  {
    unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v37(v28, 1, 1, v29);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v28, &demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v33, v28, v29);
  uint64_t v39 = v54;
  PromptProcessingInstrumenter.inputTokensCount.setter();
  uint64_t v40 = type metadata accessor for DataStreamState(0);
  outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(v39 + *(int *)(v40 + 44), (uint64_t)v17);
  uint64_t v41 = v52;
  int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v17, 1, v18);
  uint64_t v49 = v37;
  if (v42 == 1)
  {
    outlined destroy of DataStreamState?((uint64_t)v17, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v21, v17, v18);
    uint64_t v43 = v51;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v51, v21, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v43, 0, 1, v18);
    PromptProcessingInstrumenter.errorType.setter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v18);
  }
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 192), *(void *)(v3 + 216));
  uint64_t v44 = v56;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v56, v33, v29);
  uint64_t v46 = v57;
  uint64_t v45 = v58;
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v44, *MEMORY[0x263F40F08], v58);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v45);
  uint64_t v47 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v61, v50, v60);
  uint64_t v48 = (uint64_t)v55;
  v49(v55, 1, 1, v29);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v48, v47);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v33, v29);
}

uint64_t DataStreamStateManager.startFirstTokenInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5, v6);
  unint64_t v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v34 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v16 - 8, v17);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DataStreamState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v2 + 112);
  if (!*(void *)(v25 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v27)
  {
    outlined init with copy of DataStreamState(*(void *)(v25 + 56) + *(void *)(v21 + 72) * v26, (uint64_t)v19);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v28, 1, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  outlined init with take of DataStreamState((uint64_t)v19, (uint64_t)v24);
  uint64_t v30 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v34, v33, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v3 + OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  FirstTokenInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)();
  uint64_t TokenInferenceInstrumenter = type metadata accessor for FirstTokenInferenceInstrumenter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TokenInferenceInstrumenter - 8) + 56))(v11, 0, 1, TokenInferenceInstrumenter);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v30);
  swift_endAccess();
  return outlined destroy of DataStreamState((uint64_t)v24);
}

uint64_t DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v40 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Instrumenter();
  uint64_t v7 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  uint64_t v13 = MEMORY[0x270FA5388](v11 - 8, v12);
  uint64_t v36 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t TokenInferenceInstrumenter = type metadata accessor for FirstTokenInferenceInstrumenter();
  uint64_t v19 = *(void *)(TokenInferenceInstrumenter - 8);
  MEMORY[0x270FA5388](TokenInferenceInstrumenter, v20);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v23 = *(void *)(v1 + 120);
  if (!*(void *)(v23 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, TokenInferenceInstrumenter);
    return outlined destroy of DataStreamState?((uint64_t)v17, &demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = a1;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v25)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, *(void *)(v23 + 56) + *(void *)(v19 + 72) * v24, TokenInferenceInstrumenter);
    unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v26(v17, 0, 1, TokenInferenceInstrumenter);
  }
  else
  {
    unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v26(v17, 1, 1, TokenInferenceInstrumenter);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, TokenInferenceInstrumenter) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v17, &demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, TokenInferenceInstrumenter);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 192), *(void *)(v2 + 216));
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v10, v22, TokenInferenceInstrumenter);
  uint64_t v28 = *MEMORY[0x263F40F10];
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  uint64_t v34 = v26;
  uint64_t v30 = v37;
  v29(v10, v28, v37);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v30);
  uint64_t v31 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, v35, v39);
  uint64_t v32 = (uint64_t)v36;
  v34(v36, 1, 1, TokenInferenceInstrumenter);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v32, v31);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, TokenInferenceInstrumenter);
}

uint64_t DataStreamStateManager.startExtendInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v34 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v16 - 8, v17);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DataStreamState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20, v22);
  unint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v2 + 112);
  if (!*(void *)(v25 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v27)
  {
    outlined init with copy of DataStreamState(*(void *)(v25 + 56) + *(void *)(v21 + 72) * v26, (uint64_t)v19);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v28, 1, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  outlined init with take of DataStreamState((uint64_t)v19, (uint64_t)v24);
  uint64_t v30 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v34, v33, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v3 + OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  ExtendInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)();
  uint64_t v31 = type metadata accessor for ExtendInferenceInstrumenter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 0, 1, v31);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v30);
  swift_endAccess();
  return outlined destroy of DataStreamState((uint64_t)v24);
}

uint64_t DataStreamStateManager.endExtendInferenceInstrumented(uuid:state:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v36 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v41 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Instrumenter();
  uint64_t v8 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  uint64_t v14 = MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v37 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = type metadata accessor for ExtendInferenceInstrumenter();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19, v21);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v2 + 136);
  if (!*(void *)(v24 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    return outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = a1;
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v26)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v18, *(void *)(v24 + 56) + *(void *)(v20 + 72) * v25, v19);
    char v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v27(v18, 0, 1, v19);
  }
  else
  {
    char v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v27(v18, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
  ExtendInferenceInstrumenter.outputTokensCount.setter();
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 192), *(void *)(v3 + 216));
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v11, v23, v19);
  uint64_t v29 = *MEMORY[0x263F40F00];
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  uint64_t v36 = v27;
  uint64_t v31 = v38;
  v30(v11, v29, v38);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v31);
  uint64_t v32 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v41, v35, v40);
  uint64_t v33 = (uint64_t)v37;
  v36(v37, 1, 1, v19);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v33, v32);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t DataStreamStateManager.startCompletePromptInstrumenter(uuid:onBehalfOfUserIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v37 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v16 - 8, v17);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DataStreamState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v2 + 112);
  if (!*(void *)(v25 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = a1;
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v27)
  {
    outlined init with copy of DataStreamState(*(void *)(v25 + 56) + *(void *)(v21 + 72) * v26, (uint64_t)v19);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v28, 1, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for DataStreamState?);
  }
  outlined init with take of DataStreamState((uint64_t)v19, (uint64_t)v24);
  uint64_t v30 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v37, v33, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v3 + OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  CompletePromptRequestInstrumenter.init(signpostLogger:requestIdentifier:oneshot:onBehalfOfUserIdentifier:eventReporter:)();
  uint64_t v31 = type metadata accessor for CompletePromptRequestInstrumenter();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 0, 1, v31);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v30);
  swift_endAccess();
  return outlined destroy of DataStreamState((uint64_t)v24);
}

uint64_t DataStreamStateManager.endCompletePromptInstrumenter(uuid:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v75 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Instrumenter();
  uint64_t v71 = *(void *)(v7 - 8);
  uint64_t v72 = v7;
  MEMORY[0x270FA5388](v7, v8);
  uint64_t v69 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v17 = (char *)&v60 - v16;
  uint64_t v18 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v66 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18, v19);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  uint64_t v24 = MEMORY[0x270FA5388](v22 - 8, v23);
  uint64_t v68 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24, v26);
  uint64_t v28 = (char *)&v60 - v27;
  uint64_t v29 = type metadata accessor for CompletePromptRequestInstrumenter();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29, v31);
  uint64_t v33 = (char *)&v60 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v2 + 128;
  swift_beginAccess();
  uint64_t v70 = v2;
  uint64_t v34 = *(void *)(v2 + 128);
  if (!*(void *)(v34 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, 1, 1, v29);
    return outlined destroy of DataStreamState?((uint64_t)v28, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  }
  swift_bridgeObjectRetain();
  uint64_t v64 = a1;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v36)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))(v28, *(void *)(v34 + 56) + *(void *)(v30 + 72) * v35, v29);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  char v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v65(v28, v37, 1, v29);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1) {
    return outlined destroy of DataStreamState?((uint64_t)v28, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v33, v28, v29);
  uint64_t v39 = type metadata accessor for DataStreamState(0);
  outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(v76 + *(int *)(v39 + 44), (uint64_t)v17);
  uint64_t v40 = v66;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of DataStreamState?((uint64_t)v17, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v21, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v14, v21, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v14, 0, 1, v18);
    CompletePromptRequestInstrumenter.errorType.setter();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v18);
  }
  uint64_t v66 = v30 + 56;
  uint64_t v41 = (uint64_t *)(v76 + *(int *)(v39 + 52));
  unsigned int v42 = *((unsigned __int16 *)v41 + 52);
  if (*((_WORD *)v41 + 52) == 2)
  {
    unint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
  }
  else
  {
    uint64_t v44 = v41[11];
    uint64_t v43 = v41[12];
    int v45 = *((_DWORD *)v41 + 20);
    uint64_t v63 = v41[9];
    long long v62 = *(_OWORD *)(v41 + 7);
    uint64_t v47 = v41[5];
    unint64_t v46 = v41[6];
    uint64_t v48 = v41[4];
    long long v60 = *((_OWORD *)v41 + 1);
    int v49 = *((_DWORD *)v41 + 2);
    uint64_t v50 = *v41;
    unint64_t v61 = HIDWORD(v46);
    char v79 = v49 & 1;
    char v78 = v46 & 1;
    char v77 = v45 & 1;
    char v51 = v42 & 1;
    int v52 = (v42 >> 8) & 1;
    *((void *)&v81 + 1) = &type metadata for SpeculativeDecoderPerformanceMeasurement;
    unint64_t v82 = lazy protocol witness table accessor for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement();
    uint64_t v53 = swift_allocObject();
    *(void *)&long long v80 = v53;
    *(void *)(v53 + 16) = v50;
    *(unsigned char *)(v53 + 24) = v79;
    *(_OWORD *)(v53 + 32) = v60;
    *(void *)(v53 + 48) = v48;
    *(void *)(v53 + 56) = v47;
    *(unsigned char *)(v53 + 64) = v78;
    *(_DWORD *)(v53 + 68) = v61;
    *(_OWORD *)(v53 + 72) = v62;
    *(void *)(v53 + 88) = v63;
    *(unsigned char *)(v53 + 96) = v77;
    *(void *)(v53 + 104) = v44;
    *(void *)(v53 + 112) = v43;
    *(unsigned char *)(v53 + 120) = v51;
    *(unsigned char *)(v53 + 121) = v52;
  }
  uint64_t v54 = v64;
  CompletePromptRequestInstrumenter.speculativeDecoderStats.setter();
  CompletePromptRequestInstrumenter.outputTokensCount.setter();
  CompletePromptRequestInstrumenter.inputTokensCount.setter();
  CompletePromptRequestInstrumenter.prefixKVCacheTokensMatchCount.setter();
  CompletePromptRequestInstrumenter.promptModulesKVCacheTokensMatchCount.setter();
  __swift_project_boxed_opaque_existential_1((void *)(v70 + 192), *(void *)(v70 + 216));
  float16x8_t v55 = v69;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v69, v33, v29);
  uint64_t v57 = v71;
  uint64_t v56 = v72;
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v55, *MEMORY[0x263F40F18], v72);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v56);
  uint64_t v58 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v75, v54, v74);
  uint64_t v59 = (uint64_t)v68;
  v65(v68, 1, 1, v29);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v59, v58);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v33, v29);
}

uint64_t DataStreamStateManager.updateState(uuid:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v14 = *(void *)(v2 + 112);
  uint64_t v19 = a1;
  swift_bridgeObjectRetain();
  char v15 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in DataStreamStateManager.updateState(uuid:state:), (char)v18, v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (v15)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
    outlined init with copy of DataStreamState(a2, (uint64_t)v8);
    uint64_t v17 = type metadata accessor for DataStreamState(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 0, 1, v17);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)v13);
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #1 in DataStreamStateManager.updateState(uuid:state:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v43 = a3;
  int v42 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v9 - 8, v10);
  uint64_t v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v18 - 8, v19);
  uint64_t v21 = &v41[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EventReporter();
  if ((a5 & 0x100000000) != 0)
  {
    swift_allocObject();
    uint64_t v22 = EventReporter.init()();
  }
  else
  {
    uint64_t v22 = EventReporter.__allocating_init(onBehalfOfUserIdentifier:)();
  }
  uint64_t v23 = v22;
  uint64_t v45 = v22;
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v21, 1, 1, v24);
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = 0;
  void v25[3] = 0;
  void v25[4] = v23;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v21, (uint64_t)&async function pointer to partial apply for specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:), (uint64_t)v25);
  swift_release();
  uint64_t v26 = (int *)type metadata accessor for DataStreamState(0);
  uint64_t v27 = a6 + v26[11];
  uint64_t v28 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = a6 + v26[14];
  uint64_t v30 = type metadata accessor for FinishReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  swift_beginAccess();
  uint64_t v31 = v45;
  uint64_t v32 = a6 + v26[18];
  uint64_t v33 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  swift_bridgeObjectRetain();
  swift_retain();
  StopSequenceMonitor.init(stopSequences:)();
  uint64_t v34 = MEMORY[0x263F8EE78];
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = v34;
  *(unsigned char *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = v34;
  *(unsigned char *)(a6 + v26[10]) = v42 & 1;
  unint64_t v35 = (void *)(a6 + v26[12]);
  *unint64_t v35 = v43;
  v35[1] = a4;
  uint64_t v36 = a6 + v26[13];
  *(void *)(v36 + 96) = 0;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_WORD *)(v36 + 104) = 2;
  uint64_t v37 = a6 + v26[15];
  *(void *)uint64_t v37 = 0;
  *(unsigned char *)(v37 + 8) = 1;
  uint64_t v38 = a6 + v26[16];
  *(void *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 8) = 1;
  *(void *)(a6 + v26[17]) = v31;
  uint64_t v39 = v44;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v17, v44, v13);
  outlined init with copy of DataStreamState(a6, (uint64_t)v12);
  (*(void (**)(unsigned char *, void, uint64_t, int *))(*((void *)v26 - 1) + 56))(v12, 0, 1, v26);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v12, (uint64_t)v17);
  swift_endAccess();
  DataStreamStateManager.startCompletePromptInstrumenter(uuid:onBehalfOfUserIdentifier:)(v39, a5 | ((HIDWORD(a5) & 1) << 32));
  return swift_release();
}

uint64_t specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return MEMORY[0x270FA2498](specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:), 0, 0);
}

uint64_t specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)()
{
  EventReporter.warmup()();
  if (v1) {

  }
  **(unsigned char **)(v0 + 16) = v1 != 0;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t DataStreamStateManager.removeState(uuid:state:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  v3[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](DataStreamStateManager.removeState(uuid:state:), v2, 0);
}

uint64_t DataStreamStateManager.removeState(uuid:state:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = (uint64_t *)(v0[10] + 112);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = swift_task_alloc();
  char v5 = v4;
  *(void *)(v4 + 16) = v1;
  swift_bridgeObjectRetain();
  LOBYTE(v1) = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:), v5, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = (void *)v0[9];
    uint64_t v7 = type metadata accessor for DataStreamState(0);
    if (*(_WORD *)((char *)v6 + *(int *)(v7 + 52) + 104) != 2)
    {
      SpeculativeDecoderPerformanceMeasurement.printToOSLogForLLMWheel()();
      uint64_t v6 = (void *)v0[9];
    }
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[11];
    uint64_t v10 = v0[10];
    (*(void (**)(uint64_t, void, void))(v0[13] + 16))(v8, v0[8], v0[12]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v9, 1, 1, v7);
    swift_beginAccess();
    specialized Dictionary.subscript.setter(v9, v8);
    swift_endAccess();
    uint64_t v11 = __swift_project_boxed_opaque_existential_1((void *)(v10 + 152), *(void *)(v10 + 176));
    v0[15] = v11;
    v0[16] = *v6;
    uint64_t v12 = *v11;
    return MEMORY[0x270FA2498](DataStreamStateManager.removeState(uuid:state:), v12, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  Swift::OpaquePointer *v0;
  void *rawValue;
  uint64_t v3;

  rawValue = v0[10]._rawValue;
  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[16]);
  return MEMORY[0x270FA2498](DataStreamStateManager.removeState(uuid:state:), rawValue, 0);
}

{
  void *v0;
  void (*v1)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v0[9];
  uint64_t v2 = v0[8];
  DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)(v2);
  DataStreamStateManager.endExtendInferenceInstrumented(uuid:state:)(v2, v1);
  DataStreamStateManager.endCompletePromptInstrumenter(uuid:state:)(v2, (uint64_t)v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t DataStreamStateManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t DataStreamStateManager.__deallocating_deinit()
{
  DataStreamStateManager.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t ObjC metadata update function for DataStreamStateManager()
{
  return type metadata accessor for DataStreamStateManager(0);
}

uint64_t type metadata accessor for DataStreamStateManager(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for DataStreamStateManager);
}

uint64_t type metadata completion function for DataStreamStateManager()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DataStreamState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v8 = a3[9];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for StopSequenceMonitor();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[11];
    *(unsigned char *)(v7 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v19 = a3[12];
    uint64_t v20 = a3[13];
    uint64_t v21 = (void *)(v7 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (_OWORD *)(v7 + v20);
    uint64_t v25 = (_OWORD *)((char *)a2 + v20);
    long long v26 = v25[1];
    _OWORD *v24 = *v25;
    v24[1] = v26;
    *(_OWORD *)((char *)v24 + 90) = *(_OWORD *)((char *)v25 + 90);
    long long v27 = v25[5];
    v24[4] = v25[4];
    v24[5] = v27;
    long long v28 = v25[3];
    v24[2] = v25[2];
    v24[3] = v28;
    uint64_t v29 = a3[14];
    uint64_t v30 = (void *)(v7 + v29);
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for FinishReason();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
    swift_bridgeObjectRetain();
    if (v34(v31, 1, v32))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
      memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v36 = a3[15];
    uint64_t v37 = a3[16];
    uint64_t v38 = v7 + v36;
    uint64_t v39 = (uint64_t)a2 + v36;
    *(void *)uint64_t v38 = *(void *)v39;
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
    uint64_t v40 = v7 + v37;
    uint64_t v41 = (uint64_t)a2 + v37;
    *(void *)uint64_t v40 = *(void *)v41;
    *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
    uint64_t v42 = a3[18];
    *(void *)(v7 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    uint64_t v43 = (void *)(v7 + v42);
    uint64_t v44 = (char *)a2 + v42;
    uint64_t v45 = type metadata accessor for Prompt.Rendering();
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48);
    swift_retain();
    if (v47(v44, 1, v45))
    {
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
  }
  return v7;
}

uint64_t destroy for DataStreamState(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[11];
  uint64_t v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[14];
  uint64_t v10 = type metadata accessor for FinishReason();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  swift_release();
  uint64_t v12 = a1 + a2[18];
  uint64_t v13 = type metadata accessor for Prompt.Rendering();
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v13);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v12, v13);
  }
  return result;
}

uint64_t initializeWithCopy for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for StopSequenceMonitor();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[12];
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (_OWORD *)(a1 + v18);
  uint64_t v23 = (_OWORD *)(a2 + v18);
  long long v24 = v23[1];
  _OWORD *v22 = *v23;
  v22[1] = v24;
  *(_OWORD *)((char *)v22 + 90) = *(_OWORD *)((char *)v23 + 90);
  long long v25 = v23[5];
  v22[4] = v23[4];
  v22[5] = v25;
  long long v26 = v23[3];
  void v22[2] = v23[2];
  void v22[3] = v26;
  uint64_t v27 = a3[14];
  long long v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for FinishReason();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain();
  if (v32(v29, 1, v30))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v34 = a3[15];
  uint64_t v35 = a3[16];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  uint64_t v38 = a1 + v35;
  uint64_t v39 = a2 + v35;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  uint64_t v43 = type metadata accessor for Prompt.Rendering();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
  swift_retain();
  if (v45(v42, 1, v43))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  return a1;
}

uint64_t assignWithCopy for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[13];
  uint64_t v23 = (_OWORD *)(a1 + v22);
  long long v24 = (long long *)(a2 + v22);
  long long v25 = *v24;
  long long v26 = v24[2];
  v23[1] = v24[1];
  _OWORD v23[2] = v26;
  _OWORD *v23 = v25;
  long long v27 = v24[3];
  long long v28 = v24[4];
  long long v29 = v24[5];
  *(_OWORD *)((char *)v23 + 90) = *(long long *)((char *)v24 + 90);
  v23[4] = v28;
  v23[5] = v29;
  void v23[3] = v27;
  uint64_t v30 = a3[14];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = type metadata accessor for FinishReason();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_13:
  uint64_t v39 = a3[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = a3[16];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v46 = *v45;
  *(unsigned char *)(v44 + 8) = *((unsigned char *)v45 + 8);
  *(void *)uint64_t v44 = v46;
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_retain();
  swift_release();
  uint64_t v47 = a3[18];
  uint64_t v48 = (void *)(a1 + v47);
  int v49 = (void *)(a2 + v47);
  uint64_t v50 = type metadata accessor for Prompt.Rendering();
  uint64_t v51 = *(void *)(v50 - 8);
  int v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
  int v53 = v52(v48, 1, v50);
  int v54 = v52(v49, 1, v50);
  if (!v53)
  {
    if (!v54)
    {
      (*(void (**)(void *, void *, uint64_t))(v51 + 24))(v48, v49, v50);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v51 + 8))(v48, v50);
    goto LABEL_18;
  }
  if (v54)
  {
LABEL_18:
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v48, v49, *(void *)(*(void *)(v55 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v51 + 16))(v48, v49, v50);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  return a1;
}

uint64_t initializeWithTake for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  int v17 = (_OWORD *)(a1 + v16);
  uint64_t v18 = (_OWORD *)(a2 + v16);
  long long v19 = v18[5];
  v17[4] = v18[4];
  void v17[5] = v19;
  *(_OWORD *)((char *)v17 + 90) = *(_OWORD *)((char *)v18 + 90);
  long long v20 = v18[1];
  _OWORD *v17 = *v18;
  v17[1] = v20;
  long long v21 = v18[3];
  v17[2] = v18[2];
  void v17[3] = v21;
  uint64_t v22 = a3[14];
  uint64_t v23 = (void *)(a1 + v22);
  long long v24 = (const void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for FinishReason();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v28 = a3[15];
  uint64_t v29 = a3[16];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  uint64_t v34 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  uint64_t v35 = (void *)(a1 + v34);
  int v36 = (const void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for Prompt.Rendering();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  return a1;
}

uint64_t assignWithTake for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[12];
  long long v20 = (void *)(a1 + v19);
  long long v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *long long v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = a3[14];
  uint64_t v26 = (_OWORD *)(a1 + v24);
  uint64_t v27 = (_OWORD *)(a2 + v24);
  long long v28 = v27[5];
  v26[4] = v27[4];
  v26[5] = v28;
  *(_OWORD *)((char *)v26 + 90) = *(_OWORD *)((char *)v27 + 90);
  long long v29 = v27[1];
  _OWORD *v26 = *v27;
  v26[1] = v29;
  long long v30 = v27[3];
  v26[2] = v27[2];
  void v26[3] = v30;
  uint64_t v31 = (void *)(a1 + v25);
  uint64_t v32 = (void *)(a2 + v25);
  uint64_t v33 = type metadata accessor for FinishReason();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
LABEL_13:
  uint64_t v39 = a3[15];
  uint64_t v40 = a3[16];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(void *)uint64_t v41 = *(void *)v42;
  *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
  uint64_t v43 = a1 + v40;
  uint64_t v44 = a2 + v40;
  *(void *)uint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_release();
  uint64_t v45 = a3[18];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (void *)(a2 + v45);
  uint64_t v48 = type metadata accessor for Prompt.Rendering();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 40))(v46, v47, v48);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v49 + 8))(v46, v48);
    goto LABEL_18;
  }
  if (v52)
  {
LABEL_18:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v49 + 32))(v46, v47, v48);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStreamState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FA985EC);
}

uint64_t sub_25FA985EC(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for StopSequenceMonitor();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[9];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v14(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_11;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = &a1[a3[18]];

  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for DataStreamState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FA987D0);
}

char *sub_25FA987D0(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for StopSequenceMonitor();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v14(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_9;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = &v5[a4[18]];

  return (char *)v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for DataStreamState(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for DataStreamState);
}

uint64_t type metadata accessor for DataStreamStateManager(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for DataStreamState()
{
  type metadata accessor for StopSequenceMonitor();
  if (v0 <= 0x3F)
  {
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(319, &lazy cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?, MEMORY[0x263F4FD80]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(319, &lazy cache variable for type metadata for FinishReason?, MEMORY[0x263F7F890]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(319, &lazy cache variable for type metadata for Prompt.Rendering?, MEMORY[0x263F7FB78]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance DataStreamStateManager()
{
  return v0;
}

uint64_t partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t outlined init with take of (key: UUID, value: DataStreamState)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25FA98CDC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  uint64_t v5[2] = a1;
  void v5[3] = v4;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return MEMORY[0x270FA2498](specialized closure #2 in DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:), 0, 0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unsigned char *v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_25FA99194()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement()
{
  unint64_t result = lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement;
  if (!lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement);
  }
  return result;
}

uint64_t sub_25FA99340()
{
  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in DataStreamStateManager.updateState(uuid:state:)()
{
  return partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:)() & 1;
}

uint64_t DelayedMaskedLanguageModel.baseLanguageModel.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeterministicLanguageModelProtocol(v1 + 24, a1);
}

uint64_t DelayedMaskedLanguageModel.baseLanguageModel.setter(long long *a1)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of LogitCollection(a1, v3);
  return swift_endAccess();
}

uint64_t (*DelayedMaskedLanguageModel.baseLanguageModel.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t DelayedMaskedLanguageModel.__allocating_init(_:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  outlined init with take of LogitCollection(a1, v2 + 24);
  return v2;
}

uint64_t DelayedMaskedLanguageModel.init(_:)(long long *a1)
{
  *(void *)(v1 + 16) = 0;
  outlined init with take of LogitCollection(a1, v1 + 24);
  return v1;
}

unint64_t DelayedMaskedLanguageModel.resolve(maskLanguageModel:)(uint64_t a1)
{
  if (v1[2])
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v2 = v1;
  outlined init with copy of DeterministicLanguageModelProtocol?(a1, (uint64_t)&v15);
  if (v16)
  {
    outlined init with take of LogitCollection(&v15, (uint64_t)v17);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v17, (uint64_t)&v15);
    uint64_t v3 = v1 + 3;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v1 + 3), (uint64_t)v14);
    type metadata accessor for MaskedLanguageModel();
    swift_allocObject();
    uint64_t v4 = MaskedLanguageModel.init(_:_:)(&v15, v14);
    unint64_t v5 = v1[2];
    v2[2] = v4;
    swift_retain();
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v5);
    uint64_t v7 = v2[6];
    uint64_t v6 = v2[7];
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v3, v7);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x270FA5388](v8, v8);
    uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v6);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    unint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    if (!v2) {
      return result;
    }
    __break(1u);
  }
  outlined destroy of DeterministicLanguageModelProtocol?((uint64_t)&v15);
  unint64_t v13 = v2[2];
  v2[2] = 1;
  return outlined consume of DelayedMaskedLanguageModel.MaskResolution(v13);
}

uint64_t outlined init with copy of DeterministicLanguageModelProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DeterministicLanguageModelProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t outlined consume of DelayedMaskedLanguageModel.MaskResolution(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t DelayedMaskedLanguageModel.startNode.getter()
{
  swift_beginAccess();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  uint64_t v4 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v3, v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v1);
  return v7;
}

uint64_t DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 136) = a2;
  *(void *)(v4 + 144) = v3;
  *(unsigned char *)(v4 + 192) = a3;
  *(void *)(v4 + 128) = a1;
  return MEMORY[0x270FA2498](DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 152) = v2;
  if (!v2) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (v2 == 1)
  {
    uint64_t v3 = v1 + 24;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v3, v0 + 16);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v4);
    long long v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 24)
                                                                              + **(int **)(v5 + 24));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v6;
    void *v6 = v0;
    v6[1] = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v7 = *(unsigned __int8 *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 136);
    return v15(v9, v8, v7, v4, v5);
  }
  else
  {
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v11;
    void *v11 = v0;
    v11[1] = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    char v12 = *(unsigned char *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 136);
    return MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(v14, v13, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(v0[19]);
  uint64_t v1 = v0[11];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(void *)(v0 + 152));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[10] = v2;
  v3[11] = a1;
  v3[12] = v1;
  v3[21] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else {
    uint64_t v4 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[13] = v2;
  v3[14] = a1;
  v3[15] = v1;
  v3[23] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else {
    uint64_t v4 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

Swift::Int __swiftcall DelayedMaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  unint64_t v7 = v3[2];
  if (v7 == 1)
  {
    swift_beginAccess();
    uint64_t v8 = v3[6];
    uint64_t v9 = v3[7];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 3), v8);
    uint64_t v10 = (*(uint64_t (**)(Swift::Int, Swift::Int, Swift::Bool, uint64_t, uint64_t))(v9 + 16))(forPreviousNode, token, isPrompt, v8, v9);
    swift_endAccess();
    return v10;
  }
  if (v7)
  {
    swift_retain();
    uint64_t v10 = MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(forPreviousNode, token, isPrompt);
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v7);
    return v10;
  }
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v4 = *((void *)prompt.queryTokens._rawValue + 1);
  uint64_t v5 = *((void *)prompt.queryTokens._rawValue + 2);
  unint64_t v6 = v2[2];
  if (v6 == 1)
  {
    uint64_t v11 = *(void *)prompt.queryTokens._rawValue;
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    swift_beginAccess();
    uint64_t v7 = v2[6];
    uint64_t v8 = v2[7];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 3), v7);
    uint64_t v9 = (*(uint64_t (**)(Swift::Int, uint64_t *, uint64_t, uint64_t))(v8 + 48))(forPreviousNode, &v11, v7, v8);
    swift_endAccess();
    return v9;
  }
  if (v6)
  {
    uint64_t v11 = *(void *)prompt.queryTokens._rawValue;
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    swift_retain();
    v14.queryTokens._rawValue = &v11;
    uint64_t v9 = MaskedLanguageModel.node(forPreviousNode:prompt:)(forPreviousNode, v14);
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v6);
    return v9;
  }
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DelayedMaskedLanguageModel.deinit()
{
  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t DelayedMaskedLanguageModel.__deallocating_deinit()
{
  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(void *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance DelayedMaskedLanguageModel()
{
  uint64_t v1 = (void *)*v0;
  swift_beginAccess();
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  uint64_t v5 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v4, v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v2);
  return v8;
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance DelayedMaskedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return DelayedMaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance DelayedMaskedLanguageModel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  *(void *)(v9 + 136) = a2;
  *(void *)(v9 + 144) = v8;
  *(unsigned char *)(v9 + 192) = a3;
  *(void *)(v9 + 128) = a1;
  return MEMORY[0x270FA2498](DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance DelayedMaskedLanguageModel@<X0>(Swift::Int a1@<X0>, TokenGenerationInference::SamplingDecoderPrompt a2@<0:X1, 8:X2, 16:X3>)
{
  return DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(a1, a2);
}

uint64_t type metadata accessor for DelayedMaskedLanguageModel()
{
  return self;
}

uint64_t method lookup function for DelayedMaskedLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DelayedMaskedLanguageModel);
}

uint64_t dispatch thunk of DelayedMaskedLanguageModel.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  char *result = *a2;
  return result;
}

unint64_t *assignWithTake for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DelayedMaskedLanguageModel.MaskResolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for DelayedMaskedLanguageModel.MaskResolution(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  char *result = v2;
  return result;
}

void *type metadata accessor for DelayedMaskedLanguageModel.MaskResolution()
{
  return &unk_270BD2AB0;
}

uint64_t DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v11(a1, a2, 0, a3, a4);
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 168) = a6;
  *(void *)(v7 + 176) = v6;
  *(unsigned char *)(v7 + 248) = a4;
  *(void *)(v7 + 152) = a3;
  *(void *)(v7 + 160) = a5;
  *(void *)(v7 + 136) = a1;
  *(void *)(v7 + 144) = a2;
  *(void *)(v7 + 184) = *(void *)(a5 - 8);
  *(void *)(v7 + 192) = swift_task_alloc();
  return MEMORY[0x270FA2498](DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 184) + 16))(*(void *)(v0 + 192), *(void *)(v0 + 176), *(void *)(v0 + 160));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of LogitCollection((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 16)
                                                                                       + **(int **)(v2 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v3;
    void *v3 = v0;
    v3[1] = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
    uint64_t v4 = *(unsigned __int8 *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 136);
    return v16(v7, v5, v6, v4, v1, v2);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 144);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
    outlined destroy of UnbatchedDeterministicLanguageModelProtocol?(v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 216) = v10;
    *(_OWORD *)(v10 + 16) = xmmword_25FB61DF0;
    *(void *)(v10 + 32) = v9;
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 24)
                                                                              + **(int **)(v18 + 24));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v11;
    void *v11 = v0;
    v11[1] = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = *(unsigned __int8 *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 160);
    return v17(v10, v14, v13, v15, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  else {
    uint64_t v2 = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 232);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 96);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  unint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120))
  {
    outlined init with take of LogitCollection((long long *)(v0 + 96), *(void *)(v0 + 136));
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.allNextTokensPossiblyDeterministic(nodes:) in conformance CompositeLanguageModel()
{
  return 1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DeterministicLanguageModelProtocol.allNextTokensPossiblyDeterministic(nodes:)(Swift::OpaquePointer nodes)
{
  return 1;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance CompositeLanguageModel()
{
  return 0;
}

uint64_t DeterministicLanguageModelProtocol.logitsAreDense.getter()
{
  return 0;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance CompositeLanguageModel(uint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1], a2[2], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:));
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.device);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25FA51000, v6, v7, "Ignoring prompt modules, using flattened prompt", v8, 2u);
      MEMORY[0x261206F80](v8, -1, -1);
    }

    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v10 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, v14);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.device);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_25FA51000, v9, v10, "Ignoring prompt modules, using flattened prompt", v11, 2u);
      MEMORY[0x261206F80](v11, -1, -1);
    }

    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v13 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v13);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = a5(a1, v17, 1);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.device);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_25FA51000, v6, v7, "Ignoring prompt modules, using flattened prompt", v8, 2u);
      MEMORY[0x261206F80](v8, -1, -1);
    }

    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v10 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, v14);
  swift_bridgeObjectRelease();
  return v12;
}

Swift::Int __swiftcall DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v3 = *((void *)prompt.queryTokens._rawValue + 1);
  if (!*(void *)(v3 + 16))
  {
    tokens._rawValue = (void *)MEMORY[0x263F8EE78];
LABEL_11:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.device);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&dword_25FA51000, v5, v6, "Ignoring prompt modules, using flattened prompt", v7, 2u);
    MEMORY[0x261206F80](v7, -1, -1);
  }

  uint64_t v8 = *(void *)(v3 + 16);
  tokens._rawValue = (void *)MEMORY[0x263F8EE78];
  if (!v8) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v8; ++i)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v10);
  }
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v12 = DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(forPreviousNode, tokens, 1);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t DeterministicLanguageModelProtocol.supportsPromptModule.getter()
{
  return 0;
}

Swift::Int __swiftcall DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(Swift::Int forPreviousNode, Swift::OpaquePointer tokens, Swift::Bool isPrompt)
{
  uint64_t v6 = *((void *)tokens._rawValue + 2);
  if (v6)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v3;
    uint64_t v11 = *(uint64_t (**)(Swift::Int, void, BOOL, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    BOOL v13 = isPrompt;
    do
    {
      uint64_t v14 = v12 + 1;
      forPreviousNode = v11(forPreviousNode, *((void *)tokens._rawValue + v12 + 4), v13, v8, v7);
      uint64_t v12 = v14;
    }
    while (v6 != v14);
    swift_bridgeObjectRelease();
  }
  return forPreviousNode;
}

uint64_t DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  void v6[2] = a4;
  uint64_t v6[3] = a5;
  char v7 = a3;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:), (uint64_t)v6, a2);
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(unsigned char *)(v7 + 144) = a3;
  *(void *)(v7 + 88) = a1;
  *(void *)(v7 + 96) = a2;
  *(void *)(v7 + 56) = a4;
  *(void *)(v7 + 64) = a5;
  *(void *)(v7 + 72) = a6;
  *(void *)(v7 + 80) = a7;
  return MEMORY[0x270FA2498](specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  int64_t v1 = *(void *)(*(void *)(v0 + 88) + 16);
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 88);
    *(void *)(v0 + 112) = 0;
    *(void *)(v0 + 120) = v2;
    uint64_t v4 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v5;
    void *v5 = v0;
    v5[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    char v6 = *(unsigned char *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 96);
    return PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(v0 + 16, v4, v7, v6);
  }
  else
  {
    uint64_t v9 = *(uint64_t (**)(void *))(v0 + 8);
    return v9(v2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    uint64_t v2 = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  int64_t v1 = *(void **)(v0 + 120);
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, *(void **)(v0 + 120));
  }
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112) + 1;
  v1[2] = v3 + 1;
  outlined init with take of LogitCollection((long long *)(v0 + 16), (uint64_t)&v1[5 * v3 + 4]);
  if (v5 == v4)
  {
    swift_bridgeObjectRelease();
    char v6 = *(uint64_t (**)(void *))(v0 + 8);
    return v6(v1);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 112) + 1;
    *(void *)(v0 + 112) = v8;
    *(void *)(v0 + 120) = v1;
    uint64_t v9 = *(void *)(*(void *)(v0 + 88) + 8 * v8 + 32);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v10;
    *uint64_t v10 = v0;
    v10[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v11 = *(unsigned char *)(v0 + 144);
    uint64_t v12 = *(void *)(v0 + 96);
    return PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(v0 + 16, v9, v12, v11);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  int64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void *);
  uint64_t v8;

  int64_t v1 = *(void *)(v0[7] + 16);
  v0[10] = v1;
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (v1)
  {
    uint64_t v3 = v0[7];
    v0[11] = 0;
    v0[12] = v2;
    uint64_t v4 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[13] = v5;
    void *v5 = v0;
    v5[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    return PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)((uint64_t)(v0 + 2), v4);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(void *))v0[1];
    return v7(v2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    uint64_t v2 = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  int64_t v1 = *(void **)(v0 + 96);
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, *(void **)(v0 + 96));
  }
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88) + 1;
  v1[2] = v3 + 1;
  outlined init with take of LogitCollection((long long *)(v0 + 16), (uint64_t)&v1[5 * v3 + 4]);
  if (v5 == v4)
  {
    swift_bridgeObjectRelease();
    char v6 = *(uint64_t (**)(void *))(v0 + 8);
    return v6(v1);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 88) + 1;
    *(void *)(v0 + 88) = v8;
    *(void *)(v0 + 96) = v1;
    uint64_t v9 = *(void *)(*(void *)(v0 + 56) + 8 * v8 + 32);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v10;
    *uint64_t v10 = v0;
    v10[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    return PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(v0 + 16, v9);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  int64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void *);
  uint64_t v15;

  int64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (!v1)
  {
LABEL_13:
    uint64_t v14 = *(uint64_t (**)(void *))(v0 + 8);
    return v14(v2);
  }
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = (unint64_t *)(*(void *)(v0 + 80) + 32);
  swift_bridgeObjectRetain();
  unint64_t result = swift_beginAccess();
  while (1)
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    if (v8 == -1)
    {
LABEL_8:
      uint64_t v11 = *(void *)(v3 + 56);
      *(void *)(v0 + 40) = &type metadata for UnconstrainedLogitCollection;
      *(void *)(v0 + 48) = &protocol witness table for UnconstrainedLogitCollection;
      *(void *)(v0 + 16) = v11;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      break;
    }
    if (v7 >= *(void *)(*(void *)v4 + 16)) {
      goto LABEL_17;
    }
    if (!*(void *)(*(void *)(*(void *)v4 + 8 * v7 + 32) + 16)) {
      goto LABEL_8;
    }
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = specialized BitSet.init<A>(_:)(v9);
    *(void *)(v0 + 40) = &type metadata for SparseLogitCollection;
    *(void *)(v0 + 48) = &protocol witness table for SparseLogitCollection;
    *(void *)(v0 + 16) = v10;
LABEL_9:
    BOOL v13 = v2[2];
    uint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    unint64_t result = outlined init with take of LogitCollection((long long *)(v0 + 16), (uint64_t)&v2[5 * v13 + 4]);
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

{
  void *v0;
  int64_t v1;
  void *v2;
  long long *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void *);
  uint64_t v18;
  uint64_t v19;

  int64_t v1 = *(void *)(v0[10] + 16);
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (v1)
  {
    uint64_t v3 = (long long *)(v0 + 2);
    uint64_t v18 = v0[11];
    uint64_t v4 = v18 + 24;
    uint64_t v5 = (unint64_t *)(v0[10] + 32);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    while (1)
    {
      uint64_t v7 = *v5++;
      char v6 = v7;
      if ((v7 & 0x8000000000000000) != 0) {
        break;
      }
      if (v6 >= *(void *)(*(void *)v4 + 16)) {
        goto LABEL_23;
      }
      uint64_t v8 = *(void *)v4 + 24 * v6;
      uint64_t v9 = *(void *)(v8 + 48);
      if (v9)
      {
        v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        v0[6] = &protocol witness table for <A> [A];
        v0[2] = v9;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v10 = *(void *)(v18 + 32);
        if (v10 < 0) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v11 = *(void *)(v8 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v10)
        {
          uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v12 + 16) = v10;
          bzero((void *)(v12 + 32), 4 * v10);
        }
        else
        {
          uint64_t v12 = MEMORY[0x263F8EE78];
          uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
        }
        BOOL v13 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(v18 + 40))(*(void *)(v18 + 48), v11 + 32, *(void *)(v11 + 16), v12 + 32, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        v0[6] = &protocol witness table for <A> [A];
        if (v13)
        {
          *(void *)uint64_t v3 = v12;
        }
        else
        {
          swift_bridgeObjectRelease();
          *(void *)uint64_t v3 = MEMORY[0x263F8EE78];
        }
        uint64_t v4 = v18 + 24;
      }
      uint64_t v15 = v2[2];
      uint64_t v14 = v2[3];
      if (v15 >= v14 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v2);
      }
      v2[2] = v15 + 1;
      outlined init with take of LogitCollection(v3, (uint64_t)&v2[5 * v15 + 4]);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    return _assertionFailure(_:_:file:line:flags:)();
  }
  else
  {
LABEL_19:
    uint64_t v16 = (uint64_t (*)(void *))v0[1];
    return v16(v2);
  }
}

{
  uint64_t v0;
  int64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void *);
  uint64_t v15;
  uint64_t v16;

  int64_t v1 = *(void *)(*(void *)(v0 + 56) + 16);
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = (uint64_t *)(*(void *)(v0 + 56) + 32);
    uint64_t v15 = v3 + 32;
    unint64_t result = swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = v8;
      if (v8 >= v4)
      {
        uint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      else
      {
        if (v7 < 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = *(void *)(v15 + 8 * v7);
        swift_bridgeObjectRetain();
      }
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = specialized BitSet.init<A>(_:)(v10);
      *(void *)(v0 + 40) = &type metadata for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
      *(void *)(v0 + 48) = &protocol witness table for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
      *(void *)(v0 + 16) = v9;
      *(void *)(v0 + 24) = v11;
      BOOL v13 = v2[2];
      uint64_t v12 = v2[3];
      if (v13 >= v12 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v2);
      }
      v2[2] = v13 + 1;
      unint64_t result = outlined init with take of LogitCollection((long long *)(v0 + 16), (uint64_t)&v2[5 * v13 + 4]);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v14 = *(uint64_t (**)(void *))(v0 + 8);
  return v14(v2);
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 64) = a2;
  *(void *)(v4 + 72) = v3;
  *(unsigned char *)(v4 + 120) = a3;
  *(void *)(v4 + 56) = a1;
  return MEMORY[0x270FA2498](specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 80) = a5;
  *(void *)(v6 + 88) = v5;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 72) = a4;
  *(unsigned char *)(v6 + 152) = a3;
  *(void *)(v6 + 56) = a1;
  return MEMORY[0x270FA2498](UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  int64_t v1 = *(void *)(*(void *)(v0 + 56) + 16);
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = *(int **)(v3 + 16);
    *(void *)(v0 + 104) = v5;
    *(void *)(v0 + 112) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0x675F000000000000;
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 128) = v2;
    uint64_t v6 = *(void *)(v4 + 32);
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v7;
    *uint64_t v7 = v0;
    v7[1] = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(unsigned __int8 *)(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    return v14(v0 + 16, v6, v10, v9, v11, v8);
  }
  else
  {
    BOOL v13 = *(uint64_t (**)(void *))(v0 + 8);
    return v13(v2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    uint64_t v2 = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  int64_t v1 = *(void **)(v0 + 128);
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    int64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, *(void **)(v0 + 128));
  }
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 120) + 1;
  v1[2] = v3 + 1;
  outlined init with take of LogitCollection((long long *)(v0 + 16), (uint64_t)&v1[5 * v3 + 4]);
  if (v5 == v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(uint64_t (**)(void *))(v0 + 8);
    return v6(v1);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 120) + 1;
    *(void *)(v0 + 120) = v8;
    *(void *)(v0 + 128) = v1;
    uint64_t v9 = *(void *)(*(void *)(v0 + 56) + 8 * v8 + 32);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 104)
                                                                                       + **(int **)(v0 + 104));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v10;
    *uint64_t v10 = v0;
    v10[1] = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(unsigned __int8 *)(v0 + 152);
    BOOL v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 72);
    return v15(v0 + 16, v9, v13, v12, v14, v11);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    uint64_t v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    uint64_t v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[3 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[3 * v8] && (unint64_t)v10 < a1 + 32 + 24 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    uint64_t v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[4 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[4 * v8] && (unint64_t)v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 32 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    uint64_t v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v22 = v4 + v2;
  }
  else {
    uint64_t v22 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for Token() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  BOOL v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v3 + v12 + v11 * v8;
  int64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  uint64_t v16 = v13 + v15;
  uint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    void *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  long long v20 = __OFADD__(v19, v2);
  long long v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x261205940](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(int64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  int64_t v6 = a1;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v42, &v3[v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v16 = v3[2];
    BOOL v17 = __OFADD__(v16, result);
    uint64_t v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v3[2] = v18;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_16:
  int64_t v6 = v3[2];
  uint64_t result = v42[0];
  uint64_t v13 = v42[1];
  uint64_t v14 = v43;
  uint64_t v15 = v44;
  if (v45)
  {
    unint64_t v19 = (v45 - 1) & v45;
    unint64_t v20 = __clz(__rbit64(v45)) | (v44 << 6);
    int64_t v21 = (unint64_t)(v43 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  int64_t v35 = v15 + 1;
  if (__OFADD__(v15, 1)) {
    goto LABEL_65;
  }
  int64_t v21 = (unint64_t)(v14 + 64) >> 6;
  if (v35 >= v21) {
    goto LABEL_13;
  }
  unint64_t v36 = *(void *)(v13 + 8 * v35);
  uint64_t v37 = v15 + 1;
  if (!v36)
  {
    uint64_t v37 = v15 + 2;
    if (v15 + 2 >= v21) {
      goto LABEL_13;
    }
    unint64_t v36 = *(void *)(v13 + 8 * v37);
    if (!v36)
    {
      uint64_t v37 = v15 + 3;
      if (v15 + 3 >= v21) {
        goto LABEL_13;
      }
      unint64_t v36 = *(void *)(v13 + 8 * v37);
      if (!v36)
      {
        uint64_t v37 = v15 + 4;
        if (v15 + 4 >= v21) {
          goto LABEL_13;
        }
        unint64_t v36 = *(void *)(v13 + 8 * v37);
        if (!v36)
        {
          uint64_t v37 = v15 + 5;
          if (v15 + 5 >= v21) {
            goto LABEL_13;
          }
          unint64_t v36 = *(void *)(v13 + 8 * v37);
          if (!v36)
          {
            uint64_t v38 = v15 + 6;
            do
            {
              if (v21 == v38) {
                goto LABEL_13;
              }
              unint64_t v36 = *(void *)(v13 + 8 * v38++);
            }
            while (!v36);
            uint64_t v37 = v38 - 1;
          }
        }
      }
    }
  }
  unint64_t v19 = (v36 - 1) & v36;
  unint64_t v20 = __clz(__rbit64(v36)) + (v37 << 6);
  uint64_t v15 = v37;
LABEL_18:
  uint64_t v22 = *(void *)(*(void *)(result + 48) + 8 * v20);
  while (1)
  {
    unint64_t v23 = v3[3];
    int64_t v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1) {
      break;
    }
    if (v6 < v24) {
      goto LABEL_25;
    }
LABEL_19:
    uint64_t v3[2] = v6;
  }
  uint64_t v40 = v13;
  uint64_t v41 = result;
  uint64_t v39 = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v3;
  unint64_t v33 = v19;
  uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v6 + 1, 1, v32);
  unint64_t v19 = v33;
  uint64_t v15 = v31;
  uint64_t v14 = v39;
  uint64_t v13 = v40;
  uint64_t v3 = v34;
  uint64_t result = v41;
  int64_t v24 = v3[3] >> 1;
  if (v6 >= v24) {
    goto LABEL_19;
  }
  while (1)
  {
LABEL_25:
    v3[v6++ + 4] = v22;
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v27 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v27 >= v21) {
      goto LABEL_44;
    }
    unint64_t v28 = *(void *)(v13 + 8 * v27);
    uint64_t v29 = v15 + 1;
    if (!v28)
    {
      uint64_t v29 = v15 + 2;
      if (v15 + 2 >= v21) {
        goto LABEL_44;
      }
      unint64_t v28 = *(void *)(v13 + 8 * v29);
      if (!v28)
      {
        uint64_t v29 = v15 + 3;
        if (v15 + 3 >= v21) {
          goto LABEL_44;
        }
        unint64_t v28 = *(void *)(v13 + 8 * v29);
        if (!v28)
        {
          uint64_t v29 = v15 + 4;
          if (v15 + 4 >= v21) {
            goto LABEL_44;
          }
          unint64_t v28 = *(void *)(v13 + 8 * v29);
          if (!v28)
          {
            uint64_t v29 = v15 + 5;
            if (v15 + 5 >= v21) {
              goto LABEL_44;
            }
            unint64_t v28 = *(void *)(v13 + 8 * v29);
            if (!v28)
            {
              uint64_t v30 = v15 + 6;
              while (v21 != v30)
              {
                unint64_t v28 = *(void *)(v13 + 8 * v30++);
                if (v28)
                {
                  uint64_t v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              uint64_t v3[2] = v6;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v19 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    uint64_t v15 = v29;
LABEL_24:
    uint64_t v22 = *(void *)(*(void *)(result + 48) + 8 * v26);
    if (v6 >= v24) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance GrammarGuidedLanguageModel(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v10 = swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  *(void *)(v10 + 88) = v4;
  *(void *)(v10 + 72) = a4;
  *(void *)(v10 + 80) = &protocol witness table for GrammarGuidedLanguageModel;
  *(unsigned char *)(v10 + 152) = a3;
  *(void *)(v10 + 56) = a1;
  *(void *)(v10 + 64) = a2;
  return MEMORY[0x270FA2498](UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)
                                       + async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return v5(a1);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance PrefixGuidedLanguageModel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = v3[1];
  uint64_t v11 = v3[2];
  uint64_t v10 = v3[3];
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)
                                                                                           + async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v12;
  *uint64_t v12 = v4;
  v12[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v14(a1, a2, a3, v8, v9, v11, v10);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance PromptLookupLanguageModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)
                                                         + async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v9(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance PromptLookupLanguageModel(uint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1], a2[2], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:));
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance SpeculativeLanguageModel(uint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1], a2[2], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:));
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance TGICAPILanguageModel(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)
                                       + async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v5(a1);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance TGICAPILanguageModel(unint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1]);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v8 = v2[2];
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)
                                                                            + async function pointer to specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v11(a1, a2, v6, v7, v8);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1]);
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.startNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 24) + **(int **)(a5 + 24));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.allNextTokensPossiblyDeterministic(nodes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))() & 1;
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.logitsAreDense.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 16)
                                                                                     + **(int **)(a6 + 16));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  void *v13 = v6;
  v13[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [TokenTreeNode] and conformance [A]();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenTreeNode]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for TokenTreeNode();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return MEMORY[0x270FA2498](specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return MEMORY[0x270FA2498](specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type [TokenTreeNode] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenTreeNode]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t **)(v2 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)(v2 + 24) + 16))(*v4, *a1, *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 16));
  uint64_t *v4 = result;
  *a2 = result;
  return result;
}

uint64_t outlined destroy of UnbatchedDeterministicLanguageModelProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a5;
  return MEMORY[0x270FA2498](specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t destroy for E5NodeState()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for E5NodeState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for E5NodeState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for E5NodeState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for E5NodeState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for E5NodeState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for E5NodeState()
{
  return &type metadata for E5NodeState;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance E5NodeState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48)) {
    return *(unsigned __int8 *)(a2 + 48);
  }
  return (*(void *)(a1 + 40) == *(void *)(a2 + 40)) & ~*(unsigned __int8 *)(a2 + 48);
}

char *E5RunnerLogitsProtocol.copyLogits(tokenIndex:)(uint64_t a1)
{
  unint64_t v2 = (unint64_t)v1;
  long long v4 = (char *)objc_msgSend(v1, sel_logitData);
  id v5 = objc_msgSend(v1, sel_stridePerLogit);
  uint64_t v6 = (uint64_t)objc_msgSend((id)v2, sel_stridePerToken);
  id v7 = objc_msgSend((id)v2, sel_numLogitsPerToken);
  uint64_t v8 = v6 * a1;
  if ((unsigned __int128)(v6 * (__int128)a1) >> 64 != (v6 * a1) >> 63)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v2 = (unint64_t)v7;
  a1 = (uint64_t)&v4[2 * v8];
  if (v5 == (id)1)
  {
    v19[0] = &v4[2 * v8];
    v19[1] = v7;
    uint64_t v18 = (char *)specialized Array.init(repeating:count:)((unint64_t)v7, 0);
    closure #1 in UnsafeMutableBufferPointer<A>.makeFloat32Copy()((uint64_t)v19, &v18);
    return v18;
  }
  uint64_t v9 = specialized Array.init(repeating:count:)((unint64_t)v7, 0);
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
  long long v4 = (char *)v9;
  if (!v2) {
    return v4;
  }
  if (v2 - 1 < *(void *)(v9 + 16))
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  long long v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_8:
  uint64_t v10 = 0;
  do
  {
    _H0 = *(_WORD *)a1;
    __asm { FCVT            S0, H0 }
    *(_DWORD *)&v4[4 * (void)v10 + 32] = _S0;
    a1 += 2 * (void)v5;
    uint64_t v10 = (char *)v10 + 1;
  }
  while ((void *)v2 != v10);
  return v4;
}

uint64_t closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a5;
  id v60 = a4;
  uint64_t v54 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v58 = v9;
  MEMORY[0x270FA5388](v9, v10);
  uint64_t v55 = v11;
  uint64_t v56 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v61 = a3;
  if (v15)
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = a6;
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v16 = 136642819;
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = MEMORY[0x261205560](v19, MEMORY[0x263F8D6C8]);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, aBlock);
    a3 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25FA51000, v13, v14, "Running token(s): %{sensitive}s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v18;
    a6 = v17;
    MEMORY[0x261206F80](v23, -1, -1);
    MEMORY[0x261206F80](v16, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (v24)
  {
    aBlock[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v26 = (uint64_t *)(a2 + 32);
    do
    {
      uint64_t v27 = *v26++;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v27);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v24;
    }
    while (v24);
    uint64_t v25 = aBlock[0];
    a3 = v61;
  }
  if (a3)
  {
    int64_t v28 = *(void *)(a3 + 16);
    uint64_t v29 = MEMORY[0x263F8EE78];
    if (v28)
    {
      uint64_t v52 = v25;
      uint64_t v53 = a6;
      aBlock[0] = MEMORY[0x263F8EE78];
      int64_t v62 = v28;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0);
      int64_t v30 = v62;
      uint64_t v31 = 0;
      uint64_t v32 = aBlock[0];
      uint64_t v63 = a3 + 32;
      do
      {
        uint64_t v33 = *(void *)(v63 + 8 * v31);
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          v65[0] = v29;
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v35 = 0;
          do
          {
            uint64_t v36 = v35 + 1;
            objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v33 + 8 * v35 + 32));
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            uint64_t v35 = v36;
          }
          while (v34 != v36);
          uint64_t v37 = v65[0];
          swift_bridgeObjectRelease();
          uint64_t v29 = MEMORY[0x263F8EE78];
          int64_t v30 = v62;
        }
        else
        {
          uint64_t v37 = v29;
        }
        aBlock[0] = v32;
        unint64_t v39 = *(void *)(v32 + 16);
        unint64_t v38 = *(void *)(v32 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          int64_t v30 = v62;
          uint64_t v32 = aBlock[0];
        }
        ++v31;
        *(void *)(v32 + 16) = v39 + 1;
        *(void *)(v32 + 8 * v39 + 32) = v37;
      }
      while (v31 != v30);
      swift_bridgeObjectRelease();
      a6 = v53;
    }
    else
    {
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  type metadata accessor for NSNumber();
  v40.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v32)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
    v41.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v41.super.isa = 0;
  }
  uint64_t v43 = v56;
  uint64_t v42 = v57;
  uint64_t v44 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v54, v58);
  outlined init with copy of LogitPresampler?(a6, (uint64_t)v65);
  unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  unint64_t v46 = (v55 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v47 + v45, v43, v44);
  *(void *)(v47 + v46) = v59;
  outlined init with take of LogitPresampler?((uint64_t)v65, v47 + ((v46 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = partial apply for closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:);
  *(void *)(v48 + 24) = v47;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ();
  void aBlock[5] = v48;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor;
  uint64_t v49 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v60, sel_runTokens_tokenTreeIndexes_outputBlock_, v40.super.isa, v41.super.isa, v49);

  _Block_release(v49);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(void *a1, void *a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ContinuousClock();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  os_log_type_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    BOOL v15 = objc_msgSend((id)swift_unknownObjectRetain(), sel_numTokens);
    if ((uint64_t)v15 < (uint64_t)a4) {
      a4 = v15;
    }
    uint64_t v16 = (char *)objc_msgSend(a1, sel_numTokens);
    uint64_t v17 = (char *)(v16 - a4);
    if (__OFSUB__(v16, a4))
    {
      __break(1u);
    }
    else
    {
      v34[0] = a3;
      uint64_t v36 = MEMORY[0x263F8EE78];
      uint64_t v18 = ContinuousClock.init()();
      MEMORY[0x270FA5388](v18, v19);
      v34[-6] = &v36;
      v34[-5] = a5;
      v34[-4] = a1;
      v34[-3] = v17;
      v34[-2] = a4;
      lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
      Clock.measure(_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      if (one-time initialization token for device == -1)
      {
LABEL_6:
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Log.device);
        swift_unknownObjectRetain();
        unint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 134218496;
          double v24 = (double)Duration.components.getter();
          Duration.components.getter();
          double v35 = ((double)v25 * 1.0e-18 + v24) * 1000000.0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v23 + 12) = 2048;
          double v35 = COERCE_DOUBLE(objc_msgSend(a1, sel_numTokens));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          *(_WORD *)(v23 + 22) = 2048;
          swift_beginAccess();
          double v35 = *(double *)(v36 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_25FA51000, v21, v22, "Took %f µsec to presample %ld token(s), making %ld logit collection(s)", (uint8_t *)v23, 0x20u);
          MEMORY[0x261206F80](v23, -1, -1);
        }
        else
        {

          swift_unknownObjectRelease();
        }
        swift_beginAccess();
        v34[4] = v36;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
        CheckedContinuation.resume(returning:)();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    swift_once();
    goto LABEL_6;
  }
  if (a2)
  {
    id v26 = a2;
  }
  else
  {
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
    id v31 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v32 = (void *)MEMORY[0x2612053D0](v28, v30);
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 0, 0);
  }
  double v35 = *(double *)&v26;
  id v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  return CheckedContinuation.resume(throwing:)();
}

id closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of LogitPresampler?(a2, (uint64_t)&v15);
  if (v16)
  {
    outlined init with take of LogitCollection(&v15, (uint64_t)v17);
    uint64_t v9 = v17[4];
    __swift_project_boxed_opaque_existential_1(v17, v17[3]);
    id v10 = objc_msgSend(a3, sel_logitData);
    id v11 = objc_msgSend(a3, sel_numLogitsPerToken);
    id v12 = objc_msgSend(a3, sel_stridePerToken);
    id result = objc_msgSend(a3, sel_stridePerLogit);
    if (__OFADD__(a5, a4))
    {
      __break(1u);
    }
    else if (a5 + a4 >= a4)
    {
      uint64_t v14 = (*(uint64_t (**)(id, id, id, id, uint64_t))(v9 + 8))(v10, v11, v12, result, a4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
LABEL_7:
      *a1 = v14;
      return (id)swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    id result = (id)outlined destroy of LogitPresampler?((uint64_t)&v15);
    if ((a5 & 0x8000000000000000) == 0)
    {
      swift_unknownObjectRetain();
      uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg5021_sSo12E5RunnerObjCC24def67E3run6tokens16maxLogitsDesired16tokenTreeIndexes10presamplerSayAC15gh10_pGSaySiG_xu39AKGSgAC0P10Presampler_pSgtYaKFyScCyAJs5c55_pGXEfU_ySo0abJ8Protocol_pSg_sAP_pSgtXEfU1_yyXEfU_AcI_pX5XEfU_So0lmQ8Protocol_pSiTf1cn_nTf4ngn_n(0, a5, (uint64_t)a3, a4);
      swift_unknownObjectRelease();
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);

  return swift_unknownObjectRelease();
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined init with copy of LogitPresampler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25FA9F5D0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v5);
  }

  return MEMORY[0x270FA0238](v0, v5 + 40, v3 | 7);
}

uint64_t outlined init with take of LogitPresampler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(unsigned char **)(v2 + v7);

  return closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(a1, a2, v2 + v6, v8, v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_25FA9F7A4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id partial apply for closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)()
{
  return closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

unint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock;
  if (!lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock)
  {
    type metadata accessor for ContinuousClock();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg5021_sSo12E5RunnerObjCC24def67E3run6tokens16maxLogitsDesired16tokenTreeIndexes10presamplerSayAC15gh10_pGSaySiG_xu39AKGSgAC0P10Presampler_pSgtYaKFyScCyAJs5c55_pGXEfU_ySo0abJ8Protocol_pSg_sAP_pSgtXEfU1_yyXEfU_AcI_pX5XEfU_So0lmQ8Protocol_pSiTf1cn_nTf4ngn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v8 = result;
  uint64_t v15 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v8 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v15;
    while (a2 != v8)
    {
      unint64_t result = v8 + a4;
      if (__OFADD__(v8, a4)) {
        goto LABEL_13;
      }
      uint64_t v9 = E5RunnerLogitsProtocol.copyLogits(tokenIndex:)(result);
      uint64_t v15 = v5;
      unint64_t v11 = *(void *)(v5 + 16);
      unint64_t v10 = *(void *)(v5 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v5 = v15;
      }
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      uint64_t v14 = &protocol witness table for <A> [A];
      *(void *)&long long v12 = v9;
      *(void *)(v5 + 16) = v11 + 1;
      unint64_t result = outlined init with take of LogitCollection(&v12, v5 + 40 * v11 + 32);
      if (a2 == ++v8) {
        return v5;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_Si_Sits5NeverOTg5041_sS4iIgyydd_Si6offset_Si7elementtSi_Sits5f200OIegnrzr_TR247_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSayl41G_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_l4_SitL20_SitXEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v10 + 16);
    uint64_t v5 = 16 * v4;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32 + 8 * v3);
      unint64_t v7 = *(void *)(v10 + 24);
      if (v4 + v3 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4 + v3 + 1, 1);
      }
      *(void *)(v10 + 16) = v4 + v3 + 1;
      uint64_t v8 = v10 + v5;
      *(void *)(v8 + 32) = v6;
      *(void *)(v8 + 40) = v3;
      v5 += 16;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v48 = *(void *)(a2 + 16);
  if (!v48) {
    return a1;
  }
  uint64_t v5 = a2;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  unsigned int v47 = a3 & 1;
  uint64_t v46 = v5;
  while (1)
  {
    uint64_t v53 = *(void *)(v5 + 8 * v6 + 32);
    unint64_t v7 = (void *)*v49;
    uint64_t v8 = *v49 + 16;
    swift_beginAccess();
    if ((a1 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v9 = v7[2];
    unint64_t v10 = *(void *)(v9 + 16);
    if (a1 >= v10) {
      goto LABEL_30;
    }
    unint64_t v11 = (void *)(v9 + 24 * a1);
    uint64_t v12 = v11[4];
    uint64_t v52 = v11[5];
    uint64_t v13 = v11[6];
    if (*(void *)(v13 + 16))
    {
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
      if (v15)
      {
        a1 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
        goto LABEL_5;
      }
    }
    unint64_t v50 = v10;
    unint64_t v51 = a1;
    swift_beginAccess();
    uint64_t v17 = v7[6];
    uint64_t v16 = v7[7];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v7 + 3), v17);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain();
    uint64_t v19 = v18(v12, v53, v47, v17, v16);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v20 = v7[12];
    uint64_t v21 = v7[13];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v7 + 9), v20);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v21 + 16))(v52, v53, v47, v20, v21);
    swift_endAccess();
    swift_bridgeObjectRelease();
    unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    double v24 = (void *)v7[2];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7[2] = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      *(void *)uint64_t v8 = v24;
    }
    unint64_t v27 = v24[2];
    unint64_t v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
      *(void *)uint64_t v8 = v24;
    }
    v24[2] = v27 + 1;
    uint64_t v28 = &v24[3 * v27];
    void v28[4] = v19;
    v28[5] = v22;
    v28[6] = v23;
    if (v51 >= *(void *)(*(void *)v8 + 16)) {
      goto LABEL_31;
    }
    uint64_t v29 = (void *)(*(void *)v8 + 24 * v51 + 48);
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    id v31 = (void *)*v29;
    uint64_t v54 = (void *)*v29;
    void *v29 = 0x8000000000000000;
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
    uint64_t v34 = v31[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_32;
    }
    char v37 = v32;
    if (v31[3] >= v36)
    {
      if (v30)
      {
        NSArray v40 = v54;
        if ((v32 & 1) == 0) {
          goto LABEL_23;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        NSArray v40 = v54;
        if ((v37 & 1) == 0) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, v30);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_34;
      }
      unint64_t v33 = v38;
      NSArray v40 = v54;
      if ((v37 & 1) == 0)
      {
LABEL_23:
        v40[(v33 >> 6) + 8] |= 1 << v33;
        uint64_t v41 = 8 * v33;
        *(void *)(v40[6] + v41) = v53;
        a1 = v50;
        *(void *)(v40[7] + v41) = v50;
        uint64_t v42 = v40[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_33;
        }
        v40[2] = v44;
        goto LABEL_4;
      }
    }
    *(void *)(v40[7] + 8 * v33) = v50;
    a1 = v50;
LABEL_4:
    void *v29 = v40;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v5 = v46;
LABEL_5:
    if (v48 == ++v6)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  void *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  void *v42;
  void *v43;

  uint64_t v41 = *(void *)(a2 + 16);
  if (!v41) {
    return a1;
  }
  uint64_t v5 = a2;
  char v39 = a3 & 1;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  NSArray v40 = a3;
  unint64_t v38 = v5;
  while (1)
  {
    unint64_t v7 = *(void *)(v5 + 8 * v6 + 32);
    uint64_t v8 = *v42;
    uint64_t v9 = (void **)(*v42 + 32);
    swift_beginAccess();
    if ((a1 & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v10 = *(void *)(v8 + 32);
    unint64_t v11 = *(void *)(v10 + 16);
    if (a1 >= v11) {
      goto LABEL_30;
    }
    uint64_t v12 = *(void *)(v10 + 40 * a1 + 64);
    if (*(void *)(v12 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v14 & 1) != 0))
    {
      a1 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      char v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      swift_beginAccess();
      uint64_t v16 = *v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char *v9 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        char *v9 = v16;
      }
      uint64_t v19 = v16[2];
      uint64_t v18 = v16[3];
      if (v19 >= v18 >> 1)
      {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
        char *v9 = v16;
      }
      void v16[2] = v19 + 1;
      uint64_t v20 = &v16[5 * v19];
      v20[4] = a1;
      *((unsigned char *)v20 + 40) = 0;
      v20[6] = v7;
      *((unsigned char *)v20 + 56) = 0;
      *((unsigned char *)v20 + 57) = v39;
      v20[8] = v15;
      uint64_t v21 = *v9;
      if (v40) {
        *(void *)(v8 + 24) = v11;
      }
      char *v9 = v21;
      if (a1 >= v21[2]) {
        goto LABEL_31;
      }
      uint64_t v22 = &v21[5 * a1 + 8];
      unint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
      double v24 = (void *)*v22;
      BOOL v43 = (void *)*v22;
      _OWORD *v22 = 0x8000000000000000;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      unint64_t v27 = v24[2];
      uint64_t v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_32;
      }
      char v30 = v25;
      if (v24[3] >= v29)
      {
        if ((v23 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v23);
        id v31 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
        if ((v30 & 1) != (v32 & 1)) {
          goto LABEL_34;
        }
        unint64_t v26 = v31;
      }
      uint64_t v5 = v38;
      if (v30)
      {
        *(void *)(v43[7] + 8 * v26) = v11;
      }
      else
      {
        v43[(v26 >> 6) + 8] |= 1 << v26;
        unint64_t v33 = 8 * v26;
        *(void *)(v43[6] + v33) = v7;
        *(void *)(v43[7] + v33) = v11;
        uint64_t v34 = v43[2];
        BOOL v35 = __OFADD__(v34, 1);
        uint64_t v36 = v34 + 1;
        if (v35) {
          goto LABEL_33;
        }
        long long v43[2] = v36;
      }
      _OWORD *v22 = v43;
      swift_bridgeObjectRelease();
      swift_endAccess();
      a1 = v11;
    }
    if (v41 == ++v6)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v36 = *(void *)(a2 + 16);
  if (!v36) {
    return a1;
  }
  uint64_t v4 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)(v4 + 8 * v5 + 32);
    uint64_t v8 = (void *)*v37;
    uint64_t v9 = *v37 + 16;
    swift_beginAccess();
    uint64_t v10 = v8[5];
    uint64_t v11 = v8[6];
    __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v11 + 16))(a1, v7, a3 & 1, v10, v11);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v13 = v8[13];
    if (!*(void *)(v13 + 16)) {
      break;
    }
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v15 & 1) == 0) {
      break;
    }
    a1 = v12;
    uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v17 = v8[10];
    uint64_t v18 = v8[11];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v8 + 7), v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v18 + 16))(v16, v7, a3 & 1, v17, v18);
    swift_endAccess();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = (void *)v8[13];
    v8[13] = 0x8000000000000000;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    uint64_t v24 = v21[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_21:
      __break(1u);
      break;
    }
    char v27 = v22;
    if (v21[3] >= v26)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v30 = v21;
        if (v22) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        char v30 = v21;
        if (v27) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_23;
      }
      unint64_t v23 = v28;
      char v30 = v21;
      if (v27)
      {
LABEL_3:
        *(void *)(v30[7] + 8 * v23) = v19;
        goto LABEL_4;
      }
    }
    v30[(v23 >> 6) + 8] |= 1 << v23;
    uint64_t v31 = 8 * v23;
    *(void *)(v30[6] + v31) = a1;
    *(void *)(v30[7] + v31) = v19;
    uint64_t v32 = v30[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_21;
    }
    v30[2] = v34;
LABEL_4:
    ++v5;
    v8[13] = v30;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v4 = v6;
    if (v36 == v5)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_23:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.currentQueryNodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t E5TransformerLanguageModel.currentQueryNodes.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*E5TransformerLanguageModel.currentQueryNodes.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(void *a1, char a2)
{
  id v4 = objc_msgSend(a1, sel_maxContextLength);
  type metadata accessor for KVLRUCache();
  uint64_t v5 = (void *)swift_allocObject();
  void v5[3] = 0;
  v5[4] = 0;
  v5[6] = v4;
  uint64_t v5[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  void v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  uint64_t v6 = swift_allocObject();
  E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)a1, (uint64_t)v5, a2);
  return v6;
}

uint64_t E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 17) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<E5NodeState>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 56) = 1;
  *(void *)(v7 + 64) = v9;
  *(void *)(v7 + 72) = 0;
  *(unsigned char *)(v7 + 80) = 1;
  *(void *)(v7 + 88) = 0;
  *(unsigned char *)(v7 + 96) = 1;
  *(void *)(v3 + 32) = v7;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = static Duration.zero.getter();
  *(void *)(v3 + 56) = v10;
  ContinuousClock.init()();
  *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes) = &outlined read-only object #0 of E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:);
  *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes) = v8;
  *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes) = v8;
  uint64_t v11 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_kvCache) = a2;
  *(unsigned char *)(v3 + 16) = a3;
  return v3;
}

Swift::Int __swiftcall E5TransformerLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)prompt.queryTokens._rawValue;
  uint64_t v5 = *((void *)prompt.queryTokens._rawValue + 1);
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v8 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v8);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v17 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v18 = specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(0, v25);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)(v5 + 16);
    if (v9) {
      BOOL v10 = forPreviousNode == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      swift_retain();
      _StringGuts.grow(_:)(72);
      v19._object = (void *)0x800000025FB6BA00;
      v19._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v19);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 0xD000000000000022;
      v21._object = (void *)0x800000025FB6BA20;
      String.append(_:)(v21);
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 0xD000000000000012;
      v23._object = (void *)0x800000025FB6BA50;
      String.append(_:)(v23);
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v9)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v11 = 0;
      uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v13 = *(void *)(v5 + 8 * v11 + 32);
        swift_bridgeObjectRetain();
        uint64_t v14 = specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(0, v13);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v16 = v12[2];
        unint64_t v15 = v12[3];
        if (v16 >= v15 >> 1) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v12);
        }
        ++v11;
        unint64_t v12[2] = v16 + 1;
        v12[v16 + 4] = v14;
      }
      while (v9 != v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      uint64_t v12 = (void *)MEMORY[0x263F8EE78];
    }
    *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes) = v12;
    swift_bridgeObjectRelease();
    Swift::Int v18 = specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(0, v4);
    swift_release();
  }
  return v18;
}

uint64_t E5TransformerLanguageModel.startNode.getter()
{
  return 0;
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:), 0, 0);
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)()
{
  uint64_t v40 = v0;
  if (!objc_msgSend(*(id *)(*(void *)(v0 + 112) + 24), sel_supportsNonLinearRunning)) {
    goto LABEL_30;
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = v2 - 1;
    if (v2 != 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (Swift::Int *)(v1 + 40);
      do
      {
        Swift::Int v6 = *v5++;
        unint64_t v3 = E5TransformerLanguageModel.latestCommonParent(nodeA:nodeB:)(v3, v6);
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
      uint64_t v1 = *(void *)(v0 + 96);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  if ((specialized Sequence<>.contains(_:)(v3, v1) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v8 = swift_beginAccess();
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v11 = *(void *)(v7 + 32);
  if (v3 >= *(void *)(v11 + 16))
  {
LABEL_40:
    __break(1u);
    return MEMORY[0x270FA2498](v8, v9, v10);
  }
  uint64_t v12 = v11 + 72 * v3;
  if (*(unsigned char *)(v12 + 56)) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = *(void *)(v12 + 48);
  }
LABEL_14:
  uint64_t v13 = (uint64_t *)(*(void *)(v0 + 112)
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  swift_beginAccess();
  if ((specialized Sequence<>.contains(_:)(v3, *v13) & 1) == 0)
  {
LABEL_30:
    char v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27(0);
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_34;
  }
  uint64_t v16 = *(void *)(v0 + 112) + 32;
  uint64_t v37 = *(void *)(v0 + 96) + 32;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v35 = v0;
  uint64_t v36 = v2;
  while (2)
  {
    unint64_t v18 = *(void *)(v37 + 8 * v17);
    uint64_t v38 = v17 + 1;
    swift_retain();
    uint64_t v8 = swift_beginAccess();
    do
    {
      if ((v18 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (v18 >= *(void *)(*(void *)v16 + 16)) {
        goto LABEL_38;
      }
      if (v18 == v3) {
        break;
      }
      uint64_t v20 = *(void *)v16 + 72 * v18;
      unint64_t v21 = *(void *)(v20 + 48);
      char v22 = *(unsigned char *)(v20 + 56);
      uint64_t v8 = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v15 + 32);
      unint64_t v24 = v8 & ~v23;
      if ((*(void *)(v15 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
      {
        uint64_t v25 = *(void *)(v15 + 48);
        if (*(void *)(v25 + 8 * v24) == v18) {
          goto LABEL_20;
        }
        uint64_t v26 = ~v23;
        while (1)
        {
          unint64_t v24 = (v24 + 1) & v26;
          if (((*(void *)(v15 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            break;
          }
          if (*(void *)(v25 + 8 * v24) == v18) {
            goto LABEL_20;
          }
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v39 = (void *)v15;
      specialized _NativeSet.insertNew(_:at:isUnique:)(v18, v24, isUniquelyReferenced_nonNull_native);
      uint64_t v8 = swift_bridgeObjectRelease();
LABEL_20:
      unint64_t v18 = v21;
    }
    while ((v22 & 1) == 0);
    uint64_t v0 = v35;
    swift_release();
    uint64_t v17 = v38;
    if (v38 != v36) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  *(void *)(v0 + 120) = v15;
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v30 = MEMORY[0x263F8EE78];
  E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(MEMORY[0x263F8EE78], v3);
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v31 = specialized _copyCollectionToContiguousArray<A>(_:)(v15);
  swift_bridgeObjectRelease();
  char v39 = v31;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v39, v29);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v32 = (uint64_t)v39;
  *(void *)(v0 + 128) = v39;
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = swift_task_alloc();
  *(void *)(v0 + 136) = v34;
  *(void *)uint64_t v34 = v0;
  *(void *)(v34 + 8) = E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:);
  *(_OWORD *)(v34 + 88) = *(_OWORD *)(v0 + 104);
  *(void *)(v34 + 72) = v32;
  *(void *)(v34 + 80) = v33;
  *(void *)(v34 + 64) = v30;
  uint64_t v8 = (uint64_t)E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[16];
  unint64_t v3 = v0[12];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de85Inference26E5TransformerLanguageModelC16nextTokensLogits9treeNodes10presamplerSayAA15gh5_pGSgt34SiG_AA0N10Presampler_pSgtYaKFAaG_pW5XEfU_SayAgH_pGAFTf1cn_nTf4ngg_n(v3, v1, v2);
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    uint64_t v5 = E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(uint64_t a1, unint64_t a2)
{
  uint64_t v107 = a1;
  unint64_t v4 = type metadata accessor for IndexSet.Index();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  short float v99 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  MEMORY[0x270FA5388](v8 - 8, v9);
  short float v100 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for IndexSet();
  uint64_t v11 = *(char ***)(v102 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v102, v12);
  uint64_t v101 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v94 - v16;
  unint64_t v18 = (char *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  swift_beginAccess();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (v19)
  {
    uint64_t v20 = *(void *)v18 + 32;
    swift_beginAccess();
    unint64_t v21 = 0;
    uint64_t v22 = *(void *)(v2 + 32);
    unint64_t v23 = *(void *)(v22 + 16);
    uint64_t v24 = v22 + 40;
    do
    {
      unint64_t v26 = *(void *)v20;
      v20 += 8;
      unint64_t v25 = v26;
      if (v26 >= v23)
      {
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      uint64_t v27 = *(void *)(v24 + 72 * v25);
      BOOL v28 = __OFADD__(v21, v27);
      v21 += v27;
      if (v28) {
        goto LABEL_85;
      }
      --v19;
    }
    while (v19);
  }
  else
  {
    unint64_t v21 = 0;
  }
  short float v103 = v18;
  uint64_t v98 = v5;
  uint64_t v105 = v17;
  uint64_t v106 = v2;
  uint64_t v29 = (char *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  swift_beginAccess();
  int8x16_t v108 = v29;
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(*(void *)v29 + 16);
  if (!v31) {
    goto LABEL_100;
  }
  BOOL v32 = *(void *)(v30 + 32) == a2;
  unint64_t v97 = v4;
  uint64_t v20 = 0;
  if (!v32)
  {
    while (v31 - 1 != v20)
    {
      uint64_t v33 = *(void *)(v30 + 40 + 8 * v20++);
      if (v33 == a2) {
        goto LABEL_12;
      }
    }
    goto LABEL_100;
  }
LABEL_12:
  unint64_t v4 = *(void *)(v107 + 16);
  if (v4)
  {
    LOBYTE(v17) = 0;
    uint64_t v96 = 0;
LABEL_24:
    uint64_t v5 = v106;
    unint64_t v18 = v108;
LABEL_25:
    if (one-time initialization token for device != -1) {
      goto LABEL_90;
    }
    while (1)
    {
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v104 = __swift_project_value_buffer(v40, (uint64_t)static Log.device);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        BOOL v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)BOOL v43 = 134217984;
        v110[0] = (void *)v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25FA51000, v41, v42, "Number of prompt modules nodes to reset %ld", v43, 0xCu);
        uint64_t v44 = v43;
        unint64_t v18 = v108;
        uint64_t v5 = v106;
        MEMORY[0x261206F80](v44, -1, -1);
      }

      if ((v17 & 1) == 0)
      {
        unint64_t v45 = (unint64_t *)(v107 + 32);
        swift_beginAccess();
        uint64_t v46 = *(void *)(v5 + 32);
        unint64_t v47 = *(void *)(v46 + 16);
        uint64_t v48 = v46 + 40;
        unint64_t v49 = v4;
        while (1)
        {
          unint64_t v51 = *v45++;
          unint64_t v50 = v51;
          if (v51 >= v47) {
            break;
          }
          uint64_t v52 = *(void *)(v48 + 72 * v50);
          BOOL v28 = __OFSUB__(v21, v52);
          v21 -= v52;
          if (v28) {
            goto LABEL_87;
          }
          if (!--v49) {
            goto LABEL_33;
          }
        }
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
LABEL_33:
      swift_beginAccess();
      specialized RangeReplaceableCollection<>.removeLast(_:)(v4);
      swift_endAccess();
      if (__OFADD__(v20, 1)) {
        break;
      }
      int64_t v53 = *(void *)(*(void *)v18 + 16);
      if (v53 < v20 + 1) {
        goto LABEL_92;
      }
      swift_beginAccess();
      specialized Array.replaceSubrange<A>(_:with:)(v20 + 1, v53);
      swift_endAccess();
      swift_retain();
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 134218240;
        v110[0] = (void *)v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 12) = 2048;
        swift_beginAccess();
        if ((a2 & 0x8000000000000000) != 0) {
          goto LABEL_94;
        }
        uint64_t v57 = *(void *)(v5 + 32);
        uint64_t v58 = v105;
        if (*(void *)(v57 + 16) <= a2) {
          goto LABEL_95;
        }
        uint64_t v59 = v57 + 72 * a2;
        uint64_t v60 = *(void *)(v59 + 72);
        BOOL v32 = *(unsigned char *)(v59 + 80) == 0;
        uint64_t v61 = -999;
        if (v32) {
          uint64_t v61 = v60;
        }
        v110[0] = (void *)v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v54, v55, "Resetting to %ld which contains token %ld", (uint8_t *)v56, 0x16u);
        MEMORY[0x261206F80](v56, -1, -1);

        unint64_t v18 = v108;
      }
      else
      {

        swift_release();
        uint64_t v58 = v105;
      }
      if (__OFADD__(v21, v20)) {
        goto LABEL_93;
      }
      uint64_t v17 = *(char **)(v5 + 24);
      objc_msgSend(v17, sel_resetToStep_, v21 + v20);
      uint64_t v62 = v5 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
      if (*(unsigned char *)(v5
                    + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount
                    + 8) == 1)
      {
        *(void *)uint64_t v62 = v21 + v20;
        *(unsigned char *)(v62 + 8) = 0;
      }
      unsigned int v63 = objc_msgSend(v17, sel_supportsNonLinearRunning);
      if (v20 < 1 || !v63) {
        return;
      }
      int8x16_t v108 = v17;
      swift_retain();
      unint64_t v4 = specialized Set.init<A>(_:)(a2, v5);
      swift_release();
      IndexSet.init()();
      if (v20 != 1)
      {
        unint64_t v65 = v4 + 56;
        a2 = 1;
        unint64_t v21 = -1;
        do
        {
          if (a2 >= *(void *)(*(void *)v18 + 16)) {
            goto LABEL_88;
          }
          if (*(void *)(v4 + 16))
          {
            uint64_t v17 = *(char **)(*(void *)v18 + 8 * a2 + 32);
            uint64_t v66 = static Hasher._hash(seed:_:)();
            uint64_t v67 = -1 << *(unsigned char *)(v4 + 32);
            unint64_t v68 = v66 & ~v67;
            if ((*(void *)(v65 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v68))
            {
              uint64_t v69 = *(void *)(v4 + 48);
              if (*(char **)(v69 + 8 * v68) == v17) {
                goto LABEL_53;
              }
              uint64_t v70 = ~v67;
              while (1)
              {
                unint64_t v68 = (v68 + 1) & v70;
                if (((*(void *)(v65 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v68) & 1) == 0) {
                  break;
                }
                if (*(char **)(v69 + 8 * v68) == v17) {
                  goto LABEL_53;
                }
              }
            }
          }
          IndexSet.insert(_:)(a2);
LABEL_53:
          ++a2;
        }
        while (a2 != v20);
      }
      swift_bridgeObjectRelease();
      char v64 = IndexSet.isEmpty.getter();
      a2 = v102;
      if (v64)
      {
        ((void (*)(char *, uint64_t))v11[1])(v58, v102);
        return;
      }
      uint64_t v71 = v11[2];
      uint64_t v72 = (uint64_t)v100;
      ((void (*)(char *, char *, uint64_t))v71)(v100, v58, v102);
      swift_retain();
      specialized Sequence.forEach(_:)(v72, v5);
      swift_release();
      outlined destroy of DataStreamState?(v72, &demangling cache variable for type metadata for ReversedCollection<IndexSet>);
      uint64_t v20 = (uint64_t)v101;
      ((void (*)(char *, char *, unint64_t))v71)(v101, v58, a2);
      LOBYTE(v17) = _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
      uint64_t v73 = dispatch thunk of Collection.count.getter();
      if (!v73)
      {
LABEL_68:
        char v78 = v11[1];
        ((void (*)(uint64_t, unint64_t))v78)(v20, a2);
        type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v108, sel_purgeSteps_, isa);

        long long v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = swift_slowAlloc();
          int8x16_t v108 = v78;
          int8x16_t v83 = (uint8_t *)v82;
          uint64_t v84 = swift_slowAlloc();
          uint64_t v111 = v84;
          *(_DWORD *)int8x16_t v83 = 136315138;
          int8x16_t v85 = v105;
          swift_beginAccess();
          _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
          uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25FA51000, v80, v81, "Purged %s node(s) from runner", v83, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v84, -1, -1);
          MEMORY[0x261206F80](v83, -1, -1);

          ((void (*)(char *, unint64_t))v108)(v85, a2);
        }
        else
        {

          ((void (*)(char *, unint64_t))v78)(v105, a2);
        }
        return;
      }
      unint64_t v4 = v73;
      uint64_t v95 = v11;
      uint64_t v111 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t v18 = v99;
      dispatch thunk of Collection.startIndex.getter();
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      unint64_t v21 = 0x263F08000uLL;
      uint64_t v11 = &selRef_sharedConstants;
      while (1)
      {
        uint64_t v74 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
        uint64_t v76 = *v75;
        v74(v110, 0);
        BOOL v28 = __OFSUB__(v76, 1);
        uint64_t v77 = v76 - 1;
        if (v28) {
          break;
        }
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v77);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v5 = *(void *)(v111 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        dispatch thunk of Collection.formIndex(after:)();
        if (!--v4)
        {
          (*(void (**)(char *, unint64_t))(v98 + 8))(v18, v97);
          uint64_t v11 = v95;
          goto LABEL_68;
        }
      }
LABEL_89:
      __break(1u);
LABEL_90:
      swift_once();
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  if (*(void *)(v30 + 32 + 8 * v31 - 8) != a2)
  {
    unint64_t v4 = 0;
    uint64_t v96 = 0;
    LOBYTE(v17) = 1;
    goto LABEL_24;
  }
  uint64_t v95 = v11;
  swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  uint64_t v35 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v38 = *(void *)(v30 + 8 * v34 + 32);
    if ((v38 & 0x8000000000000000) == 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v110[0] = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1);
        uint64_t v35 = v110[0];
      }
      unint64_t v37 = v35[2];
      unint64_t v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        uint64_t v35 = v110[0];
      }
      void v35[2] = v37 + 1;
      v35[v37 + 4] = v38;
    }
    ++v34;
  }
  while (v31 != v34);
  swift_bridgeObjectRelease();
  if (v35[2] > 1uLL)
  {
    v110[0] = v35;
    uint64_t v5 = v106;
    swift_retain();
    swift_retain();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v110, v5);
    swift_release();
    uint64_t v11 = v95;
    unint64_t v18 = v108;
    if (!v110[0][2]) {
      goto LABEL_99;
    }
    char v88 = specialized Sequence.allSatisfy(_:)(v110[0], v110[0][4], v5);
    uint64_t v96 = 0;
    swift_release();
    swift_release();
    if ((v88 & 1) == 0)
    {
      unint64_t v4 = 0;
      LOBYTE(v17) = 1;
      goto LABEL_25;
    }
  }
  else
  {
    swift_release();
    uint64_t v5 = v106;
  }
  if (!__OFADD__(v21, v20))
  {
    uint64_t v89 = v5 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
    if (*(unsigned char *)(v5
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount
                  + 8) == 1)
    {
      *(void *)uint64_t v89 = v21 + v20;
      *(unsigned char *)(v89 + 8) = 0;
    }
    if (one-time initialization token for device == -1) {
      goto LABEL_79;
    }
    goto LABEL_97;
  }
LABEL_96:
  __break(1u);
LABEL_97:
  swift_once();
LABEL_79:
  uint64_t v90 = type metadata accessor for Logger();
  __swift_project_value_buffer(v90, (uint64_t)static Log.device);
  uint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v91, v92))
  {
    float v93 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)float v93 = 134217984;
    v110[0] = (void *)a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v91, v92, "Skipping reset because %ld is already last run node", v93, 0xCu);
    MEMORY[0x261206F80](v93, -1, -1);
  }
}

uint64_t E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:), 0, 0);
}

uint64_t E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v2 = v0[5].i64[1];
  uint64_t v1 = v0[6].i64[0];
  uint64_t v3 = v0[5].i64[0];
  v0[3].i64[1] = 0;
  uint64_t v4 = swift_task_alloc();
  v0[6].i64[1] = v4;
  int8x16_t v5 = v0[4];
  *(void *)(v4 + 16) = v1;
  *(int8x16_t *)(v4 + 24) = vextq_s8(v5, v5, 8uLL);
  *(void *)(v4 + 40) = (char *)v0 + 56;
  *(void *)(v4 + 48) = v3;
  *(void *)(v4 + 56) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7].i64[0] = (uint64_t)v6;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  uint64_t v8 = _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  void *v6 = v0;
  v6[1] = E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  return MEMORY[0x270FA2390](&v0[2].u64[1], &async function pointer to partial apply for closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:), v4, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  }
  else
  {
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v2 + 40);
    uint64_t v3 = E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(void);
  uint64_t v6;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[12] + 48;
  swift_beginAccess();
  MEMORY[0x261205DC0](v3, v2, v1);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t result = v0[7];
  if (result)
  {
    int8x16_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  uint64_t v3[2] = a1;
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  uint64_t v1 = *(void *)(v0[4] + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes);
  v0[5] = v1;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  void *v2 = v0;
  v2[1] = E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[2];
  return E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)(v1, v4, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    int8x16_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[33] = a3;
  v4[34] = v3;
  v4[31] = a1;
  v4[32] = a2;
  uint64_t v5 = type metadata accessor for TokenGenerationError.Context();
  v4[35] = v5;
  v4[36] = *(void *)(v5 - 8);
  v4[37] = swift_task_alloc();
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:), 0, 0);
}

{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  unint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t i;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  void *v73;
  uint64_t *v74;
  long long *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  long long *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;

  char v88 = v3;
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t)(v3 + 2);
  uint64_t v6 = v3 + 8;
  os_log_type_t v81 = (uint64_t)(v3 + 14);
  uint64_t v7 = (uint64_t)(v3 + 19);
  uint64_t v74 = v3 + 29;
  uint64_t v75 = (long long *)(v3 + 24);
  uint64_t v8 = v3[48];
  uint64_t v76 = v8 + 64;
  uint64_t v73 = v3 + 30;
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  if (-v9 < 64) {
    uint64_t v10 = ~(-1 << -(char)v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v8 + 64);
  uint64_t v12 = (unint64_t)(63 - v9) >> 6;
  uint64_t v69 = v12 - 1;
  uint64_t v13 = v3[44];
  uint64_t v14 = (void *)v3[45];
  int8x16_t v83 = (uint64_t)(v3 + 3);
  uint64_t v86 = (long long *)(v3 + 9);
  uint64_t v84 = v3[48];
  long long v80 = v12;
  uint64_t v70 = v12 - 5;
  uint64_t v71 = v8 + 104;
  uint64_t v72 = v3 + 8;
  uint64_t v77 = (uint64_t)(v3 + 19);
  int8x16_t v85 = (uint64_t)(v3 + 2);
  while (2)
  {
    uint64_t v16 = v13 + 56;
    while (1)
    {
      if (v11)
      {
        uint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v4 << 6);
LABEL_11:
        *(void *)uint64_t v5 = *(void *)(*(void *)(v84 + 48) + 8 * v18);
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v84 + 56) + 40 * v18, v83);
        goto LABEL_18;
      }
      uint64_t v19 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_80;
      }
      if (v19 >= v80)
      {
        unint64_t v21 = v4;
      }
      else
      {
        uint64_t v20 = *(void *)(v76 + 8 * v19);
        if (v20) {
          goto LABEL_15;
        }
        unint64_t v21 = v4 + 1;
        if ((uint64_t)(v4 + 2) < v80)
        {
          uint64_t v20 = *(void *)(v76 + 8 * (v4 + 2));
          if (v20)
          {
            uint64_t v19 = v4 + 2;
LABEL_15:
            uint64_t v11 = (v20 - 1) & v20;
            unint64_t v18 = __clz(__rbit64(v20)) + (v19 << 6);
            uint64_t v4 = v19;
            goto LABEL_11;
          }
          unint64_t v21 = v4 + 2;
          if ((uint64_t)(v4 + 3) < v80)
          {
            uint64_t v20 = *(void *)(v76 + 8 * (v4 + 3));
            if (v20)
            {
              uint64_t v19 = v4 + 3;
              goto LABEL_15;
            }
            uint64_t v19 = v4 + 4;
            unint64_t v21 = v4 + 3;
            if ((uint64_t)(v4 + 4) < v80)
            {
              uint64_t v20 = *(void *)(v76 + 8 * v19);
              if (v20) {
                goto LABEL_15;
              }
              while (v70 != v4)
              {
                uint64_t v20 = *(void *)(v71 + 8 * v4++);
                if (v20)
                {
                  uint64_t v19 = v4 + 4;
                  goto LABEL_15;
                }
              }
              unint64_t v21 = v69;
            }
          }
        }
      }
      uint64_t v11 = 0;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      uint64_t v4 = v21;
      *(_OWORD *)uint64_t v5 = 0u;
LABEL_18:
      outlined init with take of (key: Int, value: LogitCollection)?(v5, (uint64_t)v6, &demangling cache variable for type metadata for (key: Int, value: LogitCollection)?);
      if (!v3[12])
      {
        a1 = swift_release();
        char v79 = v13;
        if (*(void *)(v13 + 16))
        {
          for (i = v3[46] + 1; i != v3[43]; uint64_t v13 = v79)
          {
            v3[45] = v14;
            v3[46] = i;
            v3[44] = v13;
            uint64_t v60 = v3[42];
            if (i >= *(void *)(v60 + 16)) {
              goto LABEL_82;
            }
            uint64_t v61 = *(void *)(v13 + 16);
            if (v61)
            {
              uint64_t v62 = *(void *)(v60 + 8 * i + 32);
              a1 = static Hasher._hash(seed:_:)();
              unsigned int v63 = -1 << *(unsigned char *)(v79 + 32);
              char v64 = a1 & ~v63;
              if ((*(void *)(v16 + ((v64 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v64))
              {
                unint64_t v65 = *(void *)(v79 + 48);
                if (*(void *)(v65 + 8 * v64) == v62)
                {
LABEL_72:
                  uint64_t v67 = swift_task_alloc();
                  v3[47] = v67;
                  *(void *)uint64_t v67 = v3;
                  *(void *)(v67 + 8) = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
                  unint64_t v68 = v3[31];
                  *(_OWORD *)(v67 + 512) = *(_OWORD *)(v3 + 33);
                  *(void *)(v67 + 496) = v68;
                  *(void *)(v67 + 504) = v61;
                  *(void *)(v67 + 488) = v62;
                  a1 = (uint64_t)E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
                  a2 = 0;
                  a3 = 0;
                  return MEMORY[0x270FA2498](a1, a2, a3);
                }
                uint64_t v66 = ~v63;
                while (1)
                {
                  char v64 = (v64 + 1) & v66;
                  if (((*(void *)(v16 + ((v64 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v64) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v65 + 8 * v64) == v62) {
                    goto LABEL_72;
                  }
                }
              }
            }
            uint64_t i = v3[46] + 1;
          }
        }
        swift_bridgeObjectRelease();
        os_log_type_t v42 = v3[38];
        BOOL v43 = MEMORY[0x263F8EE78];
        if (!v42)
        {
LABEL_60:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          uint64_t v58 = (uint64_t (*)(uint64_t))v3[1];
          return v58(v43);
        }
        uint64_t v44 = v3[32];
        unint64_t v87 = MEMORY[0x263F8EE78];
        a1 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
        unint64_t v45 = 0;
        BOOL v43 = v87;
        uint64_t v46 = v44 + 32;
        unint64_t v47 = v81;
        while (v14[2])
        {
          a1 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v46 + 8 * v45));
          if ((a2 & 1) == 0) {
            goto LABEL_79;
          }
          uint64_t v48 = v14;
          outlined init with copy of DeterministicLanguageModelProtocol(v14[7] + 40 * a1, v47);
          unint64_t v87 = v43;
          unint64_t v50 = *(void *)(v43 + 16);
          unint64_t v49 = *(void *)(v43 + 24);
          if (v50 >= v49 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          }
          ++v45;
          unint64_t v51 = v82[38];
          int64_t v53 = v82[17];
          uint64_t v52 = v82[18];
          uint64_t v54 = __swift_mutable_project_boxed_opaque_existential_1(v47, v53);
          os_log_type_t v55 = *(void *)(v53 - 8);
          uint64_t v56 = swift_task_alloc();
          uint64_t v57 = v54;
          unint64_t v47 = v81;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v57, v53);
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v56, &v87, v53, v52);
          __swift_destroy_boxed_opaque_existential_1(v81);
          a1 = swift_task_dealloc();
          BOOL v43 = v87;
          uint64_t v14 = v48;
          if (v45 == v51)
          {
            uint64_t v3 = v82;
            goto LABEL_60;
          }
        }
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        return MEMORY[0x270FA2498](a1, a2, a3);
      }
      uint64_t v22 = *v6;
      outlined init with take of LogitCollection(v86, v7);
      unint64_t v23 = static Hasher._hash(seed:_:)();
      uint64_t v24 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v25 = v23 & ~v24;
      if (((*(void *)(v16 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
        goto LABEL_8;
      }
      unint64_t v26 = *(void *)(v13 + 48);
      if (*(void *)(v26 + 8 * v25) == v22) {
        break;
      }
      uint64_t v27 = ~v24;
      while (1)
      {
        unint64_t v25 = (v25 + 1) & v27;
        if (((*(void *)(v16 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
          break;
        }
        if (*(void *)(v26 + 8 * v25) == v22) {
          goto LABEL_37;
        }
      }
LABEL_8:
      a1 = __swift_destroy_boxed_opaque_existential_1(v7);
      uint64_t v5 = v85;
    }
LABEL_37:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v74 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeSet.copy()();
    }
    specialized _NativeSet._delete(at:)(v25);
    char v78 = *v74;
    swift_bridgeObjectRelease();
    outlined init with copy of DeterministicLanguageModelProtocol(v77, (uint64_t)v75);
    uint64_t v29 = swift_isUniquelyReferenced_nonNull_native();
    char *v73 = v14;
    uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    uint64_t v31 = v14;
    BOOL v32 = v14[2];
    uint64_t v33 = (a2 & 1) == 0;
    a1 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      goto LABEL_81;
    }
    uint64_t v34 = a2;
    if (v31[3] >= a1)
    {
      if (v29)
      {
        unint64_t v37 = (void *)*v73;
        if ((a2 & 1) == 0) {
          goto LABEL_46;
        }
        goto LABEL_5;
      }
      specialized _NativeDictionary.copy()();
      unint64_t v37 = (void *)*v73;
      if (v34) {
        goto LABEL_5;
      }
LABEL_46:
      v37[(v30 >> 6) + 8] |= 1 << v30;
      *(void *)(v37[6] + 8 * v30) = v22;
      a1 = outlined init with take of LogitCollection(v75, v37[7] + 40 * v30);
      uint64_t v38 = v37[2];
      char v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (!v39)
      {
        uint64_t v14 = v37;
        void v37[2] = v40;
        goto LABEL_6;
      }
      goto LABEL_83;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, v29);
    uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if ((v34 & 1) == (v36 & 1))
    {
      uint64_t v30 = v35;
      unint64_t v37 = (void *)*v73;
      if ((v34 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_5:
      uint64_t v15 = v37[7] + 40 * v30;
      __swift_destroy_boxed_opaque_existential_1(v15);
      outlined init with take of LogitCollection(v75, v15);
      uint64_t v14 = v37;
LABEL_6:
      uint64_t v3 = v82;
      uint64_t v7 = v77;
      uint64_t v13 = v78;
      uint64_t v6 = v72;
      uint64_t v5 = v85;
      swift_bridgeObjectRelease();
      a1 = __swift_destroy_boxed_opaque_existential_1(v77);
      continue;
    }
    break;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0[31] + 16);
  if (v1 && (objc_msgSend(*(id *)(v0[34] + 24), sel_supportsModularAttention) & 1) == 0)
  {
    uint64_t v26 = v0[36];
    uint64_t v25 = v0[37];
    uint64_t v27 = v0[35];
    goto LABEL_21;
  }
  uint64_t v2 = (void *)v0[32];
  unint64_t v3 = v2[2];
  v0[38] = v3;
  if (v3 > 1)
  {
    uint64_t v24 = v0[34];
    v53[0] = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v53, v24);
    unint64_t v7 = swift_release();
    uint64_t v4 = v53[0];
    if (!v53[0][2]) {
      goto LABEL_44;
    }
    if (specialized Sequence.allSatisfy(_:)(v53[0], v53[0][4], v0[34])) {
      goto LABEL_5;
    }
    swift_release();
    if (!v1)
    {
      uint64_t v49 = swift_task_alloc();
      v0[39] = v49;
      *(void *)uint64_t v49 = v0;
      *(void *)(v49 + 8) = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
      long long v50 = *((_OWORD *)v0 + 16);
      *(void *)(v49 + 112) = v0[34];
      *(_OWORD *)(v49 + 96) = v50;
      unint64_t v23 = E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:);
LABEL_16:
      unint64_t v7 = (unint64_t)v23;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      return MEMORY[0x270FA2498](v7, v8, v9);
    }
    uint64_t v26 = v0[36];
    uint64_t v25 = v0[37];
    uint64_t v27 = v0[35];
LABEL_21:
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v28 = type metadata accessor for TokenGenerationError();
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    swift_allocError();
    uint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v29, v25, v27);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x263F7F7E0], v28);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v2;
LABEL_5:
  v0[42] = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized Set.init<A>(_:)(v5);
  unint64_t v7 = swift_bridgeObjectRelease();
  uint64_t v10 = v4[2];
  v0[43] = v10;
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = v6 + 56;
    uint64_t v13 = MEMORY[0x263F8EE80];
    do
    {
      v0[45] = v13;
      v0[46] = v11;
      v0[44] = v6;
      uint64_t v14 = v0[42];
      if (v11 >= *(void *)(v14 + 16)) {
        goto LABEL_43;
      }
      uint64_t v15 = *(void *)(v6 + 16);
      if (v15)
      {
        uint64_t v16 = *(void *)(v14 + 8 * v11 + 32);
        unint64_t v7 = static Hasher._hash(seed:_:)();
        uint64_t v17 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v18 = v7 & ~v17;
        if ((*(void *)(v12 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
        {
          uint64_t v19 = *(void *)(v6 + 48);
          if (*(void *)(v19 + 8 * v18) == v16)
          {
LABEL_15:
            uint64_t v21 = swift_task_alloc();
            v0[47] = v21;
            *(void *)uint64_t v21 = v0;
            *(void *)(v21 + 8) = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
            uint64_t v22 = v0[31];
            *(_OWORD *)(v21 + 512) = *(_OWORD *)(v0 + 33);
            *(void *)(v21 + 496) = v22;
            *(void *)(v21 + 504) = v15;
            *(void *)(v21 + 488) = v16;
            unint64_t v23 = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
            goto LABEL_16;
          }
          uint64_t v20 = ~v17;
          while (1)
          {
            unint64_t v18 = (v18 + 1) & v20;
            if (((*(void *)(v12 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
              break;
            }
            if (*(void *)(v19 + 8 * v18) == v16) {
              goto LABEL_15;
            }
          }
        }
      }
      unint64_t v11 = v0[46] + 1;
    }
    while (v11 != v0[43]);
  }
  swift_bridgeObjectRelease();
  int64_t v33 = v0[38];
  uint64_t v34 = (void *)MEMORY[0x263F8EE78];
  if (v33)
  {
    uint64_t v35 = (uint64_t)(v0 + 14);
    uint64_t v52 = v0;
    v53[0] = (void *)MEMORY[0x263F8EE78];
    uint64_t v36 = v0[32];
    unint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
    uint64_t v37 = 0;
    uint64_t v34 = v53[0];
    uint64_t v51 = v36 + 32;
    uint64_t v38 = MEMORY[0x263F8EE80];
    while (*(void *)(v38 + 16))
    {
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v51 + 8 * v37));
      if ((v8 & 1) == 0) {
        goto LABEL_42;
      }
      uint64_t v39 = v38;
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v38 + 56) + 40 * v7, v35);
      v53[0] = v34;
      unint64_t v41 = v34[2];
      unint64_t v40 = v34[3];
      if (v41 >= v40 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      }
      ++v37;
      uint64_t v42 = v52[38];
      uint64_t v43 = v52[17];
      uint64_t v44 = v52[18];
      uint64_t v45 = __swift_mutable_project_boxed_opaque_existential_1(v35, v43);
      uint64_t v46 = *(void *)(v43 - 8);
      uint64_t v47 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v47, v45, v43);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v47, (uint64_t *)v53, v43, v44);
      __swift_destroy_boxed_opaque_existential_1(v35);
      unint64_t v7 = swift_task_dealloc();
      uint64_t v34 = v53[0];
      uint64_t v38 = v39;
      if (v37 == v42)
      {
        uint64_t v0 = v52;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v48 = (uint64_t (*)(void *))v0[1];
  return v48(v34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 320);
  if (v1)
  {
LABEL_2:
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v2(v1);
  }
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 272);
  v38[0] = *(void *)(v0 + 256);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized MutableCollection<>.sort(by:)(v38, v5);
  swift_release();
  uint64_t v6 = v38[0];
  if (v4)
  {
    return swift_release();
  }
  else
  {
    *(void *)(v0 + 336) = v38[0];
    unint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = specialized Set.init<A>(_:)(v7);
    uint64_t v9 = swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v6 + 16);
    *(void *)(v0 + 344) = v12;
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v8 + 56;
      uint64_t v15 = MEMORY[0x263F8EE80];
      while (1)
      {
        *(void *)(v0 + 360) = v15;
        *(void *)(v0 + 368) = v13;
        *(void *)(v0 + 352) = v8;
        uint64_t v16 = *(void *)(v0 + 336);
        if (v13 >= *(void *)(v16 + 16)) {
          break;
        }
        uint64_t v17 = *(void *)(v8 + 16);
        if (v17)
        {
          unint64_t v18 = *(void *)(v16 + 8 * v13 + 32);
          uint64_t v9 = static Hasher._hash(seed:_:)();
          uint64_t v19 = -1 << *(unsigned char *)(v8 + 32);
          uint64_t v20 = v9 & ~v19;
          if ((*(void *)(v14 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
          {
            uint64_t v21 = *(void *)(v8 + 48);
            if (*(void *)(v21 + 8 * v20) == v18)
            {
LABEL_19:
              unint64_t v23 = swift_task_alloc();
              *(void *)(v0 + 376) = v23;
              *(void *)unint64_t v23 = v0;
              *(void *)(v23 + 8) = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
              uint64_t v24 = *(void *)(v0 + 248);
              *(_OWORD *)(v23 + 512) = *(_OWORD *)(v0 + 264);
              *(void *)(v23 + 496) = v24;
              *(void *)(v23 + 504) = v17;
              *(void *)(v23 + 488) = v18;
              uint64_t v9 = (unint64_t)E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
              uint64_t v10 = 0;
              unint64_t v11 = 0;
              return MEMORY[0x270FA2498](v9, v10, v11);
            }
            uint64_t v22 = ~v19;
            while (1)
            {
              uint64_t v20 = (v20 + 1) & v22;
              if (((*(void *)(v14 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
                break;
              }
              if (*(void *)(v21 + 8 * v20) == v18) {
                goto LABEL_19;
              }
            }
          }
        }
        uint64_t v13 = *(void *)(v0 + 368) + 1;
        if (v13 == *(void *)(v0 + 344)) {
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v0 + 304);
      uint64_t v1 = MEMORY[0x263F8EE78];
      if (!v25)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      uint64_t v26 = *(void *)(v0 + 256);
      v38[0] = MEMORY[0x263F8EE78];
      uint64_t v9 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
      uint64_t v27 = 0;
      uint64_t v1 = v38[0];
      uint64_t v37 = v26 + 32;
      uint64_t v28 = MEMORY[0x263F8EE80];
      while (*(void *)(v28 + 16))
      {
        uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v37 + 8 * v27));
        if ((v10 & 1) == 0) {
          goto LABEL_31;
        }
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v28 + 56) + 40 * v9, v0 + 112);
        v38[0] = v1;
        uint64_t v30 = *(void *)(v1 + 16);
        uint64_t v29 = *(void *)(v1 + 24);
        if (v30 >= v29 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        }
        ++v27;
        uint64_t v31 = *(void *)(v0 + 304);
        BOOL v32 = *(void *)(v0 + 136);
        int64_t v33 = *(void *)(v0 + 144);
        uint64_t v34 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 112, v32);
        uint64_t v35 = *(void *)(v32 - 8);
        uint64_t v36 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v34, v32);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v36, v38, v32, v33);
        __swift_destroy_boxed_opaque_existential_1(v0 + 112);
        uint64_t v9 = swift_task_dealloc();
        uint64_t v1 = v38[0];
        uint64_t v28 = MEMORY[0x263F8EE80];
        if (v27 == v31) {
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 320) = a1;
  *(void *)(v3 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:), 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 384) = a1;
  *(void *)(v3 + 392) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
  }
  else
  {
    uint64_t v4 = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[65] = v4;
  v5[63] = a3;
  v5[64] = a4;
  v5[61] = a1;
  v5[62] = a2;
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:), 0, 0);
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v81 = v0;
  unint64_t v2 = v0 + 152;
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 440) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 472) = v4;
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 520)
       + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes;
    uint64_t v7 = v3 + 32;
    swift_beginAccess();
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(*(void *)v6 + 16);
    while (v9 != v8)
    {
      if (*(void *)(*(void *)v6 + 32 + 8 * v8) != *(void *)(v7 + 8 * v8))
      {
        unint64_t v9 = v8;
        break;
      }
      if (v5 == ++v8)
      {
        unint64_t v9 = v5;
        break;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = (*(void *)(v0 + 520)
                   + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  swift_beginAccess();
  unint64_t v11 = (void *)*((void *)v10->isa + 2);
  if ((unint64_t)v11 < v9) {
    goto LABEL_86;
  }
  uint64_t v77 = v0 + 440;
  if ((void *)v9 == v11)
  {
LABEL_20:
    if (one-time initialization token for device == -1) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
  if (v9 < (unint64_t)v11)
  {
    unint64_t v2 = MEMORY[0x263F8EE78];
    unint64_t v1 = v9;
    do
    {
      if (v1 >= *((void *)v10->isa + 2))
      {
        __break(1u);
        goto LABEL_82;
      }
      uint64_t v12 = *((void *)v10->isa + v1 + 4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (void *)v2);
      }
      unint64_t v14 = *(void *)(v2 + 16);
      unint64_t v13 = *(void *)(v2 + 24);
      if (v14 >= v13 >> 1) {
        unint64_t v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, (void *)v2);
      }
      ++v1;
      *(void *)(v2 + 16) = v14 + 1;
      *(void *)(v2 + 8 * v14 + 32) = v12;
    }
    while (v11 != (void *)v1);
    *(void *)uint64_t v77 = v2;
    goto LABEL_20;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v10[2].isa + 1, 1, v10);
LABEL_27:
  unint64_t isa = (unint64_t)v10[2].isa;
  uint64_t v21 = (unint64_t *)(*(void *)(v0 + 496) + 8 * v9 + 32);
  do
  {
    unint64_t v22 = *v21++;
    unint64_t v5 = v22;
    unint64_t v23 = (unint64_t)v10[3].isa;
    if (isa >= v23 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), isa + 1, 1, v10);
    }
    v10[2].unint64_t isa = (Class)(isa + 1);
    v10[isa++ + 4].unint64_t isa = (Class)v5;
    --v2;
  }
  while (v2);
  *(void *)unint64_t v1 = v10;
  while (1)
  {
    unint64_t v76 = v1;
    unint64_t v9 = v0 + 176;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    unint64_t v1 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v5 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v80 = v26;
      *(_DWORD *)unint64_t v5 = 136315138;
      swift_beginAccess();
      uint64_t v27 = swift_bridgeObjectRetain();
      uint64_t v28 = MEMORY[0x261205560](v27, MEMORY[0x263F8D6C8]);
      unint64_t v30 = v29;
      unint64_t v9 = v0 + 176;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v24, (os_log_type_t)v1, "Number of prompt modules to compute %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v26, -1, -1);
      MEMORY[0x261206F80](v5, -1, -1);
    }

    uint64_t v10 = *(NSObject **)(v0 + 520);
    unint64_t v2 = *(void *)(v0 + 488);
    char v79 = v10 + 4;
    swift_beginAccess();
    if ((v2 & 0x8000000000000000) != 0) {
      goto LABEL_89;
    }
    Class v31 = v10[4].isa;
    unint64_t v32 = *(void *)(v0 + 488);
    if (*((void *)v31 + 2) <= v32) {
      goto LABEL_90;
    }
    int64_t v33 = (Swift::Int *)(v0 + 448);
    uint64_t v34 = *(void *)(v0 + 520);
    uint64_t v35 = (char *)v31 + 72 * v32;
    unint64_t v36 = *((void *)v35 + 6);
    int v37 = v35[56];
    *(void *)(v0 + 456) = MEMORY[0x263F8EE80];
    uint64_t v38 = v34 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
    swift_beginAccess();
    uint64_t v39 = *(void *)(*(void *)v38 + 16);
    if (v39) {
      Swift::Int v40 = *(void *)(*(void *)v38 + 8 * v39 + 24);
    }
    else {
      Swift::Int v40 = 0;
    }
    *int64_t v33 = v40;
    swift_beginAccess();
    if (*(void *)(*(void *)v77 + 16) || (swift_beginAccess(), *(void *)(*(void *)v76 + 16)))
    {
      Swift::Int v40 = 0;
      *int64_t v33 = 0;
    }
    int v41 = v36 == v40 ? v37 : 1;
    if (v41 != 1) {
      break;
    }
    unint64_t v1 = E5TransformerLanguageModel.latestCommonParent(excludingNode:includingNode:)(*(void *)(v0 + 488), v40);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = *(void *)(v0 + 488);
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 134218496;
      *(void *)(v0 + 432) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v5 = 2048;
      *(_WORD *)(v45 + 12) = 2048;
      swift_beginAccess();
      *(void *)(v0 + 416) = *(void *)(v0 + 448);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 22) = 2048;
      *(void *)(v0 + 424) = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v42, v43, "latestCommonParent(%ld, %ld) found to be %ld", (uint8_t *)v45, 0x20u);
      MEMORY[0x261206F80](v45, -1, -1);
    }

    swift_retain();
    unint64_t v2 = *(void *)(v0 + 488);
    unint64_t v9 = MEMORY[0x263F8EE78];
    while ((v2 & 0x8000000000000000) == 0)
    {
      if (v2 >= *((void *)v79->isa + 2)) {
        goto LABEL_83;
      }
      if (v2 != v1)
      {
        uint64_t v46 = (uint64_t)v79->isa + 72 * v2;
        if ((*(unsigned char *)(v46 + 80) & 1) == 0)
        {
          unint64_t v47 = *(void *)(v46 + 48);
          int v48 = *(unsigned __int8 *)(v46 + 56);
          uint64_t v49 = *(void *)(v46 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
          }
          unint64_t v5 = *(void *)(v9 + 16);
          unint64_t v50 = *(void *)(v9 + 24);
          if (v5 >= v50 >> 1) {
            unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v5 + 1, 1, (void *)v9);
          }
          *(void *)(v9 + 16) = v5 + 1;
          uint64_t v51 = (void *)(v9 + 16 * v5);
          v51[4] = v2;
          v51[5] = v49;
          unint64_t v2 = v47;
          if (!v48) {
            continue;
          }
        }
      }
      uint64_t v58 = swift_bridgeObjectRetain();
      E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(v58, v1);
      swift_bridgeObjectRelease();
      uint64_t v59 = *(void *)(v9 + 16);
      if (v59)
      {
        unint64_t v2 = v76;
        if (v59 != 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
          }
          unint64_t v60 = 0;
          uint64_t v61 = v59 + 1;
          do
          {
            if (v60 != v61 - 2)
            {
              unint64_t v63 = *(void *)(v9 + 16);
              if (v60 >= v63) {
                goto LABEL_84;
              }
              if (v61 - 2 >= v63) {
                goto LABEL_85;
              }
              char v64 = (void *)(v9 + 16 * v60);
              long long v65 = *((_OWORD *)v64 + 2);
              *((_OWORD *)v64 + 2) = *(_OWORD *)(v9 + 16 * v61);
              *(_OWORD *)(v9 + 16 * v61) = v65;
            }
            ++v60;
            int64_t v62 = v61 - 3;
            --v61;
          }
          while ((uint64_t)v60 < v62);
        }
      }
      *(void *)(v0 + 528) = v9;
      swift_beginAccess();
      uint64_t v66 = *(void *)(v0 + 472);
      *(void *)(v0 + 536) = v66;
      int64_t v67 = *(void *)(v9 + 16);
      if (v67)
      {
        uint64_t v80 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67, 0);
        uint64_t v68 = v80;
        unint64_t v69 = *(void *)(v80 + 16);
        uint64_t v70 = 32;
        do
        {
          uint64_t v71 = *(void *)(v9 + v70);
          uint64_t v80 = v68;
          unint64_t v72 = *(void *)(v68 + 24);
          if (v69 >= v72 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v69 + 1, 1);
            uint64_t v68 = v80;
          }
          *(void *)(v68 + 16) = v69 + 1;
          *(void *)(v68 + 8 * v69 + 32) = v71;
          v70 += 16;
          ++v69;
          --v67;
        }
        while (v67);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v68 = MEMORY[0x263F8EE78];
      }
      *(void *)(v0 + 544) = v68;
      uint64_t v73 = swift_task_alloc();
      *(void *)(v0 + 552) = v73;
      *(void *)uint64_t v73 = v0;
      *(void *)(v73 + 8) = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
      uint64_t v74 = *(void *)(v0 + 504);
      *(_OWORD *)(v73 + 88) = *(_OWORD *)(v0 + 512);
      *(void *)(v73 + 72) = v68;
      *(void *)(v73 + 80) = v74;
      *(void *)(v73 + 64) = v66;
      goto LABEL_78;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    swift_once();
LABEL_21:
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.device);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v16))
    {
      unint64_t v2 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      uint64_t v80 = v78;
      *(_DWORD *)unint64_t v2 = 136315138;
      swift_beginAccess();
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v18 = MEMORY[0x261205560](v17, MEMORY[0x263F8D6C8]);
      unint64_t v1 = v19;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v1, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v10, v16, "Number of prompt modules to reset %s", (uint8_t *)v2, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v78, -1, -1);
      MEMORY[0x261206F80](v2, -1, -1);
    }

    if (v5 < v9)
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    unint64_t v1 = v0 + 472;
    if (v5 != v9)
    {
      unint64_t v2 = v5 - v9;
      if (v5 <= v9) {
        goto LABEL_92;
      }
      uint64_t v10 = *(NSObject **)v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_93;
      }
      goto LABEL_27;
    }
  }
  uint64_t v52 = *(void *)(v0 + 488);
  uint64_t v53 = swift_bridgeObjectRetain();
  E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(v53, v36);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v54 = *(void *)(v0 + 472);
  *(void *)(v0 + 576) = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v55 = swift_allocObject();
  *(void *)(v0 + 584) = v55;
  *(_OWORD *)(v55 + 16) = xmmword_25FB61DF0;
  *(void *)(v55 + 32) = v52;
  swift_bridgeObjectRetain();
  uint64_t v56 = swift_task_alloc();
  *(void *)(v0 + 592) = v56;
  *(void *)uint64_t v56 = v0;
  *(void *)(v56 + 8) = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
  uint64_t v57 = *(void *)(v0 + 504);
  *(_OWORD *)(v56 + 88) = *(_OWORD *)(v0 + 512);
  *(void *)(v56 + 72) = v55;
  *(void *)(v56 + 80) = v57;
  *(void *)(v56 + 64) = v54;
LABEL_78:
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  long long *v29;
  _OWORD *v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;

  unint64_t v1 = v0[70];
  unint64_t v2 = v0[66];
  uint64_t v3 = *(void *)(v2 + 16);
  Class v31 = v2 + 16;
  if (!v3)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v25 = v0[57];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t (*)(uint64_t))v0[1];
    return v26(v25);
  }
  uint64_t v4 = (uint64_t)(v0 + 9);
  unint64_t v5 = v0 + 57;
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v29 = (long long *)(v0 + 4);
  unint64_t v30 = v0 + 2;
  uint64_t v7 = v1 + 40 * v6 - 8;
  while (1)
  {
    if (v3 > *(void *)(v0[66] + 16))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (!v6) {
      goto LABEL_25;
    }
    if (v6 > *(void *)(v1 + 16)) {
      goto LABEL_23;
    }
    unint64_t v32 = *(_OWORD *)(v31 + 16 * v3);
    *unint64_t v30 = v32;
    outlined init with copy of DeterministicLanguageModelProtocol(v7, (uint64_t)v29);
    unint64_t v9 = (long long *)v4;
    outlined init with take of LogitCollection(v29, v4);
    uint64_t v0 = v5;
    uint64_t v10 = (void *)*v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
    unint64_t v14 = v10[2];
    uint64_t v15 = (v12 & 1) == 0;
    os_log_type_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      goto LABEL_24;
    }
    uint64_t v17 = v12;
    if (v10[3] < v16) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v12) {
        goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v17)
      {
LABEL_3:
        unint64_t v8 = v10[7] + 40 * v13;
        __swift_destroy_boxed_opaque_existential_1(v8);
        uint64_t v4 = (uint64_t)v9;
        outlined init with take of LogitCollection(v9, v8);
        goto LABEL_4;
      }
    }
LABEL_15:
    v10[(v13 >> 6) + 8] |= 1 << v13;
    *(void *)(v10[6] + 8 * v13) = v32;
    uint64_t v20 = v10[7] + 40 * v13;
    uint64_t v4 = (uint64_t)v9;
    uint64_t result = outlined init with take of LogitCollection(v9, v20);
    unint64_t v22 = v10[2];
    unint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
      return result;
    }
    long long v10[2] = v24;
LABEL_4:
    --v3;
    unint64_t v5 = v0;
    void *v0 = v10;
    swift_bridgeObjectRelease();
    v7 -= 40;
    --v6;
    uint64_t v0 = v27;
    unint64_t v1 = v28;
    if (!v3) {
      goto LABEL_25;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if (v17) {
      goto LABEL_3;
    }
    goto LABEL_15;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 560) = a1;
  *(void *)(v3 + 568) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
  }
  else
  {
    uint64_t v4 = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 600) = a1;
  *(void *)(v3 + 608) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
  }
  else
  {
    uint64_t v4 = E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v1 = v0[75];
  if (*(void *)(v1 + 16) == 1)
  {
    uint64_t v2 = v0[61];
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, (uint64_t)(v0 + 14));
    swift_bridgeObjectRelease();
    specialized Dictionary.subscript.setter((uint64_t)(v0 + 14), v2);
    uint64_t v3 = v0[57];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void (*)(uint64_t))v0[1];
    v4(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized Sequence.allSatisfy(_:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return 1;
  }
  uint64_t v7 = a1[4];
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = v9 + 32;
  unint64_t v11 = *(void *)(v9 + 16);
  uint64_t v12 = v3 - 1;
  unint64_t v13 = a1 + 5;
  while (a2 < v11)
  {
    BOOL v15 = v12-- != 0;
    uint64_t result = v7 == a2;
    if (v7 == a2 && v15)
    {
      uint64_t v16 = v10 + 72 * a2;
      a2 = *(void *)(v16 + 16);
      uint64_t v17 = *v13++;
      uint64_t v7 = v17;
      if ((*(unsigned char *)(v16 + 24) & 1) == 0) {
        continue;
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.logitsAreDense.getter()
{
  return 1;
}

Swift::Int __swiftcall E5TransformerLanguageModel.latestCommonParent(excludingNode:includingNode:)(Swift::Int excludingNode, Swift::Int includingNode)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  if (excludingNode < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)(v3 + 32);
  unint64_t v7 = *(void *)(v6 + 16);
  if (v7 <= excludingNode)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 <= includingNode)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = v6 + 32;
  Swift::Int v9 = v8 + 72 * excludingNode;
  uint64_t v10 = *(void *)(v9 + 8);
  Swift::Int v11 = v8 + 72 * includingNode;
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12 >= v10) {
    uint64_t v13 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  if (__OFSUB__(v10, v13)) {
    goto LABEL_28;
  }
  BOOL v14 = __OFSUB__(v12, v13);
  uint64_t v15 = v12 - v13;
  if (v14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (((v10 - v13) | v15) < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  Swift::Int v36 = excludingNode;
  uint64_t v37 = v3;
  uint64_t v38 = v10 - v13;
  Swift::Int v39 = includingNode;
  uint64_t v40 = v3;
  uint64_t v41 = v15;
  swift_retain_n();
  specialized Zip2Sequence.makeIterator()((uint64_t)&v27);
  long long v34 = v27;
  uint64_t v35 = v28;
  long long v32 = v29;
  uint64_t v33 = v30;
  if ((v31 & 1) == 0)
  {
    char v16 = BYTE8(v32);
    unint64_t v17 = v32;
    char v18 = BYTE8(v34);
    unint64_t v19 = v34;
    uint64_t v20 = v35 + 32;
    uint64_t v21 = v33 + 32;
    swift_beginAccess();
    swift_beginAccess();
    while ((v18 & 1) == 0)
    {
      unint64_t v22 = v19;
      if ((v19 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v19 >= *(void *)(*(void *)v20 + 16)) {
        goto LABEL_22;
      }
      if (v16) {
        break;
      }
      Swift::Int v23 = v17;
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_23;
      }
      if (v17 >= *(void *)(*(void *)v21 + 16)) {
        goto LABEL_24;
      }
      uint64_t v24 = *(void *)v20 + 72 * v19;
      unint64_t v19 = *(void *)(v24 + 48);
      char v18 = *(unsigned char *)(v24 + 56);
      uint64_t v25 = *(void *)v21 + 72 * v17;
      unint64_t v17 = *(void *)(v25 + 48);
      char v16 = *(unsigned char *)(v25 + 56);
      if (v22 == v23 && v22 != excludingNode)
      {
        swift_retain_n();
        outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v34);
        outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v32);
        swift_release_n();
        return v23;
      }
    }
  }
LABEL_31:
  swift_retain_n();
  outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v34);
  outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v32);
  Swift::Int result = swift_release_n();
  __break(1u);
  return result;
}

void *E5TransformerLanguageModel.nodeTokens(node:)(unint64_t a1)
{
  unint64_t v3 = v1 + 32;
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (a1 >= *(void *)(*(void *)v3 + 16)) {
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)v3 + 72 * a1;
    if (*(unsigned char *)(v5 + 80)) {
      break;
    }
    a1 = *(void *)(v5 + 48);
    int v6 = *(unsigned __int8 *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 72);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v9 = v4[2];
    unint64_t v8 = v4[3];
    if (v9 >= v8 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v4);
    }
    v4[2] = v9 + 1;
    v4[v9 + 4] = v7;
  }
  while (!v6);
  swift_release();
  unint64_t v1 = v4[2];
  if (v1 > 1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_13:
      unint64_t v11 = 0;
      for (unint64_t i = v1 + 3; ; --i)
      {
        if (v11 != i - 4)
        {
          unint64_t v14 = v4[2];
          if (v11 >= v14) {
            goto LABEL_21;
          }
          if (i - 4 >= v14) {
            goto LABEL_22;
          }
          uint64_t v15 = &v4[v11];
          uint64_t v16 = v15[4];
          v15[4] = v4[i];
          v4[i] = v16;
        }
        ++v11;
        int64_t v13 = i - 5;
        if ((uint64_t)v11 >= v13) {
          return v4;
        }
      }
    }
LABEL_23:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    goto LABEL_13;
  }
  return v4;
}

void *E5TransformerLanguageModel.nodesTokens(promptModuleNodes:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = E5TransformerLanguageModel.nodeTokens(node:)(*(void *)(a1 + 8 * v3 + 32));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v7 = v4[2];
    unint64_t v6 = v4[3];
    if (v7 >= v6 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    }
    ++v3;
    v4[2] = v7 + 1;
    v4[v7 + 4] = v5;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t E5TransformerLanguageModel.contextSize()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)v1 + 16) - 1;
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (!v5) {
    return v2;
  }
  unint64_t v6 = (unint64_t *)(v4 + 32);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 32);
  unint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = v8 + 40;
  while (1)
  {
    unint64_t v12 = *v6++;
    unint64_t v11 = v12;
    if (v12 >= v9) {
      break;
    }
    uint64_t v13 = *(void *)(v10 + 72 * v11);
    BOOL v14 = __OFADD__(v2, v13);
    v2 += v13;
    if (v14) {
      goto LABEL_8;
    }
    if (!--v5) {
      return v2;
    }
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.attentionMasks(promptModulesTokens:queryTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = E5TransformerLanguageModel.contextSize()();
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32;
    unint64_t v6 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v5 + 8 * v4) + 16);
      if (v7)
      {
        uint64_t v39 = v4;
        if (v3 < 0) {
          goto LABEL_60;
        }
        uint64_t v8 = 0;
        uint64_t v9 = 5;
        do
        {
          if (v3)
          {
            uint64_t v10 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
            long long v10[2] = v3;
            bzero(v10 + 4, 8 * v3);
          }
          else
          {
            uint64_t v10 = (void *)MEMORY[0x263F8EE78];
          }
          uint64_t v11 = v8 + 1;
          unint64_t v12 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
          uint64_t v13 = v12;
          unint64_t v12[2] = v8 + 1;
          v12[4] = 1;
          BOOL v14 = v12 + 4;
          if (v8) {
            memset_pattern16(v12 + 5, &unk_25FB623B0, v9 * 8 - 40);
          }
          uint64_t v15 = v10[2];
          uint64_t v16 = v15 + v11;
          if (__OFADD__(v15, v11))
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v16 > v10[3] >> 1)
          {
            if (v15 <= v16) {
              int64_t v26 = v15 + v11;
            }
            else {
              int64_t v26 = v10[2];
            }
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, v26, 1, v10);
            if (!v13[2]) {
              goto LABEL_58;
            }
          }
          else if (!v13[2])
          {
            goto LABEL_58;
          }
          uint64_t v17 = v10[2];
          if ((v10[3] >> 1) - v17 <= v8) {
            goto LABEL_53;
          }
          char v18 = &v10[v17];
          unint64_t v19 = v18 + 4;
          if (v14 < &v18[v9] && v19 < &v13[v9]) {
            goto LABEL_59;
          }
          memcpy(v19, v14, v9 * 8 - 32);
          uint64_t v21 = v10[2];
          BOOL v22 = __OFADD__(v21, v11);
          uint64_t v23 = v21 + v11;
          if (v22) {
            goto LABEL_54;
          }
          long long v10[2] = v23;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
          }
          unint64_t v25 = v6[2];
          unint64_t v24 = v6[3];
          if (v25 >= v24 >> 1) {
            unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v6);
          }
          void v6[2] = v25 + 1;
          v6[v25 + 4] = v10;
          ++v9;
          uint64_t v8 = v11;
        }
        while (v7 != v11);
        uint64_t v4 = v39;
        uint64_t v5 = a1 + 32;
        uint64_t v27 = *(void *)(*(void *)(a1 + 32 + 8 * v39) + 16);
        BOOL v22 = __OFADD__(v3, v27);
        v3 += v27;
        if (v22) {
          goto LABEL_57;
        }
      }
      ++v4;
    }
    while (v4 != v38);
  }
  else
  {
    unint64_t v6 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v28 = *(void *)(a2 + 16);
  if (!v28) {
    return (uint64_t)v6;
  }
  uint64_t v29 = 0;
  for (size_t i = 8 * v3 + 8; ; i += 8)
  {
    uint64_t v31 = v3 + v29;
    if (__OFADD__(v3, v29)) {
      break;
    }
    if ((v3 ^ 0x7FFFFFFFFFFFFFFFLL) == v29) {
      goto LABEL_56;
    }
    uint64_t v32 = v31 + 1;
    if (v31 + 1 < 0) {
      goto LABEL_60;
    }
    if (v31 == -1)
    {
      uint64_t v33 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v33 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v33 + 16) = v32;
      memset_pattern16((void *)(v33 + 32), &unk_25FB623B0, i);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    }
    unint64_t v35 = v6[2];
    unint64_t v34 = v6[3];
    if (v35 >= v34 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v6);
    }
    ++v29;
    void v6[2] = v35 + 1;
    v6[v35 + 4] = v33;
    if (v28 == v29) {
      return (uint64_t)v6;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_60:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.cachePromptModuleNodes(promptModulesTokens:)(uint64_t a1)
{
  v31[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t result = E5TransformerLanguageModel.contextSize()();
  uint64_t v30 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    id v28 = *(id *)(v29 + 24);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v26 = v3;
    while (1)
    {
      uint64_t v6 = *(void *)(v30 + 8 * v5 + 32);
      uint64_t v7 = one-time initialization token for device;
      swift_bridgeObjectRetain();
      if (v7 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.device);
      swift_bridgeObjectRetain_n();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        v31[0] = v27;
        *(_DWORD *)uint64_t v11 = 136642819;
        uint64_t v12 = swift_bridgeObjectRetain();
        uint64_t v13 = MEMORY[0x261205560](v12, MEMORY[0x263F8D6C8]);
        uint64_t v14 = v4;
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        *(void *)(v11 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v16, (uint64_t *)v31);
        swift_bridgeObjectRelease_n();
        uint64_t v4 = v14;
        uint64_t v3 = v26;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25FA51000, v9, v10, "Caching kv cache entry for tokens %{sensitive}s", (uint8_t *)v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v27, -1, -1);
        MEMORY[0x261206F80](v11, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v17 = *(void *)(v6 + 16);
      v31[0] = 0;
      uint64_t v18 = v4;
      unint64_t v19 = (objc_class *)objc_msgSend(v28, sel_createKVCacheEntry_error_, v4, v17, v31);
      if (!v19)
      {
        id v25 = v31[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        return swift_willThrow();
      }
      uint64_t v20 = v19;
      id v21 = v31[0];
      v22.super.unint64_t isa = v20;
      v22._kvCacheEntry.__ptr_.__value_ = (TGIE5KVCacheEntry *)v6;
      KVLRUCache.insert(kvCacheEntry:tokens:)(v22, v23);
      if (v24) {
        break;
      }
      swift_bridgeObjectRelease();

      v4 += v17;
      if (__OFADD__(v18, v17)) {
        __break(1u);
      }
      if (v3 == ++v5) {
        return swift_bridgeObjectRelease();
      }
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *E5TransformerLanguageModel.lookupLRUCache(promptModuleNodes:)(uint64_t a1)
{
  uint64_t v3 = v1;
  v46[3] = *(id *)MEMORY[0x263EF8340];
  uint64_t v45 = E5TransformerLanguageModel.contextSize()();
  uint64_t v42 = *(void *)(a1 + 16);
  uint64_t v43 = a1;
  if (v42)
  {
    uint64_t v37 = v2;
    uint64_t v41 = (void **)(v1
                    + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v38 = v1;
    while (1)
    {
      unint64_t v8 = *(void *)(v43 + 8 * v6 + 32);
      uint64_t v9 = E5TransformerLanguageModel.nodeTokens(node:)(v8);
      unint64_t v10 = (unint64_t)KVLRUCache.cacheEntry(for:)((Swift::OpaquePointer)v9);
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        unint64_t v44 = v8;
        if (one-time initialization token for device != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Log.device);
        swift_bridgeObjectRetain_n();
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v13, v14))
        {
          unint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = (void *)swift_slowAlloc();
          v46[0] = v40;
          *(_DWORD *)unint64_t v15 = 136642819;
          std::string buf = v15;
          uint64_t v16 = swift_bridgeObjectRetain();
          uint64_t v17 = MEMORY[0x261205560](v16, MEMORY[0x263F8D6C8]);
          uint64_t v18 = v11;
          unint64_t v20 = v19;
          swift_bridgeObjectRelease();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v20, (uint64_t *)v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v11 = v18;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25FA51000, v13, v14, "Found kv cache entry for tokens %{sensitive}s", buf, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v40, -1, -1);
          uint64_t v3 = v38;
          MEMORY[0x261206F80](buf, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        Swift::OpaquePointer v23 = *(void **)(v3 + 24);
        v46[0] = 0;
        uint64_t v24 = v11;
        unsigned int v25 = objc_msgSend(v23, sel_setKVCacheEntry_startIndex_error_, v11, v45, v46, v37);
        id v26 = v46[0];
        if (!v25)
        {
          id v35 = v46[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return v7;
        }
        swift_beginAccess();
        uint64_t v27 = *v41;
        id v28 = v26;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v41 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          *uint64_t v41 = v27;
        }
        unint64_t v31 = v27[2];
        unint64_t v30 = v27[3];
        if (v31 >= v30 >> 1)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v27);
          *uint64_t v41 = v27;
        }
        void v27[2] = v31 + 1;
        v27[v31 + 4] = v44;
        swift_endAccess();

        uint64_t v32 = v9[2];
        swift_bridgeObjectRelease();
        BOOL v33 = __OFADD__(v45, v32);
        v45 += v32;
        if (v33)
        {
          __break(1u);
LABEL_31:
          __break(1u);
        }
        BOOL v33 = __OFADD__(v5, v32);
        v5 += v32;
        if (v33) {
          goto LABEL_31;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v22 = v7[2];
        unint64_t v21 = v7[3];
        if (v22 >= v21 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v7);
        }
        uint64_t v7[2] = v22 + 1;
        v7[v22 + 4] = v8;
      }
      if (v42 == ++v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
LABEL_26:
  uint64_t v34 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
  if (*(unsigned char *)(v3
                + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount
                + 8) == 1)
  {
    *(void *)uint64_t v34 = v5;
    *(unsigned char *)(v34 + 8) = 0;
  }
  return v7;
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[27] = a5;
  v6[28] = a6;
  v6[25] = a3;
  v6[26] = a4;
  v6[23] = a1;
  v6[24] = a2;
  uint64_t v7 = type metadata accessor for TokenGenerationError.Context();
  v6[29] = v7;
  v6[30] = *(void *)(v7 - 8);
  v6[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:), 0, 0);
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t a1), void *a7, uint64_t a8)
{
  long long v65 = v8;
  uint64_t v9 = v8[23];
  if ((*(unsigned char *)(v9 + 17) & 1) == 0)
  {
    unint64_t v10 = (void **)(v9 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
    swift_beginAccess();
    a1 = specialized static Array<A>.== infix(_:_:)(*v10, outlined read-only object #0 of closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:));
    if ((a1 & 1) == 0)
    {
LABEL_50:
      __break(1u);
      __break(1u);
      goto LABEL_51;
    }
    a1 = (uint64_t)objc_msgSend(*(id *)(v8[23] + 24), sel_reset);
    *(unsigned char *)(v9 + 17) = 1;
  }
  uint64_t v11 = v8[24];
  unint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v13 = v8[23];
  os_log_type_t v14 = (unint64_t *)(v11 + 32);
  uint64_t v15 = OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  v8[32] = OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  uint64_t v16 = v13 + v15;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v17 = 0;
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = v18 + 32;
  unint64_t v20 = *(void *)(v18 + 16);
  uint64_t v21 = *(void *)(*(void *)v16 + 16);
  while (1)
  {
    unint64_t v22 = v14[v17];
    if (v22 >= v20)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      uint64_t v53 = swift_bridgeObjectRetain();
      uint64_t v54 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_Si_Sits5NeverOTg5041_sS4iIgyydd_Si6offset_Si7elementtSi_Sits5f200OIegnrzr_TR247_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSayl41G_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_l4_SitL20_SitXEfU1_Tf3nnnpf_nTf1cn_n(v53);
      swift_bridgeObjectRelease();
      if (*(void *)(v54 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
        uint64_t v55 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v55 = (void *)MEMORY[0x263F8EE80];
      }
      v64[0] = v55;
      uint64_t v56 = (void *)swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v56, 1, v64);
      if (!v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = v64[0];
        v64[0] = (void *)MEMORY[0x263F8EE78];
        swift_retain();
        swift_retain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
        uint64_t v38 = v64[0];
        do
        {
          uint64_t v58 = v8[23];
          unint64_t v59 = *v14;
          swift_retain();
          swift_retain();
          unint64_t v60 = specialized Sequence.compactMap<A>(_:)(v59, v58, (uint64_t)v57);
          swift_release();
          swift_release();
          uint64_t v61 = specialized Sequence.reversed()(v60);
          v64[0] = v38;
          unint64_t v63 = v38[2];
          unint64_t v62 = v38[3];
          if (v63 >= v62 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
            uint64_t v38 = v64[0];
          }
          v38[2] = v63 + 1;
          v38[v63 + 4] = v61;
          ++v14;
          --v12;
        }
        while (v12);
        swift_release_n();
        swift_release();
        goto LABEL_27;
      }
      return swift_unexpectedError();
    }
    uint64_t v23 = v19 + 72 * v22;
    int v24 = *(unsigned __int8 *)(v23 + 24);
    if (!v21)
    {
      if (v24) {
        break;
      }
      goto LABEL_7;
    }
    if (*(void *)(v23 + 16) != *(void *)(*(void *)v16 + 32 + 8 * (v21 - 1))) {
      int v24 = 1;
    }
    if (v24 != 1) {
      break;
    }
LABEL_7:
    if (v12 == ++v17) {
      goto LABEL_35;
    }
  }
  a1 = specialized Sequence<>.contains(_:)(0, v8[24]);
  if (a1) {
    goto LABEL_49;
  }
  unsigned int v25 = E5TransformerLanguageModel.lookupLRUCache(promptModuleNodes:)(v8[25]);
  v8[33] = v25;
  id v28 = v25;
  uint64_t v29 = E5TransformerLanguageModel.nodesTokens(promptModuleNodes:)((uint64_t)v25);
  uint64_t v30 = (uint64_t)v29;
  v8[34] = v29;
  v8[21] = MEMORY[0x263F8EE78];
  uint64_t v31 = v29[2];
  if (v31)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v31; ++i)
    {
      uint64_t v33 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v33);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = v8[23];
  uint64_t v34 = v8[24];
  swift_retain();
  uint64_t v16 = 0;
  uint64_t v36 = specialized Sequence.compactMap<A>(_:)(v34, v35);
  swift_release();
  uint64_t v37 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v37);
  if (v12 < 2)
  {
LABEL_23:
    if (v28[2])
    {
      uint64_t v38 = (void *)E5TransformerLanguageModel.attentionMasks(promptModulesTokens:queryTokens:)(v30, v36);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = 0;
    }
LABEL_27:
    v8[35] = v38;
    uint64_t v41 = v8[27];
    uint64_t v40 = v8[28];
    uint64_t v42 = *(void *)(v8[23] + 24);
    uint64_t v43 = v8[21];
    v8[36] = v43;
    unint64_t v44 = (void *)swift_task_alloc();
    v8[37] = v44;
    v44[2] = v43;
    v44[3] = v38;
    v44[4] = v42;
    v44[5] = v41;
    v44[6] = v40;
    uint64_t v45 = (void *)swift_task_alloc();
    v8[38] = v45;
    a8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LogitCollection]);
    *uint64_t v45 = v8;
    v45[1] = closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
    a5 = 0x800000025FB6BCA0;
    a6 = partial apply for closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:);
    a1 = (uint64_t)(v8 + 20);
    a2 = 0;
    a3 = 0;
    a4 = 0xD000000000000039;
    a7 = v44;
    return MEMORY[0x270FA2360](a1, a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v39 = v8[23];
  v64[0] = *((void **)v8 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)v64, v39);
  a1 = swift_release();
  if (v64[0][2])
  {
    char v46 = specialized Sequence.allSatisfy(_:)(v64[0], v64[0][4], v8[23]);
    swift_release();
    if (v46) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    if (v28[2])
    {
      uint64_t v48 = v8[30];
      uint64_t v47 = v8[31];
      uint64_t v49 = v8[29];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      TokenGenerationError.Context.init(debugDescription:underlyingError:)();
      uint64_t v50 = type metadata accessor for TokenGenerationError();
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
      swift_allocError();
      uint64_t v52 = v51;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v51, v47, v49);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v50 - 8) + 104))(v52, *MEMORY[0x263F7F7E0], v50);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      swift_task_dealloc();
      id v26 = (uint64_t (*)(void))v8[1];
      return v26();
    }
    goto LABEL_36;
  }
LABEL_51:
  __break(1u);
  return MEMORY[0x270FA2360](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = v0[23];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  void *v1 = v0[20];
  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6++ + 32);
      unint64_t v8 = E5TransformerLanguageModel.nodeTokens(node:)(v7);
      uint64_t v9 = (void *)KVLRUCache.cacheEntry(for:)((Swift::OpaquePointer)v8);
      swift_bridgeObjectRelease();
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
  unint64_t v10 = v0[39];
  E5TransformerLanguageModel.cachePromptModuleNodes(promptModulesTokens:)(v0[34]);
  uint64_t v11 = v0[33];
  if (v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v13 = v0[23];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Array.append<A>(contentsOf:)(v11);
    swift_endAccess();
    swift_beginAccess();
    os_log_type_t v14 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v14);
    uint64_t result = swift_endAccess();
    uint64_t v16 = *(void *)(v13 + 40);
    uint64_t v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
      return result;
    }
    *(void *)(v13 + 40) = v18;
    swift_task_dealloc();
    unint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Zip2Sequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  if (v5 >= 1)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v7 = *(void *)(v3 + 32);
    uint64_t v8 = v7 + 32;
    unint64_t v9 = *(void *)(v7 + 16);
    uint64_t v10 = 1;
    while (v4 < v9)
    {
      uint64_t v11 = v8 + 72 * v4;
      unint64_t v4 = *(void *)(v11 + 16);
      char v12 = *(unsigned char *)(v11 + 24);
      if (v10 < v5)
      {
        ++v10;
        if (!*(unsigned char *)(v11 + 24)) {
          continue;
        }
      }
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_17;
  }
  char v12 = 0;
LABEL_8:
  unint64_t v14 = v1[3];
  unint64_t v13 = v1[4];
  uint64_t v15 = v1[5];
  if (v15 >= 1)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v16 = *(void *)(v13 + 32);
    uint64_t v17 = v16 + 32;
    unint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = 1;
    while (v14 < v18)
    {
      uint64_t v20 = v17 + 72 * v14;
      unint64_t v14 = *(void *)(v20 + 16);
      int v21 = *(unsigned __int8 *)(v20 + 24);
      if (v19 < v15)
      {
        ++v19;
        if (!v21) {
          continue;
        }
      }
      goto LABEL_15;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  LOBYTE(v21) = 0;
LABEL_15:
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 32) = v21;
  *(void *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

Swift::Int __swiftcall E5TransformerLanguageModel.latestCommonParent(nodeA:nodeB:)(Swift::Int nodeA, Swift::Int nodeB)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  if (nodeA < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v6 = *(void *)(v3 + 32);
  unint64_t v7 = *(void *)(v6 + 16);
  if (v7 <= nodeA)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 <= nodeB)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = v6 + 32;
  uint64_t v9 = *(void *)(v6 + 32 + 72 * nodeA + 8);
  uint64_t v10 = *(void *)(v8 + 72 * nodeB + 8);
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11)
  {
    BOOL v12 = __OFSUB__(v9, v11);
    uint64_t v13 = v9 - v11;
    if (!v12)
    {
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v14 = v10 - v11;
      if (!v12)
      {
        if (((v13 | v14) & 0x8000000000000000) == 0)
        {
          Swift::Int v36 = nodeA;
          uint64_t v37 = v3;
          uint64_t v38 = v13;
          Swift::Int v39 = nodeB;
          uint64_t v40 = v3;
          uint64_t v41 = v14;
          swift_retain_n();
          specialized Zip2Sequence.makeIterator()((uint64_t)&v27);
          long long v34 = v27;
          uint64_t v35 = v28;
          long long v32 = v29;
          uint64_t v33 = v30;
          if ((v31 & 1) == 0)
          {
            char v15 = BYTE8(v32);
            unint64_t v16 = v32;
            char v17 = BYTE8(v34);
            unint64_t v18 = v34;
            uint64_t v19 = v35 + 32;
            uint64_t v20 = v33 + 32;
            swift_beginAccess();
            swift_beginAccess();
            while ((v17 & 1) == 0)
            {
              if ((v18 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_25:
                __break(1u);
LABEL_26:
                __break(1u);
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
              if (v18 >= *(void *)(*(void *)v19 + 16)) {
                goto LABEL_25;
              }
              if (v15) {
                goto LABEL_34;
              }
              Swift::Int v21 = v16;
              if ((v16 & 0x8000000000000000) != 0) {
                goto LABEL_26;
              }
              if (v16 >= *(void *)(*(void *)v20 + 16)) {
                goto LABEL_27;
              }
              uint64_t v22 = *(void *)v19 + 72 * v18;
              unint64_t v23 = *(void *)(v22 + 48);
              char v17 = *(unsigned char *)(v22 + 56);
              uint64_t v24 = *(void *)v20 + 72 * v16;
              unint64_t v16 = *(void *)(v24 + 48);
              char v15 = *(unsigned char *)(v24 + 56);
              BOOL v25 = v18 == v21;
              unint64_t v18 = v23;
              if (v25)
              {
                swift_retain_n();
                outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v34);
                outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v32);
                swift_release_n();
                return v21;
              }
            }
          }
          goto LABEL_34;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        swift_retain_n();
        outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v34);
        outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&v32);
        Swift::Int result = swift_release_n();
        __break(1u);
        return result;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return 0;
}

uint64_t E5TransformerLanguageModel.inferenceCallCount.getter()
{
  return *(void *)(v0 + 40);
}

double E5TransformerLanguageModel.totalLatency.getter()
{
  swift_beginAccess();
  double v0 = (double)Duration.components.getter();
  Duration.components.getter();
  return (double)v1 * 1.0e-18 + v0;
}

uint64_t E5TransformerLanguageModel.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_clock;
  uint64_t v2 = type metadata accessor for ContinuousClock();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t E5TransformerLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_clock;
  uint64_t v2 = type metadata accessor for ContinuousClock();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance E5TransformerLanguageModel(unint64_t a1, uint64_t a2)
{
  return specialized E5TransformerLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance E5TransformerLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return MEMORY[0x270FA2498](E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance E5TransformerLanguageModel@<X0>(Swift::Int a1@<X0>, TokenGenerationInference::SamplingDecoderPrompt a2@<0:X1, 8:X2, 16:X3>)
{
  return E5TransformerLanguageModel.node(forPreviousNode:prompt:)(a1, a2);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  long long v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    long long v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    char v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    char v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    unint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      Swift::Int v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      char v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    BOOL v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC, (uint64_t)off_2655419B8, &demangling cache variable for type metadata for _SetStorage<TGIE5AdapterConfigurationObjC>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for TGIE5FunctionObjC, (uint64_t)off_2655419C8, &demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v10 = v6;
  uint64_t v13 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v13 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v15 = a2;
    uint64_t v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for TGIE5AdapterConfigurationObjC(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v41;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v29 = specialized _NativeSet.init(_:capacity:)(v14, result + 1, a5, a3);
    uint64_t v42 = (void *)v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      uint64_t v35 = v30 + 1;
      id v36 = v15;
      specialized _NativeSet.resize(capacity:)(v35, a5);
      uint64_t v31 = v42;
    }
    else
    {
      uint64_t v31 = (void *)v29;
      id v32 = v15;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v15, v31);
    *uint64_t v10 = (uint64_t)v31;
    swift_bridgeObjectRelease();
    *a1 = v15;
  }
  else
  {
    Swift::Int v18 = *(void *)(v13 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v19 = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v21 = v19 & ~v20;
    uint64_t v38 = a4;
    if ((*(void *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
    {
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, a3);
      id v22 = *(id *)(*(void *)(v13 + 48) + 8 * v21);
      char v23 = static NSObject.== infix(_:_:)();

      if (v23)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        long long v27 = *(void **)(*(void *)(*v10 + 48) + 8 * v21);
        *a1 = v27;
        id v28 = v27;
        return 0;
      }
      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v13 + 48) + 8 * v21);
        char v26 = static NSObject.== infix(_:_:)();

        if (v26) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    id v34 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v38, a6);
    *uint64_t v10 = v43;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    long long v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char *v42;
  uint64_t v43;

  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v9 = *(void *)(v5 + 56);
    uint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      int64_t v10 = ~(-1 << v8);
    }
    else {
      int64_t v10 = -1;
    }
    uint64_t v11 = v10 & v9;
    id v36 = v0;
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    unint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    unint64_t v14 = 0;
    Swift::Int v39 = v7;
    int64_t v15 = v42;
    unint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        uint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v41 = v14;
        uint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        unint64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        char v22 = v14 + 1;
        if (!v21)
        {
          char v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            char v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              unint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  char v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              char v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v41 = v22;
        uint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      BOOL v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      long long v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      Swift::Int v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v31 = 0;
        id v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          id v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        int64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      int64_t v5 = v24;
      unint64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  unint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, uint64_t a6, void (*a7)(uint64_t))
{
  unint64_t v11 = *(void *)(*v7 + 16);
  unint64_t v12 = *(void *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v13, a4);
  }
  else
  {
    if (v12 > v11)
    {
      a7(v13);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, a4);
  }
  uint64_t v14 = *v7;
  Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(*v7 + 40));
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, a5);
    id v17 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
    char v18 = static NSObject.== infix(_:_:)();

    if (v18)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * a2) = a1;
  uint64_t v23 = *(void *)(v22 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v25;
  }
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  int64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  id v36 = v7 + 56;
  if (v10 < 64) {
    unint64_t v12 = ~(-1 << v10);
  }
  else {
    unint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  unint64_t v14 = v8 + 56;
  Swift::Int v39 = v3;
  int64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      uint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    unint64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    char v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      char v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        char v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    BOOL v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    BOOL v27 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  unint64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  char v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    char v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    uint64_t v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            void *v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  long long *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  long long v31[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            unint64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      int64_t v21 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (a2) {
        outlined init with take of LogitCollection(v21, (uint64_t)v31);
      }
      else {
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v21, (uint64_t)v31);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = outlined init with take of LogitCollection(v31, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  long long *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  long long v38[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OnDeviceInferenceAssetObject>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      outlined init with take of LogitCollection(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      uint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    uint8_t *v15 = v24;
    v15[1] = v23;
    uint64_t result = outlined init with take of LogitCollection(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt *v24;
  Swift::UInt v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[Int], KVLRUCacheNode>);
  id v36 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v34 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v34) {
          goto LABEL_36;
        }
        unint64_t v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v18 = v35[v8];
          if (!v18)
          {
            unint64_t v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_43;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v35 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_45;
                }
                if (v8 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v18 = v35[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = 8 * v16;
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + v20);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + v20);
      if ((v36 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v21 + 16));
      uint64_t v23 = *(void *)(v21 + 16);
      if (v23)
      {
        uint64_t v24 = (Swift::UInt *)(v21 + 32);
        do
        {
          uint64_t v25 = *v24++;
          Hasher._combine(_:)(v25);
          --v23;
        }
        while (v23);
      }
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            char v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        int64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = 8 * v13;
      *(void *)(*(void *)(v7 + 48) + v14) = v21;
      *(void *)(*(void *)(v7 + 56) + v14) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_43:
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t i;
  char v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetadataSpecialToken>);
  uint64_t v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        uint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          uint64_t v23 = v38[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                id v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                uint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      BOOL v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      char v34 = *(void *)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      uint64_t v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of MetadataSpecialToken(v34, v33, v35);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            uint64_t v16 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      unint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)unint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      uint8_t *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PrefixGuidedLanguageModel.Node>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  void *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  Swift::Int v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    char v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    id v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          uint64_t v16 = 0;
        }
        v27 |= v29;
        BOOL v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  void *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  long long v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (logitCount: Int, callback: @convention(c) (_:_:_:_:_:), cbContext: OpaquePointer)>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        uint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v23 = v36[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v37)
              {
                char v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      BOOL v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v33 = *(void *)v32;
      uint64_t v38 = *(_OWORD *)(v32 + 8);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            uint64_t v16 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      unint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)unint64_t v19 = v33;
      *(_OWORD *)(v19 + 8) = v38;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50, v6);
  uint64_t v49 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CheckedContinuation<(), Never>>);
  int v48 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v45 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  char v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v47 = v5;
  unint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v44) {
      break;
    }
    uint64_t v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v44) {
              goto LABEL_34;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v8 + 56);
    uint64_t v28 = v8;
    unint64_t v29 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v22);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = *(void *)(v47 + 72);
    uint64_t v33 = v27 + v32 * v22;
    if (v48)
    {
      (*v15)(v49, v33, v50);
    }
    else
    {
      (*v46)(v49, v33, v50);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v34 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v35) & ~*(void *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v19 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = (void *)(*(void *)(v10 + 48) + 16 * v19);
    *unint64_t v20 = v30;
    v20[1] = v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v32 * v19, v49, v50);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v28;
  }
  swift_release();
  uint64_t v3 = v43;
  uint64_t v24 = v45;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v8 + 32);
  if (v41 >= 64) {
    bzero(v24, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v41;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x263F40F88], &demangling cache variable for type metadata for _DictionaryStorage<UUID, FirstTokenInferenceInstrumenter>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x263F40F68], &demangling cache variable for type metadata for _DictionaryStorage<UUID, ExtendInferenceInstrumenter>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x263F40F90], &demangling cache variable for type metadata for _DictionaryStorage<UUID, CompletePromptRequestInstrumenter>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  void *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  void *v48;
  void (**v49)(char *, unint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  void (**v54)(char *, unint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DataStreamState(0);
  uint64_t v51 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v56 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v53 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, DataStreamState>);
  uint64_t v52 = a2;
  uint64_t v13 = v12;
  unint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  unint64_t v17 = *(void *)(v13 + 64);
  int v48 = (void *)(v13 + 64);
  if (v16 < 64) {
    int64_t v18 = ~(-1 << v16);
  }
  else {
    int64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  char v46 = v2;
  uint64_t v47 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  uint64_t v54 = (void (**)(char *, unint64_t, uint64_t))(v9 + 32);
  uint64_t v55 = v8;
  unint64_t v20 = v14 + 64;
  uint64_t result = swift_retain();
  unint64_t v22 = 0;
  uint64_t v50 = v13;
  int64_t v23 = v53;
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      int64_t v26 = v25 | (v22 << 6);
      goto LABEL_22;
    }
    uint64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v47) {
      break;
    }
    uint64_t v28 = v48;
    unint64_t v29 = v48[v27];
    ++v22;
    if (!v29)
    {
      unint64_t v22 = v27 + 1;
      if (v27 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v29 = v48[v22];
      if (!v29)
      {
        uint64_t v30 = v27 + 2;
        if (v30 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v46;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v48[v30];
        if (!v29)
        {
          while (1)
          {
            unint64_t v22 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v47) {
              goto LABEL_34;
            }
            unint64_t v29 = v48[v22];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v22 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    int64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
    int64_t v23 = v53;
LABEL_22:
    uint64_t v31 = v9;
    uint64_t v32 = *(void *)(v9 + 72);
    uint64_t v33 = *(void *)(v13 + 48) + v32 * v26;
    if (v52)
    {
      (*v54)(v23, v33, v55);
      uint64_t v34 = *(void *)(v13 + 56);
      unint64_t v35 = *(void *)(v51 + 72);
      outlined init with take of DataStreamState(v34 + v35 * v26, v56);
    }
    else
    {
      (*v49)(v23, v33, v55);
      unint64_t v36 = *(void *)(v13 + 56);
      unint64_t v35 = *(void *)(v51 + 72);
      outlined init with copy of DataStreamState(v36 + v35 * v26, v56);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    char v37 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v38 = result & ~v37;
    BOOL v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      int64_t v23 = v53;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = (unint64_t)(63 - v37) >> 6;
      int64_t v23 = v53;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          BOOL v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v20 + 8 * v39);
      }
      while (v43 == -1);
      uint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*v54)((char *)(*(void *)(v15 + 48) + v32 * v24), (unint64_t)v23, v55);
    uint64_t result = outlined init with take of DataStreamState(v56, *(void *)(v15 + 56) + v35 * v24);
    ++*(void *)(v15 + 16);
    uint64_t v13 = v50;
    uint64_t v9 = v31;
  }
  swift_release();
  uint64_t v3 = v46;
  uint64_t v28 = v48;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v44 = 1 << *(unsigned char *)(v13 + 32);
  if (v44 >= 64) {
    bzero(v28, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v28 = -1 << v44;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v15;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x263F40F78], &demangling cache variable for type metadata for _DictionaryStorage<UUID, PromptProcessingInstrumenter>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  void (**v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  void (**v47)(char *, unint64_t, uint64_t);
  _OWORD v48[2];

  uint64_t v3 = v2;
  uint64_t v45 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v5 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
  char v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    BOOL v39 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v41 = (void *)(v9 + 64);
    if (v12 < 64) {
      unint64_t v14 = ~(-1 << v12);
    }
    else {
      unint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    uint64_t v40 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v43 = v9;
    int64_t v44 = v8;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v40) {
          goto LABEL_34;
        }
        int64_t v23 = v41[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v40) {
            goto LABEL_34;
          }
          int64_t v23 = v41[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v39;
              if (v46)
              {
                char v37 = 1 << *(unsigned char *)(v9 + 32);
                if (v37 >= 64) {
                  bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v41 = -1 << v37;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v41[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v40) {
                  goto LABEL_34;
                }
                int64_t v23 = v41[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      unint64_t v25 = v5;
      int64_t v26 = *(void *)(v5 + 72);
      uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
      uint64_t v28 = v44;
      unint64_t v29 = v45;
      if (v46)
      {
        (*v47)(v44, v27, v45);
        outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v21), v48);
      }
      else
      {
        (*v42)(v44, v27, v45);
        outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v21, (uint64_t)v48);
      }
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, MEMORY[0x263F7FB28]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v31 = result & ~v30;
      uint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v35 = v32 == v34;
          if (v32 == v34) {
            uint64_t v32 = 0;
          }
          v33 |= v35;
          unint64_t v36 = *(void *)(v16 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      (*v47)((char *)(*(void *)(v11 + 48) + v26 * v19), (unint64_t)v28, v29);
      uint64_t result = (uint64_t)outlined init with take of Any(v48, (_OWORD *)(*(void *)(v11 + 56) + 32 * v19));
      ++*(void *)(v11 + 16);
      uint64_t v5 = v25;
      uint64_t v9 = v43;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  void (**v44)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v46;
  int v47;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, [String : String]>);
  uint64_t v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  unint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = *(void *)(v12 + 64);
  uint64_t v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  uint64_t v42 = (unint64_t)(v14 + 63) >> 6;
  int64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  char v46 = v6;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  unint64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      int64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    unint64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    int64_t v26 = v43;
    uint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      unint64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      uint64_t v27 = v43[v21];
      if (!v27)
      {
        uint64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            unint64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            uint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    unint64_t v29 = *(void *)(v46 + 72);
    uint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
    }
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, MEMORY[0x263F7FB28]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0;
        }
        v35 |= v37;
        unint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  int64_t v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  BOOL v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    uint64_t *v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v58 = a3(0);
  uint64_t v8 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58, v9);
  uint64_t v57 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  unint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v55 = a2;
  uint64_t v17 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v18 = v17;
  if (!*(void *)(v16 + 16)) {
    goto LABEL_41;
  }
  uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v20 = *(void *)(v16 + 64);
  uint64_t v49 = (void *)(v16 + 64);
  if (v19 < 64) {
    uint64_t v21 = ~(-1 << v19);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v20;
  uint64_t v47 = v4;
  int64_t v48 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v50 = v8 + 16;
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  uint64_t v53 = v8;
  uint64_t v54 = v12;
  int64_t v23 = (void (**)(char *, unint64_t, uint64_t))(v12 + 32);
  uint64_t v56 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v24 = v17 + 64;
  uint64_t result = swift_retain();
  int64_t v26 = 0;
  for (i = v16; ; uint64_t v16 = i)
  {
    if (v22)
    {
      unint64_t v28 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_22;
    }
    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v48) {
      break;
    }
    uint64_t v31 = v49;
    unint64_t v32 = v49[v30];
    ++v26;
    if (!v32)
    {
      int64_t v26 = v30 + 1;
      if (v30 + 1 >= v48) {
        goto LABEL_34;
      }
      unint64_t v32 = v49[v26];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v48)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v47;
          if ((v55 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v32 = v49[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v26 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_43;
            }
            if (v26 >= v48) {
              goto LABEL_34;
            }
            unint64_t v32 = v49[v26];
            ++v33;
            if (v32) {
              goto LABEL_21;
            }
          }
        }
        int64_t v26 = v33;
      }
    }
LABEL_21:
    unint64_t v22 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_22:
    uint64_t v34 = *(void *)(v54 + 72);
    unint64_t v35 = *(void *)(v16 + 48) + v34 * v29;
    if (v55)
    {
      (*v23)(v15, v35, v11);
      uint64_t v36 = *(void *)(v16 + 56);
      uint64_t v37 = *(void *)(v53 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 32))(v57, v36 + v37 * v29, v58);
    }
    else
    {
      (*v51)(v15, v35, v11);
      uint64_t v38 = *(void *)(v16 + 56);
      uint64_t v37 = *(void *)(v53 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v57, v38 + v37 * v29, v58);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v18 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v24 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v40) & ~*(void *)(v24 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v24 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v27 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v24 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    (*v23)((char *)(*(void *)(v18 + 48) + v34 * v27), (unint64_t)v15, v11);
    uint64_t result = (*v56)(*(void *)(v18 + 56) + v37 * v27, v57, v58);
    ++*(void *)(v18 + 16);
  }
  swift_release();
  uint64_t v6 = v47;
  uint64_t v31 = v49;
  if ((v55 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v16 + 32);
  if (v46 >= 64) {
    bzero(v31, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v31 = -1 << v46;
  }
  *(void *)(v16 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v6 = v18;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of LogitCollection(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  uint64_t *boxed_opaque_existential_1;
  void *v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  _UNKNOWN **v18;

  uint64_t v17 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v18 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a4, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  void *v11 = a2;
  v11[1] = a3;
  uint64_t result = outlined init with take of LogitCollection(&v16, a5[7] + 40 * a1);
  BOOL v13 = a5[2];
  uint64_t v14 = __OFADD__(v13, 1);
  unint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F40F88]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F40F68]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F40F90]);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for DataStreamState(0);
  uint64_t result = outlined init with take of DataStreamState(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  BOOL v13 = a4[2];
  uint64_t v14 = __OFADD__(v13, 1);
  unint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x263F40F78]);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Prompt.SpecialToken();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  BOOL v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  void *v8 = a4;
  v8[1] = a5;
  uint64_t v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    if (!v19) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)outlined init with take of LogitCollection(v22, *(void *)(v4 + 56) + v18);
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OnDeviceInferenceAssetObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 40 * v15;
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of LogitCollection(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v1 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36, v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CheckedContinuation<(), Never>>);
  uint64_t v31 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = *(void *)(v5 + 16);
  uint64_t v37 = v6;
  if (!v7)
  {
    uint64_t result = (void *)swift_release();
    unint64_t v29 = v37;
    unint64_t v28 = v31;
LABEL_25:
    void *v28 = v29;
    return result;
  }
  uint64_t v8 = v6;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v37;
  }
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v32 = v5 + 64;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = v1 + 32;
  unint64_t v35 = v1 + 16;
  unint64_t v15 = v36;
  while (1)
  {
    if (v14)
    {
      uint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v33) {
      goto LABEL_23;
    }
    int64_t v26 = *(void *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      uint64_t v11 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_23;
      }
      int64_t v26 = *(void *)(v32 + 8 * v11);
      if (!v26) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v26 - 1) & v26;
    uint64_t v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    int64_t v20 = *v19;
    uint64_t v21 = v19[1];
    unint64_t v22 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v4, *(void *)(v5 + 56) + v22, v15);
    int64_t v23 = v37;
    uint64_t v24 = (void *)(*(void *)(v37 + 48) + v18);
    void *v24 = v20;
    v24[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v23 + 56) + v22, v4, v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v31;
    unint64_t v29 = v37;
    goto LABEL_25;
  }
  int64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    uint64_t v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_23;
    }
    int64_t v26 = *(void *)(v32 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F40F88], &demangling cache variable for type metadata for _DictionaryStorage<UUID, FirstTokenInferenceInstrumenter>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F40F68], &demangling cache variable for type metadata for _DictionaryStorage<UUID, ExtendInferenceInstrumenter>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F40F90], &demangling cache variable for type metadata for _DictionaryStorage<UUID, CompletePromptRequestInstrumenter>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = type metadata accessor for DataStreamState(0);
  uint64_t v31 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8, v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  int64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, DataStreamState>);
  int64_t v26 = v0;
  uint64_t v10 = *v0;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  unint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v26 = v12;
    return result;
  }
  uint64_t result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    uint64_t result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  unint64_t v15 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  uint64_t v18 = v17 & *(void *)(v10 + 64);
  unint64_t v27 = v10 + 64;
  unint64_t v28 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v29 = v6 + 32;
  int64_t v30 = v6 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v20 = v19 | (v15 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      goto LABEL_23;
    }
    uint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      unint64_t v15 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_23;
      }
      uint64_t v24 = *(void *)(v27 + 8 * v15);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    uint64_t v18 = (v24 - 1) & v24;
    int64_t v20 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_9:
    uint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(v10 + 48) + v21, v5);
    unint64_t v22 = *(void *)(v31 + 72) * v20;
    outlined init with copy of DataStreamState(*(void *)(v10 + 56) + v22, (uint64_t)v4);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v12 + 48) + v21, v9, v5);
    uint64_t result = (void *)outlined init with take of DataStreamState((uint64_t)v4, *(void *)(v12 + 56) + v22);
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v28) {
    goto LABEL_23;
  }
  uint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    unint64_t v15 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_23;
    }
    uint64_t v24 = *(void *)(v27 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x263F40F78], &demangling cache variable for type metadata for _DictionaryStorage<UUID, PromptProcessingInstrumenter>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[Int], KVLRUCacheNode>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetadataSpecialToken>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 56);
    uint64_t v18 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = v18[1];
    int64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v17 + v20);
    unint64_t v22 = *(void *)(v17 + v20 + 8);
    int64_t v23 = *(unsigned char *)(v17 + v20 + 16);
    uint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    void *v24 = *v18;
    v24[1] = v19;
    unint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v25 = v21;
    *(void *)(v25 + 8) = v22;
    *(unsigned char *)(v25 + 16) = v23;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of MetadataSpecialToken(v21, v22, v23);
  }
  unint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PrefixGuidedLanguageModel.Node>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _OWORD v27[2];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
  unint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  int64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v9;
    return result;
  }
  int64_t v23 = v1;
  uint64_t result = (void *)(v8 + 64);
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v24 = v7 + 64;
  unint64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 64);
  unint64_t v25 = (unint64_t)(v13 + 63) >> 6;
  int64_t v26 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      unint64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    uint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    uint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    unint64_t v19 = 32 * v17;
    outlined init with copy of Any(*(void *)(v7 + 56) + v19, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
    uint64_t result = outlined init with take of Any(v27, (_OWORD *)(*(void *)(v9 + 56) + v19));
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  uint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    unint64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v1 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, [String : String]>);
  uint64_t v24 = v0;
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    void *v24 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  unint64_t v25 = v6 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  unint64_t v27 = v2 + 32;
  unint64_t v28 = v2 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      uint64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      uint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    unint64_t v19 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (logitCount: Int, callback: @convention(c) (_:_:_:_:_:), cbContext: OpaquePointer)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    unint64_t v22 = *(void *)v21;
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v24 = *(_OWORD *)(v21 + 8);
    void *v23 = v19;
    v23[1] = v18;
    unint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v25 = v22;
    *(_OWORD *)(v25 + 8) = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v47 = a1(0);
  uint64_t v50 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47, v4);
  uint64_t v46 = (char *)&v37 - v5;
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45, v6);
  BOOL v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v37 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v51 = v9;
  if (!v10)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v36 = v51;
    unint64_t v35 = v37;
LABEL_25:
    *unint64_t v35 = v36;
    return result;
  }
  uint64_t v11 = v9;
  uint64_t result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v51;
  }
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  uint64_t v48 = v8;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v8 + 64;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v50;
  uint64_t v19 = v49;
  uint64_t v42 = v50 + 16;
  uint64_t v43 = v49 + 16;
  uint64_t v40 = v50 + 32;
  uint64_t v41 = v49 + 32;
  int64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v52 = v14;
      unint64_t v25 = v24 | (v14 << 6);
      uint64_t v26 = v48;
      goto LABEL_9;
    }
    int64_t v31 = v14 + 1;
    uint64_t v26 = v48;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    int64_t v33 = v14 + 1;
    if (!v32)
    {
      int64_t v33 = v31 + 1;
      if (v31 + 1 >= v39) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v38 + 8 * v33);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v32 - 1) & v32;
    int64_t v52 = v33;
    unint64_t v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v19 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v20, *(void *)(v26 + 48) + v27, v21);
    unint64_t v28 = *(void *)(v18 + 72) * v25;
    unint64_t v29 = *(void *)(v26 + 56) + v28;
    int64_t v30 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v23 + 48) + v27, v20, v21);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v23 + 56) + v28, v30, v22);
    int64_t v14 = v52;
  }
  int64_t v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v35 = v37;
    uint64_t v36 = v51;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v8 = *a4;
    uint64_t v9 = a5 + 32;
    swift_retain();
    uint64_t v10 = v8 + 8 * v5 - 8;
    while (2)
    {
      swift_beginAccess();
      unint64_t v11 = *(void *)(v8 + 8 * v5);
      uint64_t v12 = 72 * v11;
      uint64_t v13 = a1;
      int64_t v14 = (unint64_t *)v10;
      do
      {
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        unint64_t v15 = *(void *)(*(void *)v9 + 16);
        if (v11 >= v15) {
          goto LABEL_24;
        }
        unint64_t v16 = *v14;
        if (*v14 >= v15) {
          goto LABEL_25;
        }
        uint64_t v17 = *(void *)v9 + 32;
        uint64_t v18 = v17 + v12;
        uint64_t v19 = *(void *)(v17 + v12 + 8);
        uint64_t v20 = v17 + 72 * v16;
        uint64_t v21 = *(void *)(v20 + 8);
        BOOL v22 = v19 < v21;
        if (v19 == v21)
        {
          if (*(unsigned char *)(v18 + 48)) {
            uint64_t v23 = -1;
          }
          else {
            uint64_t v23 = *(void *)(v18 + 40);
          }
          if (*(unsigned char *)(v20 + 48)) {
            uint64_t v24 = -1;
          }
          else {
            uint64_t v24 = *(void *)(v20 + 40);
          }
          BOOL v22 = v23 < v24;
        }
        if (!v22) {
          break;
        }
        if (!v8) {
          goto LABEL_26;
        }
        unint64_t *v14 = v11;
        v14[1] = v16;
        --v14;
        ++v13;
      }
      while (v5 != v13);
      ++v5;
      v10 += 8;
      if (v5 != a2) {
        continue;
      }
      break;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t *a3, char *__dst, uint64_t a5)
{
  uint64_t v6 = (unint64_t *)__dst;
  uint64_t v7 = a3;
  uint64_t v8 = (unint64_t *)a2;
  uint64_t v9 = (unint64_t *)__src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = (char *)a3 - a2;
  uint64_t v14 = (char *)a3 - a2 + 7;
  if ((char *)a3 - a2 >= 0) {
    uint64_t v14 = (char *)a3 - a2;
  }
  uint64_t v15 = v14 >> 3;
  uint64_t v47 = __src;
  uint64_t v46 = (unint64_t *)__dst;
  if (v12 < v14 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_72;
    }
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    swift_retain();
    unint64_t v16 = &v6[v12];
    uint64_t v45 = v16;
    if (v8 < v7 && v10 >= 8)
    {
      uint64_t v17 = a5 + 32;
      swift_beginAccess();
      while (1)
      {
        unint64_t v18 = *v8;
        if ((*v8 & 0x8000000000000000) != 0) {
          goto LABEL_69;
        }
        unint64_t v19 = *(void *)(*(void *)v17 + 16);
        if (v18 >= v19) {
          goto LABEL_70;
        }
        unint64_t v20 = *v6;
        if (*v6 >= v19) {
          goto LABEL_71;
        }
        uint64_t v21 = *(void *)v17 + 32;
        uint64_t v22 = v21 + 72 * v18;
        uint64_t v23 = *(void *)(v22 + 8);
        uint64_t v24 = v21 + 72 * v20;
        uint64_t v25 = *(void *)(v24 + 8);
        if (v23 == v25)
        {
          if (*(unsigned char *)(v22 + 48)) {
            uint64_t v26 = -1;
          }
          else {
            uint64_t v26 = *(void *)(v22 + 40);
          }
          if (*(unsigned char *)(v24 + 48)) {
            uint64_t v27 = -1;
          }
          else {
            uint64_t v27 = *(void *)(v24 + 40);
          }
          if (v26 < v27)
          {
LABEL_28:
            unint64_t v28 = v8 + 1;
            if (v9 < v8 || v9 >= v28 || v9 != v8) {
              unint64_t *v9 = v18;
            }
            goto LABEL_32;
          }
        }
        else if (v23 < v25)
        {
          goto LABEL_28;
        }
        if (v9 != v6) {
          unint64_t *v9 = v20;
        }
        uint64_t v46 = ++v6;
        unint64_t v28 = v8;
LABEL_32:
        ++v9;
        if (v6 < v16)
        {
          uint64_t v8 = v28;
          if (v28 < v7) {
            continue;
          }
        }
        uint64_t v47 = (char *)v9;
        break;
      }
    }
LABEL_65:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v47, (const void **)&v46, &v45);
    swift_release_n();
    return 1;
  }
  if (v13 < -7) {
    goto LABEL_72;
  }
  if (__dst != a2 || &a2[8 * v15] <= __dst) {
    memmove(__dst, a2, 8 * v15);
  }
  swift_retain();
  unint64_t v29 = &v6[v15];
  uint64_t v45 = v29;
  uint64_t v47 = (char *)v8;
  if (v9 >= v8 || v13 < 8) {
    goto LABEL_65;
  }
  int64_t v30 = (uint64_t *)(a5 + 32);
  swift_beginAccess();
  while (1)
  {
    unint64_t v31 = *(v29 - 1);
    if ((v31 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v32 = *v30;
    unint64_t v33 = *(void *)(*v30 + 16);
    if (v31 >= v33) {
      goto LABEL_67;
    }
    int64_t v34 = v8 - 1;
    unint64_t v35 = *(v8 - 1);
    if (v35 >= v33) {
      goto LABEL_68;
    }
    uint64_t v36 = v32 + 32;
    uint64_t v37 = v32 + 32 + 72 * v31;
    uint64_t v38 = *(void *)(v37 + 8);
    uint64_t v39 = v36 + 72 * v35;
    uint64_t v40 = *(void *)(v39 + 8);
    if (v38 == v40)
    {
      if (*(unsigned char *)(v37 + 48)) {
        uint64_t v41 = -1;
      }
      else {
        uint64_t v41 = *(void *)(v37 + 40);
      }
      uint64_t v42 = *(void *)(v39 + 40);
      if (*(unsigned char *)(v39 + 48)) {
        uint64_t v42 = -1;
      }
      uint64_t v43 = v7 - 1;
      if (v41 >= v42)
      {
LABEL_55:
        uint64_t v45 = v29 - 1;
        if (v7 < v29 || v43 >= v29 || v7 != v29) {
          *uint64_t v43 = *(v29 - 1);
        }
        --v29;
        if (v8 <= v9) {
          goto LABEL_65;
        }
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v43 = v7 - 1;
      if (v38 >= v40) {
        goto LABEL_55;
      }
    }
    if (v7 != v8 || v43 >= v8) {
      *uint64_t v43 = v35;
    }
    uint64_t v47 = (char *)--v8;
    if (v34 <= v9) {
      goto LABEL_65;
    }
LABEL_44:
    uint64_t v7 = v43;
    if (v29 <= v6) {
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t result;
  unint64_t *v44;
  unint64_t *v45;
  char *v46;

  uint64_t v6 = (unint64_t *)__dst;
  uint64_t v7 = a3;
  uint64_t v8 = (unint64_t *)a2;
  uint64_t v9 = (unint64_t *)__src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = (char *)a3 - a2;
  uint64_t v14 = (char *)a3 - a2 + 7;
  if ((char *)a3 - a2 >= 0) {
    uint64_t v14 = (char *)a3 - a2;
  }
  uint64_t v15 = v14 >> 3;
  uint64_t v46 = __src;
  uint64_t v45 = (unint64_t *)__dst;
  if (v12 < v14 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_72;
    }
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    unint64_t v16 = &v6[v12];
    BOOL v44 = v16;
    if (v8 < v7 && v10 >= 8)
    {
      uint64_t v17 = a5 + 32;
      swift_beginAccess();
      while (1)
      {
        unint64_t v18 = *v6;
        if ((*v6 & 0x8000000000000000) != 0) {
          goto LABEL_69;
        }
        unint64_t v19 = *(void *)(*(void *)v17 + 16);
        if (v18 >= v19) {
          goto LABEL_70;
        }
        unint64_t v20 = *v8;
        if (*v8 >= v19) {
          goto LABEL_71;
        }
        uint64_t v21 = *(void *)v17 + 32;
        uint64_t v22 = v21 + 72 * v18;
        uint64_t v23 = *(void *)(v22 + 8);
        uint64_t v24 = v21 + 72 * v20;
        uint64_t v25 = *(void *)(v24 + 8);
        if (v23 == v25)
        {
          if (*(unsigned char *)(v22 + 48)) {
            uint64_t v26 = -1;
          }
          else {
            uint64_t v26 = *(void *)(v22 + 40);
          }
          if (*(unsigned char *)(v24 + 48)) {
            uint64_t v27 = -1;
          }
          else {
            uint64_t v27 = *(void *)(v24 + 40);
          }
          if (v26 < v27)
          {
LABEL_28:
            unint64_t v28 = v8 + 1;
            if (v9 < v8 || v9 >= v28 || v9 != v8) {
              unint64_t *v9 = v20;
            }
            goto LABEL_32;
          }
        }
        else if (v23 < v25)
        {
          goto LABEL_28;
        }
        if (v9 != v6) {
          unint64_t *v9 = v18;
        }
        uint64_t v45 = ++v6;
        unint64_t v28 = v8;
LABEL_32:
        ++v9;
        if (v6 < v16)
        {
          uint64_t v8 = v28;
          if (v28 < v7) {
            continue;
          }
        }
        uint64_t v46 = (char *)v9;
        break;
      }
    }
LABEL_65:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v46, (const void **)&v45, &v44);
    return 1;
  }
  if (v13 < -7) {
    goto LABEL_72;
  }
  if (__dst != a2 || &a2[8 * v15] <= __dst) {
    memmove(__dst, a2, 8 * v15);
  }
  unint64_t v29 = &v6[v15];
  BOOL v44 = v29;
  uint64_t v46 = (char *)v8;
  if (v9 >= v8 || v13 < 8) {
    goto LABEL_65;
  }
  int64_t v30 = a5 + 32;
  swift_beginAccess();
  while (1)
  {
    unint64_t v31 = v8 - 1;
    uint64_t v32 = *(v8 - 1);
    if ((v32 & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v33 = *(void *)(*(void *)v30 + 16);
    if (v32 >= v33) {
      goto LABEL_67;
    }
    int64_t v34 = *(v29 - 1);
    if (v34 >= v33) {
      goto LABEL_68;
    }
    unint64_t v35 = *(void *)v30 + 32;
    uint64_t v36 = v35 + 72 * v32;
    uint64_t v37 = *(void *)(v36 + 8);
    uint64_t v38 = v35 + 72 * v34;
    uint64_t v39 = *(void *)(v38 + 8);
    if (v37 == v39)
    {
      if (*(unsigned char *)(v36 + 48)) {
        uint64_t v40 = -1;
      }
      else {
        uint64_t v40 = *(void *)(v36 + 40);
      }
      uint64_t v41 = *(void *)(v38 + 40);
      if (*(unsigned char *)(v38 + 48)) {
        uint64_t v41 = -1;
      }
      uint64_t v42 = v7 - 1;
      if (v40 >= v41)
      {
LABEL_55:
        BOOL v44 = v29 - 1;
        if (v7 < v29 || v42 >= v29 || v7 != v29) {
          *uint64_t v42 = *(v29 - 1);
        }
        --v29;
        if (v8 <= v9) {
          goto LABEL_65;
        }
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v42 = v7 - 1;
      if (v37 >= v39) {
        goto LABEL_55;
      }
    }
    if (v7 != v8 || v42 >= v8) {
      *uint64_t v42 = v32;
    }
    uint64_t v46 = (char *)--v8;
    if (v31 <= v9) {
      goto LABEL_65;
    }
LABEL_44:
    uint64_t v7 = v42;
    if (v29 <= v6) {
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(unint64_t a1, uint64_t a2)
{
  uint64_t v42 = *(void *)(a2 + 16);
  if (!v42) {
    return a1;
  }
  uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v41 = v3;
  while (1)
  {
    uint64_t v5 = *(void *)(v3 + 8 * v4 + 32);
    uint64_t v6 = *v43;
    uint64_t v7 = *v43 + 24;
    swift_beginAccess();
    if ((a1 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v8 = *(void *)(v6 + 24);
    unint64_t v9 = *(void *)(v8 + 16);
    if (a1 >= v9) {
      goto LABEL_34;
    }
    uint64_t v10 = v8 + 24 * a1;
    uint64_t v11 = *(void *)(v10 + 32);
    uint64_t v12 = *(void **)(v10 + 40);
    if (*(void *)(v11 + 16))
    {
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v14)
      {
        a1 = *(void *)(*(void *)(v11 + 56) + 8 * v13);
        goto LABEL_5;
      }
    }
    unint64_t v44 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v15 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    }
    v15[2] = v17 + 1;
    v15[v17 + 4] = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    unint64_t v19 = *(void **)v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      *(void *)uint64_t v7 = v19;
    }
    unint64_t v22 = v19[2];
    unint64_t v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
      *(void *)uint64_t v7 = v19;
    }
    void v19[2] = v22 + 1;
    uint64_t v23 = &v19[3 * v22];
    v23[4] = v18;
    v23[5] = v15;
    v23[6] = 0;
    if (a1 >= *(void *)(*(void *)v7 + 16)) {
      goto LABEL_35;
    }
    uint64_t v24 = (void *)(*(void *)v7 + 24 * a1 + 32);
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = (void *)*v24;
    uint64_t v45 = (void *)*v24;
    void *v24 = 0x8000000000000000;
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      goto LABEL_36;
    }
    char v32 = v27;
    if (v26[3] >= v31)
    {
      if (v25)
      {
        unint64_t v35 = v45;
        if ((v27 & 1) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v35 = v45;
        if ((v32 & 1) == 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v25);
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_38;
      }
      unint64_t v28 = v33;
      unint64_t v35 = v45;
      if ((v32 & 1) == 0)
      {
LABEL_27:
        v35[(v28 >> 6) + 8] |= 1 << v28;
        uint64_t v36 = 8 * v28;
        *(void *)(v35[6] + v36) = v5;
        *(void *)(v35[7] + v36) = v44;
        uint64_t v37 = v35[2];
        BOOL v38 = __OFADD__(v37, 1);
        uint64_t v39 = v37 + 1;
        if (v38) {
          goto LABEL_37;
        }
        void v35[2] = v39;
        goto LABEL_4;
      }
    }
    *(void *)(v35[7] + 8 * v28) = v44;
LABEL_4:
    void *v24 = v35;
    swift_bridgeObjectRelease();
    swift_endAccess();
    a1 = v44;
    uint64_t v3 = v41;
LABEL_5:
    if (v42 == ++v4)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;

  uint64_t v39 = *(void *)(a2 + 16);
  if (!v39) {
    return a1;
  }
  uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  BOOL v38 = v3;
  while (1)
  {
    uint64_t v5 = *(void *)(v3 + 8 * v4 + 32);
    uint64_t v6 = *v40;
    uint64_t v7 = *v40 + 32;
    swift_beginAccess();
    if ((a1 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    unint64_t v9 = *(void *)(v8 + 16);
    if (a1 >= v9) {
      goto LABEL_31;
    }
    uint64_t v10 = v8 + 72 * a1;
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v12 = *(void *)(v10 + 64);
    if (*(void *)(v12 + 16))
    {
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v14)
      {
        a1 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
        goto LABEL_5;
      }
    }
    uint64_t v15 = __OFADD__(v11, 1);
    unint64_t v16 = v11 + 1;
    if (v15) {
      goto LABEL_32;
    }
    uint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    unint64_t v17 = *(void **)v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      *(void *)uint64_t v7 = v17;
    }
    unint64_t v20 = v17[2];
    unint64_t v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
      *(void *)uint64_t v7 = v17;
    }
    v17[2] = v20 + 1;
    unint64_t v21 = &v17[9 * v20];
    void v21[4] = v9 + 1;
    void v21[5] = v16;
    v21[6] = a1;
    *((unsigned char *)v21 + 56) = 0;
    v21[8] = v41;
    v21[9] = v5;
    *((unsigned char *)v21 + 80) = 0;
    v21[11] = 0;
    *((unsigned char *)v21 + 96) = 1;
    if (a1 >= *(void *)(*(void *)v7 + 16)) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)v7 + 72 * a1;
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *(void **)(v22 + 64);
    *(void *)(v22 + 64) = 0x8000000000000000;
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    char v27 = v24[2];
    unint64_t v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      goto LABEL_34;
    }
    BOOL v30 = v25;
    if (v24[3] >= v29)
    {
      if (v23)
      {
        unint64_t v33 = v24;
        if ((v25 & 1) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v33 = v24;
        if ((v30 & 1) == 0) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v23);
      uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_36;
      }
      uint64_t v26 = v31;
      unint64_t v33 = v24;
      if ((v30 & 1) == 0)
      {
LABEL_24:
        v33[(v26 >> 6) + 8] |= 1 << v26;
        char v34 = 8 * v26;
        *(void *)(v33[6] + v34) = v5;
        *(void *)(v33[7] + v34) = v9;
        unint64_t v35 = v33[2];
        uint64_t v15 = __OFADD__(v35, 1);
        uint64_t v36 = v35 + 1;
        if (v15) {
          goto LABEL_35;
        }
        v33[2] = v36;
        goto LABEL_4;
      }
    }
    *(void *)(v33[7] + 8 * v26) = v9;
LABEL_4:
    *(void *)(v22 + 64) = v33;
    swift_bridgeObjectRelease();
    swift_endAccess();
    a1 = v9;
    uint64_t v3 = v38;
LABEL_5:
    if (v39 == ++v4)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized E5TransformerLanguageModel.node(forPreviousNode:token:isPrompt:)(unint64_t a1, uint64_t a2)
{
  unint64_t v9 = v3 + 4;
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = v3[4];
  unint64_t v2 = *(void *)(v10 + 16);
  if (v2 <= a1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v5 = 72 * a1;
  uint64_t v11 = v10 + 72 * a1;
  uint64_t v4 = *(void **)(v11 + 40);
  uint64_t v3 = *(void **)(v11 + 64);
  if (v3[2])
  {
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v13) {
      return *(void *)(v3[7] + 8 * v12);
    }
  }
  if (!__OFADD__(v4, 1))
  {
    unint64_t v20 = (char *)v4 + 1;
    unint64_t v6 = v2 + 1;
    uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    uint64_t v4 = (void *)*v9;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v9 = (uint64_t)v4;
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  uint64_t v4 = (void *)result;
  uint64_t *v9 = result;
LABEL_8:
  unint64_t v16 = v4[2];
  unint64_t v15 = v4[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v4);
    uint64_t v4 = (void *)result;
    uint64_t *v9 = result;
  }
  v4[2] = v16 + 1;
  unint64_t v17 = &v4[9 * v16];
  v17[4] = v6;
  void v17[5] = v20;
  v17[6] = a1;
  *((unsigned char *)v17 + 56) = 0;
  v17[8] = v3;
  v17[9] = a2;
  *((unsigned char *)v17 + 80) = 0;
  v17[11] = 0;
  *((unsigned char *)v17 + 96) = 1;
  if (*(void *)(*v9 + 16) > a1)
  {
    uint64_t v18 = *v9 + v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *(void *)(v18 + 64);
    *(void *)(v18 + 64) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v18 + 64) = v21;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v5 = *(void *)(v4 + 16);
    unint64_t v6 = (uint64_t *)(a2 + 32);
    uint64_t v7 = v4 + 32;
    BOOL v8 = __OFADD__(v5, 2);
    while (1)
    {
      while (1)
      {
        uint64_t v10 = *v6++;
        uint64_t v9 = v10;
        if (result >= v5) {
          break;
        }
        if (result < 0) {
          goto LABEL_14;
        }
        uint64_t v11 = *(void *)(v7 + 8 * result);
        if (!*(void *)(v11 + 16)) {
          break;
        }
        unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if ((v13 & 1) == 0) {
          break;
        }
        uint64_t result = *(void *)(*(void *)(v11 + 56) + 16 * v12);
        if (!--v3) {
          return result;
        }
      }
      uint64_t result = v5 + 2;
      if (v8) {
        break;
      }
      if (!--v3) {
        return result;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  Swift::Int v4 = a1[1];
  swift_retain_n();
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_182;
    }
    if (v4)
    {
      swift_retain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    }
    swift_release_n();
    return swift_release();
  }
  uint64_t v127 = a2;
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 >= -1)
  {
    Swift::Int v123 = v4;
    Swift::Int v121 = v5;
    int8x16_t v119 = a1;
    if (v4 >= 2)
    {
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v7;
      uint64_t v120 = v8;
      long long __dst = (char *)(v8 + 32);
      goto LABEL_13;
    }
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
    long long __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v120 = MEMORY[0x263F8EE78];
    if (v4 == 1)
    {
LABEL_13:
      uint64_t v10 = *a1;
      uint64_t v122 = v127 + 32;
      swift_beginAccess();
      uint64_t v11 = v10;
      Swift::Int v12 = 0;
      uint64_t v118 = v10 - 8;
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v13 = v4;
      uint64_t v125 = v10;
      while (1)
      {
        Swift::Int v14 = v12 + 1;
        if (v12 + 1 >= v13)
        {
          uint64_t v16 = v127 + 32;
        }
        else
        {
          unint64_t v15 = *(void *)(v11 + 8 * v12);
          uint64_t v16 = v127 + 32;
          if ((v15 & 0x8000000000000000) != 0) {
            goto LABEL_178;
          }
          unint64_t v17 = *(void *)(*(void *)v122 + 16);
          if (v15 >= v17) {
            goto LABEL_179;
          }
          unint64_t v18 = *(void *)(v11 + 8 * v14);
          if (v18 >= v17) {
            goto LABEL_180;
          }
          uint64_t v19 = *(void *)v122 + 32;
          uint64_t v20 = v19 + 72 * v15;
          uint64_t v21 = *(void *)(v20 + 8);
          uint64_t v22 = v19 + 72 * v18;
          uint64_t v23 = *(void *)(v22 + 8);
          BOOL v24 = v21 < v23;
          if (v21 == v23)
          {
            if (*(unsigned char *)(v20 + 48)) {
              uint64_t v25 = -1;
            }
            else {
              uint64_t v25 = *(void *)(v20 + 40);
            }
            if (*(unsigned char *)(v22 + 48)) {
              uint64_t v26 = -1;
            }
            else {
              uint64_t v26 = *(void *)(v22 + 40);
            }
            BOOL v24 = v25 < v26;
          }
          int v27 = v24;
          Swift::Int v14 = v12 + 2;
          if (v12 + 2 < v13)
          {
            while (1)
            {
              if (v18 >= v17) {
                goto LABEL_160;
              }
              unint64_t v28 = *(void *)(v11 + 8 * v14);
              if (v28 >= v17) {
                break;
              }
              uint64_t v29 = v19 + 72 * v18;
              uint64_t v30 = *(void *)(v29 + 8);
              uint64_t v31 = v19 + 72 * v28;
              uint64_t v32 = *(void *)(v31 + 8);
              BOOL v33 = v30 < v32;
              if (v30 == v32)
              {
                if (*(unsigned char *)(v29 + 48)) {
                  uint64_t v34 = -1;
                }
                else {
                  uint64_t v34 = *(void *)(v29 + 40);
                }
                if (*(unsigned char *)(v31 + 48)) {
                  uint64_t v35 = -1;
                }
                else {
                  uint64_t v35 = *(void *)(v31 + 40);
                }
                BOOL v33 = v34 < v35;
              }
              int v36 = v33;
              if (v27 != v36) {
                goto LABEL_46;
              }
              ++v14;
              unint64_t v18 = v28;
              if (v13 == v14)
              {
                Swift::Int v14 = v13;
                goto LABEL_46;
              }
            }
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
            goto LABEL_173;
          }
LABEL_46:
          if (v27)
          {
            if (v14 < v12) {
              goto LABEL_185;
            }
            if (v12 < v14)
            {
              Swift::Int v37 = v14 - 1;
              Swift::Int v38 = v12;
              do
              {
                if (v38 != v37)
                {
                  if (!v11) {
                    goto LABEL_188;
                  }
                  uint64_t v39 = *(void *)(v11 + 8 * v38);
                  *(void *)(v11 + 8 * v38) = *(void *)(v11 + 8 * v37);
                  *(void *)(v11 + 8 * v37) = v39;
                }
                BOOL v24 = ++v38 < v37--;
              }
              while (v24);
            }
          }
        }
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v12)) {
            goto LABEL_181;
          }
          if (v14 - v12 < v121)
          {
            Swift::Int v40 = v12 + v121;
            if (__OFADD__(v12, v121)) {
              goto LABEL_183;
            }
            if (v40 >= v13) {
              Swift::Int v40 = v13;
            }
            if (v40 < v12) {
              goto LABEL_184;
            }
            if (v14 != v40)
            {
              uint64_t v41 = (unint64_t *)(v118 + 8 * v14);
              do
              {
                unint64_t v42 = *(void *)(v11 + 8 * v14);
                Swift::Int v43 = v12;
                unint64_t v44 = v41;
                do
                {
                  unint64_t v45 = *v44;
                  if ((*v44 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
                    goto LABEL_161;
                  }
                  unint64_t v46 = *(void *)(*(void *)v16 + 16);
                  if (v45 >= v46) {
                    goto LABEL_154;
                  }
                  if (v42 >= v46) {
                    goto LABEL_155;
                  }
                  uint64_t v47 = *(void *)v16 + 32;
                  uint64_t v48 = v47 + 72 * v45;
                  uint64_t v49 = *(void *)(v48 + 8);
                  uint64_t v50 = v47 + 72 * v42;
                  uint64_t v51 = *(void *)(v50 + 8);
                  BOOL v52 = v49 < v51;
                  if (v49 == v51)
                  {
                    if (*(unsigned char *)(v48 + 48)) {
                      uint64_t v53 = -1;
                    }
                    else {
                      uint64_t v53 = *(void *)(v48 + 40);
                    }
                    if (*(unsigned char *)(v50 + 48)) {
                      uint64_t v54 = -1;
                    }
                    else {
                      uint64_t v54 = *(void *)(v50 + 40);
                    }
                    BOOL v52 = v53 < v54;
                  }
                  if (!v52) {
                    break;
                  }
                  if (!v11) {
                    goto LABEL_186;
                  }
                  *unint64_t v44 = v42;
                  v44[1] = v45;
                  --v44;
                  ++v43;
                }
                while (v14 != v43);
                ++v14;
                ++v41;
              }
              while (v14 != v40);
              Swift::Int v14 = v40;
            }
          }
        }
        if (v14 < v12) {
          goto LABEL_177;
        }
        Swift::Int v124 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v56 = *((void *)v9 + 2);
        unint64_t v55 = *((void *)v9 + 3);
        unint64_t v57 = v56 + 1;
        uint64_t v11 = v125;
        if (v56 >= v55 >> 1)
        {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v9);
          uint64_t v11 = v125;
        }
        *((void *)v9 + 2) = v57;
        uint64_t v58 = v9 + 32;
        unint64_t v59 = &v9[16 * v56 + 32];
        *(void *)unint64_t v59 = v12;
        *((void *)v59 + 1) = v124;
        if (v56) {
          break;
        }
        unint64_t v57 = 1;
LABEL_133:
        Swift::Int v13 = v123;
        Swift::Int v12 = v124;
        if (v124 >= v123) {
          goto LABEL_138;
        }
      }
      while (1)
      {
        unint64_t v60 = v57 - 1;
        if (v57 >= 4)
        {
          long long v65 = &v58[16 * v57];
          uint64_t v66 = *((void *)v65 - 8);
          uint64_t v67 = *((void *)v65 - 7);
          BOOL v71 = __OFSUB__(v67, v66);
          uint64_t v68 = v67 - v66;
          if (v71) {
            goto LABEL_162;
          }
          uint64_t v70 = *((void *)v65 - 6);
          uint64_t v69 = *((void *)v65 - 5);
          BOOL v71 = __OFSUB__(v69, v70);
          uint64_t v63 = v69 - v70;
          char v64 = v71;
          if (v71) {
            goto LABEL_163;
          }
          unint64_t v72 = v57 - 2;
          uint64_t v73 = &v58[16 * v57 - 32];
          uint64_t v75 = *(void *)v73;
          uint64_t v74 = *((void *)v73 + 1);
          BOOL v71 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          if (v71) {
            goto LABEL_165;
          }
          BOOL v71 = __OFADD__(v63, v76);
          uint64_t v77 = v63 + v76;
          if (v71) {
            goto LABEL_168;
          }
          if (v77 >= v68)
          {
            uint64_t v95 = &v58[16 * v60];
            uint64_t v97 = *(void *)v95;
            uint64_t v96 = *((void *)v95 + 1);
            BOOL v71 = __OFSUB__(v96, v97);
            uint64_t v98 = v96 - v97;
            if (v71) {
              goto LABEL_172;
            }
            BOOL v88 = v63 < v98;
            goto LABEL_122;
          }
        }
        else
        {
          if (v57 != 3)
          {
            uint64_t v89 = *((void *)v9 + 4);
            uint64_t v90 = *((void *)v9 + 5);
            BOOL v71 = __OFSUB__(v90, v89);
            uint64_t v82 = v90 - v89;
            char v83 = v71;
            goto LABEL_116;
          }
          uint64_t v62 = *((void *)v9 + 4);
          uint64_t v61 = *((void *)v9 + 5);
          BOOL v71 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          char v64 = v71;
        }
        if (v64) {
          goto LABEL_164;
        }
        unint64_t v72 = v57 - 2;
        uint64_t v78 = &v58[16 * v57 - 32];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v81 = __OFSUB__(v79, v80);
        uint64_t v82 = v79 - v80;
        char v83 = v81;
        if (v81) {
          goto LABEL_167;
        }
        uint64_t v84 = &v58[16 * v60];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v71 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v71) {
          goto LABEL_170;
        }
        if (__OFADD__(v82, v87)) {
          goto LABEL_171;
        }
        if (v82 + v87 >= v63)
        {
          BOOL v88 = v63 < v87;
LABEL_122:
          if (v88) {
            unint64_t v60 = v72;
          }
          goto LABEL_124;
        }
LABEL_116:
        if (v83) {
          goto LABEL_166;
        }
        uint64_t v91 = &v58[16 * v60];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v71 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v71) {
          goto LABEL_169;
        }
        if (v94 < v82) {
          goto LABEL_133;
        }
LABEL_124:
        unint64_t v99 = v60 - 1;
        if (v60 - 1 >= v57) {
          goto LABEL_156;
        }
        if (!v11) {
          goto LABEL_187;
        }
        short float v100 = &v58[16 * v99];
        uint64_t v101 = *(void *)v100;
        unint64_t v102 = v60;
        short float v103 = &v58[16 * v60];
        uint64_t v104 = *((void *)v103 + 1);
        float16x8_t v130 = (char *)(v11 + 8 * *(void *)v100);
        uint64_t v105 = (char *)(v11 + 8 * *(void *)v103);
        int32x4_t v128 = (unint64_t *)(v11 + 8 * v104);
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v130, v105, v128, __dst, v127);
        if (v132)
        {
LABEL_135:
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v120 + 16) = 0;
          goto LABEL_150;
        }
        swift_release();
        if (v104 < v101) {
          goto LABEL_157;
        }
        if (v102 > *((void *)v9 + 2)) {
          goto LABEL_158;
        }
        *(void *)short float v100 = v101;
        uint64_t v58 = v9 + 32;
        *(void *)&v9[16 * v99 + 40] = v104;
        unint64_t v106 = *((void *)v9 + 2);
        if (v102 >= v106) {
          goto LABEL_159;
        }
        unint64_t v57 = v106 - 1;
        memmove(v103, v103 + 16, 16 * (v106 - 1 - v102));
        *((void *)v9 + 2) = v106 - 1;
        uint64_t v11 = v125;
        if (v106 <= 2) {
          goto LABEL_133;
        }
      }
    }
    unint64_t v57 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_138:
    if (v57 >= 2)
    {
      uint64_t v107 = *v119;
      *(void *)int32x4_t v129 = *v119;
      while (1)
      {
        unint64_t v108 = v57 - 2;
        if (v57 < 2) {
          break;
        }
        if (!v107) {
          goto LABEL_189;
        }
        uint64_t v109 = v9;
        uint64_t v110 = v9 + 32;
        uint64_t v111 = *(void *)&v9[16 * v108 + 32];
        uint64_t v112 = *(void *)&v110[16 * v57 - 8];
        float16x8_t v131 = (char *)(v107 + 8 * v111);
        uint64_t v113 = (char *)(v107 + 8 * *(void *)&v110[16 * v57 - 16]);
        int8x16_t v114 = (unint64_t *)(v107 + 8 * v112);
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v131, v113, v114, __dst, v127);
        if (v132) {
          goto LABEL_135;
        }
        swift_release();
        if (v112 < v111) {
          goto LABEL_174;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v109);
        }
        if (v108 >= *((void *)v109 + 2)) {
          goto LABEL_175;
        }
        int8x16_t v115 = &v109[16 * v108 + 32];
        *(void *)int8x16_t v115 = v111;
        *((void *)v115 + 1) = v112;
        unint64_t v116 = *((void *)v109 + 2);
        if (v57 > v116) {
          goto LABEL_176;
        }
        uint64_t v9 = v109;
        memmove(&v109[16 * v57 + 16], &v109[16 * v57 + 32], 16 * (v116 - v57));
        *((void *)v109 + 2) = v116 - 1;
        unint64_t v57 = v116 - 1;
        uint64_t v107 = *(void *)v129;
        if (v116 <= 2) {
          goto LABEL_149;
        }
      }
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      swift_release_n();
      __break(1u);
LABEL_187:
      swift_release_n();
      __break(1u);
LABEL_188:
      swift_release_n();
      __break(1u);
LABEL_189:
      swift_release_n();
      __break(1u);
      goto LABEL_190;
    }
LABEL_149:
    swift_bridgeObjectRelease();
    *(void *)(v120 + 16) = 0;
LABEL_150:
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_190:
  swift_release_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  unint64_t *v117;
  char *v118;
  unint64_t v119;
  uint64_t result;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  Swift::Int v124;
  uint64_t v125;
  Swift::Int v126;
  Swift::Int v127;
  uint64_t v128;
  char *__dst;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;

  Swift::Int v5 = a1[1];
  swift_retain_n();
  uint64_t v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_180;
    }
    if (v5)
    {
      swift_retain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
    }
    swift_release_n();
    return swift_release_n();
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 >= -1)
  {
    float16x8_t v130 = a2;
    int32x4_t v126 = v5;
    Swift::Int v124 = v6;
    float16x8_t v133 = v2;
    uint64_t v122 = a1;
    if (v5 >= 2)
    {
      uint64_t v8 = v7 >> 1;
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = v8;
      Swift::Int v123 = v9;
      long long __dst = (char *)(v9 + 32);
      goto LABEL_13;
    }
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
    long long __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    Swift::Int v123 = MEMORY[0x263F8EE78];
    if (v5 == 1)
    {
LABEL_13:
      uint64_t v11 = *a1;
      uint64_t v125 = a2 + 32;
      swift_beginAccess();
      Swift::Int v12 = 0;
      Swift::Int v121 = v11 - 8;
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v13 = v126;
      int32x4_t v128 = v11;
      while (1)
      {
        Swift::Int v14 = v12 + 1;
        if (v12 + 1 >= v13)
        {
          uint64_t v16 = v125;
        }
        else
        {
          unint64_t v15 = *(void *)(v11 + 8 * v14);
          uint64_t v16 = v125;
          if ((v15 & 0x8000000000000000) != 0) {
            goto LABEL_176;
          }
          unint64_t v17 = *(void *)(*(void *)v125 + 16);
          if (v15 >= v17) {
            goto LABEL_177;
          }
          unint64_t v18 = *(void *)(v11 + 8 * v12);
          if (v18 >= v17) {
            goto LABEL_178;
          }
          uint64_t v19 = *(void *)v125 + 32;
          uint64_t v20 = v19 + 72 * v15;
          uint64_t v21 = *(void *)(v20 + 8);
          uint64_t v22 = v19 + 72 * v18;
          uint64_t v23 = *(void *)(v22 + 8);
          BOOL v24 = v21 < v23;
          if (v21 == v23)
          {
            if (*(unsigned char *)(v20 + 48)) {
              uint64_t v25 = -1;
            }
            else {
              uint64_t v25 = *(void *)(v20 + 40);
            }
            if (*(unsigned char *)(v22 + 48)) {
              uint64_t v26 = -1;
            }
            else {
              uint64_t v26 = *(void *)(v22 + 40);
            }
            BOOL v24 = v25 < v26;
          }
          int v27 = v24;
          Swift::Int v14 = v12 + 2;
          if (v12 + 2 < v13)
          {
            while (1)
            {
              unint64_t v28 = *(void *)(v11 + 8 * v14);
              if (v28 >= v17) {
                goto LABEL_158;
              }
              if (v15 >= v17) {
                break;
              }
              uint64_t v29 = v19 + 72 * v28;
              uint64_t v30 = *(void *)(v29 + 8);
              uint64_t v31 = v19 + 72 * v15;
              uint64_t v32 = *(void *)(v31 + 8);
              BOOL v33 = v30 < v32;
              if (v30 == v32)
              {
                if (*(unsigned char *)(v29 + 48)) {
                  uint64_t v34 = -1;
                }
                else {
                  uint64_t v34 = *(void *)(v29 + 40);
                }
                if (*(unsigned char *)(v31 + 48)) {
                  uint64_t v35 = -1;
                }
                else {
                  uint64_t v35 = *(void *)(v31 + 40);
                }
                BOOL v33 = v34 < v35;
              }
              int v36 = v33;
              if (v27 != v36) {
                goto LABEL_46;
              }
              ++v14;
              unint64_t v15 = v28;
              if (v13 == v14)
              {
                Swift::Int v14 = v13;
                goto LABEL_46;
              }
            }
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
            goto LABEL_171;
          }
LABEL_46:
          if (v27)
          {
            if (v14 < v12) {
              goto LABEL_183;
            }
            if (v12 < v14)
            {
              Swift::Int v37 = v14 - 1;
              Swift::Int v38 = v12;
              do
              {
                if (v38 != v37)
                {
                  if (!v11) {
                    goto LABEL_186;
                  }
                  uint64_t v39 = *(void *)(v11 + 8 * v38);
                  *(void *)(v11 + 8 * v38) = *(void *)(v11 + 8 * v37);
                  *(void *)(v11 + 8 * v37) = v39;
                }
                BOOL v24 = ++v38 < v37--;
              }
              while (v24);
            }
          }
        }
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v12)) {
            goto LABEL_179;
          }
          if (v14 - v12 < v124)
          {
            Swift::Int v40 = v12 + v124;
            if (__OFADD__(v12, v124)) {
              goto LABEL_181;
            }
            if (v40 >= v13) {
              Swift::Int v40 = v13;
            }
            if (v40 < v12) {
              goto LABEL_182;
            }
            if (v14 != v40)
            {
              uint64_t v41 = (unint64_t *)(v121 + 8 * v14);
              do
              {
                unint64_t v42 = *(void *)(v11 + 8 * v14);
                Swift::Int v43 = 72 * v42;
                unint64_t v44 = v12;
                unint64_t v45 = v41;
                do
                {
                  if ((v42 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    goto LABEL_159;
                  }
                  unint64_t v46 = *(void *)(*(void *)v16 + 16);
                  if (v42 >= v46) {
                    goto LABEL_152;
                  }
                  uint64_t v47 = *v45;
                  if (*v45 >= v46) {
                    goto LABEL_153;
                  }
                  uint64_t v48 = *(void *)v16 + 32;
                  uint64_t v49 = v48 + v43;
                  uint64_t v50 = *(void *)(v48 + v43 + 8);
                  uint64_t v51 = v48 + 72 * v47;
                  BOOL v52 = *(void *)(v51 + 8);
                  uint64_t v53 = v50 < v52;
                  if (v50 == v52)
                  {
                    if (*(unsigned char *)(v49 + 48)) {
                      uint64_t v54 = -1;
                    }
                    else {
                      uint64_t v54 = *(void *)(v49 + 40);
                    }
                    if (*(unsigned char *)(v51 + 48)) {
                      unint64_t v55 = -1;
                    }
                    else {
                      unint64_t v55 = *(void *)(v51 + 40);
                    }
                    uint64_t v53 = v54 < v55;
                  }
                  if (!v53) {
                    break;
                  }
                  if (!v11) {
                    goto LABEL_184;
                  }
                  *unint64_t v45 = v42;
                  v45[1] = v47;
                  --v45;
                  ++v44;
                }
                while (v14 != v44);
                ++v14;
                ++v41;
              }
              while (v14 != v40);
              Swift::Int v14 = v40;
            }
          }
        }
        if (v14 < v12) {
          goto LABEL_175;
        }
        uint64_t v127 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v57 = *((void *)v10 + 2);
        unint64_t v56 = *((void *)v10 + 3);
        uint64_t v58 = v57 + 1;
        if (v57 >= v56 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v58;
        unint64_t v59 = v10 + 32;
        unint64_t v60 = &v10[16 * v57 + 32];
        *(void *)unint64_t v60 = v12;
        *((void *)v60 + 1) = v127;
        if (v57) {
          break;
        }
        uint64_t v58 = 1;
LABEL_133:
        Swift::Int v13 = v126;
        Swift::Int v12 = v127;
        if (v127 >= v126) {
          goto LABEL_137;
        }
      }
      while (1)
      {
        uint64_t v61 = v58 - 1;
        if (v58 >= 4)
        {
          uint64_t v66 = &v59[16 * v58];
          uint64_t v67 = *((void *)v66 - 8);
          uint64_t v68 = *((void *)v66 - 7);
          unint64_t v72 = __OFSUB__(v68, v67);
          uint64_t v69 = v68 - v67;
          if (v72) {
            goto LABEL_160;
          }
          BOOL v71 = *((void *)v66 - 6);
          uint64_t v70 = *((void *)v66 - 5);
          unint64_t v72 = __OFSUB__(v70, v71);
          char v64 = v70 - v71;
          long long v65 = v72;
          if (v72) {
            goto LABEL_161;
          }
          uint64_t v73 = v58 - 2;
          uint64_t v74 = &v59[16 * v58 - 32];
          uint64_t v76 = *(void *)v74;
          uint64_t v75 = *((void *)v74 + 1);
          unint64_t v72 = __OFSUB__(v75, v76);
          uint64_t v77 = v75 - v76;
          if (v72) {
            goto LABEL_163;
          }
          unint64_t v72 = __OFADD__(v64, v77);
          uint64_t v78 = v64 + v77;
          if (v72) {
            goto LABEL_166;
          }
          if (v78 >= v69)
          {
            uint64_t v96 = &v59[16 * v61];
            uint64_t v98 = *(void *)v96;
            uint64_t v97 = *((void *)v96 + 1);
            unint64_t v72 = __OFSUB__(v97, v98);
            unint64_t v99 = v97 - v98;
            if (v72) {
              goto LABEL_170;
            }
            uint64_t v89 = v64 < v99;
            goto LABEL_122;
          }
        }
        else
        {
          if (v58 != 3)
          {
            uint64_t v90 = *((void *)v10 + 4);
            uint64_t v91 = *((void *)v10 + 5);
            unint64_t v72 = __OFSUB__(v91, v90);
            char v83 = v91 - v90;
            uint64_t v84 = v72;
            goto LABEL_116;
          }
          uint64_t v63 = *((void *)v10 + 4);
          uint64_t v62 = *((void *)v10 + 5);
          unint64_t v72 = __OFSUB__(v62, v63);
          char v64 = v62 - v63;
          long long v65 = v72;
        }
        if (v65) {
          goto LABEL_162;
        }
        uint64_t v73 = v58 - 2;
        uint64_t v79 = &v59[16 * v58 - 32];
        BOOL v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        uint64_t v82 = __OFSUB__(v80, v81);
        char v83 = v80 - v81;
        uint64_t v84 = v82;
        if (v82) {
          goto LABEL_165;
        }
        uint64_t v85 = &v59[16 * v61];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        unint64_t v72 = __OFSUB__(v86, v87);
        BOOL v88 = v86 - v87;
        if (v72) {
          goto LABEL_168;
        }
        if (__OFADD__(v83, v88)) {
          goto LABEL_169;
        }
        if (v83 + v88 >= v64)
        {
          uint64_t v89 = v64 < v88;
LABEL_122:
          if (v89) {
            uint64_t v61 = v73;
          }
          goto LABEL_124;
        }
LABEL_116:
        if (v84) {
          goto LABEL_164;
        }
        uint64_t v92 = &v59[16 * v61];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        unint64_t v72 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v72) {
          goto LABEL_167;
        }
        if (v95 < v83) {
          goto LABEL_133;
        }
LABEL_124:
        short float v100 = v61 - 1;
        if (v61 - 1 >= v58) {
          goto LABEL_154;
        }
        if (!v11) {
          goto LABEL_185;
        }
        uint64_t v101 = &v59[16 * v100];
        unint64_t v102 = *(void *)v101;
        short float v103 = v61;
        uint64_t v104 = &v59[16 * v61];
        uint64_t v105 = *((void *)v104 + 1);
        unint64_t v106 = (char *)(v11 + 8 * *(void *)v101);
        float16x8_t v131 = (char *)(v11 + 8 * *(void *)v104);
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v106, v131, (unint64_t *)(v11 + 8 * v105), __dst, v130);
        if (v133) {
          goto LABEL_148;
        }
        if (v105 < v102) {
          goto LABEL_155;
        }
        if (v103 > *((void *)v10 + 2)) {
          goto LABEL_156;
        }
        uint64_t v107 = v103;
        *(void *)uint64_t v101 = v102;
        unint64_t v59 = v10 + 32;
        *(void *)&v10[16 * v100 + 40] = v105;
        unint64_t v108 = *((void *)v10 + 2);
        if (v103 >= v108) {
          goto LABEL_157;
        }
        float16x8_t v133 = 0;
        uint64_t v58 = v108 - 1;
        memmove(v104, v104 + 16, 16 * (v108 - 1 - v107));
        *((void *)v10 + 2) = v108 - 1;
        uint64_t v11 = v128;
        if (v108 <= 2) {
          goto LABEL_133;
        }
      }
    }
    uint64_t v58 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_137:
    if (v58 >= 2)
    {
      uint64_t v109 = (char *)*v122;
      uint64_t v132 = (char *)*v122;
      while (1)
      {
        uint64_t v110 = v58 - 2;
        if (v58 < 2) {
          break;
        }
        if (!v109) {
          goto LABEL_187;
        }
        uint64_t v111 = v10;
        uint64_t v112 = v10 + 32;
        uint64_t v113 = *(void *)&v10[16 * v110 + 32];
        int8x16_t v114 = *(void *)&v112[16 * v58 - 8];
        int8x16_t v115 = &v109[8 * v113];
        unint64_t v116 = &v109[8 * *(void *)&v112[16 * v58 - 16]];
        int8x16_t v117 = (unint64_t *)&v109[8 * v114];
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v115, v116, v117, __dst, v130);
        if (v133) {
          goto LABEL_148;
        }
        if (v114 < v113) {
          goto LABEL_172;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
        }
        if (v110 >= *((void *)v111 + 2)) {
          goto LABEL_173;
        }
        uint64_t v118 = &v111[16 * v110 + 32];
        *(void *)uint64_t v118 = v113;
        *((void *)v118 + 1) = v114;
        int8x16_t v119 = *((void *)v111 + 2);
        if (v58 > v119) {
          goto LABEL_174;
        }
        uint64_t v10 = v111;
        memmove(&v111[16 * v58 + 16], &v111[16 * v58 + 32], 16 * (v119 - v58));
        *((void *)v111 + 2) = v119 - 1;
        uint64_t v58 = v119 - 1;
        uint64_t v109 = v132;
        if (v119 <= 2) {
          goto LABEL_148;
        }
      }
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      swift_release_n();
      __break(1u);
LABEL_185:
      swift_release_n();
      __break(1u);
LABEL_186:
      swift_release_n();
      __break(1u);
LABEL_187:
      swift_release_n();
      __break(1u);
      goto LABEL_188;
    }
LABEL_148:
    swift_bridgeObjectRelease();
    *(void *)(v123 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
LABEL_188:
  swift_release_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v51 = type metadata accessor for IndexSet.Index();
  uint64_t v3 = *(void *)(v51 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v51, v4);
  uint64_t v49 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)v46 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  MEMORY[0x270FA5388](v10 - 8, v11);
  Swift::Int v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>.Iterator);
  uint64_t v15 = v14 - 8;
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17, v20);
  uint64_t v22 = (char *)v46 - v21;
  outlined init with copy of ReversedCollection<IndexSet>(a1, (uint64_t)v13);
  uint64_t v23 = type metadata accessor for IndexSet();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v19, v13, v23);
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v23);
  uint64_t v25 = v22;
  uint64_t v26 = &v19[*(int *)(v15 + 44)];
  int v27 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  uint64_t v48 = v9;
  v27(v26, v9, v51);
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v19, (uint64_t)v22, &demangling cache variable for type metadata for ReversedCollection<IndexSet>.Iterator);
  unint64_t v28 = &v22[*(int *)(v15 + 44)];
  BOOL v52 = (void *)(v54 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v50 = v3 + 16;
  v46[1] = v3 + 8;
  uint64_t v47 = v29;
  uint64_t v30 = v51;
  uint64_t v31 = (void (**)(char *, uint64_t))(v3 + 8);
  while (1)
  {
    uint64_t v32 = v48;
    v47(v48, v28, v30);
    BOOL v33 = v49;
    dispatch thunk of Collection.startIndex.getter();
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x263F07948]);
    LODWORD(v54) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v34 = (uint64_t)v25;
    uint64_t v35 = *v31;
    (*v31)(v33, v30);
    v35(v32, v30);
    if (v54) {
      return outlined destroy of DataStreamState?(v34, &demangling cache variable for type metadata for ReversedCollection<IndexSet>.Iterator);
    }
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    uint64_t v36 = v34;
    Swift::Int v37 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    unint64_t v39 = *v38;
    v37(v53, 0);
    Swift::Int v40 = (void **)v52;
    swift_beginAccess();
    uint64_t v41 = *v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
    }
    unint64_t v42 = v41[2];
    if (v39 >= v42) {
      break;
    }
    unint64_t v43 = v42 - 1;
    uint64_t v44 = v42 - 1 - v39;
    if (v44 < 0) {
      goto LABEL_10;
    }
    memmove(&v41[v39 + 4], &v41[v39 + 5], 8 * v44);
    int v41[2] = v43;
    void *v52 = v41;
    swift_endAccess();
    uint64_t v25 = (char *)v36;
  }
  __break(1u);
LABEL_10:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_release();
  *a1 = v4;
  return swift_release_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  uint64_t v4 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_release();
  *a1 = v4;
  return swift_release_n();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de85Inference26E5TransformerLanguageModelC16nextTokensLogits9treeNodes10presamplerSayAA15gh5_pGSgt34SiG_AA0N10Presampler_pSgtYaKFAaG_pW5XEfU_SayAgH_pGAFTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v28 = *(void *)(a3 + 32);
    uint64_t v29 = a1 + 32;
    uint64_t v25 = v3;
    uint64_t v26 = a2 + 32;
    uint64_t v5 = v33;
    uint64_t v12 = v10 - 1;
    uint64_t v13 = a3 + 40;
    unint64_t v27 = *(void *)(a2 + 16);
    while (1)
    {
      uint64_t v14 = *(void *)(v29 + 8 * v11);
      if (v28 != v14) {
        break;
      }
      unint64_t v15 = 0;
LABEL_9:
      if (v15 >= v27) {
        goto LABEL_15;
      }
      outlined init with copy of DeterministicLanguageModelProtocol(v26 + 40 * v15, (uint64_t)v30);
      uint64_t v33 = v5;
      unint64_t v18 = *(void *)(v5 + 16);
      unint64_t v17 = *(void *)(v5 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      ++v11;
      uint64_t v19 = v31;
      uint64_t v20 = v32;
      uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
      MEMORY[0x270FA5388](v21, v21);
      uint64_t v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v23);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, (uint64_t)v23, &v33, v19, v20);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      uint64_t v5 = v33;
      if (v11 == v4) {
        return v5;
      }
    }
    unint64_t v15 = 0;
    while (v12 != v15)
    {
      uint64_t v16 = *(void *)(v13 + 8 * v15++);
      if (v16 == v14) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    uint64_t v8 = *a4;
    uint64_t v9 = a5 + 32;
    uint64_t v10 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t result = swift_beginAccess();
    unint64_t v11 = *(void *)(v8 + 8 * v5);
    uint64_t v12 = v7;
    uint64_t v13 = (unint64_t *)v10;
    while (1)
    {
      unint64_t v14 = *v13;
      if ((*v13 & 0x8000000000000000) != 0) {
        break;
      }
      unint64_t v15 = *(void *)(*(void *)v9 + 16);
      if (v14 >= v15) {
        goto LABEL_23;
      }
      if (v11 >= v15) {
        goto LABEL_24;
      }
      uint64_t v16 = *(void *)v9 + 32;
      uint64_t v17 = v16 + 72 * v14;
      uint64_t v18 = *(void *)(v17 + 8);
      uint64_t v19 = v16 + 72 * v11;
      uint64_t v20 = *(void *)(v19 + 8);
      BOOL v21 = v18 < v20;
      if (v18 == v20)
      {
        if (*(unsigned char *)(v17 + 48)) {
          uint64_t v22 = -1;
        }
        else {
          uint64_t v22 = *(void *)(v17 + 40);
        }
        if (*(unsigned char *)(v19 + 48)) {
          uint64_t v23 = -1;
        }
        else {
          uint64_t v23 = *(void *)(v19 + 40);
        }
        BOOL v21 = v22 < v23;
      }
      if (v21)
      {
        if (!v8) {
          goto LABEL_25;
        }
        unint64_t *v13 = v11;
        v13[1] = v14;
        --v13;
        if (v5 != ++v12) {
          continue;
        }
      }
      ++v5;
      v10 += 8;
      if (v5 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 32;
  swift_retain();
  unint64_t result = swift_beginAccess();
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  while ((a1 & 0x8000000000000000) == 0)
  {
    if (a1 >= *(void *)(*(void *)v5 + 16)) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)v5 + 72 * a1;
    unint64_t v9 = *(void *)(v8 + 48);
    int v10 = *(unsigned __int8 *)(v8 + 56);
    if (*(void *)(a3 + 16))
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if (v11)
      {
        uint64_t v12 = *(void *)(*(void *)(a3 + 56) + 8 * result);
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          uint64_t v7 = (void *)result;
        }
        unint64_t v14 = v7[2];
        unint64_t v13 = v7[3];
        if (v14 >= v13 >> 1)
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v7);
          uint64_t v7 = (void *)result;
        }
        uint64_t v7[2] = v14 + 1;
        v7[v14 + 4] = v12;
      }
    }
    a1 = v9;
    if (v10)
    {
      swift_release();
      return (unint64_t)v7;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t outlined release of E5TransformerLanguageModel.PreviousNodeIterator(uint64_t a1)
{
  return a1;
}

uint64_t ObjC metadata update function for E5TransformerLanguageModel()
{
  return type metadata accessor for E5TransformerLanguageModel();
}

uint64_t type metadata accessor for E5TransformerLanguageModel()
{
  uint64_t result = type metadata singleton initialization cache for E5TransformerLanguageModel;
  if (!type metadata singleton initialization cache for E5TransformerLanguageModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for E5TransformerLanguageModel()
{
  uint64_t result = type metadata accessor for ContinuousClock();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for E5TransformerLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for E5TransformerLanguageModel);
}

uint64_t outlined copy of MetadataSpecialToken(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t partial apply for closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  void *v8 = v1;
  v8[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(v2, v3, v4, v5, v7, v6);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t result = swift_beginAccess();
    uint64_t v6 = 0;
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v8 = *(void *)(a1 + 8 * v6 + 32);
      if ((v8 & 0x8000000000000000) != 0) {
        break;
      }
      if (v8 >= *(void *)(*(void *)v4 + 16)) {
        goto LABEL_16;
      }
      uint64_t v9 = *(void *)v4 + 72 * v8;
      if ((*(unsigned char *)(v9 + 80) & 1) == 0)
      {
        uint64_t v10 = *(void *)(v9 + 72);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          uint64_t v7 = (void *)result;
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
          uint64_t v7 = (void *)result;
        }
        uint64_t v7[2] = v12 + 1;
        v7[v12 + 4] = v10;
      }
      if (v2 == ++v6)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t partial apply for closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t a1)
{
  return closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t type metadata accessor for TGIE5AdapterConfigurationObjC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of ReversedCollection<IndexSet>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: Int, value: LogitCollection)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional __swiftcall GenerationSchema.extractPrefixes()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GenerationSchema.StringConstraint();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2, v3);
  unint64_t v39 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v6);
  unint64_t v8 = (char *)&v39 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enumerator: [String]?, constraints: GenerationSchema.StringConstraint?));
  MEMORY[0x270FA5388](v9, v10);
  unint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for GenerationSchema();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  uint64_t v20 = MEMORY[0x270FA5388](v18 - 8, v19);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v23);
  uint64_t v25 = (char *)&v39 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v1, v13);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v17, v13) == *MEMORY[0x263F40C38])
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
    uint64_t v26 = swift_projectBox();
    uint64_t v27 = *(int *)(v9 + 48);
    uint64_t v28 = (uint64_t)&v12[v27];
    outlined init with copy of GenerationSchema.StringConstraint?(v26 + v27, (uint64_t)&v12[v27]);
    outlined init with take of GenerationSchema.StringConstraint?(v28, (uint64_t)v25);
    swift_release();
    outlined init with take of GenerationSchema.StringConstraint?((uint64_t)v25, (uint64_t)v22);
    uint64_t v29 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v22, 1, v2) == 1)
    {
      outlined destroy of GenerationSchema.StringConstraint?((uint64_t)v22);
    }
    else
    {
      Swift::Int v37 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v37(v8, v22, v2);
      Swift::Int v38 = v39;
      v37(v39, v8, v2);
      if ((*(unsigned int (**)(char *, uint64_t))(v29 + 88))(v38, v2) == *MEMORY[0x263F40BF8])
      {
        (*(void (**)(char *, uint64_t))(v29 + 96))(v38, v2);
        uint64_t v35 = *(void **)v38;
        uint64_t v36 = (void *)*((void *)v38 + 1);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Log.device);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_25FA51000, v31, v32, "Unsupported Schema sent. Ignoring", v33, 2u);
    MEMORY[0x261206F80](v33, -1, -1);
  }

  uint64_t v35 = 0;
  uint64_t v36 = 0;
LABEL_13:
  result.value.illegal._rawValue = v36;
  result.value.legal._rawValue = v35;
  result.is_nil = v34;
  return result;
}

uint64_t outlined init with copy of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GenerationSchema.StringConstraint?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Sequence.reversed()(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)specialized _copySequenceToContiguousArray<A>(_:)(a1, a2);
  unint64_t v3 = v2[2];
  uint64_t result = swift_release();
  if (v3 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v3 >> 1;
  for (unint64_t i = v3 + 3; ; --i)
  {
    if (v5 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v8 = v2[2];
    if (v5 >= v8) {
      break;
    }
    if (i - 4 >= v8) {
      goto LABEL_12;
    }
    uint64_t v9 = v2[v5 + 4];
    uint64_t v10 = v2[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v2 = (void *)result;
    }
    v2[v5 + 4] = v10;
    v2[i] = v9;
LABEL_5:
    if (v6 == ++v5) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = v1[2];
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = v1[v3 + 4];
    uint64_t v8 = v1[i];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = (void *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t GrammarGuidedLanguageModel.startNode.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t GrammarGuidedLanguageModel.startNode.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GrammarGuidedLanguageModel.startNode.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t GrammarGuidedLanguageModel.__allocating_init(constraints:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  uint64_t v3 = v2 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints;
  uint64_t v4 = type metadata accessor for GuidedGenerationConstraints();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(_WORD *)(v6 + 48) = 257;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = 1;
  *(void *)(v6 + 72) = v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(void *)(v2 + 24) = v6;
  return v2;
}

uint64_t GrammarGuidedLanguageModel.init(constraints:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  uint64_t v3 = v1 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints;
  uint64_t v4 = type metadata accessor for GuidedGenerationConstraints();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(_WORD *)(v6 + 48) = 257;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 64) = 1;
  *(void *)(v6 + 72) = v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(void *)(v1 + 24) = v6;
  return v1;
}

Swift::Int __swiftcall GrammarGuidedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v3 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      Swift::Int v6 = *(void *)(v3 + 8 * i + 32);
      forPreviousNode = GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(forPreviousNode, v6, 0);
    }
    swift_bridgeObjectRelease();
  }
  return forPreviousNode;
}

Swift::Int __swiftcall GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  if (isPrompt) {
    return forPreviousNode;
  }
  uint64_t v8 = (void **)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 24);
  Swift::Int v6 = *(void *)(v9 + 16);
  if (v6 > forPreviousNode)
  {
    if ((forPreviousNode & 0x8000000000000000) == 0)
    {
      uint64_t v10 = *(void *)(v9 + 48 * forPreviousNode + 72);
      if (*(void *)(v10 + 16))
      {
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(token);
        if (v12) {
          return *(void *)(*(void *)(v10 + 56) + 8 * v11);
        }
      }
      swift_beginAccess();
      uint64_t v17 = *v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char *v8 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        char *v8 = v17;
      }
      if (v17[2] <= (unint64_t)forPreviousNode)
      {
        __break(1u);
      }
      else
      {
        uint64_t v19 = &v17[6 * forPreviousNode];
        char v20 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v31 = v19[9];
        v19[9] = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, token, v20);
        v19[9] = v31;
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v17 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        swift_beginAccess();
        uint64_t v4 = *v8;
        char v21 = swift_isUniquelyReferenced_nonNull_native();
        char *v8 = v4;
        if (v21)
        {
LABEL_16:
          unint64_t v22 = v4[2];
          unint64_t v23 = v4[3];
          unint64_t v24 = v22 + 1;
          if (v22 >= v23 >> 1)
          {
            unint64_t v30 = v22 + 1;
            uint64_t v27 = v4;
            unint64_t v28 = v4[2];
            uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v22 + 1, 1, v27);
            unint64_t v22 = v28;
            unint64_t v24 = v30;
            uint64_t v4 = v29;
            char *v8 = v29;
          }
          v4[2] = v24;
          uint64_t v25 = &v4[6 * v22];
          void v25[4] = v6;
          v25[5] = forPreviousNode;
          *((_WORD *)v25 + 24) = 0;
          v25[7] = token;
          *((unsigned char *)v25 + 64) = 0;
          v25[9] = v17;
          swift_endAccess();
          return v6;
        }
      }
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      char *v8 = v4;
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (one-time initialization token for guided != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.guided);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v14, v15, "Unable to find node for token %ld. This should not happen", v16, 0xCu);
    MEMORY[0x261206F80](v16, -1, -1);
  }

  return forPreviousNode;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GrammarGuidedLanguageModel.allNextTokensPossiblyDeterministic(nodes:)(Swift::OpaquePointer nodes)
{
  uint64_t v52 = *((void *)nodes._rawValue + 2);
  if (v52)
  {
    uint64_t v2 = v1 + 24;
    uint64_t v53 = (char *)nodes._rawValue + 32;
    swift_bridgeObjectRetain();
    LOBYTE(v3) = swift_beginAccess();
    uint64_t v4 = 0;
    uint64_t v56 = v1 + 24;
    while (2)
    {
      unint64_t v5 = *(void *)&v53[8 * v4];
      if ((int64_t)v5 >= *(void *)(*(void *)v2 + 16)) {
        goto LABEL_85;
      }
      uint64_t v54 = v4;
      LOBYTE(v3) = swift_retain_n();
      if ((v5 & 0x8000000000000000) != 0)
      {
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      uint64_t v6 = 0;
      uint64_t v55 = v54 + 1;
      unint64_t v7 = (void *)MEMORY[0x263F8EE78];
      uint64_t v8 = (unint64_t *)(MEMORY[0x263F8EE78] + 32);
      while (1)
      {
        if (v5 >= *(void *)(*(void *)v2 + 16))
        {
          __break(1u);
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        uint64_t v9 = *(void *)v2 + 48 * v5;
        unint64_t v10 = *(void *)(v9 + 40);
        int v11 = *(unsigned __int8 *)(v9 + 48);
        if (!v6)
        {
          unint64_t v12 = v7[3];
          if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_82;
          }
          int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          if (v13 <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v13;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          os_log_type_t v15 = (void *)swift_allocObject();
          int64_t v16 = _swift_stdlib_malloc_size(v15);
          uint64_t v17 = v16 - 32;
          if (v16 < 32) {
            uint64_t v17 = v16 - 25;
          }
          uint64_t v18 = v17 >> 3;
          v15[2] = v14;
          void v15[3] = 2 * (v17 >> 3);
          unint64_t v19 = (unint64_t)(v15 + 4);
          uint64_t v20 = v7[3] >> 1;
          if (v7[2])
          {
            char v21 = v7 + 4;
            if (v15 != v7 || v19 >= (unint64_t)v21 + 8 * v20) {
              memmove(v15 + 4, v21, 8 * v20);
            }
            uint64_t v7[2] = 0;
          }
          uint64_t v8 = (unint64_t *)(v19 + 8 * v20);
          uint64_t v6 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
          LOBYTE(v3) = swift_release();
          unint64_t v7 = v15;
          uint64_t v2 = v56;
        }
        if (__OFSUB__(v6--, 1)) {
          goto LABEL_74;
        }
        unint64_t *v8 = v5;
        if (v11) {
          break;
        }
        ++v8;
        unint64_t v5 = v10;
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_75;
        }
      }
      LOBYTE(v3) = swift_release();
      unint64_t v23 = v7[3];
      if (v23 >= 2)
      {
        unint64_t v25 = v23 >> 1;
        unint64_t v24 = v25 - v6;
        if (__OFSUB__(v25, v6)) {
          goto LABEL_86;
        }
        uint64_t v7[2] = v24;
      }
      else
      {
        unint64_t v24 = v7[2];
      }
      LOBYTE(v3) = swift_release();
      if (v24 >= 2)
      {
        unint64_t v41 = 0;
        while (1)
        {
          unint64_t v42 = v41 + 1;
          unint64_t v43 = v24 - (v41 + 1);
          if (__OFSUB__(v24, v41 + 1)) {
            break;
          }
          if (v41 != v43)
          {
            unint64_t v44 = v7[2];
            if (v41 >= v44) {
              goto LABEL_83;
            }
            if (v43 >= v44) {
              goto LABEL_84;
            }
            uint64_t v45 = v7[v41 + 4];
            uint64_t v46 = v7[v43 + 4];
            LOBYTE(v3) = swift_isUniquelyReferenced_nonNull_native();
            if ((v3 & 1) == 0)
            {
              uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
              unint64_t v7 = v3;
            }
            v7[v41 + 4] = v46;
            v7[v43 + 4] = v45;
            uint64_t v2 = v56;
          }
          ++v41;
          if (v24 >> 1 == v42) {
            goto LABEL_29;
          }
        }
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        return (char)v3;
      }
LABEL_29:
      unint64_t v26 = v7[2];
      LOBYTE(v3) = swift_retain();
      unint64_t v27 = 0;
      uint64_t v28 = MEMORY[0x263F8EE78];
LABEL_30:
      if (v27 <= v26) {
        unint64_t v29 = v26;
      }
      else {
        unint64_t v29 = v27;
      }
      while (v26 != v27)
      {
        if (v29 == v27) {
          goto LABEL_76;
        }
        unint64_t v30 = v7[v27 + 4];
        if ((v30 & 0x8000000000000000) != 0) {
          goto LABEL_77;
        }
        if (v30 >= *(void *)(*(void *)v2 + 16)) {
          goto LABEL_78;
        }
        ++v27;
        if ((*(unsigned char *)(*(void *)v2 + 48 * v30 + 49) & 1) == 0)
        {
          LOBYTE(v3) = swift_isUniquelyReferenced_nonNull_native();
          if ((v3 & 1) == 0) {
            LOBYTE(v3) = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
          }
          unint64_t v32 = *(void *)(v28 + 16);
          unint64_t v31 = *(void *)(v28 + 24);
          if (v32 >= v31 >> 1) {
            LOBYTE(v3) = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          }
          *(void *)(v28 + 16) = v32 + 1;
          *(void *)(v28 + 8 * v32 + 32) = v30;
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v33 = *(void *)(v28 + 16);
      if (v33)
      {
        swift_retain();
        LOBYTE(v3) = swift_retain();
        uint64_t v34 = 0;
        uint64_t v35 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          unint64_t v36 = *(void *)(v28 + 8 * v34 + 32);
          if ((v36 & 0x8000000000000000) != 0) {
            break;
          }
          if (v36 >= *(void *)(*(void *)v2 + 16)) {
            goto LABEL_80;
          }
          uint64_t v37 = *(void *)v2 + 48 * v36;
          if ((*(unsigned char *)(v37 + 64) & 1) == 0)
          {
            uint64_t v38 = *(void *)(v37 + 56);
            LOBYTE(v3) = swift_isUniquelyReferenced_nonNull_native();
            if ((v3 & 1) == 0)
            {
              uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
              uint64_t v35 = v3;
            }
            unint64_t v40 = v35[2];
            unint64_t v39 = v35[3];
            if (v40 >= v39 >> 1)
            {
              uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v35);
              uint64_t v35 = v3;
            }
            void v35[2] = v40 + 1;
            v35[v40 + 4] = v38;
          }
          if (v33 == ++v34)
          {
            swift_release();
            swift_release();
            goto LABEL_65;
          }
        }
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      uint64_t v35 = (void *)MEMORY[0x263F8EE78];
LABEL_65:
      swift_release();
      Swift::Bool v47 = GuidedGenerationConstraints.possiblyDeterministicTokens(follow:)((Swift::OpaquePointer)v35);
      if (v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      Swift::Bool v49 = v47;
      LOBYTE(v3) = swift_bridgeObjectRelease();
      if (!v49)
      {
        swift_bridgeObjectRelease();
        char v50 = 0;
        goto LABEL_70;
      }
      uint64_t v4 = v55;
      if (v55 != v52) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease();
  }
  char v50 = 1;
LABEL_70:
  LOBYTE(v3) = v50 & 1;
  return (char)v3;
}

uint64_t GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 64) = a2;
  *(void *)(v5 + 72) = v4;
  *(unsigned char *)(v5 + 192) = a4;
  *(void *)(v5 + 56) = a1;
  uint64_t v6 = type metadata accessor for GuidedGenerationError();
  *(void *)(v5 + 80) = v6;
  *(void *)(v5 + 88) = *(void *)(v6 - 8);
  *(void *)(v5 + 96) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TokenIDMask();
  *(void *)(v5 + 104) = v7;
  *(void *)(v5 + 112) = *(void *)(v7 - 8);
  *(void *)(v5 + 120) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TokenIDMaskResponse();
  *(void *)(v5 + 128) = v8;
  *(void *)(v5 + 136) = *(void *)(v8 - 8);
  *(void *)(v5 + 144) = swift_task_alloc();
  *(void *)(v5 + 152) = swift_task_alloc();
  *(void *)(v5 + 160) = swift_task_alloc();
  return MEMORY[0x270FA2498](GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  if ((*(unsigned char *)(v0 + 192) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72) + 24;
    int64_t isUniquelyReferenced_nonNull_native = swift_beginAccess();
    if (*(void *)(*(void *)v11 + 16) > v10)
    {
      unint64_t v13 = *(void *)(v0 + 64);
      uint64_t v12 = *(void *)(v0 + 72);
      swift_retain();
      uint64_t v14 = specialized Sequence.reversed()(v13, v12);
      unint64_t v15 = *(void *)(v14 + 16);
      int64_t isUniquelyReferenced_nonNull_native = swift_retain();
      unint64_t v16 = 0;
      uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_9:
      if (v16 <= v15) {
        unint64_t v18 = v15;
      }
      else {
        unint64_t v18 = v16;
      }
      while (v15 != v16)
      {
        if (v18 == v16)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        unint64_t v19 = *(void *)(v14 + 8 * v16 + 32);
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_43;
        }
        if (v19 >= *(void *)(*(void *)v11 + 16)) {
          goto LABEL_44;
        }
        ++v16;
        if ((*(unsigned char *)(*(void *)v11 + 48 * v19 + 49) & 1) == 0)
        {
          int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            int64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          }
          unint64_t v21 = *(void *)(v17 + 16);
          unint64_t v20 = *(void *)(v17 + 24);
          if (v21 >= v20 >> 1) {
            int64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          }
          *(void *)(v17 + 16) = v21 + 1;
          *(void *)(v17 + 8 * v21 + 32) = v19;
          goto LABEL_9;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v17 + 16);
      if (v22)
      {
        swift_retain();
        int64_t isUniquelyReferenced_nonNull_native = swift_retain();
        uint64_t v23 = 0;
        unint64_t v24 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          unint64_t v25 = *(void *)(v17 + 8 * v23 + 32);
          if ((v25 & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          if (v25 >= *(void *)(*(void *)v11 + 16)) {
            goto LABEL_46;
          }
          uint64_t v26 = *(void *)v11 + 48 * v25;
          if ((*(unsigned char *)(v26 + 64) & 1) == 0)
          {
            uint64_t v27 = *(void *)(v26 + 56);
            int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
              unint64_t v24 = (void *)isUniquelyReferenced_nonNull_native;
            }
            unint64_t v29 = v24[2];
            unint64_t v28 = v24[3];
            if (v29 >= v28 >> 1)
            {
              int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v24);
              unint64_t v24 = (void *)isUniquelyReferenced_nonNull_native;
            }
            v24[2] = v29 + 1;
            v24[v29 + 4] = v27;
          }
          if (v22 == ++v23)
          {
            swift_release();
            swift_release();
            goto LABEL_39;
          }
        }
      }
      unint64_t v24 = (void *)MEMORY[0x263F8EE78];
LABEL_39:
      *(void *)(v0 + 168) = v24;
      swift_release();
      unint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v32;
      *unint64_t v32 = v0;
      v32[1] = GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:);
      int64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 152);
      uint64_t v3 = v24;
      return MEMORY[0x270F7F5F0](isUniquelyReferenced_nonNull_native, v3);
    }
LABEL_48:
    __break(1u);
    return MEMORY[0x270F7F5F0](isUniquelyReferenced_nonNull_native, v3);
  }
  uint64_t v1 = *(void *)(v0 + 56);
  int64_t isUniquelyReferenced_nonNull_native = GuidedGenerationConstraints.vocabularyCount.getter();
  *(void *)(v1 + 24) = &type metadata for UnconstrainedLogitCollection;
  *(void *)(v1 + 32) = &protocol witness table for UnconstrainedLogitCollection;
  if (isUniquelyReferenced_nonNull_native < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(0, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = BitSet.init()();
  uint64_t v33 = v5;
  int64_t v6 = v4[2];
  if (v6)
  {
    swift_retain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      Swift::Int v8 = v4[i + 4];
      BitSet.insert(_:)(v8);
    }
    swift_release_n();
    uint64_t v9 = v33;
  }
  else
  {
    uint64_t v9 = v5;
    swift_release();
  }
  **(void **)(v0 + 56) = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:);
  }
  else {
    uint64_t v2 = GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;

  uint64_t v1 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v1, v0[19], v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == *MEMORY[0x263F7FBB0])
  {
    int64_t v6 = v0[18];
    (*(void (**)(uint64_t, void))(v0[17] + 96))(v6, v0[16]);
    if (*(void *)(*(void *)v6 + 16))
    {
      uint64_t v7 = v0[20];
      Swift::Int v8 = v0[16];
      uint64_t v9 = v0[17];
      uint64_t v10 = (uint64_t *)v0[7];
      uint64_t v11 = *(void *)(*(void *)v6 + 32);
      swift_bridgeObjectRelease();
      uint64_t v34 = BitSet.init()();
      BitSet.insert(_:)(v11);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      void v10[3] = (uint64_t)&type metadata for SparseLogitCollection;
      v10[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
      *uint64_t v10 = v34;
      goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  if (v5 == *MEMORY[0x263F7FBB8])
  {
    uint64_t v12 = v0[20];
    uint64_t v14 = v0[17];
    unint64_t v13 = v0[18];
    unint64_t v16 = v0[15];
    unint64_t v15 = v0[16];
    uint64_t v17 = v0[13];
    unint64_t v18 = v0[14];
    unint64_t v19 = (uint64_t *)v0[7];
    (*(void (**)(uint64_t, uint64_t))(v14 + 96))(v13, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v16, v13, v17);
    unint64_t v20 = TokenIDMask.bitSet()();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    void v19[3] = (uint64_t)&type metadata for SparseLogitCollection;
    v19[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
    *unint64_t v19 = v20;
    goto LABEL_10;
  }
  if (one-time initialization token for guided != -1) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.guided);
  uint64_t v22 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl(&dword_25FA51000, v22, v23, "Mask calculation returned unknown enum value from generateNextTokenIDMask. returning empty indexSet", v24, 2u);
    MEMORY[0x261206F80](v24, -1, -1);
  }
  unint64_t v25 = v0[20];
  uint64_t v27 = v0[17];
  uint64_t v26 = v0[18];
  unint64_t v28 = v0[16];
  unint64_t v29 = (uint64_t *)v0[7];

  unint64_t v30 = BitSet.init()();
  unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v31(v25, v28);
  v29[3] = (uint64_t)&type metadata for SparseLogitCollection;
  v29[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
  void *v29 = v30;
  v31(v26, v28);
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void **)(v0 + 184);
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast()) {
    goto LABEL_9;
  }
  if ((*(unsigned int (**)(void, void))(*(void *)(v0 + 88) + 88))(*(void *)(v0 + 96), *(void *)(v0 + 80)) != *MEMORY[0x263F7FBA8])
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
LABEL_9:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_10;
  }

  if (one-time initialization token for guided != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    int64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v0 + 48) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v4, v5, "Grammar can not make mask at node %ld, returning empty logits", v7, 0xCu);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  Swift::Int v8 = *(void **)(v0 + 56);

  int64_t v8[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v8[4] = &protocol witness table for <A> [A];
  unint64_t *v8 = MEMORY[0x263F8EE78];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
LABEL_10:
  return v9();
}

uint64_t specialized BitSet.init<A>(_:)(uint64_t a1)
{
  uint64_t v14 = BitSet.init()();
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_5:
    uint64_t result = *(_OWORD *)&BitSet.insert(_:)(*(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_release();
    return v14;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  Swift::Int v5;
  uint64_t v6;

  uint64_t result = BitSet.init()();
  int64_t v6 = result;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      unint64_t v5 = *(void *)(a1 + 8 * i + 32);
      BitSet.insert(_:)(v5);
    }
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

uint64_t GrammarGuidedLanguageModel.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints;
  uint64_t v2 = type metadata accessor for GuidedGenerationConstraints();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GrammarGuidedLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints;
  uint64_t v2 = type metadata accessor for GuidedGenerationConstraints();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance GrammarGuidedLanguageModel(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(a1, a2, v8, a4);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance GrammarGuidedLanguageModel()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance GrammarGuidedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

BOOL protocol witness for DeterministicLanguageModelProtocol.allNextTokensPossiblyDeterministic(nodes:) in conformance GrammarGuidedLanguageModel(Swift::OpaquePointer a1)
{
  return GrammarGuidedLanguageModel.allNextTokensPossiblyDeterministic(nodes:)(a1);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance GrammarGuidedLanguageModel@<X0>(Swift::Int a1@<X0>, TokenGenerationInference::SamplingDecoderPrompt a2@<0:X1, 8:X2, 16:X3>)
{
  return GrammarGuidedLanguageModel.node(forPreviousNode:prompt:)(a1, a2);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2 + 24;
  swift_retain();
  uint64_t result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
    uint64_t v7 = (unint64_t *)(MEMORY[0x263F8EE78] + 32);
    while (a1 < *(void *)(*(void *)v5 + 16))
    {
      uint64_t v8 = *(void *)v5 + 48 * a1;
      unint64_t v9 = *(void *)(v8 + 40);
      char v10 = *(unsigned char *)(v8 + 48);
      if (!v3)
      {
        unint64_t v11 = v2[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_27;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v14 = (void *)swift_allocObject();
        int64_t v15 = _swift_stdlib_malloc_size(v14);
        uint64_t v16 = v15 - 32;
        if (v15 < 32) {
          uint64_t v16 = v15 - 25;
        }
        uint64_t v17 = v16 >> 3;
        void v14[2] = v13;
        void v14[3] = 2 * (v16 >> 3);
        unint64_t v18 = (unint64_t)(v14 + 4);
        uint64_t v19 = v2[3] >> 1;
        if (v2[2])
        {
          unint64_t v20 = v2 + 4;
          if (v14 != v2 || v18 >= (unint64_t)v20 + 8 * v19) {
            memmove(v14 + 4, v20, 8 * v19);
          }
          v2[2] = 0;
        }
        uint64_t v7 = (unint64_t *)(v18 + 8 * v19);
        uint64_t v3 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        uint64_t result = swift_release();
        uint64_t v2 = v14;
      }
      BOOL v21 = __OFSUB__(v3--, 1);
      if (v21) {
        goto LABEL_26;
      }
      *uint64_t v7 = a1;
      if (v10) {
        goto LABEL_21;
      }
      ++v7;
      a1 = v9;
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = swift_release();
  unint64_t v22 = v2[3];
  if (v22 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v3);
  uint64_t v24 = v23 - v3;
  if (!v21)
  {
    v2[2] = v24;
    return (uint64_t)v2;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_25FAB4678@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return result;
}

uint64_t sub_25FAB46C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t ObjC metadata update function for GrammarGuidedLanguageModel()
{
  return type metadata accessor for GrammarGuidedLanguageModel();
}

uint64_t type metadata accessor for GrammarGuidedLanguageModel()
{
  uint64_t result = type metadata singleton initialization cache for GrammarGuidedLanguageModel;
  if (!type metadata singleton initialization cache for GrammarGuidedLanguageModel) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GrammarGuidedLanguageModel()
{
  uint64_t result = type metadata accessor for GuidedGenerationConstraints();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for GrammarGuidedLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GrammarGuidedLanguageModel);
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.__allocating_init(constraints:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.node(forPreviousNode:prompt:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.allNextTokensPossiblyDeterministic(nodes:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))() & 1;
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 208)
                                                                   + **(int **)(*(void *)v4 + 208));
  char v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *char v10 = v5;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return v12(a1, a2, a3, a4);
}

uint64_t destroy for GrammarGuidedLanguageModel.Node()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GrammarGuidedLanguageModel.Node(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GrammarGuidedLanguageModel.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GrammarGuidedLanguageModel.Node()
{
  return &type metadata for GrammarGuidedLanguageModel.Node;
}

uint64_t KeyValueCacheTracker.__allocating_init(e5Runner:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t KeyValueCacheTracker.init(e5Runner:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t KeyValueCacheTracker.deinit()
{
  return v0;
}

uint64_t KeyValueCacheTracker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyValueCacheTracker()
{
  return self;
}

uint64_t method lookup function for KeyValueCacheTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for KeyValueCacheTracker);
}

uint64_t dispatch thunk of KeyValueCacheTracker.__allocating_init(e5Runner:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t KVLRUCacheNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KVLRUCacheNode()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KVLRUCache.insert(kvCacheEntry:tokens:)(TGIE5KVCacheEntryObjC kvCacheEntry, Swift::OpaquePointer tokens)
{
  uint64_t v4 = v2;
  Swift::Int value = kvCacheEntry._kvCacheEntry.__ptr_.__value_;
  Class isa = kvCacheEntry.super.isa;
  uint64_t v7 = type metadata accessor for TokenGenerationError.Context();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = (char *)[(objc_class *)isa tokenCount];
  uint64_t v13 = (char *)v4[6];
  if ((uint64_t)v13 < (uint64_t)v12)
  {
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    v14._object = (void *)0x800000025FB6BEA0;
    String.append(_:)(v14);
    unint64_t v57 = (char *)[(objc_class *)isa tokenCount];
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000025FB6BED0;
    v16._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v16);
    unint64_t v57 = v13;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
LABEL_5:
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v20 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError();
    swift_allocError();
    uint64_t v22 = v21;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v21, v11, v7);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F7F7E0], v20);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return;
  }
  uint64_t v55 = v3;
  uint64_t v56 = value;
  unint64_t v18 = v4 + 2;
  swift_beginAccess();
  if (*(void *)(v4[2] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v56);
    if (v19) {
      goto LABEL_5;
    }
  }
  uint64_t v23 = v4[5];
  uint64_t v24 = (char *)[(objc_class *)isa tokenCount];
  if (__OFADD__(v23, v24))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }
  if ((uint64_t)v13 < (uint64_t)&v24[v23])
  {
    unint64_t v25 = (void *)v4[4];
    swift_retain();
    while (v25)
    {
      uint64_t v26 = (void *)v25[2];
      swift_retain();
      id v27 = objc_msgSend(v26, sel_tokenCount);
      uint64_t v28 = v4[5];
      BOOL v29 = __OFSUB__(v28, v27);
      uint64_t v30 = v28 - (void)v27;
      if (v29)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      v4[5] = v30;
      unint64_t v31 = (void *)v25[3];
      swift_beginAccess();
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
      if (v33)
      {
        unint64_t v34 = v32;
        swift_bridgeObjectRetain();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v36 = *v18;
        uint64_t v60 = *v18;
        *unint64_t v18 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v36 = v60;
        }
        swift_bridgeObjectRelease();
        specialized _NativeDictionary._delete(at:)(v34, v36);
        *unint64_t v18 = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      swift_release();
      uint64_t v37 = (void *)v25[5];
      void v25[4] = 0;
      v25[5] = 0;
      swift_release();
      uint64_t v38 = v4[5];
      unint64_t v39 = (char *)[(objc_class *)isa tokenCount];
      swift_release();
      if (__OFADD__(v38, v39)) {
        goto LABEL_31;
      }
      unint64_t v25 = v37;
      if ((uint64_t)v13 >= (uint64_t)&v39[v38]) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_19:
    v4[4] = v37;
    swift_release();
    uint64_t v40 = v4[4];
    if (v40) {
      unint64_t v41 = (void *)(v40 + 32);
    }
    else {
      unint64_t v41 = v4 + 3;
    }
    *unint64_t v41 = 0;
    swift_release();
  }
  uint64_t v42 = v4[5];
  unint64_t v43 = (char *)[(objc_class *)isa tokenCount];
  if (__OFADD__(v42, v43)) {
    goto LABEL_33;
  }
  v4[5] = &v43[v42];
  uint64_t v44 = v4[3];
  if (v44)
  {
    type metadata accessor for KVLRUCacheNode();
    uint64_t v45 = (void *)swift_allocObject();
    v45[4] = v44;
    v45[5] = 0;
    uint64_t v46 = v56;
    v45[2] = isa;
    long long v45[3] = v46;
    *(void *)(v44 + 40) = v45;
    swift_retain_n();
    swift_bridgeObjectRetain();
    Swift::Bool v47 = isa;
    swift_retain_n();
    swift_release();
    v4[3] = v45;
    swift_release();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v60 = v4[2];
    v4[2] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v45, v46, v48);
    v4[2] = v60;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for KVLRUCacheNode();
    Swift::Bool v49 = (void *)swift_allocObject();
    v49[4] = 0;
    v49[5] = 0;
    char v50 = v56;
    v49[2] = isa;
    v49[3] = v50;
    v4[3] = v49;
    swift_bridgeObjectRetain();
    uint64_t v51 = isa;
    swift_release();
    v4[4] = v4[3];
    swift_retain();
    swift_release();
    uint64_t v52 = v4[3];
    swift_beginAccess();
    if (v52)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      char v53 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v60 = *v18;
      *unint64_t v18 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v52, v50, v53);
      *unint64_t v18 = v60;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v54 = (void *)swift_bridgeObjectRetain();
      specialized Dictionary._Variant.removeValue(forKey:)(v54);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_endAccess();
  }
}

TGIE5KVCacheEntryObjC_optional __swiftcall KVLRUCache.cacheEntry(for:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 16);
  if (*(void *)(v6 + 16)
    && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1._rawValue), (v4 & 1) != 0))
  {
    uint64_t v8 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9)
    {
      uint64_t v10 = *(void *)(v2 + 32);
      if (v10 && v8 == v10) {
        *(void *)(v2 + 32) = v9;
      }
      swift_retain();
      swift_retain();
      *(void *)(v9 + 32) = *(void *)(v8 + 32);
      swift_retain();
      swift_release();
      swift_release();
      *(void *)(v8 + 40) = 0;
      swift_release();
      *(void *)(v8 + 32) = *(void *)(v2 + 24);
      swift_retain();
      swift_release();
      uint64_t v11 = *(void *)(v2 + 24);
      if (v11)
      {
        *(void *)(v11 + 40) = v8;
        swift_retain();
        swift_release();
      }
      *(void *)(v2 + 24) = v8;
      swift_retain();
      swift_release();
      id v12 = *(id *)(v8 + 16);
      swift_release();
    }
    else
    {
      id v12 = *(id *)(v8 + 16);
      id v13 = v12;
    }
  }
  else
  {
    id v12 = 0;
  }
  Swift::String v14 = (objc_class *)v12;
  result.value._kvCacheEntry.__ptr_.__value_ = v4;
  result.value.super.Class isa = v14;
  result.is_nil = v5;
  return result;
}

uint64_t KVLRUCache.deinit()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v6) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v10);
    *(void *)(v11 + 40) = 0;
    swift_retain();
    swift_release();
    *(void *)(v11 + 32) = 0;
    swift_release();
    uint64_t result = swift_release();
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v6)
  {
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return v0;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t KVLRUCache.__deallocating_deinit()
{
  KVLRUCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KVLRUCache()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError;
  if (!lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError)
  {
    type metadata accessor for TokenGenerationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError);
  }
  return result;
}

uint64_t static LanguageModelError.== infix(_:_:)()
{
  return 1;
}

void LanguageModelError.hash(into:)()
{
}

Swift::Int LanguageModelError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LanguageModelError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LanguageModelError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageModelError()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LanguageModelError and conformance LanguageModelError()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError;
  if (!lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LanguageModelError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for LanguageModelError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25FAB59D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LanguageModelError()
{
  return &type metadata for LanguageModelError;
}

uint64_t one-time initialization function for device(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.device);
}

uint64_t one-time initialization function for guided(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.guided);
}

uint64_t one-time initialization function for speculativeDecode(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.speculativeDecode);
}

uint64_t one-time initialization function for healing(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.healing);
}

uint64_t one-time initialization function for device(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  unsigned int v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  int64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    int32x4_t *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  int64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    int32x4_t *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

void TokenSampling.makePresampler()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for BasicLogitPresampler;
  *(void *)(a1 + 32) = &protocol witness table for BasicLogitPresampler;
}

uint64_t BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  uint64_t v39 = a1;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v6 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v6) {
    return v7;
  }
  uint64_t v48 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  uint64_t v9 = 0;
  uint64_t v7 = v48;
  int64_t v37 = a2 + 0x4000000000000000;
  size_t v38 = 2 * a2;
  size_t v47 = 4 * a2;
  uint64_t v11 = v43;
  uint64_t v10 = v44;
  if (v44 <= v43) {
    uint64_t v10 = v43;
  }
  uint64_t v42 = v10 - v43;
  int64_t v12 = (__int16 *)(v39 + 2 * v43 * v46);
  uint64_t v40 = 2 * v46;
  uint64_t v13 = 2 * v45;
  unint64_t v36 = (unint64_t)(a2 - 0x2000000000000000) >> 62;
  uint64_t v41 = v6;
  while (1)
  {
    if (v9 == v6)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v14 = v46 * v11;
    if ((unsigned __int128)(v46 * (__int128)v11) >> 64 != (v46 * v11) >> 63) {
      goto LABEL_32;
    }
    if (v45 == 1)
    {
      Swift::String v15 = (void *)(v39 + 2 * v14);
      if (a2 <= 0)
      {
        if (a2) {
          goto LABEL_39;
        }
        src.data = (void *)(v39 + 2 * v14);
        src.height = 1;
        src.width = 0;
        src.size_t rowBytes = v38;
        Swift::String v16 = (void *)MEMORY[0x263F8EE78];
        vImagePixelCount v17 = *(void *)(MEMORY[0x263F8EE78] + 16);
      }
      else
      {
        Swift::String v16 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        void v16[2] = a2;
        bzero(v16 + 4, v47);
        if (v37 < 0) {
          goto LABEL_35;
        }
        src.data = v15;
        src.height = 1;
        src.width = a2;
        src.size_t rowBytes = v38;
        if (v36 < 3) {
          goto LABEL_36;
        }
        vImagePixelCount v17 = v16[2];
      }
      dest.data = v16 + 4;
      dest.height = 1;
      dest.width = v17;
      dest.size_t rowBytes = v47;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      goto LABEL_23;
    }
    if (a2 < 0) {
      break;
    }
    if (a2)
    {
      Swift::String v16 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      void v16[2] = a2;
      bzero(v16 + 4, v47);
      uint64_t v18 = 0;
      char v19 = v12;
      do
      {
        _H0 = *v19;
        __asm { FCVT            S0, H0 }
        *((_DWORD *)v16 + v18 + 8) = _S0;
        char v19 = (__int16 *)((char *)v19 + v13);
        ++v18;
      }
      while (a2 != v18);
    }
    else
    {
      Swift::String v16 = (void *)MEMORY[0x263F8EE78];
    }
LABEL_23:
    size_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    src.size_t rowBytes = v26;
    uint64_t v51 = &protocol witness table for <A> [A];
    src.data = v16;
    uint64_t v48 = v7;
    unint64_t v28 = *(void *)(v7 + 16);
    unint64_t v27 = *(void *)(v7 + 24);
    if (v28 >= v27 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      size_t rowBytes = src.rowBytes;
      uint64_t v30 = v51;
    }
    else
    {
      size_t rowBytes = v26;
      uint64_t v30 = &protocol witness table for <A> [A];
    }
    uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&src, rowBytes);
    MEMORY[0x270FA5388](v31, v31);
    char v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v34 + 16))(v33);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v33, &v48, rowBytes, (uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&src);
    if (v44 < v43) {
      goto LABEL_33;
    }
    if (v9 == v42) {
      goto LABEL_34;
    }
    ++v9;
    uint64_t v7 = v48;
    ++v11;
    uint64_t v6 = v41;
    int64_t v12 = (__int16 *)((char *)v12 + v40);
    if (v9 == v41) {
      return v7;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance BasicLogitPresampler(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

TokenGenerationInference::ArgmaxLogitCollection __swiftcall ArgmaxLogitCollection.init(index:logit:)(Swift::Int index, Swift::Float logit)
{
  *(void *)uint64_t v2 = index;
  *(Swift::Float *)(v2 + 8) = logit;
  result.index = index;
  result.logit = logit;
  return result;
}

uint64_t ArgmaxLogitCollection.indexSet.getter()
{
  Swift::Int v1 = *v0;
  uint64_t v3 = BitSet.init()();
  BitSet.insert(_:)(v1);
  return v3;
}

float ArgmaxLogitCollection.subscript.getter(uint64_t a1)
{
  float result = *(float *)(v1 + 8);
  if (*(void *)v1 != a1) {
    return -65504.0;
  }
  return result;
}

Swift::Int __swiftcall ArgmaxLogitCollection.argmax()()
{
  return *v0;
}

double ArgmaxLogitCollection.topK(_:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
  *(void *)(v2 + 32) = v1;
  return result;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance ArgmaxLogitCollection()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  *(void *)(inited + 32) = v1;
  uint64_t v3 = specialized BitSet.init<A>(_:)(inited);
  swift_setDeallocating();
  return v3;
}

float protocol witness for LogitCollection.subscript.getter in conformance ArgmaxLogitCollection(uint64_t a1)
{
  float result = *(float *)(v1 + 8);
  if (*(void *)v1 != a1) {
    return -65504.0;
  }
  return result;
}

uint64_t protocol witness for LogitCollection.argmax() in conformance ArgmaxLogitCollection()
{
  return *(void *)v0;
}

double protocol witness for LogitCollection.topK(_:) in conformance ArgmaxLogitCollection()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
  *(void *)(v2 + 32) = v1;
  return result;
}

uint64_t ArgmaxPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 == 1) {
    return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, 1, a5, a6);
  }
  unint64_t v10 = a6 - a5;
  if (__OFSUB__(a6, a5)) {
    goto LABEL_27;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    if (v10)
    {
      uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v13 + 16) = v10;
    }
    else
    {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    if (a2 > 0x7FFFFFFF) {
      goto LABEL_28;
    }
    if (a4 > 0x7FFFFFFF)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (a5 > 0x7FFFFFFF)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (a2 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000 || a5 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_31;
    }
    if (v10 >> 31)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v14 = v13 + 32;
    PresampleArgmax(a1, a2, a4, a5, v10, (void *)(v13 + 32));
    char v33 = &v30;
    *(void *)(v13 + 16) = v10;
    uint64_t v38 = v12;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v15 = v38;
    uint64_t v16 = *(void *)(v13 + 16);
    uint64_t v34 = v13;
    swift_bridgeObjectRetain();
    if (!v16)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return v15;
    }
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(int *)(v14 + 4 * v17);
      uint64_t v19 = v18 * a4;
      if ((unsigned __int128)(*(int *)(v14 + 4 * v17) * (__int128)a4) >> 64 != (v18 * a4) >> 63) {
        break;
      }
      _VF = __OFADD__(v19, v17);
      uint64_t v21 = v19 + v17;
      if (_VF) {
        goto LABEL_25;
      }
      _VF = __OFADD__(v21, a5);
      uint64_t v22 = v21 + a5;
      if (_VF) {
        goto LABEL_26;
      }
      _H8 = *(_WORD *)(a1 + 2 * v22);
      uint64_t v38 = v15;
      unint64_t v25 = *(void *)(v15 + 16);
      unint64_t v24 = *(void *)(v15 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v15 = v38;
      }
      ++v17;
      __asm { FCVT            S0, H8 }
      unint64_t v36 = &type metadata for ArgmaxLogitCollection;
      int64_t v37 = &protocol witness table for ArgmaxLogitCollection;
      *(void *)&long long v35 = v18;
      DWORD2(v35) = _S0;
      *(void *)(v15 + 16) = v25 + 1;
      outlined init with take of LogitCollection(&v35, v15 + 40 * v25 + 32);
      if (v16 == v17) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_33:
  int v32 = 0;
  uint64_t v31 = 936;
  char v30 = 2;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance ArgmaxPresampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ArgmaxPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

TokenGenerationInference::TopK2LogitCollection __swiftcall TopK2LogitCollection.init(indexes:logits:)(Swift::tuple_Int_Int indexes, Swift::tuple_Float_Float logits)
{
  *(Swift::tuple_Int_Int *)uint64_t v2 = indexes;
  *(Swift::Float *)(v2 + 16) = logits._0;
  *(Swift::Float *)(v2 + 20) = logits._1;
  result.indexes = indexes;
  result.logits._1 = logits._1;
  result.logits._0 = logits._0;
  return result;
}

uint64_t TopK2LogitCollection.indexSet.getter()
{
  Swift::Int v1 = *v0;
  Swift::Int v2 = v0[1];
  uint64_t v4 = BitSet.init()();
  BitSet.insert(_:)(v1);
  BitSet.insert(_:)(v2);
  return v4;
}

float TopK2LogitCollection.subscript.getter(uint64_t a1)
{
  float result = *(float *)(v1 + 16);
  float v3 = *(float *)(v1 + 20);
  if (*(void *)(v1 + 8) != a1) {
    float v3 = -65504.0;
  }
  if (*(void *)v1 != a1) {
    return v3;
  }
  return result;
}

Swift::Int __swiftcall TopK2LogitCollection.argmax()()
{
  return *v0;
}

double TopK2LogitCollection.topK(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v3 = swift_allocObject();
    *(void *)&double result = 1;
    *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
    *(void *)(v3 + 32) = v2;
  }
  else
  {
    uint64_t v5 = v1[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = swift_allocObject();
    *(void *)&double result = 2;
    *(_OWORD *)(v6 + 16) = xmmword_25FB62680;
    *(void *)(v6 + 32) = v2;
    *(void *)(v6 + 40) = v5;
  }
  return result;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance TopK2LogitCollection()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB62680;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 40) = v1;
  uint64_t v4 = specialized BitSet.init<A>(_:)(inited);
  swift_setDeallocating();
  return v4;
}

float protocol witness for LogitCollection.subscript.getter in conformance TopK2LogitCollection(uint64_t a1)
{
  float result = *(float *)(v1 + 16);
  float v3 = *(float *)(v1 + 20);
  if (*(void *)(v1 + 8) != a1) {
    float v3 = -65504.0;
  }
  if (*(void *)v1 != a1) {
    return v3;
  }
  return result;
}

double protocol witness for LogitCollection.topK(_:) in conformance TopK2LogitCollection(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v3 = swift_allocObject();
    *(void *)&double result = 1;
    *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
    *(void *)(v3 + 32) = v2;
  }
  else
  {
    uint64_t v5 = v1[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = swift_allocObject();
    *(void *)&double result = 2;
    *(_OWORD *)(v6 + 16) = xmmword_25FB62680;
    *(void *)(v6 + 32) = v2;
    *(void *)(v6 + 40) = v5;
  }
  return result;
}

int64_t TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = a1;
  if (a4 == 1) {
    return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, 1, a5, a6);
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v48 = MEMORY[0x263F8EE78];
  int64_t result = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_25:
    __break(1u);
  }
  else
  {
    uint64_t v10 = a4;
    uint64_t v11 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(result, &v48, a5, a6, v7, a2, a4);
    uint64_t v38 = (uint64_t)&v38;
    uint64_t v12 = v48;
    uint64_t v47 = v9;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v13 = v47;
    uint64_t v14 = *(void *)(v11 + 16);
    swift_bridgeObjectRetain();
    int64_t result = swift_bridgeObjectRetain();
    uint64_t v41 = v14;
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v39 = v10;
      uint64_t v40 = v11 + 32;
      do
      {
        unint64_t v16 = *(void *)(v12 + 16);
        if (v15 == v16) {
          break;
        }
        if (v15 >= v16)
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v17 = *(int *)(v40 + 4 * v15);
        uint64_t v18 = v17 * v10;
        if ((unsigned __int128)(*(int *)(v40 + 4 * v15) * (__int128)v10) >> 64 != (v17 * v10) >> 63) {
          goto LABEL_19;
        }
        _VF = __OFADD__(v18, v15);
        unint64_t v20 = v18 + v15;
        if (_VF) {
          goto LABEL_20;
        }
        _VF = __OFADD__(v20, v6);
        unint64_t v21 = v20 + v6;
        if (_VF) {
          goto LABEL_21;
        }
        uint64_t v22 = *(int *)(v12 + 4 * v15 + 32);
        uint64_t v23 = v22 * v10;
        if ((unsigned __int128)(*(int *)(v12 + 4 * v15 + 32) * (__int128)v10) >> 64 != (v22 * v10) >> 63) {
          goto LABEL_22;
        }
        _VF = __OFADD__(v23, v15);
        unint64_t v24 = v23 + v15;
        if (_VF) {
          goto LABEL_23;
        }
        _VF = __OFADD__(v24, v6);
        unint64_t v25 = v24 + v6;
        if (_VF) {
          goto LABEL_24;
        }
        uint64_t v26 = v12;
        uint64_t v27 = v6;
        _H8 = *(_WORD *)(v7 + 2 * v21);
        uint64_t v29 = v7;
        _H9 = *(_WORD *)(v7 + 2 * v25);
        uint64_t v47 = v13;
        unint64_t v32 = *(void *)(v13 + 16);
        unint64_t v31 = *(void *)(v13 + 24);
        if (v32 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          uint64_t v13 = v47;
        }
        ++v15;
        __asm
        {
          FCVT            S0, H8
          FCVT            S1, H9
        }
        uint64_t v45 = &type metadata for TopK2LogitCollection;
        uint64_t v46 = &protocol witness table for TopK2LogitCollection;
        *(void *)&long long v42 = v17;
        *((void *)&v42 + 1) = v22;
        int v43 = _S0;
        int v44 = _S1;
        *(void *)(v13 + 16) = v32 + 1;
        int64_t result = outlined init with take of LogitCollection(&v42, v13 + 40 * v32 + 32);
        uint64_t v7 = v29;
        uint64_t v6 = v27;
        uint64_t v12 = v26;
        uint64_t v10 = v39;
      }
      while (v41 != v15);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t closure #1 in TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(void **a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a5 - a4;
  if (__OFSUB__(a5, a4))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (v8)
    {
      uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v16 + 16) = v8;
    }
    else
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    if (a7 <= 0x7FFFFFFF)
    {
      if (a8 <= 0x7FFFFFFF)
      {
        if (a4 <= 0x7FFFFFFF)
        {
          if (a4 >= (uint64_t)0xFFFFFFFF80000000
            && a7 >= (uint64_t)0xFFFFFFFF80000000
            && a8 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (!(v8 >> 31))
            {
              PresampleTopK2(a6, a7, a8, a4, v8, *a1, (void *)(v16 + 32));
              *(void *)(v16 + 16) = v8;
              *a3 = v16;
              uint64_t result = swift_bridgeObjectRelease();
              *a2 = v8;
              return result;
            }
            goto LABEL_19;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_20:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance TopK2Presampler(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for TokenSampling.makePresampler() in conformance NucleusSampling(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for BasicLogitPresampler;
  *(void *)(a1 + 32) = &protocol witness table for BasicLogitPresampler;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(int64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 < 0) {
    goto LABEL_13;
  }
  if (a1)
  {
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = a1;
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  int64_t v18 = 0;
  v17[0] = (void *)(v15 + 32);
  v17[1] = (void *)a1;
  closure #1 in TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(v17, (unint64_t *)&v18, a2, a3, a4, a5, a6, a7);
  if (!v7)
  {
    if (v18 > a1) {
      goto LABEL_12;
    }
    *(void *)(v15 + 16) = v18;
    return v15;
  }
  if (v18 <= a1)
  {
    *(void *)(v15 + 16) = v18;
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of LogitCollection(&v12, v10 + 40 * a1 + 32);
}

uint64_t dispatch thunk of LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

ValueMetadata *type metadata accessor for BasicLogitPresampler()
{
  return &type metadata for BasicLogitPresampler;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ArgmaxLogitCollection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ArgmaxLogitCollection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ArgmaxLogitCollection()
{
  return &type metadata for ArgmaxLogitCollection;
}

ValueMetadata *type metadata accessor for ArgmaxPresampler()
{
  return &type metadata for ArgmaxPresampler;
}

uint64_t getEnumTagSinglePayload for TopK2LogitCollection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TopK2LogitCollection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TopK2LogitCollection()
{
  return &type metadata for TopK2LogitCollection;
}

ValueMetadata *type metadata accessor for TopK2Presampler()
{
  return &type metadata for TopK2Presampler;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t GreedySampling.__allocating_init(randomSeed:)(uint64_t a1, char a2)
{
  if (a2) {
    id v2 = 0;
  }
  else {
    id v2 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a1);
  }
  uint64_t v6 = &type metadata for SeedableRandomNumberGenerator;
  unint64_t v7 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(void *)&long long v5 = v2;
  uint64_t v3 = swift_allocObject();
  outlined init with take of LogitCollection(&v5, v3 + 16);
  return v3;
}

uint64_t static TopK.makeTopKPresampler(k:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  id v2 = &protocol witness table for ArgmaxPresampler;
  uint64_t v3 = &type metadata for ArgmaxPresampler;
  uint64_t v4 = &protocol witness table for BasicLogitPresampler;
  long long v5 = &type metadata for BasicLogitPresampler;
  if (result == 2)
  {
    long long v5 = &type metadata for TopK2Presampler;
    uint64_t v4 = &protocol witness table for TopK2Presampler;
  }
  if (result != 1)
  {
    uint64_t v3 = v5;
    id v2 = v4;
  }
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v2;
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v11)(int *__return_ptr, uint64_t *);
  BOOL v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;

  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = v4;
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v5 == -1) {
    return (void *)v8;
  }
  uint64_t v10 = a3;
  uint64_t v11 = (void *(*)(int *__return_ptr, uint64_t *))result;
  unint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    long long v12 = 0;
    uint64_t v8 = v20;
    uint64_t v13 = v10 - 1;
    while (a4 != v13)
    {
      if (v12) {
        goto LABEL_24;
      }
      int64_t v18 = v10;
      uint64_t result = v11(&v19, &v18);
      if (v7)
      {
        swift_release();
        return (void *)v8;
      }
      uint64_t v7 = 0;
      uint64_t v14 = v19;
      unint64_t v20 = v8;
      uint64_t v16 = *(void *)(v8 + 16);
      uint64_t v15 = *(void *)(v8 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v20;
      }
      *(void *)(v8 + 16) = v16 + 1;
      *(_DWORD *)(v8 + 4 * v16 + 32) = v14;
      long long v12 = v10 == a4;
      if (v10 == a4)
      {
        uint64_t v10 = 0;
      }
      else if (__OFADD__(v10++, 1))
      {
        goto LABEL_20;
      }
      if (a4 == ++v13) {
        return (void *)v8;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v17;
    uint64_t v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      uint64_t v10 = *v9++;
      uint64_t v15 = v10;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      int v11 = v16;
      uint64_t v17 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v13 + 1;
      *(_DWORD *)(v6 + 4 * v13 + 32) = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v17;
    uint64_t v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      uint64_t v10 = *v9++;
      uint64_t v15 = v10;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v16;
      uint64_t v17 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v13 + 1;
      *(void *)(v6 + 8 * v13 + 32) = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void *(*a1)(void *__return_ptr, void), uint64_t a2, uint64_t a3)
{
  void *(*v22)(void *__return_ptr, void);
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;

  uint64_t v23 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  unint64_t v24 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  uint64_t v22 = a1;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v24) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v23 + 8 * v10);
    if (!v15) {
      break;
    }
LABEL_18:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_19:
    unint64_t v28 = *(void *)(*(void *)(a3 + 48) + 8 * v13);
    uint64_t result = (uint64_t)a1(&v25, &v28);
    if (v3)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release();
      return (uint64_t)v11;
    }
    if ((v27 & 1) == 0)
    {
      uint64_t v17 = v25;
      int v18 = v26;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        uint64_t v11 = (void *)result;
      }
      unint64_t v20 = v11[2];
      unint64_t v19 = v11[3];
      if (v20 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v11);
        uint64_t v11 = (void *)result;
      }
      unsigned char v11[2] = v20 + 1;
      unint64_t v21 = &v11[2 * v20];
      void v21[4] = v17;
      *((_DWORD *)v21 + 10) = v18;
      a1 = v22;
    }
  }
  int64_t v16 = v10 + 1;
  if (v10 + 1 >= v24) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 2;
  if (v10 + 2 >= v24) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 3;
  if (v10 + 3 >= v24) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 4;
  if (v10 + 4 >= v24) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v10 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v23 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

Swift::Float __swiftcall LogitCollection.max()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  (*(void (**)(void))(v1 + 8))();
  BitSet.Iterator.init(_:)();
  Swift::Int_optional v8 = BitSet.Iterator.next()();
  if (v8.is_nil)
  {
    float v5 = -3.4028e38;
  }
  else
  {
    uint64_t v4 = *(float (**)(Swift::Int, uint64_t, uint64_t))(v2 + 16);
    float v5 = -3.4028e38;
    do
    {
      float v6 = v4(v8.value, v3, v2);
      if (v5 <= v6) {
        float v5 = v6;
      }
      Swift::Int_optional v8 = BitSet.Iterator.next()();
    }
    while (!v8.is_nil);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for LogitCollection.withContiguousStorageIfAvailable<A>(_:) in conformance CompositeLanguageModel.CompositeLogitCollection@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return LogitCollection.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t LogitCollection.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1);
}

Swift::Int specialized LogitCollection.argmax()()
{
  BitSet.Iterator.init(_:)();
  swift_bridgeObjectRetain();
  Swift::Int v1 = 0;
  float v2 = -3.4028e38;
  while (1)
  {
    Swift::Int_optional v9 = BitSet.Iterator.next()();
    if (v9.is_nil) {
      break;
    }
    Swift::Int value = v9.value;
    uint64_t v4 = v0[3];
    uint64_t v5 = v0[4];
    __swift_project_boxed_opaque_existential_1(v0, v4);
    if (v2 < (*(float (**)(Swift::Int, uint64_t, uint64_t))(v5 + 16))(value, v4, v5))
    {
      uint64_t v6 = v0[3];
      uint64_t v7 = v0[4];
      __swift_project_boxed_opaque_existential_1(v0, v6);
      float v2 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v7 + 16))(value, v6, v7);
      Swift::Int v1 = value;
    }
  }
  swift_bridgeObjectRelease();
  return v1;
}

{
  Swift::Int v0;
  float v1;
  Swift::Int value;
  Swift::Int_optional v4;
  Swift::Int_optional v5;

  BitSet.Iterator.init(_:)();
  uint64_t v4 = BitSet.Iterator.next()();
  if (v4.is_nil)
  {
    Swift::Int value = 0;
    goto LABEL_15;
  }
  uint64_t v0 = 0;
  Swift::Int v1 = -3.4028e38;
  do
  {
    Swift::Int value = v4.value;
    while (!BitSet.contains(_:)(value))
    {
      if (v1 < -65504.0) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v5 = BitSet.Iterator.next()();
      Swift::Int value = v5.value;
      if (v5.is_nil)
      {
        Swift::Int value = v0;
        goto LABEL_15;
      }
    }
    if (v1 >= 0.0) {
      goto LABEL_5;
    }
LABEL_8:
    if (BitSet.contains(_:)(value)) {
      Swift::Int v1 = 0.0;
    }
    else {
      Swift::Int v1 = -65504.0;
    }
    uint64_t v4 = BitSet.Iterator.next()();
    uint64_t v0 = value;
  }
  while (!v4.is_nil);
LABEL_15:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return value;
}

{
  uint64_t v0;
  Swift::Int v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  Swift::Int value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  Swift::Int_optional v27;

  BitSet.Iterator.init(_:)();
  swift_bridgeObjectRetain();
  Swift::Int v1 = 0;
  float v2 = -3.4028e38;
  while (1)
  {
    uint64_t v27 = BitSet.Iterator.next()();
    if (v27.is_nil) {
      break;
    }
    Swift::Int value = v27.value;
    Swift::Int_optional v8 = *(void *)(v0 + 24);
    Swift::Int_optional v9 = *(void *)(v0 + 32);
    __swift_project_boxed_opaque_existential_1((void *)v0, v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    LOBYTE(v8) = BitSet.contains(_:)(value);
    swift_bridgeObjectRelease();
    if (v8)
    {
      int64_t v10 = *(void *)(v0 + 24);
      uint64_t v11 = *(void *)(v0 + 32);
      __swift_project_boxed_opaque_existential_1((void *)v0, v10);
      unint64_t v12 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v11 + 16))(value, v10, v11);
    }
    else
    {
      unint64_t v12 = -65504.0;
    }
    unint64_t v13 = *(float *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 64);
    unint64_t v15 = *(void *)(v0 + 72);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 40), v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    LOBYTE(v14) = BitSet.contains(_:)(value);
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v3 = *(void *)(v0 + 64);
      uint64_t v4 = *(void *)(v0 + 72);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 40), v3);
      uint64_t v5 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v4 + 16))(value, v3, v4);
    }
    else
    {
      uint64_t v5 = -65504.0;
    }
    uint64_t v6 = *(float *)(v0 + 84);
    if (v2 < (float)((float)(v12 * v13) + (float)(v5 * v6)))
    {
      int64_t v16 = *(void *)(v0 + 24);
      uint64_t v17 = *(void *)(v0 + 32);
      __swift_project_boxed_opaque_existential_1((void *)v0, v16);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      LOBYTE(v16) = BitSet.contains(_:)(value);
      swift_bridgeObjectRelease();
      if (v16)
      {
        int v18 = *(void *)(v0 + 24);
        unint64_t v19 = *(void *)(v0 + 32);
        __swift_project_boxed_opaque_existential_1((void *)v0, v18);
        unint64_t v20 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v19 + 16))(value, v18, v19);
      }
      else
      {
        unint64_t v20 = -65504.0;
      }
      unint64_t v21 = *(void *)(v0 + 64);
      uint64_t v22 = *(void *)(v0 + 72);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 40), v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
      LOBYTE(v21) = BitSet.contains(_:)(value);
      swift_bridgeObjectRelease();
      if (v21)
      {
        uint64_t v23 = *(void *)(v0 + 64);
        unint64_t v24 = *(void *)(v0 + 72);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 40), v23);
        (*(void (**)(Swift::Int, uint64_t, uint64_t))(v24 + 16))(value, v23, v24);
      }
      else
      {
        unint64_t v25 = -65504.0;
      }
      float v2 = (float)(v13 * v20) + (float)(v6 * v25);
      Swift::Int v1 = value;
    }
  }
  swift_bridgeObjectRelease();
  return v1;
}

{
  Swift::Int v0;
  float v1;
  Swift::Int value;
  Swift::Int_optional v4;
  Swift::Int_optional v5;

  BitSet.Iterator.init(_:)();
  uint64_t v4 = BitSet.Iterator.next()();
  if (v4.is_nil)
  {
    Swift::Int value = 0;
    goto LABEL_15;
  }
  uint64_t v0 = 0;
  Swift::Int v1 = -3.4028e38;
  do
  {
    Swift::Int value = v4.value;
    while (!BitSet.contains(_:)(value))
    {
      if (v1 < -65504.0) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v5 = BitSet.Iterator.next()();
      Swift::Int value = v5.value;
      if (v5.is_nil)
      {
        Swift::Int value = v0;
        goto LABEL_15;
      }
    }
    if (v1 >= 1.0) {
      goto LABEL_5;
    }
LABEL_8:
    if (BitSet.contains(_:)(value)) {
      Swift::Int v1 = 1.0;
    }
    else {
      Swift::Int v1 = -65504.0;
    }
    uint64_t v4 = BitSet.Iterator.next()();
    uint64_t v0 = value;
  }
  while (!v4.is_nil);
LABEL_15:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return value;
}

Swift::Int specialized LogitCollection.argmax()(Swift::Int a1)
{
  BitSet.init()();
  BitSet.insert(_:)(a1);
  BitSet.Iterator.init(_:)();
  Swift::Int_optional v5 = BitSet.Iterator.next()();
  Swift::Int value = 0;
  if (!v5.is_nil)
  {
    float v3 = -3.4028e38;
    do
    {
      if (v5.value == a1)
      {
        if (v3 < 0.0)
        {
          float v3 = 0.0;
          Swift::Int value = a1;
        }
      }
      else if (v3 < -65504.0)
      {
        Swift::Int value = v5.value;
        float v3 = -65504.0;
      }
      Swift::Int_optional v5 = BitSet.Iterator.next()();
    }
    while (!v5.is_nil);
  }
  swift_bridgeObjectRelease();
  return value;
}

uint64_t specialized LogitCollection.argmax()(uint64_t a1)
{
  Swift::Int v2 = 0;
  BitSet.Iterator.init(_:)();
  float v3 = -3.4028e38;
  while (1)
  {
    Swift::Int_optional v14 = BitSet.Iterator.next()();
    if (v14.is_nil)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v2;
    }
    Swift::Int value = v14.value;
    if (!*(void *)(a1 + 16)) {
      break;
    }
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v14.value);
    if ((v6 & 1) == 0) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    if (v3 < *(float *)(v7 + 16 * v5 + 8))
    {
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(value);
      if ((v9 & 1) == 0) {
        break;
      }
      float v3 = *(float *)(v7 + 16 * v8 + 8);
      Swift::Int v2 = value;
    }
  }
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x206E6920746F6E20;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = BitSet.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

vDSP_Length specialized LogitCollection.argmax()(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  vDSP_Length v1 = *(void *)(a1 + 16);
  float __C = NAN;
  vDSP_Length __I = 0;
  vDSP_maxvi((const float *)(a1 + 32), 1, &__C, &__I, v1);
  vDSP_Length result = __I;
  if ((__I & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall LogitCollection.argmax()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  (*(void (**)(Swift::Int *__return_ptr, void (*)(vDSP_Length@<X1>, const float *@<X0>, vDSP_Length *@<X8>), void, void))(v1 + 24))(&v11, closure #1 in LogitCollection.argmax(), 0, MEMORY[0x263F8D6C8]);
  if (v12 != 1) {
    return v11;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  Swift::Int v4 = 0;
  Swift::Int v11 = BitSet.Iterator.init(_:)();
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  float v7 = -3.4028e38;
  while (1)
  {
    Swift::Int_optional v14 = BitSet.Iterator.next()();
    if (v14.is_nil) {
      break;
    }
    Swift::Int value = v14.value;
    char v9 = *(float (**)(Swift::Int, uint64_t, uint64_t))(v2 + 16);
    if (v7 < v9(v14.value, v3, v2))
    {
      float v7 = v9(value, v3, v2);
      Swift::Int v4 = value;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized LogitCollection.topK(_:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = BitSet.count.getter();
  if (v4 < a1) {
    a1 = v4;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_25FB61DF0;
    v15[0] = BitSet.Iterator.init(_:)();
    v15[1] = v6;
    v15[2] = v7;
    Swift::Int_optional v16 = BitSet.Iterator.next()();
    Swift::Int value = 0;
    if (!v16.is_nil)
    {
      float v9 = -3.4028e38;
      do
      {
        if (v9 < 0.0)
        {
          Swift::Int value = v16.value;
          float v9 = 0.0;
        }
        Swift::Int_optional v16 = BitSet.Iterator.next()();
      }
      while (!v16.is_nil);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v5 + 32) = value;
    return v5;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  v15[0] = a2;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_16:
    uint64_t v5 = Array<A>.topK(_:)(a1, v10);
    swift_bridgeObjectRelease();
    return v5;
  }
  BitSet.endIndex.getter();
  uint64_t v11 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v11 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v13);
    void v14[2] = v15;
    int64_t v10 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v14, 0, v11);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int value;
  float v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void v14[5];
  void v15[3];
  Swift::Int_optional v16;

  uint64_t v4 = BitSet.count.getter();
  if (v4 < a1) {
    a1 = v4;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_25FB61DF0;
    v15[0] = BitSet.Iterator.init(_:)();
    v15[1] = v6;
    v15[2] = v7;
    Swift::Int_optional v16 = BitSet.Iterator.next()();
    Swift::Int value = 0;
    if (!v16.is_nil)
    {
      float v9 = -3.4028e38;
      do
      {
        if (v9 < 1.0)
        {
          Swift::Int value = v16.value;
          float v9 = 1.0;
        }
        Swift::Int_optional v16 = BitSet.Iterator.next()();
      }
      while (!v16.is_nil);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v5 + 32) = value;
    return v5;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  v15[0] = a2;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_16:
    uint64_t v5 = Array<A>.topK(_:)(a1, v10);
    swift_bridgeObjectRelease();
    return v5;
  }
  BitSet.endIndex.getter();
  uint64_t v11 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v11 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v13);
    void v14[2] = v15;
    int64_t v10 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v14, 0, v11);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topK(_:)(int64_t a1)
{
  uint64_t v3 = BitSet.count.getter();
  if (v3 < a1) {
    a1 = v3;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
    *(void *)(v4 + 32) = specialized LogitCollection.argmax()();
    return v4;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
LABEL_11:
    uint64_t v4 = Array<A>.topK(_:)(a1, v5);
    swift_bridgeObjectRelease();
    return v4;
  }
  BitSet.endIndex.getter();
  uint64_t v6 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v8);
    v9[2] = v1;
    uint64_t v5 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v9, 0, v6);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void v9[4];

  uint64_t v3 = BitSet.count.getter();
  if (v3 < a1) {
    a1 = v3;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
    *(void *)(v4 + 32) = specialized LogitCollection.argmax()();
    return v4;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
LABEL_11:
    uint64_t v4 = Array<A>.topK(_:)(a1, v5);
    swift_bridgeObjectRelease();
    return v4;
  }
  BitSet.endIndex.getter();
  uint64_t v6 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v8);
    v9[2] = v1;
    uint64_t v5 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v9, 0, v6);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topK(_:)(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = BitSet.count.getter();
  if (v8 < a1) {
    a1 = v8;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25FB61DF0;
    *(void *)(v9 + 32) = a3(a2);
    return v9;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v15 = a2;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
LABEL_11:
    uint64_t v9 = Array<A>.topK(_:)(a1, v10);
    swift_bridgeObjectRelease();
    return v9;
  }
  BitSet.endIndex.getter();
  uint64_t v11 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v11 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v13);
    void v14[2] = &v15;
    int64_t v10 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(a4, (uint64_t)v14, 0, v11);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topK(_:)(int64_t a1, Swift::Int a2)
{
  BitSet.init()();
  BitSet.insert(_:)(a2);
  uint64_t v4 = BitSet.count.getter();
  swift_bridgeObjectRelease();
  if (v4 >= a1) {
    int64_t v5 = a1;
  }
  else {
    int64_t v5 = v4;
  }
  if (v5 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
    *(void *)(v6 + 32) = specialized LogitCollection.argmax()(a2);
  }
  else if (v5)
  {
    uint64_t v7 = (char *)specialized LogitCollection.makeDenseLogits()(a2);
    uint64_t v6 = Array<A>.topK(_:)(v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return v6;
}

uint64_t specialized LogitCollection.topK(_:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = BitSet.count.getter();
  if (v6 < a1) {
    a1 = v6;
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
    *(void *)(v7 + 32) = specialized LogitCollection.argmax()(a2);
    return v7;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  v13[0] = a2;
  v13[1] = a3;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)MEMORY[0x263F8EE78];
LABEL_11:
    uint64_t v7 = Array<A>.topK(_:)(a1, v8);
    swift_bridgeObjectRelease();
    return v7;
  }
  BitSet.endIndex.getter();
  uint64_t v9 = BitSet.index(before:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) == 0)
  {
    MEMORY[0x270FA5388](result, v11);
    unint64_t v12[2] = v13;
    uint64_t v8 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v12, 0, v9);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t LogitCollection.topK(_:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v6 = BitSet.count.getter();
  swift_bridgeObjectRelease();
  if (v6 < a1) {
    a1 = v6;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
    *(void *)(v7 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    return v7;
  }
  uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t v10 = Array<A>.topK(_:)(a1, v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized LogitCollection.topP(_:)(uint64_t a1, float a2)
{
  if (a2 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    v19[0] = BitSet.Iterator.init(_:)();
    v19[1] = v3;
    void v19[2] = v4;
    Swift::Int_optional v20 = BitSet.Iterator.next()();
    Swift::Int value = 0;
    if (!v20.is_nil)
    {
      float v6 = -3.4028e38;
      do
      {
        if (v6 < 0.0)
        {
          Swift::Int value = v20.value;
          float v6 = 0.0;
        }
        Swift::Int_optional v20 = BitSet.Iterator.next()();
      }
      while (!v20.is_nil);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 32) = value;
    return v2;
  }
  if (a2 != 1.0)
  {
    v19[0] = a1;
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v16 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 < 0) {
        goto LABEL_24;
      }
      MEMORY[0x270FA5388](result, v17);
      v18[2] = v19;
      uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v18, 0, v16);
    }
    uint64_t v2 = (uint64_t)Array<A>.topP(_:)((uint64_t)v15, a2);
LABEL_21:
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v8 = BitSet.count.getter();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v8) {
    return v2;
  }
  uint64_t v9 = v8;
  v19[0] = MEMORY[0x263F8EE78];
  int64_t v10 = v8 & ~(v8 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  uint64_t v2 = v19[0];
  uint64_t result = BitSet.startIndex.getter();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = result;
    do
    {
      v19[0] = v2;
      unint64_t v14 = *(void *)(v2 + 16);
      unint64_t v13 = *(void *)(v2 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v2 = v19[0];
      }
      *(void *)(v2 + 16) = v14 + 1;
      *(void *)(v2 + 8 * v14 + 32) = v12;
      uint64_t v12 = BitSet.index(after:)();
      --v9;
    }
    while (v9);
    goto LABEL_21;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int value;
  float v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void v18[5];
  void v19[3];
  Swift::Int_optional v20;

  if (a2 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    v19[0] = BitSet.Iterator.init(_:)();
    v19[1] = v3;
    void v19[2] = v4;
    Swift::Int_optional v20 = BitSet.Iterator.next()();
    Swift::Int value = 0;
    if (!v20.is_nil)
    {
      float v6 = -3.4028e38;
      do
      {
        if (v6 < 1.0)
        {
          Swift::Int value = v20.value;
          float v6 = 1.0;
        }
        Swift::Int_optional v20 = BitSet.Iterator.next()();
      }
      while (!v20.is_nil);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 32) = value;
    return v2;
  }
  if (a2 != 1.0)
  {
    v19[0] = a1;
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v16 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 < 0) {
        goto LABEL_24;
      }
      MEMORY[0x270FA5388](result, v17);
      v18[2] = v19;
      uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v18, 0, v16);
    }
    uint64_t v2 = (uint64_t)Array<A>.topP(_:)((uint64_t)v15, a2);
LABEL_21:
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v8 = BitSet.count.getter();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v8) {
    return v2;
  }
  uint64_t v9 = v8;
  v19[0] = MEMORY[0x263F8EE78];
  int64_t v10 = v8 & ~(v8 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  uint64_t v2 = v19[0];
  uint64_t result = BitSet.startIndex.getter();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = result;
    do
    {
      v19[0] = v2;
      unint64_t v14 = *(void *)(v2 + 16);
      unint64_t v13 = *(void *)(v2 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v2 = v19[0];
      }
      *(void *)(v2 + 16) = v14 + 1;
      *(void *)(v2 + 8 * v14 + 32) = v12;
      uint64_t v12 = BitSet.index(after:)();
      --v9;
    }
    while (v9);
    goto LABEL_21;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(Swift::Int a1, Swift::Int a2, float a3, float a4, float a5)
{
  if (a3 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
    *(void *)(v6 + 32) = a1;
    return v6;
  }
  if (a3 != 1.0)
  {
    uint64_t v15 = specialized LogitCollection.makeDenseLogits()(a1, a2, a4, a5);
    uint64_t v6 = (uint64_t)Array<A>.topP(_:)((uint64_t)v15, a3);
LABEL_12:
    swift_bridgeObjectRelease();
    return v6;
  }
  BitSet.init()();
  BitSet.insert(_:)(a1);
  BitSet.insert(_:)(a2);
  uint64_t v9 = BitSet.count.getter();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v10 = v9;
  uint64_t v16 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  uint64_t v6 = v16;
  uint64_t result = BitSet.startIndex.getter();
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = result;
    do
    {
      unint64_t v14 = *(void *)(v16 + 16);
      unint64_t v13 = *(void *)(v16 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v16 + 16) = v14 + 1;
      *(void *)(v16 + 8 * v14 + 32) = v12;
      uint64_t v12 = BitSet.index(after:)();
      --v10;
    }
    while (v10);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(Swift::Int a1, float a2, float a3)
{
  if (a2 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
    *(void *)(v4 + 32) = a1;
    return v4;
  }
  if (a2 != 1.0)
  {
    uint64_t v12 = specialized LogitCollection.makeDenseLogits()(a1, a3);
    uint64_t v4 = (uint64_t)Array<A>.topP(_:)((uint64_t)v12, a2);
LABEL_12:
    swift_bridgeObjectRelease();
    return v4;
  }
  BitSet.init()();
  BitSet.insert(_:)(a1);
  uint64_t v6 = BitSet.count.getter();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v7 = v6;
  uint64_t v13 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  uint64_t v4 = v13;
  uint64_t result = BitSet.startIndex.getter();
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = result;
    do
    {
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      uint64_t v9 = BitSet.index(after:)();
      --v7;
    }
    while (v7);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(float a1)
{
  if (a1 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    *(void *)(v2 + 32) = specialized LogitCollection.argmax()();
    return v2;
  }
  if (a1 != 1.0)
  {
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v12 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12 < 0) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](result, v13);
      void v14[2] = v1;
      unint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v14, 0, v12);
    }
    uint64_t v2 = (uint64_t)Array<A>.topP(_:)((uint64_t)v11, a1);
LABEL_16:
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v4 = BitSet.count.getter();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v2;
  }
  uint64_t v5 = v4;
  uint64_t v15 = MEMORY[0x263F8EE78];
  int64_t v6 = v4 & ~(v4 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v2 = v15;
  uint64_t result = BitSet.startIndex.getter();
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v15 = v2;
      unint64_t v10 = *(void *)(v2 + 16);
      unint64_t v9 = *(void *)(v2 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v2 = v15;
      }
      *(void *)(v2 + 16) = v10 + 1;
      *(void *)(v2 + 8 * v10 + 32) = v8;
      uint64_t v8 = BitSet.index(after:)();
      --v5;
    }
    while (v5);
    goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void v14[5];
  uint64_t v15;

  if (a1 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    *(void *)(v2 + 32) = specialized LogitCollection.argmax()();
    return v2;
  }
  if (a1 != 1.0)
  {
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v12 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v12 < 0) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](result, v13);
      void v14[2] = v1;
      unint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v14, 0, v12);
    }
    uint64_t v2 = (uint64_t)Array<A>.topP(_:)((uint64_t)v11, a1);
LABEL_16:
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v4 = BitSet.count.getter();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v2;
  }
  uint64_t v5 = v4;
  uint64_t v15 = MEMORY[0x263F8EE78];
  int64_t v6 = v4 & ~(v4 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v2 = v15;
  uint64_t result = BitSet.startIndex.getter();
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v15 = v2;
      unint64_t v10 = *(void *)(v2 + 16);
      unint64_t v9 = *(void *)(v2 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v2 = v15;
      }
      *(void *)(v2 + 16) = v10 + 1;
      *(void *)(v2 + 8 * v10 + 32) = v8;
      uint64_t v8 = BitSet.index(after:)();
      --v5;
    }
    while (v5);
    goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), void *a3, float a4)
{
  if (a4 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
    *(void *)(v6 + 32) = a2(a1);
    return v6;
  }
  if (a4 != 1.0)
  {
    uint64_t v20 = a1;
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v17 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v17 < 0) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](result, v18);
      void v19[2] = &v20;
      uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(a3, (uint64_t)v19, 0, v17);
    }
    uint64_t v6 = (uint64_t)Array<A>.topP(_:)((uint64_t)v16, a4);
LABEL_16:
    swift_bridgeObjectRelease();
    return v6;
  }
  uint64_t v8 = BitSet.count.getter();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v8) {
    return v6;
  }
  uint64_t v9 = v8;
  uint64_t v20 = MEMORY[0x263F8EE78];
  int64_t v10 = v8 & ~(v8 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  uint64_t v6 = v20;
  uint64_t result = BitSet.startIndex.getter();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = result;
    do
    {
      uint64_t v20 = v6;
      unint64_t v14 = *(void *)(v6 + 16);
      unint64_t v13 = *(void *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v6 = v20;
      }
      *(void *)(v6 + 16) = v14 + 1;
      *(void *)(v6 + 8 * v14 + 32) = v12;
      uint64_t v12 = BitSet.index(after:)();
      --v9;
    }
    while (v9);
    goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(Swift::Int a1, float a2)
{
  if (a2 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
    *(void *)(v3 + 32) = specialized LogitCollection.argmax()(a1);
    return v3;
  }
  if (a2 != 1.0)
  {
    unint64_t v11 = specialized LogitCollection.makeDenseLogits()(a1);
    uint64_t v3 = (uint64_t)Array<A>.topP(_:)((uint64_t)v11, a2);
LABEL_12:
    swift_bridgeObjectRelease();
    return v3;
  }
  BitSet.init()();
  BitSet.insert(_:)(a1);
  uint64_t v5 = BitSet.count.getter();
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v6 = v5;
  uint64_t v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  uint64_t v3 = v12;
  uint64_t result = BitSet.startIndex.getter();
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = result;
    do
    {
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v8;
      uint64_t v8 = BitSet.index(after:)();
      --v6;
    }
    while (v6);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t specialized LogitCollection.topP(_:)(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
    *(void *)(v4 + 32) = specialized LogitCollection.argmax()(a1);
    return v4;
  }
  if (a3 != 1.0)
  {
    v17[0] = a1;
    v17[1] = a2;
    swift_bridgeObjectRetain();
    if (BitSet.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
      unint64_t v13 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      BitSet.endIndex.getter();
      uint64_t v14 = BitSet.index(before:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v14 < 0) {
        goto LABEL_19;
      }
      MEMORY[0x270FA5388](result, v15);
      void v16[2] = v17;
      unint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v16, 0, v14);
    }
    uint64_t v4 = (uint64_t)Array<A>.topP(_:)((uint64_t)v13, a3);
LABEL_16:
    swift_bridgeObjectRelease();
    return v4;
  }
  uint64_t v6 = BitSet.count.getter();
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v6) {
    return v4;
  }
  uint64_t v7 = v6;
  v17[0] = MEMORY[0x263F8EE78];
  int64_t v8 = v6 & ~(v6 >> 63);
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  uint64_t v4 = v17[0];
  uint64_t result = BitSet.startIndex.getter();
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = result;
    do
    {
      v17[0] = v4;
      unint64_t v12 = *(void *)(v4 + 16);
      unint64_t v11 = *(void *)(v4 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v17[0];
      }
      *(void *)(v4 + 16) = v12 + 1;
      *(void *)(v4 + 8 * v12 + 32) = v10;
      uint64_t v10 = BitSet.index(after:)();
      --v7;
    }
    while (v7);
    goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t LogitCollection.topP(_:)(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_25FB61DF0;
    *(void *)(v5 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    return v5;
  }
  if (a3 == 1.0)
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    uint64_t v8 = BitSet.count.getter();
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    uint64_t v9 = v8;
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    uint64_t v5 = v15;
    uint64_t result = BitSet.startIndex.getter();
    if ((v9 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = result;
      do
      {
        unint64_t v12 = *(void *)(v15 + 16);
        unint64_t v11 = *(void *)(v15 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v15 + 16) = v12 + 1;
        *(void *)(v15 + 8 * v12 + 32) = v10;
        uint64_t v10 = BitSet.index(after:)();
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      return v5;
    }
    __break(1u);
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    uint64_t v14 = Array<A>.topP(_:)(v13, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

char *specialized LogitCollection.applySoftmax()(Swift::Int a1, Swift::Int a2, float a3, float a4)
{
  uint64_t v4 = (char *)specialized LogitCollection.makeDenseLogits()(a1, a2, a3, a4);
  uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v4 + 2));
  swift_bridgeObjectRetain();
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v6 = (const float *)*((void *)v5 + 2);
  v8[0] = (const float *)(v5 + 32);
  v8[1] = v6;
  closure #1 in Array<A>.applySoftmax()(v8, (uint64_t)v4, &v9);
  swift_bridgeObjectRelease();
  return v5;
}

char *specialized LogitCollection.applySoftmax()(Swift::Int a1, float a2)
{
  uint64_t v2 = (char *)specialized LogitCollection.makeDenseLogits()(a1, a2);
  uint64_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v2 + 2));
  swift_bridgeObjectRetain();
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v4 = (const float *)*((void *)v3 + 2);
  v6[0] = (const float *)(v3 + 32);
  v6[1] = v4;
  closure #1 in Array<A>.applySoftmax()(v6, (uint64_t)v2, &v7);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized LogitCollection.applySoftmax()()
{
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v2 = BitSet.index(before:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x270FA5388](result, v4);
    uint64_t v7[2] = v0;
    uint64_t v1 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v7, 0, v2);
  }
  uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v1 + 2));
  swift_bridgeObjectRetain();
  uint64_t v5 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v6 = (const float *)*((void *)v5 + 2);
  v8[0] = (const float *)(v5 + 32);
  v8[1] = v6;
  closure #1 in Array<A>.applySoftmax()(v8, (uint64_t)v1, &v9);
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  const float *v6;
  void v7[5];
  const float *v8[2];
  int64_t *v9;

  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v2 = BitSet.index(before:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x270FA5388](result, v4);
    uint64_t v7[2] = v0;
    uint64_t v1 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v7, 0, v2);
  }
  uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v1 + 2));
  swift_bridgeObjectRetain();
  uint64_t v5 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v6 = (const float *)*((void *)v5 + 2);
  v8[0] = (const float *)(v5 + 32);
  v8[1] = v6;
  closure #1 in Array<A>.applySoftmax()(v8, (uint64_t)v1, &v9);
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

char *specialized LogitCollection.applySoftmax()(Swift::Int a1)
{
  uint64_t v1 = (char *)specialized LogitCollection.makeDenseLogits()(a1);
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v1 + 2));
  swift_bridgeObjectRetain();
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
  }
  uint64_t v3 = (const float *)*((void *)v2 + 2);
  v5[0] = (const float *)(v2 + 32);
  v5[1] = v3;
  closure #1 in Array<A>.applySoftmax()(v5, (uint64_t)v1, &v6);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized LogitCollection.applySoftmax()(const float *a1, void *a2)
{
  v10[0] = a1;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v4 = BitSet.index(before:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x270FA5388](result, v6);
    v9[2] = v10;
    uint64_t v3 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(a2, (uint64_t)v9, 0, v4);
  }
  unint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v3 + 2));
  swift_bridgeObjectRetain();
  uint64_t v7 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
  }
  uint64_t v8 = (const float *)*((void *)v7 + 2);
  v10[0] = (const float *)(v7 + 32);
  v10[1] = v8;
  closure #1 in Array<A>.applySoftmax()(v10, (uint64_t)v3, &v11);
  swift_bridgeObjectRelease();
  return (uint64_t)v7;
}

uint64_t specialized LogitCollection.applySoftmax()(const float *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v3 = BitSet.index(before:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v3 < 0)
    {
      __break(1u);
      return result;
    }
    MEMORY[0x270FA5388](result, v5);
    uint64_t v8[2] = &v10;
    uint64_t v2 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, (uint64_t)v8, 0, v3);
  }
  uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *((void *)v2 + 2));
  swift_bridgeObjectRetain();
  uint64_t v6 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v7 = *((void *)v6 + 2);
  uint64_t v10 = (const float *)(v6 + 32);
  uint64_t v11 = v7;
  closure #1 in Array<A>.applySoftmax()(&v10, (uint64_t)v2, &v9);
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall LogitCollection.applySoftmax()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 64))();
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v1 + 16));
  swift_bridgeObjectRetain();
  uint64_t v2 = (char *)v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  }
  uint64_t v3 = (const float *)*((void *)v2 + 2);
  v7[0] = (const float *)(v2 + 32);
  v7[1] = v3;
  closure #1 in Array<A>.applySoftmax()(v7, v1, &v8);
  swift_bridgeObjectRelease();
  uint64_t v4 = v8;
  uint64_t v5 = v2;
  result._1._rawValue = v4;
  result._0._rawValue = v5;
  return result;
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance CompositeLanguageModel.CompositeLogitCollection()
{
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v2 = BitSet.index(before:)();
    Swift::tuple_OpaquePointer_OpaquePointer result = (void *)swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v3);
      v4[2] = v0;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v4, 0, v2);
    }
  }
  return result;
}

void *specialized LogitCollection.makeDenseLogits()(Swift::Int a1, Swift::Int a2, float a3, float a4)
{
  v10[0] = a1;
  v10[1] = a2;
  float v11 = a3;
  float v12 = a4;
  v9[6] = BitSet.init()();
  BitSet.insert(_:)(a1);
  BitSet.insert(_:)(a2);
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v7 = BitSet.index(before:)();
    Swift::tuple_OpaquePointer_OpaquePointer result = (void *)swift_bridgeObjectRelease();
    if (v7 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v8);
      v9[2] = v10;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v9, 0, v7);
    }
  }
  return result;
}

void *specialized LogitCollection.makeDenseLogits()(Swift::Int a1, float a2)
{
  Swift::Int v7 = a1;
  float v8 = a2;
  v6[7] = BitSet.init()();
  BitSet.insert(_:)(a1);
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v4 = BitSet.index(before:)();
    Swift::tuple_OpaquePointer_OpaquePointer result = (void *)swift_bridgeObjectRelease();
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v5);
      void v6[2] = &v7;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v6, 0, v4);
    }
  }
  return result;
}

void *specialized LogitCollection.makeDenseLogits()(Swift::Int a1)
{
  Swift::Int v6 = a1;
  v5[6] = BitSet.init()();
  BitSet.insert(_:)(a1);
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v3 = BitSet.index(before:)();
    Swift::tuple_OpaquePointer_OpaquePointer result = (void *)swift_bridgeObjectRelease();
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v4);
      uint64_t v5[2] = &v6;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v5, 0, v3);
    }
  }
  return result;
}

void *LogitCollection.makeDenseLogits()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 8))();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v6 = BitSet.index(before:)();
    Swift::tuple_OpaquePointer_OpaquePointer result = (void *)swift_bridgeObjectRelease();
    if (v6 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v7);
      uint64_t v8[2] = a1;
      int64_t v8[3] = a2;
      uint64_t v8[4] = v2;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v8, 0, v6);
    }
  }
  return result;
}

uint64_t UnconstrainedLogitCollection.init(vocabSize:)@<X0>(uint64_t result@<X0>, int64_t *a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = (int64_t *)result;
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = (int64_t *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = (int64_t)v2;
    v4[3] = 2 * (v6 >> 3);
    if (specialized Sequence._copySequenceContents(initializing:)(v12, v4 + 4, (int64_t)v2, 0, (int64_t)v2) == v2)goto LABEL_8; {
    __break(1u);
    }
  }
  uint64_t v4 = (int64_t *)MEMORY[0x263F8EE78];
LABEL_8:
  uint64_t v7 = BitSet.init()();
  v12[0] = v7;
  int64_t v8 = v4[2];
  if (v8)
  {
    swift_retain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      Swift::Int v10 = v4[i + 4];
      BitSet.insert(_:)(v10);
    }
    Swift::tuple_OpaquePointer_OpaquePointer result = swift_release_n();
    int64_t v11 = v12[0];
  }
  else
  {
    int64_t v11 = v7;
    Swift::tuple_OpaquePointer_OpaquePointer result = swift_release();
  }
  *a2 = v11;
  return result;
}

uint64_t SparseLogitCollection.init(allowedTokenIDs:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance ArgmaxLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*(void *)v1, a1, *(float *)(v1 + 8));
}

char *protocol witness for LogitCollection.applySoftmax() in conformance ArgmaxLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*(void *)v0, *(float *)(v0 + 8));
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance ArgmaxLogitCollection()
{
  return specialized LogitCollection.makeDenseLogits()(*(void *)v0, *(float *)(v0 + 8));
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance TopK2LogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*(void *)v1, *(void *)(v1 + 8), a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

char *protocol witness for LogitCollection.applySoftmax() in conformance TopK2LogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*(void *)v0, *(void *)(v0 + 8), *(float *)(v0 + 16), *(float *)(v0 + 20));
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance TopK2LogitCollection()
{
  return specialized LogitCollection.makeDenseLogits()(*(void *)v0, *(void *)(v0 + 8), *(float *)(v0 + 16), *(float *)(v0 + 20));
}

id protocol witness for RandomNumberGenerator.next() in conformance SeedableRandomNumberGenerator()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    return objc_msgSend(v1, sel_next);
  }
  else
  {
    uint64_t v3 = 0;
    MEMORY[0x261206FA0](&v3, 8);
    return (id)v3;
  }
}

void closure #1 in LogitCollection.argmax()(vDSP_Length __N@<X1>, const float *a2@<X0>, vDSP_Length *a3@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((__N & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  float __C = NAN;
  vDSP_Length __I = 0;
  if (!a2) {
    goto LABEL_7;
  }
  vDSP_maxvi(a2, 1, &__C, &__I, __N);
  if ((__I & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  *a3 = __I;
}

uint64_t Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  vDSP_Length v8 = *(void *)(a1 + 16);
  float __C = NAN;
  uint64_t v9 = (const float *)(a1 + 32);
  swift_bridgeObjectRetain();
  vDSP_maxv(v9, 1, &__C, v8);
  float v10 = __C;
  swift_bridgeObjectRetain();
  int64_t v11 = (char *)a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
  }
  float __C = -v10;
  vDSP_vsadd(v9, 1, &__C, (float *)v11 + 8, 1, v8);
  swift_bridgeObjectRelease();
  if (a4 != 0.0)
  {
    vDSP_Length v12 = *((void *)v11 + 2);
    swift_bridgeObjectRetain();
    uint64_t v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
    }
    float v18 = a4;
    vDSP_vsdiv((const float *)v11 + 8, 1, &v18, (float *)v13 + 8, 1, v12);
    swift_bridgeObjectRelease();
    int64_t v11 = v13;
  }
  if (*((void *)v11 + 2) >> 31)
  {
    __break(1u);
    goto LABEL_11;
  }
  LODWORD(__C) = *((void *)v11 + 2);
  swift_bridgeObjectRetain();
  uint64_t v14 = v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
  }
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
  vvexpf((float *)v14 + 8, (const float *)v11 + 8, (const int *)&__C);
  swift_bridgeObjectRelease();
  uint64_t v15 = Array<A>.sampleRandomElement(using:generator:)((uint64_t)v14, a2, a3);
  swift_bridgeObjectRelease();
  return v15;
}

void specialized static vDSP.add<A, B>(_:_:result:)(const float *a1, vDSP_Length __N, uint64_t a3, float a4)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 8) != __N)
  {
    __break(1u);
    goto LABEL_7;
  }
  float __B = a4;
  if (!a1)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!*(void *)a3) {
    goto LABEL_9;
  }
  if ((__N & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  vDSP_vsadd(a1, 1, &__B, *(float **)a3, 1, __N);
}

uint64_t Array<A>.sampleRandomElement(using:generator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  vDSP_Length v6 = *(void *)(a1 + 16);
  __C[0] = NAN;
  uint64_t v7 = (float *)(a1 + 32);
  vDSP_sve((const float *)(a1 + 32), 1, __C, v6);
  float v8 = __C[0];
  if (__C[0] < 0.0)
  {
    __break(1u);
    goto LABEL_12;
  }
  __C[0] = 0.0;
  __C[1] = v8;
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(void *)(a2 + 24));
  lazy protocol witness table accessor for type Float and conformance Float();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  if (!v6)
  {
LABEL_8:
    uint64_t v11 = *(void *)(a3 + 16);
    if (v11)
    {
      unint64_t v10 = v11 - 1;
      return *(void *)(a3 + 8 * v10 + 32);
    }
LABEL_12:
    __break(1u);
  }
  float v9 = *v7 + 0.0;
  unint64_t v10 = 0;
  if (v14 > v9)
  {
    while (v6 - 1 != v10)
    {
      float v9 = v9 + *(float *)(a1 + 36 + 4 * v10++);
      if (v14 <= v9) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  if (v10 >= *(void *)(a3 + 16))
  {
    __break(1u);
    goto LABEL_8;
  }
  return *(void *)(a3 + 8 * v10 + 32);
}

uint64_t Array<A>.topK(_:)(int64_t a1, char *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x270FA5388](v4 - 8, v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BNNS.Shape();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  MEMORY[0x270FA5388](v15, v16);
  int64_t v19 = *((void *)a2 + 2);
  if (v19 >= a1) {
    unint64_t v20 = a1;
  }
  else {
    unint64_t v20 = *((void *)a2 + 2);
  }
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (v20)
  {
    if (v20 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_25FB61DF0;
      *(void *)(v21 + 32) = specialized LogitCollection.argmax()((uint64_t)a2);
    }
    else
    {
      *(void *)&long long v79 = v7;
      uint64_t v76 = (char *)&v61 - v17;
      uint64_t v77 = v18;
      swift_bridgeObjectRetain();
      uint64_t v22 = specialized Array.init(repeating:count:)(0, v20);
      uint64_t v23 = specialized Array.init(repeating:count:)(v20, 0);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v80 = (char *)v23;
      uint64_t v68 = v9;
      uint64_t v69 = v8;
      uint64_t v78 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        a2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)a2);
      }
      uint64_t v70 = a2;
      uint64_t v67 = a2 + 32;
      *(void *)&long long v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v25 = swift_allocObject();
      long long v74 = xmmword_25FB61DF0;
      *(_OWORD *)(v25 + 16) = xmmword_25FB61DF0;
      *(void *)(v25 + 32) = v19;
      uint64_t v26 = type metadata accessor for BNNS.DataLayout();
      uint64_t v27 = *(void *)(v26 - 8);
      unint64_t v28 = *(void (**)(void, uint64_t, uint64_t))(v27 + 56);
      *(void *)&long long v73 = v26;
      *(void *)&long long v72 = v28;
      *(void *)&long long v71 = v27 + 56;
      v28(v79, 1, 1);
      BNNS.Shape.init(_:dataLayout:stride:)();
      int v29 = BNNS.Shape.layout.getter();
      BNNS.Shape.size.getter();
      long long v65 = *(_OWORD *)&v112[16];
      long long v66 = *(_OWORD *)v112;
      long long v64 = *(_OWORD *)&v112[32];
      uint64_t v30 = *(void *)&v112[48];
      uint64_t v31 = v113;
      BNNS.Shape.stride.getter();
      long long v62 = *(_OWORD *)&v112[16];
      long long v63 = *(_OWORD *)v112;
      long long v61 = *(_OWORD *)&v112[32];
      uint64_t v32 = *(void *)&v112[48];
      uint64_t v33 = v113;
      int v34 = static Float.bnnsDataType.getter();
      int v35 = static Float.bnnsDataType.getter();
      int v82 = 0;
      int v83 = v29;
      long long v84 = v66;
      long long v85 = v65;
      long long v86 = v64;
      uint64_t v87 = v30;
      uint64_t v88 = v31;
      long long v89 = v63;
      long long v90 = v62;
      long long v91 = v61;
      uint64_t v92 = v32;
      uint64_t v93 = v33;
      uint64_t v94 = v67;
      int v95 = v34;
      uint64_t v96 = 0;
      int v97 = v35;
      uint64_t v98 = 1065353216;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      }
      uint64_t v67 = (char *)(v22 + 32);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = v74;
      *(void *)(v36 + 32) = v20;
      ((void (*)(void, uint64_t, uint64_t, void))v72)(v79, 1, 1, v73);
      BNNS.Shape.init(_:dataLayout:stride:)();
      int v37 = BNNS.Shape.layout.getter();
      BNNS.Shape.size.getter();
      long long v65 = *(_OWORD *)&v112[16];
      long long v66 = *(_OWORD *)v112;
      long long v64 = *(_OWORD *)&v112[32];
      uint64_t v38 = *(void *)&v112[48];
      uint64_t v39 = v113;
      BNNS.Shape.stride.getter();
      long long v62 = *(_OWORD *)&v112[16];
      long long v63 = *(_OWORD *)v112;
      long long v61 = *(_OWORD *)&v112[32];
      uint64_t v40 = *(void *)&v112[48];
      uint64_t v41 = v113;
      int v42 = static Int32.bnnsDataType.getter();
      int v43 = static Int32.bnnsDataType.getter();
      *(_DWORD *)uint64_t v112 = 0;
      *(_DWORD *)&v112[4] = v37;
      *(_OWORD *)&v112[8] = v66;
      *(_OWORD *)&v112[24] = v65;
      *(_OWORD *)&v112[40] = v64;
      uint64_t v113 = v38;
      uint64_t v114 = v39;
      long long v115 = v63;
      long long v116 = v62;
      long long v117 = v61;
      uint64_t v118 = v40;
      uint64_t v119 = v41;
      uint64_t v120 = v67;
      int v121 = v42;
      uint64_t v122 = 0;
      int v123 = v43;
      uint64_t v124 = 1065353216;
      int v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v44 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v44);
      }
      uint64_t v80 = v44;
      uint64_t v67 = v44 + 32;
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v74;
      *(void *)(v45 + 32) = v20;
      ((void (*)(void, uint64_t, uint64_t, void))v72)(v79, 1, 1, v73);
      BNNS.Shape.init(_:dataLayout:stride:)();
      int v46 = BNNS.Shape.layout.getter();
      BNNS.Shape.size.getter();
      long long v79 = *(_OWORD *)v99;
      long long v74 = *(_OWORD *)&v99[32];
      long long v75 = *(_OWORD *)&v99[16];
      uint64_t v47 = *(void *)&v99[48];
      uint64_t v48 = v100;
      BNNS.Shape.stride.getter();
      long long v72 = *(_OWORD *)&v99[16];
      long long v73 = *(_OWORD *)v99;
      long long v71 = *(_OWORD *)&v99[32];
      uint64_t v50 = *(void *)&v99[48];
      uint64_t v49 = v100;
      int v51 = static Float.bnnsDataType.getter();
      int v52 = static Float.bnnsDataType.getter();
      *(_DWORD *)unint64_t v99 = 0;
      *(_DWORD *)&v99[4] = v46;
      *(_OWORD *)&v99[8] = v79;
      *(_OWORD *)&v99[24] = v75;
      *(_OWORD *)&v99[40] = v74;
      uint64_t v100 = v47;
      uint64_t v101 = v48;
      long long v102 = v73;
      long long v103 = v72;
      long long v104 = v71;
      uint64_t v105 = v50;
      uint64_t v106 = v49;
      uint64_t v107 = v67;
      int v108 = v51;
      uint64_t v109 = 0;
      int v110 = v52;
      uint64_t v111 = 1065353216;
      static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
      uint64_t v53 = v69;
      uint64_t v54 = *(void (**)(char *, uint64_t))(v68 + 8);
      v54(v78, v69);
      v54(v77, v53);
      v54(v76, v53);
      int64_t v55 = *(void *)(v22 + 16);
      if (v55)
      {
        uint64_t v81 = v21;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55, 0);
        uint64_t v56 = 0;
        uint64_t v21 = v81;
        unint64_t v57 = *(void *)(v81 + 16);
        do
        {
          uint64_t v58 = *(int *)(v22 + 4 * v56 + 32);
          uint64_t v81 = v21;
          unint64_t v59 = *(void *)(v21 + 24);
          if (v57 >= v59 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v57 + 1, 1);
            uint64_t v21 = v81;
          }
          ++v56;
          *(void *)(v21 + 16) = v57 + 1;
          *(void *)(v21 + 8 * v57++ + 32) = v58;
        }
        while (v55 != v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  return v21;
}

void *Array<A>.topP(_:)(uint64_t a1, float a2)
{
  uint64_t v2 = a1;
  if (a2 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
    *(void *)(v3 + 32) = specialized LogitCollection.argmax()(v2);
    return (void *)v3;
  }
  if (a2 == 1.0)
  {
    uint64_t v6 = *(int64_t **)(a1 + 16);
    if (!v6) {
      return (void *)MEMORY[0x263F8EE78];
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v3 = swift_allocObject();
    int64_t v7 = _swift_stdlib_malloc_size((const void *)v3);
    uint64_t v8 = v7 - 32;
    if (v7 < 32) {
      uint64_t v8 = v7 - 25;
    }
    *(void *)(v3 + 16) = v6;
    *(void *)(v3 + 24) = 2 * (v8 >> 3);
    if (specialized Sequence._copySequenceContents(initializing:)((int64_t *)v22, (int64_t *)(v3 + 32), (int64_t)v6, 0, (int64_t)v6) == v6)return (void *)v3; {
    __break(1u);
    }
  }
  uint64_t v23 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v2 + 16));
  swift_bridgeObjectRetain();
  uint64_t v9 = (char *)v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_31:
  }
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v10 = (const float *)*((void *)v9 + 2);
  uint64_t v11 = v9 + 32;
  v22[0] = (const float *)(v9 + 32);
  v22[1] = v10;
  closure #1 in Array<A>.applySoftmax()(v22, v2, &v23);
  uint64_t v2 = (uint64_t)v23;
  int64_t v12 = v23[2];
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v23[4];
  Swift::tuple_OpaquePointer_OpaquePointer result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  uint64_t v3 = (uint64_t)result;
  unint64_t v15 = result[2];
  unint64_t v14 = result[3];
  if (v15 >= v14 >> 1)
  {
    Swift::tuple_OpaquePointer_OpaquePointer result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, result);
    uint64_t v3 = (uint64_t)result;
  }
  *(void *)(v3 + 16) = v15 + 1;
  *(void *)(v3 + 8 * v15 + 32) = v13;
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *((void *)v9 + 2))
  {
    float v16 = *(float *)&v11[4 * v13] + 0.0;
    if (v16 < a2)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v15 + 5;
      int64_t v19 = v12 - 1;
      while (v19 != v17)
      {
        if ((unint64_t)(v17 + 1) >= *(void *)(v2 + 16))
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v2 + 40 + 8 * v17);
        unint64_t v21 = *(void *)(v3 + 24);
        if (v18 - 4 >= v21 >> 1) {
          uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v18 - 3, 1, (void *)v3);
        }
        *(void *)(v3 + 16) = v18 - 3;
        *(void *)(v3 + 8 * v18) = v20;
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_29;
        }
        if (v20 >= *((void *)v9 + 2)) {
          goto LABEL_30;
        }
        float v16 = v16 + *(float *)&v11[4 * v20];
        ++v18;
        ++v17;
        if (v16 >= a2) {
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)v3;
  }
  __break(1u);
  return result;
}

char *Array<A>.applySoftmax()(uint64_t a1)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(a1 + 16));
  swift_bridgeObjectRetain();
  uint64_t v2 = (char *)a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
  }
  uint64_t v3 = (const float *)*((void *)v2 + 2);
  v5[0] = (const float *)(v2 + 32);
  v5[1] = v3;
  closure #1 in Array<A>.applySoftmax()(v5, a1, &v6);
  return v2;
}

uint64_t closure #1 in Array<A>.applySoftmax()(const float **a1, uint64_t a2, void *a3)
{
  *(void *)&long long v49 = a2;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)type metadata accessor for BNNS.ActivationFunction();
  uint64_t v7 = *(v6 - 1);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x270FA5388](v11 - 8, v12);
  unint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BNNS.Shape();
  uint64_t v17 = MEMORY[0x270FA5388](v15, v16);
  unint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  vDSP_Length v21 = (vDSP_Length)a1[1];
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_8:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    *a3 = v6;
LABEL_5:
    if (*v44)
    {
      vDSP_vsorti(*v44, v6 + 4, 0, v6[2], -1);
      *a3 = v6;
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v20, v43);
    }
LABEL_10:
    __break(1u);
  }
  uint64_t v45 = v3;
  uint64_t v42 = v18;
  uint64_t v46 = v7;
  uint64_t v43 = v17;
  uint64_t v47 = v6;
  uint64_t v48 = (void **)a3;
  uint64_t v22 = *a1;
  float __C = NAN;
  if (!v22)
  {
    __break(1u);
    goto LABEL_10;
  }
  vDSP_maxv(v22, 1, &__C, v21);
  int v44 = a1;
  specialized static vDSP.add<A, B>(_:_:result:)(v22, v21, (uint64_t)a1, -__C);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25FB61DF0;
  *(void *)(v23 + 32) = *(void *)(v49 + 16);
  uint64_t v24 = type metadata accessor for BNNS.DataLayout();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v14, 1, 1, v24);
  BNNS.Shape.init(_:dataLayout:stride:)();
  int v25 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  long long v49 = *(_OWORD *)v51;
  long long v41 = *(_OWORD *)&v51[16];
  long long v40 = *(_OWORD *)&v51[32];
  uint64_t v27 = *(void *)&v51[48];
  uint64_t v26 = v52;
  BNNS.Shape.stride.getter();
  long long v39 = *(_OWORD *)v51;
  long long v38 = *(_OWORD *)&v51[16];
  long long v37 = *(_OWORD *)&v51[32];
  uint64_t v29 = *(void *)&v51[48];
  uint64_t v28 = v52;
  int v30 = static Float.bnnsDataType.getter();
  int v31 = static Float.bnnsDataType.getter();
  *(_DWORD *)int v51 = 0;
  *(_DWORD *)&v51[4] = v25;
  *(_OWORD *)&v51[8] = v49;
  *(_OWORD *)&v51[24] = v41;
  *(_OWORD *)&v51[40] = v40;
  uint64_t v52 = v27;
  uint64_t v53 = v26;
  long long v54 = v39;
  long long v55 = v38;
  long long v56 = v37;
  uint64_t v57 = v29;
  uint64_t v58 = v28;
  unint64_t v59 = v22;
  uint64_t v61 = 0;
  int v60 = v30;
  int v62 = v31;
  uint64_t v63 = 1065353216;
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  (*(void (**)(char *, void, void *))(v46 + 104))(v10, *MEMORY[0x263F8CB50], v47);
  int v34 = v45;
  static BNNS.applyActivation(activation:input:output:batchSize:filterParameters:)();
  if (!v34)
  {
    (*(void (**)(char *, void *))(v32 + 8))(v10, v33);
    a3 = v48;
    uint64_t v6 = *v48;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v6;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }

  (*(void (**)(char *, void *))(v32 + 8))(v10, v33);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t Array<A>.indexSet.getter(uint64_t a1)
{
  uint64_t v1 = *(int64_t **)(a1 + 16);
  if (!v1) {
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v2 = (int64_t *)swift_allocObject();
  int64_t v3 = _swift_stdlib_malloc_size(v2);
  uint64_t v4 = v3 - 32;
  if (v3 < 32) {
    uint64_t v4 = v3 - 25;
  }
  v2[2] = (int64_t)v1;
  void v2[3] = 2 * (v4 >> 3);
  if (specialized Sequence._copySequenceContents(initializing:)(v11, v2 + 4, (int64_t)v1, 0, (int64_t)v1) != v1)
  {
    __break(1u);
LABEL_6:
    uint64_t v2 = (int64_t *)MEMORY[0x263F8EE78];
  }
  uint64_t v5 = BitSet.init()();
  v11[0] = v5;
  int64_t v6 = v2[2];
  if (v6)
  {
    swift_retain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      Swift::Int v8 = v2[i + 4];
      BitSet.insert(_:)(v8);
    }
    swift_release_n();
    return v11[0];
  }
  else
  {
    uint64_t v9 = v5;
    swift_release();
  }
  return v9;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance <A> [A]()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(*(void *)v0 + 16));
  uint64_t v2 = specialized BitSet.init<A>(_:)((uint64_t)v1);
  swift_release();
  return v2;
}

unint64_t protocol witness for LogitCollection.subscript.getter in conformance <A> [A](unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)v1 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for LogitCollection.withContiguousStorageIfAvailable<A>(_:) in conformance <A> [A]()
{
  return Array.withContiguousStorageIfAvailable<A>(_:)();
}

vDSP_Length protocol witness for LogitCollection.argmax() in conformance <A> [A]()
{
  return specialized LogitCollection.argmax()(*v0);
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance <A> [A](int64_t a1)
{
  return Array<A>.topK(_:)(a1, *v1);
}

void *protocol witness for LogitCollection.topP(_:) in conformance <A> [A](float a1)
{
  return Array<A>.topP(_:)(*v1, a1);
}

char *protocol witness for LogitCollection.applySoftmax() in conformance <A> [A]()
{
  return Array<A>.applySoftmax()(*v0);
}

uint64_t protocol witness for LogitCollection.makeDenseLogits() in conformance <A> [A]()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in LogitCollection.makeDenseLogits()(Swift::Int a1, Swift::Int a2, Swift::Int a3)
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in LogitCollection.makeDenseLogits()(Swift::Int a1, Swift::Int a2)
{
  return swift_bridgeObjectRelease();
}

float specialized closure #1 in LogitCollection.makeDenseLogits()(Swift::Int a1, Swift::Int a2)
{
  BitSet.init()();
  BitSet.insert(_:)(a2);
  Swift::Bool v4 = BitSet.contains(_:)(a1);
  swift_bridgeObjectRelease();
  float result = -10000.0 - (float)a1;
  float v6 = -65504.0;
  if (a1 == a2) {
    float v6 = 0.0;
  }
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, float *a4@<X8>)
{
  Swift::Int v7 = *a1;
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  Swift::Bool v8 = BitSet.contains(_:)(v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8) {
    uint64_t result = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(a3 + 16))(v7, a2, a3);
  }
  else {
    float v10 = -10000.0 - (float)v7;
  }
  *a4 = v10;
  return result;
}

uint64_t GreedySampling.__allocating_init(generator:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x270FA5388](v5, v5);
  Swift::Int v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized GreedySampling.__allocating_init(generator:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t GreedySampling.init(generator:)(long long *a1)
{
  outlined init with take of LogitCollection(a1, v1 + 16);
  return v1;
}

uint64_t GreedySampling.pickToken(_:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)@<X0>(Swift::Int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::Int v5 = *a1;
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  Swift::Bool v8 = BitSet.contains(_:)(v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v10);
    uint64_t result = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v11 + 16))(v5, v10, v11);
  }
  else
  {
    Swift::Int v5 = 0;
    int v12 = 0;
  }
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 12) = !v8;
  return result;
}

void GreedySampling.makePresampler()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ArgmaxPresampler;
  *(void *)(a1 + 32) = &protocol witness table for ArgmaxPresampler;
}

uint64_t GreedySampling.pickToken(targetLogits:draftLogits:draftTokens:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for speculativeDecode != -1) {
LABEL_41:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.speculativeDecode);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_25FA51000, v9, v10, "Acceptance threshold is unused for speculative sampling.", v11, 2u);
    MEMORY[0x261206F80](v11, -1, -1);
  }

  if (*(void *)(a3 + 16))
  {
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 32);
    __swift_project_boxed_opaque_existential_1((void *)a2, v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 56))(v15, v16);
    swift_bridgeObjectRelease();
    unint64_t v18 = 0;
    int64_t v19 = 0;
    uint64_t v20 = a3 + 56;
    uint64_t v21 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v22 = -1;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    unint64_t v23 = v22 & *(void *)(a3 + 56);
    int64_t v24 = (unint64_t)(v21 + 63) >> 6;
    float v25 = 0.0;
LABEL_8:
    float v26 = v25;
    a2 = v18;
    while (1)
    {
      if (v23)
      {
        unint64_t v27 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        unint64_t v28 = v27 | (v19 << 6);
      }
      else
      {
        int64_t v29 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_39;
        }
        if (v29 >= v24)
        {
LABEL_29:
          uint64_t result = swift_bridgeObjectRelease();
          if (a2 >= *(void *)(v17 + 16))
          {
            __break(1u);
          }
          else
          {
            float v33 = *(float *)(v17 + 4 * a2 + 32);
            swift_bridgeObjectRelease();
            if (v26 >= v33)
            {
              swift_beginAccess();
              __swift_mutable_project_boxed_opaque_existential_1(v4 + 16, *(void *)(v4 + 40));
              lazy protocol witness table accessor for type Float and conformance Float();
              lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              static BinaryFloatingPoint<>.random<A>(in:using:)();
              swift_endAccess();
              if (v41 >= (float)(v33 / v26))
              {
                uint64_t v34 = a1[3];
                uint64_t v35 = a1[4];
                __swift_project_boxed_opaque_existential_1(a1, v34);
                return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
              }
            }
            return a2;
          }
          return result;
        }
        unint64_t v30 = *(void *)(v20 + 8 * v29);
        ++v19;
        if (!v30)
        {
          int64_t v19 = v29 + 1;
          if (v29 + 1 >= v24) {
            goto LABEL_29;
          }
          unint64_t v30 = *(void *)(v20 + 8 * v19);
          if (!v30)
          {
            int64_t v19 = v29 + 2;
            if (v29 + 2 >= v24) {
              goto LABEL_29;
            }
            unint64_t v30 = *(void *)(v20 + 8 * v19);
            if (!v30)
            {
              int64_t v31 = v29 + 3;
              if (v31 >= v24) {
                goto LABEL_29;
              }
              unint64_t v30 = *(void *)(v20 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v19 = v31 + 1;
                  if (__OFADD__(v31, 1)) {
                    goto LABEL_40;
                  }
                  if (v19 >= v24) {
                    goto LABEL_29;
                  }
                  unint64_t v30 = *(void *)(v20 + 8 * v19);
                  ++v31;
                  if (v30) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v19 = v31;
            }
          }
        }
LABEL_24:
        unint64_t v23 = (v30 - 1) & v30;
        unint64_t v28 = __clz(__rbit64(v30)) + (v19 << 6);
      }
      unint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v28);
      if ((v18 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v18 >= *(void *)(v14 + 16)) {
        goto LABEL_38;
      }
      float v25 = *(float *)(v14 + 32 + 4 * v18);
      if (v26 < v25) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    long long v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v38 = 0;
    _os_log_impl(&dword_25FA51000, v36, v37, "No draft logits supplied for speculative sampling; performing greedy sampling instead.  This is a logic error, not a user error.",
      v38,
      2u);
    MEMORY[0x261206F80](v38, -1, -1);
  }

  uint64_t v39 = a1[3];
  uint64_t v40 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
}

uint64_t GreedySampling.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t GreedySampling.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance GreedySampling(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance GreedySampling(void *a1, uint64_t a2, uint64_t a3)
{
  return GreedySampling.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3);
}

void protocol witness for TokenSampling.makePresampler() in conformance GreedySampling(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for ArgmaxPresampler;
  *(void *)(a1 + 32) = &protocol witness table for ArgmaxPresampler;
}

uint64_t TopK.__allocating_init(k:temperature:randomSeed:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  if (a3) {
    id v6 = 0;
  }
  else {
    id v6 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a2);
  }
  os_log_type_t v10 = &type metadata for SeedableRandomNumberGenerator;
  unint64_t v11 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(void *)&long long v9 = v6;
  uint64_t v7 = swift_allocObject();
  TopK.init(k:temperature:generator:)(a1, &v9, a4);
  return v7;
}

uint64_t TopK.__allocating_init(k:temperature:generator:)(uint64_t a1, long long *a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  TopK.init(k:temperature:generator:)(a1, a2, a3);
  return v6;
}

float *TopK.init(k:temperature:generator:)(uint64_t a1, long long *a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v4;
  uint64_t v9 = type metadata accessor for TokenGenerationError.Context();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 > 0.0 && a3 <= 2.0)
  {
    *((void *)v4 + 2) = a1;
    float v24 = a3;
    v4[6] = v24;
    outlined init with take of LogitCollection(a2, (uint64_t)(v4 + 8));
  }
  else
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    v26[1] = v8;
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.device);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 134217984;
      double v27 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v16, v17, "Invalid top-k temperature value %f, should be between (0.0, 2.0]", v18, 0xCu);
      MEMORY[0x261206F80](v18, -1, -1);
    }

    double v27 = 0.0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    v19._object = (void *)0x800000025FB6BF90;
    v19._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v19);
    Double.write<A>(to:)();
    v20._countAndFlagsBits = 0xD00000000000001ELL;
    v20._object = (void *)0x800000025FB6BFB0;
    String.append(_:)(v20);
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v21 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError();
    swift_allocError();
    uint64_t v23 = v22;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v22, v13, v9);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F7F810], v21);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t TopK.pickToken(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v5 + 40))(*(void *)(v1 + 16), v4, v5);
  unsigned char v11[2] = a1;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v11, v6);
  float v8 = *(float *)(v2 + 24);
  swift_beginAccess();
  uint64_t v9 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v7, v2 + 32, v6, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(void *a1, uint64_t a2, float a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v9 + 40))(*(void *)(v3 + 16), v8, v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  float v11 = LogitCollection.max()() - a3;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Set.init<A>(_:)(v12);
  swift_bridgeObjectRelease();
  unint64_t v30 = a1;
  float v31 = v11;
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:), (uint64_t)v29, a2);
  uint64_t v15 = specialized _NativeSet.intersection(_:)(v14, v13);
  swift_release();
  uint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(v15);
  swift_release();
  if (v16[2])
  {
    uint64_t v17 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v17, v18);
    unint64_t v28 = a1;
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v27, (uint64_t)v16);
    float v20 = *(float *)(v4 + 24);
    swift_beginAccess();
    uint64_t v21 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v19, v4 + 32, (uint64_t)v16, v20);
    swift_endAccess();
    swift_release();
  }
  else
  {
    uint64_t v22 = swift_release();
    MEMORY[0x270FA5388](v22, v23);
    unint64_t v28 = a1;
    uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v27, v10);
    float v25 = *(float *)(v4 + 24);
    swift_beginAccess();
    uint64_t v21 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v24, v4 + 32, v10, v25);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v21;
}

void TopK.makePresampler()(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = &protocol witness table for TopK2Presampler;
  uint64_t v4 = &protocol witness table for BasicLogitPresampler;
  uint64_t v5 = &type metadata for BasicLogitPresampler;
  if (v2 == 1)
  {
    uint64_t v5 = &type metadata for ArgmaxPresampler;
    uint64_t v4 = &protocol witness table for ArgmaxPresampler;
  }
  BOOL v6 = v2 == 2;
  if (v2 == 2) {
    uint64_t v7 = &type metadata for TopK2Presampler;
  }
  else {
    uint64_t v7 = v5;
  }
  if (!v6) {
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v3;
}

uint64_t TopK.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return v0;
}

uint64_t TopK.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance TopK(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v5 + 40))(*(void *)(v3 + 16), v4, v5);
  unsigned char v11[2] = a1;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v11, v6);
  float v8 = *(float *)(v3 + 24);
  swift_beginAccess();
  uint64_t v9 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v7, v3 + 32, v6, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance TopK(void *a1, uint64_t a2, float a3)
{
  return TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, a2, a3);
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance TopK(void *a1)
{
  return specialized TopK.pickToken(targetLogits:draftLogits:draftTokens:)(a1);
}

void protocol witness for TokenSampling.makePresampler() in conformance TopK(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = &protocol witness table for TopK2Presampler;
  uint64_t v4 = &protocol witness table for BasicLogitPresampler;
  uint64_t v5 = &type metadata for BasicLogitPresampler;
  if (v2 == 1)
  {
    uint64_t v5 = &type metadata for ArgmaxPresampler;
    uint64_t v4 = &protocol witness table for ArgmaxPresampler;
  }
  BOOL v6 = v2 == 2;
  if (v2 == 2) {
    uint64_t v7 = &type metadata for TopK2Presampler;
  }
  else {
    uint64_t v7 = v5;
  }
  if (!v6) {
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v3;
}

uint64_t NucleusSampling.__allocating_init(p:temperature:randomSeed:)(uint64_t a1, char a2, double a3, double a4)
{
  if (a2) {
    id v6 = 0;
  }
  else {
    id v6 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a1);
  }
  uint64_t v10 = &type metadata for SeedableRandomNumberGenerator;
  unint64_t v11 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(void *)&long long v9 = v6;
  uint64_t v7 = swift_allocObject();
  NucleusSampling.init(p:temperature:generator:)(&v9, a3, a4);
  return v7;
}

uint64_t NucleusSampling.__allocating_init(p:temperature:generator:)(long long *a1, double a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  NucleusSampling.init(p:temperature:generator:)(a1, a2, a3);
  return v6;
}

uint64_t NucleusSampling.init(p:temperature:generator:)(long long *a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for TokenGenerationError.Context();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    if (a3 > 0.0 && a3 <= 2.0)
    {
      float v30 = a2;
      float v31 = a3;
      *(float *)(v3 + 16) = v30;
      *(float *)(v3 + 20) = v31;
      outlined init with take of LogitCollection(a1, v3 + 24);
      return v4;
    }
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.device);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134217984;
      double v33 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v22, v23, "Invalid nucleous sampling temperature value %f, should be between (0.0, 2.0]", v24, 0xCu);
      MEMORY[0x261206F80](v24, -1, -1);
    }

    double v33 = 0.0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    v25._countAndFlagsBits = 0xD000000000000012;
    v25._object = (void *)0x800000025FB6BF90;
    String.append(_:)(v25);
    Double.write<A>(to:)();
    uint64_t v19 = ", should be between (0.0, 2.0]";
  }
  else
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.device);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      double v33 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v15, v16, "Invalid nucleous sampling p value %f, should be between [0.0, 1.0]", v17, 0xCu);
      MEMORY[0x261206F80](v17, -1, -1);
    }

    double v33 = 0.0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v18._countAndFlagsBits = 0x2065756C61762070;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    Double.write<A>(to:)();
    uint64_t v19 = ", should be between [0.0, 1.0]";
  }
  v26._object = (void *)((unint64_t)(v19 - 32) | 0x8000000000000000);
  v26._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v26);
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  uint64_t v27 = type metadata accessor for TokenGenerationError();
  lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError();
  swift_allocError();
  uint64_t v29 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v28, v12, v8);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F7F810], v27);
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t NucleusSampling.pickToken(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, float))(v5 + 48))(v4, v5, *(float *)(v1 + 16));
  unsigned char v11[2] = a1;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v11, v6);
  float v8 = *(float *)(v2 + 20);
  swift_beginAccess();
  uint64_t v9 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v7, v2 + 24, v6, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(void *a1, uint64_t a2, float a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, float))(v9 + 48))(v8, v9, *(float *)(v3 + 16));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  float v11 = LogitCollection.max()() - a3;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Set.init<A>(_:)(v12);
  swift_bridgeObjectRelease();
  float v30 = a1;
  float v31 = v11;
  swift_bridgeObjectRetain();
  uint64_t v14 = specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:), (uint64_t)v29, a2);
  uint64_t v15 = specialized _NativeSet.intersection(_:)(v14, v13);
  swift_release();
  os_log_type_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(v15);
  swift_release();
  if (v16[2])
  {
    uint64_t v17 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v17, v18);
    uint64_t v28 = a1;
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v27, (uint64_t)v16);
    float v20 = *(float *)(v4 + 20);
    swift_beginAccess();
    uint64_t v21 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v19, v4 + 24, (uint64_t)v16, v20);
    swift_endAccess();
    swift_release();
  }
  else
  {
    uint64_t v22 = swift_release();
    MEMORY[0x270FA5388](v22, v23);
    uint64_t v28 = a1;
    uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v27, v10);
    float v25 = *(float *)(v4 + 20);
    swift_beginAccess();
    uint64_t v21 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v24, v4 + 24, v10, v25);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v21;
}

BOOL closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1, void *a2, float a3)
{
  Swift::Int v5 = *a1;
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  LOBYTE(v6) = BitSet.contains(_:)(v5);
  swift_bridgeObjectRelease();
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, (uint64_t)v12);
  if (v6)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    BOOL v10 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v9 + 16))(v5, v8, v9) > a3;
  }
  else
  {
    BOOL v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10;
}

uint64_t NucleusSampling.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t NucleusSampling.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance NucleusSampling(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, float))(v5 + 48))(v4, v5, *(float *)(v3 + 16));
  unsigned char v11[2] = a1;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v11, v6);
  float v8 = *(float *)(v3 + 20);
  swift_beginAccess();
  uint64_t v9 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v7, v3 + 24, v6, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance NucleusSampling(void *a1, uint64_t a2, float a3)
{
  return NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, a2, a3);
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance NucleusSampling(void *a1)
{
  return specialized NucleusSampling.pickToken(targetLogits:draftLogits:draftTokens:)(a1);
}

uint64_t SparseLogitCollection.indexSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SparseLogitCollection.indexSet.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*SparseLogitCollection.indexSet.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SparseLogitCollection.subscript.getter(Swift::Int a1)
{
  Swift::Bool v1 = BitSet.contains(_:)(a1);
  float result = -65504.0;
  if (v1) {
    return 0.0;
  }
  return result;
}

float protocol witness for LogitCollection.subscript.getter in conformance SparseLogitCollection(Swift::Int a1)
{
  Swift::Bool v1 = BitSet.contains(_:)(a1);
  float result = -65504.0;
  if (v1) {
    return 0.0;
  }
  return result;
}

Swift::Int protocol witness for LogitCollection.argmax() in conformance SparseLogitCollection()
{
  return specialized LogitCollection.argmax()();
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance SparseLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1, (uint64_t (*)(uint64_t))specialized LogitCollection.argmax(), closure #1 in LogitCollection.makeDenseLogits()specialized partial apply);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance SparseLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, (uint64_t (*)(uint64_t))specialized LogitCollection.argmax(), closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, a1);
}

uint64_t protocol witness for LogitCollection.applySoftmax() in conformance SparseLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*v0, closure #1 in LogitCollection.makeDenseLogits()specialized partial apply);
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(a1, a2, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

uint64_t (*UnconstrainedLogitCollection.indexSet.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float UnconstrainedLogitCollection.subscript.getter()
{
  return 1.0;
}

float protocol witness for LogitCollection.subscript.getter in conformance UnconstrainedLogitCollection()
{
  return 1.0;
}

Swift::Int protocol witness for LogitCollection.argmax() in conformance UnconstrainedLogitCollection()
{
  BitSet.Iterator.init(_:)();
  Swift::Int_optional v3 = BitSet.Iterator.next()();
  Swift::Int value = 0;
  if (!v3.is_nil)
  {
    float v1 = -3.4028e38;
    do
    {
      if (v1 < 1.0)
      {
        Swift::Int value = v3.value;
        float v1 = 1.0;
      }
      Swift::Int_optional v3 = BitSet.Iterator.next()();
    }
    while (!v3.is_nil);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return value;
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance UnconstrainedLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance UnconstrainedLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, a1);
}

uint64_t protocol witness for LogitCollection.applySoftmax() in conformance UnconstrainedLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*v0, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance UnconstrainedLogitCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(a1, a2, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

uint64_t MaskedLogitCollection.logits.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DeterministicLanguageModelProtocol(v1, a1);
}

uint64_t MaskedLogitCollection.logits.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return outlined init with take of LogitCollection(a1, v1);
}

uint64_t (*MaskedLogitCollection.logits.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t MaskedLogitCollection.indexSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaskedLogitCollection.indexSet.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*MaskedLogitCollection.indexSet.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t MaskedLogitCollection.subscript.getter(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance MaskedLogitCollection()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for LogitCollection.subscript.getter in conformance MaskedLogitCollection(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance MaskedLogitCollection()
{
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v2 = BitSet.index(before:)();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v3);
      v4[2] = v0;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v4, 0, v2);
    }
  }
  return result;
}

uint64_t ClassificationSampling.init(defaultClass:outputClasses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for TokenGenerationError.Context();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  BOOL v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11 != 1)
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.device);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = v6;
      uint64_t v30 = v11;
      os_log_type_t v16 = v15;
      *(_DWORD *)uint64_t v15 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v13, v14, "Invalid number of non-default output classes for classification sampling (%ld), there should only be one non-default output class", v16, 0xCu);
      uint64_t v6 = v29;
      MEMORY[0x261206F80](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v21._countAndFlagsBits = 0xD00000000000001CLL;
    v21._object = (void *)0x800000025FB6C110;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    uint64_t v32 = v11;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._object = (void *)0x800000025FB6C130;
    v23._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v23);
    goto LABEL_16;
  }
  if (a1 < 0 || (*(void *)(a2 + 32) & 0x8000000000000000) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.device);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      float v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v20 = 0;
      _os_log_impl(&dword_25FA51000, v18, v19, "Invalid token ID for classification sampling output classes, token ID should be a positive integer", v20, 2u);
      MEMORY[0x261206F80](v20, -1, -1);
    }

LABEL_16:
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v24 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError();
    swift_allocError();
    uint64_t v26 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v25, v10, v6);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x263F7F810], v24);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_deallocPartialClassInstance();
    return v3;
  }
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return v3;
}

unint64_t ClassificationSampling.pickToken(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    goto LABEL_14;
  }
  unint64_t v8 = *(void *)(v6 + 32);
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v9 = *(void *)(v5 + 16);
  if (v8 >= v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*(float *)(v6 + 40) > *(float *)(v5 + 32 + 4 * v8))
  {
    BOOL v10 = (float *)(v6 + 56);
    while (--v7)
    {
      unint64_t v8 = *((void *)v10 - 1);
      if (v8 >= v9)
      {
        __break(1u);
        goto LABEL_21;
      }
      float v11 = *v10;
      v10 += 4;
      if (v11 <= *(float *)(v5 + 32 + 4 * v8)) {
        goto LABEL_9;
      }
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if (one-time initialization token for device == -1)
    {
LABEL_15:
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.device);
      swift_retain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v19 = 134545665;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v17, v18, "Classification sampling - Picked default token %{sensitive}ld", v19, 0xCu);
        MEMORY[0x261206F80](v19, -1, -1);
      }
      else
      {

        swift_release();
      }
      return *(void *)(v2 + 16);
    }
LABEL_23:
    swift_once();
    goto LABEL_15;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.device);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134545665;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v13, v14, "Classification sampling - Picked class token %{sensitive}ld over class threshold", v15, 0xCu);
    MEMORY[0x261206F80](v15, -1, -1);
  }

  return v8;
}

unint64_t ClassificationSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(void *a1)
{
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.device);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25FA51000, v3, v4, "Speculative sampling is not implemented for classification sampling.  Resorting to normal classification sampling.", v5, 2u);
    MEMORY[0x261206F80](v5, -1, -1);
  }

  return ClassificationSampling.pickToken(_:)(a1);
}

unint64_t ClassificationSampling.pickToken(targetLogits:draftLogits:draftTokens:)(void *a1)
{
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.device);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25FA51000, v3, v4, "Speculative sampling is not implemented for classification sampling.  Resorting to normal classification sampling.", v5, 2u);
    MEMORY[0x261206F80](v5, -1, -1);
  }

  return ClassificationSampling.pickToken(_:)(a1);
}

uint64_t ClassificationSampling.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ClassificationSampling.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for TokenSampling.pickToken(_:) in conformance ClassificationSampling(void *a1)
{
  return ClassificationSampling.pickToken(_:)(a1);
}

unint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance ClassificationSampling(void *a1)
{
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.device);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25FA51000, v3, v4, "Speculative sampling is not implemented for classification sampling.  Resorting to normal classification sampling.", v5, 2u);
    MEMORY[0x261206F80](v5, -1, -1);
  }

  return ClassificationSampling.pickToken(_:)(a1);
}

Swift::Int protocol witness for LogitCollection.argmax() in conformance MaskedLanguageModel.SingleLogitCollection()
{
  BitSet.Iterator.init(_:)();
  Swift::Int_optional v3 = BitSet.Iterator.next()();
  Swift::Int value = 0;
  if (!v3.is_nil)
  {
    float v1 = -3.4028e38;
    do
    {
      if (v1 < 0.0)
      {
        Swift::Int value = v3.value;
        float v1 = 0.0;
      }
      Swift::Int_optional v3 = BitSet.Iterator.next()();
    }
    while (!v3.is_nil);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return value;
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance MaskedLanguageModel.SingleLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance MaskedLanguageModel.SingleLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, a1);
}

uint64_t protocol witness for LogitCollection.applySoftmax() in conformance MaskedLanguageModel.SingleLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*v0, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance MaskedLanguageModel.SingleLogitCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(a1, a2, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

Swift::Int protocol witness for LogitCollection.argmax() in conformance PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  return specialized LogitCollection.argmax()();
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance PrefixGuidedLanguageModel.PrefixLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1, (uint64_t (*)(uint64_t))specialized LogitCollection.argmax(), closure #1 in LogitCollection.makeDenseLogits()specialized partial apply);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance PrefixGuidedLanguageModel.PrefixLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, (uint64_t (*)(uint64_t))specialized LogitCollection.argmax(), closure #1 in LogitCollection.makeDenseLogits()specialized partial apply, a1);
}

uint64_t protocol witness for LogitCollection.applySoftmax() in conformance PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*v0, closure #1 in LogitCollection.makeDenseLogits()specialized partial apply);
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance PrefixGuidedLanguageModel.PrefixLogitCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(a1, a2, partial apply for specialized closure #1 in LogitCollection.makeDenseLogits());
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance SparseLogitCollection(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *v3;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v6 = BitSet.index(before:)();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v6 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v7);
      uint64_t v8[2] = &v9;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(a3, (uint64_t)v8, 0, v6);
    }
  }
  return result;
}

Swift::Int protocol witness for LogitCollection.argmax() in conformance PromptLookupLanguageModel.OneTokenLogitCollection()
{
  return specialized LogitCollection.argmax()(*v0);
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance PromptLookupLanguageModel.OneTokenLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance PromptLookupLanguageModel.OneTokenLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, a1);
}

char *protocol witness for LogitCollection.applySoftmax() in conformance PromptLookupLanguageModel.OneTokenLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*v0);
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance PromptLookupLanguageModel.OneTokenLogitCollection()
{
  return specialized LogitCollection.makeDenseLogits()(*v0);
}

uint64_t protocol witness for LogitCollection.argmax() in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return specialized LogitCollection.argmax()(*v0);
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(int64_t a1)
{
  return specialized LogitCollection.topK(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for LogitCollection.topP(_:) in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(float a1)
{
  return specialized LogitCollection.topP(_:)(*v1, v1[1], a1);
}

uint64_t protocol witness for LogitCollection.applySoftmax() in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return specialized LogitCollection.applySoftmax()(*(const float **)v0, *(void *)(v0 + 8));
}

void *protocol witness for LogitCollection.makeDenseLogits() in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  v7[0] = v1;
  v7[1] = v2;
  swift_bridgeObjectRetain();
  if (BitSet.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    BitSet.endIndex.getter();
    uint64_t v4 = BitSet.index(before:)();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      MEMORY[0x270FA5388](result, v5);
      void v6[2] = v7;
      return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSNySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in LogitCollection.makeDenseLogits(), (uint64_t)v6, 0, v4);
    }
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t partial apply for closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return closure #1 in LogitCollection.makeDenseLogits()(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

int64_t *specialized Sequence._copySequenceContents(initializing:)(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    void *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      BOOL v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_25FB5F150);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        int64x2_t *v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      BOOL v10 = a2;
    }
    uint64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    void *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    void *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    float v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe, a2);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x261206F80](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = (unint64_t *)result;
  uint64_t v6 = 0;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }
      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v16 >= v12) {
          goto LABEL_60;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v12) {
            goto LABEL_60;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v7);
          if (!v17)
          {
            int64_t v7 = v16 + 2;
            if (v16 + 2 >= v12) {
              goto LABEL_60;
            }
            unint64_t v17 = *(void *)(v8 + 8 * v7);
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v12)
              {
LABEL_60:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v45, a2, v6, a3);
              }
              unint64_t v17 = *(void *)(v8 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  int64_t v7 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    break;
                  }
                  if (v7 >= v12) {
                    goto LABEL_60;
                  }
                  unint64_t v17 = *(void *)(v8 + 8 * v7);
                  ++v18;
                  if (v17) {
                    goto LABEL_21;
                  }
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              int64_t v7 = v18;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(a4 + 48) + 8 * v15);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v20 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      uint64_t v23 = 1 << v21;
      if (((1 << v21) & *(void *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v24 = *(void *)(a3 + 48);
        if (*(void *)(v24 + 8 * v21) != v19)
        {
          for (unint64_t i = v21 + 1; ; unint64_t i = v26 + 1)
          {
            unint64_t v26 = i & ~v20;
            if (((*(void *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(void *)(v24 + 8 * v26) == v19) {
              break;
            }
          }
          unint64_t v22 = v26 >> 6;
          uint64_t v23 = 1 << v26;
        }
        v45[v22] |= v23;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27) {
          break;
        }
      }
    }
    __break(1u);
  }
  int64_t v28 = 0;
  uint64_t v29 = a3 + 56;
  uint64_t v30 = 1 << *(unsigned char *)(a3 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & *(void *)(a3 + 56);
  int64_t v46 = (unint64_t)(v30 + 63) >> 6;
  uint64_t v33 = a4 + 56;
  while (v32)
  {
    unint64_t v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    unint64_t v35 = v34 | (v28 << 6);
LABEL_52:
    uint64_t v39 = *(void *)(*(void *)(a3 + 48) + 8 * v35);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v40 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v41 = result & ~v40;
    if ((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41))
    {
      uint64_t v42 = *(void *)(a4 + 48);
      if (*(void *)(v42 + 8 * v41) == v39)
      {
LABEL_57:
        *(unint64_t *)((char *)v45 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v43 = ~v40;
        while (1)
        {
          unint64_t v41 = (v41 + 1) & v43;
          if (((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
            break;
          }
          if (*(void *)(v42 + 8 * v41) == v39) {
            goto LABEL_57;
          }
        }
      }
    }
  }
  int64_t v36 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_62;
  }
  if (v36 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v36);
  ++v28;
  if (v37) {
    goto LABEL_51;
  }
  int64_t v28 = v36 + 1;
  if (v36 + 1 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37) {
    goto LABEL_51;
  }
  int64_t v28 = v36 + 2;
  if (v36 + 2 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_51:
    unint64_t v32 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_52;
  }
  int64_t v38 = v36 + 3;
  if (v38 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v38);
  if (v37)
  {
    int64_t v28 = v38;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v28 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v28 >= v46) {
      goto LABEL_60;
    }
    unint64_t v37 = *(void *)(v29 + 8 * v28);
    ++v38;
    if (v37) {
      goto LABEL_51;
    }
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t (*)(uint64_t *))isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe, a2);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v10, v7, a3, v5);
    swift_release();
    MEMORY[0x261206F80](v10, -1, -1);
  }
  return v9;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v20 = (unint64_t *)result;
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
LABEL_4:
  uint64_t v21 = v7;
  while (v12)
  {
    unint64_t v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_18:
    uint64_t v22 = *(void *)(*(void *)(a3 + 48) + 8 * v15);
    uint64_t result = a4(&v22);
    if (v4) {
      return result;
    }
    if (result)
    {
      *(unint64_t *)((char *)v20 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v7 = v21 + 1;
      if (!__OFADD__(v21, 1)) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_28:
      swift_retain();
      return specialized _NativeSet.extractSubset(using:count:)(v20, a2, v21, a3);
    }
  }
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v8 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_17:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_18;
  }
  int64_t v18 = v8 + 1;
  if (v8 + 1 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v8 + 2;
  if (v8 + 2 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v8 + 3;
  if (v8 + 3 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v8 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized GreedySampling.__allocating_init(generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  uint64_t v7 = swift_allocObject();
  outlined init with take of LogitCollection(&v9, v7 + 16);
  return v7;
}

uint64_t specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = specialized closure #1 in LogitCollection.makeDenseLogits()(*a1, *a2, a2[1]);
  if (!v3) {
    *a3 = v6;
  }
  return result;
}

uint64_t specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, void *a2@<X1>, float *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = BitSet.contains(_:)(*a1);
  if (result)
  {
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v7, v8);
  }
  else
  {
    float v9 = -10000.0 - (float)v5;
  }
  *a3 = v9;
  return result;
}

BOOL specialized closure #1 in LogitCollection.makeDenseLogits()@<W0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  BOOL result = BitSet.contains(_:)(*a1);
  if (result)
  {
    BOOL result = BitSet.contains(_:)(v3);
    float v5 = -65504.0;
    if (result) {
      float v5 = 0.0;
    }
  }
  else
  {
    float v5 = -10000.0 - (float)v3;
  }
  *a2 = v5;
  return result;
}

{
  uint64_t v3;
  BOOL result;
  float v5;

  uint64_t v3 = *a1;
  BOOL result = BitSet.contains(_:)(*a1);
  if (result)
  {
    BOOL result = BitSet.contains(_:)(v3);
    float v5 = -65504.0;
    if (result) {
      float v5 = 1.0;
    }
  }
  else
  {
    float v5 = -10000.0 - (float)v3;
  }
  *a2 = v5;
  return result;
}

void specialized closure #1 in LogitCollection.makeDenseLogits()(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (BitSet.contains(_:)(*a1)) {
    float v4 = CompositeLanguageModel.CompositeLogitCollection.subscript.getter(v3);
  }
  else {
    float v4 = -10000.0 - (float)v3;
  }
  *a2 = v4;
}

unint64_t specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, uint64_t *a2@<X1>, float *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t result = BitSet.contains(_:)(*a1);
  if (result) {
    unint64_t result = WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(v4, v5);
  }
  else {
    float v7 = -10000.0 - (float)v4;
  }
  *a3 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t specialized GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(void *a1, uint64_t a2, float a3)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v9 = v8;
  if (*(void *)(a2 + 16) && !specialized Set.contains(_:)(v8, a2))
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v10, v11);
    float v14 = v13;
    MEMORY[0x270FA5388](v12, v15);
    void v27[2] = a1;
    uint64_t v16 = specialized Sequence.compactMap<A>(_:)((void *(*)(void *__return_ptr, void))partial apply for closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:), (uint64_t)v27, a2);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      float v18 = v14 - a3;
      uint64_t v19 = *(void *)(v16 + 32);
      float v20 = *(float *)(v16 + 40);
      uint64_t v21 = v17 - 1;
      if (v21)
      {
        uint64_t v22 = (float *)(v16 + 56);
        do
        {
          uint64_t v23 = *((void *)v22 - 1);
          float v24 = *v22;
          v22 += 4;
          float v25 = v24;
          if (v20 < v24)
          {
            uint64_t v19 = v23;
            float v20 = v25;
          }
          --v21;
        }
        while (v21);
      }
      swift_bridgeObjectRelease();
      if (v18 < v20) {
        return v19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v9;
}

void partial apply for closure #1 in TopK.pickToken(_:)(uint64_t *a1@<X0>, float *a2@<X8>)
{
}

{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v5 = *a1;
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  *a2 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v6, v7);
}

uint64_t specialized TopK.pickToken(targetLogits:draftLogits:draftTokens:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.device);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_25FA51000, v5, v6, "Speculative sampling is not implemented for TopK sampling.  Resorting to normal topK sampling.", v7, 2u);
    MEMORY[0x261206F80](v7, -1, -1);
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v9 + 40))(*(void *)(v2 + 16), v8, v9);
  MEMORY[0x270FA5388](v10, v11);
  void v16[2] = a1;
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v16, v10);
  float v13 = *(float *)(v2 + 24);
  swift_beginAccess();
  uint64_t v14 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v12, v2 + 32, v10, v13);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

BOOL partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1)
{
  return closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, *(void **)(v1 + 16), *(float *)(v1 + 24));
}

uint64_t specialized NucleusSampling.pickToken(targetLogits:draftLogits:draftTokens:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.device);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_25FA51000, v5, v6, "Speculative sampling is not implemented for nucleus sampling.  Resorting to normal nucleus sampling.", v7, 2u);
    MEMORY[0x261206F80](v7, -1, -1);
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, float))(v9 + 48))(v8, v9, *(float *)(v2 + 16));
  MEMORY[0x270FA5388](v10, v11);
  void v16[2] = a1;
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), (uint64_t)v16, v10);
  float v13 = *(float *)(v2 + 20);
  swift_beginAccess();
  uint64_t v14 = Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v12, v2 + 24, v10, v13);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t dispatch thunk of LogitCollection.indexSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LogitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of LogitCollection.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of LogitCollection.argmax()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LogitCollection.topK(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of LogitCollection.topP(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LogitCollection.applySoftmax()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LogitCollection.makeDenseLogits()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of TokenSampling.makePresampler()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for GreedySampling()
{
  return self;
}

uint64_t method lookup function for GreedySampling(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GreedySampling);
}

uint64_t dispatch thunk of GreedySampling.__allocating_init(generator:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for TopK()
{
  return self;
}

uint64_t method lookup function for TopK(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TopK);
}

uint64_t dispatch thunk of TopK.__allocating_init(k:temperature:generator:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for NucleusSampling()
{
  return self;
}

uint64_t method lookup function for NucleusSampling(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NucleusSampling);
}

uint64_t dispatch thunk of NucleusSampling.__allocating_init(p:temperature:generator:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for SparseLogitCollection()
{
  return &type metadata for SparseLogitCollection;
}

ValueMetadata *type metadata accessor for UnconstrainedLogitCollection()
{
  return &type metadata for UnconstrainedLogitCollection;
}

uint64_t destroy for MaskedLogitCollection(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MaskedLogitCollection(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for MaskedLogitCollection(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaskedLogitCollection(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaskedLogitCollection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaskedLogitCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaskedLogitCollection()
{
  return &type metadata for MaskedLogitCollection;
}

uint64_t type metadata accessor for ClassificationSampling()
{
  return self;
}

uint64_t method lookup function for ClassificationSampling(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ClassificationSampling);
}

void **initializeBufferWithCopyOfBuffer for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for SeedableRandomNumberGenerator(id *a1)
{
}

void **assignWithCopy for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SeedableRandomNumberGenerator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SeedableRandomNumberGenerator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeedableRandomNumberGenerator()
{
  return &type metadata for SeedableRandomNumberGenerator;
}

BOOL partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()@<W0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

{
  uint64_t v3;
  BOOL result;
  float v5;

  uint64_t v3 = *a1;
  unint64_t result = BitSet.contains(_:)(*a1);
  id v5 = -10000.0 - (float)v3;
  if (result) {
    id v5 = 0.0;
  }
  *a2 = v5;
  return result;
}

{
  return specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

{
  uint64_t v3;
  BOOL result;
  float v5;

  uint64_t v3 = *a1;
  unint64_t result = BitSet.contains(_:)(*a1);
  id v5 = -10000.0 - (float)v3;
  if (result) {
    id v5 = 1.0;
  }
  *a2 = v5;
  return result;
}

{
  return specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

void partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  float v5 = specialized closure #1 in LogitCollection.makeDenseLogits()(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = v5;
  }
}

{
  specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

uint64_t partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return specialized closure #1 in LogitCollection.makeDenseLogits()(a1, *(void **)(v2 + 16), a2);
}

uint64_t partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, _DWORD *a2@<X8>)
{
  return specialized closure #1 in LogitCollection.makeDenseLogits()(a1, *(Swift::Int **)(v2 + 16), a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;

  unint64_t result = specialized closure #1 in LogitCollection.makeDenseLogits()(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = v6;
  }
  return result;
}

uint64_t partial apply for closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, *(void **)(v2 + 16), a2);
}

unint64_t partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()@<X0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return specialized closure #1 in LogitCollection.makeDenseLogits()(a1, *(uint64_t **)(v2 + 16), a2);
}

BOOL closure #1 in LogitCollection.makeDenseLogits()specialized partial apply@<W0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

uint64_t closure #1 in LogitCollection.makeDenseLogits()specialized partial apply@<X0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

void closure #1 in LogitCollection.makeDenseLogits()specialized partial apply(Swift::Int *a1@<X0>, float *a2@<X8>)
{
}

unint64_t closure #1 in LogitCollection.makeDenseLogits()specialized partial apply@<X0>(Swift::Int *a1@<X0>, float *a2@<X8>)
{
  return partial apply for specialized closure #1 in LogitCollection.makeDenseLogits()(a1, a2);
}

BOOL partial apply for closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1)
{
  return partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1);
}

uint64_t closure #1 in UnsafeMutableBufferPointer<A>.makeFloat32Copy()(uint64_t a1, char **a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  vImagePixelCount v4 = *(void *)(a1 + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v4 + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = a2;
  src.data = *(void **)a1;
  src.height = 1;
  src.width = v4;
  src.size_t rowBytes = 2 * v4;
  uint64_t v3 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int64_t *v2 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_7:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    int64_t *v2 = v3;
  }
  if ((v4 - 0x2000000000000000) >> 62 != 3) {
    __break(1u);
  }
  vImagePixelCount v6 = *((void *)v3 + 2);
  dest.data = v3 + 32;
  dest.height = 1;
  dest.width = v6;
  dest.size_t rowBytes = 4 * v4;
  uint64_t result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  int64_t *v2 = v3;
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetadataSpecialToken>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  vImagePixelCount v4 = (char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of MetadataSpecialToken(v7, v8, v9);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v2[2] = v16;
    v4 += 40;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : MetadataSpecialToken]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  vImagePixelCount v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    char v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, E5Function>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  vImagePixelCount v4 = (uint64_t *)(a1 + 72);
  while (1)
  {
    uint64_t v5 = *(v4 - 5);
    uint64_t v6 = *(v4 - 4);
    uint64_t v8 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    char v9 = *(v4 - 1);
    uint64_t v10 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (uint64_t *)(v2[6] + 16 * result);
    NSObject *v13 = v5;
    v13[1] = v6;
    uint64_t v14 = (void *)(v2[7] + 32 * result);
    char *v14 = v8;
    v14[1] = v7;
    void v14[2] = v9;
    void v14[3] = v10;
    BOOL v15 = v2[2];
    uint64_t v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  vImagePixelCount v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    void *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    BOOL v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  vImagePixelCount v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, LogitCollection)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    void *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    uint64_t v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, Any));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  char v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = &v6[*(int *)(v2 + 48)];
  char v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, LogitCollection)(v13, (uint64_t)v6, &demangling cache variable for type metadata for (Prompt.SpecialToken, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    float v18 = v8[6];
    uint64_t v19 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    unint64_t result = (unint64_t)outlined init with take of Any(v10, (_OWORD *)(v8[7] + 32 * v17));
    float v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    uint64_t v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, [String : String]));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, [String : String]>);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  char v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  char v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, LogitCollection)(v13, (uint64_t)v6, &demangling cache variable for type metadata for (Prompt.SpecialToken, [String : String]));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    float v18 = v8[6];
    uint64_t v19 = type metadata accessor for Prompt.SpecialToken();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    float v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    uint64_t v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (logitCount: Int, callback: @convention(c) (_:_:_:_:_:), cbContext: OpaquePointer)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  vImagePixelCount v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 3);
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v7 = *((void *)v4 - 1);
    BOOL v15 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    char v11 = v2[7] + 24 * result;
    *(void *)char v11 = v7;
    *(_OWORD *)(v11 + 8) = v15;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    vImagePixelCount v4 = (_OWORD *)((char *)v4 + 40);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      char v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      uint64_t v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _DWORD *i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, (next: Int, logit: Float)>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (_DWORD *)(a1 + 48); ; i += 6)
    {
      uint64_t v5 = *((void *)i - 2);
      uint64_t v6 = *((void *)i - 1);
      uint64_t v7 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v9) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v10 = v3[7] + 16 * result;
      *(void *)uint64_t v10 = v6;
      *(_DWORD *)(v10 + 8) = v7;
      char v11 = v3[2];
      uint64_t v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      uint64_t v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[Int], KVLRUCacheNode>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void **)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v6 = (long long *)(a1 + 48);
  uint64_t v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    char v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    uint64_t v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    char v11 = *v6++;
    uint64_t v13 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((void *)v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (Int, LogitCollection)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, LogitCollection));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of LogitCollection(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      char v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      uint64_t v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t MaskedLanguageModel.__allocating_init(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  MaskedLanguageModel.init(_:_:)(a1, a2);
  return v4;
}

uint64_t MaskedLanguageModel.startNode.getter()
{
  return 0;
}

uint64_t MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 2040) = v3;
  *(unsigned char *)(v4 + 2160) = a3;
  *(void *)(v4 + 2032) = a1;
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  int64_t v1 = *(void *)(v0[254] + 16);
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, v2);
  uint64_t v39 = v0;
  if (v1)
  {
    uint64_t v5 = v0[254];
    uint64_t v6 = v0[255] + 16;
    uint64_t v7 = (unint64_t *)(v5 + 32);
    swift_bridgeObjectRetain();
    uint64_t v40 = v6;
    uint64_t v8 = swift_beginAccess();
    while (1)
    {
      unint64_t v13 = *v7++;
      unint64_t v12 = v13;
      if ((v13 & 0x8000000000000000) != 0) {
        break;
      }
      if (v12 >= *(void *)(*(void *)v40 + 16)) {
        goto LABEL_19;
      }
      uint64_t v14 = *(void *)v40 + 24 * v12;
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = *(void *)(v14 + 40);
      unint64_t v18 = v3[2];
      unint64_t v17 = v3[3];
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v3);
      }
      uint64_t v3[2] = v18 + 1;
      v3[v18 + 4] = v15;
      unint64_t v20 = v4[2];
      unint64_t v19 = v4[3];
      if (v20 >= v19 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v4);
      }
      v4[2] = v20 + 1;
      v4[v20 + 4] = v16;
      uint64_t v8 = swift_bridgeObjectRelease();
      if (!--v1)
      {
        uint64_t v0 = v39;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    return MEMORY[0x270FA23E8](v8, v9, v10, v11);
  }
LABEL_11:
  v0[257] = v4;
  v0[256] = v3;
  uint64_t v21 = v0[255] + 24;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v21, (uint64_t)(v0 + 167));
  uint64_t v22 = v0[170];
  uint64_t v23 = v0[171];
  __swift_project_boxed_opaque_existential_1(v0 + 167, v22);
  float v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  uint64_t v25 = swift_bridgeObjectRetain();
  char v26 = v24(v25, v22, v23);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 167));
  if ((v26 & 1) == 0)
  {
    uint64_t v32 = v39[255];
    char v33 = *((unsigned char *)v39 + 2160);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v32;
    *(void *)(v34 + 24) = v3;
    *(unsigned char *)(v34 + 32) = v33;
    uint64_t v35 = swift_allocObject();
    v39[264] = v35;
    *(void *)(v35 + 16) = &async function pointer to partial apply for specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    *(void *)(v35 + 24) = v34;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LogitCollection]);
    swift_asyncLet_begin();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v32;
    *(void *)(v36 + 24) = v4;
    *(unsigned char *)(v36 + 32) = v33;
    uint64_t v37 = swift_allocObject();
    v39[265] = v37;
    *(void *)(v37 + 16) = &async function pointer to partial apply for specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    *(void *)(v37 + 24) = v36;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_asyncLet_begin();
    uint64_t v10 = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v8 = (uint64_t)(v39 + 82);
    char v9 = v39 + 253;
    char v11 = v39 + 222;
    return MEMORY[0x270FA23E8](v8, v9, v10, v11);
  }
  outlined init with copy of DeterministicLanguageModelProtocol(v21, (uint64_t)(v39 + 177));
  uint64_t v27 = v39[180];
  uint64_t v28 = v39[181];
  __swift_project_boxed_opaque_existential_1(v39 + 177, v27);
  v39[190] = &type metadata for BasicLogitPresampler;
  v39[191] = &protocol witness table for BasicLogitPresampler;
  int64_t v38 = (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 24)
                                                                              + **(int **)(v28 + 24));
  swift_bridgeObjectRetain();
  uint64_t v29 = (void *)swift_task_alloc();
  v39[258] = v29;
  void *v29 = v39;
  v29[1] = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  uint64_t v30 = *((unsigned __int8 *)v39 + 2160);
  return v38(v3, v39 + 187, v30, v27, v28);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t);
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  int64_t v1 = *(void **)(v0 + 2040);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1416);
  uint64_t v2 = (uint64_t)(v1 + 8);
  swift_beginAccess();
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(v1 + 8, v3);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))(v7, v5, v3);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v3);
  if (v5)
  {
    uint64_t v8 = *(void *)(v0 + 2072);
    char v9 = *(void *)(v8 + 16);
    if (!v9)
    {
LABEL_7:
      swift_task_dealloc();
      uint64_t v14 = *(void *)(v8 + 16);
      uint64_t v15 = *(void *)(v0 + 2072);
      if (v14)
      {
        uint64_t v31 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        uint64_t v16 = v15 + 32;
        unint64_t v17 = v31;
        do
        {
          outlined init with copy of DeterministicLanguageModelProtocol(v16, v0 + 1816);
          unint64_t v18 = *(void *)(v0 + 1840);
          unint64_t v19 = *(void *)(v0 + 1848);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 1816), v18);
          unint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
          __swift_destroy_boxed_opaque_existential_1(v0 + 1816);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
            unint64_t v17 = v31;
          }
          uint64_t v22 = *(void *)(v17 + 16);
          uint64_t v21 = *(void *)(v17 + 24);
          if (v22 >= v21 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
            unint64_t v17 = v31;
          }
          *(void *)(v0 + 1920) = &type metadata for MaskedLanguageModel.SingleLogitCollection;
          *(void *)(v0 + 1928) = &protocol witness table for MaskedLanguageModel.SingleLogitCollection;
          *(void *)(v0 + 1896) = v20;
          *(void *)(v17 + 16) = v22 + 1;
          outlined init with take of LogitCollection((long long *)(v0 + 1896), v17 + 40 * v22 + 32);
          v16 += 40;
          --v14;
        }
        while (v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v17 = MEMORY[0x263F8EE78];
      }
      uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v29(v17);
    }
    uint64_t v10 = v8 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v10, v0 + 1736);
      char v11 = *(void *)(v0 + 1760);
      unint64_t v12 = *(void *)(v0 + 1768);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 1736), v11);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      unint64_t v13 = BitSet.count.getter();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v0 + 1736);
      if (v13 > 1) {
        break;
      }
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  outlined init with copy of DeterministicLanguageModelProtocol(v2, v0 + 1576);
  uint64_t v23 = *(void *)(v0 + 1600);
  float v24 = *(void *)(v0 + 1608);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 1576), v23);
  *(void *)(v0 + 1680) = &type metadata for BasicLogitPresampler;
  *(void *)(v0 + 1688) = &protocol witness table for BasicLogitPresampler;
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 24)
                                                                            + **(int **)(v24 + 24));
  swift_bridgeObjectRetain();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 2088) = v25;
  *uint64_t v25 = v0;
  v25[1] = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  char v26 = *(void *)(v0 + 2056);
  uint64_t v27 = *(unsigned __int8 *)(v0 + 2160);
  return v30(v26, v0 + 1656, v27, v23, v24);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 197));
  int64_t v1 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_nTf4ng_n(v0[259], v0[263], (void (*)(long long *__return_ptr, _OWORD *, uint64_t))partial apply for closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0[255]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe(0);
  _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe(0);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1[266] = v0;
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA23D8](v1 + 2, v1 + 251, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v1 + 232);
  }
  else
  {
    v1[267] = v1[253];
    swift_bridgeObjectRetain();
    return MEMORY[0x270FA23E8](v1 + 2, v1 + 251, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v1 + 182);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(v1 + 2144) = v0;
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA23D8](v1 + 16, v1 + 2008, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v1 + 1376);
  }
  else
  {
    return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 2152) = *(void *)(v0 + 2008);
  swift_bridgeObjectRetain();
  return MEMORY[0x270FA23D8](v0 + 16, v0 + 2008, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0 + 1536);
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 2024, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0 + 1696);
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  int64_t v1 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_nTf4ng_n(v0[267], v0[269], (void (*)(long long *__return_ptr, _OWORD *, uint64_t))partial apply for closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0[255]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error));
  _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe((uint64_t)&thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)partial apply);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DataStreamState?(v0 + 1496, &demangling cache variable for type metadata for LogitPresampler?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1416);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DataStreamState?(v0 + 1656, &demangling cache variable for type metadata for LogitPresampler?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 1576);
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 2024, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0 + 1616);
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_release();
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return MEMORY[0x270FA23D8](v0 + 656, v0 + 2024, MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), v0 + 1296);
}

{
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_release();
  int64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 2072) = a1;
  *(void *)(v3 + 2080) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v4 = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v3 + 1496, &demangling cache variable for type metadata for LogitPresampler?);
    uint64_t v4 = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 2096) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v5 = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    *(void *)(v4 + 2104) = a1;
    outlined destroy of DataStreamState?(v4 + 1656, &demangling cache variable for type metadata for LogitPresampler?);
    uint64_t v5 = MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

Swift::Int __swiftcall MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v6 = v3;
  uint64_t v10 = (uint64_t)(v3 + 2);
  swift_beginAccess();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v6[2];
  unint64_t v12 = *(void *)(v11 + 16);
  if (v12 <= forPreviousNode)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)forPreviousNode = result;
    goto LABEL_7;
  }
  Swift::Int v38 = v10;
  unint64_t v13 = (void *)(v11 + 24 * forPreviousNode);
  uint64_t v15 = v13[4];
  uint64_t v14 = v13[5];
  uint64_t v16 = v13[6];
  if (*(void *)(v16 + 16))
  {
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(token);
    if (v18) {
      return *(void *)(*(void *)(v16 + 56) + 8 * v17);
    }
  }
  unint64_t v37 = forPreviousNode;
  uint64_t v34 = v12;
  swift_beginAccess();
  Swift::Int v20 = token;
  uint64_t v22 = v6[6];
  uint64_t v21 = v6[7];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 3), v22);
  uint64_t v36 = v14;
  uint64_t v23 = *(uint64_t (**)(uint64_t, Swift::Int, BOOL, uint64_t, uint64_t))(v21 + 16);
  swift_bridgeObjectRetain();
  BOOL v24 = isPrompt;
  token = v23(v15, v20, v24, v22, v21);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v25 = v6[11];
  uint64_t v26 = v6[12];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 8), v25);
  uint64_t v27 = v36;
  uint64_t v35 = v20;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, Swift::Int, BOOL, uint64_t, uint64_t))(v26 + 16))(v27, v20, v24, v25, v26);
  swift_endAccess();
  swift_bridgeObjectRelease();
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  forPreviousNode = v38;
  swift_beginAccess();
  uint64_t v5 = (void *)v6[2];
  Swift::Int result = swift_isUniquelyReferenced_nonNull_native();
  void v6[2] = v5;
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v30 = v5[2];
  unint64_t v29 = v5[3];
  if (v30 >= v29 >> 1)
  {
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *(void *)forPreviousNode = result;
  }
  uint64_t v5[2] = v30 + 1;
  uint64_t v31 = &v5[3 * v30];
  v31[4] = token;
  v31[5] = v10;
  v31[6] = v4;
  if (*(void *)(*(void *)forPreviousNode + 16) > v37)
  {
    uint64_t v32 = *(void *)forPreviousNode + 24 * v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *(void *)(v32 + 48);
    *(void *)(v32 + 48) = 0x8000000000000000;
    Swift::Int v19 = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v35, isUniquelyReferenced_nonNull_native);
    *(void *)(v32 + 48) = v39;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v19;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall MaskedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v6 = (void *)v2;
  uint64_t v8 = *(void *)prompt.queryTokens._rawValue;
  uint64_t v9 = *((void *)prompt.queryTokens._rawValue + 1);
  uint64_t v10 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v11 = (void *)(v2 + 16);
  swift_beginAccess();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v2 + 16);
  if (*(void *)(v12 + 16) <= (unint64_t)forPreviousNode)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v12 + 24 * forPreviousNode + 32);
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  swift_beginAccess();
  unint64_t v4 = v6[6];
  uint64_t v5 = (void *)v6[7];
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 3), v4);
  uint64_t v15 = v13;
  Swift::Int v2 = v14;
  uint64_t v3 = ((uint64_t (*)(uint64_t, uint64_t *, unint64_t, void *))v5[6])(v15, &v25, v4, v5);
  swift_endAccess();
  uint64_t v16 = v6[2];
  if (*(void *)(v16 + 16) > (unint64_t)forPreviousNode)
  {
    uint64_t v17 = *(void *)(v16 + 24 * forPreviousNode + 40);
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    swift_beginAccess();
    uint64_t v18 = v6[11];
    uint64_t v19 = v6[12];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v6 + 8), v18);
    forPreviousNode = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, &v25, v18, v19);
    swift_endAccess();
    Swift::Int v2 = *(void *)(v6[2] + 16);
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    uint64_t v5 = (void *)v6[2];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void v6[2] = v5;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  void *v11 = v5;
LABEL_5:
  unint64_t v22 = v5[2];
  unint64_t v21 = v5[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v5);
    void *v11 = v5;
  }
  uint64_t v5[2] = v22 + 1;
  uint64_t v23 = &v5[3 * v22];
  v23[4] = v3;
  v23[5] = forPreviousNode;
  v23[6] = v4;
  swift_endAccess();
  return v2;
}

uint64_t MaskedLanguageModel.init(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE78];
  uint64_t v7 = (void **)(v2 + 16);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v2 + 24);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v2 + 64);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  swift_beginAccess();
  uint64_t v15 = *v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *uint64_t v7 = v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
    *uint64_t v7 = v15;
  }
  v15[2] = v18 + 1;
  uint64_t v19 = &v15[3 * v18];
  v19[4] = v10;
  void v19[5] = v13;
  v19[6] = v14;
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

double protocol witness for LogitCollection.subscript.getter in conformance MaskedLanguageModel.SingleLogitCollection()
{
  return 0.0;
}

uint64_t specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 160) = a3;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = a2;
  return MEMORY[0x270FA2498](specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  uint64_t v1 = *(void *)(v0 + 120) + 24;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1, v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  *(void *)(v0 + 80) = &type metadata for BasicLogitPresampler;
  *(void *)(v0 + 88) = &protocol witness table for BasicLogitPresampler;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  void *v4 = v0;
  v4[1] = specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  return v8(v6, v0 + 56, v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 152);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for LogitPresampler?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    outlined destroy of DataStreamState?(v4 + 56, &demangling cache variable for type metadata for LogitPresampler?);
    uint64_t v5 = specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error);
  return v5();
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 160) = a3;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = a2;
  return MEMORY[0x270FA2498](specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  uint64_t v1 = *(void *)(v0 + 120) + 64;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1, v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  *(void *)(v0 + 80) = &type metadata for BasicLogitPresampler;
  *(void *)(v0 + 88) = &protocol witness table for BasicLogitPresampler;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  void *v4 = v0;
  v4[1] = specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  return v8(v6, v0 + 56, v5, v2, v3);
}

uint64_t specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    outlined destroy of DataStreamState?(v4 + 56, &demangling cache variable for type metadata for LogitPresampler?);
    uint64_t v5 = specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a3 + 8;
  swift_beginAccess();
  uint64_t v9 = a3[11];
  uint64_t v10 = a3[12];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v12 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v11, v11);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v14);
  LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v9);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  if ((v8 & 1) == 0)
  {
    uint64_t v18 = a2[3];
    uint64_t v19 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    LOBYTE(v18) = BitSet.isDisjoint(with:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      uint64_t v20 = a2[3];
      uint64_t v21 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      uint64_t v22 = BitSet.intersection(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v22;
    }
  }
  a4[3] = (uint64_t)&type metadata for MaskedLogitCollection;
  a4[4] = (uint64_t)&protocol witness table for MaskedLogitCollection;
  uint64_t v23 = swift_allocObject();
  *a4 = v23;
  uint64_t result = outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v23 + 16);
  *(void *)(v23 + 56) = v17;
  return result;
}

uint64_t MaskedLanguageModel.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v0;
}

uint64_t MaskedLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);

  return swift_deallocClassInstance();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance MaskedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance MaskedLanguageModel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *(void *)uint64_t v8 = v4;
  *(void *)(v8 + 8) = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  *(void *)(v8 + 2040) = v7;
  *(unsigned char *)(v8 + 2160) = a3;
  *(void *)(v8 + 2032) = a1;
  return MEMORY[0x270FA2498](MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance MaskedLanguageModel@<X0>(Swift::Int a1@<X0>, TokenGenerationInference::SamplingDecoderPrompt a2@<0:X1, 8:X2, 16:X3>)
{
  return MaskedLanguageModel.node(forPreviousNode:prompt:)(a1, a2);
}

uint64_t partial apply for closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(a1, a2, v3, a3);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x263F40F88], (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x263F40F68], (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x263F40F90], (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  char v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  char v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
    uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v26 & 1))
    {
      uint64_t v15 = v25;
      uint64_t v21 = *v4;
      if (v19) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v21 = *v4;
  if ((v19 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v22 = v21[7];
  uint64_t v23 = v22 + *(void *)(*(void *)(type metadata accessor for DataStreamState(0) - 8) + 72) * v15;

  return outlined assign with take of DataStreamState(a1, v23);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), MEMORY[0x263F40F78], (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Prompt.SpecialToken();
  char v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  BOOL v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  char v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
  BOOL v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v24;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_1(v17);
    return outlined init with take of LogitCollection(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  unint64_t v37 = a6;
  Swift::Int v38 = a7;
  uint64_t v36 = a5;
  char v9 = v7;
  uint64_t v39 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  char v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v7;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v20 = *(void *)(v17 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v23 = v18;
  uint64_t v24 = *(void *)(v17 + 24);
  if (v24 < v22 || (a3 & 1) == 0)
  {
    if (v24 >= v22 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v36();
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v23 & 1) == (v35 & 1))
    {
      unint64_t v19 = v34;
      uint64_t v25 = *v9;
      if (v23) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
      return v38(v19, v16, v39, v25);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v25 = *v9;
  if ((v23 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v26 = *(void *)(v25 + 56);
  uint64_t v27 = v37(0);
  uint64_t v28 = *(void *)(v27 - 8);
  unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 40);
  uint64_t v30 = v27;
  uint64_t v31 = v26 + *(void *)(v28 + 72) * v19;
  uint64_t v32 = v39;

  return v29(v31, v32, v30);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)a2, a1, v16);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  char v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      char v23 = (uint64_t *)(v22[7] + 24 * v16);
      uint64_t *v23 = a1;
      v23[1] = a2;
      _OWORD v23[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a6 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, a3, v22);

  return swift_bridgeObjectRetain();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, _OWORD *, uint64_t), uint64_t a4)
{
  void (*v51)(long long *__return_ptr, _OWORD *, uint64_t);
  uint64_t v52;
  long long v53[2];
  long long v54;
  long long v55;
  _OWORD v56[3];
  _OWORD v57[2];
  _OWORD v58[3];
  uint64_t v59;
  uint64_t *v60;

  uint64_t v52 = a4;
  int v51 = a3;
  unint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8 >= v7) {
    int64_t v9 = *(void *)(a1 + 16);
  }
  else {
    int64_t v9 = *(void *)(a2 + 16);
  }
  unint64_t v59 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  uint64_t v44 = v4;
  uint64_t v48 = a1;
  uint64_t v47 = a2;
  int64_t v43 = v9;
  int64_t v46 = v8;
  unint64_t v45 = v7;
  if (v9)
  {
    uint64_t v10 = a1 + 32;
    unint64_t v11 = v7;
    uint64_t v12 = a2 + 32;
    uint64_t v50 = (uint64_t)v58 + 8;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v14 = v9;
    unint64_t v15 = v11;
    while (v15)
    {
      uint64_t result = outlined init with copy of DeterministicLanguageModelProtocol(v10, (uint64_t)&v54);
      if (!v8) {
        goto LABEL_32;
      }
      outlined init with take of LogitCollection(&v54, (uint64_t)v57);
      uint64_t v16 = v50;
      outlined init with copy of DeterministicLanguageModelProtocol(v12, v50);
      v51(&v54, v57, v16);
      outlined destroy of DataStreamState?((uint64_t)v57, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      uint64_t v17 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v59;
      }
      unint64_t v19 = *(void *)(v17 + 16);
      unint64_t v18 = *(void *)(v17 + 24);
      if (v19 >= v18 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      }
      uint64_t v20 = *((void *)&v55 + 1);
      uint64_t v21 = *(void *)&v56[0];
      uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, *((uint64_t *)&v55 + 1));
      int v60 = &v42;
      MEMORY[0x270FA5388](v22, v22);
      char v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v24);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, &v59, v20, v21);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      --v8;
      --v15;
      v12 += 40;
      v10 += 40;
      if (!--v14) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_15:
    if (v45 <= v46)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v59;
    }
    uint64_t v50 = (uint64_t)v56 + 8;
    long long v49 = (char *)v58 + 8;
    if (v43 <= v46) {
      int64_t v26 = v46;
    }
    else {
      int64_t v26 = v43;
    }
    int64_t v27 = v26 - v43;
    unint64_t v28 = v45 - v43;
    int64_t v29 = v46 - v43;
    uint64_t v30 = 40 * v43 + 32;
    uint64_t v31 = v48 + v30;
    uint64_t v32 = v47 + v30;
    while (v28)
    {
      uint64_t result = outlined init with copy of DeterministicLanguageModelProtocol(v31, (uint64_t)v53);
      if (!v29)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
        goto LABEL_30;
      }
      if (!v27) {
        goto LABEL_34;
      }
      outlined init with take of LogitCollection(v53, (uint64_t)&v54);
      outlined init with copy of DeterministicLanguageModelProtocol(v32, v50);
      v57[1] = v55;
      v58[0] = v56[0];
      v58[1] = v56[1];
      v58[2] = v56[2];
      v57[0] = v54;
      v51(&v54, v57, (uint64_t)v49);
      outlined destroy of DataStreamState?((uint64_t)v57, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      uint64_t v33 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1);
        uint64_t v33 = v59;
      }
      unint64_t v35 = *(void *)(v33 + 16);
      unint64_t v34 = *(void *)(v33 + 24);
      if (v35 >= v34 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      }
      uint64_t v36 = *((void *)&v55 + 1);
      uint64_t v37 = *(void *)&v56[0];
      uint64_t v38 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, *((uint64_t *)&v55 + 1));
      int v60 = &v42;
      MEMORY[0x270FA5388](v38, v38);
      uint64_t v40 = (char *)&v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v41 + 16))(v40);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, (uint64_t)v40, &v59, v36, v37);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      --v27;
      --v29;
      v31 += 40;
      v32 += 40;
      if (!--v28) {
        goto LABEL_30;
      }
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  *(unsigned char *)(v3 + 160) = v2;
  *(_OWORD *)(v3 + 120) = v4;
  return MEMORY[0x270FA2498](specialized implicit closure #3 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error));
  return v6(a1, v4);
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t partial apply for specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  char v2 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  *(unsigned char *)(v3 + 160) = v2;
  *(_OWORD *)(v3 + 120) = v4;
  return MEMORY[0x270FA2498](specialized implicit closure #4 in MaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t sub_25FAC652C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)partial apply(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned [LogitCollection], @error @owned Error));
  return v6(a1, v4);
}

uint64_t type metadata accessor for MaskedLanguageModel()
{
  return self;
}

uint64_t method lookup function for MaskedLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaskedLanguageModel);
}

uint64_t dispatch thunk of MaskedLanguageModel.__allocating_init(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for MaskedLanguageModel.Node()
{
  return &type metadata for MaskedLanguageModel.Node;
}

ValueMetadata *type metadata accessor for MaskedLanguageModel.SingleLogitCollection()
{
  return &type metadata for MaskedLanguageModel.SingleLogitCollection;
}

uint64_t outlined assign with take of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    uint64_t v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PrefixGuidedLanguageModel.Node>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    uint64_t v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of (Int, LogitCollection)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25FAC6B80()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]), v8 = dispatch thunk of Hashable._rawHashValue(seed:)(), v9 = -1 << *(unsigned char *)(a2 + 32), unint64_t v10 = v8 & ~v9, v11 = a2 + 56, ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    uint64_t v18 = ~v9;
    uint64_t v19 = a2;
    uint64_t v12 = v4 + 16;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v14 = *(void *)(v12 + 56);
    char v15 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      v13(v7, *(void *)(v19 + 48) + v14 * v10, v3);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v3);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v18;
    }
    while (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of LogitCollection((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for LogitCollection?);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of LogitCollection((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of DataStreamState?((uint64_t)v14, &demangling cache variable for type metadata for LogitCollection?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TokenInferenceInstrumenter;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TokenInferenceInstrumenter = type metadata accessor for FirstTokenInferenceInstrumenter();
  uint64_t v11 = *(void *)(TokenInferenceInstrumenter - 8);
  MEMORY[0x270FA5388](TokenInferenceInstrumenter, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, TokenInferenceInstrumenter) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, MEMORY[0x263F40F88], MEMORY[0x263F40F88], (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, TokenInferenceInstrumenter);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = type metadata accessor for ExtendInferenceInstrumenter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, MEMORY[0x263F40F68], MEMORY[0x263F40F68], (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = type metadata accessor for CompletePromptRequestInstrumenter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, MEMORY[0x263F40F90], MEMORY[0x263F40F90], (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = type metadata accessor for DataStreamState(0);
  MEMORY[0x270FA5388](v10, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for DataStreamState?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for DataStreamState?);
  }
  else
  {
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a1, (uint64_t)v13, type metadata accessor for DataStreamState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  MEMORY[0x270FA5388](v6 - 8, v7);
  unint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = type metadata accessor for PromptProcessingInstrumenter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for PromptProcessingInstrumenter?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, MEMORY[0x263F40F78], MEMORY[0x263F40F78], (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
    return outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v14, a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of LogitCollection((long long *)a1, (uint64_t)v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
    MEMORY[0x270FA5388](v9, v9);
    uint64_t v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(unsigned char *))(v12 + 16))(v11);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, a3, isUniquelyReferenced_nonNull_native, &v14, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v15);
    swift_bridgeObjectRelease();
    return outlined destroy of DataStreamState?((uint64_t)v15, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return outlined destroy of DataStreamState?((uint64_t)v11, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v16, a1, v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v4;
    int *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, a2, a3, isUniquelyReferenced_nonNull_native);
    int *v4 = v20;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v12 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v10 = v23;
      swift_unknownObjectRelease();
      if (!v23) {
        goto LABEL_33;
      }
      goto LABEL_10;
    }
    if (!v4) {
      break;
    }
    unint64_t v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v9 = v8 | (v3 << 6);
LABEL_9:
    id v10 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v10) {
      goto LABEL_33;
    }
LABEL_10:
    id v11 = objc_msgSend(v10, sel_adapterType);

    if (v11)
    {

LABEL_33:
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      return;
    }
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v16) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v12 + 2;
      if (v12 + 2 >= v16) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v12 + 3;
        if (v12 + 3 >= v16) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v12 + 4;
          if (v12 + 4 >= v16) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v12 + 5;
            if (v12 + 5 >= v16) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v12 + 6;
              while (v16 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_28;
                }
              }
              goto LABEL_33;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t protocol witness for OnDeviceInferenceAssetObject.identifier.getter in conformance OnDeviceInferenceAssetObjectE5Runner()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for OnDeviceInferenceAssetObject.asset.getter in conformance OnDeviceInferenceAssetObjectE5Runner@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of (Int, LogitCollection)(v2 + *(int *)(a1 + 20), a2, &demangling cache variable for type metadata for Asset?);
}

uint64_t OnDeviceInferenceAssetRepository.resumeSuspendedFetch()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceSuspendedFetch?);
  MEMORY[0x270FA5388](v1 - 8, v2);
  uint64_t v114 = (uint64_t)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v4, v6);
  uint64_t v132 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v131 = (uint64_t)&v111 - v11;
  MEMORY[0x270FA5388](v10, v12);
  uint64_t v127 = (char *)&v111 - v13;
  uint64_t v14 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v17, v20);
  float16x8_t v133 = (uint64_t *)((char *)&v111 - v22);
  MEMORY[0x270FA5388](v21, v23);
  uint64_t v25 = (char *)&v111 - v24;
  long long v116 = (uint64_t *)(v0 + 152);
  uint64_t result = swift_beginAccess();
  uint64_t v117 = v0;
  uint64_t v27 = *(void *)(v0 + 152);
  if (!*(void *)(v27 + 16)) {
    return result;
  }
  uint64_t v112 = v19;
  unint64_t v113 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v27 + v113, (uint64_t)v25, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  long long v115 = v25;
  uint64_t v28 = *(void *)v25;
  uint64_t v29 = *(void *)(*(void *)v25 + 16);
  uint64_t v126 = v14;
  uint64_t v134 = v4;
  uint64_t v119 = v15;
  if (!v29) {
    goto LABEL_16;
  }
  uint64_t v30 = (uint64_t *)(v117 + 136);
  swift_bridgeObjectRetain_n();
  swift_beginAccess();
  uint64_t v31 = (unint64_t *)(v28 + 40);
  while (1)
  {
    unint64_t v32 = *v31;
    uint64_t v33 = *v30;
    if (*(void *)(*v30 + 16)) {
      break;
    }
    int8x16_t v147 = 0;
    long long v145 = 0u;
    long long v146 = 0u;
    swift_bridgeObjectRetain();
LABEL_5:
    v31 += 2;
    outlined destroy of DataStreamState?((uint64_t)&v145, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_bridgeObjectRelease();
    if (!--v29)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v14 = v126;
      uint64_t v4 = v134;
      uint64_t v15 = v119;
LABEL_16:
      uint64_t v42 = *v116;
      uint64_t v121 = *(void *)(*v116 + 16);
      if (!v121) {
        goto LABEL_38;
      }
      float16x8_t v135 = (uint64_t *)(v117 + 128);
      uint64_t v130 = v117 + 168;
      uint64_t v120 = v42 + v113;
      int16x8_t v138 = (int *)(v5 + 16);
      int32x4_t v129 = (void (**)(char *, uint64_t))(v5 + 8);
      swift_bridgeObjectRetain();
      unint64_t v5 = 0;
      *(void *)&long long v43 = 136446466;
      long long v125 = v43;
      uint64_t v124 = MEMORY[0x263F8EE58] + 8;
      uint64_t v118 = v42;
      do
      {
        if (v5 >= *(void *)(v42 + 16))
        {
          __break(1u);
          goto LABEL_64;
        }
        uint64_t v44 = v133;
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v120 + *(void *)(v15 + 72) * v5, (uint64_t)v133, type metadata accessor for OnDeviceInferenceSuspendedFetch);
        uint64_t v45 = *v44;
        uint64_t v46 = *(void *)(v45 + 16);
        if (v46)
        {
          unint64_t v123 = v5;
          swift_bridgeObjectRetain();
          swift_beginAccess();
          uint64_t v122 = v45;
          uint64_t v47 = (unint64_t *)(v45 + 40);
          uint64_t v48 = v127;
          while (1)
          {
            uint64_t v53 = *(v47 - 1);
            unint64_t v52 = *v47;
            uint64_t v54 = *v135;
            if (!*(void *)(*v135 + 16)) {
              break;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v52);
            if (v56)
            {
              outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v54 + 56) + 40 * v55, (uint64_t)&v145);
            }
            else
            {
              int8x16_t v147 = 0;
              long long v145 = 0u;
              long long v146 = 0u;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!*((void *)&v146 + 1)) {
              goto LABEL_33;
            }
            swift_bridgeObjectRelease();
            outlined destroy of DataStreamState?((uint64_t)&v145, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
LABEL_25:
            v47 += 2;
            if (!--v46)
            {
              swift_bridgeObjectRelease();
              uint64_t v15 = v119;
              uint64_t v42 = v118;
              unint64_t v5 = v123;
              goto LABEL_19;
            }
          }
          int8x16_t v147 = 0;
          long long v145 = 0u;
          long long v146 = 0u;
          swift_bridgeObjectRetain();
LABEL_33:
          outlined destroy of DataStreamState?((uint64_t)&v145, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
          uint64_t v57 = *(int *)(v14 + 24);
          if (one-time initialization token for device != -1) {
            swift_once();
          }
          uint64_t v58 = (char *)v133 + v57;
          uint64_t v59 = type metadata accessor for Logger();
          __swift_project_value_buffer(v59, (uint64_t)static Log.device);
          int v60 = *(void (**)(char *, char *, uint64_t))v138;
          float16x8_t v137 = v58;
          float16x8_t v136 = v60;
          v60(v48, v58, v4);
          swift_bridgeObjectRetain();
          uint64_t v61 = Logger.logObject.getter();
          int v62 = v48;
          os_log_type_t v63 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v61, v63))
          {
            uint64_t v64 = swift_slowAlloc();
            uint64_t v128 = swift_slowAlloc();
            *(void *)&long long v145 = v128;
            *(_DWORD *)uint64_t v64 = v125;
            lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
            uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v64 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)&v145);
            swift_bridgeObjectRelease();
            long long v49 = *v129;
            (*v129)(v62, v134);
            *(_WORD *)(v64 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v64 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v52, (uint64_t *)&v145);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_25FA51000, v61, v63, "Cancelling the request %{public}s since the asset %{public}s was unloaded", (uint8_t *)v64, 0x16u);
            uint64_t v67 = v128;
            swift_arrayDestroy();
            uint64_t v4 = v134;
            MEMORY[0x261206F80](v67, -1, -1);
            uint64_t v68 = v64;
            uint64_t v14 = v126;
            MEMORY[0x261206F80](v68, -1, -1);

            uint64_t v48 = v127;
          }
          else
          {
            long long v49 = *v129;
            (*v129)(v62, v4);

            swift_bridgeObjectRelease_n();
            uint64_t v48 = v62;
          }
          uint64_t v50 = v132;
          v136(v132, v137, v4);
          swift_beginAccess();
          uint64_t v51 = v131;
          specialized Set._Variant.insert(_:)(v131, v50);
          v49((char *)v51, v4);
          swift_endAccess();
          goto LABEL_25;
        }
LABEL_19:
        ++v5;
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v133, type metadata accessor for OnDeviceInferenceSuspendedFetch);
      }
      while (v5 != v121);
      swift_bridgeObjectRelease();
LABEL_38:
      uint64_t v69 = v116;
      swift_beginAccess();
      if (*(void *)(*v69 + 16))
      {
        uint64_t v70 = v114;
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(*v69 + v113, v114, type metadata accessor for OnDeviceInferenceSuspendedFetch);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v70, 0, 1, v14);
        outlined destroy of DataStreamState?(v70, &demangling cache variable for type metadata for OnDeviceInferenceSuspendedFetch?);
        if (!*(void *)(*v69 + 16))
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        swift_endAccess();
        unint64_t v5 = (unint64_t)v115;
        long long v71 = *(char **)v115;
        uint64_t v72 = *(void *)(*(void *)v115 + 16);
        if (!v72)
        {
LABEL_54:
          if (one-time initialization token for device == -1)
          {
LABEL_55:
            uint64_t v101 = type metadata accessor for Logger();
            __swift_project_value_buffer(v101, (uint64_t)static Log.device);
            uint64_t v102 = (uint64_t)v112;
            outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v5, (uint64_t)v112, type metadata accessor for OnDeviceInferenceSuspendedFetch);
            long long v103 = Logger.logObject.getter();
            os_log_type_t v104 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v103, v104))
            {
              uint64_t v105 = (uint8_t *)swift_slowAlloc();
              uint64_t v106 = swift_slowAlloc();
              *(void *)&long long v145 = v106;
              *(_DWORD *)uint64_t v105 = 136446210;
              lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
              uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&long long v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, (uint64_t *)&v145);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v102, type metadata accessor for OnDeviceInferenceSuspendedFetch);
              _os_log_impl(&dword_25FA51000, v103, v104, "Resuming suspended fetch for request %{public}s", v105, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x261206F80](v106, -1, -1);
              uint64_t v109 = v105;
              unint64_t v5 = (unint64_t)v115;
              MEMORY[0x261206F80](v109, -1, -1);
            }
            else
            {
              outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v102, type metadata accessor for OnDeviceInferenceSuspendedFetch);
            }

            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
            CheckedContinuation.resume(returning:)();
            uint64_t v110 = v5;
            return outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v110, type metadata accessor for OnDeviceInferenceSuspendedFetch);
          }
LABEL_68:
          swift_once();
          goto LABEL_55;
        }
        unint64_t v5 = v117 + 136;
        int16x8_t v138 = (int *)type metadata accessor for OnDeviceInferenceAssetInUsePlaceHolder(0);
        swift_bridgeObjectRetain();
        float16x8_t v137 = v71;
        long long v73 = (uint64_t *)(v71 + 40);
        while (1)
        {
          uint64_t v76 = *(v73 - 1);
          uint64_t v75 = *v73;
          uint64_t v77 = v138;
          *((void *)&v146 + 1) = v138;
          int8x16_t v147 = &protocol witness table for OnDeviceInferenceAssetInUsePlaceHolder;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v145);
          long long v79 = (char *)boxed_opaque_existential_1 + v77[5];
          uint64_t v80 = type metadata accessor for Asset();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
          uint64_t *boxed_opaque_existential_1 = v76;
          boxed_opaque_existential_1[1] = v75;
          swift_beginAccess();
          outlined init with take of LogitCollection(&v145, (uint64_t)&v143);
          swift_bridgeObjectRetain_n();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          int8x16_t v142 = *(void **)v5;
          int v82 = v142;
          *(void *)unint64_t v5 = 0x8000000000000000;
          unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v75);
          uint64_t v85 = v82[2];
          BOOL v86 = (v83 & 1) == 0;
          uint64_t v87 = v85 + v86;
          if (__OFADD__(v85, v86)) {
            break;
          }
          char v88 = v83;
          if (v82[3] >= v87)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, isUniquelyReferenced_nonNull_native);
            unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v75);
            if ((v88 & 1) != (v90 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v84 = v89;
          }
          long long v91 = v142;
          if (v88)
          {
            uint64_t v74 = v142[7] + 40 * v84;
            __swift_destroy_boxed_opaque_existential_1(v74);
            outlined init with take of LogitCollection(&v143, v74);
          }
          else
          {
            uint64_t v92 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v143, v144);
            MEMORY[0x270FA5388](v92, v92);
            uint64_t v94 = (char *)&v111 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v95 + 16))(v94);
            int16x8_t v140 = v138;
            float16x8_t v141 = &protocol witness table for OnDeviceInferenceAssetInUsePlaceHolder;
            uint64_t v96 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v139);
            outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v94, (uint64_t)v96, type metadata accessor for OnDeviceInferenceAssetInUsePlaceHolder);
            v91[(v84 >> 6) + 8] |= 1 << v84;
            int v97 = (uint64_t *)(v91[6] + 16 * v84);
            uint64_t *v97 = v76;
            v97[1] = v75;
            outlined init with take of LogitCollection(&v139, v91[7] + 40 * v84);
            uint64_t v98 = v91[2];
            BOOL v99 = __OFADD__(v98, 1);
            uint64_t v100 = v98 + 1;
            if (v99) {
              goto LABEL_65;
            }
            v91[2] = v100;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
            swift_bridgeObjectRetain();
          }
          v73 += 2;
          *(void *)unint64_t v5 = v91;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          if (!--v72)
          {
            swift_bridgeObjectRelease();
            unint64_t v5 = (unint64_t)v115;
            goto LABEL_54;
          }
        }
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
      }
      __break(1u);
      goto LABEL_67;
    }
  }
  uint64_t v34 = *(v31 - 1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v32);
  if (v36)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v33 + 56) + 40 * v35, (uint64_t)&v145);
  }
  else
  {
    int8x16_t v147 = 0;
    long long v145 = 0u;
    long long v146 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v146 + 1)) {
    goto LABEL_5;
  }
  outlined destroy of DataStreamState?((uint64_t)&v145, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Log.device);
  swift_bridgeObjectRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(void *)&long long v145 = v41;
    *(_DWORD *)uint64_t v40 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v32, (uint64_t *)&v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v38, v39, "Cannot resume suspended fetch since asset %{public}s is in use ", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v41, -1, -1);
    MEMORY[0x261206F80](v40, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v110 = (uint64_t)v115;
  return outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v110, type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t OnDeviceInferenceAssetRepository.localizationOverrideMap(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)v10, &demangling cache variable for type metadata for ModelMetadata?);
  if (_s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v10) == 1 || (unint64_t v3 = v11) == 0)
  {
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = (void *)specialized _dictionaryUpCast<A, B, C, D>(_:)(v3);
  swift_bridgeObjectRelease();
  if (*(void *)(a2 + 120)) {
    unint64_t v5 = *(void *)(a2 + 120);
  }
  else {
    unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v7);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (uint64_t *)&demangling cache variable for type metadata for [String : MetadataSpecialToken];
  uint64_t v11 = MEMORY[0x263F8EE58] + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      unint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      unint64_t result = (unint64_t)outlined init with take of Any(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : MetadataSpecialToken]>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v34 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  unint64_t v6 = &v40;
  int64_t v33 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any);
  uint64_t v10 = (uint64_t *)&demangling cache variable for type metadata for [String : MetadataSpecialToken];
  uint64_t v11 = MEMORY[0x263F8EE58] + 8;
  while (1)
  {
    if (v5)
    {
      uint64_t v35 = (v5 - 1) & v5;
      int64_t v36 = v8;
      unint64_t v19 = __clz(__rbit64(v5)) | (v8 << 6);
    }
    else
    {
      int64_t v20 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_37;
      }
      if (v20 >= v33)
      {
LABEL_33:
        outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
        return (unint64_t)v2;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v20);
      int64_t v22 = v8 + 1;
      if (!v21)
      {
        int64_t v22 = v8 + 2;
        if (v8 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v8 + 3;
          if (v8 + 3 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = *(void *)(v34 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v8 + 4;
            if (v8 + 4 >= v33) {
              goto LABEL_33;
            }
            unint64_t v21 = *(void *)(v34 + 8 * v22);
            if (!v21)
            {
              uint64_t v23 = v8 + 5;
              if (v8 + 5 >= v33) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v34 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_38;
                  }
                  if (v22 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = *(void *)(v34 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v22 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v35 = (v21 - 1) & v21;
      int64_t v36 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v19, (uint64_t)v6);
    v39[0] = v26;
    v39[1] = v25;
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v38);
    swift_bridgeObjectRetain_n();
    outlined destroy of DataStreamState?((uint64_t)v39, v9);
    __swift_instantiateConcreteTypeFromMangledName(v10);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      swift_release();
      return 0;
    }
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
    unint64_t v27 = result;
    if (v28)
    {
      uint64_t v12 = v11;
      uint64_t v13 = v10;
      uint64_t v14 = v6;
      uint64_t v15 = v1;
      uint64_t v16 = v9;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v17 = v26;
      v17[1] = v25;
      uint64_t v9 = v16;
      uint64_t v1 = v15;
      unint64_t v6 = v14;
      uint64_t v10 = v13;
      uint64_t v11 = v12;
      uint64_t v18 = v2[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v18 + 8 * v27) = v37;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v29 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v29 = v26;
    v29[1] = v25;
    *(void *)(v2[7] + 8 * result) = v37;
    uint64_t v30 = v2[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_36;
    }
    v2[2] = v32;
LABEL_8:
    unint64_t v5 = v35;
    int64_t v8 = v36;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v51 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v7 << 6);
LABEL_9:
      uint64_t v12 = *(void *)(a2 + 56);
      uint64_t v13 = (void *)(*(void *)(a2 + 48) + 16 * v11);
      uint64_t v14 = v13[1];
      *(void *)&long long v55 = *v13;
      *((void *)&v55 + 1) = v14;
      outlined init with copy of Any(v12 + 32 * v11, (uint64_t)v56);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_65;
    }
    if (v15 < v51)
    {
      unint64_t v16 = *(void *)(v50 + 8 * v15);
      if (v16) {
        goto LABEL_13;
      }
      int64_t v17 = v7 + 2;
      ++v7;
      if (v15 + 1 < v51)
      {
        unint64_t v16 = *(void *)(v50 + 8 * v17);
        if (v16) {
          goto LABEL_16;
        }
        int64_t v7 = v15 + 1;
        if (v15 + 2 < v51)
        {
          unint64_t v16 = *(void *)(v50 + 8 * (v15 + 2));
          if (v16)
          {
            v15 += 2;
            goto LABEL_13;
          }
          int64_t v17 = v15 + 3;
          int64_t v7 = v15 + 2;
          if (v15 + 3 < v51) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v6 = 0;
    memset(v56, 0, sizeof(v56));
    long long v55 = 0u;
LABEL_28:
    outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)&v55, (uint64_t)&v57, &demangling cache variable for type metadata for (key: String, value: Any)?);
    uint64_t v18 = v58;
    if (!v58)
    {
      swift_release();
      return (uint64_t)a1;
    }
    uint64_t v19 = v57;
    outlined init with take of Any(&v59, &v55);
    if (!a1[2])
    {
      long long v53 = 0u;
      long long v54 = 0u;
LABEL_44:
      outlined destroy of DataStreamState?((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
      goto LABEL_45;
    }
    swift_bridgeObjectRetain();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
    if (v21)
    {
      outlined init with copy of Any(a1[7] + 32 * v20, (uint64_t)&v53);
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v54 + 1)) {
      goto LABEL_44;
    }
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast())
    {
      uint64_t v23 = *(void *)&v52[0];
      outlined init with copy of Any((uint64_t)&v55, (uint64_t)&v53);
      if (swift_dynamicCast())
      {
        uint64_t v24 = OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(v23, *(void *)&v52[0]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((void *)&v54 + 1) = v22;
        *(void *)&long long v53 = v24;
        outlined init with take of Any(&v53, v52);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
        uint64_t v28 = a1[2];
        BOOL v29 = (v26 & 1) == 0;
        uint64_t v30 = v28 + v29;
        if (__OFADD__(v28, v29)) {
          goto LABEL_66;
        }
        char v31 = v26;
        if (a1[3] >= v30)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v26) {
              goto LABEL_57;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if (v31) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
          unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
          if ((v31 & 1) != (v33 & 1)) {
            goto LABEL_69;
          }
          unint64_t v27 = v32;
          if (v31)
          {
LABEL_57:
            int64_t v8 = (_OWORD *)(a1[7] + 32 * v27);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
            uint64_t v9 = v52;
            goto LABEL_5;
          }
        }
        a1[(v27 >> 6) + 8] |= 1 << v27;
        uint64_t v34 = (uint64_t *)(a1[6] + 16 * v27);
        *uint64_t v34 = v19;
        v34[1] = v18;
        outlined init with take of Any(v52, (_OWORD *)(a1[7] + 32 * v27));
        uint64_t v35 = a1[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_67;
        }
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
    }
LABEL_45:
    outlined init with copy of Any((uint64_t)&v55, (uint64_t)&v53);
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v52[0] = a1;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
    uint64_t v41 = a1[2];
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    char v44 = v39;
    if (a1[3] >= v43)
    {
      if (v38)
      {
        a1 = *(void **)&v52[0];
        if (v39) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        a1 = *(void **)&v52[0];
        if (v44) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v38);
      unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_69;
      }
      unint64_t v40 = v45;
      a1 = *(void **)&v52[0];
      if (v44)
      {
LABEL_4:
        int64_t v8 = (_OWORD *)(a1[7] + 32 * v40);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        uint64_t v9 = &v53;
LABEL_5:
        outlined init with take of Any(v9, v8);
        goto LABEL_6;
      }
    }
    a1[(v40 >> 6) + 8] |= 1 << v40;
    uint64_t v47 = (uint64_t *)(a1[6] + 16 * v40);
    *uint64_t v47 = v19;
    v47[1] = v18;
    outlined init with take of Any(&v53, (_OWORD *)(a1[7] + 32 * v40));
    uint64_t v48 = a1[2];
    BOOL v36 = __OFADD__(v48, 1);
    uint64_t v37 = v48 + 1;
    if (v36) {
      goto LABEL_64;
    }
LABEL_53:
    a1[2] = v37;
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  }
  unint64_t v16 = *(void *)(v50 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v15 = v17;
LABEL_13:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v7 = v15;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v51)
    {
      int64_t v7 = v51 - 1;
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v50 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_13;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC25modelConfigurationWithURL33_65818D6FA4B5F545C6B162D7CBE031AELL_26adapterResourceInformationSo017TGIMutableE5ModelI4ObjCC_AA0Z8MetadataVSgt10Foundation0K0V_AA07AdaptervW0VSgt0Z15ManagerServices0C5ErrorOYKF@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v182 = a6;
  uint64_t v192 = a4;
  uint64_t v193 = a5;
  uint64_t v198 = a2;
  int8x16_t v199 = a3;
  int16x8_t v204 = a1;
  int8x16_t v189 = a7;
  uint64_t v7 = type metadata accessor for InferenceError();
  uint64_t v180 = *(void *)(v7 - 8);
  uint64_t v181 = v7;
  MEMORY[0x270FA5388](v7, v8);
  int8x16_t v186 = (char *)v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for InferenceError.Context();
  uint64_t v184 = *(void *)(v10 - 8);
  uint64_t v185 = v10;
  MEMORY[0x270FA5388](v10, v11);
  int8x16_t v183 = (char *)v179 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL.DirectoryHint();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  int64_t v17 = (char *)v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v220 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v220, v19);
  int8x16_t v188 = (char *)v179 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  int32x4_t v190 = (char *)v179 - v24;
  MEMORY[0x270FA5388](v23, v25);
  unint64_t v27 = (char *)v179 - v26;
  strcpy(v209, "model.bundle");
  v209[13] = 0;
  *(_WORD *)&v209[14] = -5120;
  LODWORD(v203) = *MEMORY[0x263F06E50];
  int8x16_t v202 = *(void (**)(char *))(v14 + 104);
  v202(v17);
  int64_t v197 = lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v195 = v14 + 8;
  float16x8_t v196 = v28;
  v28(v17, v13);
  swift_bridgeObjectRelease();
  uint64_t v200 = URL.path.getter();
  uint64_t v201 = v29;
  uint64_t v187 = v18;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v31 = v220;
  v30(v27, v220);
  strcpy(v209, "model.mil");
  *(_WORD *)&v209[10] = 0;
  *(_DWORD *)&v209[12] = -385875968;
  ((void (*)(char *, void, uint64_t))v202)(v17, v203, v13);
  URL.appending<A>(path:directoryHint:)();
  v196(v17, v13);
  uint64_t v32 = v201;
  swift_bridgeObjectRelease();
  uint64_t v194 = URL.path.getter();
  uint64_t v34 = v33;
  int8x16_t v202 = (void (*)(char *))v30;
  uint64_t v203 = v18 + 8;
  v30(v27, v31);
  uint64_t v35 = self;
  id v36 = objc_msgSend(v35, sel_defaultManager);
  uint64_t v37 = v200;
  char v38 = (void *)MEMORY[0x2612053D0]();
  LODWORD(v13) = objc_msgSend(v36, sel_fileExistsAtPath_, v38);

  if (v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(v35, sel_defaultManager);
    uint64_t v37 = v194;
    unint64_t v40 = (void *)MEMORY[0x2612053D0](v194, v34);
    unsigned __int8 v41 = objc_msgSend(v39, sel_fileExistsAtPath_, v40);

    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v57 = v183;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v59 = v184;
      uint64_t v58 = v185;
      int v60 = v186;
      (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v186, v57, v185);
      uint64_t v62 = v180;
      uint64_t v61 = v181;
      (*(void (**)(char *, void, uint64_t))(v180 + 104))(v60, *MEMORY[0x263F56248], v181);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v58);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v182, v60, v61);
    }
    uint64_t v32 = v34;
  }
  BOOL v42 = v190;
  unint64_t v43 = (unint64_t)v204;
  URL.appendingPathComponent(_:)();
  char v44 = (void *)v191;
  specialized OnDeviceInferenceProviderDataSource.modelMetadataAtURL(_:)(&v211);
  id v45 = v199;
  id v46 = (id)v220;
  uint64_t v201 = v32;
  uint64_t v194 = v37;
  if (!v44)
  {
    *(_OWORD *)&v209[96] = v217;
    *(_OWORD *)&v209[112] = v218;
    *(_OWORD *)&v209[128] = v219;
    *(_OWORD *)&v209[32] = v213;
    *(_OWORD *)&v209[48] = v214;
    *(_OWORD *)&v209[64] = v215;
    *(_OWORD *)&v209[80] = v216;
    *(_OWORD *)short float v209 = v211;
    *(_OWORD *)&v209[16] = v212;
    ((void (*)(char *, uint64_t))v202)(v42, v220);
    id v46 = (id)*((void *)&v211 + 1);
    uint64_t v55 = v211;
    if (v211 == __PAIR128__(0xE300000000000000, 7696487)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v56 = 2;
    }
    else
    {
      if ((v55 != 6647393 || v46 != (id)0xE300000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined release of ModelMetadata((uint64_t)&v211);
        if (one-time initialization token for device != -1) {
          swift_once();
        }
        uint64_t v169 = type metadata accessor for Logger();
        __swift_project_value_buffer(v169, (uint64_t)static Log.device);
        swift_bridgeObjectRetain_n();
        float16x8_t v170 = Logger.logObject.getter();
        os_log_type_t v171 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v170, v171))
        {
          short float v172 = (uint8_t *)swift_slowAlloc();
          uint64_t v173 = swift_slowAlloc();
          *(void *)&v205[0] = v173;
          *(_DWORD *)short float v172 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v208 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, (unint64_t)v46, (uint64_t *)v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25FA51000, v170, v171, "Failed to handle model of type %{public}s", v172, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v173, -1, -1);
          MEMORY[0x261206F80](v172, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v141 = v181;
        uint64_t v140 = v182;
        uint64_t v142 = v180;
        *(void *)&v205[0] = 0;
        *((void *)&v205[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        *(void *)&v205[0] = 0xD000000000000015;
        *((void *)&v205[0] + 1) = 0x800000025FB6C620;
        v174._countAndFlagsBits = v55;
        v174._object = v46;
        String.append(_:)(v174);
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        short float v175 = v183;
        InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
        uint64_t v177 = v184;
        uint64_t v176 = v185;
        int8x16_t v147 = v186;
        (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v186, v175, v185);
        (*(void (**)(char *, void, uint64_t))(v142 + 104))(v147, *MEMORY[0x263F56248], v141);
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
        swift_willThrowTypedImpl();
        (*(void (**)(char *, uint64_t))(v177 + 8))(v175, v176);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v142 + 32))(v140, v147, v141);
      }
      uint64_t v56 = 1;
    }
    int8x16_t v188 = (char *)v56;
    uint64_t v71 = MEMORY[0x263F8EE88];
    uint64_t v208 = MEMORY[0x263F8EE88];
    v179[1] = 0;
    if (*((void *)&v212 + 1)) {
      unint64_t v72 = *((void *)&v212 + 1);
    }
    else {
      unint64_t v72 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v207 = v71;
    uint64_t v73 = *(void *)(v72 + 64);
    float16x8_t v196 = (void (*)(char *, uint64_t))(v72 + 64);
    uint64_t v74 = 1 << *(unsigned char *)(v72 + 32);
    uint64_t v75 = -1;
    if (v74 < 64) {
      uint64_t v75 = ~(-1 << v74);
    }
    unint64_t v43 = v75 & v73;
    int64_t v197 = (unint64_t)(v74 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v220 = 0;
    *(void *)&long long v76 = 136446466;
    long long v191 = v76;
    int32x4_t v190 = (char *)(MEMORY[0x263F8EE58] + 8);
    uint64_t v200 = v72;
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            if (v43)
            {
              unint64_t v81 = __clz(__rbit64(v43));
              v43 &= v43 - 1;
              unint64_t v82 = v81 | (v220 << 6);
            }
            else
            {
              int64_t v83 = v220 + 1;
              uint64_t v84 = v201;
              if (__OFADD__(v220, 1))
              {
                __break(1u);
LABEL_83:
                __break(1u);
                goto LABEL_84;
              }
              if (v83 >= v197) {
                goto LABEL_60;
              }
              unint64_t v85 = *((void *)v196 + v83);
              ++v220;
              if (!v85)
              {
                uint64_t v220 = v83 + 1;
                if (v83 + 1 >= v197) {
                  goto LABEL_60;
                }
                unint64_t v85 = *((void *)v196 + v220);
                if (!v85)
                {
                  uint64_t v220 = v83 + 2;
                  if (v83 + 2 >= v197) {
                    goto LABEL_60;
                  }
                  unint64_t v85 = *((void *)v196 + v220);
                  if (!v85)
                  {
                    int64_t v86 = v83 + 3;
                    if (v86 >= v197)
                    {
LABEL_60:
                      swift_release();
                      id v122 = objc_allocWithZone((Class)TGIMutableE5ModelConfigurationObjC);
                      unint64_t v123 = (void *)MEMORY[0x2612053D0](v194, v84);
                      swift_bridgeObjectRelease();
                      type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
                      lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
                      Class isa = Set._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
                      lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
                      Class v125 = Set._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      id v70 = objc_msgSend(v122, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, v188, v123, isa, v125);

                      v205[6] = *(_OWORD *)&v209[96];
                      v205[7] = *(_OWORD *)&v209[112];
                      v205[8] = *(_OWORD *)&v209[128];
                      v205[2] = *(_OWORD *)&v209[32];
                      v205[3] = *(_OWORD *)&v209[48];
                      v205[4] = *(_OWORD *)&v209[64];
                      v205[5] = *(_OWORD *)&v209[80];
                      v205[0] = *(_OWORD *)v209;
                      v205[1] = *(_OWORD *)&v209[16];
                      destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution(v205);
                      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v205, (uint64_t)v210, &demangling cache variable for type metadata for ModelMetadata?);
                      goto LABEL_61;
                    }
                    unint64_t v85 = *((void *)v196 + v86);
                    if (!v85)
                    {
                      while (1)
                      {
                        uint64_t v220 = v86 + 1;
                        if (__OFADD__(v86, 1)) {
                          goto LABEL_83;
                        }
                        if (v220 >= v197) {
                          goto LABEL_60;
                        }
                        unint64_t v85 = *((void *)v196 + v220);
                        ++v86;
                        if (v85) {
                          goto LABEL_42;
                        }
                      }
                    }
                    uint64_t v220 = v86;
                  }
                }
              }
LABEL_42:
              unint64_t v43 = (v85 - 1) & v85;
              unint64_t v82 = __clz(__rbit64(v85)) + (v220 << 6);
            }
            uint64_t v87 = (uint64_t *)(*(void *)(v72 + 48) + 16 * v82);
            uint64_t v88 = *v87;
            unint64_t v89 = v87[1];
            char v90 = (uint64_t *)(*(void *)(v72 + 56) + 32 * v82);
            id v46 = (id)v90[1];
            uint64_t v91 = v90[2];
            uint64_t v92 = v90[3];
            if (v46) {
              break;
            }
            uint64_t v77 = v45;
            unint64_t v78 = v43;
            id v79 = objc_allocWithZone((Class)TGIE5FunctionObjC);
            swift_bridgeObjectRetain();
            id v46 = (id)MEMORY[0x2612053D0](v88, v89);
            swift_bridgeObjectRelease();
            id v80 = objc_msgSend(v79, sel_initWithName_queryLength_contextSize_adapterType_, v46, v91, v92, 0);

            specialized Set._Variant.insert(_:)(v205, v80);
            unint64_t v43 = v78;
            id v45 = v77;
            unint64_t v72 = v200;
          }
          uint64_t v203 = *v87;
          int16x8_t v204 = (uint8_t *)v92;
          uint64_t v93 = *v90;
          if (v45) {
            break;
          }
          int8x16_t v202 = (void (*)(char *))v43;
          uint64_t v195 = v91;
          uint64_t v111 = one-time initialization token for device;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v111 != -1) {
            swift_once();
          }
          uint64_t v112 = type metadata accessor for Logger();
          __swift_project_value_buffer(v112, (uint64_t)static Log.device);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          unint64_t v113 = Logger.logObject.getter();
          os_log_type_t v114 = static os_log_type_t.info.getter();
          BOOL v115 = os_log_type_enabled(v113, v114);
          uint64_t v116 = v203;
          if (v115)
          {
            uint64_t v117 = swift_slowAlloc();
            uint64_t v118 = swift_slowAlloc();
            *(void *)&v205[0] = v118;
            *(_DWORD *)uint64_t v117 = v191;
            swift_bridgeObjectRetain();
            *(void *)(v117 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v89, (uint64_t *)v205);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v117 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v117 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, (unint64_t)v46, (uint64_t *)v205);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_25FA51000, v113, v114, "E5 function %{public}s specifies adapter type %{public}s but resource information was not provided", (uint8_t *)v117, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x261206F80](v118, -1, -1);
            MEMORY[0x261206F80](v117, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          id v45 = v199;
          id v119 = objc_allocWithZone((Class)TGIE5FunctionObjC);
          uint64_t v120 = (void *)MEMORY[0x2612053D0](v116, v89);
          swift_bridgeObjectRelease();
          uint64_t v121 = (void *)MEMORY[0x2612053D0](v93, v46);
          swift_bridgeObjectRelease();
          id v46 = objc_msgSend(v119, sel_initWithName_queryLength_contextSize_adapterType_, v120, v195, v204, v121);

          specialized Set._Variant.insert(_:)(v205, v46);
          unint64_t v72 = v200;
          unint64_t v43 = (unint64_t)v202;
        }
        BOOL v94 = v93 == v198 && v46 == v45;
      }
      while (!v94 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v95 = v212;
      if (!(void)v212) {
        break;
      }
      uint64_t v96 = *(void *)(v212 + 16);
      swift_bridgeObjectRetain();
      if (!v96)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_69:
        uint64_t v148 = v93;
        outlined release of ModelMetadata((uint64_t)&v211);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (one-time initialization token for device != -1) {
          swift_once();
        }
        uint64_t v149 = type metadata accessor for Logger();
        __swift_project_value_buffer(v149, (uint64_t)static Log.device);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        int8x16_t v150 = Logger.logObject.getter();
        os_log_type_t v151 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v150, v151))
        {
          uint64_t v152 = swift_slowAlloc();
          uint64_t v220 = swift_slowAlloc();
          *(void *)&v205[0] = v220;
          *(_DWORD *)uint64_t v152 = v191;
          swift_bridgeObjectRetain();
          uint64_t v187 = v93;
          uint64_t v206 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, (unint64_t)v46, (uint64_t *)v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v152 + 12) = 2082;
          int16x8_t v204 = (uint8_t *)(v152 + 14);
          swift_bridgeObjectRetain();
          uint64_t v153 = Dictionary.description.getter();
          unint64_t v155 = v154;
          swift_bridgeObjectRelease();
          uint64_t v206 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v155, (uint64_t *)v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25FA51000, v150, v151, "Failed to get symbol for adapter type %{public}s from %{public}s", (uint8_t *)v152, 0x16u);
          uint64_t v156 = v220;
          swift_arrayDestroy();
          MEMORY[0x261206F80](v156, -1, -1);
          uint64_t v157 = v152;
          uint64_t v158 = v187;
          MEMORY[0x261206F80](v157, -1, -1);

          uint64_t v160 = v181;
          uint64_t v159 = v182;
          uint64_t v161 = v180;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v160 = v181;
          uint64_t v161 = v180;
          uint64_t v158 = v148;
          uint64_t v159 = v182;
        }
        *(void *)&v205[0] = 0;
        *((void *)&v205[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        *(void *)&v205[0] = 0xD000000000000015;
        *((void *)&v205[0] + 1) = 0x800000025FB6C680;
        v162._countAndFlagsBits = v158;
        v162._object = v46;
        String.append(_:)(v162);
        swift_bridgeObjectRelease();
        v163._countAndFlagsBits = 544106784;
        v163._object = (void *)0xE400000000000000;
        String.append(_:)(v163);
        v164._countAndFlagsBits = Dictionary.description.getter();
        String.append(_:)(v164);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        int32x4_t v165 = v183;
        InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
        uint64_t v167 = v184;
        uint64_t v166 = v185;
        int8x16_t v168 = v186;
        (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v186, v165, v185);
        (*(void (**)(char *, void, uint64_t))(v161 + 104))(v168, *MEMORY[0x263F56248], v160);
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
        swift_willThrowTypedImpl();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v165, v166);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v161 + 32))(v159, v168, v160);
      }
      int8x16_t v202 = (void (*)(char *))v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v93, (uint64_t)v46);
      if ((v98 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
      BOOL v99 = (uint64_t *)(*(void *)(v95 + 56) + 16 * v97);
      uint64_t v100 = v99[1];
      uint64_t v195 = *v99;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v101 = objc_allocWithZone((Class)TGIE5FunctionObjC);
      swift_bridgeObjectRetain();
      uint64_t v102 = (void *)MEMORY[0x2612053D0](v203, v89);
      swift_bridgeObjectRelease();
      long long v103 = (void *)MEMORY[0x2612053D0](v93, v46);
      swift_bridgeObjectRelease();
      id v104 = objc_msgSend(v101, sel_initWithName_queryLength_contextSize_adapterType_, v102, v91, v204, v103);

      id v105 = v104;
      specialized Set._Variant.insert(_:)(v205, v105);

      id v106 = objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
      uint64_t v107 = v193;
      swift_bridgeObjectRetain();
      unint64_t v108 = (void *)MEMORY[0x2612053D0](v93, v46);
      swift_bridgeObjectRelease();
      id v46 = (id)MEMORY[0x2612053D0](v195, v100);
      swift_bridgeObjectRelease();
      uint64_t v109 = (void *)MEMORY[0x2612053D0](v192, v107);
      swift_bridgeObjectRelease();
      id v110 = objc_msgSend(v106, sel_initWithAdapterType_symbolName_mutableWeightsFilePath_, v108, v46, v109);

      unint64_t v72 = v200;
      specialized Set._Variant.insert(_:)(v205, v110);

      id v45 = v199;
      unint64_t v43 = (unint64_t)v202;
    }
    outlined release of ModelMetadata((uint64_t)&v211);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v136 = type metadata accessor for Logger();
    __swift_project_value_buffer(v136, (uint64_t)static Log.device);
    float16x8_t v137 = Logger.logObject.getter();
    os_log_type_t v138 = static os_log_type_t.error.getter();
    BOOL v139 = os_log_type_enabled(v137, v138);
    uint64_t v141 = v181;
    uint64_t v140 = v182;
    uint64_t v142 = v180;
    if (v139)
    {
      long long v143 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v143 = 0;
      _os_log_impl(&dword_25FA51000, v137, v138, "Metadata json is missing adapter type to symbol mapping", v143, 2u);
      MEMORY[0x261206F80](v143, -1, -1);
    }

    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v144 = v183;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v146 = v184;
    uint64_t v145 = v185;
    int8x16_t v147 = v186;
    (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v186, v144, v185);
    (*(void (**)(char *, void, uint64_t))(v142 + 104))(v147, *MEMORY[0x263F56248], v141);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v145);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v142 + 32))(v140, v147, v141);
  }
  ((void (*)(char *, uint64_t))v202)(v42, v220);

  if (one-time initialization token for device != -1) {
LABEL_84:
  }
    swift_once();
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Log.device);
  uint64_t v48 = v188;
  (*(void (**)(char *, unint64_t, id))(v187 + 16))(v188, v43, v46);
  long long v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v49, v50))
  {
    int64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(void *)short float v209 = v52;
    *(_DWORD *)int64_t v51 = 136446210;
    int16x8_t v204 = v51 + 4;
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type URL and conformance URL, 255, MEMORY[0x263F06EA8]);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v205[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, id))v202)(v48, v46);
    _os_log_impl(&dword_25FA51000, v49, v50, "Falling back to default configuration, metadata json not found for model at url: %{public}s", v51, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v52, -1, -1);
    MEMORY[0x261206F80](v51, -1, -1);
  }
  else
  {
    ((void (*)(char *, id))v202)(v48, v46);
  }

  uint64_t v64 = v194;
  uint64_t v65 = v201;
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) == 0) {
    goto LABEL_15;
  }
  uint64_t v178 = MEMORY[0x263F8EE78];
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  }
  else if ((v178 & 0xC000000000000000) == 0)
  {
    goto LABEL_15;
  }
  if (_CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _SetStorage<TGIE5AdapterConfigurationObjC>, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  }
LABEL_15:
  id v66 = objc_allocWithZone((Class)TGIMutableE5ModelConfigurationObjC);
  uint64_t v67 = (void *)MEMORY[0x2612053D0](v64, v65);
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  Class v68 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  Class v69 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v70 = objc_msgSend(v66, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, 0, v67, v68, v69);

  _s24TokenGenerationInference13ModelMetadataVSgWOi0_(v209);
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v209, (uint64_t)v210, &demangling cache variable for type metadata for ModelMetadata?);
LABEL_61:
  *(void *)short float v209 = v70;
  uint64_t result = outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v210, (uint64_t)&v209[8], &demangling cache variable for type metadata for ModelMetadata?);
  long long v126 = *(_OWORD *)&v209[8];
  long long v127 = *(_OWORD *)&v209[24];
  long long v128 = *(_OWORD *)&v209[40];
  long long v129 = *(_OWORD *)&v209[56];
  long long v130 = *(_OWORD *)&v209[72];
  long long v131 = *(_OWORD *)&v209[88];
  long long v132 = *(_OWORD *)&v209[104];
  long long v133 = *(_OWORD *)&v209[120];
  long long v134 = *(_OWORD *)&v209[136];
  float16x8_t v135 = v189;
  *int8x16_t v189 = *(void *)v209;
  *(_OWORD *)(v135 + 1) = v126;
  *(_OWORD *)(v135 + 3) = v127;
  *(_OWORD *)(v135 + 5) = v128;
  *(_OWORD *)(v135 + 7) = v129;
  *(_OWORD *)(v135 + 9) = v130;
  *(_OWORD *)(v135 + 11) = v131;
  *(_OWORD *)(v135 + 13) = v132;
  *(_OWORD *)(v135 + 15) = v133;
  *(_OWORD *)(v135 + 17) = v134;
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC14handleLLMModel33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5asset22useEnergyEfficientModeySS_AA0F0VSbt20ModelManagerServices0C5ErrorOYKF(void *a1, unint64_t a2, uint8_t *a3, int a4, void *a5)
{
  id v167 = a5;
  id v168 = a1;
  unint64_t v170 = a2;
  LODWORD(v165) = a4;
  v177[18] = *MEMORY[0x263EF8340];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v164 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v163 = (uint64_t)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v162 = (uint64_t)&v144 - v15;
  uint64_t v159 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  MEMORY[0x270FA5388](v159, v16);
  uint64_t v160 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v156 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158, v18);
  uint64_t v157 = (char *)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for InferenceError.Context();
  uint64_t v153 = *(void *)(v20 - 8);
  uint64_t v154 = v20;
  MEMORY[0x270FA5388](v20, v21);
  uint64_t v152 = (char *)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v25 = MEMORY[0x270FA5388](v23 - 8, v24);
  uint64_t v161 = (uint64_t)&v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v155 = (uint64_t)&v144 - v29;
  MEMORY[0x270FA5388](v28, v30);
  uint64_t v166 = (uint64_t *)((char *)&v144 - v31);
  os_log_type_t v151 = (int *)type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
  MEMORY[0x270FA5388](v151, v32);
  uint64_t v34 = (char *)&v144 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for InferenceError();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  unint64_t v40 = (char *)&v144 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38, v41);
  unint64_t v43 = (char *)&v144 - v42;
  char v44 = v169;
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC25modelConfigurationWithURL33_65818D6FA4B5F545C6B162D7CBE031AELL_26adapterResourceInformationSo017TGIMutableE5ModelI4ObjCC_AA0Z8MetadataVSgt10Foundation0K0V_AA07AdaptervW0VSgt0Z15ManagerServices0C5ErrorOYKF(a3, 0, 0, 0, 0, (uint64_t)&v144 - v42, &v176);
  if (v44) {
    return (*(uint64_t (**)(id, char *, uint64_t))(v36 + 32))(v167, v43, v35);
  }
  uint64_t v145 = (uint64_t *)v34;
  uint64_t v146 = v40;
  uint64_t v147 = v36;
  uint64_t v148 = v35;
  uint64_t v149 = a3;
  uint64_t v150 = v5;
  id v46 = v176;
  uint64_t v169 = v177;
  objc_msgSend(v176, sel_setUseEnergyEfficientMode_, v165 & 1);
  uint64_t v47 = (void *)MEMORY[0x2612053D0](v168, v170);
  objc_msgSend(v46, sel_setAssetIdentifier_, v47);

  id v48 = objc_msgSend(v46, sel_e5Functions);
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  uint64_t v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.contains(where:)(v49);
  char v51 = v50;
  uint64_t v52 = 0;
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0 && objc_msgSend(v46, sel_modelType) == (id)1)
  {
    outlined release of ModelMetadata?(v169);
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Log.device);
    unint64_t v54 = (uint64_t *)v46;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v169 = v54;
    if (v57)
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 138543362;
      v173[0] = v54;
      uint64_t v59 = v169;
      unint64_t v54 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int v60 = v166;
      *uint64_t v166 = v54;

      _os_log_impl(&dword_25FA51000, v55, v56, "Creating asset object for ane base model with configuration %{public}@", v58, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v60, -1, -1);
      MEMORY[0x261206F80](v58, -1, -1);
    }
    else
    {

      uint64_t v55 = v54;
    }
    uint64_t v104 = v170;
    uint64_t v105 = (uint64_t)v168;
    id v106 = v145;
    uint64_t v107 = v151;

    id v108 = objc_msgSend(objc_allocWithZone((Class)TGIE5BaseModelObjC), sel_initWithModelConfiguration_, v54);
    v173[0] = 0;
    id v168 = v108;
    unsigned int v109 = objc_msgSend(v108, sel_load_, v173);
    id v110 = v173[0];
    if (v109)
    {
      uint64_t v111 = v107;
      uint64_t v112 = (uint64_t)v106 + v107[5];
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v149, v112, (uint64_t (*)(void))type metadata accessor for Asset);
      uint64_t v113 = type metadata accessor for Asset();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v112, 0, 1, v113);
      uint64_t *v106 = v105;
      v106[1] = v104;
      id v114 = v168;
      *(uint64_t *)((char *)v106 + v111[6]) = (uint64_t)v168;
      v173[3] = v111;
      Swift::String v174 = (char *)&protocol witness table for OnDeviceInferenceAssetObjectBaseModel;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v173);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v106, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
      swift_beginAccess();
      swift_bridgeObjectRetain_n();
      id v116 = v110;
      id v117 = v114;
      specialized Dictionary.subscript.setter((uint64_t)v173, v105, v104);
      swift_endAccess();

      return outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v106, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
    }
    else
    {
      id v118 = v173[0];
      id v119 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v120 = (void *)_convertErrorToNSError(_:)();
      id v121 = objc_msgSend(v120, sel_description);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v122 = objc_msgSend(v120, sel_domain);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      objc_msgSend(v120, sel_code);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      unint64_t v123 = v152;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v125 = v153;
      uint64_t v124 = v154;
      long long v126 = v146;
      (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v146, v123, v154);
      uint64_t v128 = v147;
      uint64_t v127 = v148;
      (*(void (**)(char *, void, uint64_t))(v147 + 104))(v126, *MEMORY[0x263F56248], v148);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();

      (*(void (**)(char *, uint64_t))(v125 + 8))(v123, v124);
      return (*(uint64_t (**)(id, char *, uint64_t))(v128 + 32))(v167, v126, v127);
    }
  }
  else
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)static Log.device);
    unint64_t v63 = v170;
    swift_bridgeObjectRetain_n();
    uint64_t v145 = (uint64_t *)v62;
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      int32x4_t v165 = 0;
      id v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = (void *)swift_slowAlloc();
      v173[0] = v67;
      *(_DWORD *)id v66 = 136446210;
      swift_bridgeObjectRetain();
      v172[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v168, v63, (uint64_t *)v173);
      uint64_t v52 = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v64, v65, "Creating e5Runner model for asset %{public}s", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v67, -1, -1);
      MEMORY[0x261206F80](v66, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Class v68 = v166;
    id v69 = objc_allocWithZone((Class)E5RunnerObjC);
    v173[0] = 0;
    id v70 = (int *)v46;
    id v71 = objc_msgSend(v69, sel_initWithModelConfiguration_error_, v70, v173);
    os_log_type_t v151 = v70;
    if (v71)
    {
      unint64_t v72 = v71;
      id v73 = v173[0];

      id v74 = v72;
      id v75 = objc_msgSend(v74, sel_maxContextLength);
      type metadata accessor for KVLRUCache();
      long long v76 = (void *)swift_allocObject();
      v76[3] = 0;
      v76[4] = 0;
      v76[6] = v75;
      v76[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v76[3] = 0;
      v76[4] = 0;
      v76[5] = 0;
      type metadata accessor for E5TransformerLanguageModel();
      swift_allocObject();
      id v167 = v74;
      uint64_t v154 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v74, (uint64_t)v76, 0);
      uint64_t v77 = (uint64_t)v149;
      OnDeviceInferenceAssetRepository.promptTemplateConfiguration(asset:)((uint64_t)v68);
      if (v52)
      {

        uint64_t v78 = 1;
      }
      else
      {
        uint64_t v78 = 0;
      }
      char v90 = v160;
      uint64_t v92 = (uint64_t)v157;
      uint64_t v91 = v158;
      uint64_t v93 = v156;
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v156 + 56))(v68, v78, 1, v158);
      uint64_t v94 = (uint64_t)v68;
      uint64_t v95 = v155;
      outlined init with copy of (Int, LogitCollection)(v94, v155, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
      int v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v95, 1, v91);
      int32x4_t v165 = 0;
      if (v96 == 1)
      {
        outlined destroy of DataStreamState?(v95, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
        swift_bridgeObjectRetain_n();
        unint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v97, v98))
        {
          BOOL v99 = (uint8_t *)swift_slowAlloc();
          uint64_t v100 = (void *)swift_slowAlloc();
          v173[0] = v100;
          *(_DWORD *)BOOL v99 = 136446210;
          swift_bridgeObjectRetain();
          v172[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v168, v170, (uint64_t *)v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25FA51000, v97, v98, "Did not find prompt template configuration for asset %{public}s", v99, 0xCu);
          swift_arrayDestroy();
          id v101 = v100;
          char v90 = v160;
          MEMORY[0x261206F80](v101, -1, -1);
          MEMORY[0x261206F80](v99, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v102 = v169;
      }
      else
      {
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v95, v92, type metadata accessor for PromptTemplateConfiguration);
        uint64_t v102 = v169;
        outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v169, (uint64_t)v173, &demangling cache variable for type metadata for ModelMetadata?);
        BOOL v103 = _s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v173) != 1;
        *(unsigned char *)(v92 + *(int *)(v91 + 20)) = v103 & v175;
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v92, type metadata accessor for PromptTemplateConfiguration);
      }
      uint64_t v129 = v162;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v77, v162, (uint64_t (*)(void))type metadata accessor for Asset);
      uint64_t v130 = type metadata accessor for Asset();
      long long v131 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 56);
      v131(v129, 0, 1, v130);
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v102, (uint64_t)v173, &demangling cache variable for type metadata for ModelMetadata?);
      long long v132 = 0;
      long long v133 = 0;
      if (_s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v173) != 1)
      {
        long long v133 = v174;
        outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v102, (uint64_t)v172, &demangling cache variable for type metadata for ModelMetadata?);
        long long v132 = (uint64_t *)v172[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v160 = v133;
      uint64_t v169 = v132;
      uint64_t v134 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v164, 1, 1, v134);
      v131(v163, 1, 1, v130);
      outlined init with copy of (Int, LogitCollection)((uint64_t)v166, v161, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v102, (uint64_t)v172, &demangling cache variable for type metadata for ModelMetadata?);
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      if (_s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v172) != 1)
      {
        uint64_t v135 = v172[16];
        uint64_t v136 = v172[17];
        swift_bridgeObjectRetain();
        outlined release of ModelMetadata?(v102);
      }
      uint64_t v137 = (uint64_t)v168;
      uint64_t v138 = v170;
      *char v90 = v168;
      v90[1] = v138;
      BOOL v139 = (int *)v159;
      outlined init with take of (key: Int, value: LogitCollection)?(v162, (uint64_t)v90 + *(int *)(v159 + 20), &demangling cache variable for type metadata for Asset?);
      *(void *)((char *)v90 + v139[6]) = v167;
      *(void *)((char *)v90 + v139[7]) = v154;
      uint64_t v140 = (char *)v90 + v139[8];
      *(_OWORD *)uint64_t v140 = xmmword_25FB62AB0;
      *((void *)v140 + 2) = 0;
      *((void *)v140 + 3) = 0;
      *(void *)(v140 + 29) = 0;
      *(void *)((char *)v90 + v139[9]) = v160;
      *(void *)((char *)v90 + v139[10]) = 0;
      uint64_t v141 = (char *)v90 + v139[11];
      *(_OWORD *)uint64_t v141 = xmmword_25FB62AB0;
      *((void *)v141 + 2) = 0;
      *((void *)v141 + 3) = 0;
      *(void *)(v141 + 29) = 0;
      *(void *)((char *)v90 + v139[12]) = v169;
      outlined init with take of (key: Int, value: LogitCollection)?(v164, (uint64_t)v90 + v139[13], &demangling cache variable for type metadata for UUID?);
      outlined init with take of (key: Int, value: LogitCollection)?(v163, (uint64_t)v90 + v139[14], &demangling cache variable for type metadata for Asset?);
      outlined init with take of (key: Int, value: LogitCollection)?(v161, (uint64_t)v90 + v139[15], &demangling cache variable for type metadata for PromptTemplateConfiguration?);
      uint64_t v142 = (void *)((char *)v90 + v139[16]);
      *uint64_t v142 = v135;
      v142[1] = v136;
      v171[3] = (uint64_t)v139;
      v171[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
      long long v143 = __swift_allocate_boxed_opaque_existential_1(v171);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v90, (uint64_t)v143, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      swift_beginAccess();
      swift_bridgeObjectRetain_n();
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)v171, v137, v138);
      swift_endAccess();

      swift_release();
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v90, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      return outlined destroy of DataStreamState?((uint64_t)v166, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    }
    else
    {
      id v79 = v173[0];
      id v80 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      outlined release of ModelMetadata?(v169);
      unint64_t v81 = (void *)_convertErrorToNSError(_:)();
      id v82 = objc_msgSend(v81, sel_localizedDescription);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v83 = objc_msgSend(v81, sel_domain);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      objc_msgSend(v81, sel_code);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v84 = v152;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v86 = v153;
      uint64_t v85 = v154;
      uint64_t v87 = v146;
      (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v146, v84, v154);
      uint64_t v89 = v147;
      uint64_t v88 = v148;
      (*(void (**)(char *, void, uint64_t))(v147 + 104))(v87, *MEMORY[0x263F56248], v148);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();

      (*(void (**)(char *, uint64_t))(v86 + 8))(v84, v85);
      return (*(uint64_t (**)(id, char *, uint64_t))(v89 + 32))(v167, v87, v88);
    }
  }
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC15handleTokenizer33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5assetySS_AA0F0Vt20ModelManagerServices0C5ErrorOYKF(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v5 = v4;
  uint64_t v63 = a1;
  uint64_t v8 = type metadata accessor for InferenceError();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x270FA5388](v8, v9);
  BOOL v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InferenceError.Context();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v56 = v11;
  MEMORY[0x270FA5388](v11, v12);
  unint64_t v54 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  MEMORY[0x270FA5388](v14 - 8, v15);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
  MEMORY[0x270FA5388](v51, v18);
  uint64_t v52 = (uint64_t *)((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v65 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v65 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v65, v21);
  uint64_t v64 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24);
  uint64_t v26 = (char *)&v50 - v25;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v62 = a3;
  unint64_t v53 = a2;
  Class v68 = v17;
  if (v30)
  {
    uint64_t v61 = v4;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v67[0] = v32;
    *(_DWORD *)uint64_t v31 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, a2, v67);
    uint64_t v5 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v28, v29, "Creating tokenizer for asset %{public}s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v32, -1, -1);
    MEMORY[0x261206F80](v31, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  URL.appendingPathComponent(_:)();
  uint64_t v33 = specialized OnDeviceInferenceProviderDataSource.tokenizerMetadataAtURL(_:)();
  if (v5)
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v36 = v65;
    v35(v26, v65);

    uint64_t v61 = 0;
    unint64_t v37 = 1;
  }
  else
  {
    unint64_t v37 = v33;
    uint64_t v61 = v34;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v36 = v65;
    v35(v26, v65);
  }
  uint64_t v38 = v64;
  URL.appendingPathComponent(_:)();
  URL.path.getter();
  v35(v38, v36);
  if (v37 >= 2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC15handleTokenizer33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5assetySS_AA0F0Vt20ModelManagerServices0C5ErrorOYKFTv_r);
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = (uint64_t)v68;
  type metadata accessor for TokenizerRunner();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v40 = TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
  swift_bridgeObjectRelease();
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v62, v39, (uint64_t (*)(void))type metadata accessor for Asset);
  uint64_t v41 = type metadata accessor for Asset();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v39, 0, 1, v41);
  swift_retain();
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  if (v37 != 1)
  {
    uint64_t v42 = v61;
    outlined copy of TokenizerMetadata?(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v43 = v37;
  }
  uint64_t v44 = v63;
  uint64_t v45 = (uint64_t)v52;
  uint64_t v46 = v53;
  void *v52 = v63;
  *(void *)(v45 + 8) = v46;
  uint64_t v47 = (int *)v51;
  outlined init with take of (key: Int, value: LogitCollection)?(v39, v45 + *(int *)(v51 + 20), &demangling cache variable for type metadata for Asset?);
  *(void *)(v45 + v47[6]) = v40;
  *(void *)(v45 + v47[7]) = v43;
  *(void *)(v45 + v47[8]) = v42;
  v67[3] = (uint64_t)v47;
  v67[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectTokenizer;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v45, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  specialized Dictionary.subscript.setter((uint64_t)v67, v44, v46);
  swift_endAccess();
  swift_release();
  return outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v45, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC16handleLLMAdapter33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier20dependentResourceIDs5asset22useEnergyEfficientModeySS_SaySSGAA0F0VSbt20ModelManagerServices0C5ErrorOYKF(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  id v295 = a6;
  uint64_t v286 = a3;
  int v274 = a5;
  uint64_t v299 = a4;
  uint64_t v329 = *MEMORY[0x263EF8340];
  uint64_t v270 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  MEMORY[0x270FA5388](v270, v8);
  int8x16_t v271 = (char *)&v255 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v269 = *(void *)(v267 - 8);
  MEMORY[0x270FA5388](v267, v10);
  uint64_t v266 = (uint64_t)&v255 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v14 = MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v268 = (uint64_t)&v255 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v272 = (uint64_t)&v255 - v17;
  uint64_t v18 = type metadata accessor for Asset();
  uint64_t v287 = *(void *)(v18 - 8);
  uint64_t v288 = v18;
  MEMORY[0x270FA5388](v18, v19);
  uint64_t v21 = (uint8_t *)&v255 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
  MEMORY[0x270FA5388](v22 - 8, v23);
  int8x16_t v276 = (char *)&v255 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
  uint64_t v277 = *(void *)(v275 - 8);
  MEMORY[0x270FA5388](v275, v25);
  uint64_t v273 = (uint64_t)&v255 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for InferenceError();
  unint64_t v28 = *(void *)(v27 - 8);
  uint64_t v293 = v27;
  unint64_t v294 = v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  uint64_t v281 = (uint64_t)&v255 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30, v32);
  uint64_t v34 = (char *)&v255 - v33;
  uint64_t v35 = type metadata accessor for InferenceError.Context();
  uint64_t v36 = *(uint64_t (**)())(v35 - 8);
  uint64_t v291 = v35;
  int8x16_t v292 = v36;
  MEMORY[0x270FA5388](v35, v37);
  int8x16_t v290 = (char *)&v255 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v41 = MEMORY[0x270FA5388](v39 - 8, v40);
  int32x4_t v283 = (uint64_t *)((char *)&v255 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  float16x8_t v279 = (char *)&v255 - v45;
  MEMORY[0x270FA5388](v44, v46);
  id v48 = (char *)&v255 - v47;
  uint64_t v298 = type metadata accessor for URL();
  int8x16_t v300 = *(void (***)(char *, uint64_t))(v298 - 8);
  uint64_t v50 = MEMORY[0x270FA5388](v298, v49);
  float16x8_t v280 = (char *)&v255 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v50, v52);
  unint64_t v54 = (char *)&v255 - v53;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  uint64_t v56 = __swift_project_value_buffer(v55, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v278 = v56;
  BOOL v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  int32x4_t v284 = v21;
  uint64_t v289 = (uint64_t)v34;
  uint64_t v282 = a1;
  if (v59)
  {
    int8x16_t v297 = v48;
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    int32x4_t v314 = (char *)v61;
    *(_DWORD *)uint64_t v60 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v310 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v314);
    id v48 = v297;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v57, v58, "Creating asset object for adapter with identifier %{public}s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v61, -1, -1);
    MEMORY[0x261206F80](v60, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  URL.appendingPathComponent(_:)();
  id v62 = v296;
  specialized OnDeviceInferenceProviderDataSource.adapterMetadataAtURL(_:)(&v316);
  if (v62)
  {
    v300[1](v54, v298);
    uint64_t v63 = (void *)_convertErrorToNSError(_:)();
    id v64 = objc_msgSend(v63, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v65 = objc_msgSend(v63, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v63, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v66 = v290;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v68 = v291;
    uint64_t v67 = v292;
    uint64_t v69 = v289;
    (*((void (**)(uint64_t, char *, uint64_t))v292 + 2))(v289, v66, v291);
    uint64_t v71 = v293;
    unint64_t v70 = v294;
    (*(void (**)(uint64_t, void, uint64_t))(v294 + 104))(v69, *MEMORY[0x263F56248], v293);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*((void (**)(char *, uint64_t))v67 + 1))(v66, v68);
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(v70 + 32))(v295, v69, v71);
  }
  int16x8_t v265 = (void *)a2;
  id v73 = v300[1];
  ++v300;
  v260 = v73;
  v73(v54, v298);
  id v74 = (void *)*((void *)&v316 + 1);
  uint64_t v261 = v316;
  uint64_t v259 = v320;
  id v75 = v321;
  uint64_t v256 = v318;
  long long v76 = v319;
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)&v325, (uint64_t)v327, &demangling cache variable for type metadata for ClassifierMetadata?);
  short float v257 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v287 + 56);
  uint64_t v258 = v287 + 56;
  v257(v48, 1, 1, v288);
  uint64_t v77 = v286;
  uint64_t v78 = *(void *)(v286 + 16);
  int8x16_t v297 = v48;
  int v263 = v76;
  size_t v264 = v75;
  if (!v78)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of ClassifierMetadata?((uint64_t)v327);
    uint64_t v286 = 0;
    uint64_t v80 = 0;
    id v296 = 0;
    uint64_t v81 = (uint64_t)v284;
    goto LABEL_32;
  }
  BOOL v262 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of ClassifierMetadata?((uint64_t)v327);
  type metadata accessor for CatalogClient();
  swift_bridgeObjectRetain();
  uint64_t v79 = v77 + 40;
  while (1)
  {
    swift_allocObject();
    swift_bridgeObjectRetain();
    CatalogClient.init()();
    dispatch thunk of CatalogClient.resource(for:)();
    swift_release();
    if (!*((void *)&v306 + 1))
    {
      outlined destroy of DataStreamState?((uint64_t)&v305, &demangling cache variable for type metadata for CatalogResource?);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    outlined init with take of LogitCollection(&v305, (uint64_t)&v310);
    swift_bridgeObjectRelease();
    outlined init with take of LogitCollection(&v310, (uint64_t)&v314);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v314, (uint64_t)&v305);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMModel);
    if (swift_dynamicCast()) {
      break;
    }
    int8x16_t v304 = 0;
    long long v302 = 0u;
    long long v303 = 0u;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v314);
    outlined destroy of DataStreamState?((uint64_t)&v302, &demangling cache variable for type metadata for LLMModel?);
LABEL_10:
    v79 += 16;
    if (!--v78)
    {
      swift_bridgeObjectRelease();
      uint64_t v286 = 0;
      uint64_t v80 = 0;
      id v296 = 0;
      id v48 = v297;
      uint64_t v81 = (uint64_t)v284;
      id v74 = v262;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with take of LogitCollection(&v302, (uint64_t)&v310);
  __swift_project_boxed_opaque_existential_1(&v310, v311);
  uint64_t v82 = dispatch thunk of CatalogResource.id.getter();
  uint64_t v84 = v83;
  uint64_t v85 = v285;
  swift_beginAccess();
  uint64_t v86 = *(void *)(v85 + 128);
  if (*(void *)(v86 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v84);
    id v48 = v297;
    uint64_t v88 = (uint64_t)v284;
    uint64_t v89 = v277;
    if (v90)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v86 + 56) + 40 * v87, (uint64_t)&v305);
    }
    else
    {
      uint64_t v307 = 0;
      long long v305 = 0u;
      long long v306 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v92 = v275;
    uint64_t v91 = (uint64_t)v276;
  }
  else
  {
    uint64_t v307 = 0;
    long long v305 = 0u;
    long long v306 = 0u;
    swift_bridgeObjectRelease();
    id v48 = v297;
    uint64_t v88 = (uint64_t)v284;
    uint64_t v92 = v275;
    uint64_t v91 = (uint64_t)v276;
    uint64_t v89 = v277;
  }
  if (*((void *)&v306 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    int v93 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v91, v93 ^ 1u, 1, v92);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v91, 1, v92) != 1)
    {
      uint64_t v94 = v273;
      outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v91, v273, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
      id v296 = *(id *)(v94 + *(int *)(v92 + 24));
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v94, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
      goto LABEL_31;
    }
  }
  else
  {
    outlined destroy of DataStreamState?((uint64_t)&v305, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v91, 1, 1, v92);
  }
  outlined destroy of DataStreamState?(v91, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v310, (uint64_t)&v305);
  unint64_t v95 = (unint64_t)v265;
  swift_bridgeObjectRetain_n();
  int v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v98 = swift_slowAlloc();
    id v296 = (id)swift_slowAlloc();
    *(void *)&long long v302 = v296;
    *(_DWORD *)uint64_t v98 = 136446466;
    __swift_project_boxed_opaque_existential_1(&v305, *((uint64_t *)&v306 + 1));
    uint64_t v99 = dispatch thunk of CatalogResource.id.getter();
    v301[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, (uint64_t *)&v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v305);
    *(_WORD *)(v98 + 12) = 2082;
    swift_bridgeObjectRetain();
    v301[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v282, v95, (uint64_t *)&v302);
    id v48 = v297;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v96, v97, "Base model asset %{public}s was not loaded at time of loading the adapter %{public}s", (uint8_t *)v98, 0x16u);
    id v101 = v296;
    swift_arrayDestroy();
    uint64_t v88 = (uint64_t)v284;
    MEMORY[0x261206F80](v101, -1, -1);
    MEMORY[0x261206F80](v98, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v305);

    swift_bridgeObjectRelease_n();
  }
  id v296 = 0;
LABEL_31:
  __swift_project_boxed_opaque_existential_1((void *)(v285 + 176), *(void *)(v285 + 200));
  __swift_project_boxed_opaque_existential_1(&v310, v311);
  uint64_t v102 = (void *)dispatch thunk of CatalogResource.id.getter();
  OnDeviceInferenceProviderDataSource.asset(for:)(v102, v103, (uint64_t)v279);
  outlined destroy of DataStreamState?((uint64_t)v48, &demangling cache variable for type metadata for Asset?);
  swift_bridgeObjectRelease();
  id v74 = v262;
  uint64_t v81 = v88;
  uint64_t v104 = (uint64_t)v279;
  v257(v279, 0, 1, v288);
  outlined init with take of (key: Int, value: LogitCollection)?(v104, (uint64_t)v48, &demangling cache variable for type metadata for Asset?);
  __swift_project_boxed_opaque_existential_1(&v310, v311);
  uint64_t v286 = dispatch thunk of CatalogResource.id.getter();
  uint64_t v80 = v105;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v314);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v310);
LABEL_32:
  id v106 = v283;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v48, (uint64_t)v283, &demangling cache variable for type metadata for Asset?);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v287 + 48))(v106, 1, v288) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ClassifierMetadata?((uint64_t)v327);
    outlined release of AdapterMetadata((uint64_t)&v316);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?((uint64_t)v106, &demangling cache variable for type metadata for Asset?);
    goto LABEL_37;
  }
  uint64_t v107 = (uint64_t)v106;
  id v108 = (uint8_t *)v81;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v107, v81, (uint64_t (*)(void))type metadata accessor for Asset);
  if (!v80)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v81, (uint64_t (*)(void))type metadata accessor for Asset);
    swift_bridgeObjectRelease();
    outlined release of ClassifierMetadata?((uint64_t)v327);
    outlined release of AdapterMetadata((uint64_t)&v316);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_37:
    uint64_t v113 = (uint64_t)v297;
    int32x4_t v314 = 0;
    v315[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    int32x4_t v314 = (char *)0xD000000000000025;
    v315[0] = 0x800000025FB6C530;
    v114._countAndFlagsBits = v282;
    v114._object = v265;
    String.append(_:)(v114);
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    BOOL v115 = v290;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v117 = v291;
    id v116 = v292;
    uint64_t v118 = v289;
    (*((void (**)(uint64_t, char *, uint64_t))v292 + 2))(v289, v115, v291);
    uint64_t v120 = v293;
    unint64_t v119 = v294;
    (*(void (**)(uint64_t, void, uint64_t))(v294 + 104))(v118, *MEMORY[0x263F56248], v293);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*((void (**)(char *, uint64_t))v116 + 1))(v115, v117);
    goto LABEL_38;
  }
  uint64_t v287 = v80;
  unsigned int v109 = v280;
  URL.appendingPathComponent(_:)();
  uint64_t v110 = URL.path.getter();
  uint64_t v112 = v111;
  v260(v109, v298);
  swift_bridgeObjectRetain();
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC25modelConfigurationWithURL33_65818D6FA4B5F545C6B162D7CBE031AELL_26adapterResourceInformationSo017TGIMutableE5ModelI4ObjCC_AA0Z8MetadataVSgt10Foundation0K0V_AA07AdaptervW0VSgt0Z15ManagerServices0C5ErrorOYKF(v108, v261, v74, v110, v112, v281, &v314);
  uint64_t v298 = 0;
  uint64_t v121 = (uint64_t)v297;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v122 = v314;
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v315, (uint64_t)v328, &demangling cache variable for type metadata for ModelMetadata?);
  objc_msgSend(v122, sel_setBaseModel_, v296);
  objc_msgSend(v122, sel_setUseEnergyEfficientMode_, v274 & 1);
  uint64_t v123 = v282;
  uint64_t v124 = (void *)MEMORY[0x2612053D0](v282, v265);
  objc_msgSend(v122, sel_setAssetIdentifier_, v124);

  uint64_t v125 = v315;
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v315, (uint64_t)&v310, &demangling cache variable for type metadata for ModelMetadata?);
  int v126 = _s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)&v310);
  int8x16_t v300 = (void (**)(char *, uint64_t))v122;
  if (v126 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v299 = 0;
    goto LABEL_55;
  }
  BOOL v262 = v74;
  uint64_t v127 = v312;
  if (!v313)
  {
    uint64_t v299 = v312;
    swift_bridgeObjectRelease();
    outlined release of ModelMetadata?(v315);
LABEL_55:
    uint64_t v142 = 0;
    uint64_t v113 = v121;
    goto LABEL_56;
  }
  uint64_t v113 = v121;
  uint64_t v128 = (uint64_t)v313;
  if ((v312 != v259 || v313 != v264) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v299 = v127;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of ModelMetadata?(v315);
    uint64_t v142 = v128;
LABEL_56:
    outlined release of ClassifierMetadata?((uint64_t)v327);
    outlined release of AdapterMetadata((uint64_t)&v316);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    long long v143 = v265;
    swift_bridgeObjectRetain_n();
    uint64_t v144 = v264;
    swift_bridgeObjectRetain_n();
    uint64_t v145 = (void *)v287;
    swift_bridgeObjectRetain_n();
    uint64_t v146 = Logger.logObject.getter();
    os_log_type_t v147 = static os_log_type_t.error.getter();
    LODWORD(v288) = v147;
    if (os_log_type_enabled(v146, v147))
    {
      uint64_t v148 = swift_slowAlloc();
      uint64_t v298 = v142;
      uint64_t v149 = v148;
      uint64_t v285 = swift_slowAlloc();
      *(void *)&long long v302 = v285;
      *(_DWORD *)uint64_t v149 = 136446978;
      swift_bridgeObjectRetain();
      *(void *)&long long v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, (unint64_t)v143, (uint64_t *)&v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v149 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v259, (unint64_t)v144, (uint64_t *)&v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v149 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v286, (unint64_t)v145, (uint64_t *)&v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v149 + 32) = 2082;
      *(void *)&long long v305 = v299;
      *((void *)&v305 + 1) = v298;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v150 = String.init<A>(describing:)();
      *(void *)&long long v305 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v151, (uint64_t *)&v302);
      uint64_t v123 = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v113 = (uint64_t)v297;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v146, (os_log_type_t)v288, "Failed to load adapter %{public}s, adapter backbone signature %{public}s does not match base model %{public}s backbone signature %{public}s", (uint8_t *)v149, 0x2Au);
      uint64_t v152 = v285;
      swift_arrayDestroy();
      uint64_t v153 = v152;
      id v108 = v284;
      MEMORY[0x261206F80](v153, -1, -1);
      uint64_t v154 = v149;
      uint64_t v142 = v298;
      MEMORY[0x261206F80](v154, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    *(void *)&long long v305 = 0;
    *((void *)&v305 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v155._countAndFlagsBits = 0x2072657470616441;
    v155._object = (void *)0xE800000000000000;
    String.append(_:)(v155);
    v156._countAndFlagsBits = v123;
    v156._object = v143;
    String.append(_:)(v156);
    v157._countAndFlagsBits = 0x7574616E67697320;
    v157._object = (void *)0xEB00000000206572;
    String.append(_:)(v157);
    v158._countAndFlagsBits = v259;
    v158._object = v144;
    String.append(_:)(v158);
    swift_bridgeObjectRelease();
    v159._countAndFlagsBits = 0xD000000000000020;
    v159._object = (void *)0x800000025FB6C560;
    String.append(_:)(v159);
    v160._countAndFlagsBits = v286;
    v160._object = v145;
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
    v161._countAndFlagsBits = 0x7574616E67697320;
    v161._object = (void *)0xEB00000000206572;
    String.append(_:)(v161);
    *(void *)&long long v302 = v299;
    *((void *)&v302 + 1) = v142;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v162._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v162);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v163 = v290;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v165 = v291;
    uint64_t v164 = v292;
    uint64_t v118 = v289;
    (*((void (**)(uint64_t, char *, uint64_t))v292 + 2))(v289, v163, v291);
    uint64_t v120 = v293;
    unint64_t v119 = v294;
    (*(void (**)(uint64_t, void, uint64_t))(v294 + 104))(v118, *MEMORY[0x263F56248], v293);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*((void (**)(char *, uint64_t))v164 + 1))(v163, v165);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v108, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_38:
    outlined destroy of DataStreamState?(v113, &demangling cache variable for type metadata for Asset?);
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(v119 + 32))(v295, v118, v120);
  }
  swift_bridgeObjectRelease();
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v315, (uint64_t)&v305, &demangling cache variable for type metadata for ModelMetadata?);
  uint64_t v129 = v308;
  uint64_t v130 = v123;
  if (!v308 || (uint64_t v131 = v256, !*(void *)(v308 + 16)))
  {
    uint64_t v137 = 0;
    uint64_t v136 = 0;
LABEL_63:
    uint64_t v299 = v137;
    uint64_t v166 = v130;
    outlined release of ModelMetadata?(v125);
    outlined release of ClassifierMetadata?((uint64_t)v327);
    outlined release of AdapterMetadata((uint64_t)&v316);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v167 = v262;
    swift_bridgeObjectRetain_n();
    id v168 = v263;
    swift_bridgeObjectRetain_n();
    uint64_t v169 = (void *)v287;
    swift_bridgeObjectRetain_n();
    unint64_t v170 = Logger.logObject.getter();
    os_log_type_t v171 = static os_log_type_t.error.getter();
    LODWORD(v288) = v171;
    BOOL v172 = os_log_type_enabled(v170, v171);
    uint64_t v298 = v136;
    if (v172)
    {
      uint64_t v173 = swift_slowAlloc();
      uint64_t v285 = swift_slowAlloc();
      v301[0] = v285;
      *(_DWORD *)uint64_t v173 = 136447234;
      unint64_t v174 = (unint64_t)v265;
      swift_bridgeObjectRetain();
      *(void *)&long long v302 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v174, v301);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v173 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v302 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v261, (unint64_t)v262, v301);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v173 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v302 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v256, (unint64_t)v168, v301);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v173 + 32) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v302 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v286, (unint64_t)v169, v301);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v173 + 42) = 2082;
      *(void *)&long long v302 = v299;
      *((void *)&v302 + 1) = v136;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v175 = String.init<A>(describing:)();
      *(void *)&long long v302 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v176, v301);
      uint64_t v166 = v282;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v113 = (uint64_t)v297;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v170, (os_log_type_t)v288, "Failed to load adapter %{public}s type %{public}s, type signature %{public}s does not match base model %{public}s adapter type signature %{public}s", (uint8_t *)v173, 0x34u);
      uint64_t v177 = v285;
      swift_arrayDestroy();
      id v108 = v284;
      MEMORY[0x261206F80](v177, -1, -1);
      uint64_t v178 = v173;
      id v167 = v262;
      MEMORY[0x261206F80](v178, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v179 = v289;
    *(void *)&long long v302 = 0;
    *((void *)&v302 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(92);
    v180._countAndFlagsBits = 0x2072657470616441;
    v180._object = (void *)0xE800000000000000;
    String.append(_:)(v180);
    v181._countAndFlagsBits = v166;
    v181._object = v265;
    String.append(_:)(v181);
    v182._countAndFlagsBits = 0x206570797420;
    v182._object = (void *)0xE600000000000000;
    String.append(_:)(v182);
    v183._countAndFlagsBits = v261;
    v183._object = v167;
    String.append(_:)(v183);
    swift_bridgeObjectRelease();
    v184._object = (void *)0x800000025FB6C590;
    v184._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v184);
    v185._countAndFlagsBits = v256;
    v185._object = v168;
    String.append(_:)(v185);
    swift_bridgeObjectRelease();
    v186._countAndFlagsBits = 0xD00000000000001BLL;
    v186._object = (void *)0x800000025FB6C5B0;
    String.append(_:)(v186);
    v187._countAndFlagsBits = v286;
    v187._object = v169;
    String.append(_:)(v187);
    swift_bridgeObjectRelease();
    v188._countAndFlagsBits = 0xD000000000000018;
    v188._object = (void *)0x800000025FB6C5D0;
    String.append(_:)(v188);
    v301[0] = v299;
    v301[1] = v298;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v189._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v189);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    int32x4_t v190 = v290;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v192 = v291;
    long long v191 = v292;
    (*((void (**)(uint64_t, char *, uint64_t))v292 + 2))(v179, v190, v291);
    uint64_t v194 = v293;
    unint64_t v193 = v294;
    (*(void (**)(uint64_t, void, uint64_t))(v294 + 104))(v179, *MEMORY[0x263F56248], v293);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*((void (**)(char *, uint64_t))v191 + 1))(v190, v192);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v108, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of DataStreamState?(v113, &demangling cache variable for type metadata for Asset?);
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(v193 + 32))(v295, v179, v194);
  }
  int32x4_t v283 = v315;
  uint64_t v132 = (uint64_t)v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(v261, v132);
  if ((v134 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v137 = 0;
    uint64_t v136 = 0;
    uint64_t v125 = v283;
    goto LABEL_63;
  }
  uint64_t v135 = (uint64_t *)(*(void *)(v129 + 56) + 16 * v133);
  uint64_t v137 = *v135;
  uint64_t v136 = v135[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v125 = v283;
  if ((v137 != v131 || (void *)v136 != v263) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_63;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v138 = v307;
  if (v307)
  {
    unint64_t v139 = v317;
    uint64_t v140 = v300;
    if (v317)
    {
      swift_bridgeObjectRetain();
      unint64_t v141 = v139;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v141 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    swift_bridgeObjectRetain();
    uint64_t v195 = v298;
    uint64_t v287 = specialized Dictionary.merging(_:uniquingKeysWith:)(v141, v138);
    uint64_t v298 = v195;
    uint64_t v125 = v283;
  }
  else
  {
    uint64_t v287 = 0;
    uint64_t v140 = v300;
  }
  unint64_t v196 = OnDeviceInferenceAssetRepository.localizationOverrideMap(_:_:)((uint64_t)v328, (uint64_t)&v316);
  outlined release of AdapterMetadata((uint64_t)&v316);
  id v197 = objc_allocWithZone((Class)E5RunnerObjC);
  *(void *)&long long v302 = 0;
  uint64_t v198 = v140;
  id v199 = objc_msgSend(v197, sel_initWithModelConfiguration_error_, v198, &v302);
  int8x16_t v300 = v198;
  if (v199)
  {
    uint64_t v200 = v199;
    unint64_t v294 = v196;
    uint64_t v201 = v322;
    char v202 = v323;
    id v203 = (id)v302;

    id v204 = v200;
    id v205 = objc_msgSend(v204, sel_maxContextLength);
    type metadata accessor for KVLRUCache();
    uint64_t v206 = (void *)swift_allocObject();
    v206[3] = 0;
    v206[4] = 0;
    v206[6] = v205;
    v206[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v206[3] = 0;
    v206[4] = 0;
    v206[5] = 0;
    type metadata accessor for E5TransformerLanguageModel();
    swift_allocObject();
    uint64_t v207 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v204, (uint64_t)v206, 1);
    if (v202)
    {
      int8x16_t v290 = 0;
      uint64_t v291 = 0;
      uint64_t v281 = 0;
      uint64_t v286 = 0;
      uint64_t v201 = 0;
      goto LABEL_87;
    }
    if (v201 < 1)
    {
      int8x16_t v290 = 0;
      uint64_t v291 = 0;
      uint64_t v281 = 0;
      uint64_t v286 = 0;
LABEL_87:
      uint64_t v289 = 2;
    }
    else
    {
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)&v324, (uint64_t)v326, &demangling cache variable for type metadata for DefaultParameters?);
      OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)((uint64_t)v326, (uint64_t)&v302);
      uint64_t v289 = BYTE8(v302);
      int8x16_t v290 = (char *)v303;
      uint64_t v291 = v302;
      if (BYTE12(v303)) {
        uint64_t v219 = 0x100000000;
      }
      else {
        uint64_t v219 = 0;
      }
      uint64_t v220 = 0x10000000000;
      if (!BYTE13(v303)) {
        uint64_t v220 = 0;
      }
      uint64_t v221 = 0x1000000000000;
      if (!BYTE14(v303)) {
        uint64_t v221 = 0;
      }
      uint64_t v281 = v219 | DWORD2(v303) | v220 | v221;
      if (BYTE4(v304)) {
        uint64_t v222 = 0x100000000;
      }
      else {
        uint64_t v222 = 0;
      }
      uint64_t v286 = v222 | v304;
    }
    uint64_t v223 = v272;
    int8x16_t v224 = (void *)v298;
    uint64_t v225 = v267;
    OnDeviceInferenceAssetRepository.promptTemplateConfiguration(asset:)(v272);
    uint64_t v293 = v207;
    if (v224)
    {

      uint64_t v226 = 1;
    }
    else
    {
      uint64_t v226 = 0;
    }
    uint64_t v227 = v269;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v269 + 56))(v223, v226, 1, v225);
    uint64_t v228 = v223;
    uint64_t v229 = v268;
    outlined init with copy of (Int, LogitCollection)(v228, v268, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    int v230 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v227 + 48))(v229, 1, v225);
    id v295 = v204;
    uint64_t v298 = v201;
    if (v230 == 1)
    {
      outlined release of ModelMetadata?(v283);
      outlined destroy of DataStreamState?(v229, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
      swift_bridgeObjectRetain_n();
      int8x16_t v231 = Logger.logObject.getter();
      os_log_type_t v232 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v231, v232))
      {
        int8x16_t v233 = (uint8_t *)swift_slowAlloc();
        uint64_t v234 = swift_slowAlloc();
        *(void *)&long long v302 = v234;
        *(_DWORD *)int8x16_t v233 = 136446210;
        unint64_t v235 = (unint64_t)v265;
        swift_bridgeObjectRetain();
        v301[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v282, v235, (uint64_t *)&v302);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v231, v232, "Did not find prompt template configuration for asset %{public}s", v233, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v234, -1, -1);
        float16x8_t v236 = v233;
        uint64_t v113 = (uint64_t)v297;
        MEMORY[0x261206F80](v236, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      uint64_t v237 = v229;
      uint64_t v238 = v266;
      outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v237, v266, type metadata accessor for PromptTemplateConfiguration);
      outlined release of ModelMetadata?(v283);
      *(unsigned char *)(v238 + *(int *)(v225 + 20)) = v309 & 1;
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v238, type metadata accessor for PromptTemplateConfiguration);
    }
    int16x8_t v240 = (int *)v270;
    int8x16_t v239 = v271;
    uint64_t v241 = (uint64_t)&v271[*(int *)(v270 + 20)];
    int8x16_t v292 = type metadata accessor for Asset;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v299, v241, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v242 = v288;
    short float v243 = v257;
    v257((char *)v241, 0, 1, v288);
    int v244 = (char *)v239 + v240[13];
    uint64_t v245 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v245 - 8) + 56))(v244, 1, 1, v245);
    uint64_t v246 = (uint64_t)v239 + v240[14];
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v284, v246, (uint64_t (*)(void))v292);
    v243((char *)v246, 0, 1, v242);
    outlined init with copy of (Int, LogitCollection)(v272, (uint64_t)v239 + v240[15], &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    uint64_t v247 = v282;
    uint64_t v248 = (uint64_t)v265;
    *int8x16_t v239 = v282;
    v239[1] = v248;
    *(void *)((char *)v239 + v240[6]) = v295;
    *(void *)((char *)v239 + v240[7]) = v293;
    short float v249 = (char *)v239 + v240[8];
    *(_OWORD *)short float v249 = xmmword_25FB62AB0;
    *((void *)v249 + 2) = 0;
    *((void *)v249 + 3) = 0;
    *(void *)(v249 + 29) = 0;
    uint64_t v250 = v286;
    *(void *)((char *)v239 + v240[9]) = v287;
    *(void *)((char *)v239 + v240[10]) = v298;
    int v251 = (char *)v239 + v240[11];
    uint64_t v252 = v289;
    *(void *)int v251 = v291;
    *((void *)v251 + 1) = v252;
    uint64_t v253 = v281;
    *((void *)v251 + 2) = v290;
    *((void *)v251 + 3) = v253;
    v251[36] = BYTE4(v250);
    *((_DWORD *)v251 + 8) = v250;
    *(void *)((char *)v239 + v240[12]) = v294;
    outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v327, (uint64_t)v239 + v240[16], &demangling cache variable for type metadata for ClassifierMetadata?);
    *((void *)&v303 + 1) = v240;
    int8x16_t v304 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v302);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v239, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v302, v247, v248);
    swift_endAccess();

    swift_release();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v239, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of DataStreamState?(v272, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v284, (uint64_t (*)(void))type metadata accessor for Asset);
    return outlined destroy of DataStreamState?(v113, &demangling cache variable for type metadata for Asset?);
  }
  else
  {
    id v208 = (id)v302;
    short float v209 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ModelMetadata?(v125);
    outlined release of ClassifierMetadata?((uint64_t)v327);
    int v210 = (void *)_convertErrorToNSError(_:)();
    id v211 = objc_msgSend(v210, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v212 = objc_msgSend(v210, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v210, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    long long v213 = v290;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v215 = v291;
    long long v214 = v292;
    uint64_t v216 = v289;
    (*((void (**)(uint64_t, char *, uint64_t))v292 + 2))(v289, v213, v291);
    uint64_t v218 = v293;
    unint64_t v217 = v294;
    (*(void (**)(uint64_t, void, uint64_t))(v294 + 104))(v216, *MEMORY[0x263F56248], v293);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*((void (**)(char *, uint64_t))v214 + 1))(v213, v215);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v284, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of DataStreamState?((uint64_t)v297, &demangling cache variable for type metadata for Asset?);
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(v217 + 32))(v295, v216, v218);
  }
}