uint64_t OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t result;
  int v15;
  char v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned __int8 v23;
  int v24;
  char v25;
  unsigned char v26[48];
  unsigned char v27[48];
  int v28;
  char v29;
  unsigned __int8 v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  unsigned __int8 v35;
  uint64_t v36;
  char v37;
  unsigned char v38[8];
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = (void *)(v2 + 216);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + 216), *(void *)(v2 + 240));
  type metadata accessor for OnDeviceInferenceOverrides();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  Overridable.wrappedValue.getter();
  if (v41 == 1
    && ((outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)&v40, &demangling cache variable for type metadata for DefaultParameters?), (v41 & 0xFF00) == 0x300)|| (v41 & 1) != 0))
  {
    v6 = 2;
  }
  else
  {
    v6 = v40;
  }
  v19 = v6;
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  if (v38[0] == 2)
  {
    outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)v38, &demangling cache variable for type metadata for DefaultParameters?);
    if ((v39 & 0xFF00) == 0x300)
    {
      v18 = 0;
      goto LABEL_12;
    }
    v7 = (v39 >> 8) & 1;
  }
  else
  {
    LOBYTE(v7) = v38[0] & 1;
  }
  v18 = v7;
LABEL_12:
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  Overridable.wrappedValue.getter();
  if (v34 == 1)
  {
    outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)&v33, &demangling cache variable for type metadata for DefaultParameters?);
    if (unint64_t)v35 << 8 == 768 || (v37) {
      v8 = 1;
    }
    else {
      v8 = v36;
    }
  }
  else
  {
    v8 = v33;
  }
  v20 = v8;
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  Overridable.wrappedValue.getter();
  if (v29 == 1)
  {
    outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)&v28, &demangling cache variable for type metadata for DefaultParameters?);
    if ((unint64_t)v30 << 8 == 768)
    {
      v17 = 0;
      v9 = 1;
    }
    else
    {
      v17 = v31;
      v9 = v32 & 1;
    }
  }
  else
  {
    v9 = 0;
    v17 = v28;
  }
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  Overridable.wrappedValue.getter();
  v10 = v27[0];
  if (v27[0] == 2)
  {
    outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)v27, &demangling cache variable for type metadata for DefaultParameters?);
    if ((unint64_t)v27[9] << 8 == 768)
    {
      v11 = 0;
      goto LABEL_28;
    }
    v10 = v27[33];
  }
  v11 = v10 & 1;
LABEL_28:
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  Overridable.wrappedValue.getter();
  v12 = v26[0];
  if (v26[0] == 2)
  {
    outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)v26, &demangling cache variable for type metadata for DefaultParameters?);
    if ((unint64_t)v26[9] << 8 == 768)
    {
      v13 = 0;
      goto LABEL_33;
    }
    v12 = v26[34];
  }
  v13 = v12 & 1;
LABEL_33:
  __swift_project_boxed_opaque_existential_1(v5, *(void *)(v2 + 240));
  result = Overridable.wrappedValue.getter();
  if (v22 == 1)
  {
    result = outlined init with take of (key: Int, value: LogitCollection)?(a1, (uint64_t)&v21, &demangling cache variable for type metadata for DefaultParameters?);
    if ((unint64_t)v23 << 8 == 768)
    {
      v15 = 0;
      v16 = 1;
    }
    else
    {
      v15 = v24;
      v16 = v25 & 1;
    }
  }
  else
  {
    v16 = 0;
    v15 = v21;
  }
  if (v20 < 1)
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = v19;
    *(unsigned char *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v20;
    *(_DWORD *)(a2 + 24) = v17;
    *(unsigned char *)(a2 + 28) = v9;
    *(unsigned char *)(a2 + 29) = v11 & v9;
    *(unsigned char *)(a2 + 30) = v13;
    *(_DWORD *)(a2 + 32) = v15;
    *(unsigned char *)(a2 + 36) = v16;
  }
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC16handleDraftModel33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5asset22useEnergyEfficientModeySS_AA0F0VSbt0J15ManagerServices0C5ErrorOYKF(uint64_t a1, unint64_t a2, uint8_t *a3, int a4, id a5)
{
  uint64_t v112 = a1;
  uint64_t v7 = v5;
  LODWORD(v104) = a4;
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for InferenceError.Context();
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  MEMORY[0x270FA5388](v10, v11);
  v99 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  MEMORY[0x270FA5388](v13 - 8, v14);
  uint64_t v105 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  MEMORY[0x270FA5388](v102, v16);
  v103 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for InferenceError();
  uint64_t v109 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18, v19);
  v98 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v110 = (uint64_t)&v94 - v23;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v106 = v18;
    uint64_t v27 = swift_slowAlloc();
    v108 = a3;
    v28 = (uint8_t *)v27;
    v29 = (void *)swift_slowAlloc();
    id v129 = v29;
    id v107 = a5;
    *(_DWORD *)v28 = 136446210;
    swift_bridgeObjectRetain();
    v124[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, a2, (uint64_t *)&v129);
    uint64_t v18 = v106;
    a5 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v25, v26, "Loading draft model with identifier %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v29, -1, -1);
    v30 = v28;
    a3 = v108;
    MEMORY[0x261206F80](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v32 = v110;
  id v31 = v111;
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC25modelConfigurationWithURL33_65818D6FA4B5F545C6B162D7CBE031AELL_26adapterResourceInformationSo017TGIMutableE5ModelI4ObjCC_AA0Z8MetadataVSgt10Foundation0K0V_AA07AdaptervW0VSgt0Z15ManagerServices0C5ErrorOYKF(a3, 0, 0, 0, 0, v110, &v129);
  if (v31) {
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(v109 + 32))(a5, v32, v18);
  }
  id v107 = a5;
  v108 = a3;
  uint64_t v106 = v18;
  id v34 = v129;
  uint64_t v110 = (uint64_t)&v130;
  objc_msgSend(v129, sel_setUseEnergyEfficientMode_, v104 & 1);
  v35 = (void *)MEMORY[0x2612053D0](v112, a2);
  objc_msgSend(v34, sel_setAssetIdentifier_, v35);

  id v36 = objc_allocWithZone((Class)E5RunnerObjC);
  v124[0] = 0;
  id v37 = v34;
  id v38 = objc_msgSend(v36, sel_initWithModelConfiguration_error_, v37, v124);
  id v111 = v37;
  if (v38)
  {
    v39 = v38;
    uint64_t v109 = v7;
    id v40 = v124[0];

    id v41 = v39;
    id v42 = objc_msgSend(v41, sel_maxContextLength);
    type metadata accessor for KVLRUCache();
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 24) = 0u;
    *(void *)(v43 + 48) = v42;
    *(void *)(v43 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(_OWORD *)(v43 + 24) = 0u;
    *(void *)(v43 + 40) = 0;
    type metadata accessor for E5TransformerLanguageModel();
    swift_allocObject();
    id v107 = v41;
    uint64_t v106 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v41, v43, 1);
    uint64_t v44 = v105;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v108, v105, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v45 = type metadata accessor for Asset();
    uint64_t v46 = *(void *)(v45 - 8);
    v108 = *(uint8_t **)(v46 + 56);
    uint64_t v104 = v46 + 56;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v108)(v44, 0, 1, v45);
    v47 = (uint64_t *)v110;
    outlined init with take of (key: Int, value: LogitCollection)?(v110, (uint64_t)v124, &demangling cache variable for type metadata for ModelMetadata?);
    int v48 = _s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v124);
    unint64_t v97 = a2;
    if (v48 == 1)
    {
      uint64_t v49 = 0;
      char v50 = 0;
      long long v51 = xmmword_25FB62AC0;
      long long v52 = 0uLL;
    }
    else
    {
      long long v51 = v125;
      long long v52 = v126;
      uint64_t v49 = v127;
      char v50 = v128;
    }
    v131[0] = v51;
    v131[1] = v52;
    uint64_t v132 = v49;
    char v133 = v50;
    OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)((uint64_t)v131, (uint64_t)&v113);
    uint64_t v110 = v114;
    uint64_t v100 = v115;
    uint64_t v101 = v113;
    uint64_t v64 = v116;
    int v65 = v117;
    int v66 = v118;
    int v67 = v119;
    LODWORD(v99) = v120;
    int v68 = v121;
    outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v47, (uint64_t)v123, &demangling cache variable for type metadata for ModelMetadata?);
    if (_s24TokenGenerationInference13ModelMetadataVSgWOg((uint64_t)v123) == 1)
    {
      v98 = 0;
      uint64_t v96 = 0;
    }
    else
    {
      LODWORD(v95) = v67;
      uint64_t v69 = v64;
      int v70 = v68;
      uint64_t v71 = v45;
      uint64_t v72 = v123[4];
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v47, (uint64_t)v122, &demangling cache variable for type metadata for ModelMetadata?);
      v98 = (char *)v122[14];
      swift_bridgeObjectRetain();
      uint64_t v96 = v72;
      uint64_t v45 = v71;
      int v68 = v70;
      uint64_t v64 = v69;
      int v67 = v95;
      swift_bridgeObjectRetain();
      outlined release of ModelMetadata?(v47);
    }
    if (v65) {
      uint64_t v73 = 0x100000000;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = v73 | v64;
    uint64_t v75 = 0x10000000000;
    if (!v66) {
      uint64_t v75 = 0;
    }
    uint64_t v76 = 0x1000000000000;
    if (!v67) {
      uint64_t v76 = 0;
    }
    uint64_t v95 = v74 | v75 | v76;
    BOOL v77 = v68 != 0;
    v78 = (int *)v102;
    v79 = v103;
    v80 = &v103[*(int *)(v102 + 52)];
    uint64_t v81 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 1, 1, v81);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v108)((char *)v79 + v78[14], 1, 1, v45);
    v82 = (char *)v79 + v78[15];
    uint64_t v83 = type metadata accessor for PromptTemplateConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v82, 1, 1, v83);
    uint64_t v84 = v112;
    uint64_t v85 = v97;
    void *v79 = v112;
    v79[1] = v85;
    outlined init with take of (key: Int, value: LogitCollection)?(v105, (uint64_t)v79 + v78[5], &demangling cache variable for type metadata for Asset?);
    uint64_t v87 = v106;
    v86 = v107;
    *(void *)((char *)v79 + v78[6]) = v107;
    *(void *)((char *)v79 + v78[7]) = v87;
    v88 = (char *)v79 + v78[8];
    uint64_t v89 = v110;
    *(void *)v88 = v101;
    *((void *)v88 + 1) = v89;
    uint64_t v90 = v95;
    *((void *)v88 + 2) = v100;
    *((void *)v88 + 3) = v90;
    v88[36] = v77;
    *((_DWORD *)v88 + 8) = v99;
    *(void *)((char *)v79 + v78[9]) = v96;
    *(void *)((char *)v79 + v78[10]) = 0;
    v91 = (char *)v79 + v78[11];
    *(_OWORD *)v91 = xmmword_25FB62AB0;
    *((void *)v91 + 2) = 0;
    *((void *)v91 + 3) = 0;
    *(void *)(v91 + 29) = 0;
    *(void *)((char *)v79 + v78[12]) = v98;
    v92 = (void *)((char *)v79 + v78[16]);
    void *v92 = 0;
    v92[1] = 0;
    v122[3] = (uint64_t)v78;
    v122[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v122);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v79, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v122, v84, v85);
    swift_endAccess();
    swift_release();

    return outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v79, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  }
  else
  {
    id v53 = v124[0];
    v54 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    outlined release of ModelMetadata?((uint64_t *)v110);
    v55 = (void *)_convertErrorToNSError(_:)();
    id v56 = objc_msgSend(v55, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v57 = objc_msgSend(v55, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v55, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v58 = v99;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v60 = v100;
    uint64_t v59 = v101;
    v61 = v98;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v98, v58, v101);
    uint64_t v62 = v109;
    uint64_t v63 = v106;
    (*(void (**)(char *, void, uint64_t))(v109 + 104))(v61, *MEMORY[0x263F56248], v106);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
    return (*(uint64_t (**)(id, char *, uint64_t))(v62 + 32))(v107, v61, v63);
  }
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC19loadTokenizerAtPath4pathySS_t20ModelManagerServices0C5ErrorOYKF(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v63 = a1;
  uint64_t v7 = type metadata accessor for InferenceError();
  uint64_t v54 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InferenceError.Context();
  uint64_t v57 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12);
  id v56 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v55 = v7;
  id v53 = v10;
  uint64_t v52 = v11;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v50 = a3;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    *(void *)&long long v60 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    v59[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, (unint64_t)a2, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v15, v16, "Loading tokenizer at path %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v20, -1, -1);
    uint64_t v21 = v19;
    a3 = v50;
    MEMORY[0x261206F80](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t v22 = *(void *)(v5 + 128);
  if (*(void *)(v22 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = v63;
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v63, (uint64_t)a2);
    if (v25)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v22 + 56) + 40 * v24, (uint64_t)&v60);
    }
    else
    {
      uint64_t v62 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v61 + 1))
    {
      swift_bridgeObjectRetain_n();
      os_log_type_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        v59[0] = v29;
        *(_DWORD *)v28 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = v63;
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, (unint64_t)a2, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v26, v27, "Tokenizer at path is already loaded %s", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v29, -1, -1);
        MEMORY[0x261206F80](v28, -1, -1);

        uint64_t v32 = v54;
        uint64_t v31 = v55;
        v33 = v53;
        uint64_t v34 = v52;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v32 = v54;
        uint64_t v31 = v55;
        v33 = v53;
        uint64_t v34 = v52;
        uint64_t v30 = v63;
      }
      v59[0] = 0x657A696E656B6F54;
      v59[1] = 0xEA00000000002072;
      v48._countAndFlagsBits = v30;
      v48._object = a2;
      String.append(_:)(v48);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      id v40 = v56;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v41 = v57;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v33, v40, v34);
      (*(void (**)(char *, void, uint64_t))(v32 + 104))(v33, *MEMORY[0x263F56260], v31);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v23 = v63;
  }
  specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC19loadTokenizerAtPath4pathySS_t20ModelManagerServices0C5ErrorOYKFTv_r);
  type metadata accessor for TokenizerRunner();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v35 = v51;
  uint64_t v36 = TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
  if (!v35)
  {
    uint64_t v42 = v36;
    uint64_t v43 = (int *)type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
    v59[3] = (uint64_t)v43;
    v59[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectTokenizer;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
    uint64_t v45 = (char *)boxed_opaque_existential_1 + v43[5];
    uint64_t v46 = type metadata accessor for Asset();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
    uint64_t *boxed_opaque_existential_1 = v23;
    boxed_opaque_existential_1[1] = (uint64_t)a2;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v43[6]) = v42;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v43[7]) = 0;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + v43[8]) = 0;
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v59, v23, (uint64_t)a2);
    swift_endAccess();
    swift_release();
    return outlined destroy of DataStreamState?((uint64_t)&v60, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
  id v37 = (void *)_convertErrorToNSError(_:)();
  id v38 = objc_msgSend(v37, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v39 = objc_msgSend(v37, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v37, sel_code);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  id v40 = v56;
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v41 = v57;
  v33 = v53;
  uint64_t v34 = v52;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v53, v40, v52);
  uint64_t v32 = v54;
  uint64_t v31 = v55;
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v33, *MEMORY[0x263F56248], v55);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

LABEL_19:
  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v34);
  outlined destroy of DataStreamState?((uint64_t)&v60, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(a3, v33, v31);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC12loadE5Runner18modelConfiguration16draftingBehaviorySo010TGIE5ModelL4ObjCC_AA08DraftingN0VSgt0P15ManagerServices0C5ErrorOYKF(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v81 = a3;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for InferenceError();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v84 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InferenceError.Context();
  uint64_t v82 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v10);
  v88 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = *a2;
  uint64_t v78 = a2[1];
  uint64_t v77 = a2[2];
  uint64_t v76 = a2[3];
  uint64_t v12 = *((unsigned __int8 *)a2 + 36);
  uint64_t v13 = *((unsigned int *)a2 + 8);
  id v14 = objc_msgSend(a1, sel_modelBundlePath);
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v16 = v15;

  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v80 = v18;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v86 = v5;
  uint64_t v85 = v6;
  uint64_t v83 = v9;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v75 = a1;
    uint64_t v24 = v23;
    *(void *)&long long v92 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    v91[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, (unint64_t)v16, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v19, v20, "Loading model at path %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v24;
    a1 = v75;
    MEMORY[0x261206F80](v25, -1, -1);
    MEMORY[0x261206F80](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = v87;
  uint64_t v27 = v87 + 128;
  swift_beginAccess();
  uint64_t v28 = *(void *)(v26 + 128);
  uint64_t v29 = v88;
  if (*(void *)(v28 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v89, (uint64_t)v16);
    if (v31)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v28 + 56) + 40 * v30, (uint64_t)&v92);
    }
    else
    {
      uint64_t v94 = 0;
      long long v92 = 0u;
      long long v93 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v93 + 1))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        v35 = (void *)swift_slowAlloc();
        v91[0] = v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v36 = v89;
        uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, (unint64_t)v16, (uint64_t *)v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v32, v33, "Model at path is already loaded %s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v35, -1, -1);
        MEMORY[0x261206F80](v34, -1, -1);

        uint64_t v37 = v85;
        id v38 = v84;
        uint64_t v39 = v83;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v37 = v85;
        id v38 = v84;
        uint64_t v39 = v83;
        uint64_t v36 = v89;
      }
      v91[0] = (id)0x206C65646F4DLL;
      v91[1] = (id)0xE600000000000000;
      v73._countAndFlagsBits = v36;
      v73._object = v16;
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v71 = v82;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v38, v29, v39);
      uint64_t v72 = v86;
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v38, *MEMORY[0x263F56260], v86);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
  }
  id v40 = objc_allocWithZone((Class)E5RunnerObjC);
  v91[0] = 0;
  id v41 = a1;
  id v42 = objc_msgSend(v40, sel_initWithModelConfiguration_error_, v41, v91);
  if (v42)
  {
    uint64_t v43 = v42;
    v88 = (char *)(v13 | (v12 << 32));
    id v44 = v91[0];

    id v45 = v43;
    id v46 = objc_msgSend(v45, sel_maxContextLength);
    type metadata accessor for KVLRUCache();
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 24) = 0u;
    *(void *)(v47 + 48) = v46;
    *(void *)(v47 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(_OWORD *)(v47 + 24) = 0u;
    *(void *)(v47 + 40) = 0;
    type metadata accessor for E5TransformerLanguageModel();
    swift_allocObject();
    uint64_t v48 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v45, v47, 1);
    uint64_t v49 = (int *)type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
    v91[3] = v49;
    v91[4] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v91);
    uint64_t v87 = v27;
    long long v51 = boxed_opaque_existential_1;
    uint64_t v52 = (char *)boxed_opaque_existential_1 + v49[5];
    uint64_t v53 = type metadata accessor for Asset();
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
    v54(v52, 1, 1, v53);
    uint64_t v55 = (char *)v51 + v49[13];
    uint64_t v56 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
    v54((char *)v51 + v49[14], 1, 1, v53);
    uint64_t v57 = (char *)v51 + v49[15];
    uint64_t v58 = type metadata accessor for PromptTemplateConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 1, 1, v58);
    uint64_t v59 = v89;
    *long long v51 = v89;
    v51[1] = (uint64_t)v16;
    *(uint64_t *)((char *)v51 + v49[6]) = (uint64_t)v45;
    *(uint64_t *)((char *)v51 + v49[7]) = v48;
    long long v60 = (char *)v51 + v49[8];
    uint64_t v61 = v78;
    *(void *)long long v60 = v79;
    *((void *)v60 + 1) = v61;
    uint64_t v62 = v76;
    *((void *)v60 + 2) = v77;
    *((void *)v60 + 3) = v62;
    int v63 = (int)v88;
    v60[36] = BYTE4(v88);
    *((_DWORD *)v60 + 8) = v63;
    *(uint64_t *)((char *)v51 + v49[9]) = 0;
    *(uint64_t *)((char *)v51 + v49[10]) = 0;
    uint64_t v64 = (char *)v51 + v49[11];
    *(_OWORD *)uint64_t v64 = xmmword_25FB62AB0;
    *((_OWORD *)v64 + 1) = 0u;
    *(void *)(v64 + 29) = 0;
    *(uint64_t *)((char *)v51 + v49[12]) = 0;
    *(_OWORD *)((char *)v51 + v49[16]) = 0u;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v91, v59, (uint64_t)v16);
    swift_endAccess();
    swift_release();

    return outlined destroy of DataStreamState?((uint64_t)&v92, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
  id v66 = v91[0];
  int v67 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();

  int v68 = (void *)_convertErrorToNSError(_:)();
  id v69 = objc_msgSend(v68, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v70 = objc_msgSend(v68, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v68, sel_code);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v71 = v82;
  id v38 = v84;
  uint64_t v39 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v84, v29, v83);
  uint64_t v37 = v85;
  uint64_t v72 = v86;
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v38, *MEMORY[0x263F56248], v86);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

LABEL_19:
  (*(void (**)(char *, uint64_t))(v71 + 8))(v29, v39);
  outlined destroy of DataStreamState?((uint64_t)&v92, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v81, v38, v72);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC035fetchPromptTemplateConfigurationForF6Bundle10identifierAA0ijK0VSgSS_tYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = v4;
  v5[7] = a4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t v6 = type metadata accessor for InferenceError();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  v5[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC035fetchPromptTemplateConfigurationForF6Bundle10identifierAA0ijK0VSgSS_tYa20ModelManagerServices0C5ErrorOYKFTY0_, v4, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC035fetchPromptTemplateConfigurationForF6Bundle10identifierAA0ijK0VSgSS_tYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v13 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 40);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Fetching prompt template for asset bundle %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v8, -1, -1);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC08e5Runnerf9ObjectForF6Bundle33_65818D6FA4B5F545C6B162D7CBE031AELL10identifierAA0decfj2E5I0VSS_t20ModelManagerServices0C5ErrorOYKF(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 80), *(void **)(v0 + 96));
  uint64_t v9 = *(void *)(v0 + 96);
  outlined init with copy of (Int, LogitCollection)(v9 + *(int *)(*(void *)(v0 + 88) + 60), *(void *)(v0 + 24), &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v9, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC024fetchSpecialTokensMapForF6Bundle10identifierSDySSAA08MetadataiA0OGSgSS_t20ModelManagerServices0C5ErrorOYKF(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for InferenceError();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  MEMORY[0x270FA5388](v30, v13);
  char v31 = (void *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v27[0] = v12;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v28 = v9;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v29 = a3;
    uint64_t v21 = v20;
    uint64_t v34 = v20;
    v27[1] = v5;
    *(_DWORD *)uint64_t v19 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v34);
    uint64_t v12 = (char *)v27[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v16, v17, "Fetching special tokens map for asset bundle %{public}s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v21;
    a3 = v29;
    MEMORY[0x261206F80](v22, -1, -1);
    uint64_t v23 = v19;
    uint64_t v9 = v28;
    MEMORY[0x261206F80](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = v31;
  uint64_t v24 = v32;
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC08e5Runnerf9ObjectForF6Bundle33_65818D6FA4B5F545C6B162D7CBE031AELL10identifierAA0decfj2E5I0VSS_t20ModelManagerServices0C5ErrorOYKF(a1, a2, (uint64_t)v12, v31);
  if (v24)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v12, v8);
  }
  else
  {
    a3 = *(void *)((char *)v25 + *(int *)(v30 + 36));
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v25, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  }
  return a3;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC028fetchLocalizationMetadataForF6Bundle10identifierSDySSSDySSAA0j7SpecialA0OGGSgSS_t20ModelManagerServices0C5ErrorOYKF(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for InferenceError();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  MEMORY[0x270FA5388](v30, v13);
  char v31 = (void *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v27[0] = v12;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v28 = v9;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v29 = a3;
    uint64_t v21 = v20;
    uint64_t v34 = v20;
    v27[1] = v5;
    *(_DWORD *)uint64_t v19 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v34);
    uint64_t v12 = (char *)v27[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v16, v17, "Fetching localization metadata for asset bundle %{public}s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v21;
    a3 = v29;
    MEMORY[0x261206F80](v22, -1, -1);
    uint64_t v23 = v19;
    uint64_t v9 = v28;
    MEMORY[0x261206F80](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = v31;
  uint64_t v24 = v32;
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC08e5Runnerf9ObjectForF6Bundle33_65818D6FA4B5F545C6B162D7CBE031AELL10identifierAA0decfj2E5I0VSS_t20ModelManagerServices0C5ErrorOYKF(a1, a2, (uint64_t)v12, v31);
  if (v24)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v12, v8);
  }
  else
  {
    a3 = *(void *)((char *)v25 + *(int *)(v30 + 48));
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v25, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  }
  return a3;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04loadF010identifier7version20shouldDoVersionCheckySS_SSSgSbt20ModelManagerServices0C5ErrorOYKF(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v192 = a5;
  uint64_t v193 = a4;
  uint64_t v190 = a3;
  v220 = a1;
  uint64_t v8 = type metadata accessor for CostProfile();
  uint64_t v188 = *(void *)(v8 - 8);
  uint64_t v189 = v8;
  uint64_t v10 = MEMORY[0x270FA5388](v8, v9);
  v178 = (char *)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  v180 = (char *)&v175 - v14;
  MEMORY[0x270FA5388](v13, v15);
  v186 = (char *)&v175 - v16;
  uint64_t v187 = type metadata accessor for Asset();
  uint64_t v18 = MEMORY[0x270FA5388](v187, v17);
  v177 = (uint8_t *)&v175 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v181 = (uint64_t)&v175 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  v185 = (uint8_t *)&v175 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24, v26);
  uint64_t v183 = (uint64_t)&v175 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  uint64_t v191 = (uint64_t)&v175 - v31;
  uint64_t v33 = MEMORY[0x270FA5388](v30, v32);
  uint64_t v194 = (uint64_t)&v175 - v34;
  MEMORY[0x270FA5388](v33, v35);
  uint64_t v195 = (uint64_t)&v175 - v36;
  uint64_t v37 = type metadata accessor for InferenceError.Context();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37, v39);
  v201 = (char *)&v175 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for InferenceError();
  uint64_t v205 = *(void *)(v41 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v41, v42);
  v176 = (char *)&v175 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x270FA5388](v43, v45);
  v179 = (char *)&v175 - v47;
  uint64_t v49 = MEMORY[0x270FA5388](v46, v48);
  uint64_t v182 = (uint64_t)&v175 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49, v51);
  v184 = (char *)&v175 - v53;
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  uint64_t v57 = (char *)&v175 - v56;
  MEMORY[0x270FA5388](v55, v58);
  uint64_t v197 = (uint64_t)&v175 - v59;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v61 = __swift_project_value_buffer(v60, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v203 = v61;
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.info.getter();
  BOOL v64 = os_log_type_enabled(v62, v63);
  v202 = v57;
  uint64_t v199 = v37;
  uint64_t v200 = v38;
  if (v64)
  {
    uint64_t v65 = swift_slowAlloc();
    uint64_t v198 = v41;
    id v66 = (uint8_t *)v65;
    unint64_t v67 = (unint64_t)a2;
    uint64_t v68 = a6;
    uint64_t v69 = swift_slowAlloc();
    *(void *)&long long v217 = v69;
    *(_DWORD *)id v66 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v214 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v220, v67, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v62, v63, "Loading asset with identifier %{public}s", v66, 0xCu);
    swift_arrayDestroy();
    uint64_t v70 = v69;
    a6 = v68;
    a2 = (void *)v67;
    MEMORY[0x261206F80](v70, -1, -1);
    uint64_t v71 = v66;
    uint64_t v41 = v198;
    MEMORY[0x261206F80](v71, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v72 = v206;
  swift_beginAccess();
  uint64_t v73 = v72[18];
  if (*(void *)(v73 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v74 = v220;
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v220, (uint64_t)a2);
    if (v76)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v73 + 56) + 40 * v75, (uint64_t)&v214);
    }
    else
    {
      uint64_t v216 = 0;
      long long v214 = 0u;
      long long v215 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v215 + 1))
    {
      outlined init with take of LogitCollection(&v214, (uint64_t)&v217);
      uint64_t v77 = v204;
      uint64_t v78 = v197;
      _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF24FromDynamicToLoadedStateyyAA0decF6Object_p20ModelManagerServices0C5ErrorOYKF(&v217, v197);
      if (v77)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 32))(a6, v78, v41);
      }
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v217);
    }
  }
  else
  {
    uint64_t v216 = 0;
    long long v214 = 0u;
    long long v215 = 0u;
    uint64_t v74 = v220;
  }
  outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  swift_beginAccess();
  uint64_t v80 = v72[16];
  uint64_t v81 = *(void *)(v80 + 16);
  uint64_t v196 = a6;
  if (v81)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74, (uint64_t)a2);
    if (v83)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v80 + 56) + 40 * v82, (uint64_t)&v217);
    }
    else
    {
      uint64_t v219 = 0;
      long long v217 = 0u;
      long long v218 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v218 + 1))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        *(void *)&long long v214 = v87;
        *(_DWORD *)uint64_t v86 = 136446210;
        swift_bridgeObjectRetain();
        v213[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v220, (unint64_t)a2, (uint64_t *)&v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v84, v85, "Asset is already loaded %{public}s", v86, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v87, -1, -1);
        v88 = v86;
        uint64_t v74 = v220;
        MEMORY[0x261206F80](v88, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      long long v92 = v202;
      uint64_t v94 = v199;
      uint64_t v93 = v200;
      *(void *)&long long v214 = 0x207465737341;
      *((void *)&v214 + 1) = 0xE600000000000000;
      v95._countAndFlagsBits = (uint64_t)v74;
      v95._object = a2;
      String.append(_:)(v95);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v96 = v201;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v92, v96, v94);
      uint64_t v97 = v205;
      (*(void (**)(char *, void, uint64_t))(v205 + 104))(v92, *MEMORY[0x263F56260], v41);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
      outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v97 + 32))(v196, v92, v41);
    }
  }
  else
  {
    uint64_t v219 = 0;
    long long v217 = 0u;
    long long v218 = 0u;
  }
  swift_beginAccess();
  uint64_t v89 = v72[17];
  if (*(void *)(v89 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74, (uint64_t)a2);
    if (v91)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v89 + 56) + 40 * v90, (uint64_t)&v214);
    }
    else
    {
      uint64_t v216 = 0;
      long long v214 = 0u;
      long long v215 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v215 + 1))
    {
      swift_bridgeObjectRetain_n();
      v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        uint64_t v101 = swift_slowAlloc();
        v213[0] = v101;
        *(_DWORD *)uint64_t v100 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v220, (unint64_t)a2, v213);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v98, v99, "Asset is currently in use %{public}s", v100, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v101, -1, -1);
        uint64_t v102 = v100;
        uint64_t v74 = v220;
        MEMORY[0x261206F80](v102, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v111 = v202;
      uint64_t v113 = v199;
      uint64_t v112 = v200;
      v213[0] = 0x207465737341;
      v213[1] = 0xE600000000000000;
      v114._countAndFlagsBits = (uint64_t)v74;
      v114._object = a2;
      String.append(_:)(v114);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v115 = v201;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v111, v115, v113);
      uint64_t v116 = v205;
      (*(void (**)(char *, void, uint64_t))(v205 + 104))(v111, *MEMORY[0x263F56260], v41);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v113);
LABEL_40:
      outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v116 + 32))(v196, v111, v41);
    }
  }
  else
  {
    uint64_t v216 = 0;
    long long v214 = 0u;
    long long v215 = 0u;
  }
  __swift_project_boxed_opaque_existential_1(v72 + 22, v72[25]);
  v103 = v204;
  OnDeviceInferenceProviderDataSource.catalogResource(for:)((uint64_t)&v211);
  uint64_t v104 = v103;
  if (v103)
  {
    uint64_t v198 = v41;
    swift_bridgeObjectRetain_n();
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      v220 = v103;
      uint64_t v107 = (uint64_t)v74;
      v108 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      *(void *)&long long v211 = v109;
      *(_DWORD *)v108 = 136446210;
      swift_bridgeObjectRetain();
      v210[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, (unint64_t)a2, (uint64_t *)&v211);
      uint64_t v104 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v105, v106, "Failed to get catalog resource %{public}s", v108, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v109, -1, -1);
      MEMORY[0x261206F80](v108, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unsigned __int8 v117 = (void *)_convertErrorToNSError(_:)();
    id v118 = objc_msgSend(v117, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v119 = objc_msgSend(v117, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v120 = v104;

    objc_msgSend(v117, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unsigned __int8 v121 = v201;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v123 = v199;
    uint64_t v122 = v200;
    v124 = v202;
    (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v202, v121, v199);
    uint64_t v125 = v205;
    uint64_t v126 = v198;
    (*(void (**)(char *, void, uint64_t))(v205 + 104))(v124, *MEMORY[0x263F56248], v198);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
    outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v125 + 32))(v196, v124, v126);
  }
  outlined init with take of LogitCollection(&v211, (uint64_t)v213);
  __swift_project_boxed_opaque_existential_1(v72 + 22, v72[25]);
  uint64_t v110 = v194;
  OnDeviceInferenceProviderDataSource.asset(for:)(v74, (uint64_t)a2, v194);
  uint64_t v127 = v195;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v110, v195, (uint64_t (*)(void))type metadata accessor for Asset);
  uint64_t v128 = v191;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v127, v191, (uint64_t (*)(void))type metadata accessor for Asset);
  uint64_t v129 = v193;
  if ((v192 & 1) == 0) {
    goto LABEL_47;
  }
  if (!v193)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v128, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_60;
  }
  uint64_t v130 = (void *)(v128 + *(int *)(v187 + 20));
  if (*v130 == v190 && v130[1] == v193)
  {
LABEL_47:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v128, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_48;
  }
  char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v128, (uint64_t (*)(void))type metadata accessor for Asset);
  if ((v145 & 1) == 0)
  {
LABEL_60:
    uint64_t v146 = v183;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v195, v183, (uint64_t (*)(void))type metadata accessor for Asset);
    swift_bridgeObjectRetain_n();
    v147 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v147, v148))
    {
      uint64_t v149 = v129;
      uint64_t v150 = swift_slowAlloc();
      v220 = (void *)swift_slowAlloc();
      v210[0] = (uint64_t)v220;
      *(_DWORD *)uint64_t v150 = 136446466;
      uint64_t v198 = v41;
      *(void *)&long long v211 = v190;
      *((void *)&v211 + 1) = v149;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v151 = v146;
      uint64_t v152 = String.init<A>(describing:)();
      *(void *)&long long v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v150 + 12) = 2082;
      v154 = (uint64_t *)(v146 + *(int *)(v187 + 20));
      uint64_t v155 = *v154;
      unint64_t v156 = v154[1];
      swift_bridgeObjectRetain();
      *(void *)&long long v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, v210);
      uint64_t v41 = v198;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v151, (uint64_t (*)(void))type metadata accessor for Asset);
      _os_log_impl(&dword_25FA51000, v147, v148, "Asked to load asset version %{public}s but found asset version %{public}s in ModelCatalog", (uint8_t *)v150, 0x16u);
      v157 = v220;
      swift_arrayDestroy();
      a6 = v196;
      MEMORY[0x261206F80](v157, -1, -1);
      MEMORY[0x261206F80](v150, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v146, (uint64_t (*)(void))type metadata accessor for Asset);
    }

    v158 = v202;
    uint64_t v159 = v205;
    (*(void (**)(char *, void, uint64_t))(v205 + 104))(v202, *MEMORY[0x263F562A0], v41);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v195, (uint64_t (*)(void))type metadata accessor for Asset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
    outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v159 + 32))(a6, v158, v41);
  }
LABEL_48:
  v204 = 0;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v213, (uint64_t)v210);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMModel);
  if (swift_dynamicCast())
  {
    outlined init with take of LogitCollection(&v207, (uint64_t)&v211);
    v131 = v185;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v195, (uint64_t)v185, (uint64_t (*)(void))type metadata accessor for Asset);
    __swift_project_boxed_opaque_existential_1(&v211, v212);
    uint64_t v132 = v186;
    dispatch thunk of ManagedResource.cost.getter();
    char v133 = CostProfile.energyEfficientMode.getter();
    (*(void (**)(char *, uint64_t))(v188 + 8))(v132, v189);
    uint64_t v134 = v204;
    v135 = v184;
    _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC14handleLLMModel33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5asset22useEnergyEfficientModeySS_AA0F0VSbt20ModelManagerServices0C5ErrorOYKF(v220, (unint64_t)a2, v131, v133 & 1, v184);
    if (v134)
    {
LABEL_50:
      uint64_t v136 = (uint64_t)v131;
LABEL_51:
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v136, (uint64_t (*)(void))type metadata accessor for Asset);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v195, (uint64_t (*)(void))type metadata accessor for Asset);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
      outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      (*(void (**)(uint64_t, char *, uint64_t))(v205 + 32))(a6, v135, v41);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
    }
    goto LABEL_66;
  }
  uint64_t v209 = 0;
  long long v207 = 0u;
  long long v208 = 0u;
  outlined destroy of DataStreamState?((uint64_t)&v207, &demangling cache variable for type metadata for LLMModel?);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v213, (uint64_t)&v211);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tokenizer);
  if (!swift_dynamicCast())
  {
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v213, (uint64_t)v210);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMAdapter);
    if (swift_dynamicCast())
    {
      outlined init with take of LogitCollection(&v207, (uint64_t)&v211);
      __swift_project_boxed_opaque_existential_1(&v211, v212);
      uint64_t v203 = dispatch thunk of CatalogResource.dependentResourceIDs.getter();
      uint64_t v139 = v181;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v195, v181, (uint64_t (*)(void))type metadata accessor for Asset);
      __swift_project_boxed_opaque_existential_1(&v211, v212);
      v140 = v180;
      dispatch thunk of ManagedResource.cost.getter();
      char v141 = CostProfile.energyEfficientMode.getter();
      v142 = v140;
      uint64_t v143 = v203;
      (*(void (**)(char *, uint64_t))(v188 + 8))(v142, v189);
      v144 = v204;
      v135 = v179;
      _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC16handleLLMAdapter33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier20dependentResourceIDs5asset22useEnergyEfficientModeySS_SaySSGAA0F0VSbt20ModelManagerServices0C5ErrorOYKF((uint64_t)v220, (unint64_t)a2, v143, v139, v141 & 1, v179);
      if (v144)
      {
        swift_bridgeObjectRelease();
        uint64_t v136 = v139;
        goto LABEL_51;
      }
      swift_bridgeObjectRelease();
      uint64_t v163 = v139;
LABEL_67:
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v163, (uint64_t (*)(void))type metadata accessor for Asset);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v195, (uint64_t (*)(void))type metadata accessor for Asset);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
      outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
    }
    uint64_t v209 = 0;
    long long v207 = 0u;
    long long v208 = 0u;
    outlined destroy of DataStreamState?((uint64_t)&v207, &demangling cache variable for type metadata for LLMAdapter?);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v213, (uint64_t)v210);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMDraftModel);
    if (!swift_dynamicCast())
    {
      uint64_t v209 = 0;
      long long v207 = 0u;
      long long v208 = 0u;
      outlined destroy of DataStreamState?((uint64_t)&v207, &demangling cache variable for type metadata for LLMDraftModel?);
      swift_bridgeObjectRetain_n();
      v164 = Logger.logObject.getter();
      os_log_type_t v165 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v164, v165))
      {
        v166 = (uint8_t *)swift_slowAlloc();
        uint64_t v167 = swift_slowAlloc();
        *(void *)&long long v211 = v167;
        uint64_t v198 = v41;
        *(_DWORD *)v166 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v168 = (uint64_t)v220;
        v210[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v220, (unint64_t)a2, (uint64_t *)&v211);
        uint64_t v41 = v198;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v164, v165, "Failed to load unhandled asset %{public}s", v166, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v167, -1, -1);
        v169 = v166;
        uint64_t v170 = v168;
        MEMORY[0x261206F80](v169, -1, -1);

        id v111 = v202;
        uint64_t v172 = v199;
        uint64_t v171 = v200;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        id v111 = v202;
        uint64_t v172 = v199;
        uint64_t v171 = v200;
        uint64_t v170 = (uint64_t)v220;
      }
      *(void *)&long long v211 = 0;
      *((void *)&v211 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)&long long v211 = 0xD000000000000010;
      *((void *)&v211 + 1) = 0x800000025FB6C510;
      v173._countAndFlagsBits = v170;
      v173._object = a2;
      String.append(_:)(v173);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v174 = v201;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v111, v174, v172);
      uint64_t v116 = v205;
      (*(void (**)(char *, void, uint64_t))(v205 + 104))(v111, *MEMORY[0x263F56248], v41);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(char *, uint64_t))(v171 + 8))(v174, v172);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v195, (uint64_t (*)(void))type metadata accessor for Asset);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
      goto LABEL_40;
    }
    outlined init with take of LogitCollection(&v207, (uint64_t)&v211);
    v131 = v177;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v195, (uint64_t)v177, (uint64_t (*)(void))type metadata accessor for Asset);
    __swift_project_boxed_opaque_existential_1(&v211, v212);
    v160 = v178;
    dispatch thunk of ManagedResource.cost.getter();
    char v161 = CostProfile.energyEfficientMode.getter();
    (*(void (**)(char *, uint64_t))(v188 + 8))(v160, v189);
    v162 = v204;
    v135 = v176;
    _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC16handleDraftModel33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5asset22useEnergyEfficientModeySS_AA0F0VSbt0J15ManagerServices0C5ErrorOYKF((uint64_t)v220, (unint64_t)a2, v131, v161 & 1, v176);
    if (v162) {
      goto LABEL_50;
    }
LABEL_66:
    uint64_t v163 = (uint64_t)v131;
    goto LABEL_67;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
  uint64_t v137 = v195;
  v138 = v204;
  uint64_t v78 = v182;
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC15handleTokenizer33_65818D6FA4B5F545C6B162D7CBE031AELL10identifier5assetySS_AA0F0Vt20ModelManagerServices0C5ErrorOYKF((uint64_t)v220, (unint64_t)a2, v195, v182);
  if (v138)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v137, (uint64_t (*)(void))type metadata accessor for Asset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
    outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 32))(a6, v78, v41);
  }
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v137, (uint64_t (*)(void))type metadata accessor for Asset);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v213);
  outlined destroy of DataStreamState?((uint64_t)&v214, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  return outlined destroy of DataStreamState?((uint64_t)&v217, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[34] = v3;
  v4[35] = a3;
  v4[32] = a1;
  v4[33] = a2;
  uint64_t v5 = type metadata accessor for InferenceError();
  v4[36] = v5;
  v4[37] = *(void *)(v5 - 8);
  v4[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceError.Context();
  v4[39] = v6;
  v4[40] = *(void *)(v6 - 8);
  v4[41] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_, v3, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v72 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 336) = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 264);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&long long v69 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Unloading asset %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v8, -1, -1);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = (_OWORD *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 272) + 128;
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  if (!*(void *)(*(void *)v10 + 16))
  {
    *(void *)(v0 + 88) = 0;
    *uint64_t v9 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if (v15)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v11 + 56) + 40 * v14, v0 + 56);
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *uint64_t v9 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 80))
  {
LABEL_13:
    uint64_t v20 = (_OWORD *)(v0 + 16);
    uint64_t v21 = *(void *)(v0 + 272);
    outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 144);
    if (*(void *)(v22 + 16))
    {
      uint64_t v24 = *(void *)(v0 + 256);
      uint64_t v23 = *(void *)(v0 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v23);
      if (v26)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v22 + 56) + 40 * v25, v0 + 16);
      }
      else
      {
        *(void *)(v0 + 48) = 0;
        *uint64_t v20 = 0u;
        *(_OWORD *)(v0 + 32) = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 40))
      {
        uint64_t v28 = *(void *)(v0 + 256);
        uint64_t v27 = *(void *)(v0 + 264);
        outlined destroy of DataStreamState?(v0 + 16, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
        uint64_t v71 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v18 = v28;
        uint64_t v19 = v27;
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)(v0 + 48) = 0;
      *uint64_t v20 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    outlined destroy of DataStreamState?(v0 + 16, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    unint64_t v43 = *(void *)(v0 + 264);
    if (v42)
    {
      uint64_t v44 = *(void *)(v0 + 256);
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(void *)&long long v69 = v46;
      *(_DWORD *)uint64_t v45 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v40, v41, "Asset is not loaded %{public}s", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v46, -1, -1);
      MEMORY[0x261206F80](v45, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v55 = *(void *)(v0 + 320);
    uint64_t v54 = *(void *)(v0 + 328);
    uint64_t v56 = *(void *)(v0 + 304);
    uint64_t v57 = *(void *)(v0 + 312);
    uint64_t v58 = *(void *)(v0 + 288);
    uint64_t v59 = *(void *)(v0 + 296);
    uint64_t v60 = *(void *)(v0 + 280);
    Swift::String v61 = *(Swift::String *)(v0 + 256);
    *(void *)&long long v69 = 0x207465737341;
    *((void *)&v69 + 1) = 0xE600000000000000;
    String.append(_:)(v61);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v54, v57);
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v56, *MEMORY[0x263F562B8], v58);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v60, v56, v58);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v16 = *(void *)(v0 + 264);
  outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v18 = v17;
  uint64_t v19 = v16;
LABEL_20:
  specialized Dictionary.subscript.setter((uint64_t)&v69, v18, v19);
  swift_endAccess();
  unint64_t v29 = *(void *)(v0 + 264);
  unint64_t v30 = *(void *)(v0 + 256);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v31 = swift_bridgeObjectRetain();
  LOBYTE(v30) = specialized Sequence.contains(where:)(v31, v30, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    unint64_t v35 = *(void *)(v0 + 264);
    if (v34)
    {
      uint64_t v36 = *(void *)(v0 + 256);
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(void *)&long long v69 = v38;
      *(_DWORD *)uint64_t v37 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v32, v33, "Suspending unload for the asset %{public}s since its currently in use", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v38, -1, -1);
      MEMORY[0x261206F80](v37, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v64 = *(void *)(v0 + 264);
    uint64_t v63 = *(void *)(v0 + 272);
    uint64_t v65 = *(void *)(v0 + 256);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type OnDeviceInferenceAssetRepository and conformance OnDeviceInferenceAssetRepository, v39, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceAssetRepository);
    id v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v66;
    v66[2] = v63;
    v66[3] = v65;
    v66[4] = v64;
    unint64_t v67 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v67;
    *unint64_t v67 = v0;
    v67[1] = _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ1_;
    return MEMORY[0x270FA2318]();
  }
  OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
  swift_bridgeObjectRetain_n();
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.info.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  unint64_t v50 = *(void *)(v0 + 264);
  if (v49)
  {
    uint64_t v51 = *(void *)(v0 + 256);
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(void *)&long long v69 = v53;
    *(_DWORD *)uint64_t v52 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v50, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v47, v48, "Finished unloading asset %{public}s", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v53, -1, -1);
    MEMORY[0x261206F80](v52, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
LABEL_35:
  return v62();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ1_()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY2_, v1, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY2_()
{
  uint64_t v17 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[32];
    unint64_t v3 = v0[33];
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)unint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v1, v2, "Resumed unload for asset %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v6, -1, -1);
    MEMORY[0x261206F80](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  unint64_t v10 = v0[33];
  if (v9)
  {
    uint64_t v11 = v0[32];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_bridgeObjectRetain();
    v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v7, v8, "Finished unloading asset %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v13, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFyScCyyts5NeverOGXEfU0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v10, a3, a4);
  return swift_endAccess();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[104] = a3;
  v4[103] = v3;
  v4[102] = a2;
  v4[101] = a1;
  v4[105] = type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
  v4[106] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InferenceError.Context();
  v4[107] = v5;
  v4[108] = *(void *)(v5 - 8);
  v4[109] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v4[110] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  v4[111] = v6;
  v4[112] = *(void *)(v6 - 8);
  v4[113] = swift_task_alloc();
  v4[114] = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
  v4[115] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InferenceError();
  v4[116] = v7;
  v4[117] = *(void *)(v7 - 8);
  v4[118] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v4[119] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[120] = v8;
  v4[121] = *(void *)(v8 - 8);
  v4[122] = swift_task_alloc();
  v4[123] = swift_task_alloc();
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  v4[126] = swift_task_alloc();
  v4[127] = swift_task_alloc();
  v4[128] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTY0_, v3, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTY0_()
{
  uint64_t v191 = v0;
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1) {
LABEL_76:
  }
    swift_once();
  uint64_t v1 = v0[128];
  uint64_t v2 = v0[127];
  uint64_t v3 = v0[121];
  uint64_t v4 = v0[120];
  uint64_t v5 = v0 + 101;
  uint64_t v6 = type metadata accessor for Logger();
  v0[129] = __swift_project_value_buffer(v6, (uint64_t)static Log.device);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[130] = v7;
  v0[131] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v166 = v7;
  v7(v2, v1, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[127];
  uint64_t v12 = v0[121];
  uint64_t v13 = v0[120];
  if (v10)
  {
    uint64_t v178 = v0[127];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v187 = swift_slowAlloc();
    uint64_t v189 = v187;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = MEMORY[0x261205560](v15, MEMORY[0x263F8D310]);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    v0[99] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[100] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v178, v13);
    _os_log_impl(&dword_25FA51000, v8, v9, "Fetching assets %{public}s for request %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v187, -1, -1);
    MEMORY[0x261206F80](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v11, v13);
  }

  v0[132] = v21;
  uint64_t v22 = v0[101];
  uint64_t v23 = *(void *)(v22 + 16);
  v0[133] = v23;
  uint64_t v188 = v0;
  if (!v23)
  {
    os_log_type_t v48 = (void *)MEMORY[0x263F8EE78];
    uint64_t v44 = v0;
    goto LABEL_44;
  }
  uint64_t v175 = v21;
  uint64_t v161 = (uint64_t)(v0 + 12);
  uint64_t v179 = (uint64_t)(v0 + 17);
  uint64_t v159 = v0 + 32;
  v160 = v0 + 27;
  uint64_t v170 = (long long *)(v0 + 47);
  uint64_t v172 = (uint64_t)(v0 + 37);
  uint64_t v165 = (uint64_t)(v0 + 42);
  uint64_t v24 = (uint64_t)(v0 + 7);
  uint64_t v182 = (uint64_t)(v0 + 22);
  v157 = v0 + 97;
  v162 = v0 + 98;
  uint64_t v25 = v0[103] + 136;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  char v26 = (unint64_t *)(v22 + 40);
  do
  {
    unint64_t v27 = *v26;
    uint64_t v28 = *(void *)v25;
    if (*(void *)(*(void *)v25 + 16))
    {
      uint64_t v29 = *(v26 - 1);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v27);
      if (v31)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v28 + 56) + 40 * v30, v24);
      }
      else
      {
        *(void *)(v24 + 32) = 0;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v188[10])
      {
        uint64_t v32 = v188[128];
        uint64_t v33 = v188[126];
        uint64_t v34 = v188[120];
        outlined destroy of DataStreamState?(v24, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
        swift_bridgeObjectRelease();
        v166(v33, v32, v34);
        swift_bridgeObjectRetain();
        unint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        BOOL v37 = os_log_type_enabled(v35, v36);
        uint64_t v38 = v188[126];
        uint64_t v39 = v188[120];
        if (v37)
        {
          uint64_t v40 = swift_slowAlloc();
          uint64_t v183 = swift_slowAlloc();
          uint64_t v189 = v183;
          *(_DWORD *)uint64_t v40 = 136446466;
          lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
          uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t *v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v175(v38, v39);
          *(_WORD *)(v40 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t *v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v27, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25FA51000, v35, v36, "Suspending fetch for request %{public}s since asset %{public}s is in use", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v183, -1, -1);
          MEMORY[0x261206F80](v40, -1, -1);
        }
        else
        {
          v175(v38, v39);

          swift_bridgeObjectRelease_n();
        }
        uint64_t v151 = v188[128];
        uint64_t v152 = v188[103];
        uint64_t v153 = v188[101];
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type OnDeviceInferenceAssetRepository and conformance OnDeviceInferenceAssetRepository, v43, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceAssetRepository);
        v154 = (void *)swift_task_alloc();
        v188[134] = v154;
        v154[2] = v153;
        v154[3] = v151;
        v154[4] = v152;
        uint64_t v155 = (void *)swift_task_alloc();
        v188[135] = v155;
        *uint64_t v155 = v188;
        v155[1] = _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTQ1_;
        return MEMORY[0x270FA2318]();
      }
    }
    else
    {
      *(void *)(v24 + 32) = 0;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      swift_bridgeObjectRetain();
    }
    outlined destroy of DataStreamState?(v24, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_bridgeObjectRelease();
    v26 += 2;
    --v23;
  }
  while (v23);
  v176 = v5;
  uint64_t v44 = v188;
  swift_bridgeObjectRelease();
  uint64_t v45 = v188[112];
  uint64_t v156 = v188[111];
  uint64_t v158 = v188[113];
  uint64_t v46 = v188[103] + 128;
  swift_bridgeObjectRetain();
  uint64_t v174 = v46;
  swift_beginAccess();
  uint64_t v0 = 0;
  uint64_t v47 = 0;
  os_log_type_t v48 = (void *)MEMORY[0x263F8EE78];
  v169 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
  while (1)
  {
    uint64_t v49 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    uint64_t v51 = *(void *)((char *)v0 + *v176 + 32);
    unint64_t v50 = *(void **)((char *)v0 + *v176 + 40);
    uint64_t v52 = *(void *)v174;
    if (!*(void *)(*(void *)v174 + 16))
    {
      uint64_t v81 = v182;
      *(void *)(v182 + 32) = 0;
      *(_OWORD *)uint64_t v182 = 0u;
      *(_OWORD *)(v182 + 16) = 0u;
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v51, (uint64_t)v50);
    if (v54)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v52 + 56) + 40 * v53, v182);
    }
    else
    {
      *(void *)(v182 + 32) = 0;
      *(_OWORD *)uint64_t v182 = 0u;
      *(_OWORD *)(v182 + 16) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v44[25]) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v55 = v179;
    outlined init with take of LogitCollection((long long *)v182, v179);
    outlined init with copy of DeterministicLanguageModelProtocol(v179, v172);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    if (swift_dynamicCast())
    {
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v44[115], type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
    }
    else
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v179, v165);
      char v56 = swift_dynamicCast();
      uint64_t v57 = *v169;
      if (v56)
      {
        uint64_t v58 = (uint64_t *)v44[113];
        uint64_t v59 = v44[111];
        uint64_t v60 = v44[110];
        uint64_t v61 = v44[102];
        v57(v60, 0, 1, v59);
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v60, (uint64_t)v58, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(v58, v61);
        v44[35] = v59;
        v44[36] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v159);
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v58, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        __swift_destroy_boxed_opaque_existential_1(v179);
        outlined init with take of LogitCollection((long long *)v159, v179);
        uint64_t v164 = *v58;
        uint64_t v167 = v48;
        uint64_t v63 = *(void *)(v158 + 8);
        v44[30] = v59;
        v44[31] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        uint64_t v64 = __swift_allocate_boxed_opaque_existential_1(v160);
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v58, (uint64_t)v64, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        swift_beginAccess();
        outlined init with take of LogitCollection((long long *)v160, v161);
        uint64_t v65 = v63;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v189 = *(void *)v174;
        *(void *)uint64_t v174 = 0x8000000000000000;
        uint64_t v66 = v44[15];
        uint64_t v67 = __swift_mutable_project_boxed_opaque_existential_1(v161, v66);
        uint64_t v68 = *(void *)(v66 - 8);
        uint64_t v69 = swift_task_alloc();
        uint64_t v70 = v67;
        uint64_t v44 = v188;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v69, v70, v66);
        os_log_type_t v48 = v167;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v69, v164, v65, isUniquelyReferenced_nonNull_native, &v189);
        __swift_destroy_boxed_opaque_existential_1(v161);
        swift_task_dealloc();
        *(void *)uint64_t v174 = v189;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v71 = *(void **)((char *)v58 + *(int *)(v156 + 28));
        uint64_t v72 = (char *)v71
            + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
        *(void *)uint64_t v72 = 0;
        v72[8] = 1;
        uint64_t v73 = (char *)v71
            + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
        *(void *)uint64_t v73 = 0;
        v73[8] = 1;
        v71[5] = 0;
        swift_retain();
        uint64_t v74 = static Duration.zero.getter();
        uint64_t v76 = v75;
        swift_beginAccess();
        v71[6] = v74;
        v71[7] = v76;
        swift_release();
        uint64_t v77 = (uint64_t)v58;
        uint64_t v55 = v179;
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v77, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      else
      {
        uint64_t v78 = v44[110];
        v57(v78, 1, 1, v44[111]);
        outlined destroy of DataStreamState?(v78, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      outlined init with copy of DeterministicLanguageModelProtocol(v55, (uint64_t)v170);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        os_log_type_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
      }
      unint64_t v80 = v48[2];
      unint64_t v79 = v48[3];
      if (v80 >= v79 >> 1) {
        os_log_type_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v80 + 1, 1, v48);
      }
      v48[2] = v80 + 1;
      outlined init with take of LogitCollection(v170, (uint64_t)&v48[5 * v80 + 4]);
    }
    __swift_destroy_boxed_opaque_existential_1(v55);
    ++v47;
    v0 += 2;
    if (v49 == v44[133])
    {
      swift_bridgeObjectRelease();
LABEL_44:
      uint64_t v113 = v48[2];
      uint64_t v168 = v48;
      if (!v113)
      {
LABEL_61:
        ((void (*)(void, void, void))v44[130])(v44[122], v44[128], v44[120]);
        swift_bridgeObjectRetain_n();
        v135 = Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.info.getter();
        BOOL v137 = os_log_type_enabled(v135, v136);
        v138 = (void (*)(uint64_t, uint64_t))v44[132];
        uint64_t v139 = v44[122];
        uint64_t v140 = v44[120];
        if (v137)
        {
          uint64_t v181 = v44 + 91;
          char v141 = v44 + 92;
          uint64_t v142 = swift_slowAlloc();
          uint64_t v186 = swift_slowAlloc();
          uint64_t v189 = v186;
          *(_DWORD *)uint64_t v142 = 136446466;
          uint64_t v143 = swift_bridgeObjectRetain();
          uint64_t v144 = MEMORY[0x261205560](v143, MEMORY[0x263F8D310]);
          unint64_t v146 = v145;
          swift_bridgeObjectRelease();
          *char v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v146, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v142 + 12) = 2080;
          lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
          uint64_t v147 = dispatch thunk of CustomStringConvertible.description.getter();
          *uint64_t v181 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v148, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v138(v139, v140);
          _os_log_impl(&dword_25FA51000, v135, v136, "Successfully fetched asset %{public}s for request %s", (uint8_t *)v142, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v186, -1, -1);
          uint64_t v149 = v142;
          uint64_t v44 = v188;
          MEMORY[0x261206F80](v149, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          v138(v139, v140);
        }

        ((void (*)(void, void))v44[132])(v44[128], v44[120]);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v150 = (uint64_t (*)(void *))v44[1];
        return v150(v168);
      }
      Swift::String v114 = v44 + 2;
      uint64_t v0 = v44 + 57;
      v180 = (uint64_t *)(v44[103] + 136);
      v185 = (long long *)(v44 + 62);
      uint64_t v115 = (uint64_t)(v48 + 4);
      swift_bridgeObjectRetain();
      v177 = v44 + 57;
      while (2)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v115, (uint64_t)v114);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v114, (uint64_t)v0);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (!swift_dynamicCast())
        {
          uint64_t v116 = v44[5];
          uint64_t v117 = v44[6];
          __swift_project_boxed_opaque_existential_1(v114, v116);
          uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v116, v117);
          uint64_t v120 = v119;
          swift_beginAccess();
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v114, (uint64_t)v185);
          char v121 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v189 = *v180;
          uint64_t v122 = (void *)v189;
          uint64_t *v180 = 0x8000000000000000;
          unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v120);
          uint64_t v125 = v122[2];
          BOOL v126 = (v123 & 1) == 0;
          uint64_t v127 = v125 + v126;
          if (__OFADD__(v125, v126)) {
            goto LABEL_75;
          }
          char v128 = v123;
          if (v122[3] >= v127)
          {
            if (v121)
            {
              if ((v123 & 1) == 0) {
                goto LABEL_58;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              uint64_t v122 = (void *)v189;
              if ((v128 & 1) == 0) {
                goto LABEL_58;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v127, v121);
            uint64_t v122 = (void *)v189;
            unint64_t v129 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v120);
            if ((v128 & 1) != (v130 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v124 = v129;
            if ((v128 & 1) == 0)
            {
LABEL_58:
              uint64_t v132 = v188[65];
              uint64_t v173 = v188[66];
              uint64_t v171 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v185, v132);
              uint64_t v133 = *(void *)(v132 - 8);
              uint64_t v134 = swift_task_alloc();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 16))(v134, v171, v132);
              specialized _NativeDictionary._insert(at:key:value:)(v124, v118, v120, v134, v122, v132, v173);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v185);
              swift_task_dealloc();
              swift_bridgeObjectRetain();
LABEL_59:
              uint64_t *v180 = (uint64_t)v122;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_endAccess();
              uint64_t v44 = v188;
              uint64_t v0 = v177;
LABEL_47:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
              v115 += 40;
              if (!--v113)
              {
                swift_bridgeObjectRelease();
                goto LABEL_61;
              }
              continue;
            }
          }
          uint64_t v131 = v122[7] + 40 * v124;
          __swift_destroy_boxed_opaque_existential_1(v131);
          outlined init with take of LogitCollection(v185, v131);
          goto LABEL_59;
        }
        break;
      }
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v44[106], type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
      goto LABEL_47;
    }
  }
  uint64_t v81 = v182;
LABEL_37:
  unint64_t v82 = (void (*)(uint64_t, uint64_t, uint64_t))v44[130];
  uint64_t v83 = v44[128];
  uint64_t v84 = v188[123];
  uint64_t v85 = v188[120];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DataStreamState?(v81, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  uint64_t v86 = v84;
  uint64_t v87 = v188;
  v82(v86, v83, v85);
  swift_bridgeObjectRetain_n();
  v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.error.getter();
  BOOL v90 = os_log_type_enabled(v88, v89);
  char v91 = (void (*)(uint64_t, uint64_t))v188[132];
  uint64_t v92 = v188[123];
  uint64_t v93 = v188[120];
  if (v90)
  {
    uint64_t v94 = swift_slowAlloc();
    uint64_t v184 = swift_slowAlloc();
    uint64_t v189 = v184;
    *(_DWORD *)uint64_t v94 = 136446466;
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
    v188[94] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v91(v92, v93);
    *(_WORD *)(v94 + 12) = 2082;
    swift_bridgeObjectRetain();
    v188[93] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, (unint64_t)v50, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v88, v89, "Fetch for request %{public}s failed, asset %{public}s is not loaded", (uint8_t *)v94, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v184, -1, -1);
    uint64_t v97 = v94;
    uint64_t v87 = v188;
    MEMORY[0x261206F80](v97, -1, -1);
  }
  else
  {
    v91(v92, v93);

    swift_bridgeObjectRelease_n();
  }
  v98 = v87;
  uint64_t v99 = v87[118];
  uint64_t v100 = v98[117];
  uint64_t v101 = v98[116];
  uint64_t v102 = v98[109];
  uint64_t v103 = v98[108];
  uint64_t v104 = v98[107];
  OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
  uint64_t v189 = 0;
  unint64_t v190 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  uint64_t v189 = 0x207465737341;
  unint64_t v190 = 0xE600000000000000;
  v105._countAndFlagsBits = v51;
  v105._object = v50;
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v106._countAndFlagsBits = 0x20746F6E20736920;
  v106._object = (void *)0xEE00646564616F6CLL;
  String.append(_:)(v106);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v99, v102, v104);
  (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v99, *MEMORY[0x263F562B8], v101);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
  uint64_t v107 = v98[118];
  uint64_t v108 = v98[117];
  uint64_t v109 = v98[116];
  uint64_t v110 = v98[104];
  ((void (*)(void, void))v98[132])(v98[128], v98[120]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v110, v107, v109);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v111 = (uint64_t (*)(void))v98[1];
  return v111();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTQ1_()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 824);
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTY2_, v1, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFTY2_()
{
  uint64_t v163 = v0;
  uint64_t v139 = v0 + 96;
  BOOL v137 = (uint64_t *)(v0 + 256);
  v138 = (uint64_t *)(v0 + 216);
  uint64_t v147 = (long long *)(v0 + 376);
  unint64_t v145 = (long long *)(v0 + 496);
  (*(void (**)(void, void, void))(v0 + 1040))(*(void *)(v0 + 1000), *(void *)(v0 + 1024), *(void *)(v0 + 960));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v155 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
    uint64_t v3 = *(void *)(v0 + 1000);
    uint64_t v4 = *(void *)(v0 + 960);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v161 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 768) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v155(v3, v4);
    _os_log_impl(&dword_25FA51000, v1, v2, "Resumed fetch request %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v6, -1, -1);
    MEMORY[0x261206F80](v5, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 1056))(*(void *)(v0 + 1000), *(void *)(v0 + 960));
  }

  uint64_t v156 = (long long *)(v0 + 176);
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    uint64_t v12 = *(void *)(v0 + 808) + v9;
    uint64_t v13 = *(void *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 40);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    LOBYTE(v13) = v16;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v17 = *(void *)(v0 + 824);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = *(void *)(v17 + 136);
      uint64_t v161 = v19;
      *(void *)(v17 + 136) = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v19 = v161;
      }
      uint64_t v20 = *(void *)(v0 + 824);
      swift_bridgeObjectRelease();
      outlined init with take of LogitCollection((long long *)(*(void *)(v19 + 56) + 40 * v15), v0 + 416);
      specialized _NativeDictionary._delete(at:)(v15, v19);
      *(void *)(v20 + 136) = v19;
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(v0 + 448) = 0;
      *(_OWORD *)(v0 + 416) = 0u;
      *(_OWORD *)(v0 + 432) = 0u;
    }
    ++v10;
    uint64_t v11 = *(void *)(v0 + 1064);
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v0 + 416, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_endAccess();
    v9 += 16;
  }
  while (v10 != v11);
  uint64_t v21 = *(void *)(v0 + 1024);
  uint64_t v22 = *(void *)(v0 + 824);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v23 = *(void *)(v22 + 168);
  swift_bridgeObjectRetain();
  LOBYTE(v21) = specialized Set.contains(_:)(v21, v23);
  swift_bridgeObjectRelease();
  if (v21)
  {
    (*(void (**)(void, void, void))(v0 + 1040))(*(void *)(v0 + 992), *(void *)(v0 + 1024), *(void *)(v0 + 960));
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void *)(v0 + 992);
    uint64_t v28 = *(void *)(v0 + 960);
    if (v26)
    {
      uint64_t v150 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      uint64_t v161 = v157;
      *(_DWORD *)uint64_t v29 = 136446210;
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 760) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v150(v27, v28);
      _os_log_impl(&dword_25FA51000, v24, v25, "Request %{public}s is cancelled because of asset unload", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v157, -1, -1);
      MEMORY[0x261206F80](v29, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v0 + 1056))(*(void *)(v0 + 992), *(void *)(v0 + 960));
    }

    uint64_t v67 = *(void *)(v0 + 1024);
    uint64_t v68 = *(void *)(v0 + 952);
    uint64_t v69 = *(void *)(v0 + 944);
    uint64_t v70 = *(void *)(v0 + 936);
    uint64_t v71 = *(void *)(v0 + 928);
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(v67, v68);
    outlined destroy of DataStreamState?(v68, &demangling cache variable for type metadata for UUID?);
    swift_endAccess();
    OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
    (*(void (**)(uint64_t, void, uint64_t))(v70 + 104))(v69, *MEMORY[0x263F56290], v71);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    goto LABEL_40;
  }
  uint64_t v32 = *(void *)(v0 + 896);
  uint64_t v135 = *(void *)(v0 + 888);
  uint64_t v136 = *(void *)(v0 + 904);
  uint64_t v33 = *(void *)(v0 + 824) + 128;
  swift_bridgeObjectRetain();
  uint64_t v148 = v33;
  uint64_t result = swift_beginAccess();
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  BOOL v37 = (void *)MEMORY[0x263F8EE78];
  uint64_t v38 = v0 + 136;
  unint64_t v146 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  while (!__OFADD__(v36, 1))
  {
    uint64_t v39 = *(void *)(v0 + 808);
    uint64_t v40 = *(void *)(v39 + v35 + 32);
    uint64_t v41 = *(void **)(v39 + v35 + 40);
    uint64_t v42 = *(void *)v148;
    if (!*(void *)(*(void *)v148 + 16))
    {
      uint64_t v72 = v0 + 176;
      *(void *)(v0 + 208) = 0;
      *uint64_t v156 = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }
    uint64_t v151 = v36 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, (uint64_t)v41);
    if (v44)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v42 + 56) + 40 * v43, (uint64_t)v156);
    }
    else
    {
      *(void *)(v0 + 208) = 0;
      *uint64_t v156 = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v0 + 200))
    {
      uint64_t v72 = v0 + 176;
LABEL_36:
      uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1040);
      uint64_t v74 = *(void *)(v0 + 1024);
      uint64_t v75 = *(void *)(v0 + 984);
      uint64_t v76 = *(void *)(v0 + 960);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of DataStreamState?(v72, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      v73(v75, v74, v76);
      swift_bridgeObjectRetain_n();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      unint64_t v80 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
      uint64_t v81 = *(void *)(v0 + 984);
      uint64_t v82 = *(void *)(v0 + 960);
      if (v79)
      {
        os_log_type_t v152 = v78;
        uint64_t v83 = swift_slowAlloc();
        uint64_t v158 = swift_slowAlloc();
        uint64_t v161 = v158;
        *(_DWORD *)uint64_t v83 = 136446466;
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 752) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v80(v81, v82);
        *(_WORD *)(v83 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, (unint64_t)v41, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v77, v152, "Fetch for request %{public}s failed, asset %{public}s is not loaded", (uint8_t *)v83, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v158, -1, -1);
        MEMORY[0x261206F80](v83, -1, -1);
      }
      else
      {
        v80(*(void *)(v0 + 984), *(void *)(v0 + 960));
        swift_bridgeObjectRelease_n();
      }

      uint64_t v86 = *(void *)(v0 + 944);
      uint64_t v87 = *(void *)(v0 + 936);
      uint64_t v88 = *(void *)(v0 + 928);
      uint64_t v89 = *(void *)(v0 + 872);
      uint64_t v90 = *(void *)(v0 + 864);
      uint64_t v91 = *(void *)(v0 + 856);
      OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
      uint64_t v161 = 0;
      unint64_t v162 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      uint64_t v161 = 0x207465737341;
      unint64_t v162 = 0xE600000000000000;
      v92._countAndFlagsBits = v40;
      v92._object = v41;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._countAndFlagsBits = 0x20746F6E20736920;
      v93._object = (void *)0xEE00646564616F6CLL;
      String.append(_:)(v93);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v86, v89, v91);
      (*(void (**)(uint64_t, void, uint64_t))(v87 + 104))(v86, *MEMORY[0x263F562B8], v88);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
LABEL_40:
      uint64_t v94 = *(void *)(v0 + 944);
      uint64_t v95 = *(void *)(v0 + 936);
      uint64_t v96 = *(void *)(v0 + 928);
      uint64_t v97 = *(void *)(v0 + 832);
      (*(void (**)(void, void))(v0 + 1056))(*(void *)(v0 + 1024), *(void *)(v0 + 960));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v97, v94, v96);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v98 = *(uint64_t (**)(void))(v0 + 8);
      return v98();
    }
    swift_bridgeObjectRelease();
    outlined init with take of LogitCollection(v156, v38);
    outlined init with copy of DeterministicLanguageModelProtocol(v38, v0 + 296);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    if (swift_dynamicCast())
    {
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(*(void *)(v0 + 920), type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
    }
    else
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v38, v0 + 336);
      char v45 = swift_dynamicCast();
      uint64_t v46 = *v146;
      if (v45)
      {
        uint64_t v47 = *(uint64_t **)(v0 + 904);
        uint64_t v48 = *(void *)(v0 + 888);
        uint64_t v49 = *(void *)(v0 + 880);
        uint64_t v50 = *(void *)(v0 + 816);
        v46(v49, 0, 1, v48);
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v49, (uint64_t)v47, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(v47, v50);
        *(void *)(v0 + 280) = v48;
        *(void *)(v0 + 288) = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v137);
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v47, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        __swift_destroy_boxed_opaque_existential_1(v38);
        outlined init with take of LogitCollection((long long *)v137, v38);
        uint64_t v141 = *(void *)(v136 + 8);
        uint64_t v142 = *v47;
        *(void *)(v0 + 240) = v48;
        *(void *)(v0 + 248) = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        uint64_t v52 = __swift_allocate_boxed_opaque_existential_1(v138);
        outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v47, (uint64_t)v52, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        swift_beginAccess();
        outlined init with take of LogitCollection((long long *)v138, v139);
        swift_bridgeObjectRetain();
        char v140 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v161 = *(void *)v148;
        *(void *)uint64_t v148 = 0x8000000000000000;
        uint64_t v53 = *(void *)(v0 + 120);
        uint64_t v54 = __swift_mutable_project_boxed_opaque_existential_1(v139, v53);
        uint64_t v55 = *(void *)(v53 - 8);
        uint64_t v143 = v37;
        uint64_t v56 = swift_task_alloc();
        uint64_t v57 = v54;
        uint64_t v38 = v0 + 136;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v57, v53);
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v56, v142, v141, v140, &v161);
        __swift_destroy_boxed_opaque_existential_1(v139);
        swift_task_dealloc();
        *(void *)uint64_t v148 = v161;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v58 = *(void **)((char *)v47 + *(int *)(v135 + 28));
        uint64_t v59 = (char *)v58
            + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
        *(void *)uint64_t v59 = 0;
        v59[8] = 1;
        uint64_t v60 = (char *)v58
            + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
        *(void *)uint64_t v60 = 0;
        v60[8] = 1;
        v58[5] = 0;
        swift_retain();
        uint64_t v61 = static Duration.zero.getter();
        uint64_t v63 = v62;
        swift_beginAccess();
        v58[6] = v61;
        v58[7] = v63;
        BOOL v37 = v143;
        swift_release();
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v47, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      else
      {
        uint64_t v64 = *(void *)(v0 + 880);
        v46(v64, 1, 1, *(void *)(v0 + 888));
        outlined destroy of DataStreamState?(v64, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      outlined init with copy of DeterministicLanguageModelProtocol(v38, (uint64_t)v147);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      }
      unint64_t v66 = v37[2];
      unint64_t v65 = v37[3];
      if (v66 >= v65 >> 1) {
        BOOL v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v37);
      }
      v37[2] = v66 + 1;
      outlined init with take of LogitCollection(v147, (uint64_t)&v37[5 * v66 + 4]);
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(v38);
    ++v36;
    v35 += 16;
    if (v151 == *(void *)(v0 + 1064))
    {
      swift_bridgeObjectRelease();
      uint64_t v99 = v37[2];
      uint64_t v144 = v37;
      if (!v99)
      {
LABEL_60:
        (*(void (**)(void, void, void))(v0 + 1040))(*(void *)(v0 + 976), *(void *)(v0 + 1024), *(void *)(v0 + 960));
        swift_bridgeObjectRetain_n();
        char v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.info.getter();
        BOOL v123 = os_log_type_enabled(v121, v122);
        unint64_t v124 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
        uint64_t v125 = *(void *)(v0 + 976);
        uint64_t v126 = *(void *)(v0 + 960);
        if (v123)
        {
          v154 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
          uint64_t v127 = swift_slowAlloc();
          uint64_t v160 = swift_slowAlloc();
          uint64_t v161 = v160;
          *(_DWORD *)uint64_t v127 = 136446466;
          uint64_t v128 = swift_bridgeObjectRetain();
          uint64_t v129 = MEMORY[0x261205560](v128, MEMORY[0x263F8D310]);
          unint64_t v131 = v130;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v131, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v127 + 12) = 2080;
          lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
          uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 728) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v154(v125, v126);
          _os_log_impl(&dword_25FA51000, v121, v122, "Successfully fetched asset %{public}s for request %s", (uint8_t *)v127, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v160, -1, -1);
          MEMORY[0x261206F80](v127, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          v124(v125, v126);
        }

        (*(void (**)(void, void))(v0 + 1056))(*(void *)(v0 + 1024), *(void *)(v0 + 960));
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v134 = *(uint64_t (**)(void *))(v0 + 8);
        return v134(v144);
      }
      uint64_t v100 = (uint64_t *)(*(void *)(v0 + 824) + 136);
      uint64_t v101 = (uint64_t)(v37 + 4);
      swift_bridgeObjectRetain();
      uint64_t v102 = (void *)(v0 + 16);
      uint64_t v149 = v100;
      while (2)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v101, (uint64_t)v102);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v102, v0 + 456);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (!swift_dynamicCast())
        {
          uint64_t v103 = *(void *)(v0 + 40);
          uint64_t v104 = *(void *)(v0 + 48);
          __swift_project_boxed_opaque_existential_1(v102, v103);
          uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v103, v104);
          uint64_t v107 = v106;
          swift_beginAccess();
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v102, (uint64_t)v145);
          char v108 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v161 = *v100;
          uint64_t v109 = (void *)v161;
          *uint64_t v100 = 0x8000000000000000;
          unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v107);
          uint64_t v112 = v109[2];
          BOOL v113 = (v110 & 1) == 0;
          uint64_t result = v112 + v113;
          if (__OFADD__(v112, v113)) {
            goto LABEL_70;
          }
          char v114 = v110;
          if (v109[3] >= result)
          {
            if (v108)
            {
              if ((v110 & 1) == 0) {
                goto LABEL_57;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              uint64_t v109 = (void *)v161;
              if ((v114 & 1) == 0) {
                goto LABEL_57;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, v108);
            uint64_t v109 = (void *)v161;
            unint64_t v115 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v107);
            if ((v114 & 1) != (v116 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v111 = v115;
            if ((v114 & 1) == 0)
            {
LABEL_57:
              uint64_t v118 = *(void *)(v0 + 520);
              uint64_t v159 = *(void *)(v0 + 528);
              uint64_t v153 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v145, v118);
              uint64_t v119 = *(void *)(v118 - 8);
              uint64_t v120 = swift_task_alloc();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v120, v153, v118);
              uint64_t v100 = v149;
              specialized _NativeDictionary._insert(at:key:value:)(v111, v105, v107, v120, v109, v118, v159);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
              swift_task_dealloc();
              swift_bridgeObjectRetain();
LABEL_58:
              *uint64_t v100 = (uint64_t)v109;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_endAccess();
              uint64_t v102 = (void *)(v0 + 16);
LABEL_46:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
              v101 += 40;
              if (!--v99)
              {
                swift_bridgeObjectRelease();
                goto LABEL_60;
              }
              continue;
            }
          }
          uint64_t v117 = v109[7] + 40 * v111;
          __swift_destroy_boxed_opaque_existential_1(v117);
          outlined init with take of LogitCollection(v145, v117);
          goto LABEL_58;
        }
        break;
      }
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel(*(void *)(v0 + 848), type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFyScCyyts5NeverOGXEfU0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  uint64_t v9 = v8 - 8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v17 = (uint64_t *)((char *)&v28 - v16);
  unint64_t v18 = (char *)&v28 + *(int *)(v9 + 28) - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a1, v19);
  uint64_t v20 = (char *)v17 + *(int *)(v9 + 32);
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a3, v21);
  *uint64_t v17 = a2;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v17, (uint64_t)v14, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  uint64_t v22 = (unint64_t *)(a4 + 152);
  swift_beginAccess();
  unint64_t v23 = *(void *)(a4 + 152);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a4 + 152) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
    *uint64_t v22 = v23;
  }
  unint64_t v26 = *(void *)(v23 + 16);
  unint64_t v25 = *(void *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *uint64_t v22 = v23;
  }
  *(void *)(v23 + 16) = v26 + 1;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v14, v23+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v26, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  swift_endAccess();
  return outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

Swift::Void __swiftcall OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(Swift::OpaquePointer assetObjects)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v6 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v9 = (char *)v72 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v80 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v11);
  uint64_t v82 = (char *)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *((void *)assetObjects._rawValue + 2);
  if (v13)
  {
    uint64_t v77 = v6;
    uint64_t v90 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v14 = (char *)assetObjects._rawValue + 32;
    uint64_t v15 = (void *)v90;
    do
    {
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v14, (uint64_t)&v91);
      uint64_t v16 = *((void *)&v92 + 1);
      uint64_t v17 = v93;
      __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      uint64_t v20 = v19;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1);
        uint64_t v15 = (void *)v90;
      }
      unint64_t v22 = v15[2];
      unint64_t v21 = v15[3];
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v15 = (void *)v90;
      }
      v15[2] = v22 + 1;
      unint64_t v23 = &v15[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
      v14 += 40;
      --v13;
    }
    while (v13);
    uint64_t v84 = v9;
    uint64_t v85 = v10;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Log.device);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v76 = v25;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = MEMORY[0x263F8EE58];
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(void *)&long long v91 = v31;
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v87 = (uint64_t *)(v30 + 4);
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x261205560](v32, MEMORY[0x263F8D310]);
      uint64_t v34 = v29;
      unint64_t v36 = v35;
      swift_release();
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, (uint64_t *)&v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v29 = v34;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25FA51000, v26, v27, "Releasing assets %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v31, -1, -1);
      MEMORY[0x261206F80](v30, -1, -1);

      uint64_t v37 = v15[2];
      if (!v37) {
        goto LABEL_37;
      }
    }
    else
    {

      swift_release_n();
      uint64_t v37 = v15[2];
      if (!v37)
      {
LABEL_37:
        swift_release();
        OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
        return;
      }
    }
    uint64_t v38 = (uint64_t *)(v72[0] + 136);
    uint64_t v39 = v72[0] + 160;
    swift_beginAccess();
    uint64_t v86 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
    uint64_t v75 = v80 + 16;
    uint64_t v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    BOOL v79 = (void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    uint64_t v74 = (void (**)(char *, uint64_t))(v80 + 8);
    uint64_t v40 = v15 + 5;
    *(void *)&long long v41 = 136446210;
    long long v73 = v41;
    v72[1] = v29 + 8;
    uint64_t v87 = (uint64_t *)v39;
    while (1)
    {
      uint64_t v42 = *(v40 - 1);
      unint64_t v43 = *v40;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if (v46)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v48 = *v38;
        uint64_t v88 = *v38;
        *uint64_t v38 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v48 = v88;
        }
        swift_bridgeObjectRelease();
        outlined init with take of LogitCollection((long long *)(*(void *)(v48 + 56) + 40 * v44), (uint64_t)&v91);
        specialized _NativeDictionary._delete(at:)(v44, v48);
        *uint64_t v38 = v48;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v93 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
      }
      uint64_t v49 = (uint64_t)v84;
      uint64_t v50 = v85;
      outlined destroy of DataStreamState?((uint64_t)&v91, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      swift_endAccess();
      uint64_t v51 = *v87;
      if (*(void *)(*v87 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
        if (v53)
        {
          uint64_t v54 = v80;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v80 + 16))(v49, *(void *)(v51 + 56) + *(void *)(v80 + 72) * v52, v50);
          uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
          uint64_t v56 = v49;
          uint64_t v57 = 0;
        }
        else
        {
          uint64_t v55 = *v86;
          uint64_t v56 = v49;
          uint64_t v57 = 1;
        }
        uint64_t v83 = v55;
        v55(v56, v57, 1, v50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((*v81)(v49, 1, v50) != 1)
        {
          os_log_type_t v78 = *v79;
          v78(v82, v49, v50);
          swift_bridgeObjectRetain_n();
          uint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = swift_slowAlloc();
            uint64_t v61 = swift_slowAlloc();
            *(void *)&long long v91 = v61;
            *(_DWORD *)uint64_t v60 = v73;
            swift_bridgeObjectRetain();
            *(void *)(v60 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&v91);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_25FA51000, v58, v59, "Resuming suspended unload for asset %{public}s", (uint8_t *)v60, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x261206F80](v61, -1, -1);
            uint64_t v62 = v60;
            uint64_t v50 = v85;
            MEMORY[0x261206F80](v62, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v63 = v87;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
          char v66 = v65;
          swift_bridgeObjectRelease();
          if (v66)
          {
            int v67 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v68 = *v63;
            uint64_t v89 = *v63;
            *uint64_t v63 = 0x8000000000000000;
            if (!v67)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v68 = v89;
            }
            swift_bridgeObjectRelease();
            uint64_t v69 = (uint64_t)v77;
            v78(v77, *(void *)(v68 + 56) + *(void *)(v80 + 72) * v64, v50);
            specialized _NativeDictionary._delete(at:)(v64, v68);
            *uint64_t v63 = v68;
            swift_bridgeObjectRelease();
            uint64_t v70 = 0;
          }
          else
          {
            uint64_t v70 = 1;
            uint64_t v69 = (uint64_t)v77;
          }
          v83(v69, v70, 1, v50);
          swift_bridgeObjectRelease();
          outlined destroy of DataStreamState?(v69, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
          swift_endAccess();
          uint64_t v71 = v82;
          CheckedContinuation.resume(returning:)();
          (*v74)(v71, v50);
          goto LABEL_17;
        }
      }
      else
      {
        (*v86)(v49, 1, 1, v50);
      }
      swift_bridgeObjectRelease();
      outlined destroy of DataStreamState?(v49, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
LABEL_17:
      v40 += 2;
      if (!--v37) {
        goto LABEL_37;
      }
    }
  }
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF14ToDynamicState10identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[55] = v3;
  v4[56] = a3;
  v4[53] = a1;
  v4[54] = a2;
  uint64_t v5 = type metadata accessor for InferenceError();
  v4[57] = v5;
  v4[58] = *(void *)(v5 - 8);
  v4[59] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceError.Context();
  v4[60] = v6;
  v4[61] = *(void *)(v6 - 8);
  v4[62] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
  v4[63] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
  v4[64] = v7;
  v4[65] = *(void *)(v7 - 8);
  v4[66] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v4[67] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  v4[68] = v8;
  v4[69] = *(void *)(v8 - 8);
  v4[70] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF14ToDynamicState10identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_, v3, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF14ToDynamicState10identifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v105 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 432);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 424);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&v103[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Moving asset with identifier %{public}s to dynamic state.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v8, -1, -1);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (_OWORD *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 440);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 136);
  if (*(void *)(v11 + 16))
  {
    uint64_t v13 = *(void *)(v0 + 424);
    uint64_t v12 = *(void *)(v0 + 432);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    if (v15)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v11 + 56) + 40 * v14, v0 + 56);
    }
    else
    {
      *(void *)(v0 + 88) = 0;
      *uint64_t v9 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 80))
    {
      outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      unint64_t v19 = *(void *)(v0 + 432);
      if (v18)
      {
        uint64_t v20 = *(void *)(v0 + 424);
        unint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(void *)&v103[0] = v22;
        *(_DWORD *)unint64_t v21 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v16, v17, "Asset with identifier %{public}s was requested to move to dynamic state while in-use.", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v22, -1, -1);
        MEMORY[0x261206F80](v21, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v30 = *(void *)(v0 + 488);
      uint64_t v31 = *(void *)(v0 + 496);
      uint64_t v32 = *(void *)(v0 + 472);
      uint64_t v33 = *(void *)(v0 + 456);
      uint64_t v34 = *(void *)(v0 + 464);
      uint64_t v99 = *(void *)(v0 + 480);
      uint64_t v102 = *(void *)(v0 + 448);
      uint64_t v36 = *(void *)(v0 + 424);
      unint64_t v35 = *(void **)(v0 + 432);
      *(void *)&v103[0] = 0;
      *((void *)&v103[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(77);
      v37._object = (void *)0x800000025FB6C470;
      v37._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v37);
      v38._countAndFlagsBits = v36;
      v38._object = v35;
      String.append(_:)(v38);
      v39._countAndFlagsBits = 0xD000000000000035;
      v39._object = (void *)0x800000025FB6C6E0;
      String.append(_:)(v39);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v40 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v31, v99);
      long long v41 = (unsigned int *)MEMORY[0x263F56298];
LABEL_28:
      (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v32, *v41, v33);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v40);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v102, v32, v33);
LABEL_29:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_30;
    }
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *uint64_t v9 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  unint64_t v23 = (_OWORD *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 440);
  outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + 128);
  if (!*(void *)(v25 + 16))
  {
    *(void *)(v0 + 208) = 0;
    *unint64_t v23 = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
LABEL_24:
    outlined destroy of DataStreamState?(v0 + 176, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    swift_bridgeObjectRetain_n();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    unint64_t v60 = *(void *)(v0 + 432);
    if (v59)
    {
      uint64_t v61 = *(void *)(v0 + 424);
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(void *)&v103[0] = v63;
      *(_DWORD *)uint64_t v62 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v60, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v57, v58, "Asset with identifier %{public}s cannot be moved to dynamic state because it is not loaded.", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v63, -1, -1);
      MEMORY[0x261206F80](v62, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v30 = *(void *)(v0 + 488);
    uint64_t v31 = *(void *)(v0 + 496);
    uint64_t v32 = *(void *)(v0 + 472);
    uint64_t v33 = *(void *)(v0 + 456);
    uint64_t v34 = *(void *)(v0 + 464);
    uint64_t v100 = *(void *)(v0 + 480);
    uint64_t v102 = *(void *)(v0 + 448);
    uint64_t v65 = *(void *)(v0 + 424);
    unint64_t v64 = *(void **)(v0 + 432);
    *(void *)&v103[0] = 0;
    *((void *)&v103[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(83);
    v66._object = (void *)0x800000025FB6C470;
    v66._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v66);
    v67._countAndFlagsBits = v65;
    v67._object = v64;
    String.append(_:)(v67);
    v68._countAndFlagsBits = 0xD00000000000003BLL;
    v68._object = (void *)0x800000025FB6C6A0;
    String.append(_:)(v68);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v40 = v100;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v31, v100);
    long long v41 = (unsigned int *)MEMORY[0x263F562B8];
    goto LABEL_28;
  }
  uint64_t v27 = *(void *)(v0 + 424);
  uint64_t v26 = *(void *)(v0 + 432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
  if (v29)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v25 + 56) + 40 * v28, v0 + 176);
  }
  else
  {
    *(void *)(v0 + 208) = 0;
    *unint64_t v23 = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 200)) {
    goto LABEL_24;
  }
  uint64_t v42 = *(void *)(v0 + 552);
  outlined init with take of LogitCollection((long long *)(v0 + 176), v0 + 96);
  outlined init with copy of DeterministicLanguageModelProtocol(v0 + 96, v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
  int v43 = swift_dynamicCast();
  unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
  if (v43)
  {
    uint64_t v45 = *(void *)(v0 + 560);
    uint64_t v46 = *(void *)(v0 + 544);
    uint64_t v47 = *(void *)(v0 + 536);
    v44(v47, 0, 1, v46);
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v47, v45, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v48 = *(void **)(v45 + *(int *)(v46 + 24));
    objc_msgSend(v48, sel_moveToDynamicState);
    uint64_t v49 = *(int *)(v46 + 28);
    LOBYTE(v47) = *(unsigned char *)(*(void *)(v45 + v49) + 16);
    id v50 = v48;
    id v51 = objc_msgSend(v50, sel_maxContextLength);
    type metadata accessor for KVLRUCache();
    unint64_t v52 = (void *)swift_allocObject();
    v52[3] = 0;
    v52[4] = 0;
    v52[6] = v51;
    v52[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for E5TransformerLanguageModel();
    v52[4] = 0;
    v52[5] = 0;
    v52[3] = 0;
    swift_allocObject();
    uint64_t v53 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v50, (uint64_t)v52, v47);

    swift_release();
    *(void *)(v45 + v49) = v53;
    *(void *)(v0 + 160) = v46;
    *(void *)(v0 + 168) = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 136));
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v45, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    outlined init with take of LogitCollection((long long *)(v0 + 136), v0 + 96);
    uint64_t v55 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner;
    uint64_t v56 = v45;
  }
  else
  {
    uint64_t v71 = *(void *)(v0 + 536);
    uint64_t v72 = *(void *)(v0 + 520);
    v44(v71, 1, 1, *(void *)(v0 + 544));
    outlined destroy of DataStreamState?(v71, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    outlined init with copy of DeterministicLanguageModelProtocol(v0 + 96, v0 + 16);
    char v73 = swift_dynamicCast();
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
    if ((v73 & 1) == 0)
    {
      uint64_t v80 = *(void *)(v0 + 504);
      v74(v80, 1, 1, *(void *)(v0 + 512));
      outlined destroy of DataStreamState?(v80, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
      swift_bridgeObjectRetain_n();
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      BOOL v83 = os_log_type_enabled(v81, v82);
      unint64_t v84 = *(void *)(v0 + 432);
      if (v83)
      {
        uint64_t v85 = *(void *)(v0 + 424);
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        *(void *)&v103[0] = v87;
        *(_DWORD *)uint64_t v86 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v84, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v81, v82, "Asset with identifier %{public}s does not support dynamic state.", v86, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v87, -1, -1);
        MEMORY[0x261206F80](v86, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v88 = *(void *)(v0 + 488);
      uint64_t v89 = *(void *)(v0 + 496);
      uint64_t v90 = *(void *)(v0 + 472);
      uint64_t v91 = *(void *)(v0 + 456);
      uint64_t v92 = *(void *)(v0 + 464);
      uint64_t v98 = *(void *)(v0 + 480);
      uint64_t v101 = *(void *)(v0 + 448);
      uint64_t v94 = *(void *)(v0 + 424);
      uint64_t v93 = *(void **)(v0 + 432);
      *(void *)&v103[0] = 0;
      *((void *)&v103[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v95._object = (void *)0x800000025FB6C470;
      v95._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v95);
      v96._countAndFlagsBits = v94;
      v96._object = v93;
      String.append(_:)(v96);
      v97._countAndFlagsBits = 0xD000000000000020;
      v97._object = (void *)0x800000025FB6C490;
      String.append(_:)(v97);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v90, v89, v98);
      (*(void (**)(uint64_t, void, uint64_t))(v92 + 104))(v90, *MEMORY[0x263F56270], v91);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v89, v98);
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v101, v90, v91);
      goto LABEL_29;
    }
    uint64_t v75 = *(void *)(v0 + 528);
    uint64_t v77 = *(void *)(v0 + 504);
    uint64_t v76 = *(void *)(v0 + 512);
    v74(v77, 0, 1, v76);
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v77, v75, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
    objc_msgSend(*(id *)(v75 + *(int *)(v76 + 24)), sel_moveToDynamicState);
    uint64_t v55 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel;
    uint64_t v56 = v75;
  }
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v56, v55);
  uint64_t v78 = *(void *)(v0 + 432);
  uint64_t v79 = *(void *)(v0 + 424);
  uint64_t v104 = 0;
  memset(v103, 0, sizeof(v103));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v103, v79, v78);
  swift_endAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v0 + 96, v0 + 216);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter(v0 + 216, v79, v78);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
LABEL_30:
  return v69();
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF24FromDynamicToLoadedStateyyAA0decF6Object_p20ModelManagerServices0C5ErrorOYKF(void *a1, uint64_t a2)
{
  uint64_t v91 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for InferenceError();
  uint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v88 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InferenceError.Context();
  uint64_t v86 = *(void *)(v8 - 8);
  uint64_t v87 = v8;
  MEMORY[0x270FA5388](v8, v9);
  uint64_t v85 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
  MEMORY[0x270FA5388](v11 - 8, v12);
  unint64_t v14 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
  Swift::String v95 = *(void **)(v15 - 8);
  MEMORY[0x270FA5388](v15, v16);
  uint64_t v83 = (uint64_t)v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  MEMORY[0x270FA5388](v18 - 8, v19);
  unint64_t v21 = (char *)v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v93 = *(void *)(v22 - 8);
  uint64_t v94 = v22;
  MEMORY[0x270FA5388](v22, v23);
  uint64_t v92 = (uint64_t)v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Log.device);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)&v97);
  uint64_t v84 = v26;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v81 = v14;
    uint64_t v30 = swift_slowAlloc();
    int v78 = v29;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v79 = swift_slowAlloc();
    v96[0] = v79;
    uint64_t v82 = v3;
    *(_DWORD *)uint64_t v31 = 136446210;
    v77[1] = v31 + 4;
    uint64_t v80 = v21;
    uint64_t v32 = a1;
    uint64_t v34 = *((void *)&v98 + 1);
    uint64_t v33 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, *((uint64_t *)&v98 + 1));
    uint64_t v35 = v34;
    a1 = v32;
    unint64_t v21 = v80;
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v35, v33);
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v14 = v81;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    _os_log_impl(&dword_25FA51000, v27, (os_log_type_t)v78, "Moving asset with identifier %{public}s to fully loaded state from dynamic state.", v31, 0xCu);
    uint64_t v38 = v79;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v38, -1, -1);
    MEMORY[0x261206F80](v31, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  }

  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)&v97);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
  uint64_t v39 = v94;
  int v40 = swift_dynamicCast();
  long long v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
  if (v40)
  {
    v41(v21, 0, 1, v39);
    uint64_t v42 = v92;
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v21, v92, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    objc_msgSend(*(id *)(v42 + *(int *)(v39 + 24)), sel_moveToFullyLoadedState);
    int v43 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner;
LABEL_10:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v42, v43);
    uint64_t v47 = a1[3];
    uint64_t v48 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v47);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v47, v48);
    uint64_t v51 = v50;
    uint64_t v99 = 0;
    long long v97 = 0u;
    long long v98 = 0u;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v97, v49, v51);
    swift_endAccess();
    uint64_t v52 = a1[3];
    uint64_t v53 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v52);
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    uint64_t v56 = v55;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)&v97);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v97, v54, v56);
    return swift_endAccess();
  }
  v41(v21, 1, 1, v39);
  outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)&v97);
  char v44 = swift_dynamicCast();
  uint64_t v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v95[7];
  v95 += 7;
  if (v44)
  {
    v45(v14, 0, 1, v15);
    uint64_t v46 = (uint64_t)v14;
    uint64_t v42 = v83;
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v46, v83, type metadata accessor for OnDeviceInferenceAssetObjectBaseModel);
    objc_msgSend(*(id *)(v42 + *(int *)(v15 + 24)), sel_moveToFullyLoadedState);
    int v43 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel;
    goto LABEL_10;
  }
  v45(v14, 1, 1, v15);
  outlined destroy of DataStreamState?((uint64_t)v14, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectBaseModel?);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)&v97);
  os_log_type_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v59))
  {
    unint64_t v60 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)unint64_t v60 = 136446210;
    Swift::String v95 = a1;
    v96[0] = v61;
    uint64_t v62 = *((void *)&v98 + 1);
    uint64_t v63 = v99;
    __swift_project_boxed_opaque_existential_1(&v97, *((uint64_t *)&v98 + 1));
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v96);
    a1 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    _os_log_impl(&dword_25FA51000, v58, v59, "Asset with identifier %{public}s does not support dynamic state.", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v61, -1, -1);
    MEMORY[0x261206F80](v60, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
  }

  *(void *)&long long v97 = 0;
  *((void *)&v97 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v66._object = (void *)0x800000025FB6C470;
  v66._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v66);
  uint64_t v67 = a1[3];
  uint64_t v68 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v67);
  v69._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v68);
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  v70._countAndFlagsBits = 0xD000000000000020;
  v70._object = (void *)0x800000025FB6C490;
  String.append(_:)(v70);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v71 = v85;
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v73 = v86;
  uint64_t v72 = v87;
  uint64_t v74 = v88;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v88, v71, v87);
  uint64_t v76 = v89;
  uint64_t v75 = v90;
  (*(void (**)(char *, void, uint64_t))(v89 + 104))(v74, *MEMORY[0x263F56270], v90);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v72);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v76 + 32))(v91, v74, v75);
}

uint64_t OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v75 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v11 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  unint64_t v14 = (char *)v63 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v74 = (char *)v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v23 = (char *)v63 - v22;
  MEMORY[0x270FA5388](v21, v24);
  uint64_t v26 = (char *)v63 - v25;
  v84[0] = 0;
  unint64_t v27 = a1[1];
  uint64_t v81 = *a1;
  uint64_t v76 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v28 = *(int *)(v76 + 52);
  uint64_t v79 = a1;
  uint64_t v29 = (uint64_t)a1 + v28;
  outlined init with copy of (Int, LogitCollection)(v29, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    swift_bridgeObjectRetain();
    outlined destroy of DataStreamState?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    InferenceProviderRequestConfiguration.sessionUUID.getter();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    outlined assign with take of UUID?((uint64_t)v11, v29);
LABEL_5:
    uint64_t v32 = (uint64_t)v79;
    goto LABEL_12;
  }
  uint64_t v72 = v29;
  uint64_t v73 = v11;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v26, v14, v15);
  swift_bridgeObjectRetain();
  InferenceProviderRequestConfiguration.sessionUUID.getter();
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v16 + 8);
  v31(v23, v15);
  if (v30)
  {
    v31(v26, v15);
    goto LABEL_5;
  }
  uint64_t v70 = v16 + 8;
  uint64_t v71 = v31;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Log.device);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v35 = v74;
  Swift::String v69 = v26;
  v34(v74, v26, v15);
  uint64_t v37 = v77;
  uint64_t v36 = v78;
  uint64_t v38 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v75, a2, v78);
  swift_bridgeObjectRetain_n();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  int v67 = v40;
  BOOL v41 = os_log_type_enabled(v39, v40);
  unint64_t v68 = v27;
  if (v41)
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v66 = a2;
    uint64_t v43 = v42;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v83 = v65;
    *(_DWORD *)uint64_t v43 = 136446722;
    os_log_t v64 = v39;
    swift_bridgeObjectRetain();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v27, &v83);
    v63[1] = &v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v43 + 12) = 2082;
    v63[0] = v43 + 14;
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v71;
    v71(v35, v15);
    *(_WORD *)(v43 + 22) = 2082;
    uint64_t v74 = (char *)(v43 + 24);
    InferenceProviderRequestConfiguration.sessionUUID.getter();
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v48 = v37;
    unint64_t v50 = v49;
    v46(v23, v15);
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v50, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v78);
    os_log_t v51 = v64;
    _os_log_impl(&dword_25FA51000, v64, (os_log_type_t)v67, "E5Runner %{public}s last used for ID %{public}s is different from next ID %{public}s. Clearing model state.", (uint8_t *)v43, 0x20u);
    uint64_t v52 = v65;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v52, -1, -1);
    a2 = v66;
    MEMORY[0x261206F80](v43, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v71(v35, v15);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
  }
  uint64_t v54 = v72;
  uint64_t v53 = (uint64_t)v73;
  InferenceProviderRequestConfiguration.sessionUUID.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
  outlined assign with take of UUID?(v53, v54);
  uint64_t v55 = v76;
  uint64_t v32 = (uint64_t)v79;
  uint64_t v56 = *(void **)((char *)v79 + *(int *)(v76 + 24));
  objc_msgSend(v56, sel_clearAllState);
  uint64_t v57 = *(int *)(v55 + 28);
  LOBYTE(v55) = *(unsigned char *)(*(void *)(v32 + v57) + 16);
  id v58 = v56;
  id v59 = objc_msgSend(v58, sel_maxContextLength);
  type metadata accessor for KVLRUCache();
  unint64_t v60 = (void *)swift_allocObject();
  v60[3] = 0;
  v60[4] = 0;
  v60[6] = v59;
  v60[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v60[3] = 0;
  v60[4] = 0;
  v60[5] = 0;
  type metadata accessor for E5TransformerLanguageModel();
  swift_allocObject();
  uint64_t v61 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v58, (uint64_t)v60, v55);
  v71(v69, v15);
  swift_release();
  *(void *)(v32 + v57) = v61;
  v84[0] = 1;
  unint64_t v27 = v68;
LABEL_12:
  $defer #1 () in OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(v84, v80, v81, v27, a2, v32);
  return swift_bridgeObjectRelease();
}

uint64_t $defer #1 () in OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(unsigned char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12);
  unint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t result = MEMORY[0x270FA5388](v15, v17);
  uint64_t v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1((void *)(a2 + 216), *(void *)(a2 + 240));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    uint64_t result = Overridable.wrappedValue.getter();
    if (v42)
    {
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Log.device);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a5, v15);
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      int v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        uint64_t v42 = v38;
        *(_DWORD *)uint64_t v25 = 136446466;
        int v37 = v24;
        swift_bridgeObjectRetain();
        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v25 + 12) = 2082;
        v36[1] = v25 + 14;
        InferenceProviderRequestConfiguration.requestUUID.getter();
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v28 = v27;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v11);
        uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
        _os_log_impl(&dword_25FA51000, v22, (os_log_type_t)v37, "Resetting the e5Runner %{public}s for request %{public}s because prefix based kv cache optimization is disabled", (uint8_t *)v25, 0x16u);
        uint64_t v29 = v38;
        swift_arrayDestroy();
        MEMORY[0x261206F80](v29, -1, -1);
        MEMORY[0x261206F80](v25, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      }

      uint64_t v30 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
      uint64_t v31 = *(int *)(v30 + 24);
      uint64_t v32 = v40;
      objc_msgSend(*(id *)(v40 + v31), sel_reset);
      id v33 = *(id *)(v32 + v31);
      id v34 = objc_msgSend(v33, sel_maxContextLength);
      type metadata accessor for KVLRUCache();
      uint64_t v35 = (void *)swift_allocObject();
      v35[3] = 0;
      v35[4] = 0;
      v35[6] = v34;
      v35[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v35[3] = 0;
      v35[4] = 0;
      v35[5] = 0;
      type metadata accessor for E5TransformerLanguageModel();
      swift_allocObject();
      *(void *)(v32 + *(int *)(v30 + 28)) = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v33, (uint64_t)v35, 1);
      return swift_release();
    }
  }
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC08e5Runnerf9ObjectForF6Bundle33_65818D6FA4B5F545C6B162D7CBE031AELL10identifierAA0decfj2E5I0VSS_t20ModelManagerServices0C5ErrorOYKF@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v118 = a1;
  uint64_t v119 = a3;
  unint64_t v115 = a4;
  uint64_t v136 = type metadata accessor for InferenceError();
  uint64_t v124 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136, v6);
  BOOL v123 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InferenceError.Context();
  uint64_t v121 = *(void *)(v8 - 8);
  uint64_t v122 = v8;
  MEMORY[0x270FA5388](v8, v9);
  uint64_t v120 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v13 = MEMORY[0x270FA5388](v11 - 8, v12);
  uint64_t v15 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v18 = (char *)&v106 - v17;
  uint64_t v19 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v116 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19, v20);
  os_log_type_t v23 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21, v24);
  uint64_t v26 = (char *)&v106 - v25;
  uint64_t v117 = v4;
  __swift_project_boxed_opaque_existential_1(&v4[22].isa, (uint64_t)v4[25].isa);
  id v27 = v125;
  OnDeviceInferenceProviderDataSource.resourceBundle(for:)((uint64_t)&v132);
  id v125 = v27;
  if (!v27)
  {
    unint64_t v111 = v18;
    uint64_t v112 = v19;
    uint64_t v107 = v26;
    char v108 = v23;
    char v110 = v15;
    char v114 = (void *)a2;
    outlined init with take of LogitCollection(&v132, (uint64_t)v135);
    __swift_project_boxed_opaque_existential_1(v135, v135[3]);
    uint64_t v39 = dispatch thunk of ResourceBundle.resources.getter();
    uint64_t v40 = *(void *)(v39 + 16);
    uint64_t v41 = v117;
    if (v40)
    {
      uint64_t v42 = v39 + 32;
      while (1)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v42, (uint64_t)&v129);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v129, (uint64_t)v128);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMAdapter);
        if (swift_dynamicCast()) {
          break;
        }
        memset(v127, 0, sizeof(v127));
        outlined destroy of DataStreamState?((uint64_t)v127, &demangling cache variable for type metadata for LLMAdapter?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
        v42 += 40;
        if (!--v40) {
          goto LABEL_10;
        }
      }
      outlined destroy of DataStreamState?((uint64_t)v127, &demangling cache variable for type metadata for LLMAdapter?);
      outlined init with take of LogitCollection(&v129, (uint64_t)&v132);
    }
    else
    {
LABEL_10:
      uint64_t v134 = 0;
      long long v132 = 0u;
      long long v133 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v133 + 1))
    {
      __swift_project_boxed_opaque_existential_1(&v132, *((uint64_t *)&v133 + 1));
      uint64_t v113 = dispatch thunk of CatalogResource.id.getter();
      unint64_t v52 = v51;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v135, (uint64_t)&v132);
      if (v52) {
        goto LABEL_26;
      }
    }
    else
    {
      outlined destroy of DataStreamState?((uint64_t)&v132, &demangling cache variable for type metadata for CatalogResource?);
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v135, (uint64_t)&v132);
    }
    __swift_project_boxed_opaque_existential_1(&v132, *((uint64_t *)&v133 + 1));
    uint64_t v53 = dispatch thunk of ResourceBundle.resources.getter();
    uint64_t v54 = *(void *)(v53 + 16);
    if (v54)
    {
      uint64_t v55 = v53 + 32;
      while (1)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v55, (uint64_t)v128);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v128, (uint64_t)v127);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMModel);
        if (swift_dynamicCast()) {
          break;
        }
        memset(v126, 0, 40);
        outlined destroy of DataStreamState?((uint64_t)v126, &demangling cache variable for type metadata for LLMModel?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
        v55 += 40;
        if (!--v54) {
          goto LABEL_22;
        }
      }
      outlined destroy of DataStreamState?((uint64_t)v126, &demangling cache variable for type metadata for LLMModel?);
      outlined init with take of LogitCollection(v128, (uint64_t)&v129);
    }
    else
    {
LABEL_22:
      uint64_t v131 = 0;
      long long v129 = 0u;
      long long v130 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v136;
    uint64_t v57 = v118;
    if (!*((void *)&v130 + 1))
    {
      outlined destroy of DataStreamState?((uint64_t)&v129, &demangling cache variable for type metadata for CatalogResource?);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      *(void *)&long long v132 = 0;
      *((void *)&v132 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      *(void *)&long long v132 = 0xD00000000000002ELL;
      *((void *)&v132 + 1) = 0x800000025FB6C400;
      v83._countAndFlagsBits = v57;
      v83._object = v114;
      String.append(_:)(v83);
      swift_bridgeObjectRetain();
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v84 = v120;
      InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
      uint64_t v86 = v121;
      uint64_t v85 = v122;
      uint64_t v87 = v123;
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v123, v84, v122);
      uint64_t v88 = v124;
      (*(void (**)(char *, void, uint64_t))(v124 + 104))(v87, *MEMORY[0x263F56298], v56);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
      swift_willThrowTypedImpl();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v84, v85);
      (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v119, v87, v56);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
    }
    __swift_project_boxed_opaque_existential_1(&v129, *((uint64_t *)&v130 + 1));
    uint64_t v113 = dispatch thunk of CatalogResource.id.getter();
    unint64_t v52 = v58;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
    swift_bridgeObjectRelease();
LABEL_26:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    uint64_t v60 = __swift_project_value_buffer(v59, (uint64_t)static Log.device);
    swift_bridgeObjectRetain_n();
    uint64_t v109 = v60;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(void *)&long long v129 = v64;
      *(_DWORD *)uint64_t v63 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&v128[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v52, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v61, v62, "Using identifier %{public}s for localization metadata fetch", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v64, -1, -1);
      MEMORY[0x261206F80](v63, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v65 = v112;
    uint64_t v66 = v116;
    swift_beginAccess();
    Class isa = v41[16].isa;
    unint64_t v68 = v114;
    if (*((void *)isa + 2))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v52);
      if (v70)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*((void *)isa + 7) + 40 * v69, (uint64_t)&v129);
      }
      else
      {
        uint64_t v131 = 0;
        long long v129 = 0u;
        long long v130 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v130 + 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        uint64_t v71 = (uint64_t)v111;
        int v72 = swift_dynamicCast();
        uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
        v73(v71, v72 ^ 1u, 1, v65);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v71, 1, v65) != 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v74 = (uint64_t)v107;
          outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v71, (uint64_t)v107, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
          swift_bridgeObjectRetain_n();
          uint64_t v75 = Logger.logObject.getter();
          os_log_type_t v76 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v75, v76))
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_61;
          }
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          *(void *)&long long v129 = v78;
          *(_DWORD *)uint64_t v77 = 136446210;
          swift_bridgeObjectRetain();
          v127[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, (unint64_t)v68, (uint64_t *)&v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v79 = "Found loaded e5Runner asset object for resource bundle %{public}s";
          goto LABEL_52;
        }
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v131 = 0;
      long long v129 = 0u;
      long long v130 = 0u;
    }
    outlined destroy of DataStreamState?((uint64_t)&v129, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
    uint64_t v71 = (uint64_t)v111;
    v73((uint64_t)v111, 1, 1, v65);
LABEL_41:
    outlined destroy of DataStreamState?(v71, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    swift_beginAccess();
    Class v80 = v41[17].isa;
    if (*((void *)v80 + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v52);
      if (v82)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*((void *)v80 + 7) + 40 * v81, (uint64_t)&v129);
      }
      else
      {
        uint64_t v131 = 0;
        long long v129 = 0u;
        long long v130 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v131 = 0;
      long long v129 = 0u;
      long long v130 = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v89 = (uint64_t)v110;
    if (*((void *)&v130 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      int v90 = swift_dynamicCast();
      v73(v89, v90 ^ 1u, 1, v65);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v89, 1, v65) != 1)
      {
        uint64_t v91 = (uint64_t)v108;
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v89, (uint64_t)v108, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        swift_bridgeObjectRetain_n();
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v75, v76))
        {

          swift_bridgeObjectRelease_n();
          uint64_t v74 = v91;
          goto LABEL_61;
        }
        uint64_t v74 = v91;
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(void *)&long long v129 = v78;
        *(_DWORD *)uint64_t v77 = 136446210;
        swift_bridgeObjectRetain();
        v126[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, (unint64_t)v68, (uint64_t *)&v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v79 = "Found inuse e5Runner asset object for resource bundle %{public}s";
LABEL_52:
        _os_log_impl(&dword_25FA51000, v75, v76, v79, v77, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v78, -1, -1);
        MEMORY[0x261206F80](v77, -1, -1);

LABEL_61:
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v74, (uint64_t)v115, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
      }
    }
    else
    {
      outlined destroy of DataStreamState?((uint64_t)&v129, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      v73(v89, 1, 1, v65);
    }
    outlined destroy of DataStreamState?(v89, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    swift_bridgeObjectRetain_n();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(void *)&long long v132 = v95;
      *(_DWORD *)uint64_t v94 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v96 = v118;
      *(void *)&long long v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, (unint64_t)v114, (uint64_t *)&v132);
      unint64_t v68 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v92, v93, "Failed to look up e5Runner asset object for asset bundle %{public}s", v94, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v95, -1, -1);
      MEMORY[0x261206F80](v94, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v96 = v118;
    }
    uint64_t v97 = v119;
    *(void *)&long long v132 = 0;
    *((void *)&v132 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v98._countAndFlagsBits = 0xD000000000000039;
    v98._object = (void *)0x800000025FB6C430;
    String.append(_:)(v98);
    v99._countAndFlagsBits = v96;
    v99._object = v68;
    String.append(_:)(v99);
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v100 = v120;
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    uint64_t v102 = v121;
    uint64_t v101 = v122;
    uint64_t v103 = v123;
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v123, v100, v122);
    uint64_t v104 = v124;
    uint64_t v105 = v136;
    (*(void (**)(char *, void, uint64_t))(v124 + 104))(v103, *MEMORY[0x263F562B8], v136);
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v101);
    (*(void (**)(uint64_t, char *, uint64_t))(v104 + 32))(v97, v103, v105);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v135);
  }
  uint64_t v28 = v136;
  uint64_t v29 = (void *)_convertErrorToNSError(_:)();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  id v31 = v29;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  uint64_t v117 = v32;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    unint64_t v115 = (void *)swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    *(void *)&long long v132 = v116;
    *(_DWORD *)uint64_t v34 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)&long long v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, a2, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2112;
    *(void *)&long long v129 = v31;
    id v35 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v36 = v115;
    *unint64_t v115 = v31;

    int v37 = v117;
    _os_log_impl(&dword_25FA51000, v117, v33, "Failed to look up resource bundle %{public}s : %@", (uint8_t *)v34, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v36, -1, -1);
    uint64_t v38 = v116;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v38, -1, -1);
    MEMORY[0x261206F80](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v43 = objc_msgSend(v31, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v44 = objc_msgSend(v31, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v31, sel_code);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v45 = v120;
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  uint64_t v47 = v121;
  uint64_t v46 = v122;
  uint64_t v48 = v123;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v123, v45, v122);
  uint64_t v49 = v124;
  (*(void (**)(char *, void, uint64_t))(v124 + 104))(v48, *MEMORY[0x263F56298], v28);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

  (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v119, v48, v28);
}

uint64_t OnDeviceInferenceAssetRepository.promptTemplateConfiguration(asset:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v2 = type metadata accessor for ModelConfiguration();
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  MEMORY[0x270FA5388](v2, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6, v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v11);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  static String.Encoding.utf8.getter();
  String.init(contentsOf:encoding:)();
  if (!v1)
  {
    os_log_type_t v23 = v5;
    static String.Encoding.utf8.getter();
    String.data(using:allowLossyConversion:)();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v6);
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = v23;
      ModelConfiguration.init(modelConfigurationData:)();
      uint64_t v21 = v26;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v21, v20, v25);
      uint64_t result = type metadata accessor for PromptTemplateConfiguration(0);
      *(unsigned char *)(v21 + *(int *)(result + 20)) = 0;
      return result;
    }
    lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
    swift_allocError();
    *uint64_t v19 = 0;
    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t OnDeviceInferenceAssetRepository.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t OnDeviceInferenceAssetRepository.__deallocating_deinit()
{
  OnDeviceInferenceAssetRepository.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for OnDeviceInferenceAssetRepository()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceSuspendedFetch(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    swift_bridgeObjectRetain();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for OnDeviceInferenceSuspendedFetch(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

void *initializeWithCopy for OnDeviceInferenceSuspendedFetch(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

void *assignWithCopy for OnDeviceInferenceSuspendedFetch(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

void *initializeWithTake for OnDeviceInferenceSuspendedFetch(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void *assignWithTake for OnDeviceInferenceSuspendedFetch(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceSuspendedFetch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FADE340);
}

uint64_t sub_25FADE340(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UUID();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceSuspendedFetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FADE484);
}

void *sub_25FADE484(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UUID();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for OnDeviceInferenceSuspendedFetch(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceSuspendedFetch);
}

void type metadata completion function for OnDeviceInferenceSuspendedFetch()
{
  type metadata accessor for CheckedContinuation<(), Never>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CheckedContinuation<(), Never>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<(), Never>)
  {
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Never>);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for PromptTemplateConfiguration(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ModelConfiguration();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for PromptTemplateConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelConfiguration();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ModelConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ModelConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ModelConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ModelConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FADEA4C);
}

uint64_t sub_25FADEA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ModelConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for PromptTemplateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FADEB30);
}

uint64_t sub_25FADEB30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ModelConfiguration();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for PromptTemplateConfiguration(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for PromptTemplateConfiguration);
}

uint64_t type metadata completion function for PromptTemplateConfiguration()
{
  uint64_t result = type metadata accessor for ModelConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError()
{
  unint64_t result = lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError;
  if (!lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError;
  if (!lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSourceError and conformance DataSourceError);
  }
  return result;
}

uint64_t type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceAssetObjectE5Runner);
}

void *specialized _NativeSet.copy()()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  unint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  int64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_27:
    *unint64_t v1 = v9;
    return result;
  }
  os_log_type_t v23 = v1;
  unint64_t result = (void *)(v8 + 56);
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v24 = v7 + 56;
  unint64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  uint64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      int64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v25) {
      goto LABEL_25;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v12;
    if (!v20)
    {
      unint64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_25;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v12);
      if (!v20)
      {
        unint64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)(v24 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_9:
    int64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
  }
  uint64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_25:
    unint64_t result = (void *)swift_release();
    unint64_t v1 = v23;
    goto LABEL_27;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    unint64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_25;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<TGIE5AdapterConfigurationObjC>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>);
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of LogitCollection((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  char v9 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v9;
    uint64_t v27 = *v9;
    *char v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v15 = v27;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v12, v17);
    uint64_t v18 = *(void *)(v15 + 56);
    uint64_t v19 = a2(0);
    uint64_t v26 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(a5, v18 + *(void *)(v26 + 72) * v12, v19);
    specialized _NativeDictionary._delete(at:)(v12, v15, a3);
    *char v9 = v15;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a5;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = a2(0);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a5;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for DataStreamState(0);
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for DataStreamState);
    specialized _NativeDictionary._delete(at:)(v6, v9, type metadata accessor for DataStreamState);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for DataStreamState(0);
    int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            uint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *uint64_t v16 = *v12;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            unint64_t v18 = v17 + 40 * v3;
            uint64_t v19 = (long long *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              long long v9 = *v19;
              long long v10 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)unint64_t v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          unint64_t v13 = *(void *)(a2 + 48);
          int64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *int64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)uint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        int64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                                    - 8)
                        + 72);
        uint64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        uint64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v9 + 16));
        long long v10 = *(void *)(v9 + 16);
        if (v10)
        {
          uint64_t v11 = (Swift::UInt *)(v9 + 32);
          do
          {
            uint64_t v12 = *v11++;
            Hasher._combine(_:)(v12);
            --v10;
          }
          while (v10);
        }
        double result = Hasher._finalize()();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_14:
          int64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = MEMORY[0x270FA5388](v5, v7);
  long long v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2 + 64;
  uint64_t v12 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(void *)(a2 + 64 + 8 * (v13 >> 6))) != 0)
  {
    uint64_t v14 = ~v12;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      unint64_t v41 = (result + 1) & v14;
      uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v15 = v6 + 16;
      uint64_t v17 = *(void *)(v15 + 56);
      uint64_t v42 = v15;
      uint64_t v39 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
      uint64_t v40 = v16;
      uint64_t v37 = v14;
      do
      {
        uint64_t v18 = v11;
        uint64_t v19 = v17;
        int64_t v20 = v17 * v13;
        v40(v10, *(void *)(a2 + 48) + v17 * v13, v5);
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v39)(v10, v5);
        unint64_t v22 = v21 & v14;
        if (a1 >= (uint64_t)v41)
        {
          if (v22 >= v41 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            if (v19 * a1 < v20
              || *(void *)(a2 + 48) + v19 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v20 + v19))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            uint64_t v26 = *(void *)(*(void *)(v38(0) - 8) + 72);
            int64_t v27 = v26 * a1;
            unint64_t result = v25 + v26 * a1;
            int64_t v28 = v26 * v13;
            unint64_t v29 = v25 + v26 * v13 + v26;
            BOOL v30 = v27 < v28 || result >= v29;
            uint64_t v11 = v18;
            if (v30)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
              uint64_t v14 = v37;
            }
            else
            {
              a1 = v13;
              uint64_t v14 = v37;
              if (v27 != v28)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v41 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        uint64_t v11 = v18;
LABEL_5:
        unint64_t v13 = (v13 + 1) & v14;
        uint64_t v17 = v19;
      }
      while (((*(void *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    id v31 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1 << a1) - 1;
  }
  else
  {
    id v31 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1 << a1) - 1;
  }
  *id v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v48 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v38 = a1;
  uint64_t v39 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v40 = v7;
  uint64_t v41 = 0;
  uint64_t v42 = v10 & v8;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v45);
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v45, (uint64_t)&v33, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
  outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v45, (uint64_t)v46, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
  if (v47)
  {
    while (1)
    {
      uint64_t v14 = v33;
      uint64_t v13 = v34;
      uint64_t v15 = v35;
      uint64_t v16 = v36;
      char v17 = v37;
      uint64_t v18 = (void *)*v48;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
      uint64_t v21 = v18[2];
      BOOL v22 = (v19 & 1) == 0;
      uint64_t v23 = v21 + v22;
      if (__OFADD__(v21, v22)) {
        break;
      }
      char v24 = v19;
      if (v18[3] >= v23)
      {
        if ((a4 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a4 & 1);
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
        if ((v24 & 1) != (v26 & 1)) {
          goto LABEL_19;
        }
        unint64_t v20 = v25;
      }
      int64_t v27 = (void *)*v48;
      if (v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = v27[7] + 24 * v20;
        outlined consume of MetadataSpecialToken(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
        *(void *)uint64_t v12 = v15;
        *(void *)(v12 + 8) = v16;
        *(unsigned char *)(v12 + 16) = v17;
      }
      else
      {
        v27[(v20 >> 6) + 8] |= 1 << v20;
        int64_t v28 = (uint64_t *)(v27[6] + 16 * v20);
        uint64_t *v28 = v14;
        v28[1] = v13;
        uint64_t v29 = v27[7] + 24 * v20;
        *(void *)uint64_t v29 = v15;
        *(void *)(v29 + 8) = v16;
        *(unsigned char *)(v29 + 16) = v17;
        uint64_t v30 = v27[2];
        BOOL v31 = __OFADD__(v30, 1);
        uint64_t v32 = v30 + 1;
        if (v31) {
          goto LABEL_18;
        }
        void v27[2] = v32;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)v45);
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v45, (uint64_t)&v33, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v45, (uint64_t)v46, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
      a4 = 1;
      if (!v47) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  uint64_t *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  uint64_t v32 = a1;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v10;
  uint64_t v31 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v27 = v2;
    uint64_t v28 = v6;
    uint64_t v29 = a2;
    uint64_t v30 = ~v12;
    char v17 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v16 = v6 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    while (1)
    {
      uint64_t v19 = v14;
      v15(v9, *(void *)(v14 + 48) + v18 * v13, v5);
      lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v9, v5);
      if (v20) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v14 = v19;
      if (((*(void *)(v31 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = 1;
        uint64_t v6 = v28;
        a2 = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    BOOL v22 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v22;
    uint64_t v33 = *v22;
    *BOOL v22 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v24 = v33;
    }
    uint64_t v6 = v28;
    a2 = v29;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 32))(v29, *(void *)(v24 + 48) + v18 * v13, v5);
    specialized _NativeSet._delete(at:)(v13);
    *BOOL v22 = v33;
    swift_bridgeObjectRelease();
    uint64_t v21 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v9 = *v1 + 56;
  uint64_t v10 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v32 = v1;
    uint64_t v12 = ~v10;
    uint64_t v36 = result;
    swift_retain();
    uint64_t v13 = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v34 = (v13 + 1) & v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v14 = v4 + 16;
      uint64_t v33 = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v35 = v14;
      BOOL v17 = (void (**)(char *, uint64_t))(v14 - 8);
      uint64_t v18 = v36;
      do
      {
        uint64_t v19 = v9;
        uint64_t v20 = v16;
        int64_t v21 = v16 * v11;
        v33(v7, *(void *)(v18 + 48) + v16 * v11, v3);
        lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v17)(v7, v3);
        unint64_t v23 = v22 & v12;
        if (a1 >= (uint64_t)v34)
        {
          if (v23 < v34 || a1 < (uint64_t)v23)
          {
LABEL_4:
            uint64_t v9 = v19;
            uint64_t v16 = v20;
            uint64_t v18 = v36;
            goto LABEL_5;
          }
        }
        else if (v23 < v34 && a1 < (uint64_t)v23)
        {
          goto LABEL_4;
        }
        uint64_t v18 = v36;
        int64_t v26 = v20 * a1;
        uint64_t v9 = v19;
        if (v20 * a1 < v21
          || (uint64_t v16 = v20, *(void *)(v36 + 48) + v20 * a1 >= (unint64_t)(*(void *)(v36 + 48) + v21 + v20)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v11;
        if (v26 != v21)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v18 = v36;
          uint64_t v16 = v20;
          a1 = v11;
        }
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    unint64_t v1 = v32;
  }
  else
  {
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v27 = *v1;
  uint64_t v28 = *(void *)(*v1 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
  return result;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type InferenceError and conformance InferenceError(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v14 = (void *)(a5[6] + 16 * a1);
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t result = outlined init with take of LogitCollection(&v19, a5[7] + 40 * a1);
  uint64_t v16 = a5[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a5[2] = v18;
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = v5;
  swift_bridgeObjectRetain();

  return outlined copy of MetadataSpecialToken(v3, v4, v5);
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  void (*v16)(void *__return_ptr, void *);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  char v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  void v28[2];
  long long v29;
  char v30;
  void v31[4];
  char v32;

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = *(void *)(v3 + 56) + 24 * v8;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    char v15 = *(unsigned char *)(v12 + 16);
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v16 = (void (*)(void *__return_ptr, void *))v1[5];
    v31[0] = v10;
    v31[1] = v11;
    v31[2] = v13;
    v31[3] = v14;
    uint64_t v32 = v15;
    swift_bridgeObjectRetain();
    outlined copy of MetadataSpecialToken(v13, v14, v15);
    v16(v28, v31);
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of MetadataSpecialToken(v13, v14, v15);
    uint64_t v18 = v28[0];
    long long v19 = v28[1];
    uint64_t v20 = v29;
    uint64_t v21 = v30;
LABEL_23:
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 16) = v20;
    *(unsigned char *)(a1 + 32) = v21;
    return result;
  }
  uint64_t v22 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    unint64_t v23 = (unint64_t)(v1[2] + 64) >> 6;
    if (v22 < v23)
    {
      uint64_t v24 = v1[1];
      unint64_t v25 = *(void *)(v24 + 8 * v22);
      if (v25)
      {
LABEL_7:
        uint64_t v7 = (v25 - 1) & v25;
        unint64_t v8 = __clz(__rbit64(v25)) + (v22 << 6);
        int64_t v6 = v22;
        goto LABEL_3;
      }
      int64_t v26 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v23)
      {
        unint64_t v25 = *(void *)(v24 + 8 * v26);
        if (v25)
        {
LABEL_10:
          uint64_t v22 = v26;
          goto LABEL_7;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v23)
        {
          unint64_t v25 = *(void *)(v24 + 8 * (v5 + 3));
          if (v25)
          {
            uint64_t v22 = v5 + 3;
            goto LABEL_7;
          }
          int64_t v26 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v23)
          {
            unint64_t v25 = *(void *)(v24 + 8 * v26);
            if (v25) {
              goto LABEL_10;
            }
            uint64_t v22 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v23)
            {
              unint64_t v25 = *(void *)(v24 + 8 * v22);
              if (v25) {
                goto LABEL_7;
              }
              int64_t v6 = v23 - 1;
              uint64_t v27 = v5 + 6;
              while (v23 != v27)
              {
                unint64_t v25 = *(void *)(v24 + 8 * v27++);
                if (v25)
                {
                  uint64_t v22 = v27 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v18 = 0;
    long long v19 = 0;
    uint64_t v21 = 0;
    v1[3] = v6;
    v1[4] = 0;
    uint64_t v20 = 0uLL;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v30 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v31 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v11 = (void *)*a5;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a4 & 1) != 0)
  {
LABEL_7:
    long long v19 = (void *)*a5;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined init with take of LogitCollection(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  long long v19 = (void *)*a5;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v29, v30);
  MEMORY[0x270FA5388](v24, v24);
  int64_t v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  specialized _NativeDictionary._insert(at:key:value:)(v13, a2, a3, (uint64_t)v26, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  BOOL v15 = (void *)*a5;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    char v23 = (void *)*a5;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7] + 40 * v17;
      __swift_destroy_boxed_opaque_existential_1(v24);
      return outlined init with take of LogitCollection(&v33, v24);
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  char v23 = (void *)*a5;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v34);
  MEMORY[0x270FA5388](v28, v28);
  uint64_t v30 = (char *)&v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v30);
  specialized _NativeDictionary._insert(at:key:value:)(v17, a2, a3, (uint64_t)v30, v23, a6, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  return swift_bridgeObjectRetain();
}

uint64_t specialized static OnDeviceInferenceAssetObjectBaseModel.== infix(_:_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Asset();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  unint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Asset?, Asset?));
  MEMORY[0x270FA5388](v9, v10);
  char v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v15 = MEMORY[0x270FA5388](v13 - 8, v14);
  unint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  char v21 = (char *)&v43 - v20;
  MEMORY[0x270FA5388](v19, v22);
  uint64_t v24 = (char *)&v43 - v23;
  uint64_t v25 = *a1;
  uint64_t v26 = a1[1];
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  uint64_t v46 = a2;
  if (v25 == v27 && v26 == v28 || (char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(), v30 = 0, (v29 & 1) != 0))
  {
    uint64_t v44 = v8;
    uint64_t v31 = type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(0);
    outlined init with copy of (Int, LogitCollection)((uint64_t)a1 + *(int *)(v31 + 20), (uint64_t)v24, &demangling cache variable for type metadata for Asset?);
    uint64_t v45 = v31;
    outlined init with copy of (Int, LogitCollection)((uint64_t)v46 + *(int *)(v31 + 20), (uint64_t)v21, &demangling cache variable for type metadata for Asset?);
    uint64_t v32 = (uint64_t)&v12[*(int *)(v9 + 48)];
    outlined init with copy of (Int, LogitCollection)((uint64_t)v24, (uint64_t)v12, &demangling cache variable for type metadata for Asset?);
    outlined init with copy of (Int, LogitCollection)((uint64_t)v21, v32, &demangling cache variable for type metadata for Asset?);
    long long v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v33((uint64_t)v12, 1, v4) == 1)
    {
      outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
      outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
      if (v33(v32, 1, v4) == 1) {
        goto LABEL_17;
      }
    }
    else
    {
      outlined init with copy of (Int, LogitCollection)((uint64_t)v12, (uint64_t)v17, &demangling cache variable for type metadata for Asset?);
      if (v33(v32, 1, v4) != 1)
      {
        uint64_t v36 = (uint64_t)v44;
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v32, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Asset);
        if (MEMORY[0x2612042A0](v17, v36))
        {
          uint64_t v37 = *(int *)(v4 + 20);
          uint64_t v38 = *(void *)&v17[v37];
          uint64_t v39 = *(void *)&v17[v37 + 8];
          uint64_t v40 = (void *)(v36 + v37);
          BOOL v41 = v38 == *v40 && v39 == v40[1];
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v36, (uint64_t (*)(void))type metadata accessor for Asset);
            outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
            outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
            outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_17:
            outlined destroy of DataStreamState?((uint64_t)v12, &demangling cache variable for type metadata for Asset?);
            type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for NSObject);
            char v30 = static NSObject.== infix(_:_:)();
            return v30 & 1;
          }
        }
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v36, (uint64_t (*)(void))type metadata accessor for Asset);
        outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
        outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
        uint64_t v35 = (uint64_t)v12;
        uint64_t v34 = &demangling cache variable for type metadata for Asset?;
LABEL_19:
        outlined destroy of DataStreamState?(v35, v34);
        char v30 = 0;
        return v30 & 1;
      }
      outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
      outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
    }
    uint64_t v34 = &demangling cache variable for type metadata for (Asset?, Asset?);
    uint64_t v35 = (uint64_t)v12;
    goto LABEL_19;
  }
  return v30 & 1;
}

uint64_t specialized static OnDeviceInferenceAssetObjectTokenizer.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Asset();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  unint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Asset?, Asset?));
  MEMORY[0x270FA5388](v9, v10);
  char v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v15 = MEMORY[0x270FA5388](v13 - 8, v14);
  unint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  char v21 = (char *)&v51 - v20;
  MEMORY[0x270FA5388](v19, v22);
  uint64_t v24 = (char *)&v51 - v23;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v25 & 1) != 0))
  {
    unint64_t v52 = v8;
    uint64_t v27 = type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
    uint64_t v54 = a2;
    uint64_t v28 = v27;
    outlined init with copy of (Int, LogitCollection)((uint64_t)a1 + *(int *)(v27 + 20), (uint64_t)v24, &demangling cache variable for type metadata for Asset?);
    uint64_t v53 = v28;
    uint64_t v29 = *(int *)(v28 + 20);
    char v30 = v54;
    outlined init with copy of (Int, LogitCollection)((uint64_t)v54 + v29, (uint64_t)v21, &demangling cache variable for type metadata for Asset?);
    uint64_t v31 = (uint64_t)&v12[*(int *)(v9 + 48)];
    outlined init with copy of (Int, LogitCollection)((uint64_t)v24, (uint64_t)v12, &demangling cache variable for type metadata for Asset?);
    outlined init with copy of (Int, LogitCollection)((uint64_t)v21, v31, &demangling cache variable for type metadata for Asset?);
    uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v32((uint64_t)v12, 1, v4) == 1)
    {
      outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
      outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
      if (v32(v31, 1, v4) == 1)
      {
LABEL_17:
        outlined destroy of DataStreamState?((uint64_t)v12, &demangling cache variable for type metadata for Asset?);
        type metadata accessor for TokenizerRunner();
        BOOL v41 = v30;
        uint64_t v42 = v53;
        if (static TokenizerRunner.== infix(_:_:)())
        {
          uint64_t v43 = *(int *)(v42 + 28);
          uint64_t v44 = *(void *)((char *)v41 + v43);
          if (*(void *)((char *)a1 + v43))
          {
            if (v44)
            {
              swift_bridgeObjectRetain();
              uint64_t v45 = swift_bridgeObjectRetain();
              char v46 = specialized static Dictionary<>.== infix(_:_:)(v45, v44);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v46)
              {
LABEL_27:
                uint64_t v47 = *(int *)(v42 + 32);
                uint64_t v48 = *(void *)((char *)v54 + v47);
                if (*(void *)((char *)a1 + v47))
                {
                  if (v48)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v49 = swift_bridgeObjectRetain();
                    char v50 = specialized static Dictionary<>.== infix(_:_:)(v49, v48);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v50) {
                      return 1;
                    }
                  }
                }
                else if (!v48)
                {
                  return 1;
                }
              }
            }
          }
          else if (!v44)
          {
            goto LABEL_27;
          }
        }
        return 0;
      }
    }
    else
    {
      outlined init with copy of (Int, LogitCollection)((uint64_t)v12, (uint64_t)v17, &demangling cache variable for type metadata for Asset?);
      if (v32(v31, 1, v4) != 1)
      {
        uint64_t v35 = (uint64_t)v52;
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v31, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Asset);
        if (MEMORY[0x2612042A0](v17, v35))
        {
          uint64_t v36 = *(int *)(v4 + 20);
          uint64_t v37 = *(void *)&v17[v36];
          uint64_t v38 = *(void *)&v17[v36 + 8];
          uint64_t v39 = (void *)(v35 + v36);
          BOOL v40 = v37 == *v39 && v38 == v39[1];
          if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v35, (uint64_t (*)(void))type metadata accessor for Asset);
            outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
            outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
            outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
            goto LABEL_17;
          }
        }
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v35, (uint64_t (*)(void))type metadata accessor for Asset);
        outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
        outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
        outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
        uint64_t v34 = (uint64_t)v12;
        long long v33 = &demangling cache variable for type metadata for Asset?;
LABEL_23:
        outlined destroy of DataStreamState?(v34, v33);
        return 0;
      }
      outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Asset?);
      outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Asset?);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Asset);
    }
    long long v33 = &demangling cache variable for type metadata for (Asset?, Asset?);
    uint64_t v34 = (uint64_t)v12;
    goto LABEL_23;
  }
  return result;
}

BOOL specialized static OnDeviceInferenceAssetObjectE5Runner.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v173 = type metadata accessor for Asset();
  uint64_t v4 = *(void *)(v173 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v173, v5);
  v166 = &v163[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v168 = &v163[-v9];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v167 = &v163[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v170 = &v163[-v15];
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Asset?, Asset?));
  uint64_t v17 = MEMORY[0x270FA5388](v172, v16);
  v169 = &v163[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17, v19);
  uint64_t v174 = &v163[-v20];
  uint64_t v177 = type metadata accessor for UUID();
  uint64_t v179 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177, v21);
  uint64_t v171 = &v163[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v23 - 8, v24);
  uint64_t v175 = &v163[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v176, v26);
  uint64_t v178 = &v163[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v180 = (int *)type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v29 = MEMORY[0x270FA5388](v180, v28);
  uint64_t v183 = &v163[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v184 = &v163[-v33];
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v181 = &v163[-v36];
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v182 = &v163[-v39];
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v188 = &v163[-v42];
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  uint64_t v186 = &v163[-v45];
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  uint64_t v187 = &v163[-v48];
  uint64_t v50 = MEMORY[0x270FA5388](v47, v49);
  uint64_t v191 = &v163[-v51];
  uint64_t v53 = MEMORY[0x270FA5388](v50, v52);
  uint64_t v189 = &v163[-v54];
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  unint64_t v190 = &v163[-v57];
  uint64_t v59 = MEMORY[0x270FA5388](v56, v58);
  uint64_t v61 = &v163[-v60];
  uint64_t v63 = MEMORY[0x270FA5388](v59, v62);
  v185 = &v163[-v64];
  uint64_t v66 = MEMORY[0x270FA5388](v63, v65);
  unint64_t v68 = &v163[-v67];
  uint64_t v70 = MEMORY[0x270FA5388](v66, v69);
  int v72 = &v163[-v71];
  uint64_t v74 = MEMORY[0x270FA5388](v70, v73);
  os_log_type_t v76 = &v163[-v75];
  MEMORY[0x270FA5388](v74, v77);
  uint64_t v79 = &v163[-v78];
  Class v80 = a1;
  uint64_t v81 = (uint64_t)a2;
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)a1, (uint64_t)&v163[-v78], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)a2, (uint64_t)v76, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  }
  else
  {
    char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)a1, (uint64_t)v79, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v76, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if ((v82 & 1) == 0)
    {
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v79, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v76, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)a1, (uint64_t)v72, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v68, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v85 = (uint64_t)a1;
      goto LABEL_12;
    }
  }
  uint64_t v165 = v4;
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for NSObject);
  Swift::String v83 = v180;
  char v84 = static NSObject.== infix(_:_:)();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v79, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v76, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)a1, (uint64_t)v72, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v68, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v85 = (uint64_t)a1;
  if ((v84 & 1) == 0)
  {
LABEL_12:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v72, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v68, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    int v90 = v185;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v185, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    goto LABEL_13;
  }
  uint64_t v86 = v83[7];
  uint64_t v87 = *(void *)&v72[v86];
  uint64_t v88 = *(void *)&v68[v86];
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v72, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v68, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v89 = (uint64_t)v80;
  int v90 = v185;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v89, (uint64_t)v185, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if (v87 != v88)
  {
LABEL_13:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v90, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v98 = (uint64_t)v182;
    uint64_t v97 = (uint64_t)v183;
    uint64_t v99 = (uint64_t)v181;
    os_log_type_t v93 = v188;
LABEL_14:
    uint64_t v95 = v190;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v190, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v96 = v189;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v189, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v100 = v191;
    goto LABEL_15;
  }
  uint64_t v91 = v83[9];
  uint64_t v92 = *(void *)&v61[v91];
  os_log_type_t v93 = v188;
  if (!*(void *)&v90[v91])
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v90, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if (!v92)
    {
      uint64_t v95 = v190;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v190, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v96 = v189;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v189, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v98 = (uint64_t)v182;
      uint64_t v97 = (uint64_t)v183;
      uint64_t v99 = (uint64_t)v181;
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  if (!v92)
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v90, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v98 = (uint64_t)v182;
    uint64_t v97 = (uint64_t)v183;
    uint64_t v99 = (uint64_t)v181;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v94 = swift_bridgeObjectRetain();
  int v164 = specialized static Dictionary<>.== infix(_:_:)(v94, v92);
  swift_bridgeObjectRelease();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v61, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v90, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  swift_bridgeObjectRelease();
  uint64_t v95 = v190;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v190, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v96 = v189;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v189, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v98 = (uint64_t)v182;
  uint64_t v97 = (uint64_t)v183;
  uint64_t v99 = (uint64_t)v181;
  uint64_t v100 = v191;
  if ((v164 & 1) == 0)
  {
LABEL_15:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v96, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v95, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_16:
    uint64_t v101 = v187;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v100, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v101, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_17:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v101, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v100, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_18:
    uint64_t v102 = v186;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v93, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_19:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v93, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v102, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_20:
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    goto LABEL_21;
  }
LABEL_31:
  uint64_t v106 = v180[12];
  uint64_t v107 = *(void *)&v96[v106];
  if (!*(void *)&v95[v106])
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v96, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v95, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if (!v107)
    {
      uint64_t v100 = v191;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v191, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v101 = v187;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v187, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  if (!v107)
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v189, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v190, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v100 = v191;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v108 = swift_bridgeObjectRetain();
  char v109 = specialized static Dictionary<>.== infix(_:_:)(v108, v107);
  swift_bridgeObjectRelease();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v189, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v190, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  swift_bridgeObjectRelease();
  uint64_t v100 = v191;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v191, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v101 = v187;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v187, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if ((v109 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_40:
  uint64_t v110 = v180[13];
  uint64_t v111 = (uint64_t)&v100[v110];
  uint64_t v112 = (uint64_t)&v101[v110];
  uint64_t v113 = v178;
  char v114 = &v178[*(int *)(v176 + 48)];
  outlined init with copy of (Int, LogitCollection)(v111, (uint64_t)v178, &demangling cache variable for type metadata for UUID?);
  unint64_t v190 = v114;
  outlined init with copy of (Int, LogitCollection)(v112, (uint64_t)v114, &demangling cache variable for type metadata for UUID?);
  uint64_t v115 = v177;
  uint64_t v189 = *(unsigned char **)(v179 + 48);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v189)(v113, 1, v177) == 1)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v101, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v191, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    int v116 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v189)(v190, 1, v115);
    os_log_type_t v93 = v188;
    uint64_t v117 = (uint64_t)v113;
    if (v116 == 1)
    {
      outlined destroy of DataStreamState?((uint64_t)v113, &demangling cache variable for type metadata for UUID?);
      uint64_t v102 = v186;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v93, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  uint64_t v118 = v175;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v113, (uint64_t)v175, &demangling cache variable for type metadata for UUID?);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v189)(v190, 1, v115) == 1)
  {
    uint64_t v117 = (uint64_t)v113;
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v187, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v191, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    (*(void (**)(unsigned char *, uint64_t))(v179 + 8))(v118, v115);
    os_log_type_t v93 = v188;
LABEL_45:
    outlined destroy of DataStreamState?(v117, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_18;
  }
  uint64_t v119 = v179;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v179 + 32))(v171, v190, v115);
  lazy protocol witness table accessor for type InferenceError and conformance InferenceError(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  uint64_t v120 = v115;
  char v121 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v122 = *(void (**)(unsigned char *, uint64_t))(v119 + 8);
  v122(v171, v120);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v187, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v191, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  v122(v175, v120);
  outlined destroy of DataStreamState?((uint64_t)v178, &demangling cache variable for type metadata for UUID?);
  uint64_t v102 = v186;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  os_log_type_t v93 = v188;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, (uint64_t)v188, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if ((v121 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_47:
  uint64_t v123 = v180[5];
  uint64_t v124 = &v93[v123];
  id v125 = v174;
  uint64_t v126 = &v174[*(int *)(v172 + 48)];
  outlined init with copy of (Int, LogitCollection)((uint64_t)&v102[v123], (uint64_t)v174, &demangling cache variable for type metadata for Asset?);
  uint64_t v127 = (uint64_t)v124;
  uint64_t v128 = v125;
  uint64_t v191 = v126;
  outlined init with copy of (Int, LogitCollection)(v127, (uint64_t)v126, &demangling cache variable for type metadata for Asset?);
  uint64_t v129 = (uint64_t)v93;
  uint64_t v130 = v165 + 48;
  uint64_t v131 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v165 + 48);
  uint64_t v132 = v173;
  int v133 = v131(v128, 1, v173);
  uint64_t v165 = v130;
  if (v133 == 1)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v129, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v128 = v174;
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if (v131(v191, 1, v132) == 1)
    {
LABEL_49:
      outlined destroy of DataStreamState?((uint64_t)v128, &demangling cache variable for type metadata for Asset?);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      goto LABEL_50;
    }
    goto LABEL_59;
  }
  uint64_t v144 = v170;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v128, (uint64_t)v170, &demangling cache variable for type metadata for Asset?);
  if (v131(v191, 1, v132) == 1)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v188, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v144, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_59:
    unint64_t v145 = &demangling cache variable for type metadata for (Asset?, Asset?);
    uint64_t v146 = (uint64_t)v128;
LABEL_60:
    outlined destroy of DataStreamState?(v146, v145);
    goto LABEL_20;
  }
  uint64_t v147 = v168;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v191, (uint64_t)v168, (uint64_t (*)(void))type metadata accessor for Asset);
  if ((MEMORY[0x2612042A0](v144, v147) & 1) == 0)
  {
    uint64_t v155 = v188;
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v155, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v144, (uint64_t (*)(void))type metadata accessor for Asset);
    unint64_t v145 = &demangling cache variable for type metadata for Asset?;
    uint64_t v146 = (uint64_t)v128;
    goto LABEL_60;
  }
  uint64_t v148 = *(int *)(v132 + 20);
  uint64_t v149 = *(void *)&v144[v148];
  uint64_t v150 = *(void *)&v144[v148 + 8];
  uint64_t v151 = &v147[v148];
  if (v149 == *v151 && v150 == v151[1])
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v188, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v170, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v128 = v174;
    goto LABEL_49;
  }
  char v161 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for Asset);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v188, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v186, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v170, (uint64_t (*)(void))type metadata accessor for Asset);
  outlined destroy of DataStreamState?((uint64_t)v174, &demangling cache variable for type metadata for Asset?);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if ((v161 & 1) == 0)
  {
LABEL_21:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
LABEL_22:
    uint64_t v103 = v184;
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v184, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    goto LABEL_23;
  }
LABEL_50:
  uint64_t v134 = v180[14];
  uint64_t v135 = v99 + v134;
  uint64_t v136 = v169;
  BOOL v137 = &v169[*(int *)(v172 + 48)];
  outlined init with copy of (Int, LogitCollection)(v98 + v134, (uint64_t)v169, &demangling cache variable for type metadata for Asset?);
  uint64_t v191 = v137;
  outlined init with copy of (Int, LogitCollection)(v135, (uint64_t)v137, &demangling cache variable for type metadata for Asset?);
  uint64_t v138 = v173;
  if (v131(v136, 1, v173) == 1)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v136 = v169;
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if (v131(v191, 1, v138) == 1)
    {
LABEL_52:
      outlined destroy of DataStreamState?((uint64_t)v136, &demangling cache variable for type metadata for Asset?);
      uint64_t v103 = v184;
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v184, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      goto LABEL_53;
    }
    goto LABEL_67;
  }
  os_log_type_t v152 = v167;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v136, (uint64_t)v167, &demangling cache variable for type metadata for Asset?);
  if (v131(v191, 1, v138) == 1)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_67:
    uint64_t v153 = &demangling cache variable for type metadata for (Asset?, Asset?);
    uint64_t v154 = (uint64_t)v136;
LABEL_68:
    outlined destroy of DataStreamState?(v154, v153);
    goto LABEL_22;
  }
  uint64_t v156 = v166;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v191, (uint64_t)v166, (uint64_t (*)(void))type metadata accessor for Asset);
  if ((MEMORY[0x2612042A0](v152, v156) & 1) == 0)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v156, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v153 = &demangling cache variable for type metadata for Asset?;
    uint64_t v154 = (uint64_t)v136;
    goto LABEL_68;
  }
  uint64_t v157 = *(int *)(v173 + 20);
  uint64_t v158 = *(void *)&v152[v157];
  uint64_t v159 = *(void *)&v152[v157 + 8];
  uint64_t v160 = &v156[v157];
  if (v158 == *v160 && v159 == v160[1])
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v156, (uint64_t (*)(void))type metadata accessor for Asset);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v136 = v169;
    goto LABEL_52;
  }
  char v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v156, (uint64_t (*)(void))type metadata accessor for Asset);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v99, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v98, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for Asset);
  outlined destroy of DataStreamState?((uint64_t)v169, &demangling cache variable for type metadata for Asset?);
  uint64_t v103 = v184;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v85, (uint64_t)v184, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v81, v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if ((v162 & 1) == 0)
  {
LABEL_23:
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v103, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    return 0;
  }
LABEL_53:
  uint64_t v139 = v180[16];
  char v140 = &v103[v139];
  uint64_t v141 = *(void *)&v103[v139 + 8];
  uint64_t v142 = (void *)(v97 + v139);
  uint64_t v143 = v142[1];
  if (!v141)
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v103, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    if (!v143) {
      return 1;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!v143)
  {
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v103, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    swift_bridgeObjectRelease();
    return 0;
  }
  BOOL v104 = *v140 == *v142 && specialized static Array<A>.== infix(_:_:)(v141, v143);
  swift_bridgeObjectRetain();
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel(v97, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v103, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  swift_bridgeObjectRelease();
  return v104;
}

uint64_t type metadata accessor for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceAssetObjectBaseModel);
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceAssetObjectTokenizer);
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFyScCyyts5NeverOGXEfU0_TA(uint64_t a1)
{
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKFyScCyyts5NeverOGXEfU0_(a1, v1[2], v1[3], v1[4]);
}

uint64_t outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v26) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16)
        {
          int64_t v11 = v15 + 3;
          if (v15 + 3 >= v26) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v11);
          if (!v16)
          {
            int64_t v17 = v15 + 4;
            if (v17 >= v26)
            {
LABEL_25:
              swift_release();
              return 0;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v17);
            int64_t v11 = v17;
            if (!v16) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    uint64_t v18 = (unint64_t *)(*(void *)(a1 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(a1 + 56) + 40 * v14, (uint64_t)v24);
    *(void *)&long long v23 = v20;
    *((void *)&v23 + 1) = v19;
    v21[0] = v23;
    v21[1] = v24[0];
    v21[2] = v24[1];
    uint64_t v22 = v25;
    if (__PAIR128__(v19, v20) == __PAIR128__(a3, a2))
    {
      swift_bridgeObjectRetain();
      outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: OnDeviceInferenceAssetObject));
LABEL_24:
      swift_release();
      return 1;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    uint64_t result = outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: OnDeviceInferenceAssetObject));
    if (v12) {
      goto LABEL_24;
    }
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFyScCyyts5NeverOGXEfU0_TA(uint64_t a1)
{
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKFyScCyyts5NeverOGXEfU0_(a1, v1[2], v1[3], v1[4]);
}

uint64_t *outlined release of ModelMetadata?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of ModelMetadata?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s24TokenGenerationInference13ModelMetadataVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = a1;
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      uint64_t v6 = static _SetStorage.allocate(capacity:)();
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = v6 + 56;
  uint64_t v47 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    unint64_t v44 = v4;
    while (1)
    {
      uint64_t v12 = MEMORY[0x261205930](v11, v4);
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        type metadata accessor for TGIE5AdapterConfigurationObjC(0, a3);
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v4 = v44;
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v10 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
        unint64_t v4 = v44;
      }
      *(void *)(v10 + 8 * v18) = v20 | v19;
      *(void *)(*(void *)(v6 + 48) + 8 * v17) = v14;
      uint64_t v26 = *(void *)(v6 + 16);
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_38;
      }
      *(void *)(v6 + 16) = v27;
LABEL_12:
      if (v11 == v47) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v45 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v45)
  {
    Swift::Int v29 = *(void *)(v6 + 40);
    id v30 = *(id *)(v4 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, a3);
      id v37 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_24;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(*(void *)(v6 + 48) + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)(v10 + 8 * (v33 >> 6));
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v8 = v47;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v8 = v47;
    }
    *(void *)(v10 + 8 * v34) = v36 | v35;
    *(void *)(*(void *)(v6 + 48) + 8 * v33) = v30;
    uint64_t v42 = *(void *)(v6 + 16);
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_39;
    }
    *(void *)(v6 + 16) = v43;
LABEL_25:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t outlined retain of ClassifierMetadata?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ClassifierMetadata?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AdapterMetadata(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of MetadataSpecialToken(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of TokenizerMetadata?(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of TokenizerMetadata?(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TGIE5AdapterConfigurationObjC(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

double _s24TokenGenerationInference13ModelMetadataVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined release of ModelMetadata(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceAssetInUsePlaceHolder);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v10 = result & v7;
      unint64_t v11 = (result & (unint64_t)v7) >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * v11);
      uint64_t v13 = 1 << (result & v7);
      uint64_t v14 = *(void *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(void *)(v14 + 8 * v10) != v8)
        {
          unint64_t v10 = (v10 + 1) & v7;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v11) = v13 | v12;
        *(void *)(v14 + 8 * v10) = v8;
        uint64_t v15 = *(void *)(v3 + 16);
        BOOL v16 = __OFADD__(v15, 1);
        uint64_t v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v17;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Asset();
    uint64_t v10 = *(void *)(v9 - 8);
    unint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      uint64_t v15 = *(int *)(v9 + 20);
      BOOL v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      uint64_t v18 = *((void *)v17 + 1);
      *(void *)BOOL v16 = *(void *)v17;
      *((void *)v16 + 1) = v18;
      uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
      v19(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Asset();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for OnDeviceInferenceAssetInUsePlaceHolder(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Asset();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v6, v7, v12);
    uint64_t v13 = *(int *)(v8 + 20);
    uint64_t v14 = &v6[v13];
    uint64_t v15 = &v7[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
    v17(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithCopy for OnDeviceInferenceAssetInUsePlaceHolder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v7, v8, v21);
      uint64_t v22 = *(int *)(v9 + 20);
      uint64_t v23 = &v7[v22];
      id v24 = &v8[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v18(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for OnDeviceInferenceAssetInUsePlaceHolder(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Asset();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
    *(_OWORD *)&v5[*(int *)(v7 + 20)] = *(_OWORD *)&v6[*(int *)(v7 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for OnDeviceInferenceAssetInUsePlaceHolder(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v8, v9, v18);
      uint64_t v19 = *(int *)(v10 + 20);
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      uint64_t v23 = *(void *)v21;
      uint64_t v22 = *((void *)v21 + 1);
      *(void *)uint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
  *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_55Tm);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_56Tm);
}

void type metadata completion function for OnDeviceInferenceAssetInUsePlaceHolder()
{
  type metadata accessor for Asset?(319, &lazy cache variable for type metadata for Asset?, (void (*)(uint64_t))type metadata accessor for Asset);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetObjectBaseModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Asset();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
      uint64_t v17 = *(int *)(v11 + 20);
      uint64_t v18 = &v9[v17];
      uint64_t v19 = &v10[v17];
      uint64_t v20 = *((void *)v19 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v20;
      uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v21(v9, 0, 1, v11);
    }
    uint64_t v22 = *(int *)(a3 + 24);
    uint64_t v23 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = (uint64_t)v23;
    id v24 = v23;
  }
  return v4;
}

void destroy for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Asset();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *initializeWithCopy for OnDeviceInferenceAssetObjectBaseModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
    uint64_t v15 = *(int *)(v10 + 20);
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v19(v8, 0, 1, v10);
  }
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = *(void **)((char *)a2 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v22 = v21;
  return a1;
}

void *assignWithCopy for OnDeviceInferenceAssetObjectBaseModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v7, v8, v25);
      uint64_t v26 = *(int *)(v9 + 20);
      uint64_t v27 = &v7[v26];
      uint64_t v28 = &v8[v26];
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = *((void *)v28 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v18(v7, 0, 1, v9);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = *(void **)((char *)a2 + v20);
  id v22 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  id v23 = v21;

  return a1;
}

_OWORD *initializeWithTake for OnDeviceInferenceAssetObjectBaseModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    *(_OWORD *)&v7[*(int *)(v9 + 20)] = *(_OWORD *)&v8[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for OnDeviceInferenceAssetObjectBaseModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v8, v9, v20);
      uint64_t v21 = *(int *)(v10 + 20);
      id v22 = &v8[v21];
      id v23 = &v9[v21];
      uint64_t v25 = *(void *)v23;
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)id v22 = v25;
      *((void *)v22 + 1) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
  *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = *(void **)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);

  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_55Tm_0);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_56Tm_0);
}

void type metadata completion function for OnDeviceInferenceAssetObjectBaseModel()
{
  type metadata accessor for Asset?(319, &lazy cache variable for type metadata for Asset?, (void (*)(uint64_t))type metadata accessor for Asset);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetObjectE5Runner(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Asset();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    uint64_t v64 = v11;
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
      uint64_t v17 = *(int *)(v11 + 20);
      uint64_t v18 = &v9[v17];
      uint64_t v19 = &v10[v17];
      uint64_t v20 = *((void *)v19 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v20;
      uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v21(v9, 0, 1, v11);
    }
    uint64_t v22 = a3[6];
    uint64_t v23 = a3[7];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = (uint64_t)v24;
    *(uint64_t *)((char *)v4 + v23) = *(uint64_t *)((char *)a2 + v23);
    uint64_t v25 = a3[8];
    uint64_t v26 = a3[9];
    uint64_t v27 = (char *)v4 + v25;
    uint64_t v28 = (char *)a2 + v25;
    long long v29 = *((_OWORD *)v28 + 1);
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v29;
    *(void *)(v27 + 29) = *(void *)(v28 + 29);
    *(uint64_t *)((char *)v4 + v26) = *(uint64_t *)((char *)a2 + v26);
    uint64_t v30 = a3[11];
    *(uint64_t *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    Swift::Int v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    long long v33 = *((_OWORD *)v32 + 1);
    *(_OWORD *)Swift::Int v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v33;
    *(void *)(v31 + 29) = *(void *)(v32 + 29);
    uint64_t v34 = a3[13];
    uint64_t v65 = a3;
    *(uint64_t *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    __dst = (char *)v4 + v34;
    uint64_t v35 = (char *)a2 + v34;
    uint64_t v36 = type metadata accessor for UUID();
    uint64_t v37 = *(void *)(v36 - 8);
    char v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    id v39 = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v38(v35, 1, v36))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v35, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
    }
    uint64_t v41 = v65[14];
    uint64_t v42 = (char *)v4 + v41;
    uint64_t v43 = (char *)a2 + v41;
    if (v13((char *)a2 + v41, 1, v64))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v45 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v42, v43, v45);
      uint64_t v46 = *(int *)(v64 + 20);
      uint64_t v47 = &v42[v46];
      uint64_t v48 = &v43[v46];
      uint64_t v49 = *((void *)v48 + 1);
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = v49;
      uint64_t v50 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v50(v42, 0, 1, v64);
    }
    uint64_t v51 = v65[15];
    uint64_t v52 = (char *)v4 + v51;
    uint64_t v53 = (char *)a2 + v51;
    uint64_t v54 = type metadata accessor for PromptTemplateConfiguration(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      uint64_t v57 = type metadata accessor for ModelConfiguration();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v52, v53, v57);
      v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    uint64_t v58 = v65[16];
    uint64_t v59 = (uint64_t *)((char *)v4 + v58);
    uint64_t v60 = (uint64_t *)((char *)a2 + v58);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Asset();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[13];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = a1 + a2[14];
  if (!v6(v11, 1, v5))
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = a1 + a2[15];
  uint64_t v14 = type metadata accessor for PromptTemplateConfiguration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = type metadata accessor for ModelConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OnDeviceInferenceAssetObjectE5Runner(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
    uint64_t v15 = *(int *)(v10 + 20);
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v19(v8, 0, 1, v10);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = a3[7];
  uint64_t v22 = a2;
  uint64_t v23 = *(void **)&a2[v20];
  *(void *)((char *)a1 + v20) = v23;
  *(void *)((char *)a1 + v21) = *(void *)&v22[v21];
  uint64_t v24 = a3[8];
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = &v22[v24];
  long long v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v28;
  *(void *)(v26 + 29) = *(void *)(v27 + 29);
  *(void *)((char *)a1 + v25) = *(void *)&v22[v25];
  uint64_t v29 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)&v22[a3[10]];
  uint64_t v30 = (char *)a1 + v29;
  Swift::Int v31 = &v22[v29];
  long long v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  *(void *)(v30 + 29) = *(void *)(v31 + 29);
  uint64_t v33 = a3[13];
  uint64_t v64 = a3;
  *(void *)((char *)a1 + a3[12]) = *(void *)&v22[a3[12]];
  uint64_t v62 = v22;
  __dst = (char *)a1 + v33;
  uint64_t v34 = &v22[v33];
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  id v38 = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v37(v34, 1, v35))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(__dst, v34, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
  }
  uint64_t v40 = v64[14];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = &v62[v40];
  if (v12(&v62[v40], 1, v10))
  {
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    uint64_t v44 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v41, v42, v44);
    uint64_t v45 = *(int *)(v10 + 20);
    uint64_t v46 = &v41[v45];
    uint64_t v47 = &v42[v45];
    uint64_t v48 = *((void *)v47 + 1);
    *(void *)uint64_t v46 = *(void *)v47;
    *((void *)v46 + 1) = v48;
    uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v49(v41, 0, 1, v10);
  }
  uint64_t v50 = v64[15];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = &v62[v50];
  uint64_t v53 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    uint64_t v56 = type metadata accessor for ModelConfiguration();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v51, v52, v56);
    v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t v57 = v64[16];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = &v62[v57];
  uint64_t v60 = *((void *)v59 + 1);
  void *v58 = *(void *)v59;
  v58[1] = v60;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for OnDeviceInferenceAssetObjectE5Runner(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  uint64_t v78 = v11;
  int v13 = v11(v8, 1, v9);
  uint64_t v79 = v9;
  uint64_t v77 = v10;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      uint64_t v15 = *(int *)(v9 + 20);
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = *((void *)v17 + 1);
      uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
      v18(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v68 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24))(v7, v8, v68);
  uint64_t v69 = *(int *)(v9 + 20);
  uint64_t v70 = &v7[v69];
  uint64_t v71 = &v8[v69];
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = *((void *)v71 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v20 = a3[6];
  uint64_t v21 = *(void **)((char *)a2 + v20);
  uint64_t v22 = *(void **)&a1[v20];
  *(void *)&a1[v20] = v21;
  id v23 = v21;

  *(void *)&a1[a3[7]] = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)(v26 + 29);
  long long v28 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v28;
  *(void *)(v25 + 29) = v27;
  *(void *)&a1[a3[9]] = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)((char *)a2 + a3[10]);
  uint64_t v29 = a3[11];
  uint64_t v30 = &a1[v29];
  Swift::Int v31 = (char *)a2 + v29;
  uint64_t v32 = *(void *)(v31 + 29);
  long long v33 = *((_OWORD *)v31 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v33;
  *(void *)(v30 + 29) = v32;
  *(void *)&a1[a3[12]] = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[13];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
LABEL_13:
  uint64_t v43 = a3[14];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = (char *)a2 + v43;
  int v46 = v78(&a1[v43], 1, v79);
  int v47 = v78(v45, 1, v79);
  if (v46)
  {
    if (!v47)
    {
      uint64_t v48 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v44, v45, v48);
      uint64_t v49 = *(int *)(v79 + 20);
      uint64_t v50 = &v44[v49];
      uint64_t v51 = &v45[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = *((void *)v51 + 1);
      uint64_t v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56);
      swift_bridgeObjectRetain();
      v52(v44, 0, 1, v79);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_18:
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v44, v45, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v72 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 24))(v44, v45, v72);
  uint64_t v73 = *(int *)(v79 + 20);
  uint64_t v74 = &v44[v73];
  uint64_t v75 = &v45[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = *((void *)v75 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v54 = a3[15];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = (char *)a2 + v54;
  uint64_t v57 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  int v60 = v59(v55, 1, v57);
  int v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      uint64_t v76 = type metadata accessor for ModelConfiguration();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 24))(v55, v56, v76);
      v55[*(int *)(v57 + 20)] = v56[*(int *)(v57 + 20)];
      goto LABEL_25;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v55, type metadata accessor for PromptTemplateConfiguration);
    goto LABEL_24;
  }
  if (v61)
  {
LABEL_24:
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
    memcpy(v55, v56, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_25;
  }
  uint64_t v62 = type metadata accessor for ModelConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v55, v56, v62);
  v55[*(int *)(v57 + 20)] = v56[*(int *)(v57 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
LABEL_25:
  uint64_t v64 = a3[16];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = (void *)((char *)a2 + v64);
  *(void *)uint64_t v65 = *v66;
  *((void *)v65 + 1) = v66[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for OnDeviceInferenceAssetObjectE5Runner(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v43 = v10;
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
    *(_OWORD *)&v7[*(int *)(v9 + 20)] = *(_OWORD *)&v8[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)&a2[a3[6]];
  *(void *)((char *)a1 + v14) = *(void *)&a2[v14];
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = &a2[v15];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *(void *)(v17 + 29) = *(void *)(v18 + 29);
  *(void *)((char *)a1 + v16) = *(void *)&a2[v16];
  uint64_t v20 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)&a2[a3[10]];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = &a2[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *(void *)(v21 + 29) = *(void *)(v22 + 29);
  uint64_t v24 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)&a2[a3[12]];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = a3[14];
  Swift::Int v31 = (char *)a1 + v30;
  uint64_t v32 = &a2[v30];
  if (v11(&a2[v30], 1, v9))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    uint64_t v34 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v31, v32, v34);
    *(_OWORD *)&v31[*(int *)(v9 + 20)] = *(_OWORD *)&v32[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v31, 0, 1, v9);
  }
  uint64_t v35 = a3[15];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = type metadata accessor for ModelConfiguration();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v36, v37, v41);
    v36[*(int *)(v38 + 20)] = v37[*(int *)(v38 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *assignWithTake for OnDeviceInferenceAssetObjectE5Runner(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v72 = *(void *)(v10 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
  int v12 = v11(v8, 1, v10);
  int v13 = v11(v9, 1, v10);
  uint64_t v73 = v10;
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v8, v9, v14);
      *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v59 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 40))(v8, v9, v59);
  uint64_t v60 = *(int *)(v10 + 20);
  int v61 = &v8[v60];
  uint64_t v62 = &v9[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)int v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = *(void **)&a1[v16];
  *(void *)&a1[v16] = *(void *)((char *)a2 + v16);

  *(void *)&a1[a3[7]] = *(void *)((char *)a2 + a3[7]);
  swift_release();
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = (char *)a2 + v18;
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *(void *)(v20 + 29) = *(void *)(v21 + 29);
  *(void *)&a1[v19] = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)((char *)a2 + a3[10]);
  uint64_t v24 = &a1[v23];
  uint64_t v25 = (char *)a2 + v23;
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *(void *)(v24 + 29) = *(void *)(v25 + 29);
  *(void *)&a1[a3[12]] = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[13];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_13:
  uint64_t v36 = a3[14];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = (char *)a2 + v36;
  int v39 = v11(&a1[v36], 1, v73);
  int v40 = v11(v38, 1, v73);
  if (v39)
  {
    if (!v40)
    {
      uint64_t v41 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v37, v38, v41);
      *(_OWORD *)&v37[*(int *)(v73 + 20)] = *(_OWORD *)&v38[*(int *)(v73 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v37, 0, 1, v73);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Asset);
LABEL_18:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v65 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 40))(v37, v38, v65);
  uint64_t v66 = *(int *)(v73 + 20);
  uint64_t v67 = &v37[v66];
  uint64_t v68 = &v38[v66];
  uint64_t v70 = *(void *)v68;
  uint64_t v69 = *((void *)v68 + 1);
  *(void *)uint64_t v67 = v70;
  *((void *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v43 = a3[15];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for PromptTemplateConfiguration(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      uint64_t v71 = type metadata accessor for ModelConfiguration();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 40))(v44, v45, v71);
      v44[*(int *)(v46 + 20)] = v45[*(int *)(v46 + 20)];
      goto LABEL_25;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v44, type metadata accessor for PromptTemplateConfiguration);
    goto LABEL_24;
  }
  if (v50)
  {
LABEL_24:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  uint64_t v51 = type metadata accessor for ModelConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v44, v45, v51);
  v44[*(int *)(v46 + 20)] = v45[*(int *)(v46 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
LABEL_25:
  uint64_t v53 = a3[16];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *(void *)uint64_t v54 = v57;
  *((void *)v54 + 1) = v56;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FAE7BBC);
}

uint64_t sub_25FAE7BBC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[13];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[15];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FAE7D54);
}

uint64_t sub_25FAE7D54(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[13];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[15];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for OnDeviceInferenceAssetObjectE5Runner()
{
  type metadata accessor for Asset?(319, &lazy cache variable for type metadata for Asset?, (void (*)(uint64_t))type metadata accessor for Asset);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Asset?(319, &lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Asset?(319, &lazy cache variable for type metadata for PromptTemplateConfiguration?, (void (*)(uint64_t))type metadata accessor for PromptTemplateConfiguration);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Asset?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetObjectTokenizer(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Asset();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
      uint64_t v17 = *(int *)(v11 + 20);
      uint64_t v18 = &v9[v17];
      uint64_t v19 = &v10[v17];
      uint64_t v20 = *((void *)v19 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v20;
      uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v21(v9, 0, 1, v11);
    }
    uint64_t v22 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v22) = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Asset();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OnDeviceInferenceAssetObjectTokenizer(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
    uint64_t v15 = *(int *)(v10 + 20);
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v19(v8, 0, 1, v10);
  }
  uint64_t v20 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OnDeviceInferenceAssetObjectTokenizer(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v7, v8, v21);
      uint64_t v22 = *(int *)(v9 + 20);
      uint64_t v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v18(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for OnDeviceInferenceAssetObjectTokenizer(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Asset();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    *(_OWORD *)&v7[*(int *)(v9 + 20)] = *(_OWORD *)&v8[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for OnDeviceInferenceAssetObjectTokenizer(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Asset();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v8, v9, v18);
      uint64_t v19 = *(int *)(v10 + 20);
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      uint64_t v23 = *(void *)v21;
      uint64_t v22 = *((void *)v21 + 1);
      *(void *)uint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of OnDeviceInferenceAssetObjectBaseModel((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Asset);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
  *(_OWORD *)&v8[*(int *)(v10 + 20)] = *(_OWORD *)&v9[*(int *)(v10 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FAE8B8C);
}

uint64_t __swift_get_extra_inhabitant_index_55Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FAE8C58);
}

uint64_t __swift_store_extra_inhabitant_index_56Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for OnDeviceInferenceAssetObjectTokenizer()
{
  type metadata accessor for Asset?(319, &lazy cache variable for type metadata for Asset?, (void (*)(uint64_t))type metadata accessor for Asset);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

id OnDeviceInferenceContext.maximumContextLength.getter()
{
  if (*(unsigned char *)(v0 + 152) != 1) {
    return *(id *)(v0 + 144);
  }
  id result = closure #1 in OnDeviceInferenceContext.maximumContextLength.getter(v0);
  *(void *)(v0 + 144) = result;
  *(unsigned char *)(v0 + 152) = 0;
  return result;
}

id closure #1 in OnDeviceInferenceContext.maximumContextLength.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v4, v7);
  uint64_t v10 = (char *)&v53 - v9;
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  int v14 = (char *)&v53 - v13;
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v18 = (char *)&v53 - v17;
  MEMORY[0x270FA5388](v16, v19);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v22 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v24 = MEMORY[0x270FA5388](v22, v23);
  MEMORY[0x270FA5388](v24, v25);
  uint64_t v29 = (char *)&v53 - v26;
  uint64_t v30 = *(void *)(a1 + 104);
  int v61 = *(char **)(v30 + 16);
  if (!v61)
  {
    int v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v39 = v28;
    swift_bridgeObjectRetain();
LABEL_10:
    v34(v21, 1, 1, v22);
    swift_bridgeObjectRelease();
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
    goto LABEL_11;
  }
  uint64_t v53 = v27;
  uint64_t v54 = v10;
  uint64_t v55 = v14;
  uint64_t v56 = v6;
  uint64_t v58 = (char *)&v53 - v26;
  uint64_t v59 = v21;
  uint64_t v31 = v30 + 32;
  uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v57 = v28;
  uint64_t v60 = (uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  while (1)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v31, (uint64_t)v63);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v63, (uint64_t)v62);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    int v33 = swift_dynamicCast();
    int v34 = *v32;
    uint64_t v35 = v32;
    (*v32)(v18, v33 ^ 1u, 1, v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    uint64_t v36 = v30;
    swift_bridgeObjectRelease();
    uint64_t v37 = *v60;
    unsigned int v38 = (*v60)(v18, 1, v22);
    outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    if (v38 != 1) {
      break;
    }
    ++v21;
    v31 += 40;
    uint64_t v30 = v36;
    uint64_t v32 = v35;
    if (v61 == v21)
    {
      uint64_t v29 = v58;
      uint64_t v21 = v59;
      goto LABEL_9;
    }
  }
  if (v61 == v21)
  {
    uint64_t v29 = v58;
    uint64_t v21 = v59;
LABEL_9:
    uint64_t v39 = v57;
    goto LABEL_10;
  }
  if ((unint64_t)v21 >= *(void *)(v36 + 16))
  {
    __break(1u);
LABEL_17:
    outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    if (one-time initialization token for device != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Log.device);
      int v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl(&dword_25FA51000, v50, v51, "No E5RunnerAssetObjects present in the OnDeviceInferenceContext.", v52, 2u);
        MEMORY[0x261206F80](v52, -1, -1);
      }

      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      swift_once();
    }
  }
  outlined init with copy of DeterministicLanguageModelProtocol(v31, (uint64_t)v63);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v63, (uint64_t)v62);
  uint64_t v42 = (uint64_t)v54;
  int v43 = swift_dynamicCast();
  v34((char *)v42, v43 ^ 1u, 1, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  uint64_t v44 = (uint64_t)v55;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner?(v42, (uint64_t)v55);
  uint64_t v45 = (uint64_t)v56;
  outlined init with copy of (Int, LogitCollection)(v44, (uint64_t)v56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  if (v37((char *)v45, 1, v22) == 1) {
    goto LABEL_21;
  }
  uint64_t v46 = v45;
  uint64_t v47 = v53;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v46, v53);
  outlined destroy of DataStreamState?(v44, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v48 = v47;
  uint64_t v21 = v59;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v48, (uint64_t)v59);
  v34(v21, 0, 1, v22);
  swift_bridgeObjectRelease();
  uint64_t v29 = v58;
LABEL_11:
  if (v37(v21, 1, v22) == 1) {
    goto LABEL_17;
  }
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v21, (uint64_t)v29);
  id v40 = objc_msgSend(*(id *)&v29[*(int *)(v22 + 24)], sel_maxContextLength);
  outlined destroy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v29, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  return v40;
}

uint64_t OnDeviceInferenceContext.assets.getter()
{
  if (*(void *)(v0 + 160))
  {
    uint64_t v1 = *(void *)(v0 + 160);
  }
  else
  {
    uint64_t v1 = closure #1 in OnDeviceInferenceContext.assets.getter(v0);
    *(void *)(v0 + 160) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in OnDeviceInferenceContext.assets.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ModelInformation.Asset();
  uint64_t v6 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 104);
  int64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    uint64_t v27 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = v10 + 32;
    v22[1] = v10;
    v22[2] = v6 + 32;
    do
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v13, (uint64_t)v24);
      uint64_t v14 = v25;
      uint64_t v15 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      uint64_t v17 = v25;
      uint64_t v16 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v17, v16);
      uint64_t v18 = type metadata accessor for Asset();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v5, 1, v18) == 1)
      {
        outlined destroy of DataStreamState?((uint64_t)v5, &demangling cache variable for type metadata for Asset?);
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined destroy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Asset);
      }
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      ModelInformation.Asset.init(identifier:version:metadata:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      uint64_t v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v27;
      }
      unint64_t v20 = *(void *)(v12 + 16);
      unint64_t v19 = *(void *)(v12 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v12 = v27;
      }
      *(void *)(v12 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v12+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v20, v9, v23);
      uint64_t v27 = v12;
      v13 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t OnDeviceInferenceContext.modelVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v3 = closure #1 in OnDeviceInferenceContext.modelVersion.getter(v0);
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 176);
    *(void *)(v0 + 168) = v3;
    *(void *)(v0 + 176) = v6;
    swift_bridgeObjectRetain();
    outlined consume of String??(v4, v5);
  }
  outlined copy of String??(v1, v2);
  return v3;
}

uint64_t closure #1 in OnDeviceInferenceContext.modelVersion.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  uint64_t v4 = MEMORY[0x270FA5388](v2 - 8, v3);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  uint64_t v9 = (char *)&v74 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v18 = (char *)&v74 - v17;
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  uint64_t v22 = (char *)&v74 - v21;
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  uint64_t v26 = (char *)&v74 - v25;
  MEMORY[0x270FA5388](v24, v27);
  uint64_t v29 = (char *)&v74 - v28;
  uint64_t v30 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v32 = MEMORY[0x270FA5388](v30, v31);
  uint64_t v83 = (uint64_t)&v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  MEMORY[0x270FA5388](v35, v36);
  uint64_t v84 = (uint64_t)&v74 - v39;
  uint64_t v40 = *(void *)(a1 + 104);
  uint64_t v86 = *(void *)(v40 + 16);
  if (!v86)
  {
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    uint64_t v50 = v38;
    swift_bridgeObjectRetain();
LABEL_10:
    v45(v29, 1, 1, v30);
    swift_bridgeObjectRelease();
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
    goto LABEL_11;
  }
  uint64_t v75 = v37;
  uint64_t v76 = v18;
  uint64_t v77 = v22;
  uint64_t v78 = v14;
  uint64_t v79 = v38;
  uint64_t v81 = v6;
  char v82 = v29;
  Class v80 = v9;
  uint64_t v41 = v40 + 32;
  uint64_t v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  uint64_t v85 = (uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  swift_bridgeObjectRetain();
  unint64_t v43 = 0;
  while (1)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v41, (uint64_t)v88);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v88, (uint64_t)v87);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    int v44 = swift_dynamicCast();
    uint64_t v45 = *v42;
    uint64_t v46 = v42;
    (*v42)(v26, v44 ^ 1u, 1, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
    uint64_t v47 = v40;
    swift_bridgeObjectRelease();
    uint64_t v48 = *v85;
    uint64_t v29 = (char *)v30;
    int v49 = (*v85)(v26, 1, v30);
    outlined destroy of DataStreamState?((uint64_t)v26, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    if (v49 != 1) {
      break;
    }
    ++v43;
    v41 += 40;
    uint64_t v30 = (uint64_t)v29;
    uint64_t v40 = v47;
    uint64_t v42 = v46;
    if (v86 == v43)
    {
      uint64_t v9 = v80;
      uint64_t v6 = v81;
      uint64_t v29 = v82;
      goto LABEL_9;
    }
  }
  if (v86 == v43)
  {
    uint64_t v9 = v80;
    uint64_t v6 = v81;
    uint64_t v30 = (uint64_t)v29;
    uint64_t v29 = v82;
LABEL_9:
    uint64_t v50 = v79;
    goto LABEL_10;
  }
  if (v43 >= *(void *)(v47 + 16))
  {
    __break(1u);
LABEL_25:
    outlined destroy of DataStreamState?((uint64_t)v29, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    if (one-time initialization token for device != -1) {
      goto LABEL_30;
    }
    while (1)
    {
      uint64_t v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Log.device);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl(&dword_25FA51000, v71, v72, "No E5RunnerAssetObjects present in the OnDeviceInferenceContext.", v73, 2u);
        MEMORY[0x261206F80](v73, -1, -1);
      }

      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_once();
    }
  }
  uint64_t v30 = (uint64_t)v29;
  outlined init with copy of DeterministicLanguageModelProtocol(v41, (uint64_t)v88);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v88, (uint64_t)v87);
  uint64_t v63 = (uint64_t)v76;
  int v64 = swift_dynamicCast();
  v45((char *)v63, v64 ^ 1u, 1, v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
  uint64_t v65 = (uint64_t)v77;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner?(v63, (uint64_t)v77);
  uint64_t v66 = (uint64_t)v78;
  outlined init with copy of (Int, LogitCollection)(v65, (uint64_t)v78, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  int v67 = v48((char *)v66, 1, v30);
  uint64_t v29 = v82;
  if (v67 == 1) {
    goto LABEL_29;
  }
  uint64_t v68 = v66;
  uint64_t v69 = v75;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v68, v75);
  outlined destroy of DataStreamState?(v65, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v69, (uint64_t)v29);
  v45(v29, 0, 1, v30);
  swift_bridgeObjectRelease();
  uint64_t v9 = v80;
  uint64_t v6 = v81;
LABEL_11:
  int v51 = v48(v29, 1, v30);
  uint64_t v52 = v84;
  if (v51 == 1) {
    goto LABEL_25;
  }
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v29, v84);
  outlined init with copy of (Int, LogitCollection)(v52 + *(int *)(v30 + 56), (uint64_t)v9, &demangling cache variable for type metadata for Asset?);
  uint64_t v53 = type metadata accessor for Asset();
  uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48);
  if (v54(v9, 1, v53) == 1)
  {
    outlined destroy of DataStreamState?((uint64_t)v9, &demangling cache variable for type metadata for Asset?);
    uint64_t v55 = v83;
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v52, v83);
  }
  else
  {
    uint64_t v56 = &v9[*(int *)(v53 + 20)];
    uint64_t v57 = (uint64_t)v9;
    uint64_t v58 = *(void *)v56;
    uint64_t v59 = *((void *)v56 + 1);
    swift_bridgeObjectRetain();
    outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v57, (uint64_t (*)(void))type metadata accessor for Asset);
    uint64_t v55 = v83;
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v52, v83);
    if (v59)
    {
      uint64_t v60 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner;
      uint64_t v61 = v55;
LABEL_19:
      outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v61, v60);
      return v58;
    }
  }
  outlined init with copy of (Int, LogitCollection)(v55 + *(int *)(v30 + 20), (uint64_t)v6, &demangling cache variable for type metadata for Asset?);
  outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v55, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  if (v54(v6, 1, v53) != 1)
  {
    uint64_t v58 = *(void *)&v6[*(int *)(v53 + 20)];
    swift_bridgeObjectRetain();
    uint64_t v60 = (uint64_t (*)(void))type metadata accessor for Asset;
    uint64_t v61 = (uint64_t)v6;
    goto LABEL_19;
  }
  outlined destroy of DataStreamState?((uint64_t)v6, &demangling cache variable for type metadata for Asset?);
  return 0;
}

uint64_t OnDeviceInferenceContext.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of String??(*(void *)(v0 + 168), *(void *)(v0 + 176));
  return v0;
}

uint64_t OnDeviceInferenceContext.__deallocating_deinit()
{
  OnDeviceInferenceContext.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceContext()
{
  return self;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectE5Runner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference34DeterministicLanguageModelProtocol_pTg5@<X0>(void (*a1)(char *, uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v16 = a1;
  uint64_t v5 = type metadata accessor for Constraints();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, LogitCollection)(v3, (uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5);
  if (result == 1)
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
    v16(v9, &v17);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF24TokenGenerationInference34DeterministicLanguageModelProtocol_p_s5NeverOAD06MaskedgH0CTg5(void (*a1)(uint64_t *__return_ptr, unsigned char *))
{
  outlined init with copy of (Int, LogitCollection)(v1, (uint64_t)&v6, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  if (!v7) {
    return 0;
  }
  outlined init with take of LogitCollection(&v6, (uint64_t)v5);
  a1(&v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (!v2) {
    return v8;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5(void (*a1)(uint64_t *__return_ptr, char *, uint64_t *))
{
  uint64_t v4 = type metadata accessor for Constraints();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v9 - 8, v10);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, LogitCollection)(v1, (uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1) {
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
  a1(&v16, v8, &v15);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 1344) = v3;
  *(unsigned char *)(v4 + 1145) = a3;
  *(void *)(v4 + 1336) = a2;
  *(void *)(v4 + 1328) = a1;
  uint64_t v5 = type metadata accessor for TokenGenerationError.Context();
  *(void *)(v4 + 1352) = v5;
  *(void *)(v4 + 1360) = *(void *)(v5 - 8);
  *(void *)(v4 + 1368) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  *(void *)(v4 + 1376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  *(void *)(v4 + 1384) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy.Choice?);
  *(void *)(v4 + 1392) = swift_task_alloc();
  *(void *)(v4 + 1400) = swift_task_alloc();
  *(void *)(v4 + 1408) = type metadata accessor for InferenceRequest();
  *(void *)(v4 + 1416) = swift_task_alloc();
  *(void *)(v4 + 1424) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
  *(void *)(v4 + 1432) = swift_task_alloc();
  *(void *)(v4 + 1440) = swift_task_alloc();
  *(void *)(v4 + 1448) = swift_task_alloc();
  *(void *)(v4 + 1456) = swift_task_alloc();
  *(void *)(v4 + 1464) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
  *(void *)(v4 + 1472) = v6;
  *(void *)(v4 + 1480) = *(void *)(v6 - 8);
  *(void *)(v4 + 1488) = swift_task_alloc();
  *(void *)(v4 + 1496) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  *(void *)(v4 + 1504) = swift_task_alloc();
  *(void *)(v4 + 1512) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  *(void *)(v4 + 1520) = v7;
  *(void *)(v4 + 1528) = *(void *)(v7 - 8);
  *(void *)(v4 + 1536) = swift_task_alloc();
  *(void *)(v4 + 1544) = swift_task_alloc();
  *(void *)(v4 + 1552) = swift_task_alloc();
  *(void *)(v4 + 1560) = swift_task_alloc();
  *(void *)(v4 + 1568) = swift_task_alloc();
  *(void *)(v4 + 1576) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for InferenceError();
  *(void *)(v4 + 1584) = v8;
  *(void *)(v4 + 1592) = *(void *)(v8 - 8);
  *(void *)(v4 + 1600) = swift_task_alloc();
  *(void *)(v4 + 1608) = swift_task_alloc();
  *(void *)(v4 + 1616) = swift_task_alloc();
  *(void *)(v4 + 1624) = swift_task_alloc();
  *(void *)(v4 + 1632) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v4 + 1640) = v9;
  *(void *)(v4 + 1648) = *(void *)(v9 - 8);
  *(void *)(v4 + 1656) = swift_task_alloc();
  *(void *)(v4 + 1664) = swift_task_alloc();
  *(void *)(v4 + 1672) = swift_task_alloc();
  *(void *)(v4 + 1680) = swift_task_alloc();
  *(void *)(v4 + 1688) = swift_task_alloc();
  *(void *)(v4 + 1696) = swift_task_alloc();
  *(void *)(v4 + 1704) = swift_task_alloc();
  *(void *)(v4 + 1712) = swift_task_alloc();
  *(void *)(v4 + 1720) = swift_task_alloc();
  *(void *)(v4 + 1728) = swift_task_alloc();
  return MEMORY[0x270FA2498](OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), 0, 0);
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)()
{
  uint64_t v69 = v0;
  InferenceProviderRequestConfiguration.requestUUID.getter();
  uint64_t v1 = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  unint64_t v3 = v2;
  v0[217] = v1;
  v0[218] = v2;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v4 = v0[216];
  uint64_t v5 = v0[215];
  uint64_t v6 = v0[206];
  uint64_t v7 = v0[205];
  uint64_t v8 = type metadata accessor for Logger();
  v0[219] = __swift_project_value_buffer(v8, (uint64_t)static Log.device);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[220] = v9;
  v0[221] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v5, v4, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[215];
  uint64_t v14 = v0[206];
  uint64_t v15 = v0[205];
  if (v12)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v66 = (void *)swift_slowAlloc();
    uint64_t v68 = v66;
    *(_DWORD *)uint64_t v16 = 136446466;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t type = v11;
    v0[164] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    *(_WORD *)(v16 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[165] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v3, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v10, type, "Creating inference context for request %{public}s asset bundle %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v66, -1, -1);
    MEMORY[0x261206F80](v16, -1, -1);
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[215], v0[205]);
    swift_bridgeObjectRelease_n();
  }

  v0[222] = v19;
  uint64_t v20 = InferenceProviderRequestConfiguration.assetIdentifiers.getter();
  uint64_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v20);
  v0[223] = v21;
  swift_bridgeObjectRelease();
  char v22 = specialized Sequence<>.contains(_:)(0xD000000000000017, 0x800000025FB6C9E0, v21);
  uint64_t v23 = (void *)v0[168];
  if (v22)
  {
    swift_release();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v23 + 2), (uint64_t)(v0 + 47));
    __swift_project_boxed_opaque_existential_1(v0 + 47, v0[50]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_25FB62E70;
    __swift_project_boxed_opaque_existential_1(v23 + 7, v23[10]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    unint64_t v25 = v0[137];
    if (v25) {
      unint64_t v26 = v0[136];
    }
    else {
      unint64_t v26 = 0xD00000000000001DLL;
    }
    *(void *)(v24 + 32) = v26;
    if (v25) {
      unint64_t v27 = v25;
    }
    else {
      unint64_t v27 = 0x800000025FB6CA50;
    }
    *(void *)(v24 + 40) = v27;
    __swift_project_boxed_opaque_existential_1(v23 + 7, v23[10]);
    type metadata accessor for OnDeviceInferenceOverrides();
    Overridable.wrappedValue.getter();
    uint64_t v28 = v0[139];
    unint64_t v29 = 0xD00000000000001ALL;
    if (v28) {
      unint64_t v29 = v0[138];
    }
    unint64_t v30 = 0x800000025FB6CA70;
    if (v28) {
      unint64_t v30 = v0[139];
    }
    unint64_t v63 = v30;
    unint64_t v64 = v29;
    *(void *)(v24 + 48) = v29;
    *(void *)(v24 + 56) = v30;
    __swift_project_boxed_opaque_existential_1(v23 + 7, v23[10]);
    Overridable.wrappedValue.getter();
    uint64_t v31 = v0[141];
    if (v31) {
      unint64_t v32 = v0[140];
    }
    else {
      unint64_t v32 = 0xD000000000000022;
    }
    if (v31) {
      unint64_t v33 = v0[141];
    }
    else {
      unint64_t v33 = 0x800000025FB6CA90;
    }
    *(void *)(v24 + 64) = v32;
    *(void *)(v24 + 72) = v33;
    uint64_t v34 = self;
    swift_bridgeObjectRetain();
    id v67 = v34;
    id v35 = objc_msgSend(v34, sel_defaultManager);
    uint64_t v36 = (void *)MEMORY[0x2612053D0](v26, v27);
    unsigned __int8 v37 = objc_msgSend(v35, sel_fileExistsAtPath_, v36);

    if (v37)
    {
      unint64_t v62 = v32;
      uint64_t v68 = (void *)MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1);
      uint64_t v38 = (uint64_t)v68;
      unint64_t v40 = v68[2];
      unint64_t v39 = v68[3];
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        uint64_t v38 = (uint64_t)v68;
      }
      *(void *)(v38 + 16) = v40 + 1;
      uint64_t v41 = v38 + 16 * v40;
      *(void *)(v41 + 32) = v26;
      *(void *)(v41 + 40) = v27;
      unint64_t v32 = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRetain();
    id v46 = objc_msgSend(v67, sel_defaultManager);
    uint64_t v47 = (void *)MEMORY[0x2612053D0](v64, v63);
    unsigned int v48 = objc_msgSend(v46, sel_fileExistsAtPath_, v47);

    if (v48)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v68 = (void *)v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
        uint64_t v38 = (uint64_t)v68;
      }
      unint64_t v51 = *(void *)(v38 + 16);
      unint64_t v50 = *(void *)(v38 + 24);
      if (v51 >= v50 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
        uint64_t v38 = (uint64_t)v68;
      }
      *(void *)(v38 + 16) = v51 + 1;
      uint64_t v52 = v38 + 16 * v51;
      *(void *)(v52 + 32) = v64;
      *(void *)(v52 + 40) = v63;
      unint64_t v32 = *(void *)(v24 + 64);
      unint64_t v33 = *(void *)(v24 + 72);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    id v53 = objc_msgSend(v67, sel_defaultManager);
    uint64_t v54 = (void *)MEMORY[0x2612053D0](v32, v33);
    unsigned int v55 = objc_msgSend(v53, sel_fileExistsAtPath_, v54);

    if (v55)
    {
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v68 = (void *)v38;
      if ((v56 & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
        uint64_t v38 = (uint64_t)v68;
      }
      unint64_t v58 = *(void *)(v38 + 16);
      unint64_t v57 = *(void *)(v38 + 24);
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        uint64_t v38 = (uint64_t)v68;
      }
      *(void *)(v38 + 16) = v58 + 1;
      uint64_t v59 = v38 + 16 * v58;
      *(void *)(v59 + 32) = v32;
      *(void *)(v59 + 40) = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v0[224] = v38;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v60 = (void *)swift_task_alloc();
    v0[225] = v60;
    *uint64_t v60 = v0;
    v60[1] = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    uint64_t v43 = v0[203];
    uint64_t v44 = v0[167];
    uint64_t v45 = v38;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v23 + 2, v23[5]);
    uint64_t v42 = (void *)swift_task_alloc();
    v0[229] = v42;
    *uint64_t v42 = v0;
    v42[1] = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    uint64_t v43 = v0[200];
    uint64_t v44 = v0[167];
    uint64_t v45 = (uint64_t)v21;
  }
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKF(v45, v44, v43);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(uint64_t, void, uint64_t, uint64_t);
  unsigned int (**v9)(uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  void (*v70)(uint64_t, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  id v90;
  void *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (**v115)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v116)(uint64_t, uint64_t, uint64_t);
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  BOOL v144;
  void (*v145)(uint64_t, uint64_t);
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint8_t *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  Swift::String v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  void *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  long long *v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  void (*v214)(uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  NSObject *v220;
  os_log_type_t v221;
  BOOL v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  char v234;
  double v235;
  uint64_t v236;
  char v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  char v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  double *v260;
  double v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  NSObject *v265;
  os_log_type_t v266;
  BOOL v267;
  void (*v268)(uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  void (*v276)(uint64_t, uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  NSObject *v280;
  os_log_type_t v281;
  BOOL v282;
  void (*v283)(uint64_t, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint8_t *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  NSObject *v290;
  os_log_type_t v291;
  BOOL v292;
  void (*v293)(uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint8_t *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t *v311;
  long long *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void (*v316)(uint64_t, uint64_t, uint64_t);
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  NSObject *v322;
  os_log_type_t v323;
  BOOL v324;
  void (*v325)(uint64_t, uint64_t);
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  long long *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t (*v347)(uint64_t);
  uint64_t *v349;
  uint64_t v350;
  id v351;
  uint64_t v352;
  uint64_t v353;
  long long *v354;
  uint64_t v355;
  id v356;
  uint64_t v357;
  float *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(uint64_t, uint64_t);
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  os_log_type_t v366;
  uint64_t *v367;
  uint64_t *v368;
  long long *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned char *v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  unsigned int (**v397)(uint64_t, uint64_t, uint64_t);
  uint8_t *v398;
  uint64_t v399;
  uint64_t (**v400)(uint64_t, uint64_t, uint64_t);
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void (**v406)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v407;
  uint64_t v408;
  void *v409;
  void (*v410)(uint64_t, uint64_t);
  void (*v411)(uint64_t, uint64_t);
  long long v412;
  ValueMetadata *v413;
  _UNKNOWN **v414;
  void *v415;
  uint64_t v416;

  v415 = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 47));
  v385 = v0[226];
  uint64_t v1 = v0[131];
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = MEMORY[0x263F8EE78];
  v409 = v0;
  v386 = v2;
  v390 = v1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)(v0 + 2);
    uint64_t v5 = (uint64_t)(v0 + 7);
    uint64_t v6 = v0[191];
    uint64_t v7 = v1 + 32;
    uint64_t v8 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
    v402 = v6;
    uint64_t v9 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x263F8EE78];
    v397 = v9;
    do
    {
      os_log_type_t v11 = v10;
      BOOL v12 = v0[190];
      uint64_t v13 = v0[189];
      outlined init with copy of DeterministicLanguageModelProtocol(v7, v4);
      outlined init with copy of DeterministicLanguageModelProtocol(v4, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      uint64_t v14 = swift_dynamicCast();
      (*v8)(v13, v14 ^ 1u, 1, v12);
      __swift_destroy_boxed_opaque_existential_1(v4);
      if ((*v9)(v13, 1, v12) == 1)
      {
        outlined destroy of DataStreamState?(v0[189], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        uint64_t v10 = v11;
      }
      else
      {
        uint64_t v15 = v0[197];
        uint64_t v16 = v0[196];
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v0[189], v15, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v15, v16, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v17 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, v11);
        }
        uint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        uint64_t v20 = v17;
        if (v19 >= v18 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v17);
        }
        uint64_t v0 = v409;
        uint64_t v21 = v409[196];
        *(void *)(v20 + 16) = v19 + 1;
        uint64_t v10 = v20;
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v21, v20+ ((*(unsigned __int8 *)(v402 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v402 + 80))+ *(void *)(v402 + 72) * v19, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v9 = v397;
      }
      v7 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    unint64_t v3 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  char v22 = v0[195];
  *(void *)&v412 = v3;
  uint64_t v23 = *(void **)(v10 + 16);
  swift_bridgeObjectRetain();
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v22 + 8;
    unint64_t v26 = v0[191];
    unint64_t v27 = v0[190];
    uint64_t v28 = (uint64_t *)MEMORY[0x263F8EE78];
    v398 = (uint8_t *)v10;
    v403 = v25;
    do
    {
      if (v24 >= *(void *)(v10 + 16))
      {
        __break(1u);
        goto LABEL_101;
      }
      unint64_t v29 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      unint64_t v30 = *(void *)(v26 + 72);
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v10 + v29 + v30 * v24, v0[195], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v31 = v0[195];
      if (*(unsigned char *)(v25 + *(int *)(v27 + 32)) == 2)
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v31, v0[194], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1);
          uint64_t v28 = (uint64_t *)v412;
        }
        unint64_t v33 = v28[2];
        unint64_t v32 = v28[3];
        if (v33 >= v32 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          uint64_t v28 = (uint64_t *)v412;
        }
        uint64_t v0 = v409;
        uint64_t v34 = v409[194];
        v28[2] = v33 + 1;
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v34, (uint64_t)v28 + v29 + v33 * v30, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v10 = (unint64_t)v398;
        unint64_t v25 = v403;
      }
      else
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v31, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      ++v24;
    }
    while (v23 != (void *)v24);
    swift_bridgeObjectRelease();
    id v35 = v0[191];
    uint64_t v36 = v0[190];
    unsigned __int8 v37 = v10 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    uint64_t v38 = *(void *)(v35 + 72);
    swift_bridgeObjectRetain();
    unint64_t v39 = (void *)MEMORY[0x263F8EE78];
    v394 = v36;
    v396 = v28;
    v392 = v38;
    do
    {
      unint64_t v40 = v0[192];
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v37, v40, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v41 = v40 + *(int *)(v36 + 32);
      uint64_t v42 = *(unsigned __int8 *)(v41 + 8);
      uint64_t v43 = v0[192];
      if (v42 == 2)
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v0[192], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      else
      {
        uint64_t v44 = *(void *)v41;
        uint64_t v45 = *(unsigned __int8 *)(v41 + 36);
        id v46 = v36;
        uint64_t v47 = *(unsigned int *)(v41 + 32);
        unsigned int v48 = *(void *)(v41 + 24);
        v404 = *(void *)(v41 + 16);
        int v49 = *(void *)(v43 + *(int *)(v46 + 28));
        swift_retain();
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v43, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
        }
        unint64_t v50 = v39;
        unint64_t v51 = v39[2];
        uint64_t v52 = v50;
        id v53 = v50[3];
        if (v51 >= v53 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v51 + 1, 1, v52);
        }
        v52[2] = v51 + 1;
        uint64_t v54 = &v52[6 * v51];
        unint64_t v39 = v52;
        v54[4] = v49;
        v54[5] = v44;
        *((unsigned char *)v54 + 48) = v42 & 1;
        uint64_t v0 = v409;
        v54[7] = v404;
        *((_DWORD *)v54 + 16) = v48;
        *((unsigned char *)v54 + 68) = BYTE4(v48) & 1;
        *((unsigned char *)v54 + 69) = BYTE5(v48) & 1;
        *((unsigned char *)v54 + 70) = BYTE6(v48) & 1;
        *((_DWORD *)v54 + 18) = v47;
        *((unsigned char *)v54 + 76) = ((v47 | (unint64_t)(v45 << 32)) >> 32) & 1;
        uint64_t v36 = v394;
        uint64_t v28 = v396;
        uint64_t v38 = v392;
      }
      v37 += v38;
      uint64_t v23 = (void *)((char *)v23 - 1);
    }
    while (v23);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t *)MEMORY[0x263F8EE78];
    unint64_t v39 = (void *)MEMORY[0x263F8EE78];
  }
  if (v28[2])
  {
    unsigned int v55 = *(unsigned __int8 *)(v0[191] + 80);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0((uint64_t)v28 + ((v55 + 32) & ~v55), v0[188], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    char v56 = 0;
  }
  else
  {
    char v56 = 1;
  }
  v395 = (uint64_t)v39;
  unint64_t v57 = v0[191];
  unint64_t v58 = v0[190];
  uint64_t v59 = v0[188];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v59, v56, 1, v58);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v59, 1, v58) == 1)
  {
    uint64_t v60 = (void (*)(uint64_t, uint64_t, uint64_t))v0[220];
    uint64_t v61 = v0[216];
    unint64_t v62 = v409[207];
    unint64_t v63 = v409[205];
    unint64_t v64 = v409[188];
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v64, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    uint64_t v65 = v62;
    uint64_t v66 = v409;
    v60(v65, v61, v63);
    swift_bridgeObjectRetain_n();
    id v67 = Logger.logObject.getter();
    uint64_t v68 = static os_log_type_t.error.getter();
    uint64_t v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = (void (*)(uint64_t, uint64_t))v409[222];
    uint64_t v71 = v409[218];
    if (v69)
    {
      os_log_type_t v72 = v409[207];
      v399 = v409[217];
      uint64_t v73 = v409[205];
      uint64_t v74 = swift_slowAlloc();
      v405 = swift_slowAlloc();
      *(void *)&v412 = v405;
      *(_DWORD *)uint64_t v74 = 136446466;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      v409[163] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v412);
      uint64_t v66 = v409;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v70(v72, v73);
      *(_WORD *)(v74 + 12) = 2082;
      swift_bridgeObjectRetain();
      v409[162] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v399, v71, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v67, v68, "Failed to create inference context for request %{public}s, inference runner not loaded for asset bundle %{public}s", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v405, -1, -1);
      MEMORY[0x261206F80](v74, -1, -1);
    }
    else
    {
      v70(v409[207], v409[205]);
      swift_bridgeObjectRelease_n();
    }

    v410 = (void (*)(uint64_t, uint64_t))v66[222];
    *(void *)&v412 = 0;
    uint64_t v96 = (void *)v66[218];
    uint64_t v97 = v66[217];
    uint64_t v98 = v66[216];
    uint64_t v99 = v66;
    uint64_t v100 = v66[205];
    uint64_t v101 = v99[171];
    uint64_t v102 = v99[170];
    uint64_t v103 = v99[169];
    *((void *)&v412 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    *(void *)&v412 = 0xD000000000000022;
    *((void *)&v412 + 1) = 0x800000025FB6CA00;
    v104._countAndFlagsBits = v97;
    v104._object = v96;
    String.append(_:)(v104);
    swift_bridgeObjectRelease();
    v105._countAndFlagsBits = 0x20746F6E20736920;
    v105._object = (void *)0xEE00646564616F6CLL;
    String.append(_:)(v105);
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v106 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    uint64_t v107 = swift_allocError();
    char v109 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v108, v101, v103);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v106 - 8) + 104))(v109, *MEMORY[0x263F7F820], v106);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
    v410(v98, v100);
    goto LABEL_115;
  }
  uint64_t v77 = (void (*)(uint64_t, uint64_t))v0[222];
  uint64_t v78 = v0[214];
  uint64_t v79 = v0[205];
  Class v80 = v0[193];
  uint64_t v81 = v0[190];
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v0[188], v80, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  char v82 = UUID.uuidString.getter();
  uint64_t v84 = v83;
  v77(v78, v79);
  uint64_t v85 = *(int *)(v81 + 24);
  uint64_t v86 = v82;
  uint64_t v87 = *(id *)(v80 + v85);
  uint64_t v88 = (void *)MEMORY[0x2612053D0](v86, v84);
  objc_msgSend(v87, sel_enableTelemetryWithIdentifier_, v88);

  uint64_t v89 = v39[2];
  if (v89)
  {
    int v90 = *(id *)(v39[4] + 24);
    uint64_t v91 = (void *)MEMORY[0x2612053D0](v86, v84);
    objc_msgSend(v90, sel_enableTelemetryWithIdentifier_, v91);
  }
  swift_bridgeObjectRetain();
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.info.getter();
  v381 = v89;
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(void *)&v412 = v95;
    *(_DWORD *)uint64_t v94 = 136446210;
    swift_bridgeObjectRetain();
    v409[159] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v84, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v92, v93, "Setting E5Runner telemetry identifier to %{public}s", v94, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v95, -1, -1);
    MEMORY[0x261206F80](v94, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v110 = v409[185];
  uint64_t v111 = v409;
  if (v386)
  {
    uint64_t v112 = (uint64_t)(v409 + 22);
    v377 = (uint64_t)(v409 + 32);
    uint64_t v113 = v409[185];
    char v114 = v390 + 32;
    uint64_t v115 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56);
    int v116 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
    swift_bridgeObjectRetain();
    uint64_t v117 = 0;
    v406 = v115;
    v400 = v116;
    while (1)
    {
      uint64_t v118 = v111[184];
      uint64_t v119 = v111[182];
      outlined init with copy of DeterministicLanguageModelProtocol(v114, v112);
      outlined init with copy of DeterministicLanguageModelProtocol(v112, (uint64_t)(v409 + 27));
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      uint64_t v120 = swift_dynamicCast();
      char v121 = *v406;
      (*v406)(v119, v120 ^ 1u, 1, v118);
      __swift_destroy_boxed_opaque_existential_1(v112);
      swift_bridgeObjectRelease();
      uint64_t v122 = *v400;
      LODWORD(v119) = (*v400)(v119, 1, v118);
      uint64_t v123 = outlined destroy of DataStreamState?(v111[182], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      if (v119 != 1) {
        break;
      }
      ++v117;
      v114 += 40;
      uint64_t v111 = v409;
      if (v386 == v117)
      {
        uint64_t v110 = v409[185];
        goto LABEL_54;
      }
    }
    if (v117 >= *(void *)(v390 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v126 = v409;
      uint64_t v127 = v409[184];
      uint64_t v128 = v409[181];
      uint64_t v129 = v409[180];
      uint64_t v130 = v409[179];
      outlined init with copy of DeterministicLanguageModelProtocol(v114, v377);
      outlined init with copy of DeterministicLanguageModelProtocol(v377, (uint64_t)(v409 + 37));
      uint64_t v131 = swift_dynamicCast();
      v121(v129, v131 ^ 1u, 1, v127);
      __swift_destroy_boxed_opaque_existential_1(v377);
      outlined init with take of (key: Int, value: LogitCollection)?(v129, v128, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      outlined init with copy of (Int, LogitCollection)(v128, v130, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      uint64_t v123 = v122(v130, 1, v127);
      if (v123 != 1)
      {
        uint64_t v132 = v409[186];
        int v133 = v409[184];
        uint64_t v134 = v409[183];
        uint64_t v135 = v409[181];
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v409[179], v132, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
        outlined destroy of DataStreamState?(v135, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v132, v134, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
        v121(v134, 0, 1, v133);
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
    }
    __break(1u);
    return MEMORY[0x270FA2498](v123, v124, v125);
  }
  char v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
  swift_bridgeObjectRetain();
LABEL_54:
  v121(v111[183], 1, 1, v111[184]);
  swift_bridgeObjectRelease();
  uint64_t v126 = v111;
  uint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
LABEL_58:
  uint64_t v136 = v126[184];
  BOOL v137 = v126[183];
  if (v122(v137, 1, v136) == 1)
  {
    uint64_t v138 = (void (*)(uint64_t, uint64_t, uint64_t))v126[220];
    uint64_t v139 = v126[216];
    char v140 = v126[208];
    uint64_t v141 = v126[205];
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v137, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
    v138(v140, v139, v141);
    swift_bridgeObjectRetain_n();
    uint64_t v142 = Logger.logObject.getter();
    uint64_t v143 = static os_log_type_t.error.getter();
    uint64_t v144 = os_log_type_enabled(v142, v143);
    unint64_t v145 = (void (*)(uint64_t, uint64_t))v126[222];
    uint64_t v146 = v126[218];
    uint64_t v147 = v126;
    if (v144)
    {
      v401 = v126[217];
      uint64_t v148 = v126[208];
      uint64_t v149 = v126[205];
      uint64_t v150 = swift_slowAlloc();
      v407 = swift_slowAlloc();
      *(void *)&v412 = v407;
      *(_DWORD *)uint64_t v150 = 136446466;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
      v409[161] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, (uint64_t *)&v412);
      uint64_t v147 = v409;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v145(v148, v149);
      *(_WORD *)(v150 + 12) = 2082;
      swift_bridgeObjectRetain();
      v409[160] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v401, v146, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v142, v143, "Failed to create inference context for request %{public}s, tokenizer not loaded for asset bundle %{public}s", (uint8_t *)v150, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v407, -1, -1);
      MEMORY[0x261206F80](v150, -1, -1);
    }
    else
    {
      v145(v126[208], v126[205]);
      swift_bridgeObjectRelease_n();
    }

    v411 = (void (*)(uint64_t, uint64_t))v147[222];
    *(void *)&v412 = 0;
    uint64_t v155 = (void *)v147[218];
    uint64_t v156 = v147[217];
    uint64_t v157 = v147[216];
    uint64_t v99 = v147;
    uint64_t v158 = v147[205];
    uint64_t v159 = v99[193];
    uint64_t v160 = v99[171];
    char v161 = v99[170];
    char v162 = v99[169];
    *((void *)&v412 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(void *)&v412 = 0xD00000000000001CLL;
    *((void *)&v412 + 1) = 0x800000025FB6CA30;
    v163._countAndFlagsBits = v156;
    v163._object = v155;
    String.append(_:)(v163);
    swift_bridgeObjectRelease();
    v164._countAndFlagsBits = 0x20746F6E20736920;
    v164._object = (void *)0xEE00646564616F6CLL;
    String.append(_:)(v164);
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v165 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    uint64_t v107 = swift_allocError();
    uint64_t v167 = v166;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(v166, v160, v162);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v165 - 8) + 104))(v167, *MEMORY[0x263F7F820], v165);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v160, v162);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v159, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    v411(v157, v158);
    goto LABEL_115;
  }
  v387 = v126 + 143;
  uint64_t v153 = v126[187];
  swift_bridgeObjectRelease();
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v137, v153, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v371 = *(int *)(v136 + 24);
  v372 = v153;
  uint64_t v154 = *(uint8_t **)(v153 + v371);
  if (*(void *)(v153 + *(int *)(v136 + 32)))
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
  }
  uint64_t v168 = v126[193];
  v169 = v126[190];
  v383 = v126[178];
  uint64_t v170 = v126[168];
  uint64_t v171 = v126;
  v378 = v126[166];
  type metadata accessor for TokenIDToTextConverter();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v398 = v154;
  v375 = TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)();
  uint64_t v172 = *(void *)(v168 + *(int *)(v169 + 28));
  uint64_t v173 = (void *)(v170 + 56);
  v373 = v170;
  __swift_project_boxed_opaque_existential_1((void *)(v170 + 56), *(void *)(v170 + 80));
  type metadata accessor for OnDeviceInferenceOverrides();
  v408 = v172;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  Overridable.wrappedValue.getter();
  v391 = v126[144];
  uint64_t v174 = *((unsigned char *)v126 + 1160);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v378, v383, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  uint64_t v175 = v126[178];
  if (v174)
  {
    uint64_t v176 = SamplingParameters.promptLookupDraftSteps.getter();
    uint64_t v178 = v177;
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v175, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
    if (v178) {
      uint64_t v179 = 0;
    }
    else {
      uint64_t v179 = v176;
    }
    v391 = v179;
  }
  else
  {
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v126[178], (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  }
  v180 = (uint64_t)(v126 + 57);
  uint64_t v181 = (long long *)(v126 + 62);
  uint64_t v182 = (uint64_t)(v126 + 67);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v171[166], v171[177], (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  swift_retain_n();
  uint64_t v183 = Logger.logObject.getter();
  uint64_t v184 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v183, v184))
  {
    v366 = v184;
    v384 = v171 + 67;
    v185 = swift_slowAlloc();
    v364 = swift_slowAlloc();
    *(void *)&v412 = v364;
    *(_DWORD *)v185 = 136315650;
    __swift_project_boxed_opaque_existential_1(v173, *(void *)(v373 + 80));
    Overridable.wrappedValue.getter();
    v379 = v171 + 57;
    v369 = (long long *)(v171 + 62);
    if (*v387)
    {
      uint64_t v186 = 0xE300000000000000;
      uint64_t v187 = 7104878;
    }
    else
    {
      v171[158] = v171[142];
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v187 = BinaryInteger.description.getter();
      uint64_t v186 = v191;
    }
    uint64_t v192 = v171;
    v192[154] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v187, v186, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v185 + 12) = 2080;
    uint64_t v193 = SamplingParameters.promptLookupDraftSteps.getter();
    if (v194)
    {
      uint64_t v197 = 0xE300000000000000;
      uint64_t v198 = v381;
      uint64_t v199 = v364;
      uint64_t v195 = 7104878;
    }
    else
    {
      v171[157] = v193;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v195 = BinaryInteger.description.getter();
      uint64_t v197 = v196;
      uint64_t v198 = v381;
      uint64_t v199 = v364;
    }
    uint64_t v200 = v409[177];
    v409[155] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v195, v197, (uint64_t *)&v412);
    uint64_t v189 = v409;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v200, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
    *(_WORD *)(v185 + 22) = 2048;
    v409[156] = v391;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v183, v366, "inferenceOverrides.promptLookupDraftSteps = %s, request.parameters.promptLookupDraftSteps = %s, promptLookupDraftSteps = %ld", (uint8_t *)v185, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v199, -1, -1);
    MEMORY[0x261206F80](v185, -1, -1);

    uint64_t v182 = (uint64_t)v384;
    unint64_t v190 = v385;
    v180 = (uint64_t)v379;
    uint64_t v181 = v369;
    if (!v198) {
      goto LABEL_82;
    }
LABEL_76:
    v189[65] = type metadata accessor for E5TransformerLanguageModel();
    v189[66] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;
    v189[62] = v408;
    swift_retain();
    goto LABEL_83;
  }
  uint64_t v188 = v171[177];
  swift_release_n();
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v188, (uint64_t (*)(void))type metadata accessor for InferenceRequest);

  uint64_t v189 = v171;
  unint64_t v190 = v385;
  if (v381) {
    goto LABEL_76;
  }
LABEL_82:
  v201 = v189[216];
  v189[115] = type metadata accessor for E5TransformerLanguageModel();
  v189[116] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;
  v189[112] = v408;
  swift_retain();
  addPromptLookup #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)((uint64_t)(v189 + 112), v391, v201, v181);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v189 + 112));
LABEL_83:
  v202 = v189[193];
  uint64_t v203 = v189[168];
  v204 = v189[166];
  outlined init with take of LogitCollection(v181, v180);
  closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v204, v203, (uint64_t)v398, v202, v180, v182);
  uint64_t v205 = v180;
  if (v190)
  {
    uint64_t v107 = v190;
    v206 = (void (*)(uint64_t, uint64_t))v189[222];
    long long v207 = v189[216];
    long long v208 = v189[205];
    uint64_t v99 = v189;
    uint64_t v209 = v189[193];
    v210 = v99[187];
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v205);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v210, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v209, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    v206(v207, v208);
LABEL_115:
    v99[234] = v390;
    v99[233] = v107;
    v311 = __swift_project_boxed_opaque_existential_1((void *)(v99[168] + 16), *(void *)(v99[168] + 40));
    v99[235] = (uint64_t)v311;
    uint64_t v124 = *v311;
    uint64_t v123 = (uint64_t)OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    id v125 = 0;
    return MEMORY[0x270FA2498](v123, v124, v125);
  }
  v376 = v180;
  long long v211 = (uint64_t)(v189 + 72);
  uint64_t v212 = v189 + 150;
  v213 = v189 + 152;
  long long v214 = (void (*)(uint64_t, uint64_t, uint64_t))v189[220];
  long long v215 = v189[216];
  uint64_t v216 = v189[213];
  long long v217 = v409[205];
  outlined init with copy of DeterministicLanguageModelProtocol(v182, v211);
  long long v218 = v217;
  uint64_t v219 = v409;
  v214(v216, v215, v218);
  v220 = Logger.logObject.getter();
  v221 = static os_log_type_t.default.getter();
  v222 = os_log_type_enabled(v220, v221);
  v223 = (void (*)(uint64_t, uint64_t))v409[222];
  v224 = v409[213];
  v225 = v409[205];
  v380 = v213;
  v382 = v182;
  if (v222)
  {
    v226 = swift_slowAlloc();
    v370 = swift_slowAlloc();
    *(void *)&v412 = v370;
    *(_DWORD *)v226 = 136446466;
    outlined init with copy of DeterministicLanguageModelProtocol(v211, (uint64_t)(v409 + 117));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
    v227 = String.init<A>(describing:)();
    *uint64_t v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v227, v228, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v211);
    *(_WORD *)(v226 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v229 = dispatch thunk of CustomStringConvertible.description.getter();
    v409[151] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v229, v230, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v219 = v409;
    swift_bridgeObjectRelease();
    v223(v224, v225);
    _os_log_impl(&dword_25FA51000, v220, v221, "Using base language model %{public}s for request %{public}s", (uint8_t *)v226, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v370, -1, -1);
    MEMORY[0x261206F80](v226, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v211);
    v223(v224, v225);
  }

  v231 = v219[193];
  v232 = v219[190];
  v233 = COERCE_DOUBLE(SamplingParameters.temperature.getter());
  if (v234) {
    v235 = 1.0;
  }
  else {
    v235 = v233;
  }
  uint64_t v23 = (void *)swift_allocObject();
  unint64_t v27 = (uint64_t)(v23 + 2);
  v236 = SamplingParameters.randomSeed.getter();
  v238 = (uint64_t *)(v231 + *(int *)(v232 + 64));
  v239 = v238[1];
  if (!v239)
  {
    v243 = v236;
    v244 = v219;
    v245 = v237;
    v246 = v23 + 2;
    v368 = v238;
    v247 = v244[173];
    SamplingParameters.strategy.getter();
    v248 = type metadata accessor for SamplingStrategy();
    v249 = *(void *)(v248 - 8);
    v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248);
    v251 = v244[175];
    if (v250 == 1)
    {
      outlined destroy of DataStreamState?(v244[173], &demangling cache variable for type metadata for SamplingStrategy?);
      v252 = type metadata accessor for SamplingStrategy.Choice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 56))(v251, 1, 1, v252);
      unint64_t v27 = (uint64_t)(v23 + 2);
      goto LABEL_95;
    }
    v388 = v23;
    v255 = v244[174];
    v256 = v244[173];
    SamplingStrategy.choice.getter();
    (*(void (**)(uint64_t, uint64_t))(v249 + 8))(v256, v248);
    v257 = type metadata accessor for SamplingStrategy.Choice();
    v258 = *(void *)(v257 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v258 + 56))(v251, 0, 1, v257);
    outlined init with copy of (Int, LogitCollection)(v251, v255, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
    v259 = (*(uint64_t (**)(uint64_t, uint64_t))(v258 + 88))(v255, v257);
    if (v259 == *MEMORY[0x263F7F928])
    {
      v260 = (double *)v244[174];
      (*(void (**)(double *, uint64_t))(v258 + 96))(v260, v257);
      v261 = *v260;
      unint64_t v27 = (uint64_t)v246;
      if (v245) {
        v262 = 0;
      }
      else {
        v262 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
      }
      v413 = &type metadata for SeedableRandomNumberGenerator;
      v414 = (_UNKNOWN **)lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
      *(void *)&v412 = v262;
      v352 = type metadata accessor for NucleusSampling();
      swift_allocObject();
      v353 = NucleusSampling.init(p:temperature:generator:)(&v412, v261, v235);
      v254 = v409;
      v354 = (long long *)(v409 + 42);
      v355 = v409[175];
      v409[45] = v352;
      v409[46] = &protocol witness table for NucleusSampling;
      v409[42] = v353;
    }
    else
    {
      unint64_t v27 = (uint64_t)v246;
      if (v259 != *MEMORY[0x263F7F930])
      {
        v244 = v409;
        uint64_t v23 = v388;
        if (v259 != *MEMORY[0x263F7F938])
        {
          (*(void (**)(void, uint64_t))(v258 + 8))(v409[174], v257);
          if (v245) {
            v356 = 0;
          }
          else {
            v356 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
          }
          v254 = v409;
          v359 = v409[175];
          v409[15] = &type metadata for SeedableRandomNumberGenerator;
          v409[16] = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
          v409[12] = v356;
          v360 = type metadata accessor for GreedySampling();
          v361 = swift_allocObject();
          outlined init with take of LogitCollection((long long *)v409 + 6, v361 + 16);
          v388[5] = v360;
          v388[6] = &protocol witness table for GreedySampling;
          v388[2] = v361;
          outlined destroy of DataStreamState?(v359, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
          goto LABEL_103;
        }
LABEL_95:
        uint64_t v28 = v244 + 77;
        outlined destroy of DataStreamState?(v244[175], &demangling cache variable for type metadata for SamplingStrategy.Choice?);
        if (v245) {
LABEL_101:
        }
          v253 = 0;
        else {
          v253 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
        }
        v254 = v409;
        v409[80] = &type metadata for SeedableRandomNumberGenerator;
        v409[81] = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
        v409[77] = v253;
        v263 = type metadata accessor for GreedySampling();
        v264 = swift_allocObject();
        outlined init with take of LogitCollection((long long *)v28, v264 + 16);
        v23[5] = v263;
        v23[6] = &protocol witness table for GreedySampling;
        v23[2] = v264;
        goto LABEL_103;
      }
      v349 = (uint64_t *)v409[174];
      (*(void (**)(uint64_t *, uint64_t))(v258 + 96))(v349, v257);
      v350 = *v349;
      if (v245) {
        v351 = 0;
      }
      else {
        v351 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
      }
      v413 = &type metadata for SeedableRandomNumberGenerator;
      v414 = (_UNKNOWN **)lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
      *(void *)&v412 = v351;
      v357 = type metadata accessor for TopK();
      swift_allocObject();
      v358 = TopK.init(k:temperature:generator:)(v350, &v412, v235);
      v254 = v409;
      v354 = (long long *)(v409 + 17);
      v355 = v409[175];
      v409[20] = v357;
      v409[21] = &protocol witness table for TopK;
      v409[17] = v358;
    }
    outlined init with take of LogitCollection(v354, v27);
    outlined destroy of DataStreamState?(v355, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
    uint64_t v23 = v388;
    goto LABEL_103;
  }
  v240 = *v238;
  v241 = type metadata accessor for ClassificationSampling();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v242 = ClassificationSampling.init(defaultClass:outputClasses:)(v240, v239);
  v368 = v238;
  v254 = v409;
  v409[110] = v241;
  v409[111] = &protocol witness table for ClassificationSampling;
  v409[107] = v242;
  outlined init with take of LogitCollection((long long *)(v409 + 107), v27);
LABEL_103:
  ((void (*)(uint64_t, uint64_t, uint64_t))v254[220])(v254[212], v254[216], v254[205]);
  swift_retain_n();
  v265 = Logger.logObject.getter();
  v266 = static os_log_type_t.info.getter();
  v267 = os_log_type_enabled(v265, v266);
  v268 = (void (*)(uint64_t, uint64_t))v254[222];
  v374 = v254[212];
  v269 = v254[205];
  v389 = (uint64_t)v23;
  v367 = v254 + 148;
  if (v267)
  {
    v363 = v254 + 146;
    v270 = swift_slowAlloc();
    v365 = swift_slowAlloc();
    *(void *)&v412 = v365;
    *(_DWORD *)v270 = 136446466;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v27, (uint64_t)(v254 + 52));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenSampling);
    v271 = String.init<A>(describing:)();
    v254[147] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v271, v272, (uint64_t *)&v412);
    v254 = v409;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v270 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v273 = dispatch thunk of CustomStringConvertible.description.getter();
    *v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v273, v274, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v268(v374, v269);
    _os_log_impl(&dword_25FA51000, v265, v266, "Using sampling %{public}s for request %{public}s", (uint8_t *)v270, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v365, -1, -1);
    MEMORY[0x261206F80](v270, -1, -1);
  }
  else
  {
    swift_release_n();
    v268(v374, v269);
  }

  v275 = SamplingParameters.tokenHealing.getter();
  v276 = (void (*)(uint64_t, uint64_t, uint64_t))v254[220];
  v277 = v254[216];
  v278 = v254[205];
  if (v275)
  {
    v276(v254[211], v277, v278);
    v290 = Logger.logObject.getter();
    v291 = static os_log_type_t.default.getter();
    v292 = os_log_type_enabled(v290, v291);
    v293 = (void (*)(uint64_t, uint64_t))v254[222];
    v294 = v254[211];
    v295 = v254[205];
    if (v292)
    {
      v296 = (uint8_t *)swift_slowAlloc();
      v297 = swift_slowAlloc();
      *(void *)&v412 = v297;
      *(_DWORD *)v296 = 136446210;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      v298 = dispatch thunk of CustomStringConvertible.description.getter();
      *v367 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v299, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v293(v294, v295);
      _os_log_impl(&dword_25FA51000, v290, v291, "Using token healing for request %{public}s", v296, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v297, -1, -1);
      MEMORY[0x261206F80](v296, -1, -1);
    }
    else
    {
      v293(v254[211], v254[205]);
    }

    v301 = v409[216];
    v302 = v409[193];
    v303 = v409[176];
    v304 = v409[172];
    v305 = v409[168];
    v306 = v409[166];
    v307 = type metadata accessor for TokenizerRunnerPrefixMatchingTextProcessor();
    v308 = swift_allocObject();
    *(unsigned char *)(v308 + 32) = 1;
    *(void *)(v308 + 40) = 0;
    *(_WORD *)(v308 + 48) = 513;
    *(void *)(v308 + 16) = v398;
    *(void *)(v308 + 24) = 0;
    v413 = (ValueMetadata *)v307;
    v414 = &protocol witness table for TokenizerRunnerPrefixMatchingTextProcessor;
    *(void *)&v412 = v308;
    outlined init with copy of (Int, LogitCollection)(v306 + *(int *)(v303 + 24), v304, &demangling cache variable for type metadata for Constraints?);
    v309 = (void *)swift_task_alloc();
    v309[2] = v305;
    v309[3] = v302;
    v309[4] = v398;
    v309[5] = v301;
    v309[6] = v382;
    v309[7] = v389;
    v309[8] = v395;
    v309[9] = v391;
    v309[10] = v306;
    v310 = type metadata accessor for TokenHealingDecoder();
    swift_allocObject();
    swift_retain();
    v313 = TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)((uint64_t)&v412, v304, (void (*)(long long *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), unsigned char *))partial apply for buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
    v312 = (long long *)(v409 + 122);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v409[125] = v310;
    v409[126] = &protocol witness table for TokenHealingDecoder;
    v409[122] = v313;
    v300 = v409;
  }
  else
  {
    v279 = v254 + 87;
    v276(v254[210], v277, v278);
    v280 = Logger.logObject.getter();
    v281 = static os_log_type_t.default.getter();
    v282 = os_log_type_enabled(v280, v281);
    v283 = (void (*)(uint64_t, uint64_t))v254[222];
    v284 = v254[210];
    v285 = v254[205];
    if (v282)
    {
      v286 = (uint8_t *)swift_slowAlloc();
      v287 = swift_slowAlloc();
      *(void *)&v412 = v287;
      *(_DWORD *)v286 = 136446210;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      v288 = dispatch thunk of CustomStringConvertible.description.getter();
      v254[149] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v288, v289, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v283(v284, v285);
      _os_log_impl(&dword_25FA51000, v280, v281, "Not using token healing for request %{public}s", v286, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v287, -1, -1);
      MEMORY[0x261206F80](v286, -1, -1);
    }
    else
    {
      v283(v254[210], v254[205]);
    }

    v300 = v409;
    specialized buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v409[168], v409[193], v398, v409[216], v382, v389, v395, v391, v279, v409[166]);
    swift_bridgeObjectRelease();
    v312 = (long long *)v279;
  }
  v314 = (uint64_t)(v300 + 82);
  v315 = (uint64_t)(v300 + 92);
  outlined init with take of LogitCollection(v312, (uint64_t)(v300 + 82));
  v316 = (void (*)(uint64_t, uint64_t, uint64_t))v300[220];
  v317 = v300[216];
  v318 = v300[209];
  v319 = v409[205];
  outlined init with copy of DeterministicLanguageModelProtocol(v314, v315);
  v320 = v319;
  v321 = v409;
  v316(v318, v317, v320);
  v322 = Logger.logObject.getter();
  v323 = static os_log_type_t.info.getter();
  v324 = os_log_type_enabled(v322, v323);
  v325 = (void (*)(uint64_t, uint64_t))v409[222];
  v326 = v409[209];
  v327 = v409[205];
  if (v324)
  {
    v328 = swift_slowAlloc();
    v393 = swift_slowAlloc();
    *(void *)&v412 = v393;
    *(_DWORD *)v328 = 136446466;
    outlined init with copy of DeterministicLanguageModelProtocol(v315, (uint64_t)(v409 + 102));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingDecoder);
    v329 = String.init<A>(describing:)();
    v409[153] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v329, v330, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v315);
    *(_WORD *)(v328 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v331 = dispatch thunk of CustomStringConvertible.description.getter();
    *v380 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v331, v332, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v321 = v409;
    swift_bridgeObjectRelease();
    v325(v326, v327);
    _os_log_impl(&dword_25FA51000, v322, v323, "Using decoder %{public}s for request %{public}s", (uint8_t *)v328, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v393, -1, -1);
    MEMORY[0x261206F80](v328, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v315);
    v325(v326, v327);
  }

  v333 = v321;
  v334 = (long long *)(v321 + 97);
  v335 = v333[216];
  v362 = (void (*)(uint64_t, uint64_t))v333[222];
  v336 = v333[205];
  v337 = v333[193];
  v338 = v333[190];
  v339 = v333[187];
  outlined init with copy of DeterministicLanguageModelProtocol(v314, (uint64_t)v334);
  v340 = *(void *)(v372 + v371);
  swift_retain();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v314);
  __swift_destroy_boxed_opaque_existential_1(v376);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v339, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v341 = *(void *)(v337 + *(int *)(v338 + 36));
  v342 = *(void *)(v337 + *(int *)(v338 + 48));
  v344 = *v368;
  v343 = v368[1];
  type metadata accessor for OnDeviceInferenceContext();
  v345 = swift_allocObject();
  v346 = specialized OnDeviceInferenceContext.init(decoder:tokenizer:tokenIDToTextConverter:inferenceAssetObjects:specialTokensMap:localizationMetadata:classifierMetadata:)(v334, v340, v375, v390, v341, v342, v344, v343, v345);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v382);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v337, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  v362(v335, v336);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v347 = (uint64_t (*)(uint64_t))v333[1];
  return v347(v346);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[227];
  unint64_t v2 = (void (*)(uint64_t, uint64_t))v0[222];
  unint64_t v3 = v0[216];
  uint64_t v4 = v0[205];
  uint64_t v5 = v0[202];
  uint64_t v6 = v0[198];
  v1(v5, v0[204], v6);
  lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  uint64_t v7 = swift_allocError();
  v1(v8, v5, v6);
  v2(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 47));
  v0[234] = MEMORY[0x263F8EE78];
  v0[233] = v7;
  uint64_t v9 = __swift_project_boxed_opaque_existential_1((void *)(v0[168] + 16), *(void *)(v0[168] + 40));
  v0[235] = v9;
  uint64_t v10 = *v9;
  return MEMORY[0x270FA2498](OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), v10, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(uint64_t, void, uint64_t, uint64_t);
  unsigned int (**v9)(uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  void (*v70)(uint64_t, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  id v90;
  void *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (**v115)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v116)(uint64_t, uint64_t, uint64_t);
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  BOOL v144;
  void (*v145)(uint64_t, uint64_t);
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint8_t *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  Swift::String v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  void *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  long long *v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  void (*v214)(uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  NSObject *v220;
  os_log_type_t v221;
  BOOL v222;
  void (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  char v234;
  double v235;
  uint64_t v236;
  char v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  char v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  double *v260;
  double v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  NSObject *v265;
  os_log_type_t v266;
  BOOL v267;
  void (*v268)(uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  void (*v276)(void, uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  NSObject *v280;
  os_log_type_t v281;
  BOOL v282;
  void (*v283)(uint64_t, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint8_t *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  NSObject *v290;
  os_log_type_t v291;
  BOOL v292;
  void (*v293)(uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint8_t *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t *v311;
  long long *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void (*v316)(uint64_t, uint64_t, uint64_t);
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  NSObject *v322;
  os_log_type_t v323;
  BOOL v324;
  void (*v325)(uint64_t, uint64_t);
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  long long *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t (*v347)(uint64_t);
  uint64_t *v349;
  uint64_t v350;
  id v351;
  uint64_t v352;
  uint64_t v353;
  long long *v354;
  uint64_t v355;
  id v356;
  uint64_t v357;
  float *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(uint64_t, uint64_t);
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  os_log_type_t v366;
  uint64_t *v367;
  uint64_t *v368;
  long long *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned char *v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  unsigned int (**v397)(uint64_t, uint64_t, uint64_t);
  uint8_t *v398;
  uint64_t v399;
  uint64_t (**v400)(uint64_t, uint64_t, uint64_t);
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void (**v406)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  void (*v410)(uint64_t, uint64_t);
  void (*v411)(uint64_t, uint64_t);
  long long v412;
  ValueMetadata *v413;
  _UNKNOWN **v414;
  void *v415;
  uint64_t v416;

  v415 = v0;
  v385 = v0[230];
  uint64_t v1 = v0[134];
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = MEMORY[0x263F8EE78];
  v386 = v2;
  v390 = v1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)(v0 + 2);
    uint64_t v5 = (uint64_t)(v0 + 7);
    uint64_t v6 = v0[191];
    uint64_t v7 = v1 + 32;
    uint64_t v8 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
    v402 = v6;
    uint64_t v9 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x263F8EE78];
    v397 = v9;
    do
    {
      os_log_type_t v11 = v10;
      BOOL v12 = v0[190];
      uint64_t v13 = v0[189];
      outlined init with copy of DeterministicLanguageModelProtocol(v7, v4);
      outlined init with copy of DeterministicLanguageModelProtocol(v4, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      uint64_t v14 = swift_dynamicCast();
      (*v8)(v13, v14 ^ 1u, 1, v12);
      __swift_destroy_boxed_opaque_existential_1(v4);
      if ((*v9)(v13, 1, v12) == 1)
      {
        outlined destroy of DataStreamState?(v0[189], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        uint64_t v10 = v11;
      }
      else
      {
        uint64_t v15 = v0[197];
        uint64_t v16 = v0[196];
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v0[189], v15, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v15, v16, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v17 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, v11);
        }
        uint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        uint64_t v20 = v17;
        if (v19 >= v18 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v17);
        }
        uint64_t v0 = (void *)v409;
        uint64_t v21 = *(void *)(v409 + 1568);
        *(void *)(v20 + 16) = v19 + 1;
        uint64_t v10 = v20;
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v21, v20+ ((*(unsigned __int8 *)(v402 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v402 + 80))+ *(void *)(v402 + 72) * v19, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v9 = v397;
      }
      v7 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    unint64_t v3 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  char v22 = v0[195];
  *(void *)&v412 = v3;
  uint64_t v23 = *(void **)(v10 + 16);
  swift_bridgeObjectRetain();
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v22 + 8;
    unint64_t v26 = v0[191];
    unint64_t v27 = v0[190];
    uint64_t v28 = (uint64_t *)MEMORY[0x263F8EE78];
    v398 = (uint8_t *)v10;
    v403 = v25;
    do
    {
      if (v24 >= *(void *)(v10 + 16))
      {
        __break(1u);
        goto LABEL_101;
      }
      unint64_t v29 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      unint64_t v30 = *(void *)(v26 + 72);
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v10 + v29 + v30 * v24, v0[195], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v31 = v0[195];
      if (*(unsigned char *)(v25 + *(int *)(v27 + 32)) == 2)
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v31, v0[194], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1);
          uint64_t v28 = (uint64_t *)v412;
        }
        unint64_t v33 = v28[2];
        unint64_t v32 = v28[3];
        if (v33 >= v32 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          uint64_t v28 = (uint64_t *)v412;
        }
        uint64_t v0 = (void *)v409;
        uint64_t v34 = *(void *)(v409 + 1552);
        v28[2] = v33 + 1;
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v34, (uint64_t)v28 + v29 + v33 * v30, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v10 = (unint64_t)v398;
        unint64_t v25 = v403;
      }
      else
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v31, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      ++v24;
    }
    while (v23 != (void *)v24);
    swift_bridgeObjectRelease();
    id v35 = v0[191];
    uint64_t v36 = v0[190];
    unsigned __int8 v37 = v10 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    uint64_t v38 = *(void *)(v35 + 72);
    swift_bridgeObjectRetain();
    unint64_t v39 = (void *)MEMORY[0x263F8EE78];
    v394 = v36;
    v396 = v28;
    v392 = v38;
    do
    {
      unint64_t v40 = v0[192];
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v37, v40, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      uint64_t v41 = v40 + *(int *)(v36 + 32);
      uint64_t v42 = *(unsigned __int8 *)(v41 + 8);
      uint64_t v43 = v0[192];
      if (v42 == 2)
      {
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v0[192], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      else
      {
        uint64_t v44 = *(void *)v41;
        uint64_t v45 = *(unsigned __int8 *)(v41 + 36);
        id v46 = v36;
        uint64_t v47 = *(unsigned int *)(v41 + 32);
        unsigned int v48 = *(void *)(v41 + 24);
        v404 = *(void *)(v41 + 16);
        int v49 = *(void *)(v43 + *(int *)(v46 + 28));
        swift_retain();
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v43, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
        }
        unint64_t v50 = v39;
        unint64_t v51 = v39[2];
        uint64_t v52 = v50;
        id v53 = v50[3];
        if (v51 >= v53 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v51 + 1, 1, v52);
        }
        v52[2] = v51 + 1;
        uint64_t v54 = &v52[6 * v51];
        unint64_t v39 = v52;
        v54[4] = v49;
        v54[5] = v44;
        *((unsigned char *)v54 + 48) = v42 & 1;
        uint64_t v0 = (void *)v409;
        v54[7] = v404;
        *((_DWORD *)v54 + 16) = v48;
        *((unsigned char *)v54 + 68) = BYTE4(v48) & 1;
        *((unsigned char *)v54 + 69) = BYTE5(v48) & 1;
        *((unsigned char *)v54 + 70) = BYTE6(v48) & 1;
        *((_DWORD *)v54 + 18) = v47;
        *((unsigned char *)v54 + 76) = ((v47 | (unint64_t)(v45 << 32)) >> 32) & 1;
        uint64_t v36 = v394;
        uint64_t v28 = v396;
        uint64_t v38 = v392;
      }
      v37 += v38;
      uint64_t v23 = (void *)((char *)v23 - 1);
    }
    while (v23);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t *)MEMORY[0x263F8EE78];
    unint64_t v39 = (void *)MEMORY[0x263F8EE78];
  }
  if (v28[2])
  {
    unsigned int v55 = *(unsigned __int8 *)(v0[191] + 80);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0((uint64_t)v28 + ((v55 + 32) & ~v55), v0[188], type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    char v56 = 0;
  }
  else
  {
    char v56 = 1;
  }
  v395 = (uint64_t)v39;
  unint64_t v57 = v0[191];
  unint64_t v58 = v0[190];
  uint64_t v59 = v0[188];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v59, v56, 1, v58);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v59, 1, v58) == 1)
  {
    uint64_t v60 = (void (*)(uint64_t, uint64_t, uint64_t))v0[220];
    uint64_t v61 = v0[216];
    unint64_t v62 = *(void *)(v409 + 1656);
    unint64_t v63 = *(void *)(v409 + 1640);
    unint64_t v64 = *(void *)(v409 + 1504);
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v64, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    uint64_t v65 = v62;
    uint64_t v66 = (uint64_t *)v409;
    v60(v65, v61, v63);
    swift_bridgeObjectRetain_n();
    id v67 = Logger.logObject.getter();
    uint64_t v68 = static os_log_type_t.error.getter();
    uint64_t v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v409 + 1776);
    uint64_t v71 = *(void *)(v409 + 1744);
    if (v69)
    {
      os_log_type_t v72 = *(void *)(v409 + 1656);
      v399 = *(void *)(v409 + 1736);
      uint64_t v73 = *(void *)(v409 + 1640);
      uint64_t v74 = swift_slowAlloc();
      v405 = swift_slowAlloc();
      *(void *)&v412 = v405;
      *(_DWORD *)uint64_t v74 = 136446466;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v409 + 1304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v412);
      uint64_t v66 = (uint64_t *)v409;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v70(v72, v73);
      *(_WORD *)(v74 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v409 + 1296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v399, v71, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v67, v68, "Failed to create inference context for request %{public}s, inference runner not loaded for asset bundle %{public}s", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v405, -1, -1);
      MEMORY[0x261206F80](v74, -1, -1);
    }
    else
    {
      v70(*(void *)(v409 + 1656), *(void *)(v409 + 1640));
      swift_bridgeObjectRelease_n();
    }

    v410 = (void (*)(uint64_t, uint64_t))v66[222];
    *(void *)&v412 = 0;
    uint64_t v96 = (void *)v66[218];
    uint64_t v97 = v66[217];
    uint64_t v98 = v66[216];
    uint64_t v99 = v66;
    uint64_t v100 = v66[205];
    uint64_t v101 = v99[171];
    uint64_t v102 = v99[170];
    uint64_t v103 = v99[169];
    *((void *)&v412 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    *(void *)&v412 = 0xD000000000000022;
    *((void *)&v412 + 1) = 0x800000025FB6CA00;
    v104._countAndFlagsBits = v97;
    v104._object = v96;
    String.append(_:)(v104);
    swift_bridgeObjectRelease();
    v105._countAndFlagsBits = 0x20746F6E20736920;
    v105._object = (void *)0xEE00646564616F6CLL;
    String.append(_:)(v105);
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v106 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    uint64_t v107 = swift_allocError();
    char v109 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v108, v101, v103);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v106 - 8) + 104))(v109, *MEMORY[0x263F7F820], v106);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
    v410(v98, v100);
    goto LABEL_115;
  }
  uint64_t v77 = (void (*)(uint64_t, uint64_t))v0[222];
  uint64_t v78 = v0[214];
  uint64_t v79 = v0[205];
  Class v80 = v0[193];
  uint64_t v81 = v0[190];
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v0[188], v80, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  char v82 = UUID.uuidString.getter();
  uint64_t v84 = v83;
  v77(v78, v79);
  uint64_t v85 = *(int *)(v81 + 24);
  uint64_t v86 = v82;
  uint64_t v87 = *(id *)(v80 + v85);
  uint64_t v88 = (void *)MEMORY[0x2612053D0](v86, v84);
  objc_msgSend(v87, sel_enableTelemetryWithIdentifier_, v88);

  uint64_t v89 = v39[2];
  if (v89)
  {
    int v90 = *(id *)(v39[4] + 24);
    uint64_t v91 = (void *)MEMORY[0x2612053D0](v86, v84);
    objc_msgSend(v90, sel_enableTelemetryWithIdentifier_, v91);
  }
  swift_bridgeObjectRetain();
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.info.getter();
  v381 = v89;
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(void *)&v412 = v95;
    *(_DWORD *)uint64_t v94 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v409 + 1272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v84, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v92, v93, "Setting E5Runner telemetry identifier to %{public}s", v94, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v95, -1, -1);
    MEMORY[0x261206F80](v94, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v110 = *(void *)(v409 + 1480);
  uint64_t v111 = (uint64_t *)v409;
  if (v386)
  {
    uint64_t v112 = v409 + 176;
    v377 = v409 + 256;
    uint64_t v113 = *(void *)(v409 + 1480);
    char v114 = v390 + 32;
    uint64_t v115 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56);
    int v116 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
    swift_bridgeObjectRetain();
    uint64_t v117 = 0;
    v406 = v115;
    v400 = v116;
    while (1)
    {
      uint64_t v118 = v111[184];
      uint64_t v119 = v111[182];
      outlined init with copy of DeterministicLanguageModelProtocol(v114, v112);
      outlined init with copy of DeterministicLanguageModelProtocol(v112, v409 + 216);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      uint64_t v120 = swift_dynamicCast();
      char v121 = *v406;
      (*v406)(v119, v120 ^ 1u, 1, v118);
      __swift_destroy_boxed_opaque_existential_1(v112);
      swift_bridgeObjectRelease();
      uint64_t v122 = *v400;
      LODWORD(v119) = (*v400)(v119, 1, v118);
      uint64_t v123 = outlined destroy of DataStreamState?(v111[182], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      if (v119 != 1) {
        break;
      }
      ++v117;
      v114 += 40;
      uint64_t v111 = (uint64_t *)v409;
      if (v386 == v117)
      {
        uint64_t v110 = *(void *)(v409 + 1480);
        goto LABEL_54;
      }
    }
    if (v117 >= *(void *)(v390 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v126 = (uint64_t *)v409;
      uint64_t v127 = *(void *)(v409 + 1472);
      uint64_t v128 = *(void *)(v409 + 1448);
      uint64_t v129 = *(void *)(v409 + 1440);
      uint64_t v130 = *(void *)(v409 + 1432);
      outlined init with copy of DeterministicLanguageModelProtocol(v114, v377);
      outlined init with copy of DeterministicLanguageModelProtocol(v377, v409 + 296);
      uint64_t v131 = swift_dynamicCast();
      v121(v129, v131 ^ 1u, 1, v127);
      __swift_destroy_boxed_opaque_existential_1(v377);
      outlined init with take of (key: Int, value: LogitCollection)?(v129, v128, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      outlined init with copy of (Int, LogitCollection)(v128, v130, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
      uint64_t v123 = v122(v130, 1, v127);
      if (v123 != 1)
      {
        uint64_t v132 = *(void *)(v409 + 1488);
        int v133 = *(void *)(v409 + 1472);
        uint64_t v134 = *(void *)(v409 + 1464);
        uint64_t v135 = *(void *)(v409 + 1448);
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(*(void *)(v409 + 1432), v132, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
        outlined destroy of DataStreamState?(v135, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
        _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v132, v134, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
        v121(v134, 0, 1, v133);
        swift_bridgeObjectRelease();
        goto LABEL_58;
      }
    }
    __break(1u);
    return MEMORY[0x270FA2498](v123, v124, v125);
  }
  char v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
  swift_bridgeObjectRetain();
LABEL_54:
  v121(v111[183], 1, 1, v111[184]);
  swift_bridgeObjectRelease();
  uint64_t v126 = v111;
  uint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
LABEL_58:
  uint64_t v136 = v126[184];
  BOOL v137 = v126[183];
  if (v122(v137, 1, v136) == 1)
  {
    uint64_t v138 = (void (*)(uint64_t, uint64_t, uint64_t))v126[220];
    uint64_t v139 = v126[216];
    char v140 = v126[208];
    uint64_t v141 = v126[205];
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v137, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
    v138(v140, v139, v141);
    swift_bridgeObjectRetain_n();
    uint64_t v142 = Logger.logObject.getter();
    uint64_t v143 = static os_log_type_t.error.getter();
    uint64_t v144 = os_log_type_enabled(v142, v143);
    unint64_t v145 = (void (*)(uint64_t, uint64_t))v126[222];
    uint64_t v146 = v126[218];
    uint64_t v147 = v126;
    if (v144)
    {
      v401 = v126[217];
      uint64_t v148 = v126[208];
      uint64_t v149 = v126[205];
      uint64_t v150 = swift_slowAlloc();
      v407 = swift_slowAlloc();
      *(void *)&v412 = v407;
      *(_DWORD *)uint64_t v150 = 136446466;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v409 + 1288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, (uint64_t *)&v412);
      uint64_t v147 = (uint64_t *)v409;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v145(v148, v149);
      *(_WORD *)(v150 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v409 + 1280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v401, v146, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v142, v143, "Failed to create inference context for request %{public}s, tokenizer not loaded for asset bundle %{public}s", (uint8_t *)v150, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v407, -1, -1);
      MEMORY[0x261206F80](v150, -1, -1);
    }
    else
    {
      v145(v126[208], v126[205]);
      swift_bridgeObjectRelease_n();
    }

    v411 = (void (*)(uint64_t, uint64_t))v147[222];
    *(void *)&v412 = 0;
    uint64_t v155 = (void *)v147[218];
    uint64_t v156 = v147[217];
    uint64_t v157 = v147[216];
    uint64_t v99 = v147;
    uint64_t v158 = v147[205];
    uint64_t v159 = v99[193];
    uint64_t v160 = v99[171];
    char v161 = v99[170];
    char v162 = v99[169];
    *((void *)&v412 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(void *)&v412 = 0xD00000000000001CLL;
    *((void *)&v412 + 1) = 0x800000025FB6CA30;
    v163._countAndFlagsBits = v156;
    v163._object = v155;
    String.append(_:)(v163);
    swift_bridgeObjectRelease();
    v164._countAndFlagsBits = 0x20746F6E20736920;
    v164._object = (void *)0xEE00646564616F6CLL;
    String.append(_:)(v164);
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    uint64_t v165 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    uint64_t v107 = swift_allocError();
    uint64_t v167 = v166;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(v166, v160, v162);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v165 - 8) + 104))(v167, *MEMORY[0x263F7F820], v165);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v160, v162);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v159, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    v411(v157, v158);
    goto LABEL_115;
  }
  v387 = v126 + 143;
  uint64_t v153 = v126[187];
  swift_bridgeObjectRelease();
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(v137, v153, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v371 = *(int *)(v136 + 24);
  v372 = v153;
  uint64_t v154 = *(uint8_t **)(v153 + v371);
  if (*(void *)(v153 + *(int *)(v136 + 32)))
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
  }
  uint64_t v168 = v126[193];
  v169 = v126[190];
  v383 = v126[178];
  uint64_t v170 = v126[168];
  uint64_t v171 = v126;
  v378 = v126[166];
  type metadata accessor for TokenIDToTextConverter();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v398 = v154;
  v375 = TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)();
  uint64_t v172 = *(void *)(v168 + *(int *)(v169 + 28));
  uint64_t v173 = (void *)(v170 + 56);
  v373 = v170;
  __swift_project_boxed_opaque_existential_1((void *)(v170 + 56), *(void *)(v170 + 80));
  type metadata accessor for OnDeviceInferenceOverrides();
  v408 = v172;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  Overridable.wrappedValue.getter();
  v391 = v126[144];
  uint64_t v174 = *((unsigned char *)v126 + 1160);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v378, v383, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  uint64_t v175 = v126[178];
  if (v174)
  {
    uint64_t v176 = SamplingParameters.promptLookupDraftSteps.getter();
    uint64_t v178 = v177;
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v175, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
    if (v178) {
      uint64_t v179 = 0;
    }
    else {
      uint64_t v179 = v176;
    }
    v391 = v179;
  }
  else
  {
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v126[178], (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  }
  v180 = (uint64_t)(v126 + 57);
  uint64_t v181 = (long long *)(v126 + 62);
  uint64_t v182 = (uint64_t)(v126 + 67);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v171[166], v171[177], (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  swift_retain_n();
  uint64_t v183 = Logger.logObject.getter();
  uint64_t v184 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v183, v184))
  {
    v366 = v184;
    v384 = v171 + 67;
    v185 = swift_slowAlloc();
    v364 = swift_slowAlloc();
    *(void *)&v412 = v364;
    *(_DWORD *)v185 = 136315650;
    __swift_project_boxed_opaque_existential_1(v173, *(void *)(v373 + 80));
    Overridable.wrappedValue.getter();
    v379 = v171 + 57;
    v369 = (long long *)(v171 + 62);
    if (*v387)
    {
      uint64_t v186 = 0xE300000000000000;
      uint64_t v187 = 7104878;
    }
    else
    {
      v171[158] = v171[142];
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v187 = BinaryInteger.description.getter();
      uint64_t v186 = v191;
    }
    uint64_t v192 = v171;
    v192[154] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v187, v186, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v185 + 12) = 2080;
    uint64_t v193 = SamplingParameters.promptLookupDraftSteps.getter();
    if (v194)
    {
      uint64_t v197 = 0xE300000000000000;
      uint64_t v198 = v381;
      uint64_t v199 = v364;
      uint64_t v195 = 7104878;
    }
    else
    {
      v171[157] = v193;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v195 = BinaryInteger.description.getter();
      uint64_t v197 = v196;
      uint64_t v198 = v381;
      uint64_t v199 = v364;
    }
    uint64_t v200 = *(void *)(v409 + 1416);
    *(void *)(v409 + 1240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v195, v197, (uint64_t *)&v412);
    uint64_t v189 = (uint64_t *)v409;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v200, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
    *(_WORD *)(v185 + 22) = 2048;
    *(void *)(v409 + 1248) = v391;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v183, v366, "inferenceOverrides.promptLookupDraftSteps = %s, request.parameters.promptLookupDraftSteps = %s, promptLookupDraftSteps = %ld", (uint8_t *)v185, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v199, -1, -1);
    MEMORY[0x261206F80](v185, -1, -1);

    uint64_t v182 = (uint64_t)v384;
    unint64_t v190 = v385;
    v180 = (uint64_t)v379;
    uint64_t v181 = v369;
    if (!v198) {
      goto LABEL_82;
    }
LABEL_76:
    v189[65] = type metadata accessor for E5TransformerLanguageModel();
    v189[66] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;
    v189[62] = v408;
    swift_retain();
    goto LABEL_83;
  }
  uint64_t v188 = v171[177];
  swift_release_n();
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v188, (uint64_t (*)(void))type metadata accessor for InferenceRequest);

  uint64_t v189 = v171;
  unint64_t v190 = v385;
  if (v381) {
    goto LABEL_76;
  }
LABEL_82:
  v201 = v189[216];
  v189[115] = type metadata accessor for E5TransformerLanguageModel();
  v189[116] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;
  v189[112] = v408;
  swift_retain();
  addPromptLookup #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)((uint64_t)(v189 + 112), v391, v201, v181);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v189 + 112));
LABEL_83:
  v202 = v189[193];
  uint64_t v203 = v189[168];
  v204 = v189[166];
  outlined init with take of LogitCollection(v181, v180);
  closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v204, v203, (uint64_t)v398, v202, v180, v182);
  uint64_t v205 = v180;
  if (v190)
  {
    uint64_t v107 = v190;
    v206 = (void (*)(uint64_t, uint64_t))v189[222];
    long long v207 = v189[216];
    long long v208 = v189[205];
    uint64_t v99 = v189;
    uint64_t v209 = v189[193];
    v210 = v99[187];
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v205);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v210, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v209, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    v206(v207, v208);
LABEL_115:
    v99[234] = v390;
    v99[233] = v107;
    v311 = __swift_project_boxed_opaque_existential_1((void *)(v99[168] + 16), *(void *)(v99[168] + 40));
    v99[235] = (uint64_t)v311;
    uint64_t v124 = *v311;
    uint64_t v123 = (uint64_t)OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    id v125 = 0;
    return MEMORY[0x270FA2498](v123, v124, v125);
  }
  v376 = v180;
  long long v211 = (uint64_t)(v189 + 72);
  uint64_t v212 = v189 + 150;
  v213 = v189 + 152;
  long long v214 = (void (*)(uint64_t, uint64_t, uint64_t))v189[220];
  long long v215 = v189[216];
  uint64_t v216 = v189[213];
  long long v217 = *(void *)(v409 + 1640);
  outlined init with copy of DeterministicLanguageModelProtocol(v182, v211);
  long long v218 = v217;
  uint64_t v219 = (uint64_t *)v409;
  v214(v216, v215, v218);
  v220 = Logger.logObject.getter();
  v221 = static os_log_type_t.default.getter();
  v222 = os_log_type_enabled(v220, v221);
  v223 = *(void (**)(uint64_t, uint64_t))(v409 + 1776);
  v224 = *(void *)(v409 + 1704);
  v225 = *(void *)(v409 + 1640);
  v380 = v213;
  v382 = v182;
  if (v222)
  {
    v226 = swift_slowAlloc();
    v370 = swift_slowAlloc();
    *(void *)&v412 = v370;
    *(_DWORD *)v226 = 136446466;
    outlined init with copy of DeterministicLanguageModelProtocol(v211, v409 + 936);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
    v227 = String.init<A>(describing:)();
    *uint64_t v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v227, v228, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v211);
    *(_WORD *)(v226 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v229 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v409 + 1208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v229, v230, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v219 = (uint64_t *)v409;
    swift_bridgeObjectRelease();
    v223(v224, v225);
    _os_log_impl(&dword_25FA51000, v220, v221, "Using base language model %{public}s for request %{public}s", (uint8_t *)v226, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v370, -1, -1);
    MEMORY[0x261206F80](v226, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v211);
    v223(v224, v225);
  }

  v231 = v219[193];
  v232 = v219[190];
  v233 = COERCE_DOUBLE(SamplingParameters.temperature.getter());
  if (v234) {
    v235 = 1.0;
  }
  else {
    v235 = v233;
  }
  uint64_t v23 = (void *)swift_allocObject();
  unint64_t v27 = (uint64_t)(v23 + 2);
  v236 = SamplingParameters.randomSeed.getter();
  v238 = (uint64_t *)(v231 + *(int *)(v232 + 64));
  v239 = v238[1];
  if (!v239)
  {
    v243 = v236;
    v244 = v219;
    v245 = v237;
    v246 = v23 + 2;
    v368 = v238;
    v247 = v244[173];
    SamplingParameters.strategy.getter();
    v248 = type metadata accessor for SamplingStrategy();
    v249 = *(void *)(v248 - 8);
    v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248);
    v251 = v244[175];
    if (v250 == 1)
    {
      outlined destroy of DataStreamState?(v244[173], &demangling cache variable for type metadata for SamplingStrategy?);
      v252 = type metadata accessor for SamplingStrategy.Choice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 56))(v251, 1, 1, v252);
      unint64_t v27 = (uint64_t)(v23 + 2);
      goto LABEL_95;
    }
    v388 = v23;
    v255 = v244[174];
    v256 = v244[173];
    SamplingStrategy.choice.getter();
    (*(void (**)(uint64_t, uint64_t))(v249 + 8))(v256, v248);
    v257 = type metadata accessor for SamplingStrategy.Choice();
    v258 = *(void *)(v257 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v258 + 56))(v251, 0, 1, v257);
    outlined init with copy of (Int, LogitCollection)(v251, v255, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
    v259 = (*(uint64_t (**)(uint64_t, uint64_t))(v258 + 88))(v255, v257);
    if (v259 == *MEMORY[0x263F7F928])
    {
      v260 = (double *)v244[174];
      (*(void (**)(double *, uint64_t))(v258 + 96))(v260, v257);
      v261 = *v260;
      unint64_t v27 = (uint64_t)v246;
      if (v245) {
        v262 = 0;
      }
      else {
        v262 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
      }
      v413 = &type metadata for SeedableRandomNumberGenerator;
      v414 = (_UNKNOWN **)lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
      *(void *)&v412 = v262;
      v352 = type metadata accessor for NucleusSampling();
      swift_allocObject();
      v353 = NucleusSampling.init(p:temperature:generator:)(&v412, v261, v235);
      v254 = v409;
      v354 = (long long *)(v409 + 336);
      v355 = *(void *)(v409 + 1400);
      *(void *)(v409 + 360) = v352;
      *(void *)(v409 + 368) = &protocol witness table for NucleusSampling;
      *(void *)(v409 + 336) = v353;
    }
    else
    {
      unint64_t v27 = (uint64_t)v246;
      if (v259 != *MEMORY[0x263F7F930])
      {
        v244 = (uint64_t *)v409;
        uint64_t v23 = v388;
        if (v259 != *MEMORY[0x263F7F938])
        {
          (*(void (**)(void, uint64_t))(v258 + 8))(*(void *)(v409 + 1392), v257);
          if (v245) {
            v356 = 0;
          }
          else {
            v356 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
          }
          v254 = v409;
          v359 = *(void *)(v409 + 1400);
          *(void *)(v409 + 120) = &type metadata for SeedableRandomNumberGenerator;
          *(void *)(v409 + 128) = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
          *(void *)(v409 + 96) = v356;
          v360 = type metadata accessor for GreedySampling();
          v361 = swift_allocObject();
          outlined init with take of LogitCollection((long long *)(v409 + 96), v361 + 16);
          v388[5] = v360;
          v388[6] = &protocol witness table for GreedySampling;
          v388[2] = v361;
          outlined destroy of DataStreamState?(v359, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
          goto LABEL_103;
        }
LABEL_95:
        uint64_t v28 = v244 + 77;
        outlined destroy of DataStreamState?(v244[175], &demangling cache variable for type metadata for SamplingStrategy.Choice?);
        if (v245) {
LABEL_101:
        }
          v253 = 0;
        else {
          v253 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
        }
        v254 = v409;
        *(void *)(v409 + 640) = &type metadata for SeedableRandomNumberGenerator;
        *(void *)(v409 + 648) = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
        *(void *)(v409 + 616) = v253;
        v263 = type metadata accessor for GreedySampling();
        v264 = swift_allocObject();
        outlined init with take of LogitCollection((long long *)v28, v264 + 16);
        v23[5] = v263;
        v23[6] = &protocol witness table for GreedySampling;
        v23[2] = v264;
        goto LABEL_103;
      }
      v349 = *(uint64_t **)(v409 + 1392);
      (*(void (**)(uint64_t *, uint64_t))(v258 + 96))(v349, v257);
      v350 = *v349;
      if (v245) {
        v351 = 0;
      }
      else {
        v351 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, v243);
      }
      v413 = &type metadata for SeedableRandomNumberGenerator;
      v414 = (_UNKNOWN **)lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
      *(void *)&v412 = v351;
      v357 = type metadata accessor for TopK();
      swift_allocObject();
      v358 = TopK.init(k:temperature:generator:)(v350, &v412, v235);
      v254 = v409;
      v354 = (long long *)(v409 + 136);
      v355 = *(void *)(v409 + 1400);
      *(void *)(v409 + 160) = v357;
      *(void *)(v409 + 168) = &protocol witness table for TopK;
      *(void *)(v409 + 136) = v358;
    }
    outlined init with take of LogitCollection(v354, v27);
    outlined destroy of DataStreamState?(v355, &demangling cache variable for type metadata for SamplingStrategy.Choice?);
    uint64_t v23 = v388;
    goto LABEL_103;
  }
  v240 = *v238;
  v241 = type metadata accessor for ClassificationSampling();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v242 = ClassificationSampling.init(defaultClass:outputClasses:)(v240, v239);
  v368 = v238;
  v254 = v409;
  *(void *)(v409 + 880) = v241;
  *(void *)(v409 + 888) = &protocol witness table for ClassificationSampling;
  *(void *)(v409 + 856) = v242;
  outlined init with take of LogitCollection((long long *)(v409 + 856), v27);
LABEL_103:
  (*(void (**)(void, void, void))(v254 + 1760))(*(void *)(v254 + 1696), *(void *)(v254 + 1728), *(void *)(v254 + 1640));
  swift_retain_n();
  v265 = Logger.logObject.getter();
  v266 = static os_log_type_t.info.getter();
  v267 = os_log_type_enabled(v265, v266);
  v268 = *(void (**)(uint64_t, uint64_t))(v254 + 1776);
  v374 = *(void *)(v254 + 1696);
  v269 = *(void *)(v254 + 1640);
  v389 = (uint64_t)v23;
  v367 = (uint64_t *)(v254 + 1184);
  if (v267)
  {
    v363 = (uint64_t *)(v254 + 1168);
    v270 = swift_slowAlloc();
    v365 = swift_slowAlloc();
    *(void *)&v412 = v365;
    *(_DWORD *)v270 = 136446466;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v27, v254 + 416);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenSampling);
    v271 = String.init<A>(describing:)();
    *(void *)(v254 + 1176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v271, v272, (uint64_t *)&v412);
    v254 = v409;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v270 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v273 = dispatch thunk of CustomStringConvertible.description.getter();
    *v363 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v273, v274, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v268(v374, v269);
    _os_log_impl(&dword_25FA51000, v265, v266, "Using sampling %{public}s for request %{public}s", (uint8_t *)v270, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v365, -1, -1);
    MEMORY[0x261206F80](v270, -1, -1);
  }
  else
  {
    swift_release_n();
    v268(v374, v269);
  }

  v275 = SamplingParameters.tokenHealing.getter();
  v276 = *(void (**)(void, uint64_t, uint64_t))(v254 + 1760);
  v277 = *(void *)(v254 + 1728);
  v278 = *(void *)(v254 + 1640);
  if (v275)
  {
    v276(*(void *)(v254 + 1688), v277, v278);
    v290 = Logger.logObject.getter();
    v291 = static os_log_type_t.default.getter();
    v292 = os_log_type_enabled(v290, v291);
    v293 = *(void (**)(uint64_t, uint64_t))(v254 + 1776);
    v294 = *(void *)(v254 + 1688);
    v295 = *(void *)(v254 + 1640);
    if (v292)
    {
      v296 = (uint8_t *)swift_slowAlloc();
      v297 = swift_slowAlloc();
      *(void *)&v412 = v297;
      *(_DWORD *)v296 = 136446210;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      v298 = dispatch thunk of CustomStringConvertible.description.getter();
      *v367 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v299, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v293(v294, v295);
      _os_log_impl(&dword_25FA51000, v290, v291, "Using token healing for request %{public}s", v296, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v297, -1, -1);
      MEMORY[0x261206F80](v296, -1, -1);
    }
    else
    {
      v293(*(void *)(v254 + 1688), *(void *)(v254 + 1640));
    }

    v301 = *(void *)(v409 + 1728);
    v302 = *(void *)(v409 + 1544);
    v303 = *(void *)(v409 + 1408);
    v304 = *(void *)(v409 + 1376);
    v305 = *(void *)(v409 + 1344);
    v306 = *(void *)(v409 + 1328);
    v307 = type metadata accessor for TokenizerRunnerPrefixMatchingTextProcessor();
    v308 = swift_allocObject();
    *(unsigned char *)(v308 + 32) = 1;
    *(void *)(v308 + 40) = 0;
    *(_WORD *)(v308 + 48) = 513;
    *(void *)(v308 + 16) = v398;
    *(void *)(v308 + 24) = 0;
    v413 = (ValueMetadata *)v307;
    v414 = &protocol witness table for TokenizerRunnerPrefixMatchingTextProcessor;
    *(void *)&v412 = v308;
    outlined init with copy of (Int, LogitCollection)(v306 + *(int *)(v303 + 24), v304, &demangling cache variable for type metadata for Constraints?);
    v309 = (void *)swift_task_alloc();
    v309[2] = v305;
    v309[3] = v302;
    v309[4] = v398;
    v309[5] = v301;
    v309[6] = v382;
    v309[7] = v389;
    v309[8] = v395;
    v309[9] = v391;
    v309[10] = v306;
    v310 = type metadata accessor for TokenHealingDecoder();
    swift_allocObject();
    swift_retain();
    v313 = TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)((uint64_t)&v412, v304, (void (*)(long long *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), unsigned char *))partial apply for buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
    v312 = (long long *)(v409 + 976);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    *(void *)(v409 + 1000) = v310;
    *(void *)(v409 + 1008) = &protocol witness table for TokenHealingDecoder;
    *(void *)(v409 + 976) = v313;
    v300 = (void *)v409;
  }
  else
  {
    v279 = (uint64_t *)(v254 + 696);
    v276(*(void *)(v254 + 1680), v277, v278);
    v280 = Logger.logObject.getter();
    v281 = static os_log_type_t.default.getter();
    v282 = os_log_type_enabled(v280, v281);
    v283 = *(void (**)(uint64_t, uint64_t))(v254 + 1776);
    v284 = *(void *)(v254 + 1680);
    v285 = *(void *)(v254 + 1640);
    if (v282)
    {
      v286 = (uint8_t *)swift_slowAlloc();
      v287 = swift_slowAlloc();
      *(void *)&v412 = v287;
      *(_DWORD *)v286 = 136446210;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      v288 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v254 + 1192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v288, v289, (uint64_t *)&v412);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v283(v284, v285);
      _os_log_impl(&dword_25FA51000, v280, v281, "Not using token healing for request %{public}s", v286, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v287, -1, -1);
      MEMORY[0x261206F80](v286, -1, -1);
    }
    else
    {
      v283(*(void *)(v254 + 1680), *(void *)(v254 + 1640));
    }

    v300 = (void *)v409;
    specialized buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(*(NSObject **)(v409 + 1344), *(NSObject **)(v409 + 1544), v398, *(void *)(v409 + 1728), v382, v389, v395, v391, v279, *(void *)(v409 + 1328));
    swift_bridgeObjectRelease();
    v312 = (long long *)v279;
  }
  v314 = (uint64_t)(v300 + 82);
  v315 = (uint64_t)(v300 + 92);
  outlined init with take of LogitCollection(v312, (uint64_t)(v300 + 82));
  v316 = (void (*)(uint64_t, uint64_t, uint64_t))v300[220];
  v317 = v300[216];
  v318 = v300[209];
  v319 = *(void *)(v409 + 1640);
  outlined init with copy of DeterministicLanguageModelProtocol(v314, v315);
  v320 = v319;
  v321 = v409;
  v316(v318, v317, v320);
  v322 = Logger.logObject.getter();
  v323 = static os_log_type_t.info.getter();
  v324 = os_log_type_enabled(v322, v323);
  v325 = *(void (**)(uint64_t, uint64_t))(v409 + 1776);
  v326 = *(void *)(v409 + 1672);
  v327 = *(void *)(v409 + 1640);
  if (v324)
  {
    v328 = swift_slowAlloc();
    v393 = swift_slowAlloc();
    *(void *)&v412 = v393;
    *(_DWORD *)v328 = 136446466;
    outlined init with copy of DeterministicLanguageModelProtocol(v315, v409 + 816);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingDecoder);
    v329 = String.init<A>(describing:)();
    *(void *)(v409 + 1224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v329, v330, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v315);
    *(_WORD *)(v328 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v331 = dispatch thunk of CustomStringConvertible.description.getter();
    *v380 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v331, v332, (uint64_t *)&v412);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v321 = v409;
    swift_bridgeObjectRelease();
    v325(v326, v327);
    _os_log_impl(&dword_25FA51000, v322, v323, "Using decoder %{public}s for request %{public}s", (uint8_t *)v328, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v393, -1, -1);
    MEMORY[0x261206F80](v328, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v315);
    v325(v326, v327);
  }

  v333 = (void *)v321;
  v334 = (long long *)(v321 + 776);
  v335 = v333[216];
  v362 = (void (*)(uint64_t, uint64_t))v333[222];
  v336 = v333[205];
  v337 = v333[193];
  v338 = v333[190];
  v339 = v333[187];
  outlined init with copy of DeterministicLanguageModelProtocol(v314, (uint64_t)v334);
  v340 = *(void *)(v372 + v371);
  swift_retain();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v314);
  __swift_destroy_boxed_opaque_existential_1(v376);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v339, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v341 = *(void *)(v337 + *(int *)(v338 + 36));
  v342 = *(void *)(v337 + *(int *)(v338 + 48));
  v344 = *v368;
  v343 = v368[1];
  type metadata accessor for OnDeviceInferenceContext();
  v345 = swift_allocObject();
  v346 = specialized OnDeviceInferenceContext.init(decoder:tokenizer:tokenIDToTextConverter:inferenceAssetObjects:specialTokensMap:localizationMetadata:classifierMetadata:)(v334, v340, v375, v390, v341, v342, v344, v343, v345);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v382);
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(v337, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  v362(v335, v336);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v347 = (uint64_t (*)(uint64_t))v333[1];
  return v347(v346);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[231];
  unint64_t v2 = (void (*)(uint64_t, uint64_t))v0[222];
  unint64_t v3 = v0[216];
  uint64_t v4 = v0[205];
  uint64_t v5 = v0[202];
  uint64_t v6 = v0[198];
  v1(v5, v0[201], v6);
  lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  uint64_t v7 = swift_allocError();
  v1(v8, v5, v6);
  v2(v3, v4);
  v0[234] = MEMORY[0x263F8EE78];
  v0[233] = v7;
  uint64_t v9 = __swift_project_boxed_opaque_existential_1((void *)(v0[168] + 16), *(void *)(v0[168] + 40));
  v0[235] = v9;
  uint64_t v10 = *v9;
  return MEMORY[0x270FA2498](OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), v10, 0);
}

{
  Swift::OpaquePointer *v0;
  uint64_t v2;

  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[234]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[130] = v2;
  v3[131] = a1;
  v3[132] = v1;
  v3[226] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[204];
    uint64_t v5 = v3[203];
    uint64_t v6 = v3[199];
    uint64_t v7 = v3[198];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v3[227] = v8;
    v3[228] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v7);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v9 = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
  }
  else
  {
    swift_release();
    uint64_t v9 = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v11;

  unint64_t v3 = (void *)*v2;
  v3[133] = v2;
  v3[134] = a1;
  v3[135] = v1;
  v3[230] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[201];
    uint64_t v5 = v3[200];
    uint64_t v6 = v3[199];
    uint64_t v7 = v3[198];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v3[231] = v8;
    v3[232] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v7);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
  }
  else
  {
    swift_release();
    uint64_t v9 = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

void *addPromptLookup #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  BOOL v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return (void *)outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)a4);
  }
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.device);
  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    unint64_t v32 = a4;
    uint64_t v17 = v16;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v33 = a2;
    uint64_t v34 = v30;
    *(_DWORD *)uint64_t v17 = 134218498;
    uint64_t v31 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    __swift_project_boxed_opaque_existential_1(v35, v35[3]);
    swift_getDynamicType();
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    *(_WORD *)(v17 + 22) = 2080;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    a2 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    _os_log_impl(&dword_25FA51000, v14, v15, "Using prompt lookup with %ld step(s) for %s for request %s", (uint8_t *)v17, 0x20u);
    uint64_t v22 = v30;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v22, -1, -1);
    uint64_t v23 = v17;
    a4 = v32;
    MEMORY[0x261206F80](v23, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v35);
  type metadata accessor for PromptLookupLanguageModel();
  unint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25FB61DF0;
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v26 + 32) = 0;
  *(unsigned char *)(v26 + 40) = 1;
  *(void *)(v26 + 48) = 0;
  *(_WORD *)(v26 + 56) = 257;
  *(void *)(v26 + 64) = v27;
  v25[4] = v26;
  uint64_t v28 = type metadata accessor for SpeculativeLanguageModel();
  unint64_t v29 = (void *)swift_allocObject();
  uint64_t result = specialized SpeculativeLanguageModel.init(target:speculative:stepCount:)(v35, (uint64_t)v25, a2, v29);
  a4[3] = v28;
  a4[4] = &protocol witness table for SpeculativeLanguageModel;
  *a4 = result;
  return result;
}

uint64_t closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v13 - 8, v14);
  uint64_t v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for InferenceRequest();
  outlined init with copy of (Int, LogitCollection)(a1 + *(int *)(v17 + 24), (uint64_t)v16, &demangling cache variable for type metadata for Constraints?);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference34DeterministicLanguageModelProtocol_pTg5((void (*)(char *, uint64_t *))partial apply for closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), (uint64_t)v31);
  uint64_t result = outlined destroy of DataStreamState?((uint64_t)v16, &demangling cache variable for type metadata for Constraints?);
  if (!v6)
  {
    MEMORY[0x270FA5388](result, v19);
    *(void *)&v23[-16] = a5;
    uint64_t v20 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF24TokenGenerationInference34DeterministicLanguageModelProtocol_p_s5NeverOAD06MaskedgH0CTg5((void (*)(uint64_t *__return_ptr, unsigned char *))partial apply for closure #2 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = type metadata accessor for MaskedLanguageModel();
      *((void *)&v29 + 1) = v22;
      uint64_t v30 = &protocol witness table for MaskedLanguageModel;
      *(void *)&long long v28 = v21;
      outlined destroy of DataStreamState?((uint64_t)v31, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
      outlined init with copy of DeterministicLanguageModelProtocol(a5, (uint64_t)v27);
      if (v22)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        return outlined init with take of LogitCollection(&v28, a6);
      }
    }
    else
    {
      outlined destroy of DataStreamState?((uint64_t)v31, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v30 = 0;
      outlined init with copy of DeterministicLanguageModelProtocol(a5, (uint64_t)v27);
    }
    outlined init with take of LogitCollection(v27, a6);
    return outlined destroy of DataStreamState?((uint64_t)&v28, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  }
  return result;
}

uint64_t closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v11 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t result = OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)(a1, a2, *(void *)(a3 + *(int *)(v11 + 36)), a5);
  if (v5) {
    *a4 = v5;
  }
  return result;
}

uint64_t closure #2 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v7);
  outlined init with copy of DeterministicLanguageModelProtocol(a2, (uint64_t)v6);
  type metadata accessor for MaskedLanguageModel();
  swift_allocObject();
  uint64_t result = MaskedLanguageModel.init(_:_:)(v7, v6);
  *a3 = result;
  return result;
}

uint64_t specialized buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(NSObject *a1@<X0>, NSObject *a2@<X1>, uint8_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v120 = a8;
  uint64_t v123 = a5;
  uint64_t v127 = a4;
  id v125 = a9;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v15 - 8, v16);
  uint64_t v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v121 = v19;
  uint64_t v122 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v25);
  unint64_t v27 = (char *)&v106 - v26;
  uint64_t v124 = a6 + 16;
  uint64_t v148 = 0;
  char v149 = 1;
  uint64_t v28 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v29 = *(int *)(v28 + 40);
  uint64_t v126 = a2;
  if (*(uint64_t *)((char *)&a2->isa + v29) >= 1)
  {
    uint64_t v30 = v28;
    uint64_t v120 = v29;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.device);
    uint64_t v32 = v121;
    uint64_t v33 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v27, v127, v121);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      v145[0] = v127;
      uint64_t v119 = v36;
      *(_DWORD *)uint64_t v36 = 136446210;
      uint64_t v118 = (v36 + 4);
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v142[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v32);
      unint64_t v39 = v119;
      _os_log_impl(&dword_25FA51000, v34, v35, "Using speculative streaming for request %{public}s", v119, 0xCu);
      uint64_t v40 = v127;
      swift_arrayDestroy();
      MEMORY[0x261206F80](v40, -1, -1);
      MEMORY[0x261206F80](v39, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v32);
    }

    char v56 = v126;
    unint64_t v57 = (char *)objc_msgSend(*(id *)((char *)&v126->isa + *(int *)(v30 + 24)), sel_vocabularyCount);
    int64_t v58 = (int64_t)v57;
    uint64_t v59 = *(uint64_t *)((char *)&v56->isa + v120);
    uint64_t v60 = (char *)v56 + *(int *)(v30 + 44);
    uint64_t v61 = v60[8];
    if (v61 == 2)
    {
      uint64_t v62 = 0;
      LODWORD(v63) = 0;
      uint64_t v51 = 0;
      LOBYTE(v64) = 0;
      uint64_t v65 = 0;
      uint64_t v54 = 1;
      uint64_t v66 = *(uint64_t *)((char *)&v56->isa + v120);
      uint64_t v67 = 1;
      uint64_t v68 = 1;
    }
    else
    {
      uint64_t v65 = *((unsigned int *)v60 + 8);
      uint64_t v54 = *((void *)v60 + 2);
      unint64_t v63 = *((void *)v60 + 3);
      uint64_t v67 = HIDWORD(v63) & 1;
      uint64_t v66 = *(void *)v60;
      uint64_t v62 = v61 & 1;
      uint64_t v51 = (v63 >> 40) & 1;
      uint64_t v64 = HIWORD(v63) & 1;
      uint64_t v68 = v60[36] & 1;
    }
    uint64_t v69 = (int64_t *)&v57[-v59];
    if (__OFSUB__(v58, v59))
    {
      __break(1u);
    }
    else if (v58 >= (uint64_t)v69)
    {
      uint64_t v126 = v65;
      uint64_t v127 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v69, v58);
      outlined init with copy of DeterministicLanguageModelProtocol(v123, (uint64_t)v145);
      *(void *)&long long v139 = v66;
      BYTE8(v139) = v62;
      *(void *)&long long v140 = v54;
      DWORD2(v140) = v63;
      BYTE12(v140) = v67;
      BYTE13(v140) = v51;
      BYTE14(v140) = v64;
      LODWORD(v141) = v126;
      BYTE4(v141) = v68;
      uint64_t v70 = v124;
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v70, (uint64_t)v142);
      uint64_t v71 = type metadata accessor for SpeculativeStreamingDecoder();
      swift_allocObject();
      uint64_t result = SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(v145, (uint64_t *)&v139, v127, (uint64_t)v142);
      os_log_type_t v72 = v125;
      v125[3] = v71;
      v72[4] = (uint64_t)&protocol witness table for SpeculativeStreamingDecoder;
      *os_log_type_t v72 = result;
      return result;
    }
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v41 = v120;
  uint64_t v117 = v24;
  uint64_t v118 = a1;
  uint64_t v119 = a3;
  if (!*(void *)(a7 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v123, (uint64_t)v145);
    uint64_t v73 = v124;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v73, (uint64_t)v142);
    uint64_t v74 = type metadata accessor for BasicDecoder();
    uint64_t v75 = swift_allocObject();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v145, v75 + 16);
    uint64_t v76 = v146;
    uint64_t v77 = v147;
    __swift_project_boxed_opaque_existential_1(v145, v146);
    *(void *)(v75 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v76, v77);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v142, v75 + 64);
    uint64_t v78 = v143;
    uint64_t v79 = v144;
    __swift_project_boxed_opaque_existential_1(v142, v143);
    ((void (*)(uint64_t, _UNKNOWN **))v79[4])(v78, v79);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
    Class v80 = v125;
    v125[3] = v74;
    v80[4] = (uint64_t)&protocol witness table for BasicDecoder;
    uint64_t *v80 = v75;
    return result;
  }
  uint64_t v42 = *(void *)(a7 + 32);
  uint64_t v116 = *(void *)(a7 + 40);
  int v115 = *(unsigned __int8 *)(a7 + 48);
  uint64_t v114 = *(void *)(a7 + 56);
  int v43 = *(_DWORD *)(a7 + 64);
  int v112 = *(unsigned __int8 *)(a7 + 68);
  int v113 = v43;
  int v44 = *(unsigned __int8 *)(a7 + 69);
  int v110 = *(unsigned __int8 *)(a7 + 70);
  int v111 = v44;
  int v45 = *(_DWORD *)(a7 + 72);
  int v46 = *(unsigned __int8 *)(a7 + 76);
  uint64_t v143 = type metadata accessor for E5TransformerLanguageModel();
  uint64_t v144 = &protocol witness table for E5TransformerLanguageModel;
  v142[0] = v42;
  swift_retain_n();
  addPromptLookup #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)((uint64_t)v142, v41, v127, v145);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  uint64_t v47 = type metadata accessor for InferenceRequest();
  uint64_t v48 = outlined init with copy of (Int, LogitCollection)(a10 + *(int *)(v47 + 24), (uint64_t)v18, &demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v48, v49);
  unint64_t v50 = v119;
  *(&v106 - 4) = v118;
  *(&v106 - 3) = v50;
  uint64_t v51 = (uint64_t)v126;
  *(&v106 - 2) = v126;
  *(&v106 - 1) = (os_log_t)v145;
  uint64_t v52 = v150;
  uint64_t v53 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5((void (*)(uint64_t *__return_ptr, char *, uint64_t *))closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)partial apply);
  uint64_t v54 = v52;
  if (v52)
  {
    swift_release();
    outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for Constraints?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
  }
  uint64_t v67 = v53;
  int v109 = v46;
  LODWORD(v120) = v45;
  outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for Constraints?);
  if (v67)
  {
    uint64_t v81 = type metadata accessor for MaskedLanguageModel();
    *((void *)&v140 + 1) = v81;
    uint64_t v141 = &protocol witness table for MaskedLanguageModel;
    *(void *)&long long v139 = v67;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v145, (uint64_t)v138);
    uint64_t v68 = v121;
    uint64_t v62 = v127;
    if (v81)
    {
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
      outlined init with take of LogitCollection(&v139, (uint64_t)v142);
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v141 = 0;
    long long v139 = 0u;
    long long v140 = 0u;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v145, (uint64_t)v138);
    uint64_t v68 = v121;
    uint64_t v62 = v127;
  }
  outlined init with take of LogitCollection(v138, (uint64_t)v142);
  swift_retain();
  outlined destroy of DataStreamState?((uint64_t)&v139, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
LABEL_22:
  uint64_t v127 = v42;
  if (one-time initialization token for device != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v121 = v67;
  uint64_t v82 = type metadata accessor for Logger();
  __swift_project_value_buffer(v82, (uint64_t)static Log.device);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v142, (uint64_t)&v139);
  uint64_t v83 = v122;
  uint64_t v84 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v117, v62, v68);
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.default.getter();
  int v87 = v86;
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v88 = swift_slowAlloc();
    os_log_t v106 = v85;
    uint64_t v89 = v84;
    uint64_t v90 = v88;
    uint64_t v108 = swift_slowAlloc();
    v128[0] = v108;
    *(_DWORD *)uint64_t v90 = 136446466;
    int v107 = v87;
    uint64_t v91 = v68;
    uint64_t v150 = v54;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v139, (uint64_t)v138);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
    uint64_t v92 = String.init<A>(describing:)();
    *(void *)&v138[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    *(_WORD *)(v90 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v138[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v128);
    uint64_t v96 = v125;
    uint64_t v51 = (uint64_t)v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v89, v91);
    os_log_t v97 = v106;
    _os_log_impl(&dword_25FA51000, v106, (os_log_type_t)v107, "Using draft language model %{public}s for request %{public}s", (uint8_t *)v90, 0x16u);
    uint64_t v98 = v108;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v98, -1, -1);
    MEMORY[0x261206F80](v90, -1, -1);

    char v99 = v115;
    uint64_t v100 = v114;
    int v101 = v113;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v68);

    char v99 = v115;
    uint64_t v100 = v114;
    int v101 = v113;
    uint64_t v96 = v125;
  }
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v142, (uint64_t)&v139);
  outlined init with copy of DeterministicLanguageModelProtocol(v123, (uint64_t)v138);
  uint64_t v129 = v116;
  char v130 = v99;
  uint64_t v131 = v100;
  int v132 = v101;
  char v133 = v112;
  char v134 = v111;
  char v135 = v110;
  int v136 = v120;
  char v137 = v109;
  uint64_t v102 = v124;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v102, (uint64_t)v128);
  uint64_t v103 = specialized getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(&v148, (uint64_t)v118, v51);
  uint64_t v104 = type metadata accessor for TwoStageSpeculativeDecoder();
  swift_allocObject();
  uint64_t v105 = TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(&v139, v138, &v129, v128, v103);
  uint64_t v96[3] = v104;
  v96[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
  swift_release();
  swift_release();
  *uint64_t v96 = v105;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
}

uint64_t buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t *a4@<X3>, uint64_t a5@<X4>, uint8_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v99)(long long *__return_ptr, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  char *v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t *__return_ptr, uint64_t);
  uint64_t *v124;
  uint8_t *v125;
  int64_t *v126;
  uint64_t v127[8];
  uint64_t v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  char v133;
  char v134;
  int v135;
  char v136;
  long long v137[2];
  long long v138;
  long long v139;
  _UNKNOWN **v140;
  void v141[3];
  uint64_t v142;
  _UNKNOWN **v143;
  uint64_t v144[3];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;

  uint64_t v121 = a2;
  uint64_t v122 = a7;
  uint64_t v124 = a9;
  id v125 = a6;
  uint64_t v123 = a1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v16 - 8, v17);
  uint64_t v19 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v20 - 8);
  uint64_t v120 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](v20, v21);
  uint64_t v24 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v25);
  unint64_t v27 = (char *)&v104 - v26;
  uint64_t v28 = a8 + 16;
  uint64_t v147 = 0;
  uint64_t v148 = 1;
  uint64_t v29 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v30 = *(int *)(v29 + 40);
  uint64_t v126 = a4;
  if (*(int64_t *)((char *)a4 + v30) >= 1)
  {
    uint64_t v31 = v29;
    uint64_t v117 = v30;
    uint64_t v118 = v28;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.device);
    uint64_t v33 = v119;
    uint64_t v34 = v120;
    (*(void (**)(char *, uint8_t *, uint64_t))(v119 + 16))(v27, v125, v120);
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      v144[0] = v116;
      id v125 = v37;
      *(_DWORD *)uint64_t v37 = 136446210;
      int v115 = v37 + 4;
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      v141[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
      uint64_t v40 = v125;
      _os_log_impl(&dword_25FA51000, v35, v36, "Using speculative streaming for request %{public}s", v125, 0xCu);
      uint64_t v41 = v116;
      swift_arrayDestroy();
      MEMORY[0x261206F80](v41, -1, -1);
      MEMORY[0x261206F80](v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
    }

    unsigned int v55 = v126;
    char v56 = (char *)objc_msgSend(*(id *)((char *)v126 + *(int *)(v31 + 24)), sel_vocabularyCount);
    int64_t v57 = (int64_t)v56;
    uint64_t v58 = *(int64_t *)((char *)v55 + v117);
    uint64_t v59 = (char *)v55 + *(int *)(v31 + 44);
    uint64_t v60 = v59[8];
    if (v60 == 2)
    {
      char v61 = 0;
      LODWORD(v62) = 0;
      uint64_t v63 = 0;
      LOBYTE(v64) = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 1;
      uint64_t v53 = *(int64_t *)((char *)v55 + v117);
      uint64_t v67 = 1;
      int v68 = 1;
    }
    else
    {
      uint64_t v65 = (uint8_t *)*((unsigned int *)v59 + 8);
      uint64_t v66 = *((void *)v59 + 2);
      unint64_t v62 = *((void *)v59 + 3);
      uint64_t v67 = HIDWORD(v62) & 1;
      uint64_t v53 = *(void *)v59;
      char v61 = v60 & 1;
      uint64_t v63 = (v62 >> 40) & 1;
      uint64_t v64 = HIWORD(v62) & 1;
      int v68 = v59[36] & 1;
    }
    uint64_t v69 = (int64_t *)&v56[-v58];
    if (__OFSUB__(v57, v58))
    {
      __break(1u);
    }
    else if (v57 >= (uint64_t)v69)
    {
      id v125 = v65;
      LODWORD(v120) = v68;
      uint64_t v126 = specialized _copyCollectionToContiguousArray<A>(_:)(v69, v57);
      v123(v144, v122);
      *(void *)&uint64_t v138 = v53;
      BYTE8(v138) = v61;
      *(void *)&long long v139 = v66;
      DWORD2(v139) = v62;
      BYTE12(v139) = v67;
      BYTE13(v139) = v63;
      BYTE14(v139) = v64;
      LODWORD(v140) = v125;
      BYTE4(v140) = v120;
      uint64_t v70 = v118;
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v70, (uint64_t)v141);
      uint64_t v71 = type metadata accessor for SpeculativeStreamingDecoder();
      swift_allocObject();
      uint64_t result = SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(v144, (uint64_t *)&v138, (uint64_t)v126, (uint64_t)v141);
      os_log_type_t v72 = v124;
      v124[3] = v71;
      v72[4] = (uint64_t)&protocol witness table for SpeculativeStreamingDecoder;
      *os_log_type_t v72 = result;
      return result;
    }
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v114 = v24;
  uint64_t v116 = a3;
  uint64_t v117 = a5;
  if (!*(void *)(a10 + 16))
  {
    v123(v144, v122);
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(a8 + 16, (uint64_t)v141);
    uint64_t v73 = type metadata accessor for BasicDecoder();
    uint64_t v74 = swift_allocObject();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v144, v74 + 16);
    uint64_t v75 = v145;
    uint64_t v76 = v146;
    __swift_project_boxed_opaque_existential_1(v144, v145);
    *(void *)(v74 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v75, v76);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v141, v74 + 64);
    uint64_t v77 = v142;
    uint64_t v78 = v143;
    __swift_project_boxed_opaque_existential_1(v141, v142);
    ((void (*)(uint64_t, _UNKNOWN **))v78[4])(v77, v78);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
    uint64_t v79 = v124;
    v124[3] = v73;
    v79[4] = (uint64_t)&protocol witness table for BasicDecoder;
    uint64_t *v79 = v74;
    return result;
  }
  uint64_t v118 = a8 + 16;
  uint64_t v42 = *(uint8_t **)(a10 + 32);
  int v113 = *(void *)(a10 + 40);
  int v112 = *(unsigned __int8 *)(a10 + 48);
  int v111 = *(void *)(a10 + 56);
  int v43 = *(_DWORD *)(a10 + 64);
  int v109 = *(unsigned __int8 *)(a10 + 68);
  int v110 = v43;
  uint64_t v108 = *(unsigned __int8 *)(a10 + 69);
  int v44 = *(unsigned __int8 *)(a10 + 70);
  int v45 = *(_DWORD *)(a10 + 72);
  int v46 = *(unsigned __int8 *)(a10 + 76);
  uint64_t v142 = type metadata accessor for E5TransformerLanguageModel();
  uint64_t v143 = &protocol witness table for E5TransformerLanguageModel;
  v141[0] = v42;
  int v115 = v42;
  swift_retain_n();
  addPromptLookup #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)((uint64_t)v141, a11, (uint64_t)v125, v144);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
  uint64_t v47 = type metadata accessor for InferenceRequest();
  uint64_t v48 = outlined init with copy of (Int, LogitCollection)(a12 + *(int *)(v47 + 24), (uint64_t)v19, &demangling cache variable for type metadata for Constraints?);
  MEMORY[0x270FA5388](v48, v49);
  uint64_t v50 = v117;
  *(&v104 - 4) = v116;
  *(&v104 - 3) = v50;
  *(&v104 - 2) = (uint64_t)v126;
  *(&v104 - 1) = (uint64_t)v144;
  uint64_t v51 = v149;
  uint64_t v52 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5((void (*)(uint64_t *__return_ptr, char *, uint64_t *))partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
  uint64_t v53 = v51;
  if (v51)
  {
    swift_release();
    outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for Constraints?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
  }
  uint64_t v80 = v52;
  uint64_t v105 = v46;
  os_log_t v106 = v45;
  int v107 = v44;
  outlined destroy of DataStreamState?((uint64_t)v19, &demangling cache variable for type metadata for Constraints?);
  uint64_t v104 = v80;
  if (v80)
  {
    uint64_t v81 = type metadata accessor for MaskedLanguageModel();
    *((void *)&v139 + 1) = v81;
    long long v140 = &protocol witness table for MaskedLanguageModel;
    *(void *)&uint64_t v138 = v80;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v144, (uint64_t)v137);
    uint64_t v63 = v119;
    if (v81)
    {
      swift_retain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      outlined init with take of LogitCollection(&v138, (uint64_t)v141);
      goto LABEL_22;
    }
  }
  else
  {
    long long v140 = 0;
    uint64_t v138 = 0u;
    long long v139 = 0u;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v144, (uint64_t)v137);
    uint64_t v63 = v119;
  }
  outlined init with take of LogitCollection(v137, (uint64_t)v141);
  swift_retain();
  outlined destroy of DataStreamState?((uint64_t)&v138, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
LABEL_22:
  uint64_t v66 = (uint64_t)v114;
  uint64_t v67 = (uint64_t)v125;
  if (one-time initialization token for device != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v82 = type metadata accessor for Logger();
  __swift_project_value_buffer(v82, (uint64_t)static Log.device);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v141, (uint64_t)&v138);
  uint64_t v83 = v120;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v66, v67, v120);
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  int v86 = v85;
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v87 = swift_slowAlloc();
    char v149 = v53;
    uint64_t v88 = v87;
    id v125 = (uint8_t *)swift_slowAlloc();
    v127[0] = (uint64_t)v125;
    *(_DWORD *)uint64_t v88 = 136446466;
    LODWORD(v119) = v86;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v138, (uint64_t)v137);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
    uint64_t v89 = String.init<A>(describing:)();
    *(void *)&v137[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    *(_WORD *)(v88 + 12) = 2082;
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v137[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v83);
    _os_log_impl(&dword_25FA51000, v84, (os_log_type_t)v119, "Using draft language model %{public}s for request %{public}s", (uint8_t *)v88, 0x16u);
    unint64_t v93 = v125;
    swift_arrayDestroy();
    MEMORY[0x261206F80](v93, -1, -1);
    MEMORY[0x261206F80](v88, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v83);
  }

  uint64_t v94 = v118;
  char v95 = v112;
  uint64_t v96 = v111;
  char v98 = v109;
  int v97 = v110;
  char v99 = (void (*)(long long *__return_ptr, uint64_t))v123;
  v123((uint64_t *)&v138, (uint64_t)v141);
  v99(v137, v122);
  uint64_t v128 = v113;
  uint64_t v129 = v95;
  char v130 = v96;
  uint64_t v131 = v97;
  int v132 = v98;
  char v133 = v108;
  char v134 = v107;
  char v135 = v106;
  int v136 = v105;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v94, (uint64_t)v127);
  uint64_t v100 = specialized getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(&v147, v116, (uint64_t)v126);
  int v101 = type metadata accessor for TwoStageSpeculativeDecoder();
  swift_allocObject();
  uint64_t v102 = TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(&v138, v137, &v128, v127, v100);
  uint64_t v103 = v124;
  v124[3] = v101;
  v103[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
  swift_release();
  swift_release();
  unsigned char *v103 = v102;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
}

uint64_t specialized getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (a1[8] != 1) {
    return *(void *)a1;
  }
  uint64_t v5 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t v6 = OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(*(void *)(a3 + *(int *)(v5 + 36)));
  swift_beginAccess();
  *(void *)a1 = v6;
  a1[8] = 0;
  return v6;
}

uint64_t closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v13 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  uint64_t result = OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)(a1, a2, *(void *)(a3 + *(int *)(v13 + 36)), v18);
  if (v6)
  {
    *a5 = v6;
  }
  else
  {
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v18, (uint64_t)v17);
    outlined init with copy of DeterministicLanguageModelProtocol(a4, (uint64_t)v16);
    type metadata accessor for MaskedLanguageModel();
    swift_allocObject();
    uint64_t v15 = MaskedLanguageModel.init(_:_:)(v17, v16);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *a6 = v15;
  }
  return result;
}

uint64_t OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(uint64_t a1)
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), *(void *)(v1 + 80));
  type metadata accessor for OnDeviceInferenceOverrides();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  Overridable.wrappedValue.getter();
  unint64_t v3 = v33;
  if (v33)
  {
    uint64_t v4 = v32;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.device);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v32 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25FA51000, v6, v7, "Read stop token from overrides %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v9, -1, -1);
      MEMORY[0x261206F80](v8, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v13 = dispatch thunk of TokenizerRunner.tokenID(forText:)();
    swift_bridgeObjectRelease();
  }
  else if (a1 {
         && *(void *)(a1 + 16)
  }
         && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6B6F745F706F7473, 0xEA00000000006E65),
             (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(a1 + 56) + 24 * v10;
    uint64_t v13 = *(void *)v12;
    if (*(unsigned char *)(v12 + 16) == 1)
    {
      unint64_t v14 = *(void *)(v12 + 8);
      outlined copy of MetadataSpecialToken(*(void *)v12, v14, 1);
      uint64_t v15 = one-time initialization token for device;
      swift_bridgeObjectRetain();
      if (v15 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.device);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        uint64_t v32 = v20;
        *(_DWORD *)uint64_t v19 = 136446210;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of MetadataSpecialToken(v13, v14, 1);
        outlined consume of MetadataSpecialToken(v13, v14, 1);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25FA51000, v17, v18, "Found string value of stop token in model catalog %{public}s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v20, -1, -1);
        MEMORY[0x261206F80](v19, -1, -1);
      }
      else
      {
        outlined consume of MetadataSpecialToken(v13, v14, 1);
        outlined consume of MetadataSpecialToken(v13, v14, 1);
      }

      uint64_t v31 = dispatch thunk of TokenizerRunner.tokenID(forText:)();
      outlined consume of MetadataSpecialToken(v13, v14, 1);
      outlined consume of MetadataSpecialToken(v13, v14, 1);
      return v31;
    }
    else
    {
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.device);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 134217984;
        uint64_t v32 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25FA51000, v28, v29, "Found int value of stop token in model catalog %ld", v30, 0xCu);
        MEMORY[0x261206F80](v30, -1, -1);
      }
    }
  }
  else
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.device);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v32 = v25;
      *(_DWORD *)uint64_t v24 = 136446210;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x3E626F653CLL, 0xE500000000000000, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v22, v23, "Using default stop token %{public}s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v25, -1, -1);
      MEMORY[0x261206F80](v24, -1, -1);
    }

    return dispatch thunk of TokenizerRunner.tokenID(forText:)();
  }
  return v13;
}

uint64_t OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *(void *)&long long v208 = a2;
  uint64_t v203 = a3;
  uint64_t v205 = a1;
  v185 = a4;
  uint64_t v4 = type metadata accessor for TokenGenerationError();
  uint64_t v201 = *(void *)(v4 - 8);
  uint64_t v202 = v4;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v188 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for GuidedGenerationConstraints();
  uint64_t v183 = *(void *)(v184 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v184, v7);
  uint64_t v181 = (char *)&v178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v191 = (char *)&v178 - v11;
  uint64_t v192 = type metadata accessor for GuidedGenerationVocabularyManager();
  uint64_t v182 = *(void *)(v192 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v192, v12);
  v180 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v15);
  unint64_t v190 = (char *)&v178 - v16;
  uint64_t v17 = type metadata accessor for Grammar();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v179 = (char *)&v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v189 = (char *)&v178 - v23;
  uint64_t v24 = type metadata accessor for TokenGenerationError.Context();
  uint64_t v199 = *(void *)(v24 - 8);
  uint64_t v200 = v24;
  MEMORY[0x270FA5388](v24, v25);
  uint64_t v198 = (char *)&v178 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Schema();
  MEMORY[0x270FA5388](v27 - 8, v28);
  uint64_t v187 = (char *)&v178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for GenerationSchema();
  uint64_t v197 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v30, v31);
  uint64_t v186 = (char *)&v178 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32, v34);
  os_log_type_t v36 = (char *)&v178 - v35;
  uint64_t v37 = type metadata accessor for Constraints();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37, v39);
  uint64_t v41 = (char *)&v178 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  uint64_t v44 = MEMORY[0x270FA5388](v42 - 8, v43);
  uint64_t v194 = (uint64_t)&v178 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  uint64_t v49 = (char *)&v178 - v48;
  uint64_t v51 = MEMORY[0x270FA5388](v47, v50);
  uint64_t v53 = (char *)&v178 - v52;
  MEMORY[0x270FA5388](v51, v54);
  uint64_t v195 = v18;
  unsigned int v55 = *(void (**)(void))(v18 + 56);
  uint64_t v206 = (uint64_t)&v178 - v56;
  uint64_t v196 = v17;
  uint64_t v193 = v55;
  v55();
  uint64_t v57 = OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(v203);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v205, v37);
  int v58 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v41, v37);
  if (v58 == *MEMORY[0x263F7F848])
  {
    uint64_t v205 = v57;
    (*(void (**)(char *, uint64_t))(v38 + 96))(v41, v37);
    uint64_t v59 = v197;
    (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v36, v41, v30);
    *(_OWORD *)&uint64_t v60 = (unsigned __int128)GenerationSchema.extractPrefixes()();
    if (v60)
    {
      uint64_t v62 = v60;
      uint64_t v63 = v61;
      *(void *)&long long v204 = v36;
      swift_retain();
      uint64_t v64 = v207;
      uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTf4ng_nTm(v62);
      uint64_t v178 = v30;
      if (v64)
      {
        swift_release();
        if (one-time initialization token for device != -1) {
          swift_once();
        }
        uint64_t v106 = type metadata accessor for Logger();
        __swift_project_value_buffer(v106, (uint64_t)static Log.device);
        id v107 = v64;
        id v108 = v64;
        int v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          int v111 = (uint8_t *)swift_slowAlloc();
          int v112 = (void *)swift_slowAlloc();
          *(void *)&long long v208 = v63;
          *(_DWORD *)int v111 = 138543362;
          id v113 = v64;
          uint64_t v114 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&long long v209 = v114;
          uint64_t v63 = v208;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *int v112 = v114;

          _os_log_impl(&dword_25FA51000, v109, v110, "Failed to tokenize schema prefixes: %{public}@", v111, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          int v115 = v112;
          uint64_t v59 = v197;
          MEMORY[0x261206F80](v115, -1, -1);
          MEMORY[0x261206F80](v111, -1, -1);
        }
        else
        {
        }
        *(void *)&long long v209 = 0;
        *((void *)&v209 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        v116._countAndFlagsBits = 0xD000000000000034;
        v116._object = (void *)0x800000025FB6C980;
        String.append(_:)(v116);
        uint64_t v117 = MEMORY[0x263F8D310];
        v118._countAndFlagsBits = MEMORY[0x261205560](v62, MEMORY[0x263F8D310]);
        String.append(_:)(v118);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v119._object = (void *)0x800000025FB6C9C0;
        v119._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v119);
        v120._countAndFlagsBits = MEMORY[0x261205560](v63, v117);
        String.append(_:)(v120);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v121 = v198;
        TokenGenerationError.Context.init(debugDescription:underlyingError:)();
        uint64_t v123 = v199;
        uint64_t v122 = v200;
        uint64_t v124 = v188;
        (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v188, v121, v200);
        uint64_t v126 = v201;
        uint64_t v125 = v202;
        (*(void (**)(char *, void, uint64_t))(v201 + 104))(v124, *MEMORY[0x263F7F810], v202);
        lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v126 + 16))(v127, v124, v125);
        swift_willThrow();

        (*(void (**)(char *, uint64_t))(v126 + 8))(v124, v125);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v121, v122);
        (*(void (**)(void, uint64_t))(v59 + 8))(v204, v178);
        uint64_t v73 = v206;
        return outlined destroy of DataStreamState?(v73, &demangling cache variable for type metadata for Grammar?);
      }
      uint64_t v105 = v65;
      swift_release();
      swift_retain();
      uint64_t v158 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTf4ng_nTm(v63);
      long long v207 = 0;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v159 = type metadata accessor for Logger();
      __swift_project_value_buffer(v159, (uint64_t)static Log.device);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v160 = Logger.logObject.getter();
      os_log_type_t v161 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v160, v161))
      {
        uint64_t v162 = swift_slowAlloc();
        uint64_t v203 = swift_slowAlloc();
        *(void *)&long long v209 = v203;
        *(_DWORD *)uint64_t v162 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        uint64_t v164 = MEMORY[0x261205560](v105, v163);
        unint64_t v166 = v165;
        swift_bridgeObjectRelease();
        uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v166, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 12) = 2080;
        uint64_t v167 = swift_bridgeObjectRetain();
        uint64_t v168 = MEMORY[0x261205560](v167, v163);
        unint64_t v170 = v169;
        swift_bridgeObjectRelease();
        uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v170, (uint64_t *)&v209);
        uint64_t v59 = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25FA51000, v160, v161, "Building PrefixGuidedLanguageModel\nLegal: %s\nIllegal: %s", (uint8_t *)v162, 0x16u);
        uint64_t v171 = v203;
        swift_arrayDestroy();
        MEMORY[0x261206F80](v171, -1, -1);
        MEMORY[0x261206F80](v162, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v156 = v206;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v172 = swift_allocObject();
      *(_OWORD *)(v172 + 16) = xmmword_25FB61DF0;
      *(void *)(v172 + 32) = v205;
      uint64_t v173 = dispatch thunk of TokenizerRunner.vocabularyCount.getter();
      PrefixGuidedLanguageModel.init(allowedPrefixes:illegalPrefixes:stopTokenIDs:vocabSize:)(v105, v158, v172, v173, (uint64_t)&v209);
      uint64_t v174 = v210;
      uint64_t v175 = v211;
      long long v208 = v209;
      uint64_t v176 = v185;
      v185[3] = (uint64_t)&type metadata for PrefixGuidedLanguageModel;
      v176[4] = (uint64_t)&protocol witness table for PrefixGuidedLanguageModel;
      uint64_t v177 = swift_allocObject();
      uint64_t *v176 = v177;
      *(_OWORD *)(v177 + 16) = v208;
      *(void *)(v177 + 32) = v174;
      *(void *)(v177 + 40) = v175;
      (*(void (**)(void, uint64_t))(v59 + 8))(v204, v178);
      goto LABEL_49;
    }
    int v86 = v36;
    uint64_t v70 = v206;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Log.device);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = v59;
      uint64_t v91 = v30;
      unint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v92 = 0;
      _os_log_impl(&dword_25FA51000, v88, v89, "Building grammar from schema", v92, 2u);
      unint64_t v93 = v92;
      uint64_t v30 = v91;
      uint64_t v59 = v90;
      MEMORY[0x261206F80](v93, -1, -1);
    }

    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v186, v86, v30);
    Schema.init(type:)();
    Grammar.init(schema:)();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v86, v30);
LABEL_36:
    outlined destroy of DataStreamState?(v70, &demangling cache variable for type metadata for Grammar?);
    uint64_t v128 = v196;
    ((void (*)(char *, void, uint64_t, uint64_t))v193)(v53, 0, 1, v196);
    outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v53, v70, &demangling cache variable for type metadata for Grammar?);
    uint64_t v129 = v194;
    outlined init with copy of (Int, LogitCollection)(v70, v194, &demangling cache variable for type metadata for Grammar?);
    uint64_t v130 = v195;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v129, 1, v128) == 1)
    {
      outlined destroy of DataStreamState?(v129, &demangling cache variable for type metadata for Grammar?);
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v131 = type metadata accessor for Logger();
      __swift_project_value_buffer(v131, (uint64_t)static Log.device);
      int v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v132, v133))
      {
        char v134 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v134 = 0;
        _os_log_impl(&dword_25FA51000, v132, v133, "No valid constraints provided", v134, 2u);
        MEMORY[0x261206F80](v134, -1, -1);
      }

      char v135 = v198;
      TokenGenerationError.Context.init(debugDescription:underlyingError:)();
      lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
      uint64_t v136 = v202;
      swift_allocError();
      uint64_t v138 = v137;
      uint64_t v140 = v199;
      uint64_t v139 = v200;
      (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v137, v135, v200);
      (*(void (**)(uint64_t, void, uint64_t))(v201 + 104))(v138, *MEMORY[0x263F7F810], v136);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v135, v139);
      uint64_t v73 = v70;
      return outlined destroy of DataStreamState?(v73, &demangling cache variable for type metadata for Grammar?);
    }
    uint64_t v141 = v189;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v189, v129, v128);
    uint64_t v211 = type metadata accessor for TokenizerRunner();
    uint64_t v212 = MEMORY[0x263F7FC08];
    *(void *)&long long v209 = v208;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v142 = swift_allocObject();
    long long v204 = xmmword_25FB61DF0;
    *(_OWORD *)(v142 + 16) = xmmword_25FB61DF0;
    *(void *)(v142 + 32) = v205;
    swift_retain();
    Grammar.characterSetsUsedInGrammar.getter();
    uint64_t v143 = v190;
    GuidedGenerationVocabularyManager.init(tokenizer:stopTokenIDs:characterSetsUsedInGrammar:)();
    GuidedGenerationVocabularyManager.initVocabManager()();
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v179, v141, v128);
    uint64_t v144 = v182;
    (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v180, v143, v192);
    unint64_t v145 = v191;
    GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)();
    uint64_t v146 = v183;
    uint64_t v147 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
    uint64_t v148 = v181;
    char v149 = v145;
    uint64_t v150 = v184;
    v147(v181, v149, v184);
    uint64_t v151 = type metadata accessor for GrammarGuidedLanguageModel();
    uint64_t v152 = swift_allocObject();
    *(void *)(v152 + 16) = 0;
    v147((char *)(v152 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints), v148, v150);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>);
    uint64_t v153 = swift_allocObject();
    *(_OWORD *)(v153 + 16) = v204;
    unint64_t v154 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(void *)(v153 + 32) = 0;
    *(void *)(v153 + 40) = 0;
    *(_WORD *)(v153 + 48) = 257;
    *(void *)(v153 + 56) = 0;
    *(unsigned char *)(v153 + 64) = 1;
    *(void *)(v153 + 72) = v154;
    uint64_t v155 = *(void (**)(char *, uint64_t))(v146 + 8);
    uint64_t v156 = v206;
    v155(v148, v150);
    *(void *)(v152 + 24) = v153;
    uint64_t v157 = v185;
    v185[3] = v151;
    v157[4] = (uint64_t)&protocol witness table for GrammarGuidedLanguageModel;
    uint64_t *v157 = v152;
    v155(v191, v150);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v190, v192);
    (*(void (**)(char *, uint64_t))(v195 + 8))(v189, v196);
LABEL_49:
    uint64_t v73 = v156;
    return outlined destroy of DataStreamState?(v73, &demangling cache variable for type metadata for Grammar?);
  }
  if (v58 == *MEMORY[0x263F7F850])
  {
    uint64_t v205 = v57;
    (*(void (**)(char *, uint64_t))(v38 + 96))(v41, v37);
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Log.device);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    BOOL v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = v206;
    if (v69)
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_25FA51000, v67, v68, "Building grammar from grammar definition", v71, 2u);
      MEMORY[0x261206F80](v71, -1, -1);
    }

    os_log_type_t v72 = v207;
    Grammar.init(backusNaurForm:prependSpaceToRootRule:)();
    long long v207 = v72;
    if (v72)
    {
      uint64_t v73 = v70;
      return outlined destroy of DataStreamState?(v73, &demangling cache variable for type metadata for Grammar?);
    }
    uint64_t v53 = v49;
    goto LABEL_36;
  }
  if (v58 == *MEMORY[0x263F7F840])
  {
    (*(void (**)(char *, uint64_t))(v38 + 96))(v41, v37);
    swift_bridgeObjectRelease();
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Log.device);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v206;
    if (v77)
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl(&dword_25FA51000, v75, v76, "partialGrammar not support by inference provider. Use .grammar", v79, 2u);
      MEMORY[0x261206F80](v79, -1, -1);
    }

    uint64_t v80 = v198;
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
    uint64_t v81 = v202;
    swift_allocError();
    uint64_t v83 = v82;
    uint64_t v85 = v199;
    uint64_t v84 = v200;
    (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v82, v80, v200);
    (*(void (**)(uint64_t, void, uint64_t))(v201 + 104))(v83, *MEMORY[0x263F7F810], v81);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v80, v84);
    uint64_t v73 = v78;
    return outlined destroy of DataStreamState?(v73, &demangling cache variable for type metadata for Grammar?);
  }
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Log.device);
  char v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v95, v96))
  {
    int v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v97 = 0;
    _os_log_impl(&dword_25FA51000, v95, v96, "Unknown constriant type provided", v97, 2u);
    MEMORY[0x261206F80](v97, -1, -1);
  }

  char v98 = v198;
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
  uint64_t v99 = v202;
  swift_allocError();
  uint64_t v101 = v100;
  uint64_t v103 = v199;
  uint64_t v102 = v200;
  (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v100, v98, v200);
  (*(void (**)(uint64_t, void, uint64_t))(v201 + 104))(v101, *MEMORY[0x263F7F810], v99);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v98, v102);
  outlined destroy of DataStreamState?(v206, &demangling cache variable for type metadata for Grammar?);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v41, v37);
}

uint64_t OnDeviceInferenceContextFactory.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceContextFactory()
{
  return self;
}

void *specialized SpeculativeLanguageModel.init(target:speculative:stepCount:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v13[3] = type metadata accessor for PromptLookupLanguageModel();
  v13[4] = &protocol witness table for PromptLookupLanguageModel;
  v13[0] = a2;
  a4[14] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)(a4 + 2));
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v13, (uint64_t)(a4 + 7));
  a4[12] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  swift_beginAccess();
  *(void *)(inited + 40) = *(void *)(a2 + 16);
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  a4[13] = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return a4;
}

uint64_t specialized OnDeviceInferenceContext.init(decoder:tokenizer:tokenIDToTextConverter:inferenceAssetObjects:specialTokensMap:localizationMetadata:classifierMetadata:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for TokenIDToTextConverter();
  uint64_t v18 = MEMORY[0x263F7FBC0];
  *(void *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = v18;
  *(void *)(a9 + 64) = a3;
  *(void *)(a9 + 144) = 0;
  *(unsigned char *)(a9 + 152) = 1;
  *(void *)(a9 + 160) = 0;
  *(void *)(a9 + 168) = 0;
  *(void *)(a9 + 176) = 1;
  outlined init with take of LogitCollection(a1, a9 + 16);
  *(void *)(a9 + 56) = a2;
  *(void *)(a9 + 104) = a4;
  *(void *)(a9 + 112) = a5;
  *(void *)(a9 + 120) = a6;
  *(void *)(a9 + 128) = a7;
  *(void *)(a9 + 136) = a8;
  return a9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTf4ng_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v11;
    uint64_t v5 = a1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = dispatch thunk of TokenizerRunner.tokenize(_:)();
      if (v1) {
        break;
      }
      uint64_t v7 = v6;
      swift_bridgeObjectRelease();
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      v5 += 16;
      *(void *)(v11 + 16) = v9 + 1;
      *(void *)(v11 + 8 * v9 + 32) = v7;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_25FAF5E34()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25FAF5FF4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, a2, *(void *)(v3 + 16), *(int64_t **)(v3 + 24), *(void *)(v3 + 32), *(uint8_t **)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3, *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80));
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, v3[3], v3[4], v3[5], a2, a3);
}

uint64_t partial apply for closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, *(void *)(v3 + 24), *(void *)(v3 + 32), a2, a3);
}

uint64_t partial apply for closure #2 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)partial apply@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, a2, a3);
}

uint64_t OnDeviceInferenceOverrides.init()()
{
  return Overridable<A>.init(key:)();
}

uint64_t type metadata accessor for OnDeviceInferenceOverrides()
{
  uint64_t result = type metadata singleton initialization cache for OnDeviceInferenceOverrides;
  if (!type metadata singleton initialization cache for OnDeviceInferenceOverrides) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for OnDeviceInferenceOverrides(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    uint64_t v22 = *(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v22(a1, a2, v7);
    v22(&a1[a3[5]], (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v8 = a3[6];
    unint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v25(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    v21(v13, v14, v20);
    v25(&a1[a3[8]], (char *)a2 + a3[8], v11);
    uint64_t v15 = a3[9];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v23(v16, v17, v24);
    v22(&a1[a3[10]], (uint64_t *)((char *)a2 + a3[10]), v7);
    v22(&a1[a3[11]], (uint64_t *)((char *)a2 + a3[11]), v7);
    v22(&a1[a3[12]], (uint64_t *)((char *)a2 + a3[12]), v7);
    v22(&a1[a3[13]], (uint64_t *)((char *)a2 + a3[13]), v7);
    v21(&a1[a3[14]], (char *)a2 + a3[14], v20);
    v22(&a1[a3[15]], (uint64_t *)((char *)a2 + a3[15]), v7);
    v21(&a1[a3[16]], (char *)a2 + a3[16], v20);
    v21(&a1[a3[17]], (char *)a2 + a3[17], v20);
    v25(&a1[a3[18]], (char *)a2 + a3[18], v11);
    v23(&a1[a3[19]], (char *)a2 + a3[19], v24);
    v21(&a1[a3[20]], (char *)a2 + a3[20], v20);
  }
  return a1;
}

uint64_t destroy for OnDeviceInferenceOverrides(uint64_t a1, int *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  uint64_t v17 = v7;
  v8(v6, v7);
  uint64_t v18 = v8;
  unint64_t v9 = v8;
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v19)((void *)(v11 - 8), v10, v11);
  v9(a1 + a2[8], v7);
  uint64_t v12 = a1 + a2[9];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  v5(a1 + a2[10], v4);
  v5(a1 + a2[11], v4);
  v5(a1 + a2[12], v4);
  v5(a1 + a2[13], v4);
  v19(a1 + a2[14], v11);
  v5(a1 + a2[15], v4);
  v19(a1 + a2[16], v11);
  v19(a1 + a2[17], v11);
  v18(a1 + a2[18], v17);
  v14(a1 + a2[19], v13);
  uint64_t v15 = a1 + a2[20];

  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v15, v11);
}

uint64_t initializeWithCopy for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v20(a1, a2, v6);
  v20(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v23(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  v19(v12, v13, v18);
  v23(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
  v21(v15, v16, v22);
  v20(a1 + a3[10], a2 + a3[10], v6);
  v20(a1 + a3[11], a2 + a3[11], v6);
  v20(a1 + a3[12], a2 + a3[12], v6);
  v20(a1 + a3[13], a2 + a3[13], v6);
  v19(a1 + a3[14], a2 + a3[14], v18);
  v20(a1 + a3[15], a2 + a3[15], v6);
  v19(a1 + a3[16], a2 + a3[16], v18);
  v19(a1 + a3[17], a2 + a3[17], v18);
  v23(a1 + a3[18], a2 + a3[18], v10);
  v21(a1 + a3[19], a2 + a3[19], v22);
  v19(a1 + a3[20], a2 + a3[20], v18);
  return a1;
}

uint64_t assignWithCopy for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v20(a1, a2, v6);
  v20(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v23(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24);
  v19(v12, v13, v18);
  v23(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24);
  v21(v15, v16, v22);
  v20(a1 + a3[10], a2 + a3[10], v6);
  v20(a1 + a3[11], a2 + a3[11], v6);
  v20(a1 + a3[12], a2 + a3[12], v6);
  v20(a1 + a3[13], a2 + a3[13], v6);
  v19(a1 + a3[14], a2 + a3[14], v18);
  v20(a1 + a3[15], a2 + a3[15], v6);
  v19(a1 + a3[16], a2 + a3[16], v18);
  v19(a1 + a3[17], a2 + a3[17], v18);
  v23(a1 + a3[18], a2 + a3[18], v10);
  v21(a1 + a3[19], a2 + a3[19], v22);
  v19(a1 + a3[20], a2 + a3[20], v18);
  return a1;
}

uint64_t initializeWithTake for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v20(a1, a2, v6);
  v20(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v23(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32);
  v19(v12, v13, v18);
  v23(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32);
  v21(v15, v16, v22);
  v20(a1 + a3[10], a2 + a3[10], v6);
  v20(a1 + a3[11], a2 + a3[11], v6);
  v20(a1 + a3[12], a2 + a3[12], v6);
  v20(a1 + a3[13], a2 + a3[13], v6);
  v19(a1 + a3[14], a2 + a3[14], v18);
  v20(a1 + a3[15], a2 + a3[15], v6);
  v19(a1 + a3[16], a2 + a3[16], v18);
  v19(a1 + a3[17], a2 + a3[17], v18);
  v23(a1 + a3[18], a2 + a3[18], v10);
  v21(a1 + a3[19], a2 + a3[19], v22);
  v19(a1 + a3[20], a2 + a3[20], v18);
  return a1;
}

uint64_t assignWithTake for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v20(a1, a2, v6);
  v20(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v23(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40);
  v19(v12, v13, v18);
  v23(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40);
  v21(v15, v16, v22);
  v20(a1 + a3[10], a2 + a3[10], v6);
  v20(a1 + a3[11], a2 + a3[11], v6);
  v20(a1 + a3[12], a2 + a3[12], v6);
  v20(a1 + a3[13], a2 + a3[13], v6);
  v19(a1 + a3[14], a2 + a3[14], v18);
  v20(a1 + a3[15], a2 + a3[15], v6);
  v19(a1 + a3[16], a2 + a3[16], v18);
  v19(a1 + a3[17], a2 + a3[17], v18);
  v23(a1 + a3[18], a2 + a3[18], v10);
  v21(a1 + a3[19], a2 + a3[19], v22);
  v19(a1 + a3[20], a2 + a3[20], v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FAF7720);
}

uint64_t sub_25FAF7720(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[9];

  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FAF78DC);
}

uint64_t sub_25FAF78DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[9];

  return v19(v21, a2, a2, v20);
}

void type metadata completion function for OnDeviceInferenceOverrides()
{
  type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<String>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Int>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Bool>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Float>);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for Overridable<String>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Overridable();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t RequestMetadata.shouldDetokenizeRenderedPrompt.getter()
{
  uint64_t v0 = RequestMetadata.userInfo.getter();
  uint64_t ShouldDetokenizeRendered = static RequestMetadata.userInfoKeyShouldDetokenizeRenderedPrompt.getter();
  if (*(void *)(v0 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(ShouldDetokenizeRendered, v2), (v3 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t OnDeviceInferenceProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  OnDeviceInferenceProvider.init()();
  return v0;
}

uint64_t OnDeviceInferenceProvider.init()()
{
  uint64_t v1 = type metadata accessor for OnDeviceInferenceProviderDataSource();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0xD000000000000023;
  *(void *)(v2 + 24) = 0x800000025FB6CBD0;
  v12[3] = v1;
  v12[4] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v12[0] = v2;
  type metadata accessor for TG_OnDeviceInferenceProvider();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v1);
  MEMORY[0x270FA5388](v4, v4);
  uint64_t v6 = (void *)((char *)&v12[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  swift_retain();
  uint64_t v9 = specialized TG_OnDeviceInferenceProvider.init(dataSource:shouldDoVersionCheck:)(v8, 0, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  swift_release();
  *(void *)(v0 + 16) = v9;
  return v0;
}

uint64_t OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for InferenceError();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceProviderAssetDescriptor();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:), 0, 0);
}

uint64_t OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)()
{
  swift_bridgeObjectRetain();
  InferenceProviderAssetDescriptor.init(identifier:version:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:);
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[4];
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKF(v2, v4, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[7] + 32);
  v3(v1, v0[9], v2);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  v3(v4, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = v3;
  v4[7] = a3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for InferenceError();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  uint64_t State = type metadata accessor for LoadState();
  v4[14] = State;
  v4[15] = *(void *)(State - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY0_()
{
  uint64_t v38 = v0;
  uint64_t v36 = InferenceProviderAssetDescriptor.identifier.getter();
  uint64_t v2 = v1;
  v0[18] = v1;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.device);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v6, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[17];
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[15];
  if (v11)
  {
    uint64_t v34 = v0[14];
    unint64_t v15 = v2;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v37 = v35;
    *(_DWORD *)uint64_t v16 = 136446466;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v15, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2082;
    uint64_t v17 = LoadState.rawValue.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v34);
    _os_log_impl(&dword_25FA51000, v9, v10, "transitionAsset called for identifier: %{public}s moving to state %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v35, -1, -1);
    uint64_t v19 = v16;
    uint64_t v2 = v15;
    MEMORY[0x261206F80](v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v21 = v0[15];
  uint64_t v20 = v0[16];
  uint64_t v22 = v0[14];
  v8(v20, v0[5], v22);
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88))(v20, v22);
  if (v23 == *MEMORY[0x263F563A0])
  {
    uint64_t v24 = (void *)swift_task_alloc();
    v0[24] = v24;
    *uint64_t v24 = v0;
    v24[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ6_;
    uint64_t v25 = v0[10];
    return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKF(v36, v2, v25);
  }
  else if (v23 == *MEMORY[0x263F56390])
  {
    __swift_project_boxed_opaque_existential_1((void *)(v0[6] + 136), *(void *)(v0[6] + 160));
    uint64_t v27 = (void *)swift_task_alloc();
    v0[21] = v27;
    *uint64_t v27 = v0;
    v27[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ3_;
    uint64_t v28 = v0[11];
    return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04moveF14ToDynamicState10identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(v36, v2, v28);
  }
  else if (v23 == *MEMORY[0x263F56398])
  {
    uint64_t v29 = InferenceProviderAssetDescriptor.version.getter();
    uint64_t v31 = v30;
    v0[19] = v30;
    uint64_t v32 = (void *)swift_task_alloc();
    v0[20] = v32;
    *uint64_t v32 = v0;
    v32[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ1_;
    uint64_t v33 = v0[13];
    return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKF(v36, v2, v29, v31, v33);
  }
  else
  {
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ1_()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY8_;
  }
  else {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY2_()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ3_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[11];
    uint64_t v3 = v2[12];
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[22] = v7;
    v2[23] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY5_;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY4_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY5_()
{
  (*(void (**)(void, void, void))(v0 + 176))(*(void *)(v0 + 56), *(void *)(v0 + 96), *(void *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTQ6_()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY9_;
  }
  else {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY4_;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY8_()
{
  (*(void (**)(void, void, void))(v0[9] + 32))(v0[7], v0[13], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKFTY9_()
{
  (*(void (**)(void, void, void))(v0[9] + 32))(v0[7], v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t OnDeviceInferenceProvider.requestStream(clientData:configuration:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13);
  unint64_t v15 = (char *)&v36 - v14;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v17 = MEMORY[0x270FA5388](v38, v16);
  uint64_t v37 = (uint64_t)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17, v19);
  uint64_t v21 = (char *)&v36 - v20;
  TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(a1, a2, a3, 0, (uint64_t)&v36 - v20);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.device);
  int v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v39 = v15;
  v23(v12, v15, v7);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v41 = v7;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v43 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v12, v41);
    _os_log_impl(&dword_25FA51000, v24, v25, "Received streaming request %{public}s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    uint64_t v32 = v27;
    uint64_t v7 = v41;
    MEMORY[0x261206F80](v32, -1, -1);
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31(v12, v7);
  }

  outlined init with copy of (Int, LogitCollection)((uint64_t)v21, v37, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<DataStream<PromptCompletionEvent>, Data>);
  uint64_t v34 = v40;
  v40[3] = v33;
  v34[4] = lazy protocol witness table accessor for type AsyncMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncMapSequence<A, B>(&lazy protocol witness table cache variable for type AsyncMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncMapSequence<A, B>, &demangling cache variable for type metadata for AsyncMapSequence<DataStream<PromptCompletionEvent>, Data>);
  __swift_allocate_boxed_opaque_existential_1(v34);
  lazy protocol witness table accessor for type AsyncMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncMapSequence<A, B>(&lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent> and conformance DataStream<A>, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  AsyncMapSequence.init(_:transform:)();
  v31(v39, v7);
  return outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
}

uint64_t TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v6 = v5;
  int v92 = a4;
  unint64_t v106 = a3;
  uint64_t v93 = a1;
  unint64_t v94 = a2;
  uint64_t v98 = a5;
  uint64_t v91 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v89 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91, v7);
  unint64_t v90 = v8;
  id v108 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  uint64_t v96 = *(void *)(v9 - 8);
  uint64_t v97 = v9;
  MEMORY[0x270FA5388](v9, v10);
  char v95 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AuditToken?);
  MEMORY[0x270FA5388](v12 - 8, v13);
  unint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void **)(v16 - 8);
  uint64_t v18 = v17[8];
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  uint64_t v103 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20, v21);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v26 = MEMORY[0x270FA5388](v22, v25);
  uint64_t v28 = (char *)&v68 - v27;
  MEMORY[0x270FA5388](v26, v29);
  uint64_t v31 = (char *)&v68 - v30;
  InferenceProviderRequestConfiguration.requestUUID.getter();
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v17[2];
  int v109 = v28;
  v32(v28, v31, v16);
  int v86 = v32;
  v32(v24, v31, v16);
  unint64_t v88 = v6;
  uint64_t v33 = *(void *)(v6 + 176);
  type metadata accessor for DataStreamCancellationHandler();
  uint64_t v34 = swift_allocObject();
  *(_WORD *)(v34 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = 0;
  *(void *)(v34 + 24) = v35;
  os_log_type_t v110 = v17;
  uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v17[4];
  uint64_t v101 = v24;
  uint64_t v104 = v36;
  uint64_t v105 = v17 + 4;
  v36(v34 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID, v24, v16);
  uint64_t v111 = v34;
  *(void *)(v34 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_dataStreamStateManager) = v33;
  uint64_t v107 = swift_allocObject();
  *(void *)(v107 + 16) = 0;
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = 0;
  swift_retain();
  uint64_t v37 = v31;
  uint64_t v85 = UUID.uuidString.getter();
  uint64_t v84 = v38;
  uint64_t v87 = swift_allocObject();
  *(void *)(v87 + 16) = -1;
  InferenceProviderRequestConfiguration.auditToken.getter();
  uint64_t v39 = type metadata accessor for AuditToken();
  uint64_t v40 = *(void *)(v39 - 8);
  int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1, v39);
  if (v41 == 1)
  {
    outlined destroy of DataStreamState?((uint64_t)v15, &demangling cache variable for type metadata for AuditToken?);
    int v82 = 0;
  }
  else
  {
    int v82 = AuditToken.realUserIdentifier.getter();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v39);
  }
  BOOL v81 = v41 == 1;
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 1;
  uint64_t v80 = swift_allocObject();
  *(unsigned char *)(v80 + 16) = 1;
  uint64_t v79 = swift_allocObject();
  *(unsigned char *)(v79 + 16) = 1;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 1;
  uint64_t v99 = swift_allocObject();
  *(unsigned char *)(v99 + 16) = 1;
  uint64_t v76 = swift_allocObject();
  swift_weakInit();
  uint64_t v83 = v37;
  uint64_t v42 = v86;
  v86(v101, v37, v16);
  uint64_t v43 = v89;
  uint64_t v44 = v91;
  (*(void (**)(char *, unint64_t, uint64_t))(v89 + 16))(v108, v106, v91);
  v42(v103, v109, v16);
  uint64_t v45 = *((unsigned __int8 *)v110 + 80);
  uint64_t v46 = (v45 + 24) & ~v45;
  uint64_t v47 = v16;
  unint64_t v71 = (v18 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (*(unsigned __int8 *)(v43 + 80) + v48 + 8) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  unint64_t v69 = (v90 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v70 = (v45 + v69 + 16) & ~v45;
  uint64_t v74 = v70 + v18;
  unint64_t v50 = (v70 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v106 = (v50 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v90 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = (v90 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v86 = (void (*)(char *, char *, uint64_t))((v88 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v75 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = swift_allocObject();
  unint64_t v52 = v50 + v51;
  unint64_t v68 = (v50 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v51 + 16) = v76;
  uint64_t v53 = v47;
  uint64_t v77 = v47;
  uint64_t v54 = v47;
  unsigned int v55 = v104;
  v104(v51 + v46, v101, v54);
  *(void *)(v51 + v71) = v111;
  *(void *)(v51 + v48) = v100;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v51 + v49, v108, v44);
  uint64_t v56 = (uint64_t *)(v51 + v69);
  uint64_t v57 = v93;
  unint64_t v58 = v94;
  *uint64_t v56 = v93;
  v56[1] = v58;
  v55(v51 + v70, v103, v53);
  *(unsigned char *)(v51 + v74) = v92 & 1;
  uint64_t v59 = v84;
  *(void *)(v52 + 8) = v85;
  *(void *)(v52 + 16) = v59;
  unint64_t v60 = v51 + v68;
  *(_DWORD *)unint64_t v60 = v82;
  *(unsigned char *)(v60 + 4) = v81;
  *(void *)(v51 + v106) = v107;
  *(void *)(v51 + v90) = v87;
  *(void *)(v51 + v88) = v102;
  *(void *)((char *)v86 + v51) = v80;
  *(void *)(v51 + v75) = v99;
  *(void *)(v51 + v73) = v79;
  *(void *)(v51 + v72) = v78;
  swift_retain();
  swift_retain();
  outlined copy of Data._Representation(v57, v58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  uint64_t v61 = v95;
  AsyncThrowingStream.init<>(unfolding:)();
  uint64_t v62 = v77;
  ((void (*)(char *, uint64_t))v110[1])(v109, v77);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v64 = v98;
  v104(v98 + *(int *)(v63 + 32), v83, v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v64, v61, v97);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v65 = (void (**)())(v64 + *(int *)(v63 + 28));
  uint64_t v66 = (void (*)())v111;
  *uint64_t v65 = partial apply for closure #2 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  v65[1] = v66;
  return swift_release();
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  uint64_t v3 = type metadata accessor for CompletePromptResponseElement();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:), 0, 0);
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)()
{
  outlined init with copy of DeterministicLanguageModelProtocol(v0[8], (uint64_t)(v0 + 2));
  CompletePromptResponseElement.init(_:)();
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, MEMORY[0x263F7FA20]);
  uint64_t v1 = static Serialization.encode<A>(_:)();
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t *)v0[7];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  *uint64_t v4 = v1;
  v4[1] = v3;
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for InferenceError.Context();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InferenceError();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientData();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](OnDeviceInferenceProvider.requestOneShot(clientData:configuration:), 0, 0);
}

uint64_t OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)()
{
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  outlined copy of Data._Representation(v2, v1);
  MEMORY[0x261204E60](v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  *uint64_t v3 = v0;
  v3[1] = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[4];
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKF(v4, v5, v7, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 104);
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v2 + 144) = v6;
  *(void *)(v2 + 152) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  if (v0) {
    uint64_t v7 = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
  }
  else {
    uint64_t v7 = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t);
  uint64_t v17;
  uint64_t v18;

  unint64_t v1 = ClientData.data.getter();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v4 = v0[16];
  if (v2 >> 60 == 15)
  {
    uint64_t v17 = v0[13];
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];
    unint64_t v8 = v0[8];
    uint64_t v9 = v0[6];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v8, v9);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v11, *MEMORY[0x263F56280], v5);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    v3(v4, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = v1;
    unint64_t v15 = v2;
    v3(v0[16], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v16(v14, v15);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  unint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 32);
  v3(v1, v0[12], v2);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  v3(v4, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = v4;
  v5[14] = a4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = type metadata accessor for InferenceProviderRequestConfiguration();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InferenceError.Context();
  v5[18] = v7;
  v5[19] = *(void *)(v7 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CompletePromptResponse();
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PromptCompletion();
  v5[24] = v9;
  v5[25] = *(void *)(v9 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v5[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v5[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PromptTemplateInfo();
  v5[32] = v10;
  v5[33] = *(void *)(v10 - 8);
  v5[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  v5[35] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CountTokensPromptTemplateRequest();
  v5[36] = v11;
  v5[37] = *(void *)(v11 - 8);
  v5[38] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for InferenceError();
  v5[39] = v12;
  unsigned char v5[40] = *(void *)(v12 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  v5[46] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for RequestMetadata();
  v5[47] = v13;
  v5[48] = *(void *)(v13 - 8);
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Prompt();
  v5[51] = v14;
  v5[52] = *(void *)(v14 - 8);
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for CountTokensRequest();
  v5[55] = v15;
  v5[56] = *(void *)(v15 - 8);
  v5[57] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for RequestPayload();
  v5[58] = v16;
  v5[59] = *(void *)(v16 - 8);
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  v5[64] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for UUID();
  v5[65] = v17;
  v5[66] = *(void *)(v17 - 8);
  v5[67] = swift_task_alloc();
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  v5[70] = swift_task_alloc();
  v5[71] = swift_task_alloc();
  v5[72] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY0_()
{
  os_log_type_t v133 = v0;
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[66];
  uint64_t v4 = v0[65];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v125(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[71];
  uint64_t v10 = v0[66];
  uint64_t v11 = v0[65];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v131 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v16(v9, v11);
    _os_log_impl(&dword_25FA51000, v6, v7, "Received one shot request %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v13, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v16(v0[71], v0[65]);
  }

  uint64_t v130 = v16;
  v0[73] = v16;
  uint64_t v17 = ClientData.data.getter();
  if (v18 >> 60 == 15) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v17;
  }
  if (v18 >> 60 == 15) {
    unint64_t v20 = 0xC000000000000000;
  }
  else {
    unint64_t v20 = v18;
  }
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type RequestPayload and conformance RequestPayload, MEMORY[0x263F7F8B8]);
  static Serialization.decode<A>(_:from:)();
  uint64_t v22 = v0[63];
  uint64_t v21 = v0[64];
  uint64_t v23 = v0[62];
  uint64_t v25 = v0[58];
  uint64_t v24 = v0[59];
  outlined consume of Data._Representation(v19, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v21, v22, v25);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v26(v23, v21, v25);
  int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25);
  if (v27 == *MEMORY[0x263F7F898])
  {
    uint64_t v28 = v0[72];
    uint64_t v29 = v0[70];
    uint64_t v30 = v0[65];
    uint64_t v31 = v0[62];
    uint64_t v32 = v0[56];
    uint64_t v33 = v0[57];
    uint64_t v34 = v0[55];
    (*(void (**)(uint64_t, void))(v0[59] + 96))(v31, v0[58]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v33, v31, v34);
    v125(v29, v28, v30);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v0[70];
    uint64_t v39 = v0[65];
    if (v37)
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v131 = v41;
      *(_DWORD *)uint64_t v40 = 136446210;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v130(v38, v39);
      _os_log_impl(&dword_25FA51000, v35, v36, "Handling request %{public}s as count tokens request", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v41, -1, -1);
      MEMORY[0x261206F80](v40, -1, -1);
    }
    else
    {
      v130(v0[70], v0[65]);
    }

    uint64_t v62 = v0[50];
    uint64_t v63 = v0[47];
    uint64_t v64 = v0[48];
    CountTokensRequest.prompt.getter();
    CountTokensRequest.metadata.getter();
    char v65 = RequestMetadata.shouldDetokenizeRenderedPrompt.getter();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
    uint64_t v66 = (void *)swift_task_alloc();
    v0[74] = v66;
    *uint64_t v66 = v0;
    v66[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ1_;
    uint64_t v67 = v0[72];
    uint64_t v68 = v0[54];
    uint64_t v69 = v0[46];
    uint64_t v70 = v0[12];
    uint64_t v71 = v0[10];
    return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKF(v71, v67, v68, v70, v65 & 1, v69);
  }
  else if (v27 == *MEMORY[0x263F7F8B0])
  {
    uint64_t v46 = v0[72];
    uint64_t v47 = v0[69];
    uint64_t v48 = v0[65];
    uint64_t v49 = v0[62];
    uint64_t v50 = v0[37];
    uint64_t v51 = v0[38];
    uint64_t v52 = v0[36];
    (*(void (**)(uint64_t, void))(v0[59] + 96))(v49, v0[58]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v51, v49, v52);
    v125(v47, v46, v48);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = v0[69];
    uint64_t v57 = v0[65];
    if (v55)
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v131 = v59;
      *(_DWORD *)unint64_t v58 = 136446210;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v130(v56, v57);
      _os_log_impl(&dword_25FA51000, v53, v54, "Handling request %{public}s as count tokens template request", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v59, -1, -1);
      MEMORY[0x261206F80](v58, -1, -1);
    }
    else
    {
      v130(v0[69], v0[65]);
    }

    __swift_project_boxed_opaque_existential_1((void *)(v0[13] + 136), *(void *)(v0[13] + 160));
    uint64_t v85 = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
    uint64_t v87 = v86;
    v0[75] = v86;
    unint64_t v88 = (void *)swift_task_alloc();
    v0[76] = v88;
    void *v88 = v0;
    v88[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ3_;
    uint64_t v89 = v0[44];
    uint64_t v90 = v0[35];
    return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC035fetchPromptTemplateConfigurationForF6Bundle10identifierAA0ijK0VSgSS_tYa20ModelManagerServices0C5ErrorOYKF(v90, v85, v87, v89);
  }
  else if (v27 == *MEMORY[0x263F7F8A0] || v27 == *MEMORY[0x263F7F8A8])
  {
    uint64_t v91 = v0[62];
    uint64_t v92 = v0[58];
    uint64_t v93 = v0[59];
    uint64_t v94 = v0[30];
    unint64_t v95 = v0[12];
    uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
    v0[81] = v96;
    v0[82] = (v93 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v96(v91, v92);
    uint64_t v97 = ClientData.data.getter();
    if (v98 >> 60 == 15) {
      uint64_t v99 = 0;
    }
    else {
      uint64_t v99 = v97;
    }
    if (v98 >> 60 == 15) {
      unint64_t v100 = 0xC000000000000000;
    }
    else {
      unint64_t v100 = v98;
    }
    TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(v99, v100, v95, 1, v94);
    outlined consume of Data._Representation(v99, v100);
    uint64_t v101 = (void *)swift_task_alloc();
    v0[83] = v101;
    uint64_t v102 = lazy protocol witness table accessor for type AsyncMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncMapSequence<A, B>(&lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent> and conformance DataStream<A>, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
    *uint64_t v101 = v0;
    v101[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ10_;
    uint64_t v104 = v0[29];
    uint64_t v103 = v0[30];
    uint64_t v105 = v0[27];
    return MEMORY[0x270F7ED70](v105, v103, v104, v102);
  }
  else
  {
    uint64_t v72 = v0[64];
    uint64_t v73 = v0[61];
    uint64_t v74 = v0[58];
    v125(v0[68], v0[72], v0[65]);
    v26(v73, v72, v74);
    unint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    uint64_t v127 = v75;
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v0[68];
    uint64_t v79 = v0[65];
    uint64_t v123 = v0[61];
    if (v77)
    {
      uint64_t v126 = v0[59];
      uint64_t v117 = v0[60];
      uint64_t v118 = v0[58];
      uint64_t v80 = swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      uint64_t v131 = v121;
      *(_DWORD *)uint64_t v80 = 136315395;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v130(v78, v79);
      *(_WORD *)(v80 + 12) = 2085;
      v26(v117, v123, v118);
      uint64_t v83 = String.init<A>(describing:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v129(v123, v118);
      _os_log_impl(&dword_25FA51000, v127, v76, "Failing request%s unhandled request type %{sensitive}s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v121, -1, -1);
      MEMORY[0x261206F80](v80, -1, -1);
    }
    else
    {
      uint64_t v106 = v0[58];
      uint64_t v107 = v0[59];
      v130(v78, v79);
      uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v129(v123, v106);
    }

    uint64_t v122 = v0[65];
    uint64_t v124 = v0[72];
    uint64_t v119 = v0[64];
    uint64_t v128 = v0[62];
    uint64_t v108 = v0[58];
    uint64_t v110 = v0[40];
    uint64_t v109 = v0[41];
    uint64_t v111 = v0[39];
    uint64_t v113 = v0[19];
    uint64_t v112 = v0[20];
    uint64_t v114 = v0[18];
    *(void *)os_log_type_t type = v0[14];
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    unint64_t v115 = v132;
    v0[2] = v131;
    v0[3] = v115;
    v116._object = (void *)0x800000025FB6CCA0;
    v116._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v116);
    _print_unlocked<A, B>(_:_:)();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16))(v109, v112, v114);
    (*(void (**)(uint64_t, void, uint64_t))(v110 + 104))(v109, *MEMORY[0x263F562B0], v111);
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v114);
    v129(v119, v108);
    v130(v124, v122);
    (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v110 + 32))(*(os_log_type_t **)type, v109, v111);
    v129(v128, v108);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = (uint64_t (*)(void))v0[1];
    return v44();
  }
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ1_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[52] + 8))(v2[54], v2[51]);
  if (v0) {
    uint64_t v3 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY12_;
  }
  else {
    uint64_t v3 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY2_()
{
  uint64_t v1 = v0[59];
  (*(void (**)(void, void))(v0[56] + 8))(v0[57], v0[55]);
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[65];
  (*(void (**)(void, void))(v1 + 8))(v0[64], v0[58]);
  v2(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ3_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[44];
    uint64_t v3 = v2[45];
    uint64_t v5 = v2[39];
    uint64_t v6 = v2[40];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[78] = v7;
    v2[79] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    swift_bridgeObjectRelease();
    BOOL v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY6_;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY4_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY4_()
{
  uint64_t v1 = CountTokensPromptTemplateRequest.promptTemplateInfo.getter();
  MEMORY[0x261204830](v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[77] = v2;
  void *v2 = v0;
  v2[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ5_;
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[31];
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKF(v3, v5, v6, v7, v4);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ5_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = v2[34];
  uint64_t v4 = v2[33];
  uint64_t v5 = v2[32];
  outlined destroy of DataStreamState?(v2[31], &demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY13_;
  }
  else {
    uint64_t v6 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY7_;
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY6_()
{
  uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t))v0[78];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[64];
  uint64_t v4 = v0[58];
  uint64_t v5 = v0[59];
  uint64_t v6 = v0[45];
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[14];
  (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v11(v1, v2);
  v12(v8, v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY7_()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[47];
  CountTokensPromptTemplateRequest.metadata.getter();
  char v4 = RequestMetadata.shouldDetokenizeRenderedPrompt.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[80] = v5;
  *uint64_t v5 = v0;
  v5[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ8_;
  uint64_t v6 = v0[72];
  uint64_t v7 = v0[53];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[10];
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKF(v10, v6, v7, v9, v4 & 1, v8);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ8_()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY14_;
  }
  else {
    uint64_t v1 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY9_;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY9_()
{
  uint64_t v1 = v0[59];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  (*(void (**)(void, void))(v0[52] + 8))(v0[53], v0[51]);
  outlined destroy of DataStreamState?(v5, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v7 = v0[72];
  uint64_t v8 = v0[65];
  (*(void (**)(void, void))(v1 + 8))(v0[64], v0[58]);
  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTQ10_()
{
  *(void *)(*(void *)v1 + 672) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY15_;
  }
  else {
    uint64_t v2 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY11_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY11_()
{
  uint64_t v1 = *(void *)(v0 + 672);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 32))(v2, *(void *)(v0 + 216), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  CompletePromptResponse.init(completion:)();
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse, MEMORY[0x263F7F978]);
  uint64_t v6 = static Serialization.encode<A>(_:)();
  if (v1)
  {
    return swift_unexpectedError();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 168);
    MEMORY[0x261204E60](v6);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    outlined destroy of DataStreamState?(v8, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 584);
    uint64_t v16 = *(void *)(v0 + 576);
    uint64_t v17 = *(void *)(v0 + 520);
    (*(void (**)(void, void))(v0 + 648))(*(void *)(v0 + 512), *(void *)(v0 + 464));
    v15(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY12_()
{
  uint64_t v11 = v0[72];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[59];
  uint64_t v5 = v0[46];
  uint64_t v7 = v0[39];
  uint64_t v6 = v0[40];
  uint64_t v8 = v0[14];
  (*(void (**)(void, void))(v0[56] + 8))(v0[57], v0[55]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v12(v11, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY13_()
{
  uint64_t v11 = v0[65];
  uint64_t v12 = v0[72];
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[59];
  uint64_t v14 = v0[43];
  unint64_t v15 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v4 = v0[40];
  uint64_t v13 = v0[39];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  uint64_t v7 = v0[36];
  uint64_t v8 = v0[14];
  outlined destroy of DataStreamState?(v0[35], &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v15(v12, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8, v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY14_()
{
  uint64_t v15 = v0[72];
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[59];
  uint64_t v13 = v0[42];
  uint64_t v14 = v0[65];
  uint64_t v4 = v0[40];
  uint64_t v12 = v0[39];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  uint64_t v8 = v0[35];
  uint64_t v7 = v0[36];
  uint64_t v9 = v0[14];
  (*(void (**)(void, void))(v0[52] + 8))(v0[53], v0[51]);
  outlined destroy of DataStreamState?(v8, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v16(v15, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKFTY15_()
{
  uint64_t v1 = (void *)v0[84];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[81];
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[73];
  uint64_t v9 = v0[72];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[64];
  uint64_t v5 = v0[58];
  uint64_t v6 = v0[30];
  convertToInferenceError(_:)(v1, v0[14]);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

  outlined destroy of DataStreamState?(v6, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v2(v4, v5);
  v10(v9, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t OnDeviceInferenceProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t OnDeviceInferenceProvider.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for InferenceProvider.init() in conformance OnDeviceInferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  uint64_t result = OnDeviceInferenceProvider.init()();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for InferenceProvider.loadIn(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return MEMORY[0x270F4C2C8](a1, a2, a3, a4);
}

uint64_t protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return MEMORY[0x270F4C2C8](a1, a2, a3, a4);
}

uint64_t protocol witness for InferenceProvider.transitionAsset(withIdentifier:to:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)(a1, a2, a3);
}

uint64_t protocol witness for InferenceProvider.requestStream(clientData:configuration:) in conformance OnDeviceInferenceProvider@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return OnDeviceInferenceProvider.requestStream(clientData:configuration:)(a1, a2, a3, a4);
}

uint64_t protocol witness for InferenceProvider.requestStream(clientData:configuration:) in conformance OnDeviceInferenceProvider()
{
  return MEMORY[0x270F4C2B0]();
}

uint64_t protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider;
  return OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return MEMORY[0x270F4C2B8](a1, a2, a3, a4, a5);
}

uint64_t protocol witness for InferenceProvider.cancelRequest(uuid:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return MEMORY[0x270F4C2A8](a1, a2, a3);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[42] = v5;
  v6[43] = a5;
  v6[40] = a3;
  v6[41] = a4;
  v6[38] = a1;
  v6[39] = a2;
  uint64_t v7 = type metadata accessor for InferenceError();
  v6[44] = v7;
  v6[45] = *(void *)(v7 - 8);
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  v6[50] = swift_task_alloc();
  v6[51] = swift_task_alloc();
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  v6[56] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v44 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 456) = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 312);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 304);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    id v43 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Handling load in for asset with identifier %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v8, -1, -1);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (*(void *)(v0 + 304) == 0xD000000000000017 && *(void *)(v0 + 312) == 0x800000025FB6C9E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v10 = (void *)(v9 + 16);
    __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
    *(void *)(v0 + 464) = type metadata accessor for OnDeviceInferenceOverrides();
    *(void *)(v0 + 472) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    uint64_t v11 = *(void *)(v0 + 144);
    if (v11) {
      unint64_t v12 = *(void *)(v0 + 136);
    }
    else {
      unint64_t v12 = 0xD000000000000024;
    }
    if (v11) {
      unint64_t v13 = *(void *)(v0 + 144);
    }
    else {
      unint64_t v13 = 0x800000025FB6CE20;
    }
    *(void *)(v0 + 280) = MEMORY[0x263F8EE88];
    uint64_t v14 = self;
    *(void *)(v0 + 480) = v14;
    id v15 = objc_msgSend(v14, sel_defaultManager);
    uint64_t v16 = (void *)MEMORY[0x2612053D0](v12, v13);
    unsigned int v17 = objc_msgSend(v15, sel_fileExistsAtPath_, v16);

    uint64_t v42 = (void *)(v9 + 16);
    if (v17)
    {
      __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
      Overridable.wrappedValue.getter();
      uint64_t v18 = *(void *)(v0 + 176);
      if (v18) {
        uint64_t v19 = *(void *)(v0 + 168);
      }
      else {
        uint64_t v19 = 1634889580;
      }
      if (v18) {
        unint64_t v20 = *(void *)(v0 + 176);
      }
      else {
        unint64_t v20 = 0xE400000000000000;
      }
      id v21 = objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
      uint64_t v22 = (void *)MEMORY[0x2612053D0](0, 0xE000000000000000);
      uint64_t v23 = (void *)MEMORY[0x2612053D0](v19, v20);
      swift_bridgeObjectRelease();
      uint64_t v24 = (void *)MEMORY[0x2612053D0](v12, v13);
      swift_bridgeObjectRelease();
      id v25 = objc_msgSend(v21, sel_initWithAdapterType_symbolName_mutableWeightsFilePath_, v22, v23, v24);

      uint64_t v10 = (void *)(v9 + 16);
      specialized Set._Variant.insert(_:)(&v43, v25);

      uint64_t v26 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = 0;
    }
    *(void *)(v0 + 488) = v26;
    __swift_project_boxed_opaque_existential_1(v10, *(void *)(v9 + 40));
    Overridable.wrappedValue.getter();
    unint64_t v27 = *(void *)(v0 + 152);
    unint64_t v28 = *(void *)(v0 + 160);
    uint64_t v41 = v9;
    if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    if (v28)
    {
      unint64_t v29 = v27;
    }
    else
    {
      unint64_t v28 = 0x800000025FB6CA50;
      unint64_t v29 = 0xD00000000000001DLL;
    }
    uint64_t v40 = *(void *)(v0 + 336);
    id v30 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    uint64_t v31 = (void *)MEMORY[0x2612053D0](v29, v28);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 496) = type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    *(void *)(v0 + 504) = lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 512) = type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
    *(void *)(v0 + 520) = lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
    Class v33 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 528) = objc_msgSend(v30, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, v26, v31, isa, v33);

    outlined init with copy of DeterministicLanguageModelProtocol(v40 + 136, v0 + 16);
    uint64_t v34 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
    *(void *)(v0 + 536) = v34;
    __swift_project_boxed_opaque_existential_1(v42, *(void *)(v41 + 40));
    Overridable.wrappedValue.getter();
    *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 184);
    uint64_t v35 = *v34;
    os_log_type_t v36 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY1_;
  }
  else
  {
    uint64_t v37 = *(void *)(v0 + 336);
    uint64_t v38 = __swift_project_boxed_opaque_existential_1((void *)(v37 + 136), *(void *)(v37 + 160));
    *(void *)(v0 + 648) = v38;
    *(unsigned char *)(v0 + 95) = *(unsigned char *)(v37 + 224);
    uint64_t v35 = *v38;
    os_log_type_t v36 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY10_;
  }
  return MEMORY[0x270FA2498](v36, v35, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY1_()
{
  uint64_t v1 = v0[69];
  if (v1) {
    uint64_t v2 = v0[68];
  }
  else {
    uint64_t v2 = 0xD00000000000001ALL;
  }
  if (v1) {
    os_log_type_t v3 = (void *)v0[69];
  }
  else {
    os_log_type_t v3 = (void *)0x800000025FB6CA70;
  }
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC19loadTokenizerAtPath4pathySS_t20ModelManagerServices0C5ErrorOYKF(v2, v3, v0[54]);
  v0[70] = 0;
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY2_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY2_()
{
  uint64_t v1 = *(void *)(v0 + 336);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v2 = __swift_project_boxed_opaque_existential_1((void *)(v1 + 136), *(void *)(v1 + 160));
  *(void *)(v0 + 568) = v2;
  *(_OWORD *)(v0 + 56) = xmmword_25FB62AB0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 85) = 0;
  uint64_t v3 = *v2;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY3_, v3, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY3_()
{
  uint64_t v1 = *(void *)(v0 + 560);
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC12loadE5Runner18modelConfiguration16draftingBehaviorySo010TGIE5ModelL4ObjCC_AA08DraftingN0VSgt0P15ManagerServices0C5ErrorOYKF(*(void **)(v0 + 528), (uint64_t *)(v0 + 56), *(void *)(v0 + 416));
  *(void *)(v0 + 576) = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 416);
    uint64_t v2 = *(void *)(v0 + 424);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    *(void *)(v0 + 600) = v6;
    *(void *)(v0 + 608) = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v6(v2, v3, v4);
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY6_;
  }
  else
  {
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY5_;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY4_()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 352);

  v1(v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 584))(v7, *(void *)(v0 + 448), v5);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v9(v8, v7, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v30 = v9;
    uint64_t v12 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 304);
    unint64_t v15 = *(void *)(v0 + 312);
    uint64_t v16 = swift_slowAlloc();
    unint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v32 = v29;
    *(_DWORD *)uint64_t v16 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    v30(v17, v28, v13);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 288) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v27 = v18;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v31(v28, v13);
    _os_log_impl(&dword_25FA51000, v10, v11, "Failed to load asset with identifier %{public}s: %{public}@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v29, -1, -1);
    MEMORY[0x261206F80](v16, -1, -1);

    uint64_t v19 = v30;
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 360);
    uint64_t v20 = *(void *)(v0 + 368);
    uint64_t v22 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease_n();
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v31(v20, v22);

    uint64_t v19 = v9;
  }
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 352);
  v19(*(void *)(v0 + 344), v23, v24);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v31(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY5_()
{
  uint64_t v1 = *(void **)(v0 + 480);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 336) + 16), *(void *)(*(void *)(v0 + 336) + 40));
  Overridable.wrappedValue.getter();
  uint64_t v2 = *(void *)(v0 + 208);
  if (v2) {
    unint64_t v3 = *(void *)(v0 + 200);
  }
  else {
    unint64_t v3 = 0xD000000000000022;
  }
  if (v2) {
    unint64_t v4 = *(void *)(v0 + 208);
  }
  else {
    unint64_t v4 = 0x800000025FB6CA90;
  }
  id v5 = objc_msgSend(v1, sel_defaultManager);
  uint64_t v6 = (void *)MEMORY[0x2612053D0](v3, v4);
  unsigned int v7 = objc_msgSend(v5, sel_fileExistsAtPath_, v6);

  if (v7)
  {
    if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v29 = *(void *)(v0 + 488);
    uint64_t v10 = *(void *)(v0 + 336);
    id v11 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    uint64_t v12 = (void *)MEMORY[0x2612053D0](v3, v4);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v14 = Set._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 616) = objc_msgSend(v11, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, v29, v12, isa, v14);

    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    Overridable.wrappedValue.getter();
    uint64_t v31 = *(void *)(v0 + 248);
    int v30 = *(unsigned __int8 *)(v0 + 256);
    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    Overridable.wrappedValue.getter();
    char v32 = *(unsigned char *)(v0 + 94);
    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    Overridable.wrappedValue.getter();
    if (*(unsigned char *)(v0 + 224)) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = *(void *)(v0 + 216);
    }
    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
    Overridable.wrappedValue.getter();
    uint64_t v16 = *(unsigned int *)(v0 + 236);
    int v17 = *(unsigned __int8 *)(v0 + 240);
    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    Overridable.wrappedValue.getter();
    char v18 = *(unsigned char *)(v0 + 93);
    __swift_project_boxed_opaque_existential_1((void *)(v10 + 16), *(void *)(v10 + 40));
    uint64_t v19 = Overridable.wrappedValue.getter();
    if (v15 < 1)
    {
      __break(1u);
    }
    else
    {
      int v22 = *(_DWORD *)(v0 + 228);
      int v23 = *(unsigned __int8 *)(v0 + 232);
      if (v30) {
        uint64_t v24 = 2;
      }
      else {
        uint64_t v24 = v31;
      }
      id v25 = __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 336) + 136), *(void *)(*(void *)(v0 + 336) + 160));
      *(void *)(v0 + 624) = v25;
      char v26 = 1;
      if (v17) {
        uint64_t v27 = 0x100000000;
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v27 | v16 | ((unint64_t)(v18 & 1) << 48);
      if (!v23) {
        char v26 = 0;
      }
      *(void *)(v0 + 96) = v24;
      *(void *)(v0 + 104) = v32 & 1;
      *(void *)(v0 + 112) = v15;
      *(void *)(v0 + 120) = v28;
      *(unsigned char *)(v0 + 132) = v26;
      *(_DWORD *)(v0 + 128) = v22;
      uint64_t v20 = *v25;
      uint64_t v19 = (uint64_t)_s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY7_;
      uint64_t v21 = 0;
    }
    return MEMORY[0x270FA2498](v19, v20, v21);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY6_()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 352);

  v1(v2, v3, v4);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 600))(v7, *(void *)(v0 + 448), v5);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v9(v8, v7, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    int v30 = v9;
    uint64_t v12 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 304);
    unint64_t v15 = *(void *)(v0 + 312);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v32 = v29;
    *(_DWORD *)uint64_t v16 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    v30(v17, v28, v13);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 288) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v18;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v31(v28, v13);
    _os_log_impl(&dword_25FA51000, v10, v11, "Failed to load asset with identifier %{public}s: %{public}@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v29, -1, -1);
    MEMORY[0x261206F80](v16, -1, -1);

    uint64_t v19 = v30;
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 360);
    uint64_t v20 = *(void *)(v0 + 368);
    uint64_t v22 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease_n();
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v31(v20, v22);

    uint64_t v19 = v9;
  }
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 352);
  v19(*(void *)(v0 + 344), v23, v24);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v31(v23, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY7_()
{
  uint64_t v1 = *(void *)(v0 + 576);
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC12loadE5Runner18modelConfiguration16draftingBehaviorySo010TGIE5ModelL4ObjCC_AA08DraftingN0VSgt0P15ManagerServices0C5ErrorOYKF(*(void **)(v0 + 616), (uint64_t *)(v0 + 96), *(void *)(v0 + 400));
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 400);
    uint64_t v2 = *(void *)(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    *(void *)(v0 + 632) = v6;
    *(void *)(v0 + 640) = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v6(v2, v3, v4);
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY9_;
  }
  else
  {
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY8_;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY8_()
{
  uint64_t v1 = *(void **)(v0 + 616);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY9_()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 632);
  uint64_t v2 = *(void **)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 352);

  v1(v3, v4, v5);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v8 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 632))(v8, *(void *)(v0 + 448), v6);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v10(v9, v8, v6);
  swift_bridgeObjectRetain_n();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v31 = v10;
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v29 = *(void *)(v0 + 368);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 304);
    unint64_t v16 = *(void *)(v0 + 312);
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v33 = v30;
    *(_DWORD *)uint64_t v17 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    v31(v18, v29, v14);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 288) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v28 = v19;
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v32(v29, v14);
    _os_log_impl(&dword_25FA51000, v11, v12, "Failed to load asset with identifier %{public}s: %{public}@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v30, -1, -1);
    MEMORY[0x261206F80](v17, -1, -1);

    uint64_t v20 = v31;
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v23 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease_n();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v32(v21, v23);

    uint64_t v20 = v10;
  }
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 352);
  v20(*(void *)(v0 + 344), v24, v25);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v32(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY10_()
{
  _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC04loadF010identifier7version20shouldDoVersionCheckySS_SSSgSbt20ModelManagerServices0C5ErrorOYKF(*(void **)(v0 + 304), *(void **)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328), *(unsigned __int8 *)(v0 + 95), *(void *)(v0 + 384));
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY11_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY11_()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[38];
    unint64_t v3 = v0[39];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v1, v2, "Successfully loaded asset with identifer %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v6, -1, -1);
    MEMORY[0x261206F80](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC9loadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10Identifier7versionySS_SSSgtYa20ModelManagerServices0C5ErrorOYKFTY12_()
{
  uint64_t v29 = v0;
  (*(void (**)(void, void, void))(v0 + 656))(*(void *)(v0 + 448), *(void *)(v0 + 392), *(void *)(v0 + 352));
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 656))(v3, *(void *)(v0 + 448), v1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4, v3, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    char v26 = v5;
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v24 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 304);
    unint64_t v11 = *(void *)(v0 + 312);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v28 = v25;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    v26(v13, v24, v9);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 288) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v14;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v27(v24, v9);
    _os_log_impl(&dword_25FA51000, v6, v7, "Failed to load asset with identifier %{public}s: %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v25, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);

    uint64_t v15 = v26;
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v16 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease_n();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v27(v16, v18);

    uint64_t v15 = v5;
  }
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v20 = *(void *)(v0 + 352);
  v15(*(void *)(v0 + 344), v19, v20);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v27(v19, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = v3;
  v4[32] = a3;
  v4[29] = a1;
  v4[30] = a2;
  uint64_t v5 = type metadata accessor for InferenceError();
  v4[33] = v5;
  v4[34] = *(void *)(v5 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v33 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[46] = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[30];
  if (v4)
  {
    uint64_t v6 = v0[29];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v32 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Handling load out for asset with identifier %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v8, -1, -1);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (v0[29] == 0xD000000000000017 && v0[30] == 0x800000025FB6C9E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v9 = v0[31];
    id v10 = objc_msgSend(self, sel_defaultManager);
    __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
    v0[47] = type metadata accessor for OnDeviceInferenceOverrides();
    v0[48] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    uint64_t v11 = v0[24];
    if (v11) {
      unint64_t v12 = v0[23];
    }
    else {
      unint64_t v12 = 0xD000000000000022;
    }
    if (v11) {
      unint64_t v13 = v0[24];
    }
    else {
      unint64_t v13 = 0x800000025FB6CA90;
    }
    uint64_t v14 = (void *)MEMORY[0x2612053D0](v12, v13);
    swift_bridgeObjectRelease();
    unsigned int v15 = objc_msgSend(v10, sel_fileExistsAtPath_, v14);

    if (v15)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v0[31] + 136, (uint64_t)(v0 + 12));
      __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
      __swift_project_boxed_opaque_existential_1((void *)(v9 + 16), *(void *)(v9 + 40));
      Overridable.wrappedValue.getter();
      unint64_t v16 = v0[19];
      unint64_t v17 = v0[20];
      v0[49] = v17;
      if (v17) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = 0xD000000000000022;
      }
      if (v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = 0x800000025FB6CA90;
      }
      uint64_t v20 = (void *)swift_task_alloc();
      v0[50] = v20;
      *uint64_t v20 = v0;
      v20[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ1_;
      uint64_t v21 = v0[43];
      uint64_t v22 = v18;
      uint64_t v23 = v19;
    }
    else
    {
      uint64_t v24 = v0[31];
      outlined init with copy of DeterministicLanguageModelProtocol(v24 + 136, (uint64_t)(v0 + 7));
      __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
      __swift_project_boxed_opaque_existential_1((void *)(v24 + 16), *(void *)(v24 + 40));
      Overridable.wrappedValue.getter();
      unint64_t v25 = v0[17];
      unint64_t v26 = v0[18];
      v0[53] = v26;
      if (v26) {
        unint64_t v27 = v25;
      }
      else {
        unint64_t v27 = 0xD00000000000001DLL;
      }
      if (v26) {
        unint64_t v28 = v26;
      }
      else {
        unint64_t v28 = 0x800000025FB6CA50;
      }
      uint64_t v29 = (void *)swift_task_alloc();
      v0[54] = v29;
      void *v29 = v0;
      v29[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ4_;
      uint64_t v21 = v0[41];
      uint64_t v22 = v27;
      uint64_t v23 = v28;
    }
  }
  else
  {
    __swift_project_boxed_opaque_existential_1((void *)(v0[31] + 136), *(void *)(v0[31] + 160));
    uint64_t v30 = (void *)swift_task_alloc();
    v0[61] = v30;
    void *v30 = v0;
    v30[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ10_;
    uint64_t v21 = v0[37];
    uint64_t v23 = v0[30];
    uint64_t v22 = v0[29];
  }
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(v22, v23, v21);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ1_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[43];
    uint64_t v3 = v2[44];
    uint64_t v5 = v2[33];
    uint64_t v6 = v2[34];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[51] = v7;
    v2[52] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY3_;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY2_()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  uint64_t v1 = v0[31];
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 136, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  Overridable.wrappedValue.getter();
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  v0[53] = v3;
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0xD00000000000001DLL;
  }
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x800000025FB6CA50;
  }
  uint64_t v6 = (void *)swift_task_alloc();
  v0[54] = v6;
  *uint64_t v6 = v0;
  v6[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ4_;
  uint64_t v7 = v0[41];
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(v4, v5, v7);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY3_()
{
  uint64_t v31 = v0;
  (*(void (**)(void, void, void))(v0 + 408))(*(void *)(v0 + 360), *(void *)(v0 + 352), *(void *)(v0 + 264));
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 408))(v3, *(void *)(v0 + 360), v1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4, v3, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    unint64_t v27 = v5;
    uint64_t v11 = *(void *)(v0 + 232);
    unint64_t v10 = *(void *)(v0 + 240);
    uint64_t v12 = swift_slowAlloc();
    unint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    uint64_t v13 = v9;
    swift_allocError();
    uint64_t v14 = v28;
    v27(v15, v28, v13);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v16;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v29(v14, v13);
    _os_log_impl(&dword_25FA51000, v6, v7, "Failed to unload asset with identifier %{public}s: %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v25, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v26, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);

    unint64_t v17 = v27;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 264);
    swift_bridgeObjectRelease_n();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v29(v18, v20);

    unint64_t v17 = v5;
  }
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 264);
  v17(*(void *)(v0 + 256), v21, v22);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v29(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ4_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[41];
    uint64_t v3 = v2[42];
    uint64_t v5 = v2[33];
    uint64_t v6 = v2[34];
    os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[57] = v7;
    v2[58] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY7_;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY5_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY5_()
{
  uint64_t v1 = v0[31];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 136, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  Overridable.wrappedValue.getter();
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  v0[55] = v3;
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0xD00000000000001ALL;
  }
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x800000025FB6CA70;
  }
  uint64_t v6 = (void *)swift_task_alloc();
  v0[56] = v6;
  *uint64_t v6 = v0;
  v6[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ6_;
  uint64_t v7 = v0[39];
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC06unloadF010identifierySS_tYa20ModelManagerServices0C5ErrorOYKF(v4, v5, v7);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ6_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[39];
    uint64_t v3 = v2[40];
    uint64_t v5 = v2[33];
    uint64_t v6 = v2[34];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[59] = v7;
    v2[60] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY9_;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY8_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY7_()
{
  uint64_t v31 = v0;
  (*(void (**)(void, void, void))(v0 + 456))(*(void *)(v0 + 360), *(void *)(v0 + 336), *(void *)(v0 + 264));
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 456))(v3, *(void *)(v0 + 360), v1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4, v3, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    unint64_t v27 = v5;
    uint64_t v11 = *(void *)(v0 + 232);
    unint64_t v10 = *(void *)(v0 + 240);
    uint64_t v12 = swift_slowAlloc();
    unint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    uint64_t v13 = v9;
    swift_allocError();
    uint64_t v14 = v28;
    v27(v15, v28, v13);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v16;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v29(v14, v13);
    _os_log_impl(&dword_25FA51000, v6, v7, "Failed to unload asset with identifier %{public}s: %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v25, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v26, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);

    unint64_t v17 = v27;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 264);
    swift_bridgeObjectRelease_n();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v29(v18, v20);

    unint64_t v17 = v5;
  }
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 264);
  v17(*(void *)(v0 + 256), v21, v22);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v29(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY8_()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY9_()
{
  uint64_t v31 = v0;
  (*(void (**)(void, void, void))(v0 + 472))(*(void *)(v0 + 360), *(void *)(v0 + 320), *(void *)(v0 + 264));
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 472))(v3, *(void *)(v0 + 360), v1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4, v3, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    unint64_t v27 = v5;
    uint64_t v11 = *(void *)(v0 + 232);
    unint64_t v10 = *(void *)(v0 + 240);
    uint64_t v12 = swift_slowAlloc();
    unint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    uint64_t v13 = v9;
    swift_allocError();
    uint64_t v14 = v28;
    v27(v15, v28, v13);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v16;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v29(v14, v13);
    _os_log_impl(&dword_25FA51000, v6, v7, "Failed to unload asset with identifier %{public}s: %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v25, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v26, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);

    unint64_t v17 = v27;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 264);
    swift_bridgeObjectRelease_n();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v29(v18, v20);

    unint64_t v17 = v5;
  }
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 264);
  v17(*(void *)(v0 + 256), v21, v22);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v29(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTQ10_()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[37];
    uint64_t v3 = v2[38];
    uint64_t v5 = v2[33];
    uint64_t v6 = v2[34];
    os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[62] = v7;
    v2[63] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v7(v3, v4, v5);
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY12_;
  }
  else
  {
    uint64_t v8 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY11_;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY11_()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[29];
    unint64_t v3 = v0[30];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v1, v2, "Successfully unloaded asset with identifer %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v6, -1, -1);
    MEMORY[0x261206F80](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11unloadAsset33_F67B098F505663682541EE68977BD2AALL09inferenceI10IdentifierySS_tYa20ModelManagerServices0C5ErrorOYKFTY12_()
{
  uint64_t v31 = v0;
  (*(void (**)(void, void, void))(v0 + 496))(*(void *)(v0 + 360), *(void *)(v0 + 304), *(void *)(v0 + 264));
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 496))(v3, *(void *)(v0 + 360), v1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v4, v3, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    unint64_t v27 = v5;
    uint64_t v11 = *(void *)(v0 + 232);
    unint64_t v10 = *(void *)(v0 + 240);
    uint64_t v12 = swift_slowAlloc();
    unint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    uint64_t v13 = v9;
    swift_allocError();
    uint64_t v14 = v28;
    v27(v15, v28, v13);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v25 = v16;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v29(v14, v13);
    _os_log_impl(&dword_25FA51000, v6, v7, "Failed to unload asset with identifier %{public}s: %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v25, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v26, -1, -1);
    MEMORY[0x261206F80](v12, -1, -1);

    unint64_t v17 = v27;
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 264);
    swift_bridgeObjectRelease_n();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v29(v18, v20);

    unint64_t v17 = v5;
  }
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 264);
  v17(*(void *)(v0 + 256), v21, v22);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  v29(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:)@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v3, v5);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v9);
  uint64_t v11 = (char *)v33 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = ClientData.data.getter();
  if (v17 >> 60 == 15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v16;
  }
  if (v17 >> 60 == 15) {
    unint64_t v19 = 0xC000000000000000;
  }
  else {
    unint64_t v19 = v17;
  }
  uint64_t v34 = v15;
  TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(v18, v19, a1, 0, (uint64_t)v15);
  outlined consume of Data._Representation(v18, v19);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.device);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v3);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v37 = v24;
    *(_DWORD *)uint64_t v23 = 136446210;
    v33[1] = v23 + 4;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v27(v8, v3);
    _os_log_impl(&dword_25FA51000, v21, v22, "Received streaming request %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v24, -1, -1);
    MEMORY[0x261206F80](v23, -1, -1);

    v27(v11, v3);
  }
  else
  {

    uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28(v8, v3);
    v28(v11, v3);
  }
  uint64_t v29 = type metadata accessor for OnDeviceInferenceProviderStream();
  uint64_t v30 = v35;
  v35[3] = v29;
  v30[4] = _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type OnDeviceInferenceProviderStream and conformance OnDeviceInferenceProviderStream, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceProviderStream);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  return outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v34, (uint64_t)boxed_opaque_existential_1, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v7 + 368) = v6;
  *(void *)(v7 + 376) = a6;
  *(unsigned char *)(v7 + 920) = a5;
  *(void *)(v7 + 352) = a3;
  *(void *)(v7 + 360) = a4;
  *(void *)(v7 + 336) = a1;
  *(void *)(v7 + 344) = a2;
  uint64_t v8 = type metadata accessor for TokenGenerationError.Context();
  *(void *)(v7 + 384) = v8;
  *(void *)(v7 + 392) = *(void *)(v8 - 8);
  *(void *)(v7 + 400) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v7 + 408) = v9;
  *(void *)(v7 + 416) = *(void *)(v9 - 8);
  *(void *)(v7 + 424) = swift_task_alloc();
  *(void *)(v7 + 432) = swift_task_alloc();
  *(void *)(v7 + 440) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  *(void *)(v7 + 448) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CountTokensResponse();
  *(void *)(v7 + 456) = v10;
  *(void *)(v7 + 464) = *(void *)(v10 - 8);
  *(void *)(v7 + 472) = swift_task_alloc();
  *(void *)(v7 + 480) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Prompt.Rendering();
  *(void *)(v7 + 488) = v11;
  *(void *)(v7 + 496) = *(void *)(v11 - 8);
  *(void *)(v7 + 504) = swift_task_alloc();
  *(void *)(v7 + 512) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
  *(void *)(v7 + 520) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OnDeviceInferenceAssetObjectTokenizer(0);
  *(void *)(v7 + 528) = v12;
  *(void *)(v7 + 536) = *(void *)(v12 - 8);
  *(void *)(v7 + 544) = swift_task_alloc();
  *(void *)(v7 + 552) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for InferenceError();
  *(void *)(v7 + 560) = v13;
  *(void *)(v7 + 568) = *(void *)(v13 - 8);
  *(void *)(v7 + 576) = swift_task_alloc();
  *(void *)(v7 + 584) = swift_task_alloc();
  *(void *)(v7 + 592) = swift_task_alloc();
  *(void *)(v7 + 600) = swift_task_alloc();
  *(void *)(v7 + 608) = swift_task_alloc();
  *(void *)(v7 + 616) = swift_task_alloc();
  *(void *)(v7 + 624) = swift_task_alloc();
  *(void *)(v7 + 632) = swift_task_alloc();
  *(void *)(v7 + 640) = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY0_()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = InferenceProviderRequestConfiguration.assetIdentifiers.getter();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  v0[81] = v3;
  swift_bridgeObjectRelease();
  char v4 = specialized Sequence<>.contains(_:)(0xD000000000000017, 0x800000025FB6C9E0, v3);
  uint64_t v5 = (void *)(v1 + 136);
  if (v4)
  {
    uint64_t v6 = v0[46];
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v5, (uint64_t)(v0 + 2));
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_allocObject();
    v0[82] = v7;
    *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
    __swift_project_boxed_opaque_existential_1((void *)(v6 + 16), *(void *)(v6 + 40));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    unint64_t v8 = v0[28];
    unint64_t v9 = v0[29];
    if (!v9)
    {
      unint64_t v8 = 0xD00000000000001ALL;
      unint64_t v9 = 0x800000025FB6CA70;
    }
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[83] = v10;
    *uint64_t v10 = v0;
    v10[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTQ1_;
    uint64_t v11 = v0[79];
    uint64_t v12 = v0[45];
    uint64_t v13 = v7;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, *(void *)(v0[46] + 160));
    uint64_t v14 = (void *)swift_task_alloc();
    v0[87] = v14;
    *uint64_t v14 = v0;
    v14[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTQ4_;
    uint64_t v11 = v0[76];
    uint64_t v12 = v0[45];
    uint64_t v13 = (uint64_t)v3;
  }
  return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC05fetchF7Objects11identifiers13configurationSayAA0decF6Object_pGSaySSG_20ModelManagerServices0C28ProviderRequestConfigurationVtYaAJ0C5ErrorOYKF(v13, v12, v11);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTQ1_(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[22] = v2;
  v3[23] = a1;
  v3[24] = v1;
  v3[84] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[80];
    uint64_t v5 = v3[79];
    uint64_t v6 = v3[71];
    uint64_t v7 = v3[70];
    unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v3[85] = v8;
    v3[86] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v7);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v9 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY3_;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v9 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY2_()
{
  uint64_t v68 = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 184);
  *(void *)(v0 + 728) = *(void *)(v0 + 672);
  *(void *)(v0 + 736) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v3, v0 + 96);
      outlined init with copy of DeterministicLanguageModelProtocol(v0 + 96, v0 + 136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (swift_dynamicCast()) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      v3 += 40;
      if (!--v2) {
        goto LABEL_7;
      }
    }
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 544), type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
    outlined init with take of LogitCollection((long long *)(v0 + 96), v0 + 56);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  if (*(void *)(v0 + 80))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    int v7 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6, v7 ^ 1u, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) != 1)
    {
      uint64_t v8 = *(void *)(v0 + 552);
      uint64_t v9 = *(void *)(v0 + 520);
      uint64_t v10 = *(void *)(v0 + 368);
      swift_release();
      outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v9, v8, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
      *(void *)(v0 + 744) = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
      *(void *)(v0 + 752) = v11;
      uint64_t v12 = __swift_project_boxed_opaque_existential_1((void *)(v10 + 136), *(void *)(v10 + 160));
      *(void *)(v0 + 760) = v12;
      uint64_t v13 = *v12;
      uint64_t v14 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY7_;
      goto LABEL_24;
    }
  }
  else
  {
    outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, 1, 1, v5);
  }
  outlined destroy of DataStreamState?(*(void *)(v0 + 520), &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 416);
  uint64_t v18 = *(void *)(v0 + 344);
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
  swift_retain();
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  log = v19;
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 416);
  if (v21)
  {
    os_log_type_t type = v20;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    uint64_t v66 = v60;
    *(_DWORD *)uint64_t v25 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    *(_WORD *)(v25 + 12) = 2082;
    uint64_t v28 = swift_retain();
    uint64_t v29 = MEMORY[0x261205560](v28, MEMORY[0x263F8D310]);
    unint64_t v31 = v30;
    swift_release();
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_25FA51000, log, type, "Failed to handle request %{public}s, unable to get tokenizer with asset identifiers %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v60, -1, -1);
    MEMORY[0x261206F80](v25, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v24 + 8))(*(void *)(v0 + 432), *(void *)(v0 + 408));
    swift_release_n();
  }
  uint64_t v32 = *(void *)(v0 + 392);
  uint64_t v33 = *(void *)(v0 + 400);
  uint64_t v34 = *(void *)(v0 + 384);
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v66 = 0xD00000000000001CLL;
  unint64_t v67 = 0x800000025FB6CA30;
  v35._countAndFlagsBits = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0x616F6C20746F6E20;
  v36._object = (void *)0xEB00000000646564;
  String.append(_:)(v36);
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  uint64_t v37 = type metadata accessor for TokenGenerationError();
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
  uint64_t v38 = (void *)swift_allocError();
  uint64_t v40 = v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v39, v33, v34);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v40, *MEMORY[0x263F7F820], v37);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  *(void *)(v0 + 904) = v1;
  *(void *)(v0 + 896) = v38;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v42 = *(void *)(v0 + 416);
  uint64_t v41 = *(void *)(v0 + 424);
  uint64_t v43 = *(void *)(v0 + 408);
  uint64_t v44 = *(void *)(v0 + 344);
  __swift_project_value_buffer(v64, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v44, v43);
  id v45 = v38;
  id v46 = v38;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v51 = *(void *)(v0 + 416);
  uint64_t v50 = *(void *)(v0 + 424);
  uint64_t v52 = *(void *)(v0 + 408);
  if (v49)
  {
    uint64_t v53 = swift_slowAlloc();
    typea = (void *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v66 = v65;
    *(_DWORD *)uint64_t v53 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    *(_WORD *)(v53 + 12) = 2114;
    id v56 = v38;
    uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 320) = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *typea = v57;

    _os_log_impl(&dword_25FA51000, v47, v48, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v53, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](typea, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v65, -1, -1);
    MEMORY[0x261206F80](v53, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v51 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));
  }
  unint64_t v58 = __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 368) + 136), *(void *)(*(void *)(v0 + 368) + 160));
  *(void *)(v0 + 912) = v58;
  uint64_t v13 = *v58;
  uint64_t v14 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_;
LABEL_24:
  return MEMORY[0x270FA2498](v14, v13, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY3_()
{
  unint64_t v30 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[85];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[70];
  v1(v2, v0[80], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  uint64_t v4 = (void *)swift_allocError();
  v1(v5, v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[113] = MEMORY[0x263F8EE78];
  v0[112] = v4;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v7 = v0[52];
  uint64_t v6 = v0[53];
  uint64_t v8 = v0[51];
  uint64_t v9 = v0[43];
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  id v11 = v4;
  id v12 = v4;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v17 = v0[52];
  uint64_t v16 = v0[53];
  uint64_t v18 = v0[51];
  if (v15)
  {
    uint64_t v19 = swift_slowAlloc();
    unint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v19 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    *(_WORD *)(v19 + 12) = 2114;
    id v22 = v4;
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    v0[40] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v27 = v23;

    _os_log_impl(&dword_25FA51000, v13, v14, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    MEMORY[0x261206F80](v19, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v17 + 8))(v0[53], v0[51]);
  }
  uint64_t v24 = __swift_project_boxed_opaque_existential_1((void *)(v0[46] + 136), *(void *)(v0[46] + 160));
  v0[114] = v24;
  uint64_t v25 = *v24;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_, v25, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTQ4_(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[25] = v2;
  v3[26] = a1;
  v3[27] = v1;
  v3[88] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[77];
    uint64_t v5 = v3[76];
    uint64_t v6 = v3[71];
    uint64_t v7 = v3[70];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v3[89] = v8;
    v3[90] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v7);
    swift_release();
    uint64_t v9 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY6_;
  }
  else
  {
    uint64_t v9 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY5_;
  }
  return MEMORY[0x270FA2498](v9, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY5_()
{
  uint64_t v68 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  *(void *)(v0 + 728) = *(void *)(v0 + 704);
  *(void *)(v0 + 736) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v3, v0 + 96);
      outlined init with copy of DeterministicLanguageModelProtocol(v0 + 96, v0 + 136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (swift_dynamicCast()) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      v3 += 40;
      if (!--v2) {
        goto LABEL_7;
      }
    }
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 544), type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
    outlined init with take of LogitCollection((long long *)(v0 + 96), v0 + 56);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  if (*(void *)(v0 + 80))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    int v7 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6, v7 ^ 1u, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) != 1)
    {
      uint64_t v8 = *(void *)(v0 + 552);
      uint64_t v9 = *(void *)(v0 + 520);
      uint64_t v10 = *(void *)(v0 + 368);
      swift_release();
      outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v9, v8, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
      *(void *)(v0 + 744) = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
      *(void *)(v0 + 752) = v11;
      id v12 = __swift_project_boxed_opaque_existential_1((void *)(v10 + 136), *(void *)(v10 + 160));
      *(void *)(v0 + 760) = v12;
      uint64_t v13 = *v12;
      os_log_type_t v14 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY7_;
      goto LABEL_24;
    }
  }
  else
  {
    outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, 1, 1, v5);
  }
  outlined destroy of DataStreamState?(*(void *)(v0 + 520), &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectTokenizer?);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 416);
  uint64_t v18 = *(void *)(v0 + 344);
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
  swift_retain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  log = v19;
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 432);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 416);
  if (v21)
  {
    os_log_type_t type = v20;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    uint64_t v66 = v60;
    *(_DWORD *)uint64_t v25 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    *(_WORD *)(v25 + 12) = 2082;
    uint64_t v28 = swift_retain();
    uint64_t v29 = MEMORY[0x261205560](v28, MEMORY[0x263F8D310]);
    unint64_t v31 = v30;
    swift_release();
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_25FA51000, log, type, "Failed to handle request %{public}s, unable to get tokenizer with asset identifiers %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v60, -1, -1);
    MEMORY[0x261206F80](v25, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v24 + 8))(*(void *)(v0 + 432), *(void *)(v0 + 408));
    swift_release_n();
  }
  uint64_t v32 = *(void *)(v0 + 392);
  uint64_t v33 = *(void *)(v0 + 400);
  uint64_t v34 = *(void *)(v0 + 384);
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v66 = 0xD00000000000001CLL;
  unint64_t v67 = 0x800000025FB6CA30;
  v35._countAndFlagsBits = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0x616F6C20746F6E20;
  v36._object = (void *)0xEB00000000646564;
  String.append(_:)(v36);
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  uint64_t v37 = type metadata accessor for TokenGenerationError();
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, MEMORY[0x263F7F830]);
  uint64_t v38 = (void *)swift_allocError();
  uint64_t v40 = v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v39, v33, v34);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v40, *MEMORY[0x263F7F820], v37);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  *(void *)(v0 + 904) = v1;
  *(void *)(v0 + 896) = v38;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v42 = *(void *)(v0 + 416);
  uint64_t v41 = *(void *)(v0 + 424);
  uint64_t v43 = *(void *)(v0 + 408);
  uint64_t v44 = *(void *)(v0 + 344);
  __swift_project_value_buffer(v64, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v44, v43);
  id v45 = v38;
  id v46 = v38;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v51 = *(void *)(v0 + 416);
  uint64_t v50 = *(void *)(v0 + 424);
  uint64_t v52 = *(void *)(v0 + 408);
  if (v49)
  {
    uint64_t v53 = swift_slowAlloc();
    typea = (void *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v66 = v65;
    *(_DWORD *)uint64_t v53 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    *(_WORD *)(v53 + 12) = 2114;
    id v56 = v38;
    uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 320) = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *typea = v57;

    _os_log_impl(&dword_25FA51000, v47, v48, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v53, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](typea, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v65, -1, -1);
    MEMORY[0x261206F80](v53, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v51 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));
  }
  unint64_t v58 = __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 368) + 136), *(void *)(*(void *)(v0 + 368) + 160));
  *(void *)(v0 + 912) = v58;
  uint64_t v13 = *v58;
  os_log_type_t v14 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_;
LABEL_24:
  return MEMORY[0x270FA2498](v14, v13, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY6_()
{
  unint64_t v30 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[70];
  v1(v2, v0[77], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  uint64_t v4 = (void *)swift_allocError();
  v1(v5, v2, v3);
  v0[113] = MEMORY[0x263F8EE78];
  v0[112] = v4;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v7 = v0[52];
  uint64_t v6 = v0[53];
  uint64_t v8 = v0[51];
  uint64_t v9 = v0[43];
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  id v11 = v4;
  id v12 = v4;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v17 = v0[52];
  uint64_t v16 = v0[53];
  uint64_t v18 = v0[51];
  if (v15)
  {
    uint64_t v19 = swift_slowAlloc();
    unint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v19 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    *(_WORD *)(v19 + 12) = 2114;
    id v22 = v4;
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    v0[40] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v27 = v23;

    _os_log_impl(&dword_25FA51000, v13, v14, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    MEMORY[0x261206F80](v19, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v17 + 8))(v0[53], v0[51]);
  }
  uint64_t v24 = __swift_project_boxed_opaque_existential_1((void *)(v0[46] + 136), *(void *)(v0[46] + 160));
  v0[114] = v24;
  uint64_t v25 = *v24;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_, v25, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY7_()
{
  uint64_t v1 = v0[91];
  v0[96] = _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC024fetchSpecialTokensMapForF6Bundle10identifierSDySSAA08MetadataiA0OGSgSS_t20ModelManagerServices0C5ErrorOYKF(v0[93], v0[94], v0[74]);
  v0[97] = v1;
  if (v1)
  {
    uint64_t v2 = v0[75];
    uint64_t v3 = v0[74];
    uint64_t v4 = v0[71];
    uint64_t v5 = v0[70];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v0[99] = v6;
    v0[100] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v6(v2, v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY9_;
  }
  else
  {
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY8_;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY8_()
{
  BOOL v15 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[98] = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[96];
    unint64_t v5 = v0[94];
    uint64_t v13 = v0[93];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[37] = v4;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]?);
    uint64_t v8 = String.init<A>(describing:)();
    v0[38] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v2, v3, "Fetched special tokens map %{public}s for asset bundle identifier %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v7, -1, -1);
    MEMORY[0x261206F80](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = __swift_project_boxed_opaque_existential_1((void *)(v0[46] + 136), *(void *)(v0[46] + 160));
  v0[101] = v10;
  uint64_t v11 = *v10;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY10_, v11, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY9_()
{
  uint64_t v31 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[99];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  v1(v2, v0[75], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  unint64_t v5 = (void *)swift_allocError();
  v1(v6, v2, v3);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v4, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v0[113] = v0[92];
  v0[112] = v5;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v8 = v0[52];
  uint64_t v7 = v0[53];
  uint64_t v9 = v0[51];
  uint64_t v10 = v0[43];
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  id v12 = v5;
  id v13 = v5;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = v0[52];
  uint64_t v17 = v0[53];
  uint64_t v19 = v0[51];
  if (v16)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = v29;
    *(_DWORD *)uint64_t v20 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v20 + 12) = 2114;
    id v23 = v5;
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
    v0[40] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v28 = v24;

    _os_log_impl(&dword_25FA51000, v14, v15, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v20, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v29, -1, -1);
    MEMORY[0x261206F80](v20, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v18 + 8))(v0[53], v0[51]);
  }
  uint64_t v25 = __swift_project_boxed_opaque_existential_1((void *)(v0[46] + 136), *(void *)(v0[46] + 160));
  v0[114] = v25;
  uint64_t v26 = *v25;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_, v26, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY10_()
{
  uint64_t v1 = v0[97];
  v0[102] = _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC028fetchLocalizationMetadataForF6Bundle10identifierSDySSSDySSAA0j7SpecialA0OGGSgSS_t20ModelManagerServices0C5ErrorOYKF(v0[93], v0[94], v0[72]);
  v0[103] = v1;
  if (v1)
  {
    uint64_t v2 = v0[73];
    uint64_t v3 = v0[72];
    uint64_t v4 = v0[71];
    uint64_t v5 = v0[70];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v0[104] = v6;
    v0[105] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v6(v2, v3, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY12_;
  }
  else
  {
    uint64_t v7 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY11_;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY11_()
{
  uint64_t v78 = v0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 768);
    unint64_t v4 = *(void *)(v0 + 752);
    uint64_t v74 = *(void *)(v0 + 744);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v77 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v0 + 272) = v3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]?);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v4, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v1, v2, "Fetched localization metadata %s for asset bundle identifier %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v6, -1, -1);
    MEMORY[0x261206F80](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = *(void **)(v0 + 824);
  uint64_t v10 = *(void *)(v0 + 816);
  uint64_t v11 = *(void *)(v0 + 768);
  uint64_t v12 = *(void *)(v0 + 504);
  int v13 = *(unsigned __int8 *)(v0 + 920);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(*(void *)(v0 + 552) + *(int *)(*(void *)(v0 + 528) + 24));
  *(void *)(v0 + 848) = v15;
  swift_retain();
  unint64_t v16 = TG_OnDeviceInferenceProvider.promptTokenTable(from:)(v11);
  swift_bridgeObjectRelease();
  unint64_t v17 = specialized TG_OnDeviceInferenceProvider.localizationOverrideMap(from:)(v10);
  swift_bridgeObjectRelease();
  TG_OnDeviceInferenceProvider.process(prompt:tokenizer:tokenTable:localizationOverrideMap:shouldDetokenizeRenderedPrompt:)(&v77, v12, v14, v15, v16, v17, v13);
  if (v9)
  {
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 552), type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 904) = *(void *)(v0 + 736);
    *(void *)(v0 + 896) = v9;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 416);
    uint64_t v18 = *(void *)(v0 + 424);
    uint64_t v20 = *(void *)(v0 + 408);
    uint64_t v21 = *(void *)(v0 + 344);
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.device);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    id v23 = v9;
    id v24 = v9;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v29 = *(void *)(v0 + 416);
    uint64_t v28 = *(void *)(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 408);
    if (v27)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v77 = v75;
      *(_DWORD *)uint64_t v31 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v31 + 12) = 2114;
      id v34 = v9;
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 320) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v70 = v35;

      _os_log_impl(&dword_25FA51000, v25, v26, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v31, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v70, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v75, -1, -1);
      MEMORY[0x261206F80](v31, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v29 + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));
    }
    uint64_t v40 = __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 368) + 136), *(void *)(*(void *)(v0 + 368) + 160));
    *(void *)(v0 + 912) = v40;
    uint64_t v41 = *v40;
    uint64_t v42 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_;
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 512);
    uint64_t v37 = *(void *)(v0 + 488);
    uint64_t v38 = *(void *)(v0 + 496);
    uint64_t v71 = *(void *)(v0 + 504);
    uint64_t v39 = *(void *)(v0 + 448);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v36, v71, v37);
    Prompt.Rendering.tokenIDs.getter();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v36, v37);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
    CountTokensResponse.init(count:renderedPrompt:)();
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse, MEMORY[0x263F7F958]);
    uint64_t v43 = static Serialization.encode<A>(_:)();
    uint64_t v76 = v44;
    uint64_t v46 = *(void *)(v0 + 472);
    uint64_t v45 = *(void *)(v0 + 480);
    uint64_t v47 = *(void *)(v0 + 456);
    uint64_t v48 = *(void *)(v0 + 464);
    (*(void (**)(void, void, void))(*(void *)(v0 + 416) + 16))(*(void *)(v0 + 440), *(void *)(v0 + 344), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v45, v47);
    BOOL v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v52 = *(void *)(v0 + 464);
    uint64_t v53 = *(void *)(v0 + 472);
    uint64_t v54 = *(void *)(v0 + 440);
    uint64_t v55 = *(void *)(v0 + 408);
    uint64_t v56 = *(void *)(v0 + 416);
    if (v51)
    {
      uint64_t v69 = *(void *)(v0 + 456);
      uint64_t v73 = v43;
      uint64_t v57 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      uint64_t v77 = v72;
      *(_DWORD *)uint64_t v57 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
      *(_WORD *)(v57 + 12) = 2048;
      uint64_t v60 = CountTokensResponse.count.getter();
      uint64_t v63 = *(void (**)(void, void))(v52 + 8);
      uint64_t v62 = v52 + 8;
      unint64_t v61 = v63;
      v63(v53, v69);
      *(void *)(v0 + 328) = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v49, v50, "Successfully handled count token request %{public}s, token count %ld", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v72, -1, -1);
      uint64_t v64 = v57;
      uint64_t v43 = v73;
      MEMORY[0x261206F80](v64, -1, -1);
    }
    else
    {
      uint64_t v65 = *(void (**)(void, void))(v52 + 8);
      uint64_t v62 = v52 + 8;
      unint64_t v61 = v65;
      v65(*(void *)(v0 + 472), *(void *)(v0 + 456));
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
    }

    *(void *)(v0 + 864) = v61;
    *(void *)(v0 + 856) = v62;
    uint64_t v66 = *(void *)(v0 + 368);
    *(void *)(v0 + 872) = v76;
    *(void *)(v0 + 880) = v43;
    unint64_t v67 = __swift_project_boxed_opaque_existential_1((void *)(v66 + 136), *(void *)(v66 + 160));
    *(void *)(v0 + 888) = v67;
    uint64_t v41 = *v67;
    uint64_t v42 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY13_;
  }
  return MEMORY[0x270FA2498](v42, v41, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY12_()
{
  uint64_t v31 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[104];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  v1(v2, v0[73], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  uint64_t v5 = (void *)swift_allocError();
  v1(v6, v2, v3);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v4, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  v0[113] = v0[92];
  v0[112] = v5;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v8 = v0[52];
  uint64_t v7 = v0[53];
  uint64_t v9 = v0[51];
  uint64_t v10 = v0[43];
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  id v12 = v5;
  id v13 = v5;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = v0[52];
  uint64_t v17 = v0[53];
  uint64_t v19 = v0[51];
  if (v16)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = v29;
    *(_DWORD *)uint64_t v20 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v20 + 12) = 2114;
    id v23 = v5;
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
    v0[40] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v28 = v24;

    _os_log_impl(&dword_25FA51000, v14, v15, "Failed to handle count token request %{public}s : %{public}@", (uint8_t *)v20, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v29, -1, -1);
    MEMORY[0x261206F80](v20, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v18 + 8))(v0[53], v0[51]);
  }
  uint64_t v25 = __swift_project_boxed_opaque_existential_1((void *)(v0[46] + 136), *(void *)(v0[46] + 160));
  v0[114] = v25;
  uint64_t v26 = *v25;
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_, v26, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY13_()
{
  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[92]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY14_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY14_()
{
  uint64_t v1 = v0[110];
  unint64_t v2 = v0[109];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[108];
  uint64_t v10 = v0[69];
  uint64_t v3 = v0[64];
  uint64_t v5 = v0[61];
  uint64_t v4 = v0[62];
  uint64_t v6 = v0[60];
  uint64_t v7 = v0[57];
  outlined copy of Data._Representation(v1, v2);
  MEMORY[0x261204E60](v1, v2);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  v11(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v10, type metadata accessor for OnDeviceInferenceAssetObjectTokenizer);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY15_()
{
  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[113]);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY16_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC11countTokens33_F67B098F505663682541EE68977BD2AALL11requestUUID6prompt13configuration30shouldDetokenizeRenderedPrompt20ModelManagerServices10ClientDataV10Foundation0Q0V_0aB00W0VAJ0cG20RequestConfigurationVSbtYaAJ0C5ErrorOYKFTY16_()
{
  uint64_t v1 = (void *)v0[112];
  convertToInferenceError(_:)(v1, v0[47]);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = v5;
  v6[8] = a5;
  void v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = type metadata accessor for InferenceError();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for InferenceError.Context();
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Prompt();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PromptTemplateConfiguration(0);
  v6[21] = v10;
  v6[22] = *(void *)(v10 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PromptTemplateInfo();
  v6[24] = v11;
  v6[25] = *(void *)(v11 - 8);
  v6[26] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  uint64_t v55 = v0;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 216) = __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 208);
  if (v8)
  {
    uint64_t v53 = *(void *)(v0 + 192);
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v54 = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = PromptTemplateInfo.templateID.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v53);
    _os_log_impl(&dword_25FA51000, v6, v7, "Rendering prompt template %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v12, -1, -1);
    MEMORY[0x261206F80](v11, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 208), *(void *)(v0 + 192));
  }

  uint64_t v15 = *(void *)(v0 + 168);
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 160);
  outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 40), v17, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  *(void *)(v0 + 224) = v18;
  *(void *)(v0 + 232) = (v16 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v18(v17, 1, v15) == 1)
  {
    outlined destroy of DataStreamState?(*(void *)(v0 + 160), &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    id v19 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v20 = (void *)MEMORY[0x2612053D0](0xD000000000000019, 0x800000025FB63000);
    id v21 = objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 3, 0);

    swift_willThrow();
    unint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 152);
    outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 40), v24, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    if (v22(v24, 1, v23) == 1)
    {
      outlined destroy of DataStreamState?(*(void *)(v0 + 152), &demangling cache variable for type metadata for PromptTemplateConfiguration?);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 152);
      char v29 = *(unsigned char *)(v28 + *(int *)(*(void *)(v0 + 168) + 20));
      outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v28, type metadata accessor for PromptTemplateConfiguration);
      if (v29)
      {
LABEL_14:
        uint64_t v31 = *(void *)(v0 + 128);
        uint64_t v30 = *(void *)(v0 + 136);
        uint64_t v32 = *(void *)(v0 + 120);
        outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 48), v32, &demangling cache variable for type metadata for Prompt?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) != 1)
        {
          uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 32);
          v41(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v44 = 0;
            _os_log_impl(&dword_25FA51000, v42, v43, "Unable to render prompt template, using fallback prompt", v44, 2u);
            MEMORY[0x261206F80](v44, -1, -1);
          }
          uint64_t v45 = *(void *)(v0 + 144);
          uint64_t v46 = *(void *)(v0 + 128);
          uint64_t v47 = *(void *)(v0 + 24);

          v41(v47, v45, v46);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_20;
        }
        outlined destroy of DataStreamState?(*(void *)(v0 + 120), &demangling cache variable for type metadata for Prompt?);
LABEL_16:
        uint64_t v33 = *(void *)(v0 + 112);
        uint64_t v34 = *(void *)(v0 + 104);
        uint64_t v36 = *(void *)(v0 + 80);
        uint64_t v35 = *(void *)(v0 + 88);
        uint64_t v49 = *(void *)(v0 + 96);
        uint64_t v50 = *(void *)(v0 + 72);
        uint64_t v52 = *(void *)(v0 + 64);
        id v51 = v21;
        uint64_t v37 = (void *)_convertErrorToNSError(_:)();
        id v38 = objc_msgSend(v37, sel_description);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v39 = objc_msgSend(v37, sel_domain);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        objc_msgSend(v37, sel_code);
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v35, v33, v49);
        (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v35, *MEMORY[0x263F56280], v50);
        _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
        swift_willThrowTypedImpl();

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v49);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v52, v35, v50);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
        return v40();
      }
    }
    __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 56) + 16), *(void *)(*(void *)(v0 + 56) + 40));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    Overridable.wrappedValue.getter();
    if ((*(unsigned char *)(v0 + 256) & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  outlined init with take of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 160), *(void *)(v0 + 184), type metadata accessor for PromptTemplateConfiguration);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v25;
  void *v25 = v0;
  v25[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTQ1_;
  uint64_t v26 = *(void *)(v0 + 24);
  uint64_t v27 = *(void *)(v0 + 32);
  return MEMORY[0x270F7F768](v26, v27);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTQ1_()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY3_;
  }
  else {
    uint64_t v2 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY2_()
{
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 184), type metadata accessor for PromptTemplateConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKFTY3_()
{
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 184), type metadata accessor for PromptTemplateConfiguration);
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 40), v4, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  if (v2(v4, 1, v3) == 1)
  {
    outlined destroy of DataStreamState?(*(void *)(v0 + 152), &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 152);
    char v6 = *(unsigned char *)(v5 + *(int *)(*(void *)(v0 + 168) + 20));
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v5, type metadata accessor for PromptTemplateConfiguration);
    if (v6) {
      goto LABEL_5;
    }
  }
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 56) + 16), *(void *)(*(void *)(v0 + 56) + 40));
  type metadata accessor for OnDeviceInferenceOverrides();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  if ((*(unsigned char *)(v0 + 256) & 1) == 0)
  {
LABEL_7:
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v27 = *(void *)(v0 + 72);
    uint64_t v29 = *(void *)(v0 + 64);
    id v28 = v1;
    unint64_t v14 = (void *)_convertErrorToNSError(_:)();
    id v15 = objc_msgSend(v14, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = objc_msgSend(v14, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v14, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v10, v26);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, *MEMORY[0x263F56280], v27);
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v29, v12, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 120);
  outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 48), v9, &demangling cache variable for type metadata for Prompt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) == 1)
  {
    outlined destroy of DataStreamState?(*(void *)(v0 + 120), &demangling cache variable for type metadata for Prompt?);
    goto LABEL_7;
  }
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 32);
  v18(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_25FA51000, v19, v20, "Unable to render prompt template, using fallback prompt", v21, 2u);
    MEMORY[0x261206F80](v21, -1, -1);
  }
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v23 = *(void *)(v0 + 128);
  uint64_t v24 = *(void *)(v0 + 24);

  v18(v24, v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
  return v17();
}

uint64_t TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Token();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for DataStreamState(0);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:), 0, 0);
}

uint64_t TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)()
{
  uint64_t v1 = v0[10];
  outlined init with copy of DataStreamState(v0[3], v1, type metadata accessor for DataStreamState);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  if (*(void *)(v2 + 16))
  {
    uint64_t v10 = v0[5];
    (*(void (**)(void, unint64_t, void))(v0[7] + 16))(v0[8], v2 + ((*(unsigned __int8 *)(v0[7] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[7] + 80)), v0[6]);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    UUID.uuidString.getter();
    UUID.uuidString.getter();
    Token.text.getter();
    PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)();
    uint64_t v5 = *(void *)(v10 + 176);
    v0[11] = v5;
    outlined init with copy of DataStreamState(v4, v3, type metadata accessor for DataStreamState);
    return MEMORY[0x270FA2498](TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:), v5, 0);
  }
  else
  {
    uint64_t v6 = v0[2];
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v0[10], type metadata accessor for DataStreamState);
    uint64_t v7 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 72);
  DataStreamStateManager.updateState(uuid:state:)(*(void *)(v0 + 32), v1);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v1, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  uint64_t v1 = v0[2];
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v0[10], type metadata accessor for DataStreamState);
  uint64_t v2 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  void v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for InferenceError.Context();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for InferenceError();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PromptTemplateInfo();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CompletePromptTemplateRequest();
  v6[19] = v10;
  v6[20] = *(void *)(v10 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for RequestMetadata();
  v6[22] = v11;
  v6[23] = *(void *)(v11 - 8);
  v6[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  v6[25] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SamplingParameters();
  v6[26] = v12;
  v6[27] = *(void *)(v12 - 8);
  v6[28] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Prompt();
  v6[29] = v13;
  v6[30] = *(void *)(v13 - 8);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for CompletePromptRequest();
  v6[33] = v14;
  v6[34] = *(void *)(v14 - 8);
  v6[35] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for StreamingRequestPayload();
  v6[36] = v15;
  v6[37] = *(void *)(v15 - 8);
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY0_, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY0_()
{
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type StreamingRequestPayload and conformance StreamingRequestPayload, MEMORY[0x263F7F9A8]);
  static Serialization.decode<A>(_:from:)();
  uint64_t v2 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v3 = v0[38];
  uint64_t v5 = v0[36];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 32))(v2, v0[39], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v5);
  if (v6 == *MEMORY[0x263F7F998])
  {
    uint64_t v7 = v0[38];
    uint64_t v8 = v0[35];
    uint64_t v9 = v0[33];
    uint64_t v10 = v0[34];
    (*(void (**)(uint64_t, void))(v0[37] + 96))(v7, v0[36]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v7, v9);
    CompletePromptRequest.prompt.getter();
    CompletePromptRequest.parameters.getter();
    CompletePromptRequest.constraints.getter();
    CompletePromptRequest.metadata.getter();
    char v48 = RequestMetadata.shouldDetokenizeRenderedPrompt.getter();
    uint64_t v12 = v0[33];
    uint64_t v11 = v0[34];
    uint64_t v13 = v0[37];
    uint64_t v15 = v0[35];
    uint64_t v14 = v0[36];
    uint64_t v16 = v0[32];
    uint64_t v17 = v0[30];
    uint64_t v43 = v0[40];
    uint64_t v44 = v0[29];
    uint64_t v18 = v0[27];
    uint64_t v45 = v0[26];
    uint64_t v46 = v0[28];
    uint64_t v47 = v0[25];
    uint64_t v19 = v0[2];
    (*(void (**)(void))(v0[23] + 8))();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v43, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v19, v16, v44);
    os_log_type_t v20 = (int *)type metadata accessor for InferenceRequest();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v19 + v20[5], v46, v45);
    outlined init with take of (key: Int, value: LogitCollection)?(v47, v19 + v20[6], &demangling cache variable for type metadata for Constraints?);
    *(unsigned char *)(v19 + v20[7]) = v48 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v21 = (uint64_t (*)(void))v0[1];
LABEL_2:
    return v21();
  }
  if (v6 != *MEMORY[0x263F7F9A0])
  {
    uint64_t v33 = v0[37];
    uint64_t v49 = v0[40];
    uint64_t v50 = v0[38];
    uint64_t v34 = v0[36];
    uint64_t v35 = v0[12];
    uint64_t v36 = v0[13];
    uint64_t v38 = v0[10];
    uint64_t v37 = v0[11];
    uint64_t v40 = v0[8];
    uint64_t v39 = v0[9];
    uint64_t v41 = v0[7];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v36, v38, v40);
    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v36, *MEMORY[0x263F562B0], v37);
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_willThrowTypedImpl();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v42(v49, v34);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v41, v36, v37);
    v42(v50, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v21 = (uint64_t (*)(void))v0[1];
    goto LABEL_2;
  }
  uint64_t v22 = v0[38];
  uint64_t v24 = v0[20];
  uint64_t v23 = v0[21];
  uint64_t v25 = v0[19];
  (*(void (**)(uint64_t, void))(v0[37] + 96))(v22, v0[36]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
  uint64_t v26 = CompletePromptTemplateRequest.promptTemplateInfo.getter();
  MEMORY[0x2612047F0](v26);
  uint64_t v27 = (void *)swift_task_alloc();
  v0[41] = v27;
  *uint64_t v27 = v0;
  v27[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTQ1_;
  uint64_t v28 = v0[31];
  uint64_t v29 = v0[18];
  uint64_t v31 = v0[14];
  uint64_t v30 = v0[15];
  uint64_t v32 = v0[5];
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC6prompt33_F67B098F505663682541EE68977BD2AALL0H12TemplateInfo0hO13Configuration14fallbackPrompt0aB00S0V0aB4Core0soP0V_AA0soQ0VSgAKSgtYa20ModelManagerServices0C5ErrorOYKF(v28, v29, v32, v30, v31);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTQ1_()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void *)(*(void *)v1 + 136);
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  uint64_t v5 = *(void *)(*(void *)v1 + 120);
  swift_task_dealloc();
  outlined destroy of DataStreamState?(v5, &demangling cache variable for type metadata for Prompt?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    int v6 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY3_;
  }
  else {
    int v6 = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY2_;
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY2_()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  (*(void (**)(void, void, void))(v0[30] + 16))(v0[32], v0[31], v0[29]);
  CompletePromptTemplateRequest.parameters.getter();
  CompletePromptTemplateRequest.constraints.getter();
  CompletePromptTemplateRequest.metadata.getter();
  char v21 = RequestMetadata.shouldDetokenizeRenderedPrompt.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[20];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[36];
  uint64_t v16 = v0[40];
  uint64_t v17 = v0[32];
  uint64_t v9 = v0[29];
  uint64_t v10 = v0[27];
  uint64_t v18 = v0[26];
  uint64_t v19 = v0[28];
  uint64_t v20 = v0[25];
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[2];
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12, v17, v9);
  uint64_t v13 = (int *)type metadata accessor for InferenceRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12 + v13[5], v19, v18);
  outlined init with take of (key: Int, value: LogitCollection)?(v20, v12 + v13[6], &demangling cache variable for type metadata for Constraints?);
  *(unsigned char *)(v12 + v13[7]) = v21 & 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKFTY3_()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[7];
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1000) = v35;
  *(void *)(v8 + 992) = v34;
  *(void *)(v8 + 984) = v33;
  *(void *)(v8 + 976) = v32;
  *(void *)(v8 + 968) = v31;
  *(void *)(v8 + 960) = v30;
  *(void *)(v8 + 952) = v29;
  *(void *)(v8 + 944) = v28;
  *(void *)(v8 + 936) = v27;
  *(void *)(v8 + 928) = v26;
  *(unsigned char *)(v8 + 2000) = v25;
  *(void *)(v8 + 920) = v24;
  *(void *)(v8 + 912) = a8;
  *(void *)(v8 + 904) = a7;
  *(void *)(v8 + 896) = a6;
  *(void *)(v8 + 888) = a5;
  *(void *)(v8 + 880) = a4;
  *(void *)(v8 + 872) = a3;
  *(void *)(v8 + 864) = a2;
  *(void *)(v8 + 856) = a1;
  uint64_t v9 = type metadata accessor for TokenGenerationError();
  *(void *)(v8 + 1008) = v9;
  *(void *)(v8 + 1016) = *(void *)(v9 - 8);
  *(void *)(v8 + 1024) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TokenGenerationError.Context();
  *(void *)(v8 + 1032) = v10;
  *(void *)(v8 + 1040) = *(void *)(v10 - 8);
  *(void *)(v8 + 1048) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for InferenceError.Context();
  *(void *)(v8 + 1056) = v11;
  *(void *)(v8 + 1064) = *(void *)(v11 - 8);
  *(void *)(v8 + 1072) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
  *(void *)(v8 + 1080) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for FinishReason();
  *(void *)(v8 + 1088) = v12;
  *(void *)(v8 + 1096) = *(void *)(v12 - 8);
  *(void *)(v8 + 1104) = swift_task_alloc();
  *(void *)(v8 + 1112) = swift_task_alloc();
  type metadata accessor for Usage();
  *(void *)(v8 + 1120) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Token();
  *(void *)(v8 + 1128) = v13;
  *(void *)(v8 + 1136) = *(void *)(v13 - 8);
  *(void *)(v8 + 1144) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
  *(void *)(v8 + 1152) = v14;
  *(void *)(v8 + 1160) = *(void *)(v14 - 8);
  *(void *)(v8 + 1168) = swift_task_alloc();
  *(void *)(v8 + 1176) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  *(void *)(v8 + 1184) = swift_task_alloc();
  *(void *)(v8 + 1192) = swift_task_alloc();
  *(void *)(v8 + 1200) = swift_task_alloc();
  *(void *)(v8 + 1208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  *(void *)(v8 + 1216) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for ModelInformation();
  *(void *)(v8 + 1224) = v15;
  *(void *)(v8 + 1232) = *(void *)(v15 - 8);
  *(void *)(v8 + 1240) = swift_task_alloc();
  *(void *)(v8 + 1248) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  *(void *)(v8 + 1256) = swift_task_alloc();
  *(void *)(v8 + 1264) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for StopSequenceMonitor();
  *(void *)(v8 + 1272) = v16;
  *(void *)(v8 + 1280) = *(void *)(v16 - 8);
  *(void *)(v8 + 1288) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment();
  *(void *)(v8 + 1296) = v17;
  *(void *)(v8 + 1304) = *(void *)(v17 - 8);
  *(void *)(v8 + 1312) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Prompt.Rendering();
  *(void *)(v8 + 1320) = v18;
  *(void *)(v8 + 1328) = *(void *)(v18 - 8);
  *(void *)(v8 + 1336) = swift_task_alloc();
  *(void *)(v8 + 1344) = swift_task_alloc();
  *(void *)(v8 + 1352) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for DataStreamState(0);
  *(void *)(v8 + 1360) = v19;
  *(void *)(v8 + 1368) = *(void *)(v19 - 8);
  *(void *)(v8 + 1376) = swift_task_alloc();
  *(void *)(v8 + 1384) = swift_task_alloc();
  *(void *)(v8 + 1392) = swift_task_alloc();
  *(void *)(v8 + 1400) = swift_task_alloc();
  *(void *)(v8 + 1408) = type metadata accessor for InferenceRequest();
  *(void *)(v8 + 1416) = swift_task_alloc();
  uint64_t v20 = type metadata accessor for InferenceError();
  *(void *)(v8 + 1424) = v20;
  *(void *)(v8 + 1432) = *(void *)(v20 - 8);
  *(void *)(v8 + 1440) = swift_task_alloc();
  *(void *)(v8 + 1448) = swift_task_alloc();
  *(void *)(v8 + 1456) = swift_task_alloc();
  *(void *)(v8 + 1464) = swift_task_alloc();
  *(void *)(v8 + 1472) = swift_task_alloc();
  *(void *)(v8 + 1480) = swift_task_alloc();
  *(void *)(v8 + 1488) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptTemplateConfiguration?);
  *(void *)(v8 + 1496) = swift_task_alloc();
  uint64_t v21 = type metadata accessor for UUID();
  *(void *)(v8 + 1504) = v21;
  *(void *)(v8 + 1512) = *(void *)(v21 - 8);
  *(void *)(v8 + 1520) = swift_task_alloc();
  *(void *)(v8 + 1528) = swift_task_alloc();
  *(void *)(v8 + 1536) = swift_task_alloc();
  *(void *)(v8 + 1544) = swift_task_alloc();
  *(void *)(v8 + 1552) = swift_task_alloc();
  *(void *)(v8 + 1560) = swift_task_alloc();
  *(void *)(v8 + 1568) = swift_task_alloc();
  *(void *)(v8 + 1576) = swift_task_alloc();
  *(void *)(v8 + 1584) = swift_task_alloc();
  *(void *)(v8 + 1592) = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

uint64_t closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  uint64_t v42 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 1600) = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = *(void *)(v0 + 880);
    uint64_t v4 = *(os_unfair_lock_s **)(v3 + 24);
    *(void *)(v0 + 1608) = v4;
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v3;
    *(unsigned char *)(v5 + 24) = 1;
    uint64_t v6 = swift_task_alloc();
    *(void *)(v6 + 16) = partial apply for closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:);
    *(void *)(v6 + 24) = v5;
    os_unfair_lock_lock(v4 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v41);
    os_unfair_lock_unlock(v4 + 4);
    char v22 = v41[0];
    *(unsigned char *)(v0 + 2001) = v41[0];
    swift_task_dealloc();
    swift_task_dealloc();
    if ((v22 & 1) != 0 || (uint64_t v23 = *(void *)(v0 + 888), swift_beginAccess(), *(unsigned char *)(v23 + 16) != 1))
    {
      *(void *)(v0 + 1720) = 0;
      uint64_t v40 = *(void *)(*(void *)(v0 + 1600) + 176);
      *(void *)(v0 + 1728) = v40;
      swift_retain();
      return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v40, 0);
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 888);
      swift_beginAccess();
      *(unsigned char *)(v24 + 16) = 0;
      __swift_project_boxed_opaque_existential_1((void *)(v2 + 136), *(void *)(v2 + 160));
      uint64_t v25 = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
      uint64_t v27 = v26;
      *(void *)(v0 + 1616) = v26;
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 1624) = v28;
      void *v28 = v0;
      v28[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
      uint64_t v29 = *(void *)(v0 + 1496);
      uint64_t v30 = *(void *)(v0 + 1480);
      return _s24TokenGenerationInference08OnDeviceC15AssetRepositoryC035fetchPromptTemplateConfigurationForF6Bundle10identifierAA0ijK0VSgSS_tYa20ModelManagerServices0C5ErrorOYKF(v29, v25, v27, v30);
    }
  }
  else
  {
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 1592);
    uint64_t v8 = *(void *)(v0 + 1512);
    uint64_t v9 = *(void *)(v0 + 1504);
    uint64_t v10 = *(void *)(v0 + 872);
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.device);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 1592);
    uint64_t v16 = *(void *)(v0 + 1512);
    uint64_t v17 = *(void *)(v0 + 1504);
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v41[0] = v19;
      *(_DWORD *)uint64_t v18 = 136446210;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 792) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      _os_log_impl(&dword_25FA51000, v12, v13, "Failed to handle request %{public}s, inference provider was destroyed", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v19, -1, -1);
      MEMORY[0x261206F80](v18, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v16 + 8))(*(void *)(v0 + 1592), *(void *)(v0 + 1504));
    }

    uint64_t v32 = *(void *)(v0 + 1432);
    uint64_t v33 = *(void *)(v0 + 1424);
    uint64_t v34 = *(void *)(v0 + 1072);
    uint64_t v35 = *(void *)(v0 + 1064);
    uint64_t v36 = *(void *)(v0 + 1056);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v38 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v37, v34, v36);
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v38, *MEMORY[0x263F56230], v33);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[186];
    uint64_t v5 = v2[185];
    uint64_t v6 = v2[179];
    uint64_t v7 = v2[178];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v2[205] = v8;
    v2[206] = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v8(v4, v5, v7);
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)swift_task_alloc();
    v2[204] = v9;
    *uint64_t v9 = v3;
    v9[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    uint64_t v10 = v2[187];
    uint64_t v11 = v2[184];
    uint64_t v12 = v2[177];
    os_log_type_t v13 = v2[114];
    BOOL v14 = v2[113];
    return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC16inferenceRequest10clientData27promptTemplateConfigurationAA0cI0V10Foundation0K0V_AA06PromptmN0VSgtYa20ModelManagerServices0C5ErrorOYKF(v12, v14, v13, v10, v11);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  else {
    uint64_t v1 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  unsigned char v11[17];
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[205];
  uint64_t v2 = v0[183];
  uint64_t v3 = v0[178];
  uint64_t v4 = v0[110];
  uint64_t v5 = (os_unfair_lock_s *)(v0[201] + 16);
  v1(v2, v0[186], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  v1(v6, v2, v3);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v4;
  *(unsigned char *)(v7 + 24) = 0;
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v8 + 24) = v7;
  os_unfair_lock_lock(v5);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)(v0 + 1600) + 176);
  *(void *)(v0 + 1656) = v1;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)(*(void *)(v0 + 920), *(unsigned __int8 *)(v0 + 2000), *(void *)(v0 + 928), *(void *)(v0 + 936), *(void *)(v0 + 944) | ((HIDWORD(*(void *)(v0 + 944)) & 1) << 32), *(void *)(v0 + 1400));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 1600) + 56), *(void *)(*(void *)(v0 + 1600) + 80));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1664) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  uint64_t v2 = *(void *)(v0 + 1416);
  uint64_t v3 = *(unsigned char *)(v0 + 2000);
  uint64_t v4 = *(void *)(v0 + 896);
  return OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v2, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[209];
  uint64_t v2 = v0[200];
  uint64_t v3 = (void *)v0[175];
  uint64_t v4 = v0[119];
  swift_beginAccess();
  *(void *)(v4 + 16) = v1;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(v1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v6 = *(void *)(v2 + 176);
  v0[211] = v6;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v6, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  DataStreamStateManager.startPromptProcessingInstrumenter(uuid:onBehalfOfUserIdentifier:)(*(void *)(v0 + 920), *(void *)(v0 + 944) | ((HIDWORD(*(void *)(v0 + 944)) & 1) << 32));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  NSObject *v0;
  Class isa;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  objc_class *v9;
  Class v10;
  Class v11;
  Class v12;
  Class v13;
  uint64_t v14;
  objc_class *v15;
  objc_class *v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  Class v20;
  Class v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  objc_class *v26;
  uint64_t v27;
  Class v28;
  Class v29;
  Class v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  id v37;
  objc_class *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  Class v46;
  Class v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Class v57;
  Class v58;
  Class v59;
  id v60;
  void *v61;
  uint64_t v62;
  Class v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  Class v68;
  Class v69;
  Class v70;
  uint64_t v71;
  uint64_t v72;
  objc_class *v73;
  Class v74;
  Class v75;
  Class v76;
  void *v77;
  Class v78;
  Class v79;
  os_log_t loga;
  os_log_t log;
  os_log_t logb;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;

  uint64_t v89 = v0;
  Class isa = v0[210].isa;
  uint64_t v2 = v0[209].isa;
  uint64_t v3 = (uint64_t)v0[177].isa;
  uint64_t v4 = (uint64_t)v0[169].isa;
  uint64_t v5 = *(unsigned __int8 *)(v3 + *((int *)v0[176].isa + 7));
  uint64_t v6 = TG_OnDeviceInferenceProvider.promptTokenTable(from:)(v2[14]);
  uint64_t v7 = specialized TG_OnDeviceInferenceProvider.localizationOverrideMap(from:)(v2[15]);
  uint64_t v8 = v2[7];
  swift_retain();
  TG_OnDeviceInferenceProvider.process(prompt:tokenizer:tokenTable:localizationOverrideMap:shouldDetokenizeRenderedPrompt:)(&v86, v4, v3, v8, v6, v7, v5);
  uint64_t v9 = isa;
  v0[212].Class isa = isa;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (isa) {
    goto LABEL_2;
  }
  uint64_t v43 = v86;
  uint64_t v42 = v87;
  uint64_t v44 = v88;
  if (!*(void *)(v86 + 16))
  {
    uint64_t v57 = v0[169].isa;
    uint64_t v58 = v0[166].isa;
    unint64_t v59 = v0[165].isa;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = objc_allocWithZone(MEMORY[0x263F087E8]);
    unint64_t v61 = (void *)MEMORY[0x2612053D0](0xD000000000000019, 0x800000025FB63000);
    uint64_t v9 = (objc_class *)objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 1, 0);

    swift_willThrow();
    (*((void (**)(Class, Class))v58 + 1))(v57, v59);
LABEL_2:
    v0[240].Class isa = v9;
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v10 = v0[192].isa;
    uint64_t v11 = v0[189].isa;
    uint64_t v12 = v0[188].isa;
    os_log_type_t v13 = v0[109].isa;
    BOOL v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.device);
    (*((void (**)(Class, Class, Class))v11 + 2))(v10, v13, v12);
    uint64_t v15 = v9;
    uint64_t v16 = v9;
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.error.getter();
    uint64_t v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[192].isa;
    unint64_t v21 = v0[189].isa;
    char v22 = v0[188].isa;
    if (v19)
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v77 = (void *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      uint64_t v86 = v83;
      *(_DWORD *)uint64_t v23 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[101].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(Class, Class))v21 + 1))(v20, v22);
      *(_WORD *)(v23 + 12) = 2114;
      uint64_t v26 = v9;
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      v0[102].Class isa = (Class)v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v77 = v27;

      _os_log_impl(&dword_25FA51000, v17, v18, "Failed to handle request %{public}s, error tokenizing prompt: %{public}@", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v77, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v83, -1, -1);
      MEMORY[0x261206F80](v23, -1, -1);
    }
    else
    {
      (*((void (**)(Class, Class))v21 + 1))(v0[192].isa, v0[188].isa);
    }
    uint64_t v28 = v0[183].isa;
    uint64_t v29 = v0[179].isa;
    loga = (os_log_t)v0[178].isa;
    uint64_t v30 = v0[134].isa;
    uint64_t v31 = v0[133].isa;
    uint64_t v78 = v0[132].isa;
    uint64_t v32 = (uint64_t)v0[175].isa + *((int *)v0[170].isa + 11);
    outlined destroy of DataStreamState?(v32, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    uint64_t v33 = *MEMORY[0x263F4FD68];
    uint64_t v34 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    uint64_t v35 = *(void *)(v34 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 104))(v32, v33, v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    uint64_t v36 = (objc_class *)_convertErrorToNSError(_:)();
    v0[241].Class isa = v36;
    uint64_t v37 = [(objc_class *)v36 domain];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    [(objc_class *)v36 code];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*((void (**)(Class, Class, Class))v31 + 2))(v28, v30, v78);
    (*((void (**)(Class, void, os_log_t))v29 + 13))(v28, *MEMORY[0x263F56280], loga);
    uint64_t v38 = (objc_class *)swift_task_alloc();
    v0[242].Class isa = v38;
    *(void *)uint64_t v38 = v0;
    *((void *)v38 + 1) = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    uint64_t v39 = (uint64_t)v0[175].isa;
    uint64_t v40 = (uint64_t)v0[115].isa;
    return DataStreamStateManager.removeState(uuid:state:)(v40, v39);
  }
  log = v0 + 2;
  uint64_t v45 = v0[169].isa;
  uint64_t v46 = v0[166].isa;
  uint64_t v47 = v0[165].isa;
  char v48 = (uint64_t)v0[175].isa + *((int *)v0[170].isa + 18);
  outlined destroy of DataStreamState?(v48, &demangling cache variable for type metadata for Prompt.Rendering?);
  (*((void (**)(uint64_t, Class, Class))v46 + 2))(v48, v45, v47);
  (*((void (**)(uint64_t, void, uint64_t, Class))v46 + 7))(v48, 0, 1, v47);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v50 = Logger.logObject.getter();
  uint64_t v51 = static os_log_type_t.debug.getter();
  unint64_t v84 = v44;
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136642819;
    uint64_t v85 = v53;
    uint64_t v86 = v43;
    uint64_t v87 = v42;
    unint64_t v88 = v84;
    SamplingDecoderPrompt.description.getter();
    v0[106].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v50, v51, "Tokenized prompt is %{sensitive}s", v52, 0xCu);
    swift_arrayDestroy();
    uint64_t v56 = v53;
    uint64_t v44 = v84;
    MEMORY[0x261206F80](v56, -1, -1);
    MEMORY[0x261206F80](v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v0[209].isa + 16, (uint64_t)log);
  uint64_t v62 = (uint64_t)v0[5].isa;
  uint64_t v63 = v0[6].isa;
  __swift_project_boxed_opaque_existential_1(log, v62);
  uint64_t v86 = v43;
  uint64_t v87 = v42;
  unint64_t v88 = v44;
  (*((void (**)(uint64_t *, uint64_t, Class))v63 + 1))(&v86, v62, v63);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)log);
  uint64_t v86 = MEMORY[0x263F8EE78];
  uint64_t v64 = *(void *)(v42 + 16);
  if (v64)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v64; ++i)
    {
      uint64_t v66 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v66);
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v67 = (uint64_t)v0[175].isa;
  uint64_t v79 = v0[200].isa;
  logb = (os_log_t)v0[174].isa;
  uint64_t v74 = v0[169].isa;
  uint64_t v75 = v0[166].isa;
  uint64_t v76 = v0[165].isa;
  uint64_t v68 = v0[164].isa;
  uint64_t v69 = v0[163].isa;
  uint64_t v70 = v0[162].isa;
  uint64_t v71 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v72 = *(void *)(v86 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v67 + 16) = v72;
  type metadata accessor for TransparencyReport();
  swift_allocObject();
  TransparencyReport.init()();
  Prompt.Rendering.renderedString.getter();
  InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  (*((void (**)(Class, void, Class))v69 + 13))(v68, *MEMORY[0x263F4F748], v70);
  TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*((void (**)(Class, Class))v69 + 1))(v68, v70);
  (*((void (**)(Class, Class))v75 + 1))(v74, v76);
  uint64_t v73 = (objc_class *)*((void *)v79 + 22);
  v0[213].Class isa = v73;
  outlined init with copy of DataStreamState(v67, (uint64_t)logb, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v73, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  unsigned char v9[17];
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v1 = v0[187];
  uint64_t v2 = v0[175];
  uint64_t v3 = v0[110];
  uint64_t v4 = (os_unfair_lock_s *)(v0[201] + 16);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v0[177], (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  outlined destroy of DataStreamState?(v1, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v2, type metadata accessor for DataStreamState);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(unsigned char *)(v5 + 24) = 0;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v6 + 24) = v5;
  os_unfair_lock_lock(v4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 1392);
  DataStreamStateManager.endPromptProcessingInstrumenter(uuid:state:)(*(void *)(v0 + 920), v1);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v1, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 1672);
  uint64_t v2 = *(void **)(v0 + 1600);
  uint64_t v11 = *(void *)(v0 + 1408);
  uint64_t v3 = *(void *)(v0 + 1400);
  uint64_t v12 = *(void *)(v0 + 1360);
  uint64_t v4 = *(void *)(v0 + 1288);
  uint64_t v5 = *(void *)(v0 + 1280);
  os_log_type_t v13 = *(void *)(v0 + 1272);
  BOOL v14 = *(void *)(v0 + 1392);
  uint64_t v6 = *(void *)(v0 + 960);
  __swift_project_boxed_opaque_existential_1(v2 + 7, v2[10]);
  uint64_t v7 = *(void *)(v1 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v6 + 16) = v8;
  *(_DWORD *)(v0 + 1984) = *(_DWORD *)(v11 + 20);
  SamplingParameters.stopSequences.getter();
  StopSequenceMonitor.init(stopSequences:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v3 + *(int *)(v12 + 36), v4, v13);
  uint64_t v9 = v2[22];
  *(void *)(v0 + 1712) = v9;
  outlined init with copy of DataStreamState(v3, v14, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v9, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 1392);
  DataStreamStateManager.updateState(uuid:state:)(*(void *)(v0 + 920), v1);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v1, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[187];
  uint64_t v2 = v0[177];
  uint64_t v3 = v0[175];
  uint64_t v4 = v0[121];
  uint64_t v5 = SamplingParameters.maximumTokens.getter();
  uint64_t v7 = v6;
  swift_release();
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v2, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  outlined destroy of DataStreamState?(v1, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  if (v7) {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  swift_beginAccess();
  *(void *)(v4 + 16) = v5;
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v3, type metadata accessor for DataStreamState);
  v0[215] = v0[212];
  uint64_t v8 = *(void *)(v0[200] + 176);
  v0[216] = v8;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v8, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[216];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v0[115];
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    uint64_t v5 = v0[171];
    uint64_t v6 = v0[170];
    uint64_t v7 = v0[158];
    if (v8)
    {
      outlined init with copy of DataStreamState(*(void *)(v2 + 56) + *(void *)(v5 + 72) * v4, v0[158], type metadata accessor for DataStreamState);
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v9(v7, 0, 1, v6);
    }
    else
    {
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v9(v0[158], 1, 1, v6);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[171] + 56);
    v9(v0[158], 1, 1, v0[170]);
  }
  swift_release();
  v0[217] = v9;
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_unfair_lock_s *v79;
  os_log_type_t v80;
  os_unfair_lock_s *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;

  unint64_t v88 = v0;
  uint64_t v1 = *(void *)(v0 + 1264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 1368) + 48))(v1, 1, *(void *)(v0 + 1360)) == 1)
  {
    outlined destroy of DataStreamState?(v1, &demangling cache variable for type metadata for DataStreamState?);
LABEL_10:
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 1552);
    uint64_t v20 = *(void *)(v0 + 1544);
    unint64_t v21 = *(void *)(v0 + 1512);
    char v22 = *(void *)(v0 + 1504);
    uint64_t v23 = *(void *)(v0 + 920);
    uint64_t v24 = *(void *)(v0 + 872);
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.device);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v26(v19, v24, v22);
    v26(v20, v23, v22);
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.error.getter();
    uint64_t v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 1552);
    uint64_t v31 = *(void *)(v0 + 1544);
    uint64_t v32 = *(void *)(v0 + 1512);
    uint64_t v33 = *(void *)(v0 + 1504);
    if (v29)
    {
      uint64_t v80 = v28;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      uint64_t v86 = v83;
      *(_DWORD *)uint64_t v34 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 720) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v37(v30, v33);
      *(_WORD *)(v34 + 12) = 2082;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 840) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37(v31, v33);
      _os_log_impl(&dword_25FA51000, v27, v80, "Failed to handle request %{public}s, data stream %{public}s does not exist", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v83, -1, -1);
      MEMORY[0x261206F80](v34, -1, -1);
    }
    else
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v40(*(void *)(v0 + 1552), *(void *)(v0 + 1504));
      v40(v31, v33);
    }

    uint64_t v41 = *(os_unfair_lock_s **)(v0 + 1608);
    uint64_t v42 = *(void *)(v0 + 1432);
    uint64_t v43 = *(void *)(v0 + 1424);
    uint64_t v44 = *(void *)(v0 + 1072);
    uint64_t v45 = *(void *)(v0 + 1064);
    uint64_t v46 = *(void *)(v0 + 1056);
    unint64_t v84 = *(void *)(v0 + 880);
    uint64_t v86 = 0;
    uint64_t v47 = v41 + 4;
    uint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v86 = 0xD000000000000023;
    uint64_t v87 = 0x800000025FB6CDB0;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v49, v44, v46);
    (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v50, *MEMORY[0x263F56278], v43);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    uint64_t v51 = swift_task_alloc();
    *(void *)(v51 + 16) = v84;
    *(unsigned char *)(v51 + 24) = 0;
    uint64_t v52 = swift_task_alloc();
    *(void *)(v52 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
    *(void *)(v52 + 24) = v51;
    os_unfair_lock_lock(v47);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v86);
    os_unfair_lock_unlock(v47);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_19;
  }
  uint64_t v2 = *(unsigned char *)(v0 + 2001);
  outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v1, *(void *)(v0 + 1384), type metadata accessor for DataStreamState);
  if ((v2 & 1) != 0
    || (uint64_t v3 = *(void *)(v0 + 952), swift_beginAccess(), v4 = *(void *)(v3 + 16), (*(void *)(v0 + 1744) = v4) == 0))
  {
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 1384), type metadata accessor for DataStreamState);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v0 + 976);
  swift_beginAccess();
  if ((*(unsigned char *)(v5 + 16) & 1) == 0)
  {
    uint64_t v54 = *(void *)(v0 + 984);
    swift_beginAccess();
    if (*(unsigned char *)(v54 + 16) == 1)
    {
      uint64_t v55 = *(void *)(v0 + 1328);
      uint64_t v56 = *(void *)(v0 + 1320);
      uint64_t v57 = *(void *)(v0 + 1216);
      outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 72), v57, &demangling cache variable for type metadata for Prompt.Rendering?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v57, 1, v56) != 1)
      {
        uint64_t v76 = *(void *)(v0 + 1384);
        uint64_t v63 = *(void *)(v0 + 1344);
        uint64_t v64 = *(void *)(v0 + 1336);
        uint64_t v65 = *(void *)(v0 + 1328);
        uint64_t v66 = *(void *)(v0 + 1320);
        uint64_t v78 = *(void *)(v0 + 880);
        unint64_t v67 = *(uint64_t **)(v0 + 856);
        uint64_t v81 = (os_unfair_lock_s *)(*(void *)(v0 + 1608) + 16);
        uint64_t v85 = *(void *)(v0 + 1720);
        uint64_t v74 = (unsigned char *)(*(void *)(v0 + 984) + 16);
        (*(void (**)(uint64_t, void, uint64_t))(v65 + 32))(v63, *(void *)(v0 + 1216), v66);
        swift_retain();
        UUID.uuidString.getter();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v64, v63, v66);
        uint64_t v68 = type metadata accessor for PromptCompletionEventRenderedPrompt();
        uint64_t v69 = MEMORY[0x263F7F738];
        v67[3] = v68;
        v67[4] = v69;
        __swift_allocate_boxed_opaque_existential_1(v67);
        PromptCompletionEventRenderedPrompt.init(responseIdentifier:renderedPrompt:)();
        swift_release();
        swift_beginAccess();
        *uint64_t v74 = 0;
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v66);
        outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v76, type metadata accessor for DataStreamState);
        uint64_t v70 = swift_task_alloc();
        *(void *)(v70 + 16) = v78;
        *(unsigned char *)(v70 + 24) = 0;
        uint64_t v71 = swift_task_alloc();
        *(void *)(v71 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
        *(void *)(v71 + 24) = v70;
        uint64_t v16 = v81;
        os_unfair_lock_lock(v81);
        uint64_t v17 = v85;
        partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v86);
        goto LABEL_7;
      }
      uint64_t v58 = *(void *)(v0 + 1216);
      swift_retain();
      outlined destroy of DataStreamState?(v58, &demangling cache variable for type metadata for Prompt.Rendering?);
    }
    else
    {
      swift_retain();
    }
    unint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 1752) = v59;
    *unint64_t v59 = v0;
    v59[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    uint64_t v60 = *(void *)(v0 + 1384);
    unint64_t v61 = *(void *)(v0 + 1208);
    uint64_t v62 = *(void *)(v0 + 872);
    return TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(v61, v60, v62);
  }
  uint64_t v75 = *(void *)(v0 + 1384);
  uint64_t v6 = *(void *)(v0 + 1248);
  uint64_t v7 = *(void *)(v0 + 1240);
  uint64_t v8 = *(void *)(v0 + 1232);
  uint64_t v72 = *(void *)(v0 + 1224);
  uint64_t v77 = *(void *)(v0 + 880);
  uint64_t v79 = (os_unfair_lock_s *)(*(void *)(v0 + 1608) + 16);
  unint64_t v82 = *(void *)(v0 + 1720);
  uint64_t v73 = *(void *)(v0 + 976);
  uint64_t v9 = *(uint64_t **)(v0 + 856);
  swift_retain();
  OnDeviceInferenceContext.assets.getter();
  uint64_t v10 = objc_msgSend(self, sel_processInfo);
  uint64_t v11 = objc_msgSend(v10, sel_operatingSystemVersionString);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  ModelInformation.init(assets:systemVersion:)();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v72);
  uint64_t v12 = type metadata accessor for PromptCompletionEventModelInformation();
  os_log_type_t v13 = MEMORY[0x263F7FA30];
  v9[3] = v12;
  v9[4] = v13;
  __swift_allocate_boxed_opaque_existential_1(v9);
  PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)();
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v73 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v72);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v75, type metadata accessor for DataStreamState);
  BOOL v14 = swift_task_alloc();
  *(void *)(v14 + 16) = v77;
  *(unsigned char *)(v14 + 24) = 0;
  uint64_t v15 = swift_task_alloc();
  *(void *)(v15 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = v79;
  os_unfair_lock_lock(v79);
  uint64_t v17 = v82;
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v86);
LABEL_7:
  os_unfair_lock_unlock(v16);
  if (!v17)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
LABEL_19:
    return v18();
  }
  return swift_task_dealloc();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  os_unfair_lock_s *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  uint64_t v82;
  uint64_t v83;

  unint64_t v82 = v0;
  uint64_t v1 = *(void *)(v0 + 1200);
  uint64_t v2 = *(void *)(v0 + 1160);
  uint64_t v3 = *(void *)(v0 + 1152);
  outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 1208), v1, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 1760) = v4;
  *(void *)(v0 + 1768) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  uint64_t v5 = v4(v1, 1, v3);
  uint64_t v6 = *(void *)(v0 + 1744);
  if (v5 != 1)
  {
    unint64_t v21 = *(void *)(v0 + 1384);
    char v22 = *(void *)(v0 + 1208);
    uint64_t v23 = *(void *)(v0 + 1176);
    uint64_t v24 = *(void *)(v0 + 1152);
    uint64_t v75 = *(void *)(v0 + 880);
    uint64_t v79 = *(void *)(v0 + 1720);
    uint64_t v25 = *(uint64_t **)(v0 + 856);
    uint64_t v15 = (os_unfair_lock_s *)(*(void *)(v0 + 1608) + 16);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1160) + 32);
    v26(v23, *(void *)(v0 + 1200), v24);
    uint64_t v27 = MEMORY[0x263F7FA60];
    v25[3] = v24;
    v25[4] = v27;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    v26((uint64_t)boxed_opaque_existential_1, v23, v24);
    swift_release();
    outlined destroy of DataStreamState?(v22, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v21, type metadata accessor for DataStreamState);
    uint64_t v29 = swift_task_alloc();
    *(void *)(v29 + 16) = v75;
    *(unsigned char *)(v29 + 24) = 0;
    uint64_t v30 = swift_task_alloc();
    *(void *)(v30 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
    *(void *)(v30 + 24) = v29;
    os_unfair_lock_lock(v15);
    uint64_t v20 = v79;
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v81);
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v0 + 1384);
  outlined destroy of DataStreamState?(*(void *)(v0 + 1200), &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  *(void *)(v0 + 1776) = *(void *)(v6 + 136);
  if (*(unsigned char *)(v7 + 24) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 1720);
    *(void *)(v0 + 1896) = v8;
    uint64_t v9 = *(void *)(v0 + 992);
    swift_beginAccess();
    if (*(unsigned char *)(v9 + 16))
    {
      uint64_t v10 = *(void *)(v0 + 1384);
      uint64_t v11 = *(void *)(v0 + 1208);
      uint64_t v12 = *(void *)(v0 + 992);
      os_log_type_t v13 = *(void *)(v0 + 880);
      BOOL v14 = *(uint64_t **)(v0 + 856);
      uint64_t v78 = v8;
      uint64_t v15 = (os_unfair_lock_s *)(*(void *)(v0 + 1608) + 16);
      swift_beginAccess();
      *(unsigned char *)(v12 + 16) = 0;
      UUID.uuidString.getter();
      Usage.init(promptTokenCount:completionTokenCount:)();
      uint64_t v16 = type metadata accessor for PromptCompletionEventUsage();
      uint64_t v17 = MEMORY[0x263F7F9E8];
      v14[3] = v16;
      v14[4] = v17;
      __swift_allocate_boxed_opaque_existential_1(v14);
      PromptCompletionEventUsage.init(responseIdentifier:usage:)();
      swift_release();
      outlined destroy of DataStreamState?(v11, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
      outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v10, type metadata accessor for DataStreamState);
      uint64_t v18 = swift_task_alloc();
      *(void *)(v18 + 16) = v13;
      *(unsigned char *)(v18 + 24) = 0;
      uint64_t v19 = swift_task_alloc();
      *(void *)(v19 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
      *(void *)(v19 + 24) = v18;
      os_unfair_lock_lock(v15);
      uint64_t v20 = v78;
      partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v81);
      goto LABEL_6;
    }
    uint64_t v36 = *(void *)(v0 + 1000);
    swift_beginAccess();
    if (*(unsigned char *)(v36 + 16) != 1) {
      goto LABEL_19;
    }
    uint64_t v37 = *(void *)(v0 + 1096);
    uint64_t v38 = *(void *)(v0 + 1088);
    uint64_t v39 = *(void *)(v0 + 1080);
    outlined init with copy of (Int, LogitCollection)(*(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 56), v39, &demangling cache variable for type metadata for FinishReason?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
    {
      outlined destroy of DataStreamState?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for FinishReason?);
LABEL_19:
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v40 = *(void *)(v0 + 1560);
      uint64_t v41 = *(void *)(v0 + 1512);
      uint64_t v42 = *(void *)(v0 + 1504);
      uint64_t v43 = *(void *)(v0 + 872);
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Log.device);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
      uint64_t v45 = Logger.logObject.getter();
      uint64_t v46 = static os_log_type_t.info.getter();
      uint64_t v47 = os_log_type_enabled(v45, v46);
      char v48 = *(void *)(v0 + 1560);
      uint64_t v49 = *(void *)(v0 + 1512);
      uint64_t v50 = *(void *)(v0 + 1504);
      if (v47)
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        v81[0] = v52;
        *(_DWORD *)uint64_t v51 = 136446210;
        _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 712) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
        _os_log_impl(&dword_25FA51000, v45, v46, "Successfully handled streaming request %{public}s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v52, -1, -1);
        MEMORY[0x261206F80](v51, -1, -1);
      }
      else
      {
        (*(void (**)(void, void))(v49 + 8))(*(void *)(v0 + 1560), *(void *)(v0 + 1504));
      }

      *(void *)(v0 + 1904) = *(void *)(*(void *)(v0 + 1600) + 176);
      swift_retain();
      unint64_t v59 = (void *)swift_task_alloc();
      *(void *)(v0 + 1912) = v59;
      *unint64_t v59 = v0;
      v59[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
      uint64_t v60 = *(void *)(v0 + 1384);
      unint64_t v61 = *(void *)(v0 + 920);
      return DataStreamStateManager.removeState(uuid:state:)(v61, v60);
    }
    uint64_t v72 = *(void *)(v0 + 1208);
    uint64_t v62 = *(void *)(v0 + 1112);
    uint64_t v71 = *(void *)(v0 + 1104);
    uint64_t v63 = *(void *)(v0 + 1096);
    uint64_t v64 = *(void *)(v0 + 1088);
    uint64_t v65 = *(void *)(v0 + 1000);
    uint64_t v73 = *(void *)(v0 + 1384);
    uint64_t v74 = *(void *)(v0 + 880);
    uint64_t v77 = (os_unfair_lock_s *)(*(void *)(v0 + 1608) + 16);
    uint64_t v66 = *(uint64_t **)(v0 + 856);
    (*(void (**)(uint64_t, void, uint64_t))(v63 + 32))(v62, *(void *)(v0 + 1080), v64);
    swift_beginAccess();
    *(unsigned char *)(v65 + 16) = 0;
    UUID.uuidString.getter();
    UUID.uuidString.getter();
    uint64_t v80 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v71, v62, v64);
    unint64_t v67 = type metadata accessor for PromptCompletionEventCandidateFinished();
    uint64_t v68 = MEMORY[0x263F7FA58];
    v66[3] = v67;
    v66[4] = v68;
    __swift_allocate_boxed_opaque_existential_1(v66);
    PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    outlined destroy of DataStreamState?(v72, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v73, type metadata accessor for DataStreamState);
    uint64_t v69 = swift_task_alloc();
    *(void *)(v69 + 16) = v74;
    *(unsigned char *)(v69 + 24) = 0;
    uint64_t v70 = swift_task_alloc();
    *(void *)(v70 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
    *(void *)(v70 + 24) = v69;
    uint64_t v15 = v77;
    os_unfair_lock_lock(v77);
    uint64_t v20 = v80;
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v81);
LABEL_6:
    os_unfair_lock_unlock(v15);
    if (v20)
    {
      return swift_task_dealloc();
    }
    else
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
      return v35();
    }
  }
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  *(_DWORD *)(v0 + 1988) = *MEMORY[0x263F7F888];
  *(_DWORD *)(v0 + 1992) = *MEMORY[0x263F7F880];
  *(_DWORD *)(v0 + 1996) = *MEMORY[0x263F7F870];
  uint64_t v32 = *(void *)(*(void *)(v0 + 1384) + 8);
  *(void *)(v0 + 1784) = v32;
  if (v32 == 1)
  {
    uint64_t v33 = *(void *)(*(void *)(v0 + 1600) + 176);
    *(void *)(v0 + 1800) = v33;
    uint64_t v34 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    goto LABEL_24;
  }
  if (!v32)
  {
    uint64_t v33 = *(void *)(*(void *)(v0 + 1600) + 176);
    *(void *)(v0 + 1792) = v33;
    uint64_t v34 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
LABEL_24:
    uint64_t v55 = v34;
    swift_retain();
    return MEMORY[0x270FA2498](v55, v33, 0);
  }
  outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v0 + 1744) + 16, v0 + 96);
  uint64_t v56 = *(void *)(v0 + 120);
  uint64_t v57 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v56);
  uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v57 + 16) + **(int **)(v57 + 16));
  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 1808) = v58;
  uint64_t *v58 = v0;
  v58[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return v76(v56, v57);
}

{
  uint64_t v0;
  uint64_t v2;

  DataStreamStateManager.startFirstTokenInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)(*(void *)(v0 + 920), *(void *)(v0 + 944) | ((HIDWORD(*(void *)(v0 + 944)) & 1) << 32));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  outlined init with copy of DeterministicLanguageModelProtocol(v0[218] + 16, (uint64_t)(v0 + 12));
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v1);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[226] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return v5(v1, v2);
}

{
  uint64_t v0;
  uint64_t v2;

  DataStreamStateManager.startExtendInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)(*(void *)(v0 + 920), *(void *)(v0 + 944) | ((HIDWORD(*(void *)(v0 + 944)) & 1) << 32));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  uint64_t (*v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t (*v78)();
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  void (**v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  NSObject *v106;
  os_log_type_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  id v128;
  NSObject *v129;
  os_log_type_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  Swift::OpaquePointer v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *rawValue;
  uint64_t countAndFlagsBits;
  void *object;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  os_log_type_t type;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  int log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  os_log_t v178;
  os_log_t v179;
  os_log_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188[2];
  uint64_t v189;
  uint64_t v190;
  Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional v191;

  uint64_t v189 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 832);
  uint64_t v3 = *(void *)(v0 + 1816);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  if (!v3)
  {
LABEL_13:
    uint64_t v27 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v28 = (void *)MEMORY[0x2612053D0](0xD000000000000019, 0x800000025FB63000);
    uint64_t v29 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 2, 0);

    swift_willThrow();
    *(void *)(v0 + 1944) = v29;
    uint64_t v16 = (uint64_t *)_convertErrorToNSError(_:)();
    *(void *)(v0 + 1952) = v16;
    if (one-time initialization token for device == -1) {
      goto LABEL_14;
    }
    goto LABEL_88;
  }
  uint64_t v4 = *(void *)(v0 + 1816);
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  NSObject *v2 = v4;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 1832) = __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = v7;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v181 = v0 + 768;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v188[0] = v10;
    *(_DWORD *)uint64_t v9 = 136642819;
    uint64_t v178 = (os_log_t)(v9 + 4);
    swift_beginAccess();
    uint64_t v1 = (void *)*v2;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x261205560](v11, MEMORY[0x263F8D6C8]);
    BOOL v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = v12;
    uint64_t v2 = (uint64_t *)(v0 + 832);
    *(void *)(v0 + 768) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25FA51000, v6, (os_log_type_t)v8, "Decoded token: %{sensitive}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v10, -1, -1);
    MEMORY[0x261206F80](v9, -1, -1);
  }

  if (*(void *)(v0 + 1784))
  {
    uint64_t v16 = *(uint64_t **)(v0 + 1384);
    uint64_t v17 = v16[1];
    uint64_t v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    uint64_t v20 = *(void *)(v0 + 1744);
    unint64_t v21 = *(void *)(v0 + 968);
    char v22 = *(void *)(v0 + 960);
    v16[1] = v19;
    specialized TG_OnDeviceInferenceProvider.updateMetrics(dataStreamState:inferenceContext:)(v16, v20);
    uint64_t v23 = v16[1];
    uint64_t v24 = *(void *)(v21 + 16);
    swift_beginAccess();
    uint64_t v25 = *(void *)(v0 + 832);
    uint64_t v8 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v178 = v23;
    uint64_t v181 = v24;
    if (!v26) {
      goto LABEL_35;
    }
    if (*(void *)(v25 + 32) == v8)
    {
LABEL_11:
      log = 1;
      goto LABEL_42;
    }
    if (v26 == 1)
    {
LABEL_35:
      if ((uint64_t)v23 < v24 && !*(void *)(v0 + 1776))
      {
LABEL_41:
        log = 0;
LABEL_42:
        uint64_t v83 = *(void *)(v0 + 1824);
        unint64_t v84 = *(void *)(v0 + 960);
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v0 + 1744) + 64, v0 + 56);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), *(void *)(v0 + 80));
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        uint64_t v85 = swift_allocObject();
        *(_OWORD *)(v85 + 16) = xmmword_25FB61DF0;
        *(void *)(v85 + 32) = *(void *)(v84 + 16);
        swift_bridgeObjectRetain();
        uint64_t v86 = TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)();
        *(void *)(v0 + 1848) = v83;
        uint64_t v87 = *(void *)(v0 + 1504);
        unint64_t v88 = *(void *)(v0 + 872);
        uint64_t v89 = *(void *)(v0 + 1512) + 16;
        if (v83)
        {
          uint64_t v90 = *(void *)(v0 + 1520);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(v0 + 56);
          uint64_t v91 = (void *)_convertErrorToNSError(_:)();
          *(void *)(v0 + 1976) = v91;
          (*(void (**)(uint64_t, uint64_t, uint64_t))v89)(v90, v88, v87);
          uint64_t v92 = v91;
          uint64_t v93 = Logger.logObject.getter();
          uint64_t v94 = static os_log_type_t.error.getter();
          unint64_t v95 = os_log_type_enabled(v93, v94);
          uint64_t v96 = *(void *)(v0 + 1520);
          uint64_t v97 = *(void *)(v0 + 1504);
          unint64_t v98 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1512) + 8);
          if (v95)
          {
            uint64_t v99 = swift_slowAlloc();
            logb = (os_log_t)swift_slowAlloc();
            uint64_t v183 = swift_slowAlloc();
            v188[0] = v183;
            *(_DWORD *)uint64_t v99 = 136446466;
            _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            unint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 784) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v188);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*v98)(v96, v97);
            *(_WORD *)(v99 + 12) = 2114;
            *(void *)(v0 + 776) = v92;
            uint64_t v102 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            logb->Class isa = (Class)v92;

            _os_log_impl(&dword_25FA51000, v93, v94, "Failed to handle request %{public}s, detokenization failed: %{public}@", (uint8_t *)v99, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x261206F80](logb, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x261206F80](v183, -1, -1);
            MEMORY[0x261206F80](v99, -1, -1);
          }
          else
          {
            (*v98)(*(void *)(v0 + 1520), *(void *)(v0 + 1504));
          }
          Swift::String v120 = *(void *)(v0 + 1432);
          uint64_t v184 = *(void *)(v0 + 1424);
          uint64_t v121 = *(void *)(v0 + 1072);
          uint64_t v122 = *(void *)(v0 + 1064);
          logc = *(os_log_t *)(v0 + 1056);
          v180 = *(os_log_t *)(v0 + 1464);
          uint64_t v123 = *(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 44);
          outlined destroy of DataStreamState?(v123, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
          uint64_t v124 = *MEMORY[0x263F4FD70];
          uint64_t v125 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
          uint64_t v126 = *(void *)(v125 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 104))(v123, v124, v125);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
          uint64_t v127 = objc_msgSend(v92, sel_localizedDescription);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v128 = objc_msgSend(v92, sel_domain);
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          objc_msgSend(v92, sel_code);
          specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
          (*(void (**)(os_log_t, uint64_t, os_log_t))(v122 + 16))(v180, v121, logc);
          (*(void (**)(os_log_t, void, uint64_t))(v120 + 104))(v180, *MEMORY[0x263F56280], v184);
          uint64_t v72 = (void *)swift_task_alloc();
          *(void *)(v0 + 1968) = v72;
          *uint64_t v72 = v0;
          uint64_t v73 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
          goto LABEL_26;
        }
        uint64_t v103 = v86;
        uint64_t v104 = *(void *)(v0 + 1584);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v0 + 56);
        uint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t))v89;
        *(void *)(v0 + 1856) = *(void *)v89;
        *(void *)(v0 + 1864) = v89 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v105(v104, v88, v87);
        uint64_t v106 = Logger.logObject.getter();
        uint64_t v107 = static os_log_type_t.debug.getter();
        uint64_t v108 = os_log_type_enabled(v106, v107);
        uint64_t v109 = *(void *)(v0 + 1584);
        uint64_t v110 = *(void *)(v0 + 1512);
        uint64_t v111 = *(void *)(v0 + 1504);
        uint64_t v187 = v103;
        if (v108)
        {
          os_log_type_t type = v107;
          uint64_t v112 = swift_slowAlloc();
          uint64_t v171 = swift_slowAlloc();
          v188[0] = v171;
          *(_DWORD *)uint64_t v112 = 136446467;
          _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
          uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v188);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
          v172(v109, v111);
          *(_WORD *)(v112 + 12) = 2085;
          unint64_t v115 = swift_bridgeObjectRetain();
          Swift::String v116 = MEMORY[0x261205560](v115, MEMORY[0x263F8D6C8]);
          uint64_t v118 = v117;
          swift_bridgeObjectRelease();
          uint64_t v119 = v116;
          uint64_t v103 = v187;
          *(void *)(v0 + 752) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v118, v188);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25FA51000, v106, type, "Request %{public}s output tokens %{sensitive}s", (uint8_t *)v112, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v171, -1, -1);
          MEMORY[0x261206F80](v112, -1, -1);
        }
        else
        {
          uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
          v172(v109, v111);
        }

        v105(*(void *)(v0 + 1576), *(void *)(v0 + 872), *(void *)(v0 + 1504));
        swift_bridgeObjectRetain_n();
        uint64_t v129 = Logger.logObject.getter();
        uint64_t v130 = static os_log_type_t.debug.getter();
        uint64_t v131 = os_log_type_enabled(v129, v130);
        unint64_t v132 = *(void *)(v0 + 1576);
        os_log_type_t v133 = *(void *)(v0 + 1504);
        if (v131)
        {
          uint64_t v134 = swift_slowAlloc();
          uint64_t v173 = swift_slowAlloc();
          v188[0] = v173;
          *(_DWORD *)uint64_t v134 = 136446467;
          _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
          char v135 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 728) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, v188);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v172(v132, v133);
          *(_WORD *)(v134 + 12) = 2085;
          swift_bridgeObjectRetain();
          uint64_t v137 = MEMORY[0x261205560](v187, MEMORY[0x263F8D310]);
          uint64_t v139 = v138;
          swift_bridgeObjectRelease();
          uint64_t v140 = v137;
          uint64_t v103 = v187;
          *(void *)(v0 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v139, v188);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25FA51000, v129, v130, "Request %{public}s detokenized texts %{sensitive}s", (uint8_t *)v134, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v173, -1, -1);
          MEMORY[0x261206F80](v134, -1, -1);
        }
        else
        {
          v172(*(void *)(v0 + 1576), *(void *)(v0 + 1504));
          swift_bridgeObjectRelease_n();
        }

        uint64_t v141 = v181;
        uint64_t v142 = *(void *)(v103 + 16);
        if (v142)
        {
          *(void *)(v0 + 760) = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v142, 0);
          v143._rawValue = *(void **)(v0 + 760);
          uint64_t v144 = v103 + 40;
          do
          {
            swift_bridgeObjectRetain();
            Token.init(text:)();
            *(Swift::OpaquePointer *)(v0 + 760) = v143;
            uint64_t v146 = *((void *)v143._rawValue + 2);
            unint64_t v145 = *((void *)v143._rawValue + 3);
            if (v146 >= v145 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v145 > 1, v146 + 1, 1);
              v143._rawValue = *(void **)(v0 + 760);
            }
            uint64_t v147 = *(void *)(v0 + 1144);
            uint64_t v148 = *(void *)(v0 + 1136);
            char v149 = *(void *)(v0 + 1128);
            *((void *)v143._rawValue + 2) = v146 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v148 + 32))((unint64_t)v143._rawValue+ ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80))+ *(void *)(v148 + 72) * v146, v147, v149);
            v144 += 16;
            --v142;
          }
          while (v142);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v143._rawValue = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v191 = StopSequenceMonitor.handleOutputTokens(_:)(v143);
        rawValue = v191.tokens._rawValue;
        countAndFlagsBits = v191.stopSequence.value._countAndFlagsBits;
        object = v191.stopSequence.value._object;
        swift_bridgeObjectRelease();
        if (object) {
          uint64_t v153 = 0;
        }
        else {
          uint64_t v153 = (uint64_t)v178 < v181;
        }
        if (v153)
        {
          if (log)
          {
            *(unsigned char *)(*(void *)(v0 + 1384) + 24) = 1;
            goto LABEL_71;
          }
          *(unsigned char *)(*(void *)(v0 + 1384) + 24) = *(void *)(v0 + 1776) != 0;
        }
        else
        {
          *(unsigned char *)(*(void *)(v0 + 1384) + 24) = 1;
          if (log)
          {
LABEL_70:
            swift_bridgeObjectRelease();
LABEL_71:
            unint64_t v154 = *(unsigned int *)(v0 + 1996);
            uint64_t v155 = *(void *)(v0 + 1096);
            uint64_t v156 = *(void *)(v0 + 1088);
            uint64_t v157 = *(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 56);
            outlined destroy of DataStreamState?(v157, &demangling cache variable for type metadata for FinishReason?);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 104))(v157, v154, v156);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v155 + 56))(v157, 0, 1, v156);
            if (rawValue[2]) {
              goto LABEL_72;
            }
            goto LABEL_75;
          }
        }
        if (!*(void *)(v0 + 1776))
        {
          if (!object)
          {
            if ((uint64_t)v178 < v181)
            {
              if (!rawValue[2])
              {
                swift_bridgeObjectRelease();
                goto LABEL_78;
              }
              goto LABEL_72;
            }
            unint64_t v166 = *(unsigned int *)(v0 + 1988);
            uint64_t v167 = *(void *)(v0 + 1096);
            uint64_t v168 = *(void *)(v0 + 1088);
            unint64_t v169 = *(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 56);
            outlined destroy of DataStreamState?(v169, &demangling cache variable for type metadata for FinishReason?);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 104))(v169, v166, v168);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v169, 0, 1, v168);
            if (rawValue[2])
            {
LABEL_72:
              uint64_t v158 = (uint64_t)rawValue;
LABEL_77:
              specialized Array.append<A>(contentsOf:)(v158);
              goto LABEL_78;
            }
            swift_bridgeObjectRelease();
LABEL_76:
            uint64_t v158 = StopSequenceMonitor.currentBufferedTokens()();
            goto LABEL_77;
          }
          uint64_t v159 = *(unsigned int *)(v0 + 1992);
          uint64_t v160 = *(void *)(v0 + 1096);
          os_log_type_t v161 = *(void *)(v0 + 1088);
          uint64_t v162 = (uint64_t *)(*(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 56));
          outlined destroy of DataStreamState?((uint64_t)v162, &demangling cache variable for type metadata for FinishReason?);
          uint64_t *v162 = countAndFlagsBits;
          v162[1] = (uint64_t)object;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v160 + 104))(v162, v159, v161);
          uint64_t v163 = v162;
          uint64_t v141 = v181;
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v160 + 56))(v163, 0, 1, v161);
          if (rawValue[2]) {
            goto LABEL_72;
          }
LABEL_75:
          swift_bridgeObjectRelease();
          if ((uint64_t)v178 < v141)
          {
LABEL_78:
            uint64_t v164 = *(void *)(v0 + 1384);
            unint64_t v165 = *(void *)(v0 + 1376);
            uint64_t v77 = *(void *)(*(void *)(v0 + 1600) + 176);
            *(void *)(v0 + 1872) = v77;
            outlined init with copy of DataStreamState(v164, v165, type metadata accessor for DataStreamState);
            uint64_t v78 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
            goto LABEL_79;
          }
          goto LABEL_76;
        }
        goto LABEL_70;
      }
      swift_beginAccess();
      uint64_t v1 = (void *)*v2;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_38:
        unint64_t v82 = v1[2];
        uint64_t v81 = v1[3];
        if (v82 >= v81 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v1);
        }
        v1[2] = v82 + 1;
        v1[v82 + 4] = v8;
        NSObject *v2 = (uint64_t)v1;
        swift_endAccess();
        goto LABEL_41;
      }
LABEL_91:
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
      goto LABEL_38;
    }
    uint64_t v79 = 5;
    while (1)
    {
      uint64_t v80 = v79 - 3;
      if (__OFADD__(v79 - 4, 1)) {
        break;
      }
      if (*(void *)(v25 + 8 * v79) == v8) {
        goto LABEL_11;
      }
      ++v79;
      if (v80 == v26) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_88:
    swift_once();
LABEL_14:
    uint64_t v30 = *(void *)(v0 + 1528);
    uint64_t v31 = *(void *)(v0 + 1512);
    uint64_t v32 = *(void *)(v0 + 1504);
    uint64_t v33 = *(void *)(v0 + 872);
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.device);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
    uint64_t v35 = v16;
    uint64_t v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.error.getter();
    uint64_t v1 = (void *)v37;
    uint64_t v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 1528);
    uint64_t v40 = *(void *)(v0 + 1504);
    uint64_t v41 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1512) + 8);
    if (v38)
    {
      uint64_t v181 = v0 + 800;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v178 = (os_log_t)swift_slowAlloc();
      v185 = swift_slowAlloc();
      v188[0] = v185;
      *(_DWORD *)uint64_t v42 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*v41)(v39, v40);
      *(_WORD *)(v42 + 12) = 2114;
      *(void *)(v0 + 800) = v35;
      uint64_t v2 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v178->Class isa = (Class)v35;

      _os_log_impl(&dword_25FA51000, v36, (os_log_type_t)v1, "Failed to handle request %{public}s, error decoding next token. error: %{public}@.", (uint8_t *)v42, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v178, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v185, -1, -1);
      MEMORY[0x261206F80](v42, -1, -1);
    }
    else
    {
      (*v41)(*(void *)(v0 + 1528), *(void *)(v0 + 1504));
    }
    uint64_t v45 = *(void *)(v0 + 1384) + *(int *)(*(void *)(v0 + 1360) + 44);
    outlined destroy of DataStreamState?(v45, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    uint64_t v46 = *MEMORY[0x263F4FD60];
    uint64_t v47 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    char v48 = *(void *)(v47 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 104))(v45, v46, v47);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    if (objc_msgSend(v35, sel_code) == (id)2)
    {
      uint64_t v49 = objc_msgSend(v35, sel_domain);
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v51;

      if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v52 == v53)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_22;
      }
      uint64_t v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v54)
      {
LABEL_22:
        uint64_t v55 = *(void *)(v0 + 1384);
        uint64_t v56 = objc_msgSend(v35, sel_localizedDescription);
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        TokenGenerationError.Context.init(debugDescription:underlyingError:)();
        uint64_t v58 = *(void *)(v55 + 8);
        uint64_t v57 = *(void *)(v55 + 16);
        uint64_t v186 = v57 + v58;
        if (!__OFADD__(v57, v58))
        {
          uint64_t v182 = *(void *)(v0 + 1440);
          unint64_t v59 = *(void *)(v0 + 1432);
          loga = *(os_log_t *)(v0 + 1464);
          uint64_t v179 = *(os_log_t *)(v0 + 1424);
          uint64_t v60 = *(void *)(v0 + 1048);
          unint64_t v61 = *(void *)(v0 + 1040);
          uint64_t v62 = *(void *)(v0 + 1032);
          uint64_t v63 = *(void **)(v0 + 1024);
          uint64_t v64 = *(void *)(v0 + 1016);
          uint64_t v65 = *(void *)(v0 + 1008);
          uint64_t v66 = (char *)v63
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (count: Int, maximum: Int, TokenGenerationError.Context))
                       + 64);
          *uint64_t v63 = v186;
          v63[1] = OnDeviceInferenceContext.maximumContextLength.getter();
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v66, v60, v62);
          (*(void (**)(void *, void, uint64_t))(v64 + 104))(v63, *MEMORY[0x263F7F800], v65);
          TokenGenerationError.inferenceErrorContext.getter();
          (*(void (**)(void *, uint64_t))(v64 + 8))(v63, v65);
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
          (*(void (**)(os_log_t, void, os_log_t))(v59 + 104))(loga, *MEMORY[0x263F56280], v179);
          (*(void (**)(uint64_t, os_log_t, os_log_t))(v59 + 32))(v182, loga, v179);
LABEL_25:
          uint64_t v72 = (void *)swift_task_alloc();
          *(void *)(v0 + 1960) = v72;
          *uint64_t v72 = v0;
          uint64_t v73 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
LABEL_26:
          v72[1] = v73;
          uint64_t v74 = *(void *)(v0 + 1384);
          uint64_t v75 = *(void *)(v0 + 920);
          return DataStreamStateManager.removeState(uuid:state:)(v75, v74);
        }
        goto LABEL_90;
      }
    }
    unint64_t v67 = *(void *)(v0 + 1440);
    uint64_t v68 = *(void *)(v0 + 1432);
    uint64_t v69 = *(void *)(v0 + 1424);
    uint64_t v70 = objc_msgSend(v35, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v71 = objc_msgSend(v35, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v35, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, void, uint64_t))(v68 + 104))(v67, *MEMORY[0x263F56280], v69);
    goto LABEL_25;
  }
  uint64_t v77 = *(void *)(*(void *)(v0 + 1600) + 176);
  *(void *)(v0 + 1840) = v77;
  swift_retain();
  uint64_t v78 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
LABEL_79:
  return MEMORY[0x270FA2498](v78, v77, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)(*(void *)(v0 + 920));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void **v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  Swift::OpaquePointer v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *rawValue;
  uint64_t countAndFlagsBits;
  void *object;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  os_log_type_t type;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  int v113;
  void *v114;
  uint64_t v115;
  os_log_t log;
  os_log_t loga;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[2];
  uint64_t v123;
  uint64_t v124;
  Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional v125;

  uint64_t v123 = v1;
  uint64_t v4 = *(uint64_t **)(v1 + 1384);
  uint64_t v5 = v4[1];
  uint64_t v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v3 = (void **)(v1 + 832);
  uint64_t v8 = *(void *)(v1 + 1744);
  uint64_t v9 = *(void *)(v1 + 968);
  uint64_t v10 = *(void *)(v1 + 960);
  v4[1] = v7;
  specialized TG_OnDeviceInferenceProvider.updateMetrics(dataStreamState:inferenceContext:)(v4, v8);
  uint64_t v11 = v4[1];
  uint64_t v12 = *(void *)(v9 + 16);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 832);
  uint64_t v0 = *(void *)(v10 + 16);
  os_log_type_t v13 = v2[2];
  log = v11;
  uint64_t v118 = v12;
  if (v13)
  {
    if (v2[4] == v0)
    {
LABEL_4:
      uint64_t v113 = 1;
      goto LABEL_17;
    }
    if (v13 != 1)
    {
      BOOL v14 = 5;
      while (1)
      {
        uint64_t v15 = v14 - 3;
        if (__OFADD__(v14 - 4, 1)) {
          break;
        }
        if (v2[v14] == v0) {
          goto LABEL_4;
        }
        ++v14;
        if (v15 == v13) {
          goto LABEL_10;
        }
      }
      __break(1u);
      goto LABEL_63;
    }
  }
LABEL_10:
  if ((uint64_t)v11 >= v12 || *(void *)(v1 + 1776))
  {
    swift_beginAccess();
    uint64_t v2 = *v3;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_13:
      uint64_t v17 = v2[2];
      uint64_t v16 = v2[3];
      if (v17 >= v16 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v2);
      }
      v2[2] = v17 + 1;
      v2[v17 + 4] = v0;
      *uint64_t v3 = v2;
      swift_endAccess();
      goto LABEL_16;
    }
LABEL_64:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v113 = 0;
LABEL_17:
  uint64_t v18 = *(void *)(v1 + 1824);
  uint64_t v19 = *(void *)(v1 + 960);
  outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v1 + 1744) + 64, v1 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), *(void *)(v1 + 80));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_25FB61DF0;
  *(void *)(v20 + 32) = *(void *)(v19 + 16);
  swift_bridgeObjectRetain();
  unint64_t v21 = TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)();
  *(void *)(v1 + 1848) = v18;
  char v22 = *(void *)(v1 + 1504);
  uint64_t v23 = *(void *)(v1 + 872);
  uint64_t v24 = *(void *)(v1 + 1512) + 16;
  if (v18)
  {
    uint64_t v25 = *(void *)(v1 + 1520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v1 + 56);
    uint64_t v26 = (void *)_convertErrorToNSError(_:)();
    *(void *)(v1 + 1976) = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))v24)(v25, v23, v22);
    uint64_t v27 = v26;
    uint64_t v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.error.getter();
    uint64_t v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = *(void *)(v1 + 1520);
    uint64_t v32 = *(void *)(v1 + 1504);
    uint64_t v33 = (void (**)(uint64_t, uint64_t))(*(void *)(v1 + 1512) + 8);
    if (v30)
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v114 = (void *)swift_slowAlloc();
      Swift::String v120 = swift_slowAlloc();
      v122[0] = v120;
      *(_DWORD *)uint64_t v34 = 136446466;
      _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v1 + 784) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*v33)(v31, v32);
      *(_WORD *)(v34 + 12) = 2114;
      *(void *)(v1 + 776) = v27;
      uint64_t v37 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v114 = v27;

      _os_log_impl(&dword_25FA51000, v28, v29, "Failed to handle request %{public}s, detokenization failed: %{public}@", (uint8_t *)v34, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v114, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x261206F80](v120, -1, -1);
      MEMORY[0x261206F80](v34, -1, -1);
    }
    else
    {
      (*v33)(*(void *)(v1 + 1520), *(void *)(v1 + 1504));
    }
    uint64_t v54 = *(void *)(v1 + 1432);
    uint64_t v119 = *(void *)(v1 + 1424);
    uint64_t v55 = *(void *)(v1 + 1072);
    uint64_t v56 = *(void *)(v1 + 1064);
    unint64_t v115 = *(void *)(v1 + 1056);
    loga = *(os_log_t *)(v1 + 1464);
    uint64_t v57 = *(void *)(v1 + 1384) + *(int *)(*(void *)(v1 + 1360) + 44);
    outlined destroy of DataStreamState?(v57, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    uint64_t v58 = *MEMORY[0x263F4FD70];
    unint64_t v59 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    uint64_t v60 = *(void *)(v59 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104))(v57, v58, v59);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    unint64_t v61 = objc_msgSend(v27, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v62 = objc_msgSend(v27, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v27, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v56 + 16))(loga, v55, v115);
    (*(void (**)(os_log_t, void, uint64_t))(v54 + 104))(loga, *MEMORY[0x263F56280], v119);
    uint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v1 + 1968) = v63;
    *uint64_t v63 = v1;
    v63[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    uint64_t v64 = *(void *)(v1 + 1384);
    uint64_t v65 = *(void *)(v1 + 920);
    return DataStreamStateManager.removeState(uuid:state:)(v65, v64);
  }
  uint64_t v38 = v21;
  uint64_t v39 = *(void *)(v1 + 1584);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1 + 56);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))v24;
  *(void *)(v1 + 1856) = *(void *)v24;
  *(void *)(v1 + 1864) = v24 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v40(v39, v23, v22);
  uint64_t v41 = Logger.logObject.getter();
  uint64_t v42 = static os_log_type_t.debug.getter();
  uint64_t v43 = os_log_type_enabled(v41, v42);
  uint64_t v44 = *(void *)(v1 + 1584);
  uint64_t v45 = *(void *)(v1 + 1512);
  uint64_t v46 = *(void *)(v1 + 1504);
  uint64_t v121 = v38;
  if (v43)
  {
    os_log_type_t type = v42;
    uint64_t v47 = swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    v122[0] = v110;
    *(_DWORD *)uint64_t v47 = 136446467;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    char v48 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v111(v44, v46);
    *(_WORD *)(v47 + 12) = 2085;
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = MEMORY[0x261205560](v50, MEMORY[0x263F8D6C8]);
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 752) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25FA51000, v41, type, "Request %{public}s output tokens %{sensitive}s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v110, -1, -1);
    MEMORY[0x261206F80](v47, -1, -1);
  }
  else
  {
    uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v111(v44, v46);
  }

  v40(*(void *)(v1 + 1576), *(void *)(v1 + 872), *(void *)(v1 + 1504));
  swift_bridgeObjectRetain_n();
  unint64_t v67 = Logger.logObject.getter();
  uint64_t v68 = static os_log_type_t.debug.getter();
  uint64_t v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = *(void *)(v1 + 1576);
  uint64_t v71 = *(void *)(v1 + 1504);
  if (v69)
  {
    uint64_t v72 = swift_slowAlloc();
    uint64_t v112 = swift_slowAlloc();
    v122[0] = v112;
    *(_DWORD *)uint64_t v72 = 136446467;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 728) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v111(v70, v71);
    *(_WORD *)(v72 + 12) = 2085;
    swift_bridgeObjectRetain();
    uint64_t v75 = MEMORY[0x261205560](v38, MEMORY[0x263F8D310]);
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    uint64_t v78 = v75;
    uint64_t v38 = v121;
    *(void *)(v1 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v77, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v67, v68, "Request %{public}s detokenized texts %{sensitive}s", (uint8_t *)v72, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v112, -1, -1);
    MEMORY[0x261206F80](v72, -1, -1);
  }
  else
  {
    v111(*(void *)(v1 + 1576), *(void *)(v1 + 1504));
    swift_bridgeObjectRelease_n();
  }

  uint64_t v79 = v118;
  uint64_t v80 = *(void *)(v38 + 16);
  if (v80)
  {
    *(void *)(v1 + 760) = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80, 0);
    v81._rawValue = *(void **)(v1 + 760);
    unint64_t v82 = v38 + 40;
    do
    {
      swift_bridgeObjectRetain();
      Token.init(text:)();
      *(Swift::OpaquePointer *)(v1 + 760) = v81;
      unint64_t v84 = *((void *)v81._rawValue + 2);
      uint64_t v83 = *((void *)v81._rawValue + 3);
      if (v84 >= v83 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
        v81._rawValue = *(void **)(v1 + 760);
      }
      uint64_t v85 = *(void *)(v1 + 1144);
      uint64_t v86 = *(void *)(v1 + 1136);
      uint64_t v87 = *(void *)(v1 + 1128);
      *((void *)v81._rawValue + 2) = v84 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v86 + 32))((unint64_t)v81._rawValue+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v84, v85, v87);
      v82 += 16;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v81._rawValue = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v125 = StopSequenceMonitor.handleOutputTokens(_:)(v81);
  rawValue = v125.tokens._rawValue;
  countAndFlagsBits = v125.stopSequence.value._countAndFlagsBits;
  object = v125.stopSequence.value._object;
  swift_bridgeObjectRelease();
  if (object) {
    uint64_t v91 = 0;
  }
  else {
    uint64_t v91 = (uint64_t)log < v118;
  }
  if (v91)
  {
    if (v113)
    {
      *(unsigned char *)(*(void *)(v1 + 1384) + 24) = 1;
LABEL_46:
      uint64_t v92 = *(unsigned int *)(v1 + 1996);
      uint64_t v93 = *(void *)(v1 + 1096);
      uint64_t v94 = *(void *)(v1 + 1088);
      unint64_t v95 = *(void *)(v1 + 1384) + *(int *)(*(void *)(v1 + 1360) + 56);
      outlined destroy of DataStreamState?(v95, &demangling cache variable for type metadata for FinishReason?);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 104))(v95, v92, v94);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v95, 0, 1, v94);
      if (rawValue[2]) {
        goto LABEL_47;
      }
      goto LABEL_51;
    }
    *(unsigned char *)(*(void *)(v1 + 1384) + 24) = *(void *)(v1 + 1776) != 0;
    if (*(void *)(v1 + 1776))
    {
LABEL_43:
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(v1 + 1384) + 24) = 1;
    if (v113 || *(void *)(v1 + 1776)) {
      goto LABEL_43;
    }
  }
  if (!object)
  {
    if ((uint64_t)log < v118)
    {
      if (!rawValue[2])
      {
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      goto LABEL_47;
    }
    uint64_t v105 = *(unsigned int *)(v1 + 1988);
    uint64_t v106 = *(void *)(v1 + 1096);
    uint64_t v107 = *(void *)(v1 + 1088);
    uint64_t v108 = *(void *)(v1 + 1384) + *(int *)(*(void *)(v1 + 1360) + 56);
    outlined destroy of DataStreamState?(v108, &demangling cache variable for type metadata for FinishReason?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 104))(v108, v105, v107);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v106 + 56))(v108, 0, 1, v107);
    if (rawValue[2])
    {
LABEL_47:
      uint64_t v96 = (uint64_t)rawValue;
LABEL_53:
      specialized Array.append<A>(contentsOf:)(v96);
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
LABEL_52:
    uint64_t v96 = StopSequenceMonitor.currentBufferedTokens()();
    goto LABEL_53;
  }
  uint64_t v97 = *(unsigned int *)(v1 + 1992);
  unint64_t v98 = *(void *)(v1 + 1096);
  uint64_t v99 = *(void *)(v1 + 1088);
  unint64_t v100 = (uint64_t *)(*(void *)(v1 + 1384) + *(int *)(*(void *)(v1 + 1360) + 56));
  outlined destroy of DataStreamState?((uint64_t)v100, &demangling cache variable for type metadata for FinishReason?);
  *unint64_t v100 = countAndFlagsBits;
  v100[1] = (uint64_t)object;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 104))(v100, v97, v99);
  uint64_t v101 = v100;
  uint64_t v79 = v118;
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v98 + 56))(v101, 0, 1, v99);
  if (rawValue[2]) {
    goto LABEL_47;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  if ((uint64_t)log >= v79) {
    goto LABEL_52;
  }
LABEL_54:
  uint64_t v102 = *(void *)(v1 + 1384);
  uint64_t v103 = *(void *)(v1 + 1376);
  uint64_t v104 = *(void *)(*(void *)(v1 + 1600) + 176);
  *(void *)(v1 + 1872) = v104;
  outlined init with copy of DataStreamState(v102, v103, type metadata accessor for DataStreamState);
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), v104, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 1872);
  uint64_t v2 = *(void *)(v0 + 1848);
  uint64_t v3 = *(void *)(v0 + 920);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = v5;
  *(void *)(v5 + 16) = v3;
  swift_bridgeObjectRetain();
  LOBYTE(v3) = specialized Sequence.contains(where:)((uint64_t (*)(char *))_s24TokenGenerationInference22DataStreamStateManagerC06updateF04uuid5statey10Foundation4UUIDV_AA0deF0VtFSbAI3key_AK5valuet_tXEfU_TA_0, v6, v4);
  *(void *)(v0 + 1880) = v2;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1736);
    uint64_t v8 = *(void *)(v0 + 1568);
    uint64_t v9 = *(void *)(v0 + 1376);
    uint64_t v10 = *(void *)(v0 + 1360);
    uint64_t v11 = *(void *)(v0 + 1256);
    (*(void (**)(uint64_t, void, void))(v0 + 1856))(v8, *(void *)(v0 + 920), *(void *)(v0 + 1504));
    outlined init with copy of DataStreamState(v9, v11, type metadata accessor for DataStreamState);
    v7(v11, 0, 1, v10);
    swift_beginAccess();
    specialized Dictionary.subscript.setter(v11, v8);
    swift_endAccess();
  }
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(*(void *)(v0 + 1376), type metadata accessor for DataStreamState);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 1888) = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  os_log_type_t v13 = *(void *)(v0 + 1384);
  BOOL v14 = *(void *)(v0 + 1192);
  uint64_t v15 = *(void *)(v0 + 872);
  return TG_OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(v14, v13, v15);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t (*v53)();
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  os_unfair_lock_s *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];
  void *v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[220];
  uint64_t v2 = v0[148];
  uint64_t v3 = v0[144];
  outlined init with copy of (Int, LogitCollection)(v0[149], v2, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  if (v1(v2, 1, v3) != 1)
  {
    uint64_t v72 = v0[173];
    uint64_t v19 = v0[151];
    uint64_t v20 = v0[149];
    unint64_t v21 = v0[146];
    char v22 = v0[144];
    uint64_t v74 = v0[110];
    uint64_t v78 = v0[235];
    uint64_t v23 = (uint64_t *)v0[107];
    os_log_type_t v13 = (os_unfair_lock_s *)(v0[201] + 16);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[145] + 32);
    v24(v21, v0[148], v22);
    uint64_t v25 = MEMORY[0x263F7FA60];
    v23[3] = v22;
    v23[4] = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    v24((uint64_t)boxed_opaque_existential_1, v21, v22);
    swift_release();
    outlined destroy of DataStreamState?(v20, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    outlined destroy of DataStreamState?(v19, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    swift_bridgeObjectRelease();
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v72, type metadata accessor for DataStreamState);
    uint64_t v27 = swift_task_alloc();
    *(void *)(v27 + 16) = v74;
    *(unsigned char *)(v27 + 24) = 0;
    uint64_t v28 = swift_task_alloc();
    *(void *)(v28 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
    *(void *)(v28 + 24) = v27;
    os_unfair_lock_lock(v13);
    uint64_t v18 = v78;
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v80);
    goto LABEL_6;
  }
  uint64_t v4 = v0[173];
  uint64_t v5 = v0[148];
  outlined destroy of DataStreamState?(v0[149], &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  outlined destroy of DataStreamState?(v5, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v4 + 24) == 1)
  {
    uint64_t v6 = v0[235];
    v0[237] = v6;
    uint64_t v7 = v0[124];
    swift_beginAccess();
    if (*(unsigned char *)(v7 + 16))
    {
      uint64_t v8 = v0[173];
      uint64_t v9 = v0[151];
      uint64_t v10 = v0[124];
      uint64_t v11 = v0[110];
      uint64_t v12 = (uint64_t *)v0[107];
      uint64_t v77 = v6;
      os_log_type_t v13 = (os_unfair_lock_s *)(v0[201] + 16);
      swift_beginAccess();
      *(unsigned char *)(v10 + 16) = 0;
      UUID.uuidString.getter();
      Usage.init(promptTokenCount:completionTokenCount:)();
      BOOL v14 = type metadata accessor for PromptCompletionEventUsage();
      uint64_t v15 = MEMORY[0x263F7F9E8];
      v12[3] = v14;
      v12[4] = v15;
      __swift_allocate_boxed_opaque_existential_1(v12);
      PromptCompletionEventUsage.init(responseIdentifier:usage:)();
      swift_release();
      outlined destroy of DataStreamState?(v9, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
      outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v8, type metadata accessor for DataStreamState);
      uint64_t v16 = swift_task_alloc();
      *(void *)(v16 + 16) = v11;
      *(unsigned char *)(v16 + 24) = 0;
      uint64_t v17 = swift_task_alloc();
      *(void *)(v17 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
      *(void *)(v17 + 24) = v16;
      os_unfair_lock_lock(v13);
      uint64_t v18 = v77;
      partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v80);
      goto LABEL_6;
    }
    uint64_t v34 = v0[125];
    swift_beginAccess();
    if (*(unsigned char *)(v34 + 16) != 1) {
      goto LABEL_19;
    }
    uint64_t v35 = v0[137];
    uint64_t v36 = v0[136];
    uint64_t v37 = v0[135];
    outlined init with copy of (Int, LogitCollection)(v0[173] + *(int *)(v0[170] + 56), v37, &demangling cache variable for type metadata for FinishReason?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v37, 1, v36) == 1)
    {
      outlined destroy of DataStreamState?(v0[135], &demangling cache variable for type metadata for FinishReason?);
LABEL_19:
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v38 = v0[195];
      uint64_t v39 = v0[189];
      uint64_t v40 = v0[188];
      uint64_t v41 = v0[109];
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Log.device);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
      uint64_t v43 = Logger.logObject.getter();
      uint64_t v44 = static os_log_type_t.info.getter();
      uint64_t v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v0[195];
      uint64_t v47 = v0[189];
      char v48 = v0[188];
      if (v45)
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        v80[0] = v50;
        *(_DWORD *)uint64_t v49 = 136446210;
        _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[89] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
        _os_log_impl(&dword_25FA51000, v43, v44, "Successfully handled streaming request %{public}s", v49, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v50, -1, -1);
        MEMORY[0x261206F80](v49, -1, -1);
      }
      else
      {
        (*(void (**)(void, void))(v47 + 8))(v0[195], v0[188]);
      }

      v0[238] = *(void *)(v0[200] + 176);
      swift_retain();
      uint64_t v57 = (void *)swift_task_alloc();
      v0[239] = v57;
      *uint64_t v57 = v0;
      v57[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
      uint64_t v58 = v0[173];
      unint64_t v59 = v0[115];
      return DataStreamStateManager.removeState(uuid:state:)(v59, v58);
    }
    uint64_t v70 = v0[151];
    uint64_t v60 = v0[139];
    uint64_t v69 = v0[138];
    unint64_t v61 = v0[137];
    uint64_t v62 = v0[136];
    uint64_t v63 = v0[125];
    uint64_t v71 = v0[173];
    uint64_t v73 = v0[110];
    uint64_t v76 = (os_unfair_lock_s *)(v0[201] + 16);
    uint64_t v64 = (uint64_t *)v0[107];
    (*(void (**)(uint64_t, void, uint64_t))(v61 + 32))(v60, v0[135], v62);
    swift_beginAccess();
    *(unsigned char *)(v63 + 16) = 0;
    UUID.uuidString.getter();
    UUID.uuidString.getter();
    uint64_t v79 = v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v69, v60, v62);
    uint64_t v65 = type metadata accessor for PromptCompletionEventCandidateFinished();
    uint64_t v66 = MEMORY[0x263F7FA58];
    v64[3] = v65;
    v64[4] = v66;
    __swift_allocate_boxed_opaque_existential_1(v64);
    PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    outlined destroy of DataStreamState?(v70, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v71, type metadata accessor for DataStreamState);
    unint64_t v67 = swift_task_alloc();
    *(void *)(v67 + 16) = v73;
    *(unsigned char *)(v67 + 24) = 0;
    uint64_t v68 = swift_task_alloc();
    *(void *)(v68 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
    *(void *)(v68 + 24) = v67;
    os_log_type_t v13 = v76;
    os_unfair_lock_lock(v76);
    uint64_t v18 = v79;
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v80);
LABEL_6:
    os_unfair_lock_unlock(v13);
    if (v18)
    {
      return swift_task_dealloc();
    }
    else
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v33 = (uint64_t (*)(void))v0[1];
      return v33();
    }
  }
  uint64_t v30 = *(void *)(v0[173] + 8);
  v0[223] = v30;
  if (v30 == 1)
  {
    uint64_t v31 = *(void *)(v0[200] + 176);
    v0[225] = v31;
    uint64_t v32 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    goto LABEL_24;
  }
  if (!v30)
  {
    uint64_t v31 = *(void *)(v0[200] + 176);
    v0[224] = v31;
    uint64_t v32 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
LABEL_24:
    uint64_t v53 = v32;
    swift_retain();
    return MEMORY[0x270FA2498](v53, v31, 0);
  }
  outlined init with copy of DeterministicLanguageModelProtocol(v0[218] + 16, (uint64_t)(v0 + 12));
  uint64_t v54 = v0[15];
  uint64_t v55 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v54);
  uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v55 + 16) + **(int **)(v55 + 16));
  uint64_t v56 = (void *)swift_task_alloc();
  v0[226] = v56;
  *uint64_t v56 = v0;
  v56[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return v75(v54, v55);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  unsigned char v15[17];
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = v0[218];
  uint64_t v8 = v0[164];
  uint64_t v2 = v0[163];
  uint64_t v7 = v0[162];
  uint64_t v9 = v0[151];
  uint64_t v11 = v0[173];
  uint64_t v12 = v0[110];
  uint64_t v10 = v0[107];
  os_log_type_t v13 = (os_unfair_lock_s *)(v0[201] + 16);
  BOOL v14 = v0[237];
  type metadata accessor for TransparencyReport();
  swift_allocObject();
  TransparencyReport.init()();
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 64), *(void *)(v1 + 88));
  dispatch thunk of TokenIDToTextConverterProtocol.text.getter();
  InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  OnDeviceInferenceContext.modelVersion.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v8, *MEMORY[0x263F4F748], v7);
  TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v7);
  outlined destroy of DataStreamState?(v9, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v11, type metadata accessor for DataStreamState);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *(unsigned char *)(v3 + 24) = 0;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v4 + 24) = v3;
  os_unfair_lock_lock(v13);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v15);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  if (v14)
  {
    return swift_task_dealloc();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  unsigned char v12[17];
  void *v13;
  uint64_t v14;

  os_log_type_t v13 = v0;
  uint64_t v1 = v0[187];
  uint64_t v2 = v0[183];
  uint64_t v3 = v0[178];
  uint64_t v4 = v0[110];
  uint64_t v5 = (os_unfair_lock_s *)(v0[201] + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[179] + 32);
  v6(v2, v0[184], v3);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_allocError();
  v6(v7, v2, v3);
  outlined destroy of DataStreamState?(v1, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v4;
  *(unsigned char *)(v8 + 24) = 0;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v9 + 24) = v8;
  os_unfair_lock_lock(v5);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  unsigned char v22[17];
  void *v23;
  uint64_t v24;

  uint64_t v23 = v0;
  os_log_type_t v13 = (void *)v0[241];
  BOOL v14 = (void *)v0[240];
  uint64_t v1 = v0[183];
  uint64_t v2 = v0[182];
  uint64_t v3 = v0[181];
  uint64_t v4 = v0[179];
  uint64_t v5 = v0[178];
  uint64_t v17 = v0[177];
  uint64_t v18 = v0[175];
  uint64_t v19 = v0[187];
  uint64_t v16 = v0[134];
  uint64_t v6 = v0[133];
  uint64_t v15 = v0[132];
  uint64_t v20 = v0[110];
  unint64_t v21 = (os_unfair_lock_s *)(v0[201] + 16);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v5);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v7(v3, v2, v5);
  swift_allocError();
  v7(v8, v3, v5);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v15);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v17, (uint64_t (*)(void))type metadata accessor for InferenceRequest);
  outlined destroy of DataStreamState?(v19, &demangling cache variable for type metadata for PromptTemplateConfiguration?);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v18, type metadata accessor for DataStreamState);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v20;
  *(unsigned char *)(v9 + 24) = 0;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v10 + 24) = v9;
  os_unfair_lock_lock(v21);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  unsigned char v18[17];
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = (void *)v0[243];
  os_log_type_t v13 = (void *)v0[244];
  uint64_t v2 = v0[183];
  uint64_t v3 = v0[182];
  uint64_t v4 = v0[180];
  uint64_t v5 = v0[179];
  uint64_t v6 = v0[178];
  BOOL v14 = v0[151];
  uint64_t v15 = v0[173];
  uint64_t v16 = v0[110];
  uint64_t v17 = (os_unfair_lock_s *)(v0[201] + 16);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v4, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v7(v3, v2, v6);
  swift_allocError();
  v7(v8, v3, v6);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  outlined destroy of DataStreamState?(v14, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v15, type metadata accessor for DataStreamState);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v16;
  *(unsigned char *)(v9 + 24) = 0;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v10 + 24) = v9;
  os_unfair_lock_lock(v17);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;

  uint64_t v57 = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  v0[243] = v0[228];
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  v0[244] = v1;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v2 = v0[191];
  uint64_t v3 = v0[189];
  uint64_t v4 = v0[188];
  uint64_t v5 = v0[109];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[191];
  uint64_t v12 = v0[188];
  os_log_type_t v13 = (void (**)(uint64_t, uint64_t))(v0[189] + 8);
  if (v10)
  {
    uint64_t v49 = v0 + 103;
    BOOL v14 = swift_slowAlloc();
    uint64_t v51 = (void *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v56 = v54;
    *(_DWORD *)BOOL v14 = 136446466;
    _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[103] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*v13)(v11, v12);
    *(_WORD *)(v14 + 12) = 2114;
    v0[100] = v7;
    uint64_t v17 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v51 = v7;

    _os_log_impl(&dword_25FA51000, v8, v9, "Failed to handle request %{public}s, error decoding next token. error: %{public}@.", (uint8_t *)v14, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v51, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v54, -1, -1);
    MEMORY[0x261206F80](v14, -1, -1);
  }
  else
  {
    (*v13)(v0[191], v0[188]);
  }
  uint64_t v18 = v0[173] + *(int *)(v0[170] + 44);
  outlined destroy of DataStreamState?(v18, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  uint64_t v19 = *MEMORY[0x263F4FD60];
  uint64_t v20 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  unint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104))(v18, v19, v20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  if (objc_msgSend(v7, sel_code) != (id)2) {
    goto LABEL_13;
  }
  char v22 = objc_msgSend(v7, sel_domain);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v25 != v26)
  {
    uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v41 = v0[180];
    uint64_t v42 = v0[179];
    uint64_t v43 = v0[178];
    uint64_t v44 = objc_msgSend(v7, sel_localizedDescription, v49);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = objc_msgSend(v7, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v7, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v41, *MEMORY[0x263F56280], v43);
    goto LABEL_14;
  }
  swift_bridgeObjectRelease_n();
LABEL_11:
  uint64_t v28 = v0[173];
  uint64_t v29 = objc_msgSend(v7, sel_localizedDescription, v49);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t result = TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  uint64_t v32 = *(void *)(v28 + 8);
  uint64_t v31 = *(void *)(v28 + 16);
  uint64_t v33 = v31 + v32;
  if (__OFADD__(v31, v32))
  {
    __break(1u);
    return result;
  }
  uint64_t v55 = v0[180];
  uint64_t v34 = v0[179];
  uint64_t v52 = v0[183];
  uint64_t v53 = v0[178];
  uint64_t v35 = v0[131];
  uint64_t v36 = v0[130];
  uint64_t v37 = v0[129];
  uint64_t v38 = (void *)v0[128];
  uint64_t v39 = v0[127];
  uint64_t v50 = v0[126];
  uint64_t v40 = (char *)v38
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (count: Int, maximum: Int, TokenGenerationError.Context))
               + 64);
  *uint64_t v38 = v33;
  v38[1] = OnDeviceInferenceContext.maximumContextLength.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v40, v35, v37);
  (*(void (**)(void *, void, uint64_t))(v39 + 104))(v38, *MEMORY[0x263F7F800], v50);
  TokenGenerationError.inferenceErrorContext.getter();
  (*(void (**)(void *, uint64_t))(v39 + 8))(v38, v50);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v52, *MEMORY[0x263F56280], v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v55, v52, v53);
LABEL_14:
  uint64_t v46 = (void *)swift_task_alloc();
  v0[245] = v46;
  *uint64_t v46 = v0;
  v46[1] = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  uint64_t v47 = v0[173];
  char v48 = v0[115];
  return DataStreamStateManager.removeState(uuid:state:)(v48, v47);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  unsigned char v21[17];
  void *v22;
  uint64_t v23;

  char v22 = v0;
  uint64_t v1 = (void *)v0[231];
  uint64_t v2 = v0[183];
  uint64_t v3 = v0[182];
  uint64_t v4 = v0[181];
  uint64_t v5 = v0[179];
  uint64_t v6 = v0[178];
  uint64_t v18 = v0[173];
  uint64_t v16 = (void *)v0[247];
  uint64_t v17 = v0[151];
  uint64_t v15 = v0[134];
  uint64_t v7 = v0[133];
  BOOL v14 = v0[132];
  uint64_t v19 = v0[110];
  uint64_t v20 = (os_unfair_lock_s *)(v0[201] + 16);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v8(v3, v2, v6);
  v8(v4, v3, v6);
  swift_allocError();
  v8(v9, v4, v6);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v14);
  outlined destroy of DataStreamState?(v17, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  swift_bridgeObjectRelease();
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v18, type metadata accessor for DataStreamState);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v19;
  *(unsigned char *)(v10 + 24) = 0;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply;
  *(void *)(v11 + 24) = v10;
  os_unfair_lock_lock(v20);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[201] + 16));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1672) = a1;
  *(void *)(v3 + 1680) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  else {
    uint64_t v4 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 1816) = a1;
  *(void *)(v3 + 1824) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  else {
    uint64_t v4 = closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void closure #2 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1)
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(a1 + 24) + 16);
  os_unfair_lock_lock(v1);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1);
}

unint64_t TG_OnDeviceInferenceProvider.promptTokenTable(from:)(uint64_t a1)
{
  uint64_t v65 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v3 = *(void *)(v65 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v65, v4);
  uint64_t v66 = (uint64_t)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v7);
  unint64_t v61 = (char *)v59 - v8;
  uint64_t v9 = MEMORY[0x263F8D310];
  if (!a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Prompt.SpecialToken, Any)>);
    uint64_t v52 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, Any))
                - 8);
    unint64_t v53 = (*(unsigned __int8 *)(*(void *)v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v52 + 80);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_25FB61DF0;
    uint64_t v55 = (uint64_t *)(v54 + v53 + v52[14]);
    static Prompt.SpecialToken.endPrompt.getter();
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    unint64_t v57 = *((void *)&v69 + 1);
    uint64_t v56 = v69;
    v55[3] = v9;
    if (!v57)
    {
      uint64_t v56 = 0x3E616F653CLL;
      unint64_t v57 = 0xE500000000000000;
    }
    uint64_t *v55 = v56;
    v55[1] = v57;
    return specialized Dictionary.init(dictionaryLiteral:)(v54);
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  int64_t v11 = 0;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v62 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  v59[1] = v3 + 16;
  uint64_t v60 = v3;
  int64_t v63 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v16 = (uint64_t)v61;
  if ((v14 & v12) != 0) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1)) {
    goto LABEL_55;
  }
  if (v20 >= v63) {
    goto LABEL_48;
  }
  unint64_t v21 = *(void *)(v62 + 8 * v20);
  ++v11;
  if (v21) {
    goto LABEL_22;
  }
  int64_t v11 = v20 + 1;
  if (v20 + 1 >= v63) {
    goto LABEL_48;
  }
  unint64_t v21 = *(void *)(v62 + 8 * v11);
  if (v21) {
    goto LABEL_22;
  }
  int64_t v11 = v20 + 2;
  if (v20 + 2 >= v63)
  {
LABEL_48:
    swift_release();
    return (unint64_t)v10;
  }
  unint64_t v21 = *(void *)(v62 + 8 * v11);
  if (!v21)
  {
    int64_t v22 = v20 + 3;
    if (v22 < v63)
    {
      unint64_t v21 = *(void *)(v62 + 8 * v22);
      if (v21)
      {
        int64_t v11 = v22;
        goto LABEL_22;
      }
      while (1)
      {
        int64_t v11 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_58;
        }
        if (v11 >= v63) {
          break;
        }
        unint64_t v21 = *(void *)(v62 + 8 * v11);
        ++v22;
        if (v21) {
          goto LABEL_22;
        }
      }
    }
    goto LABEL_48;
  }
LABEL_22:
  unint64_t v15 = (v21 - 1) & v21;
  for (unint64_t i = __clz(__rbit64(v21)) + (v11 << 6); ; unint64_t i = v18 | (v11 << 6))
  {
    uint64_t v23 = a1;
    uint64_t v24 = *(void *)(a1 + 56) + 24 * i;
    uint64_t v25 = *(void *)v24;
    if (*(unsigned char *)(v24 + 16) != 1)
    {
      swift_bridgeObjectRetain();
      Prompt.SpecialToken.init(identifier:)();
      uint64_t v70 = MEMORY[0x263F8D6C8];
      *(void *)&long long v69 = v25;
      outlined init with take of Any(&v69, v68);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v67 = v10;
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      uint64_t v40 = v10[2];
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41)) {
        goto LABEL_54;
      }
      char v43 = v38;
      if (v10[3] < v42)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
        unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v43 & 1) != (v45 & 1)) {
          goto LABEL_59;
        }
        unint64_t v39 = v44;
        uint64_t v10 = v67;
        if ((v43 & 1) == 0) {
          goto LABEL_39;
        }
LABEL_6:
        uint64_t v17 = (_OWORD *)(v10[7] + 32 * v39);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        outlined init with take of Any(v68, v17);
LABEL_7:
        swift_bridgeObjectRelease();
        (*v64)(v16, v65);
        a1 = v23;
        if (!v15) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v10 = v67;
        if (v38) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v10 = v67;
        if (v43) {
          goto LABEL_6;
        }
      }
LABEL_39:
      v10[(v39 >> 6) + 8] |= 1 << v39;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v60 + 16))(v10[6] + *(void *)(v60 + 72) * v39, v16, v65);
      outlined init with take of Any(v68, (_OWORD *)(v10[7] + 32 * v39));
      uint64_t v47 = v10[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_56;
      }
      v10[2] = v49;
      uint64_t v10 = v67;
      goto LABEL_7;
    }
    uint64_t v26 = *(void *)(v24 + 8);
    outlined copy of MetadataSpecialToken(*(void *)v24, v26, 1);
    swift_bridgeObjectRetain();
    outlined copy of MetadataSpecialToken(v25, v26, 1);
    uint64_t v27 = v66;
    Prompt.SpecialToken.init(identifier:)();
    uint64_t v70 = MEMORY[0x263F8D310];
    *(void *)&long long v69 = v25;
    *((void *)&v69 + 1) = v26;
    outlined init with take of Any(&v69, v68);
    int v28 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v67 = v10;
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
    uint64_t v31 = v10[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (v10[3] >= v33)
    {
      uint64_t v16 = (uint64_t)v61;
      if (v28)
      {
        uint64_t v10 = v67;
        if (v29) {
          goto LABEL_36;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v10 = v67;
        if (v34) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v28);
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v66);
      uint64_t v16 = (uint64_t)v61;
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_59;
      }
      unint64_t v30 = v35;
      uint64_t v10 = v67;
      if (v34)
      {
LABEL_36:
        uint64_t v46 = (_OWORD *)(v10[7] + 32 * v30);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
        outlined init with take of Any(v68, v46);
        goto LABEL_44;
      }
    }
    v10[(v30 >> 6) + 8] |= 1 << v30;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v60 + 16))(v10[6] + *(void *)(v60 + 72) * v30, v66, v65);
    outlined init with take of Any(v68, (_OWORD *)(v10[7] + 32 * v30));
    uint64_t v50 = v10[2];
    BOOL v48 = __OFADD__(v50, 1);
    uint64_t v51 = v50 + 1;
    if (v48) {
      goto LABEL_57;
    }
    v10[2] = v51;
    uint64_t v10 = v67;
LABEL_44:
    swift_bridgeObjectRelease();
    (*v64)(v66, v65);
    outlined consume of MetadataSpecialToken(v25, v26, 1);
    a1 = v23;
    if (!v15) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t TG_OnDeviceInferenceProvider.process(prompt:tokenizer:tokenTable:localizationOverrideMap:shouldDetokenizeRenderedPrompt:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v86 = a7;
  uint64_t v82 = a2;
  uint64_t v83 = a1;
  uint64_t v85 = type metadata accessor for Prompt.Rendering.Source();
  uint64_t v84 = *(void *)(v85 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v85, v10);
  uint64_t v81 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v87 = (char *)v80 - v14;
  uint64_t v112 = type metadata accessor for Prompt.RenderedPromptFragment();
  uint64_t v94 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112, v15);
  uint64_t v111 = (char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TokenizedPrompt();
  uint64_t v93 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17, v18);
  int64_t v20 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: TokenizedPrompt));
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21, v23);
  uint64_t v92 = (char *)v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: TokenizedPrompt)?);
  uint64_t v27 = MEMORY[0x270FA5388](v25 - 8, v26);
  uint64_t v104 = (char *)v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27, v29);
  uint64_t v103 = (char *)v80 - v30;
  v80[1] = a3;
  uint64_t result = Prompt.renderPromptModules(tokenTable:localizationOverrideMap:)();
  if (!v7)
  {
    uint64_t v32 = dispatch thunk of TokenizerRunner.tokenize(promptModules:tokenTable:)();
    swift_bridgeObjectRelease();
    v80[0] = 0;
    uint64_t v33 = (void *)MEMORY[0x263F8EE78];
    unint64_t v118 = MEMORY[0x263F8EE78];
    uint64_t v115 = 0;
    unint64_t v116 = 0xE000000000000000;
    uint64_t v117 = MEMORY[0x263F8EE78];
    uint64_t v88 = v93 + 16;
    uint64_t v106 = (void (**)(char *, char *, uint64_t))(v93 + 32);
    unint64_t v34 = *(void *)(v32 + 16);
    uint64_t v99 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    unint64_t v100 = v34;
    unint64_t v98 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v109 = (void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v110 = v94 + 16;
    unint64_t v95 = (uint64_t (**)(char *, uint64_t))(v93 + 8);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v35 = 0;
    uint64_t v97 = (uint64_t)v33;
    char v36 = (unint64_t *)v104;
    uint64_t v37 = v32;
    uint64_t v107 = v32;
    uint64_t v91 = a4;
    uint64_t v90 = v17;
    uint64_t v89 = v20;
    uint64_t v96 = v21;
    while (1)
    {
      if (v35 == v100)
      {
        uint64_t v38 = 1;
        unint64_t v39 = v100;
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        if (v35 >= *(void *)(v37 + 16)) {
          goto LABEL_34;
        }
        uint64_t v40 = v33;
        uint64_t v41 = a4;
        unint64_t v42 = v35;
        unint64_t v113 = v35 + 1;
        uint64_t v43 = v93;
        unint64_t v44 = v37
            + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
            + *(void *)(v43 + 72) * v35;
        char v45 = &v92[*(int *)(v21 + 48)];
        (*(void (**)(char *, unint64_t, uint64_t))(v93 + 16))(v45, v44, v17);
        uint64_t v46 = (char *)v36 + *(int *)(v21 + 48);
        *char v36 = v42;
        a4 = v41;
        uint64_t v33 = v40;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v46, v45, v17);
        uint64_t v38 = 0;
        unint64_t v39 = v113;
      }
      (*v99)(v36, v38, 1, v21);
      uint64_t v47 = v103;
      outlined init with take of (key: Int, value: LogitCollection)?((uint64_t)v36, (uint64_t)v103, &demangling cache variable for type metadata for (offset: Int, element: TokenizedPrompt)?);
      if ((*v98)(v47, 1, v21) == 1) {
        break;
      }
      unint64_t v108 = v39;
      uint64_t v48 = *(void *)v47;
      (*v106)(v20, &v47[*(int *)(v21 + 48)], v17);
      uint64_t v49 = TokenizedPrompt.promptFragments.getter();
      int64_t v50 = *(void *)(v49 + 16);
      if (v50)
      {
        uint64_t v102 = v48;
        uint64_t v105 = v33;
        uint64_t v114 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50, 0);
        uint64_t v51 = *(unsigned __int8 *)(v94 + 80);
        uint64_t v101 = v49;
        uint64_t v52 = v49 + ((v51 + 32) & ~v51);
        unint64_t v113 = *(void *)(v94 + 72);
        unint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 16);
        do
        {
          uint64_t v54 = v111;
          uint64_t v55 = v112;
          uint64_t v56 = v53(v111, v52, v112);
          uint64_t v57 = MEMORY[0x261204910](v56);
          uint64_t v59 = v58;
          (*v109)(v54, v55);
          uint64_t v60 = v114;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1);
            uint64_t v60 = v114;
          }
          unint64_t v62 = *(void *)(v60 + 16);
          unint64_t v61 = *(void *)(v60 + 24);
          if (v62 >= v61 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
            uint64_t v60 = v114;
          }
          *(void *)(v60 + 16) = v62 + 1;
          uint64_t v63 = v60 + 16 * v62;
          *(void *)(v63 + 32) = v57;
          *(void *)(v63 + 40) = v59;
          v52 += v113;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
        a4 = v91;
        uint64_t v33 = v105;
        uint64_t v17 = v90;
        int64_t v20 = v89;
        uint64_t v48 = v102;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v60);
      v64._countAndFlagsBits = TokenizedPrompt.renderdedString.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      uint64_t v65 = TokenizedPrompt.tokenIDs.getter();
      specialized Array.append<A>(contentsOf:)(v65);
      uint64_t v37 = v107;
      char v36 = (unint64_t *)v104;
      if (v48 == *(void *)(v107 + 16) - 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = TokenizedPrompt.tokenIDs.getter();
        uint64_t v21 = v96;
      }
      else
      {
        uint64_t v66 = TokenizedPrompt.tokenIDs.getter();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v21 = v96;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        unint64_t v69 = v33[2];
        unint64_t v68 = v33[3];
        if (v69 >= v68 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v33);
        }
        void v33[2] = v69 + 1;
        v33[v69 + 4] = v66;
        uint64_t v37 = v107;
      }
      uint64_t result = (*v95)(v20, v17);
      unint64_t v35 = v108;
    }
    swift_bridgeObjectRelease_n();
    uint64_t v114 = type metadata accessor for OnDeviceInferenceProvider();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceProvider.Type);
    String.init<A>(describing:)();
    id v70 = objc_msgSend(self, sel_processInfo);
    id v71 = objc_msgSend(v70, sel_operatingSystemVersionString);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Prompt.Rendering.Source.init(identifier:version:)();
    if (v86)
    {
      swift_bridgeObjectRetain();
      uint64_t v72 = v80[0];
      uint64_t v73 = dispatch thunk of TokenizerRunner.detokenize(_:)();
      if (v72)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v84 + 8))(v87, v85);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v105 = v33;
      v80[0] = 0;
      uint64_t v111 = v74;
      uint64_t v112 = v73;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v105 = v33;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
    }
    uint64_t v75 = v84;
    uint64_t v76 = v87;
    uint64_t v77 = v85;
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v87, v85);
    unint64_t v113 = v118;
    Prompt.description.getter();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v76, v77);
    uint64_t v78 = v83;
    uint64_t v79 = v105;
    *uint64_t v83 = v97;
    v78[1] = (uint64_t)v79;
    v78[2] = MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t TG_OnDeviceInferenceProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 184);
  return v0;
}

uint64_t TG_OnDeviceInferenceProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 184);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for InferenceProviding.init() in conformance TG_OnDeviceInferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized TG_OnDeviceInferenceProvider.__allocating_init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for InferenceProviding.prewarmHint(_:) in conformance TG_OnDeviceInferenceProvider()
{
  InferenceProviding.prewarmHint(_:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for InferenceProviding.prewarmHint(_:) in conformance TG_OnDeviceInferenceProvider(v1);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP15transitionAsset_2toyAD0cgM10DescriptorV_AD9LoadStateOtYaAD0C5ErrorOYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a3;
  uint64_t v6 = type metadata accessor for InferenceError();
  v3[3] = v6;
  v3[4] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v3[5] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[6] = v8;
  *uint64_t v8 = v3;
  v8[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP15transitionAsset_2toyAD0cgM10DescriptorV_AD9LoadStateOtYaAD0C5ErrorOYKFTWTQ0_;
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC15transitionAsset_2toy20ModelManagerServices0cgI10DescriptorV_AF9LoadStateOtYaAF0C5ErrorOYKF(a1, a2, v7);
}

uint64_t protocol witness for InferenceProviding.requestStream(clientData:configuration:) in conformance TG_OnDeviceInferenceProvider@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:)(a1, a2);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP14requestOneShot10clientData13configurationAD06ClientP0VAK_AD0cG20RequestConfigurationVtYaAD0C5ErrorOYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v8 = type metadata accessor for InferenceError();
  v4[3] = v8;
  v4[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[5] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP14requestOneShot10clientData13configurationAD06ClientP0VAK_AD0cG20RequestConfigurationVtYaAD0C5ErrorOYKFTWTQ0_;
  return _s24TokenGenerationInference011TG_OnDeviceC8ProviderC14requestOneShot10clientData13configuration20ModelManagerServices06ClientL0VAI_AG0cG20RequestConfigurationVtYaAG0C5ErrorOYKF(a1, a2, a3, v9);
}

uint64_t _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP14requestOneShot10clientData13configurationAD06ClientP0VAK_AD0cG20RequestConfigurationVtYaAD0C5ErrorOYKFTWTQ0_()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0) {
    (*(void (**)(void, void, void))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v3[1];
  return v4();
}

uint64_t type metadata accessor for TG_OnDeviceInferenceProvider()
{
  return self;
}

char *specialized DataStreamStateManager.init(assetRepository:instrumenterFinalizer:)(uint64_t a1, long long *a2, char *a3)
{
  uint64_t v12 = type metadata accessor for OnDeviceInferenceAssetRepository();
  uint64_t v13 = &protocol witness table for OnDeviceInferenceAssetRepository;
  *(void *)&long long v11 = a1;
  swift_defaultActor_initialize();
  uint64_t v6 = MEMORY[0x263F8EE80];
  *((void *)a3 + 14) = MEMORY[0x263F8EE80];
  *((void *)a3 + 15) = v6;
  *((void *)a3 + 16) = v6;
  *((void *)a3 + 17) = v6;
  *((void *)a3 + 18) = v6;
  uint64_t v7 = OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger;
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.device);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&a3[v7], v9, v8);
  outlined init with take of LogitCollection(&v11, (uint64_t)(a3 + 152));
  outlined init with take of LogitCollection(a2, (uint64_t)(a3 + 192));
  return a3;
}

void *specialized OnDeviceInferenceAssetRepository.init(dataSource:)(uint64_t a1, void *a2)
{
  v11[3] = type metadata accessor for OnDeviceInferenceProviderDataSource();
  v11[4] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v11[0] = a1;
  swift_defaultActor_initialize();
  uint64_t v4 = MEMORY[0x263F8EE80];
  a2[14] = 0xD000000000000020;
  a2[15] = 0x800000025FB6CE50;
  a2[16] = v4;
  a2[17] = v4;
  uint64_t v5 = MEMORY[0x263F8EE78];
  a2[18] = v4;
  a2[19] = v5;
  uint64_t v6 = MEMORY[0x263F8EE88];
  a2[20] = v4;
  a2[21] = v6;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v11, (uint64_t)(a2 + 22));
  uint64_t v9 = type metadata accessor for OnDeviceInferenceOverrides();
  uint64_t v10 = &protocol witness table for OnDeviceInferenceOverrides;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  OnDeviceInferenceOverrides.init()();
  outlined init with take of LogitCollection(&v8, (uint64_t)(a2 + 27));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return a2;
}

uint64_t specialized TG_OnDeviceInferenceProvider.init(dataSource:shouldDoVersionCheck:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OnDeviceInferenceProviderDataSource();
  uint64_t v34 = v6;
  unint64_t v35 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v33[0] = a1;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v33, a3 + 96);
  *(unsigned char *)(a3 + 224) = a2;
  uint64_t v31 = type metadata accessor for OnDeviceInferenceOverrides();
  uint64_t v32 = &protocol witness table for OnDeviceInferenceOverrides;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
  OnDeviceInferenceOverrides.init()();
  outlined init with take of LogitCollection(&v30, a3 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0xD000000000000023;
  *(void *)(v7 + 24) = 0x800000025FB6CBD0;
  uint64_t v31 = v6;
  uint64_t v32 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  *(void *)&long long v30 = v7;
  uint64_t v8 = type metadata accessor for OnDeviceInferenceAssetRepository();
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v6);
  MEMORY[0x270FA5388](v10, v10);
  uint64_t v12 = (void *)((char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v12;
  swift_retain();
  uint64_t v15 = specialized OnDeviceInferenceAssetRepository.init(dataSource:)(v14, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  swift_release();
  *(void *)(a3 + 160) = v8;
  *(void *)(a3 + 168) = &protocol witness table for OnDeviceInferenceAssetRepository;
  *(void *)(a3 + 136) = v15;
  uint64_t v31 = type metadata accessor for InstrumenterFinalizer();
  uint64_t v32 = (_UNKNOWN **)MEMORY[0x263F40F50];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
  InstrumenterFinalizer.init()();
  outlined init with take of LogitCollection(&v30, a3 + 184);
  outlined init with copy of DeterministicLanguageModelProtocol(a3 + 136, (uint64_t)&v30);
  outlined init with copy of DeterministicLanguageModelProtocol(a3 + 184, (uint64_t)v29);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v31);
  MEMORY[0x270FA5388](v16, v16);
  uint64_t v18 = (void *)((char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = *v18;
  v28[3] = v8;
  v28[4] = &protocol witness table for OnDeviceInferenceAssetRepository;
  v28[0] = v20;
  type metadata accessor for DataStreamStateManager(0);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v8);
  MEMORY[0x270FA5388](v22, v22);
  uint64_t v24 = (void *)((char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = specialized DataStreamStateManager.init(assetRepository:instrumenterFinalizer:)(*v24, v29, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  *(void *)(a3 + 176) = v26;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  OnDeviceInferenceProviderDataSource.createInferenceContextFactory(assetRepository:inferenceOverrides:dataSource:)(a3 + 136, a3 + 16, (uint64_t)v33, &v30);
  outlined init with take of LogitCollection(&v30, a3 + 56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return a3;
}

uint64_t lazy protocol witness table accessor for type AsyncMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncMapSequence<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t specialized static InferenceRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Constraints();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints?, Constraints?));
  MEMORY[0x270FA5388](v9, v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  uint64_t v15 = MEMORY[0x270FA5388](v13 - 8, v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  uint64_t v21 = (char *)&v36 - v20;
  MEMORY[0x270FA5388](v19, v22);
  uint64_t v24 = (char *)&v36 - v23;
  if ((MEMORY[0x261204950](a1, a2) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v41 = v8;
  uint64_t v25 = a2;
  uint64_t v26 = type metadata accessor for InferenceRequest();
  if ((MEMORY[0x2612046A0](a1 + *(int *)(v26 + 20), v25 + *(int *)(v26 + 20)) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v27 = *(int *)(v26 + 24);
  uint64_t v39 = a1;
  outlined init with copy of (Int, LogitCollection)(a1 + v27, (uint64_t)v24, &demangling cache variable for type metadata for Constraints?);
  uint64_t v40 = v26;
  outlined init with copy of (Int, LogitCollection)(v25 + *(int *)(v26 + 24), (uint64_t)v21, &demangling cache variable for type metadata for Constraints?);
  uint64_t v28 = (uint64_t)&v12[*(int *)(v9 + 48)];
  outlined init with copy of (Int, LogitCollection)((uint64_t)v24, (uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
  outlined init with copy of (Int, LogitCollection)((uint64_t)v21, v28, &demangling cache variable for type metadata for Constraints?);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v12, 1, v4) == 1)
  {
    uint64_t v38 = v25;
    outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Constraints?);
    outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Constraints?);
    if (v29(v28, 1, v4) == 1)
    {
      outlined destroy of DataStreamState?((uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
LABEL_12:
      char v30 = *(unsigned char *)(v39 + *(int *)(v40 + 28)) ^ *(unsigned char *)(v38 + *(int *)(v40 + 28)) ^ 1;
      return v30 & 1;
    }
    goto LABEL_8;
  }
  uint64_t v37 = v5;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v12, (uint64_t)v17, &demangling cache variable for type metadata for Constraints?);
  if (v29(v28, 1, v4) == 1)
  {
    outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Constraints?);
    outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Constraints?);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v4);
LABEL_8:
    outlined destroy of DataStreamState?((uint64_t)v12, &demangling cache variable for type metadata for (Constraints?, Constraints?));
    goto LABEL_9;
  }
  uint64_t v38 = v25;
  uint64_t v32 = v37;
  uint64_t v33 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v41, v28, v4);
  _s20ModelManagerServices14InferenceErrorOACs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Constraints and conformance Constraints, MEMORY[0x263F7F858]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v33, v4);
  outlined destroy of DataStreamState?((uint64_t)v21, &demangling cache variable for type metadata for Constraints?);
  outlined destroy of DataStreamState?((uint64_t)v24, &demangling cache variable for type metadata for Constraints?);
  v35(v17, v4);
  outlined destroy of DataStreamState?((uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
  if (v34) {
    goto LABEL_12;
  }
LABEL_9:
  char v30 = 0;
  return v30 & 1;
}

unint64_t specialized TG_OnDeviceInferenceProvider.localizationOverrideMap(from:)(uint64_t a1)
{
  uint64_t v70 = type metadata accessor for Prompt.SpecialToken();
  uint64_t v2 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v3);
  unint64_t v69 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    int64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v65 = a1 + 64;
    uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v7;
    int64_t v66 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v67 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    unint64_t v11 = 0x26A7EE000uLL;
    uint64_t v68 = a1;
    while (1)
    {
      unint64_t v75 = v5;
      if (v10)
      {
        uint64_t v73 = (v10 - 1) & v10;
        int64_t v74 = v6;
        unint64_t v15 = __clz(__rbit64(v10)) | (v6 << 6);
      }
      else
      {
        int64_t v16 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_69;
        }
        if (v16 >= v66)
        {
LABEL_61:
          swift_release();
          return v5;
        }
        unint64_t v17 = *(void *)(v65 + 8 * v16);
        int64_t v18 = v6 + 1;
        if (!v17)
        {
          int64_t v18 = v6 + 2;
          if (v6 + 2 >= v66) {
            goto LABEL_61;
          }
          unint64_t v17 = *(void *)(v65 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v6 + 3;
            if (v6 + 3 >= v66) {
              goto LABEL_61;
            }
            unint64_t v17 = *(void *)(v65 + 8 * v18);
            if (!v17)
            {
              uint64_t v19 = v6 + 4;
              if (v6 + 4 >= v66) {
                goto LABEL_61;
              }
              unint64_t v17 = *(void *)(v65 + 8 * v19);
              if (!v17)
              {
                while (1)
                {
                  int64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_70;
                  }
                  if (v18 >= v66) {
                    goto LABEL_61;
                  }
                  unint64_t v17 = *(void *)(v65 + 8 * v18);
                  ++v19;
                  if (v17) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v18 = v6 + 4;
            }
          }
        }
LABEL_22:
        uint64_t v73 = (v17 - 1) & v17;
        int64_t v74 = v18;
        unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
      uint64_t v22 = v21[1];
      uint64_t v71 = *v21;
      uint64_t v72 = v22;
      uint64_t v23 = *(void *)(v20 + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      int64_t v25 = 0;
      uint64_t v26 = v23 + 64;
      uint64_t v27 = 1 << *(unsigned char *)(v23 + 32);
      if (v27 < 64) {
        uint64_t v28 = ~(-1 << v27);
      }
      else {
        uint64_t v28 = -1;
      }
      unint64_t v29 = v28 & *(void *)(v23 + 64);
      uint64_t v78 = v24;
      for (i = (unint64_t)(v27 + 63) >> 6; v29; unint64_t v11 = 0x26A7EE000)
      {
        while (1)
        {
          unint64_t v30 = __clz(__rbit64(v29));
          v29 &= v29 - 1;
          unint64_t v31 = v30 | (v25 << 6);
LABEL_44:
          uint64_t v35 = *(void *)(v23 + 56) + 24 * v31;
          if (*(unsigned char *)(v35 + 16) == 1) {
            break;
          }
          if (*(void *)(v11 + 3752) != -1) {
            swift_once();
          }
          uint64_t v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)static Log.device);
          uint64_t v37 = Logger.logObject.getter();
          os_log_type_t v38 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v39 = 0;
            _os_log_impl(&dword_25FA51000, v37, v38, "Special token value of type int is not supported", v39, 2u);
            MEMORY[0x261206F80](v39, -1, -1);
          }

          if (!v29) {
            goto LABEL_30;
          }
        }
        uint64_t v40 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v31);
        uint64_t v42 = *v40;
        uint64_t v41 = v40[1];
        uint64_t v43 = *(void *)v35;
        uint64_t v44 = *(void *)(v35 + 8);
        outlined copy of MetadataSpecialToken(*(void *)v35, v44, 1);
        uint64_t v76 = v43;
        outlined copy of MetadataSpecialToken(v43, v44, 1);
        swift_bridgeObjectRetain();
        uint64_t v45 = v78;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v80 = v45;
        uint64_t v77 = v42;
        unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
        uint64_t v49 = *(void *)(v45 + 16);
        BOOL v50 = (v47 & 1) == 0;
        uint64_t v51 = v49 + v50;
        if (__OFADD__(v49, v50)) {
          goto LABEL_67;
        }
        char v52 = v47;
        if (*(void *)(v45 + 24) >= v51)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v41);
          if ((v52 & 1) != (v54 & 1)) {
            goto LABEL_71;
          }
          unint64_t v48 = v53;
        }
        uint64_t v55 = v76;
        uint64_t v56 = (void *)v80;
        uint64_t v78 = v80;
        if (v52)
        {
          uint64_t v57 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v48);
          swift_bridgeObjectRelease();
          *uint64_t v57 = v55;
          v57[1] = v44;
        }
        else
        {
          *(void *)(v80 + 8 * (v48 >> 6) + 64) |= 1 << v48;
          uint64_t v58 = (void *)(v56[6] + 16 * v48);
          void *v58 = v77;
          v58[1] = v41;
          uint64_t v59 = (uint64_t *)(v56[7] + 16 * v48);
          *uint64_t v59 = v55;
          v59[1] = v44;
          uint64_t v60 = v56[2];
          BOOL v61 = __OFADD__(v60, 1);
          uint64_t v62 = v60 + 1;
          if (v61) {
            goto LABEL_68;
          }
          v56[2] = v62;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MetadataSpecialToken(v55, v44, 1);
      }
LABEL_30:
      int64_t v32 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_66;
      }
      if (v32 < i)
      {
        unint64_t v33 = *(void *)(v26 + 8 * v32);
        ++v25;
        if (v33) {
          goto LABEL_43;
        }
        int64_t v25 = v32 + 1;
        if (v32 + 1 < i)
        {
          unint64_t v33 = *(void *)(v26 + 8 * v25);
          if (v33) {
            goto LABEL_43;
          }
          int64_t v25 = v32 + 2;
          if (v32 + 2 < i)
          {
            unint64_t v33 = *(void *)(v26 + 8 * v25);
            if (v33) {
              goto LABEL_43;
            }
            int64_t v34 = v32 + 3;
            if (v34 < i) {
              break;
            }
          }
        }
      }
LABEL_6:
      swift_release();
      uint64_t v12 = (uint64_t)v69;
      Prompt.SpecialToken.init(identifier:)();
      uint64_t v13 = v75;
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v80 = v13;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v78, v12, v14);
      unint64_t v5 = v80;
      swift_bridgeObjectRelease();
      (*v67)(v12, v70);
      a1 = v68;
      unint64_t v10 = v73;
      int64_t v6 = v74;
    }
    unint64_t v33 = *(void *)(v26 + 8 * v34);
    if (v33)
    {
      int64_t v25 = v34;
LABEL_43:
      unint64_t v29 = (v33 - 1) & v33;
      unint64_t v31 = __clz(__rbit64(v33)) + (v25 << 6);
      goto LABEL_44;
    }
    while (1)
    {
      int64_t v25 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        break;
      }
      if (v25 >= i) {
        goto LABEL_6;
      }
      unint64_t v33 = *(void *)(v26 + 8 * v25);
      ++v34;
      if (v33) {
        goto LABEL_43;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    uint64_t v64 = MEMORY[0x263F8EE78];
    return specialized Dictionary.init(dictionaryLiteral:)(v64);
  }
  return result;
}

uint64_t specialized TG_OnDeviceInferenceProvider.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for OnDeviceInferenceProviderDataSource();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0xD000000000000023;
  *(void *)(v1 + 24) = 0x800000025FB6CBD0;
  v11[3] = v0;
  v11[4] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v11[0] = v1;
  type metadata accessor for TG_OnDeviceInferenceProvider();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v0);
  MEMORY[0x270FA5388](v3, v3);
  unint64_t v5 = (void *)((char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v6 + 16))(v5);
  uint64_t v7 = *v5;
  swift_retain();
  uint64_t v8 = specialized TG_OnDeviceInferenceProvider.init(dataSource:shouldDoVersionCheck:)(v7, 1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  swift_release();
  return v8;
}

uint64_t type metadata accessor for OnDeviceInferenceProvider()
{
  return self;
}

uint64_t method lookup function for OnDeviceInferenceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for OnDeviceInferenceProvider);
}

uint64_t dispatch thunk of OnDeviceInferenceProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for TG_OnDeviceInferenceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TG_OnDeviceInferenceProvider);
}

uint64_t protocol witness for InferenceProviding.prewarmHint(_:) in conformance TG_OnDeviceInferenceProvider(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25FB16AEC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25FB16B24()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25FB16B34()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25FB16B44()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25FB16B7C()
{
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v14 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v13 = type metadata accessor for InferenceProviderRequestConfiguration();
  uint64_t v5 = *(void *)(v13 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  uint64_t v15 = v2 | v6 | 7;
  unint64_t v8 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (v2 + v8 + 16) & ~v2;
  swift_release();
  uint64_t v10 = v0 + v3;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v11(v10, v14);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v7, v13);
  outlined consume of Data._Representation(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  v11(v0 + v9, v14);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, ((((((((((((((((v9 + v4) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v15);
}

uint64_t partial apply for closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for InferenceProviderRequestConfiguration() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)(v1 + 16);
  uint64_t v14 = *(void *)(v1 + v5);
  uint64_t v15 = *(void *)(v1 + v4);
  uint64_t v13 = v1 + v7;
  uint64_t v11 = *(void *)(v1 + v8 + 8);
  uint64_t v12 = *(void *)(v1 + v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v17 + 16) = v9;
  *uint64_t v9 = v17;
  v9[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(a1, v16, v1 + v3, v15, v14, v13, v12, v11);
}

void partial apply for closure #2 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  closure #2 in TG_OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(v0);
}

void partial apply for closure #1 in DataStreamCancellationHandler.setisCancelled(isCancelled:)()
{
  closure #1 in DataStreamCancellationHandler.setisCancelled(isCancelled:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for InferenceRequest()
{
  uint64_t result = type metadata singleton initialization cache for InferenceRequest;
  if (!type metadata singleton initialization cache for InferenceRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void partial apply for closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(char *a1@<X8>)
{
  closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

void *partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t specialized TG_OnDeviceInferenceProvider.updateMetrics(dataStreamState:inferenceContext:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  *(void *)&long long v149 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4, v5);
  uint64_t v131 = (uint64_t)v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6, v8);
  uint64_t v11 = (char *)v130 - v10;
  uint64_t v13 = MEMORY[0x270FA5388](v9, v12);
  *(void *)&long long v146 = (char *)v130 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  *(void *)&long long v148 = (char *)v130 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v141 = (uint64_t)v130 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v130 - v23);
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = (char *)v130 - v26;
  MEMORY[0x270FA5388](v25, v28);
  uint64_t v140 = (uint64_t)v130 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v32 = MEMORY[0x270FA5388](v30 - 8, v31);
  uint64_t v133 = (uint64_t)v130 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v134 = (uint64_t)v130 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v40 = (char *)v130 - v39;
  uint64_t v42 = MEMORY[0x270FA5388](v38, v41);
  *(void *)&long long v145 = (char *)v130 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  char v47 = (char *)v130 - v46;
  uint64_t v49 = MEMORY[0x270FA5388](v45, v48);
  *(void *)&long long v147 = (char *)v130 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49, v51);
  char v54 = (char *)v130 - v53;
  MEMORY[0x270FA5388](v52, v55);
  uint64_t v138 = (uint64_t)v130 - v56;
  outlined init with copy of DeterministicLanguageModelProtocol(a2 + 16, (uint64_t)v160);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v160, (uint64_t)v154);
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingDecoder);
  type metadata accessor for TokenHealingDecoder();
  uint64_t v132 = v57;
  int v58 = swift_dynamicCast();
  uint64_t v142 = v27;
  char v135 = v47;
  uint64_t v136 = v11;
  if (v58)
  {
    uint64_t v59 = v159[0] + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
    swift_beginAccess();
    uint64_t v27 = v142;
    outlined init with copy of DeterministicLanguageModelProtocol(v59, (uint64_t)v154);
    swift_release();
  }
  else
  {
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v160, (uint64_t)v154);
  }
  outlined init with take of LogitCollection(v154, (uint64_t)v159);
  uint64_t v137 = a1;
  uint64_t v60 = *a1;
  uint64_t v61 = *(void *)(*a1 + 16);
  uint64_t v62 = v148;
  *(void *)&long long v150 = v40;
  if (v61)
  {
    uint64_t v63 = v60 + 32;
    uint64_t v139 = v27 + 8;
    uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56);
    uint64_t v143 = (unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48);
    v130[1] = v60;
    swift_bridgeObjectRetain();
    unint64_t v65 = MEMORY[0x263F8EE78];
    uint64_t v66 = v4;
    uint64_t v67 = v147;
    while (1)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v63, (uint64_t)v154);
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v154, (uint64_t)v158);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      int v68 = swift_dynamicCast();
      unint64_t v69 = *v64;
      if (!v68) {
        break;
      }
      v69(v67, 0, 1, v66);
      uint64_t v70 = v67;
      uint64_t v71 = v66;
      uint64_t v72 = (uint64_t)v142;
      outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v70, (uint64_t)v142, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      if (v139[*(int *)(v71 + 32)] != 2)
      {
        outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v72, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v66 = v71;
        uint64_t v67 = v147;
        goto LABEL_13;
      }
      outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v72, (uint64_t)v54, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      v69((uint64_t)v54, 0, 1, v71);
      uint64_t v66 = v71;
      uint64_t v67 = v147;
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
      if ((*v143)(v54, 1, v66) == 1)
      {
        outlined destroy of DataStreamState?((uint64_t)v54, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      else
      {
        uint64_t v73 = v140;
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer((uint64_t)v54, v140, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v73, (uint64_t)v144, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v65 + 16) + 1, 1, v65);
        }
        unint64_t v75 = *(void *)(v65 + 16);
        unint64_t v74 = *(void *)(v65 + 24);
        uint64_t v67 = v147;
        if (v75 >= v74 >> 1) {
          unint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1, v65);
        }
        *(void *)(v65 + 16) = v75 + 1;
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer((uint64_t)v144, v65+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(void *)(v149 + 72) * v75, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v62 = v148;
      }
      uint64_t v40 = (char *)v150;
      v63 += 40;
      if (!--v61)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    v69(v67, 1, 1, v66);
    outlined destroy of DataStreamState?(v67, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
LABEL_13:
    v69((uint64_t)v54, 1, 1, v66);
    goto LABEL_14;
  }
  unint64_t v65 = MEMORY[0x263F8EE78];
  uint64_t v66 = v4;
LABEL_22:
  uint64_t v76 = v137;
  uint64_t v77 = v149;
  if (*(void *)(v65 + 16))
  {
    uint64_t v78 = v138;
    outlined init with copy of DataStreamState(v65 + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80)), v138, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v79 = v78;
    uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
    v80(v79, 0, 1, v66);
  }
  else
  {
    uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56);
    v80(v138, 1, 1, v66);
  }
  swift_bridgeObjectRelease();
  uint64_t v81 = *v76;
  uint64_t v82 = *(void *)(*v76 + 16);
  if (v82)
  {
    *(void *)&long long v147 = v80;
    uint64_t v83 = v81 + 32;
    uint64_t v143 = (unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 8);
    uint64_t v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
    uint64_t v142 = (char *)v81;
    swift_bridgeObjectRetain();
    unint64_t v84 = MEMORY[0x263F8EE78];
    while (1)
    {
      outlined init with copy of DeterministicLanguageModelProtocol(v83, (uint64_t)v154);
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v154, (uint64_t)v158);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (swift_dynamicCast())
      {
        uint64_t v85 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v147;
        ((void (*)(char *, void, uint64_t, uint64_t))v147)(v40, 0, 1, v66);
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer((uint64_t)v40, v62, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if (*((unsigned char *)v143 + *(int *)(v66 + 32)) != 2)
        {
          uint64_t v86 = v62;
          uint64_t v90 = v62;
          uint64_t v87 = v145;
          outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v90, v145, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
          uint64_t v88 = v87;
          uint64_t v89 = 0;
          goto LABEL_35;
        }
        uint64_t v86 = v62;
        outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v62, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      }
      else
      {
        uint64_t v86 = v62;
        uint64_t v85 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v147;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v147)(v40, 1, 1, v66);
        outlined destroy of DataStreamState?((uint64_t)v40, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      uint64_t v87 = v145;
      uint64_t v88 = v145;
      uint64_t v89 = 1;
LABEL_35:
      v85(v88, v89, 1, v66);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v154);
      if ((*v144)(v87, 1, v66) == 1)
      {
        outlined destroy of DataStreamState?(v87, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        uint64_t v62 = v86;
      }
      else
      {
        uint64_t v91 = v87;
        uint64_t v92 = v141;
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v91, v141, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v92, v146, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1, v84);
        }
        unint64_t v94 = *(void *)(v84 + 16);
        unint64_t v93 = *(void *)(v84 + 24);
        if (v94 >= v93 >> 1) {
          unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1, v84);
        }
        *(void *)(v84 + 16) = v94 + 1;
        outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v146, v84+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(void *)(v149 + 72) * v94, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        uint64_t v62 = v148;
        uint64_t v40 = (char *)v150;
      }
      v83 += 40;
      if (!--v82)
      {
        swift_bridgeObjectRelease();
        uint64_t v76 = v137;
        uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v147;
        goto LABEL_43;
      }
    }
  }
  unint64_t v84 = MEMORY[0x263F8EE78];
LABEL_43:
  uint64_t v95 = (uint64_t)v135;
  uint64_t v96 = (uint64_t)v136;
  uint64_t v97 = v138;
  if (*(void *)(v84 + 16))
  {
    uint64_t v98 = v149;
    outlined init with copy of DataStreamState(v84 + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80)), (uint64_t)v135, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    uint64_t v99 = 0;
  }
  else
  {
    uint64_t v99 = 1;
    uint64_t v98 = v149;
  }
  v80(v95, v99, 1, v66);
  swift_bridgeObjectRelease();
  uint64_t v100 = v134;
  outlined init with copy of (Int, LogitCollection)(v97, v134, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v101(v100, 1, v66) == 1)
  {
    outlined destroy of DataStreamState?(v95, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    outlined destroy of DataStreamState?(v97, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
    return outlined destroy of DataStreamState?(v100, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  }
  outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v100, v96, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v103 = v133;
  outlined init with copy of (Int, LogitCollection)(v95, v133, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  if (v101(v103, 1, v66) == 1)
  {
    outlined destroy of DataStreamState?(v103, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  }
  else
  {
    uint64_t v104 = v103;
    uint64_t v105 = v131;
    outlined init with take of OnDeviceInferenceAssetObjectTokenizer(v104, v131, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v159, (uint64_t)v158);
    uint64_t v106 = type metadata accessor for TwoStageSpeculativeDecoder();
    if (swift_dynamicCast())
    {
      uint64_t v107 = *(int *)(v66 + 28);
      uint64_t v108 = v95;
      uint64_t v109 = v105;
      uint64_t v110 = *(void *)(v105 + v107);
      uint64_t v111 = *(void *)(v96 + v107);
      uint64_t v112 = *(void *)(v157 + 112);
      uint64_t v152 = v106;
      uint64_t v153 = &protocol witness table for TwoStageSpeculativeDecoder;
      v151[0] = v157;
      swift_retain();
      swift_retain();
      SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)(v112, 0, v110, v111, v151, (uint64_t)v154);
      outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v109, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      outlined destroy of DataStreamState?(v108, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      uint64_t v113 = v138;
      goto LABEL_55;
    }
    outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v105, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  }
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v159, (uint64_t)v158);
  uint64_t v114 = type metadata accessor for SpeculativeStreamingDecoder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined destroy of DataStreamState?(v95, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    outlined destroy of DataStreamState?(v97, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
    goto LABEL_57;
  }
  uint64_t v115 = *(void *)(v96 + *(int *)(v66 + 28));
  uint64_t v116 = *(void *)(v157 + 168);
  uint64_t v152 = v114;
  uint64_t v153 = &protocol witness table for SpeculativeStreamingDecoder;
  v151[0] = v157;
  swift_retain();
  SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)(v116, 0, 0, v115, v151, (uint64_t)v154);
  outlined destroy of DataStreamState?(v95, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  uint64_t v113 = v97;
LABEL_55:
  outlined destroy of DataStreamState?(v113, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
  long long v149 = v154[1];
  long long v150 = v154[0];
  long long v147 = v154[3];
  long long v148 = v154[2];
  long long v145 = v154[5];
  long long v146 = v154[4];
  uint64_t v117 = v155;
  __int16 v118 = v156;
  uint64_t v119 = (char *)v76 + *(int *)(type metadata accessor for DataStreamState(0) + 52);
  long long v120 = v149;
  *(_OWORD *)uint64_t v119 = v150;
  *((_OWORD *)v119 + 1) = v120;
  long long v121 = v147;
  *((_OWORD *)v119 + 2) = v148;
  *((_OWORD *)v119 + 3) = v121;
  long long v122 = v145;
  *((_OWORD *)v119 + 4) = v146;
  *((_OWORD *)v119 + 5) = v122;
  *((void *)v119 + 12) = v117;
  *((_WORD *)v119 + 52) = v118;
LABEL_57:
  uint64_t v123 = *(void *)(v96 + *(int *)(v66 + 28));
  swift_retain();
  outlined destroy of OnDeviceInferenceAssetObjectTokenizer(v96, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  uint64_t v124 = *(void *)(v123
                   + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount);
  char v125 = *(unsigned char *)(v123
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount
                  + 8);
  uint64_t v126 = *(void *)(v123
                   + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount);
  char v127 = *(unsigned char *)(v123
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount
                  + 8);
  swift_release();
  uint64_t result = type metadata accessor for DataStreamState(0);
  uint64_t v128 = (char *)v76 + *(int *)(result + 60);
  *(void *)uint64_t v128 = v124;
  uint64_t v128[8] = v125;
  uint64_t v129 = (char *)v76 + *(int *)(result + 64);
  *(void *)uint64_t v129 = v126;
  v129[8] = v127;
  return result;
}

uint64_t _s24TokenGenerationInference22DataStreamStateManagerC06updateF04uuid5statey10Foundation4UUIDV_AA0deF0VtFSbAI3key_AK5valuet_tXEfU_TA_0()
{
  return closure #1 in DataStreamStateManager.updateState(uuid:state:)() & 1;
}

uint64_t outlined init with copy of DataStreamState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for InferenceRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Prompt();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SamplingParameters();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Constraints();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for InferenceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Constraints();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t initializeWithCopy for InferenceRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Constraints();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for InferenceRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Constraints();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for InferenceRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Constraints();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for InferenceRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Prompt();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Constraints();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FB18BFC);
}

uint64_t sub_25FB18BFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Prompt();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for SamplingParameters();
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) != a2)
      {
        unsigned int v16 = *(unsigned __int8 *)(a1 + a3[7]);
        if (v16 >= 2) {
          return ((v16 + 2147483646) & 0x7FFFFFFF) + 1;
        }
        else {
          return 0;
        }
      }
      uint64_t v8 = v14;
      uint64_t v12 = *(void *)(v14 - 8);
      uint64_t v13 = a3[6];
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for InferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FB18D84);
}

uint64_t sub_25FB18D84(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Prompt();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for SamplingParameters();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(unsigned char *)(a1 + a4[7]) = a2 + 1;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void type metadata completion function for InferenceRequest()
{
  type metadata accessor for Prompt();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SamplingParameters();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Constraints?();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Constraints?()
{
  if (!lazy cache variable for type metadata for Constraints?)
  {
    type metadata accessor for Constraints();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Constraints?);
    }
  }
}

void closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply(char *a1@<X8>)
{
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
    return 0;
  }
  uint64_t v5 = (float *)(a1 + 56);
  uint64_t v6 = (_DWORD *)(a2 + 56);
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    float v7 = *v5;
    uint64_t v8 = *((void *)v5 - 1);
    v5 += 4;
    uint64_t v9 = *((void *)v6 - 1);
    float v10 = *(float *)v6;
    v6 += 4;
    float v11 = v10;
  }
  while (v8 == v9 && v7 == v11);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MetadataSpecialToken@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized MetadataSpecialToken.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MetadataSpecialToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a1 + 16) != 1) {
    return (v3 == v4) & ~v5;
  }
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a1[1];
  if (v3 == v4 && v6 == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance E5Function.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance E5Function.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance E5Function.CodingKeys()
{
  uint64_t v1 = 0x6E654C716573;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E654C787463;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x5472657470616461;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance E5Function.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized E5Function.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance E5Function.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance E5Function.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance E5Function.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance E5Function.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance E5Function@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized E5Function.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t DefaultParameters.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6574537466617264;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4173497466617264;
      break;
    case 2:
      unint64_t result = 0x6572547466617264;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000024;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance DefaultParameters.CodingKeys()
{
  return DefaultParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DefaultParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DefaultParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance DefaultParameters.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DefaultParameters.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance DefaultParameters@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized DefaultParameters.init(from:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

unint64_t ModelMetadata.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x7079546C65646F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
    case 4:
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 7:
      unint64_t result = 0x617A696C61636F6CLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelMetadata.CodingKeys()
{
  return ModelMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ModelMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ModelMetadata.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

__n128 protocol witness for Decodable.init(from:) in conformance ModelMetadata@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized ModelMetadata.init(from:)(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

unint64_t AdapterMetadata.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    case 5:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0x617A696C61636F6CLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AdapterMetadata.CodingKeys()
{
  return AdapterMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AdapterMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AdapterMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AdapterMetadata.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AdapterMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AdapterMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

__n128 protocol witness for Decodable.init(from:) in conformance AdapterMetadata@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized AdapterMetadata.init(from:)(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TokenizerMetadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenizerMetadata.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000022;
  }
  else {
    return 0xD000000000000021;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenizerMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenizerMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TokenizerMetadata.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenizerMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenizerMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenizerMetadata@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized TokenizerMetadata.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ClassifierMetadata.CodingKeys()
{
  if (*v0) {
    return 0x6C4374757074756FLL;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ClassifierMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ClassifierMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ClassifierMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ClassifierMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ClassifierMetadata@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ClassifierMetadata.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ClassifierMetadata(void *a1, void *a2)
{
  return *a1 == *a2 && specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ClassifierDefaultOutputClass.CodingKeys()
{
  return 0x64496E656B6F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ClassifierDefaultOutputClass.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x64496E656B6F74 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ClassifierDefaultOutputClass.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ClassifierDefaultOutputClass.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ClassifierDefaultOutputClass.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ClassifierDefaultOutputClass@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ClassifierDefaultOutputClass.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ClassifierDefaultOutputClass(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenizerMetadata.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenizerMetadata.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ClassifierOutputClass.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000019;
  }
  else {
    return 0x64496E656B6F74;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ClassifierOutputClass.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ClassifierOutputClass.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ClassifierOutputClass.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ClassifierOutputClass.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance ClassifierOutputClass(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v5 = specialized ClassifierOutputClass.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(float *)(a2 + 8) = v5;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ClassifierOutputClass(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0x2612042A0]() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1]) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OnDeviceInferenceProviderDataSource.createInferenceContextFactory(assetRepository:inferenceOverrides:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v26);
  outlined init with copy of DeterministicLanguageModelProtocol(a2, (uint64_t)v24);
  outlined init with copy of DeterministicLanguageModelProtocol(a3, (uint64_t)v22);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
  MEMORY[0x270FA5388](v7, v7);
  uint64_t v9 = (uint64_t *)&v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, v25);
  MEMORY[0x270FA5388](v11, v11);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *))(v14 + 16))(v13);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
  MEMORY[0x270FA5388](v15, v15);
  int v17 = (uint64_t **)&v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(uint64_t **))(v18 + 16))(v17);
  uint64_t v19 = specialized OnDeviceInferenceContextFactory.__allocating_init(assetRepository:inferenceOverrides:dataSource:)(*v9, (uint64_t)v13, *v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  uint64_t result = type metadata accessor for OnDeviceInferenceContextFactory();
  a4[3] = result;
  a4[4] = &protocol witness table for OnDeviceInferenceContextFactory;
  *a4 = v19;
  return result;
}

uint64_t OnDeviceInferenceProviderDataSource.catalogResource(for:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CatalogClient();
  swift_allocObject();
  CatalogClient.init()();
  dispatch thunk of CatalogClient.resource(for:)();
  uint64_t result = swift_release();
  if (!v1)
  {
    if (v6)
    {
      return outlined init with take of LogitCollection(&v5, a1);
    }
    else
    {
      outlined destroy of DataStreamState?((uint64_t)&v5, &demangling cache variable for type metadata for CatalogResource?);
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      *uint64_t v4 = 3;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t OnDeviceInferenceProviderDataSource.asset(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v6 = type metadata accessor for AssetVersion();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = OnDeviceInferenceProviderDataSource.catalogResource(for:)((uint64_t)v49);
  if (!v3)
  {
    uint64_t v40 = a2;
    uint64_t v41 = a1;
    uint64_t v34 = v15;
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    uint64_t v37 = v6;
    uint64_t v38 = v12;
    uint64_t v39 = v7;
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v49, (uint64_t)v45);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedResource);
    if (swift_dynamicCast())
    {
      outlined init with take of LogitCollection(&v42, (uint64_t)v48);
      __swift_project_boxed_opaque_existential_1(v48, v48[3]);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v45);
      dispatch thunk of AssetBackedResource.fetchAsset()();
      uint64_t v41 = __swift_project_boxed_opaque_existential_1(v45, AssociatedTypeWitness);
      *((void *)&v43 + 1) = swift_getAssociatedTypeWitness();
      uint64_t v40 = swift_getAssociatedConformanceWitness();
      uint64_t v44 = v40;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
      dispatch thunk of CatalogAssetProtocol.contents.getter();
      uint64_t v26 = v34;
      dispatch thunk of AssetContents.baseURL.getter();
      uint64_t v27 = v35;
      dispatch thunk of CatalogAssetProtocol.version.getter();
      uint64_t v28 = AssetVersion.number.getter();
      uint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      uint64_t v31 = v50;
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v50, v26, v36);
      uint64_t v32 = (uint64_t *)(v31 + *(int *)(type metadata accessor for Asset() + 20));
      *uint64_t v32 = v28;
      v32[1] = v30;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      uint64_t v33 = v48;
    }
    else
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      outlined destroy of DataStreamState?((uint64_t)&v42, &demangling cache variable for type metadata for AssetBackedResource?);
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.device);
      unint64_t v18 = v40;
      swift_bridgeObjectRetain_n();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = (uint64_t)v41;
      if (v21)
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        v48[0] = v24;
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_bridgeObjectRetain();
        v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v18, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, v19, v20, "Catalog resource with identifier %s is not asset backed resource", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v24, -1, -1);
        MEMORY[0x261206F80](v23, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      unsigned char *v25 = 1;
      swift_willThrow();
      uint64_t v33 = (uint64_t *)v49;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  }
  return result;
}

uint64_t OnDeviceInferenceProviderDataSource.resourceBundle(for:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CatalogClient();
  swift_allocObject();
  CatalogClient.init()();
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  uint64_t result = swift_release();
  if (!v1)
  {
    if (v6)
    {
      return outlined init with take of LogitCollection(&v5, a1);
    }
    else
    {
      outlined destroy of DataStreamState?((uint64_t)&v5, &demangling cache variable for type metadata for ResourceBundle?);
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      *uint64_t v4 = 2;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t OnDeviceInferenceProviderDataSource.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceProviderDataSource()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for ClassifierMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ClassifierMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ClassifierMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClassifierMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassifierMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassifierMetadata()
{
  return &type metadata for ClassifierMetadata;
}

uint64_t destroy for MetadataSpecialToken(uint64_t a1)
{
  return outlined consume of MetadataSpecialToken(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MetadataSpecialToken(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MetadataSpecialToken(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MetadataSpecialToken(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MetadataSpecialToken(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataSpecialToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataSpecialToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MetadataSpecialToken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for MetadataSpecialToken(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MetadataSpecialToken()
{
  return &type metadata for MetadataSpecialToken;
}

ValueMetadata *type metadata accessor for ClassifierOutputClass()
{
  return &type metadata for ClassifierOutputClass;
}

void *specialized OnDeviceInferenceContextFactory.__allocating_init(assetRepository:inferenceOverrides:dataSource:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = type metadata accessor for OnDeviceInferenceAssetRepository();
  v34[3] = v7;
  v34[4] = &protocol witness table for OnDeviceInferenceAssetRepository;
  v34[0] = a1;
  uint64_t v8 = type metadata accessor for OnDeviceInferenceOverrides();
  uint64_t v32 = v8;
  uint64_t v33 = &protocol witness table for OnDeviceInferenceOverrides;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  outlined init with take of OnDeviceInferenceOverrides(a2, (uint64_t)boxed_opaque_existential_1);
  uint64_t v29 = v6;
  uint64_t v30 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v28[0] = a3;
  type metadata accessor for OnDeviceInferenceContextFactory();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v7);
  MEMORY[0x270FA5388](v11, v11);
  uint64_t v13 = (void *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
  MEMORY[0x270FA5388](v15, v15);
  uint64_t v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v29);
  MEMORY[0x270FA5388](v19, v19);
  BOOL v21 = (void *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = *v13;
  uint64_t v24 = *v21;
  v10[5] = v7;
  v10[6] = &protocol witness table for OnDeviceInferenceAssetRepository;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &protocol witness table for OnDeviceInferenceOverrides;
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_1(v10 + 7);
  outlined init with take of OnDeviceInferenceOverrides((uint64_t)v17, (uint64_t)v25);
  v10[15] = v6;
  v10[16] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v10[12] = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v10;
}

uint64_t specialized OnDeviceInferenceProviderDataSource.modelMetadataAtURL(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = type metadata accessor for JSONDecoder.KeyDecodingStrategy();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(contentsOf:encoding:)();
  if (!v1)
  {
    uint64_t v23 = v5;
    uint64_t v24 = v2;
    uint64_t v14 = v35;
    static String.Encoding.utf8.getter();
    uint64_t v15 = String.data(using:allowLossyConversion:)();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    if (v17 >> 60 == 15)
    {
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      *uint64_t v18 = 0;
      return swift_willThrow();
    }
    else
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v23, *MEMORY[0x263F060B8], v24);
      dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
      lazy protocol witness table accessor for type ModelMetadata and conformance ModelMetadata();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t result = outlined consume of Data?(v15, v17);
      long long v19 = v33;
      v14[6] = v32;
      v14[7] = v19;
      v14[8] = v34;
      long long v20 = v29;
      v14[2] = v28;
      v14[3] = v20;
      long long v21 = v31;
      v14[4] = v30;
      v14[5] = v21;
      long long v22 = v27;
      *uint64_t v14 = v26;
      v14[1] = v22;
    }
  }
  return result;
}

uint64_t specialized OnDeviceInferenceProviderDataSource.tokenizerMetadataAtURL(_:)()
{
  uint64_t v1 = type metadata accessor for JSONDecoder.KeyDecodingStrategy();
  uint64_t v20 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v5, v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v11);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(contentsOf:encoding:)();
  if (!v0)
  {
    unint64_t v17 = v4;
    uint64_t v18 = v1;
    static String.Encoding.utf8.getter();
    uint64_t v13 = String.data(using:allowLossyConversion:)();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    if (v15 >> 60 == 15)
    {
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      *unint64_t v16 = 0;
      return swift_willThrow();
    }
    else
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      (*(void (**)(char *, void, uint64_t))(v20 + 104))(v17, *MEMORY[0x263F060B8], v18);
      dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
      lazy protocol witness table accessor for type TokenizerMetadata and conformance TokenizerMetadata();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      outlined consume of Data?(v13, v15);
      return v19;
    }
  }
  return result;
}

uint64_t specialized OnDeviceInferenceProviderDataSource.adapterMetadataAtURL(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = type metadata accessor for JSONDecoder.KeyDecodingStrategy();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6, v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(contentsOf:encoding:)();
  if (!v1)
  {
    uint64_t v23 = v5;
    uint64_t v24 = v2;
    unint64_t v14 = v35;
    static String.Encoding.utf8.getter();
    uint64_t v15 = String.data(using:allowLossyConversion:)();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    if (v17 >> 60 == 15)
    {
      lazy protocol witness table accessor for type DataSourceError and conformance DataSourceError();
      swift_allocError();
      *uint64_t v18 = 0;
      return swift_willThrow();
    }
    else
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      (*(void (**)(char *, void, uint64_t))(v25 + 104))(v23, *MEMORY[0x263F060B8], v24);
      dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
      lazy protocol witness table accessor for type AdapterMetadata and conformance AdapterMetadata();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t result = outlined consume of Data?(v15, v17);
      long long v19 = v33;
      v14[6] = v32;
      v14[7] = v19;
      v14[8] = v34;
      long long v20 = v29;
      v14[2] = v28;
      v14[3] = v20;
      long long v21 = v31;
      v14[4] = v30;
      v14[5] = v21;
      long long v22 = v27;
      *unint64_t v14 = v26;
      v14[1] = v22;
    }
  }
  return result;
}

uint64_t specialized MetadataSpecialToken.init(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.singleValueContainer()();
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t specialized E5Function.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5472657470616461 && a2 == 0xEB00000000657079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E654C716573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E654C787463 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized E5Function.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<E5Function.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v12 = 0;
  uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v11 = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  char v10 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized DefaultParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574537466617264 && a2 == 0xEA00000000007370;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4173497466617264 && a2 == 0xEF65766974706164 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6572547466617264 && a2 == 0xEF726F7463614665 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000025FB6CAC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FB6CB20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FB6CB40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x800000025FB6CB80)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized DefaultParameters.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DefaultParameters.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v12 = v11;
  char v30 = 1;
  int v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v29 = 2;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v22 = v14;
  uint64_t v23 = v13;
  char v28 = 3;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v27 = 4;
  int v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v26 = 5;
  int v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v25 = 6;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v12 & 1;
  *(unsigned char *)(a2 + 9) = v24;
  *(void *)(a2 + 16) = v23;
  *(unsigned char *)(a2 + 24) = v22 & 1;
  char v17 = BYTE4(v21);
  *(_DWORD *)(a2 + 28) = v21;
  *(unsigned char *)(a2 + 32) = v17 & 1;
  *(unsigned char *)(a2 + 33) = v20;
  *(unsigned char *)(a2 + 34) = v19;
  *(_DWORD *)(a2 + 36) = v15;
  *(unsigned char *)(a2 + 40) = BYTE4(v15) & 1;
  return result;
}

uint64_t specialized ModelMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7079546C65646F6DLL && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000025FB6D020 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025FB6D040 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FB6C7B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025FB6D060 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025FB6CF50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000025FB6D080 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x617A696C61636F6CLL && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FB6D0A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025FB6C7F0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t specialized ModelMetadata.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelMetadata.CodingKeys>);
  uint64_t v5 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86, v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = v5;
    uint64_t v51 = a1;
    LOBYTE(v61) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    uint64_t v48 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    LOBYTE(v52) = 1;
    unint64_t v12 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v45 = v9;
    unint64_t v46 = v12;
    uint64_t v47 = v11;
    uint64_t v13 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : E5Function]);
    LOBYTE(v52) = 2;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : E5Function] and conformance <> [A : B], &demangling cache variable for type metadata for [String : E5Function], (void (*)(void))lazy protocol witness table accessor for type E5Function and conformance E5Function);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v44 = v13;
    uint64_t v14 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    LOBYTE(v52) = 3;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v43 = v14;
    uint64_t v15 = v61;
    LOBYTE(v52) = 4;
    lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v16 = v61;
    uint64_t v41 = v62;
    uint64_t v42 = v15;
    uint64_t v39 = v64;
    uint64_t v40 = v63;
    uint64_t v38 = v65;
    LODWORD(v15) = v66;
    LOBYTE(v61) = 5;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = v18;
    uint64_t v35 = v17;
    int v36 = v15;
    uint64_t v37 = v16;
    LOBYTE(v52) = 6;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v49 = v19;
    uint64_t v20 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]]);
    LOBYTE(v52) = 7;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : [String : MetadataSpecialToken]] and conformance <> [A : B], &demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]], (void (*)(void))lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = v61;
    LOBYTE(v61) = 8;
    swift_bridgeObjectRetain();
    LODWORD(v46) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v81 = 9;
    lazy protocol witness table accessor for type ClassifierMetadata and conformance ClassifierMetadata();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v86);
    uint64_t v23 = v82;
    uint64_t v22 = v83;
    uint64_t v86 = v82;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v24 = v44;
    *(void *)&long long v52 = v45;
    *((void *)&v52 + 1) = v47;
    uint64_t v25 = v43;
    *(void *)&long long v53 = v44;
    *((void *)&v53 + 1) = v43;
    *(void *)&long long v54 = v42;
    *((void *)&v54 + 1) = v37;
    *(void *)&long long v55 = v41;
    *((void *)&v55 + 1) = v40;
    *(void *)&long long v56 = v39;
    *((void *)&v56 + 1) = v38;
    LOBYTE(v57) = v36;
    *((void *)&v57 + 1) = v35;
    *(void *)&long long v58 = v49;
    *((void *)&v58 + 1) = v20;
    *(void *)&long long v59 = v21;
    BYTE8(v59) = v46;
    *(void *)&long long v60 = v23;
    *((void *)&v60 + 1) = v22;
    outlined retain of ModelMetadata((uint64_t)&v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = v42;
    swift_bridgeObjectRelease();
    uint64_t v27 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    uint64_t v61 = v45;
    uint64_t v62 = v47;
    uint64_t v63 = v24;
    uint64_t v64 = v25;
    uint64_t v65 = v26;
    uint64_t v66 = v37;
    uint64_t v67 = v41;
    uint64_t v68 = v40;
    uint64_t v69 = v39;
    uint64_t v70 = v38;
    char v71 = v36;
    *(_DWORD *)uint64_t v72 = v85[0];
    *(_DWORD *)&v72[3] = *(_DWORD *)((char *)v85 + 3);
    uint64_t v73 = v35;
    uint64_t v74 = v27;
    uint64_t v75 = v20;
    uint64_t v76 = v21;
    char v77 = v46;
    *(_DWORD *)uint64_t v78 = *(_DWORD *)v84;
    *(_DWORD *)&v78[3] = *(_DWORD *)&v84[3];
    uint64_t v79 = v86;
    uint64_t v80 = v22;
    uint64_t result = outlined release of ModelMetadata((uint64_t)&v61);
    long long v29 = v59;
    char v30 = v48;
    v48[6] = v58;
    v30[7] = v29;
    v30[8] = v60;
    long long v31 = v55;
    v30[2] = v54;
    v30[3] = v31;
    long long v32 = v57;
    v30[4] = v56;
    v30[5] = v32;
    long long v33 = v53;
    _OWORD *v30 = v52;
    v30[1] = v33;
  }
  return result;
}

uint64_t specialized AdapterMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FB6C7B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025FB6CF30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025FB6CF50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025FB6CF70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x800000025FB6CF90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x617A696C61636F6CLL && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025FB6C7F0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t specialized AdapterMetadata.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AdapterMetadata.CodingKeys>);
  uint64_t v5 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v76 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = v5;
    LOBYTE(v51) = 0;
    *(void *)&long long v40 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    LOBYTE(v42) = 1;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = (uint64_t)a1;
    *((void *)&v40 + 1) = v10;
    uint64_t v12 = v51;
    LOBYTE(v51) = 2;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v14;
    LOBYTE(v51) = 3;
    swift_bridgeObjectRetain();
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v38 = v15;
    LOBYTE(v51) = 4;
    uint64_t v39 = v16;
    swift_bridgeObjectRetain();
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v76 = v17 & 1;
    LOBYTE(v42) = 5;
    int v35 = v17;
    lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v33 = v51;
    uint64_t v34 = v13;
    uint64_t v31 = v53;
    uint64_t v32 = v52;
    uint64_t v29 = v55;
    uint64_t v30 = v54;
    HIDWORD(v28) = v56;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]]);
    LOBYTE(v42) = 6;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : [String : MetadataSpecialToken]] and conformance <> [A : B], &demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]], (void (*)(void))lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v18 = v51;
    char v71 = 7;
    lazy protocol witness table accessor for type ClassifierMetadata and conformance ClassifierMetadata();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v77);
    uint64_t v19 = v72;
    uint64_t v77 = v72;
    uint64_t v41 = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)&v40 + 1);
    long long v42 = v40;
    *(void *)&long long v43 = v12;
    *((void *)&v43 + 1) = v34;
    *(void *)&long long v44 = v38;
    *((void *)&v44 + 1) = v37;
    *(void *)&long long v45 = v39;
    *((void *)&v45 + 1) = v36;
    LOBYTE(v46) = v35 & 1;
    *((void *)&v46 + 1) = v33;
    *(void *)&long long v47 = v32;
    *((void *)&v47 + 1) = v31;
    *(void *)&long long v48 = v30;
    *((void *)&v48 + 1) = v29;
    LOBYTE(v49) = BYTE4(v28);
    *((void *)&v49 + 1) = v18;
    *(void *)&long long v50 = v19;
    uint64_t v21 = v41;
    *((void *)&v50 + 1) = v41;
    outlined retain of AdapterMetadata((uint64_t)&v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v11);
    uint64_t v51 = v40;
    uint64_t v52 = v20;
    uint64_t v53 = v12;
    uint64_t v54 = v34;
    uint64_t v55 = v38;
    uint64_t v56 = v37;
    uint64_t v57 = v22;
    uint64_t v58 = v36;
    char v59 = v76;
    *(_DWORD *)long long v60 = *(_DWORD *)v75;
    *(_DWORD *)&v60[3] = *(_DWORD *)&v75[3];
    uint64_t v61 = v33;
    uint64_t v62 = v32;
    uint64_t v63 = v31;
    uint64_t v64 = v30;
    uint64_t v65 = v29;
    char v66 = BYTE4(v28);
    *(_DWORD *)uint64_t v67 = *(_DWORD *)v74;
    *(_DWORD *)&v67[3] = *(_DWORD *)&v74[3];
    uint64_t v68 = v18;
    uint64_t v69 = v77;
    uint64_t v70 = v21;
    uint64_t result = outlined release of AdapterMetadata((uint64_t)&v51);
    long long v24 = v49;
    a2[6] = v48;
    a2[7] = v24;
    a2[8] = v50;
    long long v25 = v45;
    a2[2] = v44;
    a2[3] = v25;
    long long v26 = v47;
    a2[4] = v46;
    a2[5] = v26;
    long long v27 = v43;
    *a2 = v42;
    a2[1] = v27;
  }
  return result;
}

uint64_t specialized TokenizerMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000021 && a2 == 0x800000025FB6CFC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000025FB6CFF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TokenizerMetadata.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenizerMetadata.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v9 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    char v11 = 0;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = v12;
    char v11 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

uint64_t specialized ClassifierMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000025FB6CEF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C4374757074756FLL && a2 == 0xED00007365737361)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ClassifierMetadata.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ClassifierMetadata.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  HIBYTE(v9) = 0;
  lazy protocol witness table accessor for type ClassifierDefaultOutputClass and conformance ClassifierDefaultOutputClass();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassifierOutputClass]);
  HIBYTE(v9) = 1;
  lazy protocol witness table accessor for type [ClassifierOutputClass] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

unint64_t lazy protocol witness table accessor for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierMetadata.CodingKeys and conformance ClassifierMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClassifierDefaultOutputClass and conformance ClassifierDefaultOutputClass()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierDefaultOutputClass and conformance ClassifierDefaultOutputClass;
  if (!lazy protocol witness table cache variable for type ClassifierDefaultOutputClass and conformance ClassifierDefaultOutputClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierDefaultOutputClass and conformance ClassifierDefaultOutputClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ClassifierOutputClass] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ClassifierOutputClass] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ClassifierOutputClass] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ClassifierOutputClass]);
    lazy protocol witness table accessor for type ClassifierOutputClass and conformance ClassifierOutputClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ClassifierOutputClass] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClassifierOutputClass and conformance ClassifierOutputClass()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierOutputClass and conformance ClassifierOutputClass;
  if (!lazy protocol witness table cache variable for type ClassifierOutputClass and conformance ClassifierOutputClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierOutputClass and conformance ClassifierOutputClass);
  }
  return result;
}

uint64_t specialized ClassifierOutputClass.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496E656B6F74 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000025FB6CF10)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float specialized ClassifierOutputClass.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ClassifierOutputClass.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    char v13 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    float v2 = v9;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

unint64_t lazy protocol witness table accessor for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierOutputClass.CodingKeys and conformance ClassifierOutputClass.CodingKeys);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x261206F80);
  }
  return result;
}

uint64_t type metadata accessor for Asset()
{
  uint64_t result = type metadata singleton initialization cache for Asset;
  if (!type metadata singleton initialization cache for Asset) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AdapterMetadata and conformance AdapterMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata;
  if (!lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type TokenizerMetadata and conformance TokenizerMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelMetadata and conformance ModelMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata;
  if (!lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata);
  }
  return result;
}

uint64_t outlined init with take of OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnDeviceInferenceOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for E5Function()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for E5Function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for E5Function(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for E5Function(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for E5Function(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for E5Function(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for E5Function()
{
  return &type metadata for E5Function;
}

uint64_t destroy for TokenizerMetadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for TokenizerMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TokenizerMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TokenizerMetadata(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenizerMetadata(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenizerMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenizerMetadata()
{
  return &type metadata for TokenizerMetadata;
}

uint64_t destroy for AdapterMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AdapterMetadata()
{
  return &type metadata for AdapterMetadata;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultParameters()
{
  return &type metadata for DefaultParameters;
}

uint64_t destroy for ModelMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ModelMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdapterMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelMetadata()
{
  return &type metadata for ModelMetadata;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DataSourceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DataSourceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB1F63CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataSourceError()
{
  return &type metadata for DataSourceError;
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    float v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *float v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Asset(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  float v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  float v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  float v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FB1FA04);
}

uint64_t sub_25FB1FA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FB1FADC);
}

uint64_t sub_25FB1FADC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for Asset()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for ClassifierOutputClass.CodingKeys()
{
  return &unk_270BD3D18;
}

void *type metadata accessor for ClassifierMetadata.CodingKeys()
{
  return &unk_270BD3DA8;
}

ValueMetadata *type metadata accessor for ClassifierDefaultOutputClass()
{
  return &type metadata for ClassifierDefaultOutputClass;
}

unint64_t lazy protocol witness table accessor for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys;
  if (!lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierDefaultOutputClass.CodingKeys and conformance ClassifierDefaultOutputClass.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MetadataSpecialToken and conformance MetadataSpecialToken()
{
  unint64_t result = lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken;
  if (!lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters;
  if (!lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ClassifierMetadata and conformance ClassifierMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type ClassifierMetadata and conformance ClassifierMetadata;
  if (!lazy protocol witness table cache variable for type ClassifierMetadata and conformance ClassifierMetadata)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClassifierMetadata and conformance ClassifierMetadata);
  }
  return result;
}

uint64_t outlined retain of AdapterMetadata(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type E5Function and conformance E5Function()
{
  unint64_t result = lazy protocol witness table cache variable for type E5Function and conformance E5Function;
  if (!lazy protocol witness table cache variable for type E5Function and conformance E5Function)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function and conformance E5Function);
  }
  return result;
}

uint64_t outlined retain of ModelMetadata(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultParameters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DefaultParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB20588);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DefaultParameters.CodingKeys()
{
  return &unk_270BD3E60;
}

uint64_t getEnumTagSinglePayload for E5Function.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for E5Function.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB2071CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for E5Function.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for E5Function.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *type metadata accessor for E5Function.CodingKeys()
{
  return &unk_270BD3EF0;
}

uint64_t getEnumTagSinglePayload for ModelMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB208C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ModelMetadata.CodingKeys()
{
  return &unk_270BD3F80;
}

uint64_t getEnumTagSinglePayload for ClassifierOutputClass.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClassifierOutputClass.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB20A54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for TokenizerMetadata.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for TokenizerMetadata.CodingKeys()
{
  return &unk_270BD4010;
}

uint64_t getEnumTagSinglePayload for AdapterMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AdapterMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB20BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AdapterMetadata.CodingKeys()
{
  return &unk_270BD40A0;
}

unsigned char *storeEnumTagSinglePayload for ClassifierDefaultOutputClass.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25FB20CC8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ClassifierDefaultOutputClass.CodingKeys()
{
  return &unk_270BD4130;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = v4;
  v5[5] = a4;
  void v5[3] = a1;
  uint64_t v7 = type metadata accessor for InferenceError();
  v5[6] = v7;
  v5[7] = *(void *)(v7 - 8);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  if (a2)
  {
    swift_getObjectType();
    uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  v5[10] = v8;
  v5[11] = v10;
  return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TY0_, v8, v10);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TY0_()
{
  unint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *unint64_t v1 = v0;
  v1[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TQ1_;
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[3];
  return _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKF(v3, v2);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TQ1_()
{
  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  uint64_t v4 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v5 = v2[9];
  uint64_t v6 = v2[8];
  if (v0)
  {
    uint64_t v7 = v3[6];
    uint64_t v8 = v3[7];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v3[13] = v9;
    v3[14] = (v8 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v9(v6, v5, v7);
    v3[15] = lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    v3[16] = swift_allocError();
    v9(v10, v6, v7);
    uint64_t v11 = v3[10];
    uint64_t v12 = v3[11];
    return MEMORY[0x270FA2498](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TY2_, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    char v13 = (uint64_t (*)(void))v4[1];
    return v13();
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5TY2_()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[13];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  v0[2] = v0[16];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  v1(v4, v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t convertToInferenceError(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CancellationError?);
  MEMORY[0x270FA5388](v3 - 8, v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InferenceError();
  uint64_t v47 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGenerationError?);
  MEMORY[0x270FA5388](v15 - 8, v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for TokenGenerationError();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19, v21);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v49 = a1;
  id v24 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  int v25 = swift_dynamicCast();
  long long v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if (v25)
  {
    v26(v18, 0, 1, v19);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
    TokenGenerationError.toInferenceError()();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
  uint64_t v28 = v6;
  uint64_t v29 = v48;
  v26(v18, 1, 1, v19);
  outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for TokenGenerationError?);
  long long v49 = a1;
  id v30 = a1;
  int v31 = swift_dynamicCast();
  uint64_t v32 = v47;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  uint64_t v34 = v11;
  if (v31)
  {
    v33(v10, 0, 1, v11);
    int v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v35(v14, v10, v11);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v29, v14, v11);
  }
  v33(v10, 1, 1, v11);
  outlined destroy of DataStreamState?((uint64_t)v10, &demangling cache variable for type metadata for InferenceError?);
  long long v49 = a1;
  id v36 = a1;
  uint64_t v37 = type metadata accessor for CancellationError();
  uint64_t v38 = (uint64_t)v28;
  int v39 = swift_dynamicCast();
  long long v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  if (!v39)
  {
    v40(v28, 1, 1, v37);
    goto LABEL_9;
  }
  uint64_t v41 = *(void *)(v37 - 8);
  v40((char *)v38, 0, 1, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v38, 1, v37) == 1)
  {
LABEL_9:
    outlined destroy of DataStreamState?(v38, &demangling cache variable for type metadata for CancellationError?);
    long long v43 = (void *)_convertErrorToNSError(_:)();
    id v44 = objc_msgSend(v43, sel_localizedDescription);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v45 = objc_msgSend(v43, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v43, sel_code);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();

    long long v42 = (unsigned int *)MEMORY[0x263F56280];
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v32 + 104))(v29, *v42, v34);
  }
  outlined destroy of DataStreamState?(v38, &demangling cache variable for type metadata for CancellationError?);
  long long v42 = (unsigned int *)MEMORY[0x263F56290];
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v32 + 104))(v29, *v42, v34);
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKF(uint64_t a1, uint64_t a2)
{
  v3[30] = v2;
  v3[31] = a2;
  v3[29] = a1;
  uint64_t v4 = type metadata accessor for CompletePromptResponseElement();
  v3[32] = v4;
  v3[33] = *(void *)(v4 - 8);
  v3[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](_s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY0_, v2, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[30];
  uint64_t v4 = lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator, a2, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceProviderStreamIterator);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 136);
  v2[35] = v5;
  uint64_t v6 = *(void *)(v3 + 144);
  v2[36] = v6;
  __swift_mutable_project_boxed_opaque_existential_1(v3 + 112, v5);
  v2[37] = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  v2[38] = v7;
  v2[39] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v2[40] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[41] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v2[42] = v10;
  v2[43] = *(void *)(v10 + 64);
  uint64_t v11 = swift_task_alloc();
  v2[44] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v2[45] = v12;
  *uint64_t v12 = v2;
  v12[1] = _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTQ1_;
  return MEMORY[0x270FA1E88](v8, v3, v4, v11, v5, v6);
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTQ1_()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 240);
    uint64_t v4 = _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY3_;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 240);
    swift_endAccess();
    swift_task_dealloc();
    uint64_t v4 = _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY2_;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY2_()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 312) + 8))(v1, *(void *)(v0 + 304));
    swift_task_dealloc();
  }
  else
  {
    *(void *)(v0 + 200) = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 176));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v1, v2);
    swift_task_dealloc();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
    if (swift_dynamicCast()) {
      goto LABEL_5;
    }
  }
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
LABEL_5:
  outlined init with copy of (Int, LogitCollection)(v0 + 16, v0 + 96, &demangling cache variable for type metadata for PromptCompletionEvent?);
  if (*(void *)(v0 + 120))
  {
    uint64_t v5 = *(void *)(v0 + 368);
    outlined init with take of LogitCollection((long long *)(v0 + 96), v0 + 56);
    outlined init with copy of DeterministicLanguageModelProtocol(v0 + 56, v0 + 136);
    CompletePromptResponseElement.init(_:)();
    lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, 255, MEMORY[0x263F7FA20]);
    uint64_t v6 = static Serialization.encode<A>(_:)();
    if (v5)
    {
      return swift_unexpectedError();
    }
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 232);
    MEMORY[0x261204E60](v6);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
    uint64_t v14 = type metadata accessor for ClientData();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 232);
    outlined destroy of DataStreamState?(v0 + 96, &demangling cache variable for type metadata for PromptCompletionEvent?);
    uint64_t v9 = type metadata accessor for ClientData();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  }
  outlined destroy of DataStreamState?(v0 + 16, &demangling cache variable for type metadata for PromptCompletionEvent?);
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKFTY3_()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v5(v4, v1, v2);
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = _getErrorEmbeddedNSError<A>(_:)();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    (*(void (**)(uint64_t, void))(v0[42] + 8))(v4, v0[41]);
  }
  else
  {
    uint64_t v8 = v0[41];
    uint64_t v7 = (void *)swift_allocError();
    v5(v9, v4, v8);
  }
  uint64_t v10 = v0[31];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_endAccess();
  swift_task_dealloc();
  convertToInferenceError(_:)(v7, v10);
  type metadata accessor for InferenceError();
  lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
  swift_willThrowTypedImpl();

  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t OnDeviceInferenceProviderStreamIterator.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for OnDeviceInferenceProviderStreamIterator()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceProviderStream(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 28);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = *(int *)(v6 + 32);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_retain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for OnDeviceInferenceProviderStream(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  swift_release();
  uint64_t v4 = a1 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v6 = *(int *)(v5 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = *(int *)(v5 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v6 = *(int *)(v5 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = *(int *)(v5 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  *(_OWORD *)(a1 + *(int *)(v5 + 28)) = *(_OWORD *)(a2 + *(int *)(v5 + 28));
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  *(_OWORD *)(a1 + *(int *)(v5 + 28)) = *(_OWORD *)(a2 + *(int *)(v5 + 28));
  swift_release();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25FB22CBC);
}

uint64_t sub_25FB22CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25FB22D40);
}

uint64_t sub_25FB22D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OnDeviceInferenceProviderStream()
{
  uint64_t result = type metadata singleton initialization cache for OnDeviceInferenceProviderStream;
  if (!type metadata singleton initialization cache for OnDeviceInferenceProviderStream) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for OnDeviceInferenceProviderStream()
{
  type metadata accessor for DataStream<PromptCompletionEvent>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for DataStream<PromptCompletionEvent>()
{
  if (!lazy cache variable for type metadata for DataStream<PromptCompletionEvent>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptCompletionEvent);
    unint64_t v0 = type metadata accessor for DataStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataStream<PromptCompletionEvent>);
    }
  }
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator, a2, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceProviderStreamIterator);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance OnDeviceInferenceProviderStreamIterator(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InferenceError();
  v1[2] = v3;
  v1[3] = *(void *)(v3 - 8);
  v1[4] = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  v1[5] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[6] = v5;
  *uint64_t v5 = v1;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance OnDeviceInferenceProviderStreamIterator;
  return _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorC4next20ModelManagerServices10ClientDataVSgyYaAE0C5ErrorOYKF(a1, v4);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance OnDeviceInferenceProviderStreamIterator()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v5 = v2[4];
    uint64_t v4 = v2[5];
    uint64_t v7 = v2 + 2;
    uint64_t v6 = v2[2];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7[1] + 32);
    v8(v5, v4, v6);
    lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
    swift_allocError();
    v8(v9, v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v3[1];
  return v10();
}

uint64_t _s24TokenGenerationInference08OnDeviceC22ProviderStreamIteratorCScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v8 = type metadata accessor for InferenceError();
  v4[3] = v8;
  v4[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[5] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5Tu
                                                                   + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF24TokenGenerationInference08OnDeviceG22ProviderStreamIteratorC_Tg5Tu);
  uint64_t v10 = (void *)swift_task_alloc();
  v4[6] = v10;
  *uint64_t v10 = v4;
  v10[1] = _s24TokenGenerationInference011TG_OnDeviceC8ProviderC20ModelManagerServices0C9ProvidingAadEP14requestOneShot10clientData13configurationAD06ClientP0VAK_AD0cG20RequestConfigurationVtYaAD0C5ErrorOYKFTWTQ0_;
  return v12(a1, a2, a3, v9);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance OnDeviceInferenceProviderStream@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>.AsyncIterator);
  uint64_t v5 = MEMORY[0x270FA5388](v3, v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  MEMORY[0x261205660](v11);
  uint64_t v12 = (uint64_t *)(v1
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>)
                           + 28));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = &v10[*(int *)(v3 + 28)];
  *(void *)uint64_t v15 = v13;
  *((void *)v15 + 1) = v14;
  outlined init with copy of (Int, LogitCollection)((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>.AsyncIterator);
  type metadata accessor for OnDeviceInferenceProviderStreamIterator();
  uint64_t v16 = (uint64_t *)swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  v16[17] = v3;
  v16[18] = lazy protocol witness table accessor for type DataStream<PromptCompletionEvent>.AsyncIterator and conformance DataStream<A>.AsyncIterator();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16 + 14);
  outlined init with take of DataStream<PromptCompletionEvent>.AsyncIterator((uint64_t)v7, (uint64_t)boxed_opaque_existential_1);
  outlined destroy of DataStreamState?((uint64_t)v10, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>.AsyncIterator);
  uint64_t result = outlined destroy of OnDeviceInferenceProviderStream(v1);
  *a1 = v16;
  return result;
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in OnDeviceInferenceProviderStreamIterator()
{
  return lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, 255, MEMORY[0x263F562C0]);
}

uint64_t base witness table accessor for AsyncSequence in OnDeviceInferenceProviderStream()
{
  return lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type OnDeviceInferenceProviderStream and conformance OnDeviceInferenceProviderStream, 255, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceProviderStream);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : InferenceProviderStreamIterator in OnDeviceInferenceProviderStream(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(&lazy protocol witness table cache variable for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator, a2, (void (*)(uint64_t))type metadata accessor for OnDeviceInferenceProviderStreamIterator);
}

unint64_t lazy protocol witness table accessor for type DataStream<PromptCompletionEvent>.AsyncIterator and conformance DataStream<A>.AsyncIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent>.AsyncIterator and conformance DataStream<A>.AsyncIterator;
  if (!lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent>.AsyncIterator and conformance DataStream<A>.AsyncIterator)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>.AsyncIterator);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent>.AsyncIterator and conformance DataStream<A>.AsyncIterator);
  }
  return result;
}

uint64_t outlined init with take of DataStream<PromptCompletionEvent>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>.AsyncIterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of OnDeviceInferenceProviderStream(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OnDeviceInferenceProviderStream();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type OnDeviceInferenceProviderStreamIterator and conformance OnDeviceInferenceProviderStreamIterator(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_24TokenGenerationInference03OneF34HealingPrefixMatchingLanguageModelC9NodeState33_290950C585633F03B8505F4D810570AFLLVs5NeverOTg507_sS2i24fg11Inference03i3A34jklmn2C9o14State33_290950qrstu36AFLLVIgyyo_Si6offset_Si7elementtAFs5W184OIegnrzr_TR04_s24ab11Inference03d3A34efghi90C9processor6prompt19overflowConstraintsACSgAA0fG13TextProcessor_p_SaySiG0aB00M0OSgtKcfcAC9j14State33_290950lmnoP16AFLLVSi_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
      uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      v6[(result >> 6) + 8] |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v6[6] + v9) = v5;
      *(void *)(v6[7] + v9) = ++v3;
      uint64_t v10 = v6[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v6[2] = v12;
      unint64_t v14 = *(void *)(v15 + 16);
      unint64_t v13 = *(void *)(v15 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v15 + 16) = v14 + 1;
      *(void *)(v15 + 8 * v14 + 32) = v6;
      if (v2 == v3) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.leadingTokens.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.allowedFirstTokens.getter()
{
  return swift_bridgeObjectRetain();
}

void *OneTokenHealingPrefixMatchingLanguageModel.__allocating_init(processor:prompt:overflowConstraints:)(NSObject *a1, void *a2, uint64_t a3)
{
  return OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:overflowConstraints:)(a1, a2, a3);
}

void *OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:overflowConstraints:)(NSObject *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)v3;
  char v8 = a1;
  *(void *)(v3 + 64) = MEMORY[0x263F8EE78];
  uint64_t v9 = (void **)(v3 + 64);
  *(void *)(v3 + 88) = 0;
  uint64_t isa = (uint64_t)a1[3].isa;
  BOOL v11 = a1[4].isa;
  __swift_project_boxed_opaque_existential_1(a1, isa);
  uint64_t v12 = PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(a2, a3, isa, v11);
  if (!v4)
  {
    v5[9] = v12;
    v5[10] = v13;
    if (!*(void *)(v13 + 16))
    {
      if (one-time initialization token for healing != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.healing);
      swift_bridgeObjectRetain();
      long long v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      log = v26;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v60 = a3;
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        v62[0] = v55;
        *(_DWORD *)uint64_t v28 = 136642819;
        uint64_t v29 = v28;
        uint64_t v30 = swift_bridgeObjectRetain();
        uint64_t v31 = MEMORY[0x261205560](v30, MEMORY[0x263F8D6C8]);
        unint64_t v33 = v32;
        swift_bridgeObjectRelease();
        v61[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25FA51000, log, v27, "Found no tokens to heal in %{sensitive}s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v55, -1, -1);
        MEMORY[0x261206F80](v29, -1, -1);

        uint64_t v34 = v60;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v34 = a3;
      }
      outlined destroy of Constraints?(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      uint64_t v5 = 0;
      goto LABEL_29;
    }
    uint64_t v59 = a3;
    swift_bridgeObjectRelease();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v8, (uint64_t)(v5 + 2));
    uint64_t v14 = (uint64_t)v8[3].isa;
    uint64_t v15 = (uint64_t)v8[4].isa;
    uint64_t v16 = __swift_project_boxed_opaque_existential_1(v8, v14);
    int64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
    if (v17 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(0, v17);
      uint64_t v19 = BitSet.init()();
      v62[0] = v19;
      int64_t v20 = v18[2];
      if (v20)
      {
        uint64_t v21 = v9;
        swift_retain();
        for (uint64_t i = 0; i != v20; ++i)
        {
          Swift::Int v23 = v18[i + 4];
          BitSet.insert(_:)(v23);
        }
        swift_release_n();
        uint64_t v24 = v62[0];
        uint64_t v9 = v21;
      }
      else
      {
        uint64_t v24 = v19;
        swift_release();
      }
      v5[7] = v24;
      uint64_t v35 = swift_bridgeObjectRetain();
      unint64_t v36 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_24TokenGenerationInference03OneF34HealingPrefixMatchingLanguageModelC9NodeState33_290950C585633F03B8505F4D810570AFLLVs5NeverOTg507_sS2i24fg11Inference03i3A34jklmn2C9o14State33_290950qrstu36AFLLVIgyyo_Si6offset_Si7elementtAFs5W184OIegnrzr_TR04_s24ab11Inference03d3A34efghi90C9processor6prompt19overflowConstraintsACSgAA0fG13TextProcessor_p_SaySiG0aB00M0OSgtKcfcAC9j14State33_290950lmnoP16AFLLVSi_SitXEfU_Tf3nnnpf_nTf1cn_n(v35);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v5[8] = v36;
      swift_bridgeObjectRelease();
      uint64_t v37 = v5[10];
      int64_t v38 = *(void *)(v37 + 16);
      uint64_t v39 = MEMORY[0x263F8EE78];
      if (v38)
      {
        *(void *)os_log_type_t type = v9;
        uint64_t v56 = v5;
        os_log_t loga = v8;
        v61[0] = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
        uint64_t v40 = 0;
        uint64_t v39 = v61[0];
        uint64_t v41 = v37 + 32;
        uint64_t v42 = *(void *)(v61[0] + 16);
        uint64_t v43 = 16 * v42;
        do
        {
          uint64_t v44 = *(void *)(v41 + 8 * v40);
          v61[0] = v39;
          unint64_t v45 = *(void *)(v39 + 24);
          uint64_t v46 = v42 + v40 + 1;
          if (v42 + v40 >= v45 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v42 + v40 + 1, 1);
            uint64_t v39 = v61[0];
          }
          ++v40;
          *(void *)(v39 + 16) = v46;
          uint64_t v47 = v39 + v43;
          *(void *)(v47 + 32) = v44;
          *(void *)(v47 + 40) = -1;
          v43 += 16;
        }
        while (v38 != v40);
        swift_bridgeObjectRelease();
        uint64_t v5 = v56;
        char v8 = loga;
        uint64_t v9 = *(void ***)type;
      }
      if (*(void *)(v39 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
        uint64_t v48 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v48 = MEMORY[0x263F8EE80];
      }
      v61[0] = v48;
      long long v49 = (void *)swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v49, 1, v61);
      swift_bridgeObjectRelease();
      uint64_t v15 = v61[0];
      swift_beginAccess();
      uint64_t v16 = *v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v9 = v16;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_24;
      }
    }
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *uint64_t v9 = v16;
LABEL_24:
    unint64_t v52 = v16[2];
    unint64_t v51 = v16[3];
    if (v52 >= v51 >> 1)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v16);
      *uint64_t v9 = v16;
    }
    v16[2] = v52 + 1;
    v16[v52 + 4] = v15;
    swift_endAccess();
    outlined destroy of Constraints?(v59);
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return v5;
  }
  swift_bridgeObjectRelease();
  outlined destroy of Constraints?(a3);
  swift_bridgeObjectRelease();
  swift_deallocPartialClassInstance();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.startNode.getter()
{
  return 0;
}

Swift::Int __swiftcall OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v4 = *(void *)(*(void *)prompt.queryTokens._rawValue + 16);
  if (!v4) {
    return forPreviousNode;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = (uint64_t *)(*(void *)prompt.queryTokens._rawValue + 32);
  while (1)
  {
    uint64_t v8 = *v6++;
    uint64_t v7 = v8;
    if (forPreviousNode == -1) {
      goto LABEL_4;
    }
    Swift::Int result = swift_beginAccess();
    if (forPreviousNode < 0) {
      break;
    }
    if ((unint64_t)forPreviousNode >= *(void *)(*(void *)v5 + 16)) {
      goto LABEL_13;
    }
    uint64_t v10 = *(void *)(*(void *)v5 + 8 * forPreviousNode + 32);
    if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v12 & 1) != 0))
    {
      forPreviousNode = *(void *)(*(void *)(v10 + 56) + 8 * v11);
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      forPreviousNode = -1;
    }
LABEL_4:
    if (!--v4) {
      return forPreviousNode;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  uint64_t v1 = v0[6];
  if (v1 == -1)
  {
    uint64_t v9 = (void *)v0[5];
    uint64_t v10 = *(void *)(v0[7] + 56);
    v9[3] = &type metadata for UnconstrainedLogitCollection;
    v9[4] = &protocol witness table for UnconstrainedLogitCollection;
    *uint64_t v9 = v10;
LABEL_8:
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  uint64_t v2 = v0[7];
  uint64_t result = swift_beginAccess();
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = v0[6];
  if (*(void *)(v4 + 16) <= v5)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v6 = (uint64_t *)v0[5];
  if (!*(void *)(*(void *)(v4 + 8 * v5 + 32) + 16))
  {
    uint64_t v11 = *(void *)(v0[7] + 56);
    v6[3] = (uint64_t)&type metadata for UnconstrainedLogitCollection;
    v6[4] = (uint64_t)&protocol witness table for UnconstrainedLogitCollection;
    *uint64_t v6 = v11;
    goto LABEL_8;
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized BitSet.init<A>(_:)(v7);
  v6[3] = (uint64_t)&type metadata for SparseLogitCollection;
  v6[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
  *uint64_t v6 = v8;
LABEL_9:
  char v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  v7[6] = a2;
  v7[7] = v6;
  void v7[5] = a1;
  return MEMORY[0x270FA2498](OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel(unint64_t a1, uint64_t a2)
{
  return specialized OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel@<X0>(Swift::Int a1@<X0>, TokenGenerationInference::SamplingDecoderPrompt a2@<0:X1, 8:X2, 16:X3>)
{
  return OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:prompt:)(a1, a2);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v42 = a1[5];
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)*a3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_23;
  }
  char v14 = v9;
  if (v8[3] >= v13)
  {
    if (a2)
    {
      if (v9) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v14) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v19[6] + v20) = v7;
    *(void *)(v19[7] + v20) = v42;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v25 = a1 + 7;
    while (1)
    {
      uint64_t v26 = *(v25 - 1);
      uint64_t v27 = *v25;
      uint64_t v28 = (void *)*a3;
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      uint64_t v31 = v28[2];
      BOOL v32 = (v30 & 1) == 0;
      BOOL v22 = __OFADD__(v31, v32);
      uint64_t v33 = v31 + v32;
      if (v22) {
        break;
      }
      char v34 = v30;
      if (v28[3] < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
        unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        if ((v34 & 1) != (v35 & 1)) {
          goto LABEL_25;
        }
      }
      if (v34) {
        goto LABEL_10;
      }
      unint64_t v36 = (void *)*a3;
      *(void *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
      uint64_t v37 = 8 * v29;
      *(void *)(v36[6] + v37) = v26;
      *(void *)(v36[7] + v37) = v27;
      uint64_t v38 = v36[2];
      BOOL v22 = __OFADD__(v38, 1);
      uint64_t v39 = v38 + 1;
      if (v22) {
        goto LABEL_24;
      }
      v25 += 2;
      void v36[2] = v39;
      if (!--v24) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    unint64_t v10 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    int64_t v17 = (void *)swift_allocError();
    swift_willThrow();
    id v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v40._object = (void *)0x800000025FB6B660;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)();
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;

  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  swift_bridgeObjectRetain();
  char v9 = (void *)*a3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  BOOL v12 = v9[2];
  uint64_t v13 = (v11 & 1) == 0;
  char v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_24;
  }
  unint64_t v15 = v10;
  char v16 = v11;
  int64_t v17 = v9[3];
  swift_bridgeObjectRetain();
  if (v17 >= v14)
  {
    if (a2)
    {
      if (v16) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    BOOL v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    uint64_t v23 = 8 * v15;
    *(void *)(v22[6] + v23) = v8;
    *(void *)(v22[7] + v23) = v7;
    uint64_t v24 = v22[2];
    uint64_t v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v22[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v28 = a1 + 7;
    while (1)
    {
      char v30 = *(v28 - 1);
      unint64_t v29 = *v28;
      uint64_t v31 = (void *)*a3;
      BOOL v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
      char v34 = v31[2];
      char v35 = (v33 & 1) == 0;
      unint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        break;
      }
      uint64_t v37 = v32;
      uint64_t v38 = v33;
      uint64_t v39 = v31[3];
      swift_bridgeObjectRetain();
      if (v39 < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        Swift::String v40 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if ((v38 & 1) != (v41 & 1)) {
          goto LABEL_26;
        }
        uint64_t v37 = v40;
      }
      if (v38) {
        goto LABEL_10;
      }
      uint64_t v42 = (void *)*a3;
      *(void *)(*a3 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      uint64_t v43 = 8 * v37;
      *(void *)(v42[6] + v43) = v30;
      *(void *)(v42[7] + v43) = v29;
      uint64_t v44 = v42[2];
      uint64_t v25 = __OFADD__(v44, 1);
      unint64_t v45 = v44 + 1;
      if (v25) {
        goto LABEL_25;
      }
      v42[2] = v45;
      v28 += 2;
      if (!--v27) {
        goto LABEL_23;
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  id v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v16 & 1) == (v19 & 1))
  {
    unint64_t v15 = v18;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v20 = (void *)swift_allocError();
    swift_willThrow();
    uint64_t v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x800000025FB6B660;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  _print_unlocked<A, B>(_:_:)();
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:token:isPrompt:)(unint64_t a1, uint64_t a2)
{
  if (a1 == -1) {
    return -1;
  }
  uint64_t result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    if (*(void *)(v6 + 16) > a1)
    {
      uint64_t v7 = *(void *)(v6 + 8 * a1 + 32);
      if (*(void *)(v7 + 16))
      {
        unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
        if (v9)
        {
          uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
          swift_endAccess();
          return v10;
        }
      }
      swift_endAccess();
      return -1;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Constraints?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel()
{
  return self;
}

uint64_t method lookup function for OneTokenHealingPrefixMatchingLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for OneTokenHealingPrefixMatchingLanguageModel);
}

uint64_t dispatch thunk of OneTokenHealingPrefixMatchingLanguageModel.__allocating_init(processor:prompt:overflowConstraints:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel.NodeState()
{
  return &type metadata for OneTokenHealingPrefixMatchingLanguageModel.NodeState;
}

double PrefixGuidedLanguageModel.init(allowedPrefixes:illegalPrefixes:stopTokenIDs:vocabSize:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for PrefixGuidedLanguageModel.Node();
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v10 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_WORD *)(v10 + 56) = 256;
  *(unsigned char *)(v10 + 58) = 0;
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 40) = 1;
  swift_weakAssign();
  *(void *)&long long v14 = v10;
  *((void *)&v14 + 1) = v11;
  *(unsigned char *)(v10 + 58) = *(void *)(a1 + 16) == 0;
  uint64_t v12 = swift_retain();
  MEMORY[0x261205540](v12);
  if (*(void *)((*((void *)&v14 + 1) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*((void *)&v14 + 1) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(a1, 1);
  swift_bridgeObjectRelease();
  PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(a2, 0);
  swift_bridgeObjectRelease();
  double result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  return result;
}

uint64_t type metadata accessor for PrefixGuidedLanguageModel.Node()
{
  return self;
}

uint64_t PrefixGuidedLanguageModel.Node.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(uint64_t result, char a2)
{
  uint64_t v44 = *(void *)(result + 16);
  if (!v44) {
    return result;
  }
  char v3 = a2;
  uint64_t v4 = v2 + 1;
  uint64_t v42 = result + 32;
  uint64_t v43 = *v2;
  char v48 = a2 & 1;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  char v46 = v3;
  uint64_t v47 = v4;
  while (1)
  {
    uint64_t v7 = *(void *)(v42 + 8 * v5);
    uint64_t v50 = *(void *)(v7 + 16);
    if (v50) {
      break;
    }
    uint64_t v8 = v43;
    swift_retain();
LABEL_4:
    ++v5;
    *(unsigned char *)(v8 + 56) = 1;
    char v6 = *(unsigned char *)(v8 + 57) & v3 & 1;
    *(unsigned char *)(v8 + 57) = v6;
    *(unsigned char *)(v8 + 58) = v6;
    swift_release();
    if (v5 == v44) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v45 = v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = v43;
  swift_retain();
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(v7 + 8 * v9 + 32);
    char v12 = *(unsigned char *)(v8 + 58);
    uint64_t v13 = (uint64_t *)(v8 + 48);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v8 + 48);
    if (!*(void *)(v14 + 16)) {
      break;
    }
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    if ((v16 & 1) == 0) {
      break;
    }
    uint64_t v10 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
    swift_endAccess();
    swift_retain();
    swift_release();
    *(unsigned char *)(v10 + 57) = (*(unsigned char *)(v10 + 57) | v46) & 1;
    *(unsigned char *)(v10 + 58) = (*(unsigned char *)(v10 + 58) | v12) & 1;
LABEL_8:
    uint64_t v8 = v10;
    if (v50 == ++v9)
    {
      swift_bridgeObjectRelease();
      char v3 = v46;
      uint64_t v5 = v45;
      goto LABEL_4;
    }
  }
  swift_endAccess();
  if (*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  uint64_t v18 = *v13;
  if (*(void *)(*v13 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v11);
    if (v19)
    {
      swift_endAccess();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v21 & 1) == 0) {
        goto LABEL_39;
      }
      uint64_t v10 = *(void *)(*(void *)(v18 + 56) + 8 * v20);
LABEL_30:
      swift_retain();
      swift_release();
      *(unsigned char *)(v10 + 57) = v48;
      *(unsigned char *)(v10 + 58) = v12;
      uint64_t v41 = swift_retain();
      MEMORY[0x261205540](v41);
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_8;
    }
  }
  char v49 = v12;
  uint64_t v22 = v7;
  swift_endAccess();
  type metadata accessor for PrefixGuidedLanguageModel.Node();
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  *(void *)(v23 + 48) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_WORD *)(v23 + 56) = 256;
  *(unsigned char *)(v23 + 58) = 0;
  *(void *)(v23 + 16) = v17;
  *(void *)(v23 + 32) = v11;
  *(unsigned char *)(v23 + 40) = 0;
  swift_weakAssign();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void **)(v8 + 48);
  *(void *)(v8 + 48) = 0x8000000000000000;
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
  uint64_t v28 = v25[2];
  BOOL v29 = (v26 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (!__OFADD__(v28, v29))
  {
    char v31 = v26;
    if (v25[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_41;
      }
      unint64_t v27 = v32;
    }
    if (v31)
    {
      uint64_t v34 = v25[7];
      swift_release();
      *(void *)(v34 + 8 * v27) = v23;
    }
    else
    {
      v25[(v27 >> 6) + 8] |= 1 << v27;
      *(void *)(v25[6] + 8 * v27) = v11;
      *(void *)(v25[7] + 8 * v27) = v23;
      uint64_t v35 = v25[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_38;
      }
      v25[2] = v37;
    }
    *uint64_t v13 = (uint64_t)v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_beginAccess();
    uint64_t v38 = *v13;
    char v12 = v49;
    if (!*(void *)(*v13 + 16)) {
      goto LABEL_40;
    }
    uint64_t v7 = v22;
    unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    if ((v40 & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v10 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
    swift_endAccess();
    uint64_t v4 = v47;
    goto LABEL_30;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_endAccess();
  __break(1u);
LABEL_41:
  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PrefixGuidedLanguageModel.startNode.getter()
{
  return 0;
}

Swift::Int __swiftcall PrefixGuidedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v4 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return forPreviousNode;
  }
  unint64_t v6 = *(void *)(v2 + 8);
  uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
  unint64_t v28 = v6 & 0xC000000000000001;
  unint64_t v27 = v6 + 32;
  Swift::Int result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  unint64_t v29 = v6;
  unint64_t v10 = v6 >> 62;
  while (1)
  {
    uint64_t v11 = *(void *)(v4 + 8 * v9 + 32);
    if (v10)
    {
      swift_bridgeObjectRetain();
      Swift::Int v12 = _CocoaArrayWrapper.endIndex.getter();
      Swift::Int result = swift_bridgeObjectRelease();
      if (forPreviousNode >= v12) {
        goto LABEL_17;
      }
    }
    else if (forPreviousNode >= *(void *)(v7 + 16))
    {
      goto LABEL_17;
    }
    if (v28)
    {
      uint64_t v13 = MEMORY[0x261205930](forPreviousNode, v29);
      goto LABEL_13;
    }
    if (forPreviousNode < 0) {
      break;
    }
    if ((unint64_t)forPreviousNode >= *(void *)(v7 + 16)) {
      goto LABEL_25;
    }
    uint64_t v13 = *(void *)(v27 + 8 * forPreviousNode);
    swift_retain();
LABEL_13:
    swift_beginAccess();
    uint64_t v14 = *(void *)(v13 + 48);
    if (!*(void *)(v14 + 16) || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v16 & 1) == 0))
    {
      swift_endAccess();
      swift_release();
LABEL_17:
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Log.device);
      char v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = v4;
        unint64_t v22 = v10;
        uint64_t v23 = v5;
        uint64_t v24 = v7;
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 134217984;
        *(void *)(v25 + 4) = v11;
        _os_log_impl(&dword_25FA51000, v19, v20, "Unable to find node for token %ld. This should not happen", (uint8_t *)v25, 0xCu);
        uint64_t v26 = v25;
        uint64_t v7 = v24;
        uint64_t v5 = v23;
        unint64_t v10 = v22;
        uint64_t v4 = v21;
        MEMORY[0x261206F80](v26, -1, -1);
      }

      goto LABEL_4;
    }
    uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
    swift_endAccess();
    swift_retain();
    swift_release();
    forPreviousNode = *(void *)(v17 + 16);
    Swift::Int result = swift_release();
LABEL_4:
    if (v5 == ++v9)
    {
      swift_bridgeObjectRelease();
      return forPreviousNode;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int __swiftcall PrefixGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  Swift::Int v4 = forPreviousNode;
  if (isPrompt) {
    return v4;
  }
  unint64_t v6 = *(void *)(v3 + 8);
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    forPreviousNode = swift_bridgeObjectRelease();
    if (v16 <= v4) {
      goto LABEL_12;
    }
  }
  else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) <= forPreviousNode)
  {
    goto LABEL_12;
  }
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x261205930](v4, v6);
LABEL_8:
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 48);
    if (*(void *)(v8 + 16))
    {
      unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(token);
      if (v10)
      {
        uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
        swift_endAccess();
        swift_retain();
        swift_release();
        Swift::Int v4 = *(void *)(v11 + 16);
        swift_release();
        return v4;
      }
    }
    swift_endAccess();
    swift_release();
LABEL_12:
    if (one-time initialization token for device != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.device);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v13, v14, "Unable to find node for token %ld. This should not happen", v15, 0xCu);
      MEMORY[0x261206F80](v15, -1, -1);
    }

    return v4;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v4)
  {
    uint64_t v7 = *(void *)(v6 + 8 * v4 + 32);
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return forPreviousNode;
}

uint64_t PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 104) = a4;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a2;
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(v4 + 8);
  *(void *)(v5 + 96) = *(void *)(v4 + 24);
  return MEMORY[0x270FA2498](PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

void PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  uint64_t v55 = v2;
  if ((*(unsigned char *)(v2 + 104) & 1) == 0)
  {
    unint64_t v0 = *(void *)(v2 + 72);
    uint64_t v1 = *(void *)(v2 + 80);
    unint64_t v3 = v1 & 0xC000000000000001;
    if ((v1 & 0xC000000000000001) == 0)
    {
      if ((v0 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) > v0)
      {
        uint64_t v12 = *(void *)(v1 + 8 * v0 + 32);
        int v13 = *(unsigned __int8 *)(v12 + 58);
        swift_retain();
LABEL_11:
        swift_beginAccess();
        uint64_t v14 = *(void *)(v12 + 48);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v16 = specialized _NativeDictionary.filter(_:)(v14, v15);
        swift_bridgeObjectRelease();
        uint64_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v16);
        swift_release();
        uint64_t v18 = *(void *)(v2 + 72);
        uint64_t v19 = *(void *)(v2 + 80);
        if (v3)
        {
          uint64_t v20 = MEMORY[0x261205930](v18, v19);
        }
        else
        {
          uint64_t v20 = *(void *)(v19 + 8 * v18 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v21 = *(void *)(v20 + 48);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v23 = specialized _NativeDictionary.filter(_:)(v21, v22);
        swift_bridgeObjectRelease();
        uint64_t v24 = swift_retain();
        uint64_t v26 = specialized _NativeDictionary.filter(_:)(v24, v25);
        swift_release();
        if (!v13)
        {
          swift_release();
          swift_release();
          if (!v17[2])
          {
            swift_release();
            swift_bridgeObjectRetain();
            uint64_t v17 = *(void **)(v2 + 88);
          }
          uint64_t v34 = BitSet.init()();
          uint64_t v54 = v34;
          uint64_t v35 = v17[2];
          if (v35)
          {
            swift_bridgeObjectRetain();
            for (uint64_t i = 0; i != v35; ++i)
            {
              Swift::Int v37 = v17[i + 4];
              BitSet.insert(_:)(v37);
            }
            swift_bridgeObjectRelease_n();
            uint64_t v11 = v54;
          }
          else
          {
            uint64_t v11 = v34;
            swift_bridgeObjectRelease();
          }
          goto LABEL_43;
        }
        uint64_t v27 = *(void *)(v26 + 16);
        swift_release();
        swift_release();
        uint64_t v28 = *(void *)(v2 + 96);
        if (!v27)
        {
          uint64_t v38 = *(void *)(v2 + 64);
          swift_release();
          *(void *)(v38 + 24) = &type metadata for UnconstrainedLogitCollection;
          *(void *)(v38 + 32) = &protocol witness table for UnconstrainedLogitCollection;
          if ((v28 & 0x8000000000000000) == 0)
          {
            unint64_t v39 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v2 + 96));
            uint64_t v7 = BitSet.init()();
            uint64_t v54 = v7;
            int64_t v40 = v39[2];
            if (v40)
            {
              swift_retain();
              for (uint64_t j = 0; j != v40; ++j)
              {
                Swift::Int v42 = v39[j + 4];
                BitSet.insert(_:)(v42);
              }
              goto LABEL_6;
            }
LABEL_32:
            uint64_t v11 = v7;
            swift_release();
            goto LABEL_44;
          }
LABEL_52:
          __break(1u);
          return;
        }
        if ((v28 & 0x8000000000000000) == 0)
        {
          uint64_t v29 = Set.init(minimumCapacity:)();
          uint64_t v53 = v29;
          if (v28)
          {
            uint64_t v30 = 0;
            do
            {
              uint64_t v31 = *(void *)(v2 + 96);
              uint64_t v32 = v30 + 1;
              specialized Set._Variant.insert(_:)(&v54, v30);
              uint64_t v30 = v32;
            }
            while (v32 != v31);
            uint64_t v33 = v53;
          }
          else
          {
            uint64_t v33 = v29;
          }
          uint64_t v43 = specialized _copyCollectionToContiguousArray<A>(_:)(v23);
          swift_release();
          uint64_t v44 = specialized Set.init<A>(_:)((uint64_t)v43);
          swift_release();
          if (*(void *)(v44 + 16) <= *(void *)(v33 + 16) >> 3)
          {
            uint64_t v54 = v33;
            specialized Set._subtract<A>(_:)(v44);
            swift_bridgeObjectRelease();
            uint64_t v45 = v54;
          }
          else
          {
            uint64_t v45 = specialized _NativeSet.subtracting<A>(_:)(v44, v33);
            swift_bridgeObjectRelease();
          }
          char v46 = specialized _copyCollectionToContiguousArray<A>(_:)(v45);
          swift_bridgeObjectRelease();
          uint64_t v47 = BitSet.init()();
          uint64_t v54 = v47;
          uint64_t v48 = v46[2];
          if (v48)
          {
            swift_bridgeObjectRetain();
            for (uint64_t k = 0; k != v48; ++k)
            {
              Swift::Int v50 = v46[k + 4];
              BitSet.insert(_:)(v50);
            }
            swift_release_n();
            uint64_t v11 = v54;
          }
          else
          {
            uint64_t v11 = v47;
            swift_release();
          }
LABEL_43:
          uint64_t v51 = *(void *)(v2 + 64);
          *(void *)(v51 + 24) = &type metadata for PrefixGuidedLanguageModel.PrefixLogitCollection;
          *(void *)(v51 + 32) = &protocol witness table for PrefixGuidedLanguageModel.PrefixLogitCollection;
          goto LABEL_44;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      __break(1u);
      goto LABEL_51;
    }
LABEL_48:
    int v13 = *(unsigned __int8 *)(MEMORY[0x261205930](v0, v1) + 58);
    swift_release();
    uint64_t v12 = MEMORY[0x261205930](v0, v1);
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v2 + 96);
  uint64_t v5 = *(void *)(v2 + 64);
  *(void *)(v5 + 24) = &type metadata for UnconstrainedLogitCollection;
  *(void *)(v5 + 32) = &protocol witness table for UnconstrainedLogitCollection;
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(0, *(void *)(v2 + 96));
  uint64_t v7 = BitSet.init()();
  uint64_t v54 = v7;
  int64_t v8 = v6[2];
  if (!v8) {
    goto LABEL_32;
  }
  swift_retain();
  for (uint64_t m = 0; m != v8; ++m)
  {
    Swift::Int v10 = v6[m + 4];
    BitSet.insert(_:)(v10);
  }
LABEL_6:
  swift_release_n();
  uint64_t v11 = v54;
LABEL_44:
  **(void **)(v2 + 64) = v11;
  unint64_t v52 = *(void (**)(void))(v2 + 8);
  v52();
}

float protocol witness for LogitCollection.subscript.getter in conformance PrefixGuidedLanguageModel.PrefixLogitCollection(Swift::Int a1)
{
  Swift::Bool v1 = BitSet.contains(_:)(a1);
  float result = -65504.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance PrefixGuidedLanguageModel(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *(void *)uint64_t v9 = v5;
  *(void *)(v9 + 8) = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  *(unsigned char *)(v9 + 104) = a4;
  *(void *)(v9 + 64) = a1;
  *(void *)(v9 + 72) = a2;
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v4 + 8);
  *(void *)(v9 + 96) = *(void *)(v4 + 24);
  return MEMORY[0x270FA2498](PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v9 + 48) + 8 * v22) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2 = isStackAllocationSafe;
  v34[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v20 = (char *)swift_slowAlloc();
      bzero(v20, v5);
      uint64_t v21 = 0;
      int64_t v22 = 0;
      uint64_t v23 = v2 + 64;
      uint64_t v24 = 1 << *(unsigned char *)(v2 + 32);
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v26 = v25 & *(void *)(v2 + 64);
      int64_t v27 = (unint64_t)(v24 + 63) >> 6;
      while (1)
      {
        if (v26)
        {
          unint64_t v28 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          unint64_t v29 = v28 | (v22 << 6);
        }
        else
        {
          int64_t v30 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_54;
          }
          if (v30 >= v27) {
            goto LABEL_51;
          }
          unint64_t v31 = *(void *)(v23 + 8 * v30);
          ++v22;
          if (!v31)
          {
            int64_t v22 = v30 + 1;
            if (v30 + 1 >= v27) {
              goto LABEL_51;
            }
            unint64_t v31 = *(void *)(v23 + 8 * v22);
            if (!v31)
            {
              int64_t v22 = v30 + 2;
              if (v30 + 2 >= v27) {
                goto LABEL_51;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v22);
              if (!v31)
              {
                int64_t v32 = v30 + 3;
                if (v32 >= v27) {
                  goto LABEL_51;
                }
                unint64_t v31 = *(void *)(v23 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v22 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      goto LABEL_56;
                    }
                    if (v22 >= v27) {
                      break;
                    }
                    unint64_t v31 = *(void *)(v23 + 8 * v22);
                    ++v32;
                    if (v31) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v33 = specialized _NativeDictionary.extractDictionary(using:count:)((unint64_t *)v20, v4, v21, v2);
                  MEMORY[0x261206F80](v20, -1, -1);
                  return v33;
                }
                int64_t v22 = v32;
              }
            }
          }
LABEL_47:
          unint64_t v26 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v22 << 6);
        }
        if (*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v29) + 57) == 1)
        {
          *(void *)&v20[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
          BOOL v18 = __OFADD__(v21++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x270FA5388](isStackAllocationSafe, a2);
  bzero((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v12) {
        return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v12) {
              return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
            }
            unint64_t v16 = *(void *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
                }
                unint64_t v16 = *(void *)(v8 + 8 * v7);
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v7 = v17;
          }
        }
      }
LABEL_22:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v14) + 57) == 1)
    {
      *(void *)((char *)v34 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  BOOL v18;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  void v34[2];

  uint64_t v2 = isStackAllocationSafe;
  v34[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v20 = (char *)swift_slowAlloc();
      bzero(v20, v5);
      uint64_t v21 = 0;
      int64_t v22 = 0;
      uint64_t v23 = v2 + 64;
      uint64_t v24 = 1 << *(unsigned char *)(v2 + 32);
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v26 = v25 & *(void *)(v2 + 64);
      int64_t v27 = (unint64_t)(v24 + 63) >> 6;
      while (1)
      {
        if (v26)
        {
          unint64_t v28 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          unint64_t v29 = v28 | (v22 << 6);
        }
        else
        {
          int64_t v30 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_54;
          }
          if (v30 >= v27) {
            goto LABEL_51;
          }
          unint64_t v31 = *(void *)(v23 + 8 * v30);
          ++v22;
          if (!v31)
          {
            int64_t v22 = v30 + 1;
            if (v30 + 1 >= v27) {
              goto LABEL_51;
            }
            unint64_t v31 = *(void *)(v23 + 8 * v22);
            if (!v31)
            {
              int64_t v22 = v30 + 2;
              if (v30 + 2 >= v27) {
                goto LABEL_51;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v22);
              if (!v31)
              {
                int64_t v32 = v30 + 3;
                if (v32 >= v27) {
                  goto LABEL_51;
                }
                unint64_t v31 = *(void *)(v23 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v22 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      goto LABEL_56;
                    }
                    if (v22 >= v27) {
                      break;
                    }
                    unint64_t v31 = *(void *)(v23 + 8 * v22);
                    ++v32;
                    if (v31) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v33 = specialized _NativeDictionary.extractDictionary(using:count:)((unint64_t *)v20, v4, v21, v2);
                  MEMORY[0x261206F80](v20, -1, -1);
                  return v33;
                }
                int64_t v22 = v32;
              }
            }
          }
LABEL_47:
          unint64_t v26 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v22 << 6);
        }
        if ((*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v29) + 57) & 1) == 0)
        {
          *(void *)&v20[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
          BOOL v18 = __OFADD__(v21++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x270FA5388](isStackAllocationSafe, a2);
  bzero((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v12) {
        return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v12) {
              return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
            }
            unint64_t v16 = *(void *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
                }
                unint64_t v16 = *(void *)(v8 + 8 * v7);
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v7 = v17;
          }
        }
      }
LABEL_22:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if ((*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v14) + 57) & 1) == 0)
    {
      *(void *)((char *)v34 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  BOOL v18;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  void v34[2];

  uint64_t v2 = isStackAllocationSafe;
  v34[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v20 = (char *)swift_slowAlloc();
      bzero(v20, v5);
      uint64_t v21 = 0;
      int64_t v22 = 0;
      uint64_t v23 = v2 + 64;
      uint64_t v24 = 1 << *(unsigned char *)(v2 + 32);
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v26 = v25 & *(void *)(v2 + 64);
      int64_t v27 = (unint64_t)(v24 + 63) >> 6;
      while (1)
      {
        if (v26)
        {
          unint64_t v28 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          unint64_t v29 = v28 | (v22 << 6);
        }
        else
        {
          int64_t v30 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_54;
          }
          if (v30 >= v27) {
            goto LABEL_51;
          }
          unint64_t v31 = *(void *)(v23 + 8 * v30);
          ++v22;
          if (!v31)
          {
            int64_t v22 = v30 + 1;
            if (v30 + 1 >= v27) {
              goto LABEL_51;
            }
            unint64_t v31 = *(void *)(v23 + 8 * v22);
            if (!v31)
            {
              int64_t v22 = v30 + 2;
              if (v30 + 2 >= v27) {
                goto LABEL_51;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v22);
              if (!v31)
              {
                int64_t v32 = v30 + 3;
                if (v32 >= v27) {
                  goto LABEL_51;
                }
                unint64_t v31 = *(void *)(v23 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v22 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      goto LABEL_56;
                    }
                    if (v22 >= v27) {
                      break;
                    }
                    unint64_t v31 = *(void *)(v23 + 8 * v22);
                    ++v32;
                    if (v31) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v33 = specialized _NativeDictionary.extractDictionary(using:count:)((unint64_t *)v20, v4, v21, v2);
                  MEMORY[0x261206F80](v20, -1, -1);
                  return v33;
                }
                int64_t v22 = v32;
              }
            }
          }
LABEL_47:
          unint64_t v26 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v22 << 6);
        }
        if (*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v29) + 56) == 1)
        {
          *(void *)&v20[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
          BOOL v18 = __OFADD__(v21++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x270FA5388](isStackAllocationSafe, a2);
  bzero((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v12) {
        return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v12) {
              return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
            }
            unint64_t v16 = *(void *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
                }
                unint64_t v16 = *(void *)(v8 + 8 * v7);
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v7 = v17;
          }
        }
      }
LABEL_22:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(v2 + 56) + 8 * v14) + 56) == 1)
    {
      *(void *)((char *)v34 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)((void *)((char *)v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = specialized Set._Variant.remove(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  void v34[5] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v33[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
                    return v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v6;
    void v34[2] = v33[0];
    v34[3] = v4;
    v34[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe, v26);
      unint64_t v28 = (char *)v33 - v27;
      memcpy((char *)v33 - v27, (const void *)(v2 + 56), v24);
      uint64_t v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v28, v23, v2, v21, v34);
      swift_release();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      return v29;
    }
    else
    {
      int64_t v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v2 + 56), v24);
      uint64_t v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v30, v23, v2, v21, v34);
      swift_release();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      MEMORY[0x261206F80](v30, -1, -1);
      return v31;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v16 = a5[3];
    unint64_t v17 = a5[4];
    if (!v17) {
      break;
    }
    uint64_t v18 = (v17 - 1) & v17;
    unint64_t v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_16:
    uint64_t v26 = *(void *)(*(void *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v27 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v28 = result & ~v27;
    uint64_t v12 = v28 >> 6;
    uint64_t v13 = 1 << v28;
    if (((1 << v28) & *(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v29 = *(void *)(a3 + 48);
      if (*(void *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        uint64_t v14 = v12;
        unint64_t v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1)) {
            goto LABEL_35;
          }
          if (!v10) {
            return MEMORY[0x263F8EE88];
          }
        }
      }
      else
      {
        for (unint64_t i = v28 + 1; ; unint64_t i = v31 + 1)
        {
          unint64_t v31 = i & ~v27;
          if (((*(void *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            break;
          }
          if (*(void *)(v29 + 8 * v31) == v26)
          {
            uint64_t v12 = v31 >> 6;
            uint64_t v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    int64_t v21 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v22 = a5[3];
    if (v20 >= v21) {
      goto LABEL_33;
    }
    uint64_t v23 = a5[1];
    unint64_t v24 = *(void *)(v23 + 8 * v20);
    if (v24) {
      goto LABEL_15;
    }
    int64_t v25 = v16 + 2;
    int64_t v22 = v16 + 1;
    if (v16 + 2 >= v21) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v23 + 8 * v25);
    if (!v24)
    {
      int64_t v22 = v16 + 2;
      if (v16 + 3 >= v21) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v23 + 8 * (v16 + 3));
      if (v24)
      {
        int64_t v20 = v16 + 3;
        goto LABEL_15;
      }
      int64_t v25 = v16 + 4;
      int64_t v22 = v16 + 3;
      if (v16 + 4 >= v21) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v23 + 8 * v25);
      if (!v24)
      {
        int64_t v20 = v16 + 5;
        int64_t v22 = v16 + 4;
        if (v16 + 5 >= v21) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v23 + 8 * v20);
        if (!v24)
        {
          int64_t v22 = v21 - 1;
          int64_t v32 = v16 + 6;
          while (v21 != v32)
          {
            unint64_t v24 = *(void *)(v23 + 8 * v32++);
            if (v24)
            {
              int64_t v20 = v32 - 1;
              goto LABEL_15;
            }
          }
LABEL_33:
          a5[3] = v22;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v8, a2, v10, a3);
        }
        goto LABEL_15;
      }
    }
    int64_t v20 = v25;
LABEL_15:
    uint64_t v18 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v20 << 6);
    int64_t v16 = v20;
    goto LABEL_16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PrefixGuidedLanguageModel.Node>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v31 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v31[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v31[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v31[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v19;
    *(void *)(*(void *)(v9 + 56) + v29) = v20;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t result = swift_retain();
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t destroy for PrefixGuidedLanguageModel()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PrefixGuidedLanguageModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PrefixGuidedLanguageModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PrefixGuidedLanguageModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixGuidedLanguageModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixGuidedLanguageModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixGuidedLanguageModel()
{
  return &type metadata for PrefixGuidedLanguageModel;
}

ValueMetadata *type metadata accessor for PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  return &type metadata for PrefixGuidedLanguageModel.PrefixLogitCollection;
}

uint64_t PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a1;
  unint64_t v10 = (uint64_t (*)(void))a4[2];
  ((void (*)(void *, uint64_t, void *))v10)(a1, a3, a4);
  if (v5) {
    return (uint64_t)v9;
  }
  uint64_t v34 = a2;
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))a4[6];
  swift_bridgeObjectRetain();
  uint64_t v12 = String.count.getter();
  uint64_t v33 = v11;
  if (v12 >= v11(a3, (uint64_t)a4)) {
    return (uint64_t)v9;
  }
  uint64_t v13 = v9[2];
  if (!v13) {
    return (uint64_t)v9;
  }
  uint64_t v35 = v4;
  uint64_t v36 = (uint64_t)a4;
  int64_t v32 = (uint64_t (*)(uint64_t, uint64_t))a4[7];
  unint64_t v14 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v15 = v9[v13 + 3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1) {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
    }
    v14[2] = v17 + 1;
    v14[v17 + 4] = v15;
    if (v32(a3, v36))
    {
      uint64_t v18 = swift_bridgeObjectRetain();
      specialized Sequence.reversed()(v18);
      uint64_t v19 = v10();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      unint64_t v22 = implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(v35, a3, v36);
    }
    else
    {
      unint64_t v24 = implicit closure #3 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(v35, a3, v36);
      uint64_t v25 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18ReversedCollectionVySaySiGG_SSs5NeverOTg5011_sSiSSIgyo_h4SSs5F11OIegnrzr_TRSiSSIgyo_Tf1cn_nTf4ng_n(v25, (uint64_t (*)(void))v24);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v21 = v26;
      swift_bridgeObjectRelease();
      unint64_t v22 = implicit closure #5 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(v35, a3, v36);
    }
    uint64_t v27 = PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:)(v19, v21, v34, (uint64_t (*)(uint64_t, uint64_t))v22, v23, a3, v36);
    swift_bridgeObjectRelease();
    swift_release();
    if (!*(void *)(v27 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      return (uint64_t)v9;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (!v9[2]) {
      break;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v29 = v9[2];
      if (!v29) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      uint64_t v29 = v9[2];
      if (!v29)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v9;
      }
    }
    v9[2] = v29 - 1;
    uint64_t v30 = swift_bridgeObjectRetain();
    specialized Sequence.reversed()(v30);
    v10();
    swift_bridgeObjectRelease();
    uint64_t v31 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v31 < v33(a3, v36))
    {
      uint64_t v13 = v9[2];
      if (v13) {
        continue;
      }
    }
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t (*implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:);
}

uint64_t PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v73 = a7;
  char v71 = a4;
  uint64_t v72 = a6;
  uint64_t v69 = a2;
  uint64_t v70 = a5;
  uint64_t v68 = a1;
  uint64_t v75 = 0;
  uint64_t v8 = type metadata accessor for Schema();
  MEMORY[0x270FA5388](v8 - 8, v9);
  uint64_t v64 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Grammar();
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v67 = v11;
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v63 = (char *)&v61 - v17;
  uint64_t v18 = type metadata accessor for GenerationSchema();
  uint64_t v65 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18, v19);
  unint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v23);
  uint64_t v25 = (char *)&v61 - v24;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  uint64_t v27 = MEMORY[0x270FA5388](v61, v26);
  uint64_t v29 = (char *)&v61 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v27, v30);
  uint64_t v33 = (char *)&v61 - v32;
  uint64_t v35 = MEMORY[0x270FA5388](v31, v34);
  Swift::Int v37 = (char *)&v61 - v36;
  MEMORY[0x270FA5388](v35, v38);
  int64_t v40 = (char *)&v61 - v39;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v78 = 0;
  uint64_t v62 = a3;
  outlined init with copy of Constraints?(a3, (uint64_t)&v61 - v39);
  uint64_t v41 = type metadata accessor for Constraints();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1) {
    goto LABEL_9;
  }
  outlined init with copy of Constraints?((uint64_t)v40, (uint64_t)v37);
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v37, v41);
  if (v43 == *MEMORY[0x263F7F848])
  {
    (*(void (**)(char *, uint64_t))(v42 + 96))(v37, v41);
    uint64_t v44 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v25, v37, v18);
    Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional v81 = GenerationSchema.extractPrefixes()();
    if (v81.value.legal._rawValue)
    {
      rawValue = v81.value.legal._rawValue;
      uint64_t v47 = v81.value.illegal._rawValue;
      (*(void (**)(char *, uint64_t, void))(v44 + 8))(v25, v18, *(void *)&v81.is_nil);
      outlined consume of (legal: [String], illegal: [String])?(v79);
      uint64_t v79 = (uint64_t)rawValue;
      uint64_t v80 = v47;
    }
    else
    {
      type metadata accessor for EarleyParser();
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v22, v25, v18);
      Schema.init(type:)();
      Swift::Int v50 = v63;
      Grammar.init(schema:)();
      uint64_t v51 = static EarleyParser.createRootParser(for:)();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v50, v67);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v18);
      swift_release();
      uint64_t v78 = v51;
    }
    goto LABEL_9;
  }
  if (v43 == *MEMORY[0x263F7F850])
  {
    uint64_t v48 = *(void (**)(char *, uint64_t))(v42 + 96);
    v42 += 96;
    v48(v37, v41);
    uint64_t v33 = v75;
    Grammar.init(backusNaurForm:prependSpaceToRootRule:)();
    if (!v33)
    {
      type metadata accessor for EarleyParser();
      uint64_t v49 = static EarleyParser.createRootParser(for:)();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v67);
      swift_release();
      uint64_t v78 = v49;
LABEL_9:
      outlined destroy of Constraints?((uint64_t)v40);
      uint64_t v52 = v71(v68, v69);
      uint64_t v54 = MEMORY[0x270FA5388](v52, v53);
      uint64_t v55 = v73;
      *(&v61 - 6) = v72;
      *(&v61 - 5) = v55;
      *(&v61 - 4) = (uint64_t)&v79;
      *(&v61 - 3) = v74;
      uint64_t v59 = (uint64_t)&v78;
      uint64_t v56 = specialized Sequence.compactMap<A>(_:)(v54, (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:));
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of (legal: [String], illegal: [String])?(v79);
      return (uint64_t)v56;
    }
    swift_unexpectedError();
    __break(1u);
    goto LABEL_13;
  }
  int64_t v40 = (char *)0xD00000000000001ALL;
  if (v43 != *MEMORY[0x263F7F840])
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v41);
    outlined init with copy of Constraints?(v62, (uint64_t)v33);
    char v76 = 0;
    unint64_t v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    char v76 = v40;
    unint64_t v77 = 0x800000025FB6D2E0;
    outlined init with copy of Constraints?((uint64_t)v33, (uint64_t)v29);
    v58._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    int v60 = 0;
    uint64_t v59 = 128;
    goto LABEL_14;
  }
  int v60 = 0;
  uint64_t v59 = 125;
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*implicit closure #3 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #4 in implicit closure #3 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:);
}

uint64_t (*implicit closure #5 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #6 in implicit closure #5 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:);
}

uint64_t closure #1 in PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v10 = *a4;
    if (*a4)
    {
      uint64_t v11 = a4[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v12 = specialized PrefixMatchingTextProcessor.validate(characters:against:)(a2, (void *)a3, v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*a6) {
        return a1;
      }
      swift_retain();
      char v12 = specialized PrefixMatchingTextProcessor.validate(characters:against:)(a2, a3);
      swift_release();
    }
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18ReversedCollectionVySaySiGG_SSs5NeverOTg5011_sSiSSIgyo_h4SSs5F11OIegnrzr_TRSiSSIgyo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(void))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v14;
    uint64_t v6 = a1 + 24;
    do
    {
      uint64_t v7 = a2(*(void *)(v6 + 8 * v2));
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    uint64_t v8 = *(v4 - 2);
    swift_bridgeObjectRetain();
    uint64_t v9 = a2(v8, v6, v7);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      if (v13 >= v12 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v5);
      }
      v5[2] = v13 + 1;
      v5[v13 + 4] = v9;
    }
    v4 += 3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized PrefixMatchingTextProcessor.validate(characters:against:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (void **)(a4 + 40);
    while (1)
    {
      uint64_t v11 = (uint64_t)*(v9 - 1);
      char v10 = *v9;
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v11;
      v12._object = v10;
      LOBYTE(v11) = String.hasPrefix(_:)(v12);
      swift_bridgeObjectRelease();
      if (v11) {
        break;
      }
      v9 += 2;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = (void **)(a3 + 40);
  while (1)
  {
    uint64_t v16 = (uint64_t)*(v14 - 1);
    uint64_t v15 = *v14;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v16;
    v17._object = v15;
    if (String.hasPrefix(_:)(v17)) {
      break;
    }
    v18._countAndFlagsBits = a1;
    v18._object = a2;
    Swift::Bool v19 = String.hasPrefix(_:)(v18);
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_14;
    }
    v14 += 2;
    if (!--v13) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized PrefixMatchingTextProcessor.validate(characters:against:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  swift_retain();
  for (uint64_t i = 0; i < v2; i += v10)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v10 = v9;
      goto LABEL_15;
    }
    if ((a2 & 0x2000000000000000) == 0)
    {
      uint64_t v8 = v6;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      if (*(char *)(v8 + i) < 0)
      {
        switch(__clz(*(unsigned __int8 *)(v8 + i) ^ 0xFF))
        {
          case 0x1Au:
            goto LABEL_19;
          case 0x1Bu:
            goto LABEL_20;
          case 0x1Cu:
            goto LABEL_21;
          default:
            break;
        }
      }
LABEL_14:
      uint64_t v10 = 1;
      goto LABEL_15;
    }
    v14[0] = a1;
    v14[1] = v5;
    if ((*((char *)v14 + i) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    switch(__clz(*((unsigned __int8 *)v14 + i) ^ 0xFF))
    {
      case 0x1Au:
LABEL_19:
        uint64_t v10 = 2;
        break;
      case 0x1Bu:
LABEL_20:
        uint64_t v10 = 3;
        break;
      case 0x1Cu:
LABEL_21:
        uint64_t v10 = 4;
        break;
      default:
        goto LABEL_14;
    }
LABEL_15:
    uint64_t v11 = EarleyParser.childParser(consumingElement:)();
    swift_release();
    BOOL v12 = v11 != 0;
    if (!v11) {
      goto LABEL_22;
    }
  }
  swift_release();
LABEL_22:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.encode(text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.decode(tokenIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.text(forTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenID(forText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.vocabularyCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.longestTokenLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.isContinuationTokenizer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 80))();
}

uint64_t outlined init with copy of Constraints?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return closure #1 in PrefixMatchingTextProcessor.validateTokenIDs(for:constraints:tokenIDs:)(a1, a2, a3, *(uint64_t **)(v3 + 32), *(void *)(v3 + 40), *(void **)(v3 + 48));
}

uint64_t outlined consume of (legal: [String], illegal: [String])?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 72))();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:overflowConstraints:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))();
}

void *PromptLookupLanguageModel.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_25FB61DF0;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 257;
  *(void *)(v1 + 64) = v2;
  v0[4] = v1;
  return v0;
}

uint64_t PromptLookupLanguageModel.startNode.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t PromptLookupLanguageModel.startNode.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PromptLookupLanguageModel.startNode.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

void *PromptLookupLanguageModel.init()()
{
  v0[2] = 0;
  v0[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_25FB61DF0;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 257;
  *(void *)(v1 + 64) = v2;
  v0[4] = v1;
  return v0;
}

Swift::Int __swiftcall PromptLookupLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  unint64_t v6 = v4;
  uint64_t v10 = (Swift::Int *)(v4 + 32);
  swift_beginAccess();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v4 + 32);
  unint64_t v3 = *(void *)(v11 + 16);
  if (v3 <= forPreviousNode)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *uint64_t v10 = result;
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v11 + 40 * forPreviousNode + 64);
  if (*(void *)(v12 + 16))
  {
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(token);
    if (v14)
    {
      unint64_t v3 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
LABEL_13:
      swift_endAccess();
      return v3;
    }
  }
  swift_endAccess();
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  uint64_t v5 = (void *)*v10;
  Swift::Int result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = (Swift::Int)v5;
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
LABEL_7:
  unint64_t v17 = v5[2];
  unint64_t v16 = v5[3];
  if (v17 >= v16 >> 1)
  {
    Swift::Int result = (Swift::Int)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v5);
    uint64_t v5 = (void *)result;
    *uint64_t v10 = result;
  }
  v5[2] = v17 + 1;
  Swift::String v18 = &v5[5 * v17];
  v18[4] = forPreviousNode;
  *((unsigned char *)v18 + 40) = 0;
  v18[6] = token;
  *((unsigned char *)v18 + 56) = 0;
  *((unsigned char *)v18 + 57) = isPrompt;
  v18[8] = v4;
  Swift::Bool v19 = (void *)*v10;
  if (isPrompt) {
    *(void *)(v6 + 24) = v3;
  }
  if (v19[2] > (unint64_t)forPreviousNode)
  {
    uint64_t v20 = &v19[5 * forPreviousNode];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v20[8];
    v20[8] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, token, isUniquelyReferenced_nonNull_native);
    v20[8] = v22;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return MEMORY[0x270FA2498](PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[13];
  uint64_t v34 = v2 + 4;
  swift_beginAccess();
  if (v1 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (*(void *)(v2[4] + 16) <= v0[12])
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized Sequence.first(where:)(v3, partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:));
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = (uint64_t *)v0[11];
    v7[3] = (uint64_t)&unk_270BD43D8;
    v7[4] = (uint64_t)&protocol witness table for PromptLookupLanguageModel.OneTokenLogitCollection;
    *uint64_t v7 = v4;
    goto LABEL_25;
  }
  uint64_t v2 = (void *)v0[13];
  swift_beginAccess();
  unint64_t v8 = v2[2];
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  if (v8 < *(void *)(*v34 + 16))
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v1 = specialized Sequence.first(where:)(v9, partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:));
    uint64_t v11 = v10;
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v27 = (void *)v0[11];
      v27[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      v27[4] = &protocol witness table for <A> [A];
      *uint64_t v27 = MEMORY[0x263F8EE78];
      goto LABEL_25;
    }
    uint64_t v36 = v11;
    uint64_t v37 = v1;
    unint64_t v14 = *(void *)(v0[13] + 24);
    swift_retain();
    uint64_t v35 = 0;
    uint64_t v2 = v34;
    do
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v14 >= *(void *)(*v2 + 16)) {
        goto LABEL_29;
      }
      uint64_t v15 = *v2 + 40 * v14;
      uint64_t v1 = *(void *)(v15 + 32);
      char v16 = *(unsigned char *)(v15 + 40);
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v18 = specialized Sequence.first(where:)(v17, partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:));
      uint64_t v20 = v19;
      char v22 = v21;
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        uint64_t v23 = PromptLookupLanguageModel.commonTokenCountFromNodes(_:_:)(v14, v0[12]);
        uint64_t v2 = v34;
        uint64_t v24 = v35;
        if (v35 >= v23) {
          uint64_t v25 = v36;
        }
        else {
          uint64_t v25 = v20;
        }
        uint64_t v26 = v37;
        if (v35 < v23) {
          uint64_t v26 = v18;
        }
        uint64_t v36 = v25;
        uint64_t v37 = v26;
        if (v35 < v23) {
          uint64_t v24 = v23;
        }
        uint64_t v35 = v24;
      }
      unint64_t v14 = v1;
    }
    while ((v16 & 1) == 0);
    swift_release();
    swift_beginAccess();
    uint64_t v1 = (uint64_t)v2;
    uint64_t v2 = (void *)*v2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v1 = v2;
    if ((result & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_23;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v2 = (void *)result;
  *(void *)uint64_t v1 = result;
LABEL_23:
  uint64_t v29 = v0[12];
  if (v2[2] <= v29)
  {
    __break(1u);
    return result;
  }
  uint64_t v30 = (uint64_t *)v0[11];
  uint64_t v31 = &v2[5 * v29];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = v31[8];
  v31[8] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v37, isUniquelyReferenced_nonNull_native);
  v31[8] = v38;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v30[3] = (uint64_t)&unk_270BD43D8;
  v30[4] = (uint64_t)&protocol witness table for PromptLookupLanguageModel.OneTokenLogitCollection;
  uint64_t *v30 = v37;
LABEL_25:
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t PromptLookupLanguageModel.commonTokenCountFromNodes(_:_:)(unint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t result = 0;
  char v6 = 0;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = v7 + 32;
  unint64_t v9 = *(void *)(v7 + 16);
  while (a1 < v9)
  {
    if (v6) {
      return result;
    }
    if (a2 >= v9) {
      goto LABEL_15;
    }
    uint64_t v10 = (unint64_t *)(v8 + 40 * a1);
    unint64_t v11 = *v10;
    int v12 = *((unsigned __int8 *)v10 + 8);
    char v13 = (unint64_t *)(v8 + 40 * a2);
    unint64_t v14 = *v13;
    char v6 = *((unsigned char *)v13 + 8);
    int v15 = *((unsigned __int8 *)v13 + 24);
    if (*(unsigned char *)(v8 + 40 * a1 + 24))
    {
      if (!v15) {
        return result;
      }
    }
    else
    {
      if (*(void *)(v8 + 40 * a1 + 16) != *(void *)(v8 + 40 * a2 + 16)) {
        LOBYTE(v15) = 1;
      }
      if (v15) {
        return result;
      }
    }
    if (__OFADD__(result, 1)) {
      goto LABEL_16;
    }
    ++result;
    a1 = v11;
    a2 = v14;
    if (v12) {
      return result;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

float protocol witness for LogitCollection.subscript.getter in conformance PromptLookupLanguageModel.OneTokenLogitCollection(uint64_t a1)
{
  float result = -65504.0;
  if (*v1 == a1) {
    return 0.0;
  }
  return result;
}

uint64_t closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 32);
    if (*(void *)(v6 + 16) > a2) {
      return *(unsigned __int8 *)(v6 + 40 * a2 + 57);
    }
  }
  __break(1u);
  return result;
}

uint64_t PromptLookupLanguageModel.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PromptLookupLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance PromptLookupLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  v7[12] = a2;
  v7[13] = v6;
  v7[11] = a1;
  return MEMORY[0x270FA2498](PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance PromptLookupLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return PromptLookupLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(uint64_t a1, unint64_t a2)
{
  return closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(a1, a2, v2);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t, void))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_5:
    uint64_t v13 = 8 * v12;
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + v13);
    uint64_t result = a2(v14, *(void *)(*(void *)(a1 + 56) + v13));
    if (result) {
      goto LABEL_25;
    }
  }
  int64_t v15 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v15 >= v8) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  ++v10;
  if (v16) {
    goto LABEL_22;
  }
  int64_t v10 = v15 + 1;
  if (v15 + 1 >= v8) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v10);
  if (v16) {
    goto LABEL_22;
  }
  int64_t v10 = v15 + 2;
  if (v15 + 2 >= v8) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v10);
  if (v16) {
    goto LABEL_22;
  }
  int64_t v10 = v15 + 3;
  if (v15 + 3 >= v8) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v10);
  if (v16)
  {
LABEL_22:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v10 << 6);
    goto LABEL_5;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v8)
  {
LABEL_24:
    uint64_t v14 = 0;
LABEL_25:
    swift_release();
    return v14;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PromptLookupLanguageModel()
{
  return self;
}

uint64_t method lookup function for PromptLookupLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PromptLookupLanguageModel);
}

uint64_t dispatch thunk of PromptLookupLanguageModel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void *type metadata accessor for PromptLookupLanguageModel.OneTokenLogitCollection()
{
  return &unk_270BD43D8;
}

uint64_t initializeWithCopy for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  uint64_t v4 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptLookupLanguageModel.NodeState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptLookupLanguageModel.NodeState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptLookupLanguageModel.NodeState()
{
  return &type metadata for PromptLookupLanguageModel.NodeState;
}

TokenGenerationInference::SamplingDecoderPrompt __swiftcall SamplingDecoderPrompt.init(queryTokens:promptModulesTokens:healingOverflowTokens:)(Swift::OpaquePointer queryTokens, Swift::OpaquePointer promptModulesTokens, Swift::OpaquePointer healingOverflowTokens)
{
  v3->_rawValue = queryTokens._rawValue;
  v3[1]._rawValue = promptModulesTokens._rawValue;
  v3[2]._rawValue = healingOverflowTokens._rawValue;
  result.healingOverflowTokens = healingOverflowTokens;
  result.promptModulesTokens = promptModulesTokens;
  result.queryTokens = queryTokens;
  return result;
}

void SamplingDecoderPrompt.description.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v23 = v2;
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x263F8D6C8];
    while (1)
    {
      uint64_t v7 = *(void *)(v1 + 8 * v5 + 32);
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0xD000000000000016;
      v24._object = (void *)0x800000025FB6D390;
      v8._countAndFlagsBits = MEMORY[0x261205560](v7, v6);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 0x203A746E756F6320;
      v9._object = (void *)0xE800000000000000;
      String.append(_:)(v9);
      uint64_t v10 = *(void *)(v7 + 16);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 0xD000000000000016;
      v12._object = (void *)0x800000025FB6D390;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 32;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      BOOL v14 = __OFADD__(v4, v10);
      v4 += v10;
      if (v14) {
        break;
      }
      if (v3 == ++v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v23;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_7:
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    strcpy((char *)&v24, "query tokens: ");
    HIBYTE(v24._object) = -18;
    uint64_t v15 = swift_bridgeObjectRetain();
    v16._countAndFlagsBits = MEMORY[0x261205560](v15, MEMORY[0x263F8D6C8]);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x203A746E756F6320;
    v17._object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    uint64_t v18 = *(void *)(v2 + 16);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    if (!__OFADD__(v4, v18))
    {
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 0xD000000000000013;
      v22._object = (void *)0x800000025FB6D3B0;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
}

uint64_t destroy for SamplingDecoderPrompt()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SamplingDecoderPrompt(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SamplingDecoderPrompt(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SamplingDecoderPrompt(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingDecoderPrompt(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingDecoderPrompt(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)TokenGenerationInference::SamplingDecoderPrompt result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)TokenGenerationInference::SamplingDecoderPrompt result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingDecoderPrompt()
{
  return &type metadata for SamplingDecoderPrompt;
}

uint64_t dispatch thunk of SamplingDecoder.append(prompt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of SamplingDecoder.decodeNextChunk()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 16) + **(int **)(a2 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:);
  return v7(a1, a2);
}

unsigned char *storeEnumTagSinglePayload for TokenGenerationSamplingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *TokenGenerationInference::SamplingDecoderPrompt result = a2;
        return result;
      case 2:
        *(_WORD *)TokenGenerationInference::SamplingDecoderPrompt result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)TokenGenerationInference::SamplingDecoderPrompt result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *TokenGenerationInference::SamplingDecoderPrompt result = 0;
      break;
    case 2:
      *(_WORD *)TokenGenerationInference::SamplingDecoderPrompt result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25FB29DFCLL);
    case 4:
      *(_DWORD *)TokenGenerationInference::SamplingDecoderPrompt result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationSamplingError()
{
  return &type metadata for TokenGenerationSamplingError;
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 16))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.draftEmptyResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.draftEarlyReturn.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

Swift::Void __swiftcall SpeculativeDecoderPerformanceMeasurement.printToOSLogForLLMWheel()()
{
  char v1 = v0[8];
  char v2 = v0[48];
  char v53 = v0[80];
  int v54 = v0[104];
  int v55 = v0[105];
  uint64_t v57 = 0;
  unint64_t v58 = 0xE000000000000000;
  if ((v1 & 1) == 0)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 44;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 0xD000000000000020;
    v5._object = (void *)0x800000025FB6D5E0;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 44;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000021;
  v8._object = (void *)0x800000025FB6D3D0;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 44;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000022;
  v11._object = (void *)0x800000025FB6D400;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(39);
  v12._countAndFlagsBits = 0xD000000000000024;
  v12._object = (void *)0x800000025FB6D430;
  String.append(_:)(v12);
  Float.write<A>(to:)();
  v13._countAndFlagsBits = 44;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
    _StringGuts.grow(_:)(38);
    v15._countAndFlagsBits = 0xD000000000000023;
    v15._object = (void *)0x800000025FB6D5B0;
    String.append(_:)(v15);
    Float.write<A>(to:)();
    v16._countAndFlagsBits = 44;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(36);
  v18._object = (void *)0x800000025FB6D460;
  v18._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v18);
  Float.write<A>(to:)();
  v19._countAndFlagsBits = 44;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 44;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD00000000000001ALL;
  v23._object = (void *)0x800000025FB6D490;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 44;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD00000000000002BLL;
  v26._object = (void *)0x800000025FB6D4B0;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
    _StringGuts.grow(_:)(36);
    v27._object = (void *)0x800000025FB6D580;
    v27._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v27);
    Double.write<A>(to:)();
    v28._countAndFlagsBits = 44;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(37);
  v30._countAndFlagsBits = 0xD000000000000022;
  v30._object = (void *)0x800000025FB6D4E0;
  String.append(_:)(v30);
  Double.write<A>(to:)();
  v31._countAndFlagsBits = 44;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(38);
  v33._countAndFlagsBits = 0xD000000000000023;
  v33._object = (void *)0x800000025FB6D510;
  String.append(_:)(v33);
  Double.write<A>(to:)();
  v34._countAndFlagsBits = 44;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 44;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x3D616D6D6167;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0xD000000000000015;
  v56._object = (void *)0x800000025FB6D540;
  if (v54) {
    uint64_t v39 = 1702195828;
  }
  else {
    uint64_t v39 = 0x65736C6166;
  }
  if (v54) {
    unint64_t v40 = 0xE400000000000000;
  }
  else {
    unint64_t v40 = 0xE500000000000000;
  }
  unint64_t v41 = v40;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 44;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0xD000000000000013;
  v56._object = (void *)0x800000025FB6D560;
  if (v55) {
    uint64_t v43 = 1702195828;
  }
  else {
    uint64_t v43 = 0x65736C6166;
  }
  if (v55) {
    unint64_t v44 = 0xE400000000000000;
  }
  else {
    unint64_t v44 = 0xE500000000000000;
  }
  unint64_t v45 = v44;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  if (one-time initialization token for speculativeDecode != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Log.speculativeDecode);
  uint64_t v48 = v57;
  unint64_t v47 = v58;
  swift_bridgeObjectRetain();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    v56._countAndFlagsBits = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, &v56._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25FA51000, v49, v50, "%s", v51, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v52, -1, -1);
    MEMORY[0x261206F80](v51, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  if (a2)
  {
    uint64_t v45 = *(void *)(a2 + 40);
    if (a3)
    {
LABEL_3:
      uint64_t v44 = *(void *)(a3 + 40);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v45 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v44 = 0;
LABEL_6:
  uint64_t v43 = *(void *)(a4 + 40);
  uint64_t v10 = a5[3];
  uint64_t v11 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v10);
  float v12 = (*(float (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  uint64_t v13 = a5[3];
  uint64_t v14 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v13);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  uint64_t v15 = a5[3];
  uint64_t v16 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v15);
  float v17 = (*(float (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v18);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  uint64_t v21 = a5[3];
  uint64_t v20 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v21);
  (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
  uint64_t v40 = v22;
  double v23 = 0.0;
  double v24 = 0.0;
  if (a2)
  {
    swift_beginAccess();
    swift_retain();
    double v25 = (double)Duration.components.getter();
    Duration.components.getter();
    uint64_t v27 = v26;
    swift_release();
    double v24 = (double)v27 * 1.0e-18 + v25;
  }
  if (a3)
  {
    swift_beginAccess();
    swift_retain();
    double v28 = (double)Duration.components.getter();
    Duration.components.getter();
    uint64_t v30 = v29;
    swift_release();
    double v23 = (double)v30 * 1.0e-18 + v28;
  }
  swift_beginAccess();
  double v31 = (double)Duration.components.getter();
  Duration.components.getter();
  double v33 = (double)v32 * 1.0e-18 + v31;
  uint64_t v34 = a5[3];
  uint64_t v35 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v34);
  LOBYTE(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 40))(v34, v35);
  uint64_t v36 = a5[3];
  uint64_t v37 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v36);
  char v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 48))(v36, v37);
  swift_release();
  swift_release();
  swift_release();
  *(void *)a6 = v45;
  *(unsigned char *)(a6 + 8) = a2 == 0;
  *(void *)(a6 + 16) = v44;
  *(void *)(a6 + 24) = v43;
  *(void *)(a6 + 32) = a1;
  *(float *)(a6 + 40) = v12;
  *(_DWORD *)(a6 + 44) = v42;
  *(unsigned char *)(a6 + 48) = BYTE4(v42) & 1;
  *(float *)(a6 + 52) = v17;
  *(void *)(a6 + 56) = v41;
  *(void *)(a6 + 64) = v40;
  *(double *)(a6 + 72) = v24;
  *(unsigned char *)(a6 + 80) = a2 == 0;
  *(double *)(a6 + 88) = v23;
  *(double *)(a6 + 96) = v33;
  *(unsigned char *)(a6 + 104) = v34 & 1;
  *(unsigned char *)(a6 + 105) = v38 & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a5);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.getter()
{
  return *(void *)v0;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftSteps.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftSteps.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftSteps.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.getter()
{
  return *(float *)(v0 + 40);
}

void SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.setter(float a1)
{
  *(float *)(v1 + 40) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

unint64_t SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.getter()
{
  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 44) = result;
  *(unsigned char *)(v1 + 48) = BYTE4(result) & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.getter()
{
  return *(float *)(v0 + 52);
}

void SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.setter(float a1)
{
  *(float *)(v1 + 52) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

double SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.getter()
{
  return *(double *)(v0 + 88);
}

void SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.setter(double a1)
{
  *(double *)(v1 + 88) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

double SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.getter()
{
  return *(double *)(v0 + 96);
}

void SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.setter(double a1)
{
  *(double *)(v1 + 96) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftEmptyResponse.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftEmptyResponse.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 104) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftEmptyResponse.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftEarlyReturn.getter()
{
  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftEarlyReturn.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 105) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftEarlyReturn.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

void __swiftcall SpeculativeDecoderPerformanceMeasurement.init(tinyModelInferenceCallCount:draftModelInferenceCallCount:targetModelInferenceCallCount:draftSteps:draftTokenAcceptanceRateInPercent:tinyTokenAcceptanceRateInPercent:speculationSuccessRateInPercent:numberOfDraftOutputTokens:totalNumberOutputTokens:tinyModelTotalLatency:draftModelTotalLatency:targetModelTotalLatency:draftEmptyResponse:draftEarlyReturn:)(TokenGenerationInference::SpeculativeDecoderPerformanceMeasurement *__return_ptr retstr, Swift::Int_optional tinyModelInferenceCallCount, Swift::Int draftModelInferenceCallCount, Swift::Int targetModelInferenceCallCount, Swift::Int draftSteps, Swift::Float draftTokenAcceptanceRateInPercent, Swift::Float_optional *tinyTokenAcceptanceRateInPercent, Swift::Float speculationSuccessRateInPercent, Swift::Int numberOfDraftOutputTokens, Swift::Int totalNumberOutputTokens, Swift::Double_optional tinyModelTotalLatency, Swift::Double draftModelTotalLatency, Swift::Double targetModelTotalLatency, Swift::Bool draftEmptyResponse, Swift::Bool draftEarlyReturn)
{
  retstr->tinyModelInferenceCallCount.value = tinyModelInferenceCallCount.value;
  retstr->tinyModelInferenceCallCount.is_nil = tinyModelInferenceCallCount.is_nil;
  retstr->draftModelInferenceCallCount = draftModelInferenceCallCount;
  retstr->targetModelInferenceCallCount = targetModelInferenceCallCount;
  retstr->draftSteps = draftSteps;
  retstr->draftTokenAcceptanceRateInPercent = draftTokenAcceptanceRateInPercent;
  LODWORD(retstr->tinyTokenAcceptanceRateInPercent.value) = tinyTokenAcceptanceRateInPercent;
  retstr->tinyTokenAcceptanceRateInPercent.is_nil = BYTE4(tinyTokenAcceptanceRateInPercent) & 1;
  retstr->speculationSuccessRateInPercent = speculationSuccessRateInPercent;
  retstr->numberOfDraftOutputTokens = numberOfDraftOutputTokens;
  retstr->totalNumberOutputTokens = totalNumberOutputTokens;
  retstr->tinyModelTotalLatency.value = *(Swift::Double *)&tinyModelTotalLatency.is_nil;
  retstr->tinyModelTotalLatency.is_nil = v15 & 1;
  retstr->draftModelTotalLatency = tinyModelTotalLatency.value;
  retstr->targetModelTotalLatency = draftModelTotalLatency;
  retstr->draftEmptyResponse = v16;
  retstr->draftEarlyReturn = v17;
}

Swift::Void __swiftcall SpeculativeDecoderPerformanceMeasurement.printMetrics()()
{
  char v38 = v0[48];
  char v39 = v0[80];
  uint64_t v1 = MEMORY[0x263F8D310];
  if ((v0[8] & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    _StringGuts.grow(_:)(62);
    v3._countAndFlagsBits = 0xD000000000000035;
    v3._object = (void *)0x800000025FB6D8E0;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 0x2E73656D697420;
    v5._object = (void *)0xE700000000000000;
    String.append(_:)(v5);
    *(void *)(v2 + 56) = v1;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(63);
  v7._countAndFlagsBits = 0xD000000000000036;
  v7._object = (void *)0x800000025FB6D610;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x2E73656D697420;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  *(void *)(v6 + 56) = v1;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(64);
  v11._countAndFlagsBits = 0xD000000000000037;
  v11._object = (void *)0x800000025FB6D650;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x2E73656D697420;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  *(void *)(v10 + 56) = v1;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(70);
  v15._countAndFlagsBits = 0xD000000000000041;
  v15._object = (void *)0x800000025FB6D690;
  String.append(_:)(v15);
  Float.write<A>(to:)();
  v16._countAndFlagsBits = 3024160;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  *(void *)(v14 + 56) = v1;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_25FB61DF0;
    _StringGuts.grow(_:)(75);
    v18._countAndFlagsBits = 0xD000000000000046;
    v18._object = (void *)0x800000025FB6D890;
    String.append(_:)(v18);
    Float.write<A>(to:)();
    v19._countAndFlagsBits = 3024160;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    *(void *)(v17 + 56) = v1;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(55);
  v21._countAndFlagsBits = 0xD000000000000032;
  v21._object = (void *)0x800000025FB6D6E0;
  String.append(_:)(v21);
  Float.write<A>(to:)();
  v22._countAndFlagsBits = 3024160;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  *(void *)(v20 + 56) = v1;
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(89);
  v24._countAndFlagsBits = 0xD000000000000020;
  v24._object = (void *)0x800000025FB6D720;
  String.append(_:)(v24);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0x800000025FB6D750;
  v26._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v26);
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD000000000000022;
  v28._object = (void *)0x800000025FB6D770;
  String.append(_:)(v28);
  *(void *)(v23 + 56) = v1;
  *(void *)(v23 + 32) = 0;
  *(void *)(v23 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_25FB61DF0;
    _StringGuts.grow(_:)(70);
    v30._countAndFlagsBits = 0xD000000000000042;
    v30._object = (void *)0x800000025FB6D840;
    String.append(_:)(v30);
    Double.write<A>(to:)();
    v31._countAndFlagsBits = 29472;
    v31._object = (void *)0xE200000000000000;
    String.append(_:)(v31);
    *(void *)(v29 + 56) = v1;
    *(void *)(v29 + 32) = 0;
    *(void *)(v29 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(71);
  v33._countAndFlagsBits = 0xD000000000000043;
  v33._object = (void *)0x800000025FB6D7A0;
  String.append(_:)(v33);
  Double.write<A>(to:)();
  v34._countAndFlagsBits = 29472;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  *(void *)(v32 + 56) = v1;
  *(void *)(v32 + 32) = 0;
  *(void *)(v32 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_25FB61DF0;
  _StringGuts.grow(_:)(72);
  v36._countAndFlagsBits = 0xD000000000000044;
  v36._object = (void *)0x800000025FB6D7F0;
  String.append(_:)(v36);
  Double.write<A>(to:)();
  v37._countAndFlagsBits = 29472;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  *(void *)(v35 + 56) = v1;
  *(void *)(v35 + 32) = 0;
  *(void *)(v35 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyModelInferenceCallCount.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)v0;
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.draftModelInferenceCallCount.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.targetModelInferenceCallCount.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 24);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.draftSteps.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 32);
}

float protocol witness for SpeculativeDecodingMetricsProtocol.draftTokenAcceptanceRateInPercent.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(float *)(v0 + 40);
}

unint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

float protocol witness for SpeculativeDecodingMetricsProtocol.speculationSuccessRateInPercent.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(float *)(v0 + 52);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.numberOfDraftOutputTokens.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 56);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.totalNumberOutputTokens.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyModelTotalLatency.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(void *)(v0 + 72);
}

double protocol witness for SpeculativeDecodingMetricsProtocol.draftModelTotalLatency.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(double *)(v0 + 88);
}

double protocol witness for SpeculativeDecodingMetricsProtocol.targetModelTotalLatency.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(double *)(v0 + 96);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.draftEmptyResponse.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.draftEarlyReturn.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return *(unsigned __int8 *)(v0 + 105);
}

__n128 __swift_memcpy106_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 90) = *(long long *)((char *)a2 + 90);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpeculativeDecoderPerformanceMeasurement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeculativeDecoderPerformanceMeasurement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeculativeDecoderPerformanceMeasurement()
{
  return &type metadata for SpeculativeDecoderPerformanceMeasurement;
}

void __swiftcall DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)(TokenGenerationInference::DraftingBehavior *__return_ptr retstr, Swift::Int draftSteps, Swift::Bool isAdaptive, Swift::Int treeFactor, Swift::Float_optional *softMatchTolerance, Swift::Bool speculativeSampling, Swift::Bool earlyReturn, Swift::Float_optional *earlyReturnProbabilityThreshold)
{
  if (treeFactor < 1)
  {
    __break(1u);
  }
  else
  {
    retstr->draftSteps = draftSteps;
    retstr->isAdaptive = isAdaptive;
    retstr->treeFactor = treeFactor;
    LODWORD(retstr->softMatchTolerance.value) = softMatchTolerance;
    retstr->softMatchTolerance.is_nil = BYTE4(softMatchTolerance) & 1;
    retstr->speculativeSampling = speculativeSampling & BYTE4(softMatchTolerance) & 1;
    retstr->earlyReturn = earlyReturn;
    LODWORD(retstr->earlyReturnProbabilityThreshold.value) = earlyReturnProbabilityThreshold;
    retstr->earlyReturnProbabilityThreshold.is_nil = BYTE4(earlyReturnProbabilityThreshold) & 1;
  }
}

void __swiftcall DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)(TokenGenerationInference::DraftingBehavior *__return_ptr retstr, Swift::Int draftSteps, Swift::Bool isAdaptive, Swift::Int treeFactor, Swift::Float_optional *softMatchTolerance, Swift::Bool speculativeSampling, Swift::Bool earlyReturn)
{
  if (treeFactor < 1)
  {
    __break(1u);
  }
  else
  {
    retstr->draftSteps = draftSteps;
    retstr->isAdaptive = isAdaptive;
    retstr->treeFactor = treeFactor;
    LODWORD(retstr->softMatchTolerance.value) = softMatchTolerance;
    retstr->softMatchTolerance.is_nil = BYTE4(softMatchTolerance) & 1;
    retstr->speculativeSampling = speculativeSampling & BYTE4(softMatchTolerance) & 1;
    retstr->earlyReturn = earlyReturn;
    retstr->earlyReturnProbabilityThreshold.value = 0.0;
    retstr->earlyReturnProbabilityThreshold.is_nil = 1;
  }
}

uint64_t DraftingBehavior.draftSteps.getter()
{
  return *(void *)v0;
}

uint64_t DraftingBehavior.isAdaptive.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t DraftingBehavior.treeFactor.getter()
{
  return *(void *)(v0 + 16);
}

unint64_t DraftingBehavior.softMatchTolerance.getter()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t DraftingBehavior.speculativeSampling.getter()
{
  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t DraftingBehavior.earlyReturn.getter()
{
  return *(unsigned __int8 *)(v0 + 30);
}

unint64_t DraftingBehavior.earlyReturnProbabilityThreshold.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

unint64_t DraftingBehavior.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6574537466617264;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6974706164417369;
      break;
    case 2:
      unint64_t result = 0x7463614665657274;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x746552796C726165;
      break;
    case 6:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance DraftingBehavior.CodingKeys()
{
  return DraftingBehavior.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DraftingBehavior.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DraftingBehavior.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DraftingBehavior.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DraftingBehavior.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DraftingBehavior.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DraftingBehavior.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  Swift::String v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v20 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v18 = *(unsigned int *)(v1 + 24);
  uint64_t v19 = v9;
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 28);
  int v16 = *(unsigned __int8 *)(v1 + 29);
  int v17 = v9;
  int v15 = *(unsigned __int8 *)(v1 + 30);
  uint64_t v14 = *(unsigned int *)(v1 + 32);
  int v13 = *(unsigned __int8 *)(v1 + 36);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v10 = v17;
    char v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v26 = 3;
    char v22 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v25 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v23 = 6;
    char v21 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t DraftingBehavior.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DraftingBehavior.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v26 = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    char v25 = 1;
    char v11 = KeyedDecodingContainer.decode(_:forKey:)();
    char v24 = 2;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    char v23 = 3;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v22 = 4;
    int v17 = KeyedDecodingContainer.decode(_:forKey:)();
    char v21 = 5;
    int v16 = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = 6;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *(void *)a2 = v10;
    *(unsigned char *)(a2 + 8) = v11 & 1;
    *(void *)(a2 + 16) = v19;
    char v14 = BYTE4(v18);
    *(_DWORD *)(a2 + 24) = v18;
    *(unsigned char *)(a2 + 28) = v14 & 1;
    *(unsigned char *)(a2 + 29) = v17 & 1;
    *(unsigned char *)(a2 + 30) = v16 & 1;
    *(_DWORD *)(a2 + 32) = v13;
    *(unsigned char *)(a2 + 36) = BYTE4(v13) & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DraftingBehavior@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DraftingBehavior.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DraftingBehavior(void *a1)
{
  return DraftingBehavior.encode(to:)(a1);
}

uint64_t specialized static DraftingBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (*(void *)a1 != *(void *)a2
    || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0
    || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    return result;
  }
  int v4 = *(unsigned __int8 *)(a1 + 29);
  int v5 = *(unsigned __int8 *)(a2 + 29);
  if (*(unsigned char *)(a1 + 28))
  {
    if (!*(unsigned char *)(a2 + 28)) {
      return 0;
    }
    uint64_t result = 0;
    if (v4 != v5) {
      return result;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 28)) {
      return 0;
    }
    uint64_t result = 0;
    if (*(float *)(a1 + 24) != *(float *)(a2 + 24) || ((v4 ^ v5) & 1) != 0) {
      return result;
    }
  }
  if (((*(unsigned __int8 *)(a1 + 30) ^ *(unsigned __int8 *)(a2 + 30)) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 36))
    {
      if (*(unsigned char *)(a2 + 36)) {
        return 1;
      }
    }
    else
    {
      if (*(float *)(a1 + 32) == *(float *)(a2 + 32)) {
        char v6 = *(unsigned char *)(a2 + 36);
      }
      else {
        char v6 = 1;
      }
      if ((v6 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

__n128 __swift_memcpy37_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 29) = *(void *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DraftingBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 37)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DraftingBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DraftingBehavior()
{
  return &type metadata for DraftingBehavior;
}

uint64_t type metadata accessor for TokenTreeNode()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DraftingBehavior.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB2C404);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DraftingBehavior.CodingKeys()
{
  return &unk_270BD47A0;
}

uint64_t specialized DraftingBehavior.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6574537466617264 && a2 == 0xEA00000000007370
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974706164417369 && a2 == 0xEA00000000006576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7463614665657274 && a2 == 0xEA0000000000726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000025FB6D960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FB6CB20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746552796C726165 && a2 == 0xEB000000006E7275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000025FB6D980)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized Sequence<>.min()(uint64_t result)
{
  uint64_t v1 = result + 56;
  char v2 = *(unsigned char *)(result + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(result + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v17 = *(void *)(result + 64);
    if (v17)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v17 = *(void *)(result + 72);
      if (v17)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v17 = *(void *)(result + 80);
        if (v17)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v17 = *(void *)(result + 88);
          if (v17)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v17 = *(void *)(result + 96);
            if (!v17) {
              goto LABEL_43;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  uint64_t v10 = *(void *)(result + 48);
  __n128 result = *(void *)(v10 + 8 * v7);
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_7:
    uint64_t v13 = *(void *)(v10 + 8 * v12);
    if (v13 < result) {
      __n128 result = v13;
    }
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v14);
  ++v6;
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 1;
  if (v14 + 1 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 2;
  if (v14 + 2 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15) {
    goto LABEL_25;
  }
  uint64_t v6 = v14 + 3;
  if (v14 + 3 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v9) {
    return result;
  }
  unint64_t v15 = *(void *)(v1 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v9) {
      return result;
    }
    unint64_t v15 = *(void *)(v1 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_43:
  uint64_t v18 = 0;
  uint64_t v19 = 6;
  if (v9 > 6) {
    uint64_t v19 = v9;
  }
  uint64_t v20 = v19 - 6;
  while (v20 != v18)
  {
    unint64_t v17 = *(void *)(result + 104 + 8 * v18++);
    if (v17)
    {
      uint64_t v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

void *SpeculativeLanguageModel.__allocating_init(target:speculative:stepCount:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a2, v7);
  uint64_t v10 = specialized SpeculativeLanguageModel.__allocating_init(target:speculative:stepCount:)(a1, v9, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v10;
}

uint64_t SpeculativeLanguageModel.targetLM.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, a1);
}

uint64_t SpeculativeLanguageModel.speculativeLM.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeterministicLanguageModelProtocol(v1 + 56, a1);
}

uint64_t SpeculativeLanguageModel.stepCount.getter()
{
  return *(void *)(v0 + 96);
}

void *SpeculativeLanguageModel.init(target:speculative:stepCount:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a2, v7);
  MEMORY[0x270FA5388](v9, v9);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized SpeculativeLanguageModel.init(target:speculative:stepCount:)(a1, (uint64_t)v11, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v13;
}

uint64_t SpeculativeLanguageModel.startNode.getter()
{
  swift_beginAccess();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  uint64_t v4 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v3, v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v1);
  return v7;
}

uint64_t SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)
                                                + async function pointer to specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return v7(a1, a2);
}

Swift::Int __swiftcall SpeculativeLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v4 = v3;
  BOOL v5 = isPrompt;
  swift_beginAccess();
  uint64_t v8 = v3[5];
  uint64_t v9 = v3[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 2), v8);
  uint64_t v10 = (*(uint64_t (**)(Swift::Int, Swift::Int, BOOL, uint64_t, uint64_t))(v9 + 16))(forPreviousNode, token, v5, v8, v9);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v11 = v3[13];
  if (*(void *)(v11 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(forPreviousNode), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v15 = v4[10];
    uint64_t v16 = v4[11];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v4 + 7), v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, Swift::Int, BOOL, uint64_t, uint64_t))(v16 + 16))(v14, token, v5, v15, v16);
    swift_endAccess();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = v4[13];
    v4[13] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v10, isUniquelyReferenced_nonNull_native);
    v4[13] = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v10;
  }
  else
  {
    Swift::Int result = swift_endAccess();
    __break(1u);
  }
  return result;
}

uint64_t SpeculativeLanguageModel.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeculativeLanguageModel.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance SpeculativeLanguageModel()
{
  uint64_t v1 = (void *)*v0;
  swift_beginAccess();
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v5 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v4, v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v2);
  return v8;
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance SpeculativeLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return SpeculativeLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:isPrompt:) in conformance SpeculativeLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)
                                                + async function pointer to specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return v7(a1, a2);
}

void *specialized SpeculativeLanguageModel.init(target:speculative:stepCount:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  v18[3] = a5;
  v18[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a2, a5);
  a4[14] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, (uint64_t)(a4 + 2));
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v18, (uint64_t)(a4 + 7));
  a4[12] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  *(void *)(inited + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a5, a6);
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  a4[13] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return a4;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de88Inference24SpeculativeLanguageModelC16nextTokensLogits5nodes10presampler8isPromptSayAA15gh42_pGSaySiG_AA0N10Presampler_pSgSbtYaKFAaH_pV6XEfU0_AG0lmN0CSDySiAgH_pGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return v4;
  }
  uint64_t v32 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v4 = v32;
  uint64_t v8 = (uint64_t *)(a1 + 32);
  uint64_t v9 = (uint64_t *)(a2 + 112);
  while (1)
  {
    uint64_t v11 = *v8++;
    uint64_t v10 = v11;
    swift_beginAccess();
    uint64_t v12 = *v9;
    if (*(void *)(*v9 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v14 & 1) != 0))
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v12 + 56) + 40 * v13, (uint64_t)&v26);
    }
    else
    {
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
    }
    unint64_t result = swift_endAccess();
    if (*((void *)&v27 + 1))
    {
      outlined init with take of LogitCollection(&v26, (uint64_t)v29);
      goto LABEL_12;
    }
    if (!*(void *)(a3 + 16)) {
      break;
    }
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v16 & 1) == 0) {
      goto LABEL_17;
    }
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(a3 + 56) + 40 * result, (uint64_t)v29);
    outlined destroy of DataStreamState?((uint64_t)&v26, &demangling cache variable for type metadata for LogitCollection?);
LABEL_12:
    uint64_t v32 = v4;
    unint64_t v18 = *(void *)(v4 + 16);
    unint64_t v17 = *(void *)(v4 + 24);
    if (v18 >= v17 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    }
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    MEMORY[0x270FA5388](v21, v21);
    char v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v24 + 16))(v23);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, (uint64_t)v23, &v32, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    uint64_t v4 = v32;
    if (!--v3) {
      return v4;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de88Inference24SpeculativeLanguageModelC16nextTokensLogits5nodes10presampler8isPromptSayAA15gh42_pGSaySiG_AA0N10Presampler_pSgSbtYaKFAaH_pV5XEfU_AG0lmN0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v29;
  uint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = (uint64_t *)(a2 + 112);
  while (1)
  {
    uint64_t v9 = *v6++;
    uint64_t v8 = v9;
    swift_beginAccess();
    uint64_t v10 = *v7;
    if (*(void *)(*v7 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v12 & 1) != 0))
    {
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v10 + 56) + 40 * v11, (uint64_t)&v23);
    }
    else
    {
      uint64_t v25 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
    }
    uint64_t result = swift_endAccess();
    if (!*((void *)&v24 + 1)) {
      break;
    }
    outlined init with take of LogitCollection(&v23, (uint64_t)v26);
    uint64_t v29 = v3;
    unint64_t v15 = *(void *)(v3 + 16);
    unint64_t v14 = *(void *)(v3 + 24);
    if (v15 >= v14 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    }
    uint64_t v16 = v27;
    uint64_t v17 = v28;
    uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
    MEMORY[0x270FA5388](v18, v18);
    uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v21 + 16))(v20);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v20, &v29, v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t v3 = v29;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  v3[65] = v2;
  v3[63] = a1;
  v3[64] = a2;
  return MEMORY[0x270FA2498](specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:), 0, 0);
}

uint64_t specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 480) = MEMORY[0x263F8EE88];
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 520) + 112;
    uint64_t v5 = (uint64_t *)(v1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      swift_beginAccess();
      uint64_t v8 = *(void *)v4;
      if (*(void *)(*(void *)v4 + 16)
        && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v8 + 56) + 40 * v9, v0 + 96);
      }
      else
      {
        *(void *)(v0 + 128) = 0;
        *(_OWORD *)(v0 + 96) = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_endAccess();
      uint64_t v11 = *(void *)(v0 + 120);
      outlined destroy of DataStreamState?(v0 + 96, &demangling cache variable for type metadata for LogitCollection?);
      if (!v11) {
        specialized Set._Variant.insert(_:)(v38, v6);
      }
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 480);
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence<>.min()(v12);
  char v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v27 = *(void *)(v0 + 520);
    uint64_t v28 = *(void *)(v0 + 504);
    swift_retain();
    uint64_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de88Inference24SpeculativeLanguageModelC16nextTokensLogits5nodes10presampler8isPromptSayAA15gh42_pGSaySiG_AA0N10Presampler_pSgSbtYaKFAaH_pV5XEfU_AG0lmN0CTf1cn_nTf4ng_n(v28, v27);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v30(v29);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 520);
    swift_beginAccess();
    uint64_t v17 = *(void *)(v16 + 104);
    if (!*(void *)(v17 + 16)) {
      goto LABEL_28;
    }
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v19 & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v20 = *(void *)(v0 + 520);
    uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
    swift_endAccess();
    uint64_t v22 = *(void *)(v20 + 96);
    *(void *)(v0 + 528) = v22;
    if (v22 < 0)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t result = swift_endAccess();
      __break(1u);
      return result;
    }
    if (v22)
    {
      swift_beginAccess();
      *(void *)(v0 + 552) = 0;
      *(void *)(v0 + 544) = v21;
      *(void *)(v0 + 536) = v13;
      if (*(void *)(v0 + 528))
      {
        outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v0 + 520) + 56, v0 + 16);
        uint64_t v23 = *(void *)(v0 + 40);
        uint64_t v24 = *(void *)(v0 + 48);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v23);
        *(void *)(v0 + 160) = &type metadata for ArgmaxPresampler;
        *(void *)(v0 + 168) = &protocol witness table for ArgmaxPresampler;
        uint64_t v25 = (void *)swift_task_alloc();
        *(void *)(v0 + 560) = v25;
        void *v25 = v0;
        v25[1] = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
        return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 216, v21, v0 + 136, 0, v23, v24);
      }
      goto LABEL_27;
    }
    *(void *)(v0 + 576) = v2;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v38[0] = (uint64_t)v31;
    specialized MutableCollection<>.sort(by:)(v38);
    uint64_t v32 = *(void *)(v0 + 520);
    swift_bridgeObjectRelease();
    uint64_t v33 = v38[0];
    *(void *)(v0 + 584) = v38[0];
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v32 + 16, v0 + 56);
    uint64_t v34 = *(void *)(v0 + 80);
    uint64_t v35 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v34);
    Swift::String v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v36;
    *Swift::String v36 = v0;
    v36[1] = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
    uint64_t v37 = *(void *)(v0 + 512);
    return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v33, v37, v34, v35);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    outlined destroy of DataStreamState?(v2 + 136, &demangling cache variable for type metadata for LogitPresampler?);
    uint64_t v3 = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];
  uint64_t v49;
  uint64_t v50;

  uint64_t v49 = v0;
  uint64_t v1 = *(void *)(v0 + 544);
  unint64_t v47 = *(void *)(v0 + 536);
  uint64_t v2 = *(void **)(v0 + 520);
  uint64_t v45 = (void *)(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  swift_beginAccess();
  uint64_t v7 = v2[10];
  uint64_t v6 = v2[11];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 7), v7);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 16))(v1, v5, 0, v7, v6);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v8 = v2[5];
  unint64_t v9 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v8);
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v9 + 16))(v47, v5, 0, v8, v9);
  swift_endAccess();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v2[13];
  *(void *)(v0 + 472) = v12;
  v2[13] = 0x8000000000000000;
  char v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  char v15 = *(void *)(v12 + 16);
  uint64_t v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v18 = v13;
  if (*(void *)(v12 + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v18 & 1) != (v19 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    char v14 = result;
  }
  uint64_t v20 = *(void **)(v0 + 472);
  if ((v18 & 1) == 0)
  {
    v20[(v14 >> 6) + 8] |= 1 << v14;
    uint64_t v21 = 8 * v14;
    *(void *)(v20[6] + v21) = v10;
    *(void *)(v20[7] + v21) = v46;
    uint64_t v22 = v20[2];
    uint64_t v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v20[2] = v24;
      goto LABEL_14;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  *(void *)(v20[7] + 8 * v14) = v46;
LABEL_14:
  uint64_t v25 = *(void *)(v0 + 520);
  *(void *)(v25 + 104) = v20;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  long long v26 = *(void *)(v25 + 112);
  if (*(void *)(v26 + 16) && (uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v28 & 1) != 0))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v26 + 56) + 40 * v27, v0 + 176);
  }
  else
  {
    *(void *)(v0 + 208) = 0;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }
  swift_endAccess();
  uint64_t v29 = *(void *)(v0 + 200);
  outlined destroy of DataStreamState?(v0 + 176, &demangling cache variable for type metadata for LogitCollection?);
  if (!v29) {
    specialized Set._Variant.insert(_:)(v48, v10);
  }
  uint64_t v30 = *(void *)(v0 + 528);
  uint64_t v31 = *(void *)(v0 + 552) + 1;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  if (v31 == v30)
  {
    uint64_t v32 = *(void *)(v0 + 480);
    uint64_t v33 = *(void *)(v0 + 568);
    *(void *)(v0 + 576) = v32;
    swift_bridgeObjectRetain_n();
    uint64_t v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v32);
    swift_bridgeObjectRelease();
    v48[0] = (uint64_t)v34;
    specialized MutableCollection<>.sort(by:)(v48);
    if (v33)
    {
      return swift_release();
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 520);
      swift_bridgeObjectRelease();
      uint64_t v40 = v48[0];
      *(void *)(v0 + 584) = v48[0];
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v39 + 16, v0 + 56);
      uint64_t v41 = *(void *)(v0 + 80);
      uint64_t v42 = *(void *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v41);
      uint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v43;
      *uint64_t v43 = v0;
      v43[1] = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
      uint64_t v44 = *(void *)(v0 + 512);
      return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v40, v44, v41, v42);
    }
  }
  uint64_t v35 = *(void *)(v0 + 552) + 1;
  *(void *)(v0 + 552) = v35;
  *(void *)(v0 + 544) = v46;
  *(void *)(v0 + 536) = v10;
  if (v35 == *(void *)(v0 + 528))
  {
LABEL_34:
    __break(1u);
    return result;
  }
  outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v0 + 520) + 56, (uint64_t)v45);
  Swift::String v36 = *(void *)(v0 + 40);
  uint64_t v37 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v45, v36);
  *(void *)(v0 + 160) = &type metadata for ArgmaxPresampler;
  *(void *)(v0 + 168) = &protocol witness table for ArgmaxPresampler;
  char v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v38;
  *char v38 = v0;
  v38[1] = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 216, v46, v0 + 136, 0, v36, v37);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(unint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[65];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  uint64_t v4 = (uint64_t *)(v3 + 112);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 112);
  if (*(void *)(v1 + 16) >= *(void *)(v2 + 16)) {
    uint64_t v6 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v6 = *(void *)(v1 + 16);
  }
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE80];
  }
  uint64_t v8 = v0[76];
  unint64_t v9 = v0[75];
  char v10 = v0[73];
  uint64_t v16 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v10, v9, 1, &v16);
  if (v8)
  {
    return swift_unexpectedError();
  }
  else
  {
    uint64_t v12 = v0[65];
    uint64_t v13 = v0[63];
    swift_release();
    swift_bridgeObjectRelease();
    *uint64_t v4 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_retain();
    char v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de88Inference24SpeculativeLanguageModelC16nextTokensLogits5nodes10presampler8isPromptSayAA15gh42_pGSaySiG_AA0N10Presampler_pSgSbtYaKFAaH_pV6XEfU0_AG0lmN0CSDySiAgH_pGTf1cn_nTf4ngg_n(v13, v12, v5);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v15 = (uint64_t (*)(unint64_t))v0[1];
    return v15(v14);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of DataStreamState?(v0 + 136, &demangling cache variable for type metadata for LogitPresampler?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 600) = a1;
  *(void *)(v3 + 608) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    uint64_t v4 = specialized SpeculativeLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void *specialized SpeculativeLanguageModel.__allocating_init(target:speculative:stepCount:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a5);
  return specialized SpeculativeLanguageModel.init(target:speculative:stepCount:)(a1, (uint64_t)v13, a3, v14, a5, a6);
}

uint64_t type metadata accessor for SpeculativeLanguageModel()
{
  return self;
}

uint64_t method lookup function for SpeculativeLanguageModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpeculativeLanguageModel);
}

uint64_t dispatch thunk of SpeculativeLanguageModel.__allocating_init(target:speculative:stepCount:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void specialized MutableCollection<>.reverse()()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2) {
    BOOL v3 = v2 == 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
    }
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    unint64_t v4 = 0;
    uint64_t v5 = v2 + 3;
    do
    {
      if (v4 != v5 - 4)
      {
        unint64_t v7 = v1[2];
        if (v4 >= v7)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if (v5 - 4 >= v7) {
          goto LABEL_15;
        }
        uint64_t v8 = &v1[v4];
        uint64_t v9 = v8[4];
        v8[4] = v1[v5];
        v1[v5] = v9;
      }
      ++v4;
      int64_t v6 = v5 - 5;
      --v5;
    }
    while ((uint64_t)v4 < v6);
    *(void *)uint64_t v0 = v1;
  }
}

int64_t *static SpeculativeStreamingDecoder.makeDefaultStreamTokenIDs(streamCount:vocabularyCount:)(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v2 > a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v4 = result;
  if (__OFSUB__(a2, v2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!result) {
    return (int64_t *)MEMORY[0x263F8EE78];
  }
  if ((uint64_t)result <= 0)
  {
    uint64_t v5 = (int64_t *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v5 = (int64_t *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    v5[2] = (int64_t)v4;
    void v5[3] = 2 * (v7 >> 3);
  }
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v8, v5 + 4, a2 - v2, v2, a2);
  if (result == v4) {
    return v5;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.__allocating_init(languageModel:behavior:streamTokenIDs:sampler:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(a1, a2, a3, a4);
  return v8;
}

uint64_t SpeculativeStreamingDecoder.languageModel.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, a1);
}

void SpeculativeStreamingDecoder.draftingBehavior.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  int v4 = *(_DWORD *)(v1 + 192);
  char v5 = *(unsigned char *)(v1 + 196);
  char v6 = *(unsigned char *)(v1 + 197);
  char v7 = *(unsigned char *)(v1 + 198);
  int v8 = *(_DWORD *)(v1 + 200);
  char v9 = *(unsigned char *)(v1 + 204);
  *(void *)a1 = *(void *)(v1 + 168);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = v5;
  *(unsigned char *)(a1 + 29) = v6;
  *(unsigned char *)(a1 + 30) = v7;
  *(_DWORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 36) = v9;
}

uint64_t SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *a2;
  char v9 = *((unsigned char *)a2 + 8);
  uint64_t v10 = a2[2];
  char v11 = *((unsigned char *)a2 + 28);
  char v22 = *((unsigned char *)a2 + 29);
  int v23 = *((_DWORD *)a2 + 6);
  int v20 = *((_DWORD *)a2 + 8);
  char v21 = *((unsigned char *)a2 + 30);
  char v19 = *((unsigned char *)a2 + 36);
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v5 + 64) = v12;
  *(void *)(v5 + 72) = v12;
  *(void *)(v5 + 80) = v13;
  *(void *)(v5 + 216) = v12;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v5 + 16);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  *(void *)(v5 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  outlined init with copy of DeterministicLanguageModelProtocol(a4, v5 + 88);
  *(void *)(v5 + 168) = v8;
  *(unsigned char *)(v5 + 176) = v9;
  *(void *)(v5 + 184) = v10;
  *(_DWORD *)(v5 + 192) = v23;
  *(unsigned char *)(v5 + 196) = v11;
  *(unsigned char *)(v5 + 197) = v22;
  *(unsigned char *)(v5 + 198) = v21;
  *(_DWORD *)(v5 + 200) = v20;
  *(unsigned char *)(v5 + 204) = v19;
  outlined init with copy of DeterministicLanguageModelProtocol(a4, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenSampling);
  type metadata accessor for GreedySampling();
  if (swift_dynamicCast())
  {
    swift_release();
    if (v10 == 2)
    {
      uint64_t v16 = &protocol witness table for TopK2Presampler;
      uint64_t v17 = &type metadata for TopK2Presampler;
    }
    else if (v10 == 1)
    {
      uint64_t v16 = &protocol witness table for ArgmaxPresampler;
      uint64_t v17 = &type metadata for ArgmaxPresampler;
    }
    else
    {
      uint64_t v16 = &protocol witness table for BasicLogitPresampler;
      uint64_t v17 = &type metadata for BasicLogitPresampler;
    }
    long long v26 = v17;
    uint64_t v27 = v16;
    __swift_destroy_boxed_opaque_existential_1(a4);
    outlined init with take of LogitPresampler?((uint64_t)v25, v5 + 128);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a4);
    *(void *)(v5 + 160) = 0;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
  }
  *(void *)(v5 + 208) = a3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

unint64_t SpeculativeStreamingDecoder.verifyPreviousDraftAndPrepareNext(nodeToSampledToken:streamNodeToNextTopKTokens:)(unint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16))
  {
    uint64_t v3 = v2;
    unint64_t v5 = result;
    uint64_t v6 = (uint64_t)(v2 + 2);
    uint64_t v7 = v2[7];
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v11 & 1) == 0) {
        break;
      }
      uint64_t v12 = *(void *)(*(void *)(v5 + 56) + 8 * result);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v8);
      }
      v8[2] = v14 + 1;
      v8[v14 + 4] = v12;
      uint64_t v15 = v3[10];
      if (!*(void *)(v15 + 16)) {
        goto LABEL_20;
      }
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v16 & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v17 = *(void **)(*(void *)(v15 + 56) + 8 * result);
      uint64_t v18 = v17[2];
      if (!v18) {
        goto LABEL_20;
      }
      if (v17[4] != v12)
      {
        if (v18 == 1) {
          goto LABEL_20;
        }
        if (v17[5] != v12)
        {
          if (v18 == 2)
          {
LABEL_20:
            uint64_t v21 = v3[26];
            swift_beginAccess();
            uint64_t v22 = v3[5];
            uint64_t v23 = v3[6];
            __swift_mutable_project_boxed_opaque_existential_1(v6, v22);
            uint64_t v24 = DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(v7, v21, 0, v22, v23);
            swift_endAccess();
            swift_bridgeObjectRetain();
            unint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5208_s24TokenGenerationInference27SpeculativeStreamingDecoderC33verifyPreviousDraftAndPrepareNext33_1EEAF925F3480DEDF57B931B9D581A9ELL013nodeToSampledA0010streamNodeuL10TopKTokensSaySiGSDyS2iG_SDySiAHGtFAHSiXEfU_SDySiAFGTf1cn_nTf4ng_n(v24, a2);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            uint64_t v26 = v3[5];
            uint64_t v27 = v3[6];
            __swift_mutable_project_boxed_opaque_existential_1(v6, v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v27 + 16))(v7, v12, 0, v26, v27);
            swift_endAccess();
            v3[7] = v28;
            uint64_t v29 = SpeculativeStreamingDecoder.makeNextDraftTree(lastAcceptedNode:nextSpeculativeTokens:)(v28, v25);
            uint64_t v31 = v30;
            uint64_t v33 = v32;
            swift_bridgeObjectRelease();
            v3[8] = v29;
            v3[9] = v31;
            v3[10] = v33;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (unint64_t)v8;
          }
          uint64_t v19 = 6;
          while (1)
          {
            uint64_t v20 = v19 - 3;
            if (__OFADD__(v19 - 4, 1)) {
              break;
            }
            if (v17[v19] == v12) {
              goto LABEL_3;
            }
            ++v19;
            if (v20 == v18) {
              goto LABEL_20;
            }
          }
          __break(1u);
          goto LABEL_22;
        }
      }
LABEL_3:
      swift_beginAccess();
      uint64_t v9 = v3[5];
      uint64_t v10 = v3[6];
      __swift_mutable_project_boxed_opaque_existential_1(v6, v9);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v10 + 16))(v7, v12, 0, v9, v10);
      uint64_t result = swift_endAccess();
      if (!*(void *)(v5 + 16)) {
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.makeNextDraftTree(lastAcceptedNode:nextSpeculativeTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  *(void *)(inited + 32) = a1;
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  char v53 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v49 = *(void *)(a2 + 16);
  if (!v49)
  {
    uint64_t v9 = v7;
LABEL_34:
    uint64_t v37 = v3[26];
    swift_beginAccess();
    uint64_t v38 = v3[5];
    uint64_t v39 = v3[6];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 2), v38);
    DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(a1, v37, 0, v38, v39);
    swift_endAccess();
    uint64_t v55 = (uint64_t)v7;
    uint64_t v40 = v9[2];
    if (v40)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v41 = 0;
      do
      {
        uint64_t v42 = v9[v41++ + 4];
        swift_beginAccess();
        uint64_t v43 = v3[5];
        uint64_t v44 = v3[6];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 2), v43);
        uint64_t v45 = DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(v42, v37, 0, v43, v44);
        swift_endAccess();
        specialized Array.append<A>(contentsOf:)(v45);
      }
      while (v40 != v41);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
    }
    swift_bridgeObjectRelease();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v55);
    return (uint64_t)v9;
  }
  uint64_t v47 = a1;
  uint64_t v48 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v51 = *(void *)(inited + 16);
    if (v51) {
      break;
    }
LABEL_4:
    if (++v8 == v49)
    {
      swift_bridgeObjectRelease();
      a1 = v47;
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
      goto LABEL_34;
    }
  }
  uint64_t v50 = v8;
  uint64_t v10 = *(void *)(v48 + 8 * v8);
  uint64_t v54 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  while (1)
  {
    int64_t v12 = *(void *)(inited + 16);
    if (!v12)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }
    uint64_t v52 = v11;
    uint64_t v13 = *(void *)(inited + 32);
    if ((unint64_t)(v12 - 1) > *(void *)(inited + 24) >> 1)
    {
      Swift::String v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, v12, 1, (void *)inited);
      int64_t v12 = v36[2];
      if (!v12) {
        goto LABEL_44;
      }
      uint64_t inited = (uint64_t)v36;
    }
    memmove((void *)(inited + 32), (const void *)(inited + 40), 8 * v12 - 8);
    *(void *)(inited + 16) = v12 - 1;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v17 = v53[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_41;
    }
    char v20 = v15;
    if (v53[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      goto LABEL_16;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v20 & 1) != (v22 & 1)) {
      break;
    }
    unint64_t v16 = v21;
LABEL_16:
    if (v20)
    {
      uint64_t v23 = v53[7];
      swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = v10;
    }
    else
    {
      v53[(v16 >> 6) + 8] |= 1 << v16;
      *(void *)(v53[6] + 8 * v16) = v13;
      *(void *)(v53[7] + 8 * v16) = v10;
      uint64_t v24 = v53[2];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_42;
      }
      v53[2] = v26;
    }
    swift_bridgeObjectRelease();
    if (v54)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v54; ++i)
      {
        uint64_t v28 = *(void *)(v10 + 8 * i + 32);
        swift_beginAccess();
        uint64_t v29 = v3[5];
        uint64_t v30 = v3[6];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 2), v29);
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v30 + 16))(v13, v28, 0, v29, v30);
        swift_endAccess();
        unint64_t v33 = *(void *)(inited + 16);
        unint64_t v32 = *(void *)(inited + 24);
        if (v33 >= v32 >> 1) {
          uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, (void *)inited);
        }
        *(void *)(inited + 16) = v33 + 1;
        *(void *)(inited + 8 * v33 + 32) = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v35 = v9[2];
        unint64_t v34 = v9[3];
        if (v35 >= v34 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v9);
        }
        v9[2] = v35 + 1;
        v9[v35 + 4] = v31;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = v52 + 1;
    if (v52 + 1 == v51)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v50;
      goto LABEL_4;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_44:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.decodeNextTokens()()
{
  *(void *)(v1 + 192) = v0;
  return MEMORY[0x270FA2498](SpeculativeStreamingDecoder.decodeNextTokens(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[24];
  char v2 = *(void *)(v1 + 64);
  v0[25] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
  *(void *)(v3 + 32) = *(void *)(v1 + 56);
  uint64_t v9 = v3;
  swift_bridgeObjectRetain_n();
  specialized Array.append<A>(contentsOf:)(v2);
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  v0[26] = v9;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 2));
  unint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[27] = v7;
  *uint64_t v7 = v0;
  v7[1] = SpeculativeStreamingDecoder.decodeNextTokens();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v9, v1 + 128, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(unint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47[2];
  void *v48;
  uint64_t v49;

  uint64_t v48 = v0;
  uint64_t v1 = v0[28];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  char v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    unint64_t v14 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = v0[28] + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v3, (uint64_t)(v0 + 7));
    unint64_t v5 = v0[10];
    uint64_t v4 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
    LOBYTE(v4) = BitSet.isEmpty.getter();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
    if (v4)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v3 += 40;
    --v2;
  }
  while (v2);
  uint64_t v6 = v0 + 24;
  uint64_t v7 = v0[28];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[25];
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  int64_t v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs14PrefixSequenceVys04Zip2E0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_Sits5NeverOTg506_sSi24gh11Inference15jk21_pS2iIgyndd_Si_AaB_ptr6_Sits5L11OIegnrzr_TRSiAkL_pS2iIgyndd_Tf1cn_nTf4ng_n(v11, v7, v10 + 1, (uint64_t (*)(void, char *))partial apply for closure #2 in SpeculativeStreamingDecoder.decodeNextTokens());
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v12 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    uint64_t v13 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE80];
  }
  v47[0] = v13;
  uint64_t v17 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, 1, v47);
  if (!v8)
  {
    BOOL v18 = v0[28];
    uint64_t v19 = v0[26];
    swift_bridgeObjectRelease();
    char v20 = v47[0];
    SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs17DropFirstSequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n(v19, v18, v10 + 1, (uint64_t (*)(void, char *))partial apply for closure #3 in SpeculativeStreamingDecoder.decodeNextTokens());
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n
                   + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
      char v22 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      char v22 = MEMORY[0x263F8EE80];
    }
    v47[0] = v22;
    uint64_t v23 = (void *)swift_bridgeObjectRetain();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v23, 1, v47);
    uint64_t v24 = *v6;
    swift_bridgeObjectRelease();
    unint64_t v14 = SpeculativeStreamingDecoder.verifyPreviousDraftAndPrepareNext(nodeToSampledToken:streamNodeToNextTopKTokens:)(v20, v47[0]);
    swift_release();
    swift_release();
    BOOL v25 = *(void *)(v24 + 168);
    uint64_t v26 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v27 = *v6;
      uint64_t v28 = *(void *)(*v6 + 224);
      uint64_t v29 = __OFADD__(v28, v26);
      uint64_t v30 = v28 + v26;
      if (!v29)
      {
        SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n = *(void *)(v14 + 16);
        *(void *)(v27 + 224) = v30;
        uint64_t v31 = *(void *)(v27 + 232);
        unint64_t v32 = v31
            + SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n;
        if (!__OFADD__(v31, SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n))
        {
          unint64_t v33 = *v6;
          *(void *)(v27 + 232) = v32;
          unint64_t v34 = *(void *)(v33 + 256);
          if (!__OFADD__(v34, SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n- 1))
          {
            unint64_t v35 = *v6;
            *(void *)(v33 + 256) = v34
                                   + SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n
                                   - 1;
            Swift::String v36 = SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n > 1;
            uint64_t v37 = (void *)(v35 + 248);
            swift_beginAccess();
            uint64_t v38 = *(void *)(v35 + 248);
            uint64_t v29 = __OFADD__(v38, v36);
            uint64_t v39 = v38 + v36;
            if (!v29)
            {
              uint64_t v40 = *v6;
              *uint64_t v37 = v39;
              swift_beginAccess();
              uint64_t v41 = *(void *)(v40 + 240);
              uint64_t v29 = __OFADD__(v41, 1);
              uint64_t v42 = v41 + 1;
              if (!v29)
              {
                *(void *)(v40 + 240) = v42;
                if (one-time initialization token for speculativeDecode == -1)
                {
LABEL_29:
                  uint64_t v43 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v43, (uint64_t)static Log.speculativeDecode);
                  uint64_t v44 = Logger.logObject.getter();
                  uint64_t v45 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v44, v45))
                  {
                    uint64_t v46 = (uint8_t *)swift_slowAlloc();
                    *(_DWORD *)uint64_t v46 = 134217984;
                    v0[23] = SequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    _os_log_impl(&dword_25FA51000, v44, v45, "Accepted %ld token(s) in this step", v46, 0xCu);
                    MEMORY[0x261206F80](v46, -1, -1);
                  }

LABEL_10:
                  char v15 = (uint64_t (*)(unint64_t))v0[1];
                  return v15(v14);
                }
LABEL_38:
                swift_once();
                goto LABEL_29;
              }
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  return swift_unexpectedError();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = SpeculativeStreamingDecoder.decodeNextTokens();
  }
  else
  {
    uint64_t v4 = SpeculativeStreamingDecoder.decodeNextTokens();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

Swift::Void __swiftcall SpeculativeStreamingDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  char v2 = v1;
  uint64_t v3 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v4 = v1[7];
  long long v14 = *(_OWORD *)prompt.queryTokens._rawValue;
  uint64_t v15 = v3;
  swift_beginAccess();
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v6 + 48))(v4, &v14, v5, v6);
  v2[7] = v7;
  uint64_t v8 = v2[26];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v9);
  uint64_t v11 = DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(v7, v8, 0, v9, v10);
  swift_endAccess();
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v2[8] = v12;
  v2[9] = v11;
  v2[10] = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t SpeculativeStreamingDecoder.decodeNextChunk()()
{
  *(void *)(v1 + 88) = v0;
  return MEMORY[0x270FA2498](SpeculativeStreamingDecoder.decodeNextChunk(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v14;
  uint64_t v15;

  uint64_t v1 = v0[11];
  swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 216) + 16))
  {
    long long v14 = (void *)swift_task_alloc();
    v0[12] = v14;
    *long long v14 = v0;
    v14[1] = SpeculativeStreamingDecoder.decodeNextChunk();
    v14[24] = v0[11];
    uint64_t v7 = (uint64_t)SpeculativeStreamingDecoder.decodeNextTokens();
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    return MEMORY[0x270FA2498](v7, v5, v6);
  }
  swift_beginAccess();
  char v2 = specialized RangeReplaceableCollection<>.popLast()();
  uint64_t v4 = v3;
  swift_endAccess();
  uint64_t v7 = 0;
  if ((v4 & 1) == 0)
  {
    uint64_t v8 = v0[11];
    uint64_t v9 = *(void *)(v8 + 264);
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (!v10)
    {
      *(void *)(v8 + 264) = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
      *(void *)(v7 + 32) = v2;
      goto LABEL_5;
    }
    __break(1u);
    return MEMORY[0x270FA2498](v7, v5, v6);
  }
LABEL_5:
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[13];
  if (!v1) {
    uint64_t v1 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0[11] + 216) = v1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized MutableCollection<>.reverse()();
  swift_endAccess();
  swift_beginAccess();
  char v2 = specialized RangeReplaceableCollection<>.popLast()();
  uint64_t v4 = v3;
  swift_endAccess();
  uint64_t result = 0;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = v0[11];
    uint64_t v7 = *(void *)(v6 + 264);
    uint64_t v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (v8)
    {
      __break(1u);
      return result;
    }
    *(void *)(v6 + 264) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_25FB61DF0;
    *(void *)(result + 32) = v2;
  }
  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(result);
}

uint64_t SpeculativeStreamingDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    return MEMORY[0x270FA2498](SpeculativeStreamingDecoder.decodeNextChunk(), 0, 0);
  }
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  uint64_t v1 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v3 = v1[2];
    if (v3)
    {
LABEL_4:
      uint64_t v4 = v3 - 1;
      uint64_t result = v1[v4 + 4];
      v1[2] = v4;
      *(void *)uint64_t v0 = v1;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = (void *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

double SpeculativeStreamingDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 224);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 232) * 100.0) / (float)v1;
  return result;
}

uint64_t SpeculativeStreamingDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  return 0x100000000;
}

uint64_t SpeculativeStreamingDecoder.speculationCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 240);
}

uint64_t SpeculativeStreamingDecoder.speculationCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 240) = a1;
  return result;
}

uint64_t (*SpeculativeStreamingDecoder.speculationCount.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t SpeculativeStreamingDecoder.speculationSuccessCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 248);
}

uint64_t SpeculativeStreamingDecoder.speculationSuccessCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 248) = a1;
  return result;
}

uint64_t (*SpeculativeStreamingDecoder.speculationSuccessCount.modify())()
{
  return SpeculativeStreamingDecoder.speculationSuccessCount.modify;
}

double SpeculativeStreamingDecoder.speculationSuccessRateInPercent.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 240);
  if (!v1) {
    return 0.0;
  }
  swift_beginAccess();
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 248) * 100.0) / (float)v1;
  return result;
}

uint64_t SpeculativeStreamingDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  return *(void *)(v0 + 256);
}

uint64_t SpeculativeStreamingDecoder.draftEmptyResponse.getter()
{
  return 0;
}

uint64_t SpeculativeStreamingDecoder.draftEarlyReturn.getter()
{
  return 0;
}

uint64_t SpeculativeStreamingDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  outlined destroy of DataStreamState?(v0 + 128, &demangling cache variable for type metadata for LogitPresampler?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeculativeStreamingDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  outlined destroy of DataStreamState?(v0 + 128, &demangling cache variable for type metadata for LogitPresampler?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance SpeculativeStreamingDecoder(TokenGenerationInference::SamplingDecoderPrompt a1@<0:X0, 8:X1, 16:X2>)
{
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance SpeculativeStreamingDecoder()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  v3[11] = v2;
  return MEMORY[0x270FA2498](SpeculativeStreamingDecoder.decodeNextChunk(), 0, 0);
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(*(void *)v0 + 232) * 100.0) / (float)v1;
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  return 0x100000000;
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 240);
  if (!v2) {
    return 0.0;
  }
  swift_beginAccess();
  *(float *)&double result = (float)((float)*(uint64_t *)(v1 + 248) * 100.0) / (float)v2;
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance SpeculativeStreamingDecoder()
{
  return *(void *)(*(void *)v0 + 256);
}

uint64_t specialized DropFirstSequence.makeIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result;
  if (a3 < 1)
  {
    char v13 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
LABEL_13:
    *(void *)a4 = v5;
    *(void *)(a4 + 8) = v8;
    *(void *)(a4 + 16) = a2;
    *(void *)(a4 + 24) = v7;
    *(unsigned char *)(a4 + 32) = v13;
  }
  else
  {
    uint64_t v7 = a3;
    uint64_t v8 = *(void *)(result + 16);
    uint64_t v9 = a2 + 32;
    swift_bridgeObjectRetain();
    double result = swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    while (1)
    {
      if (v8 == v10)
      {
        unint64_t v10 = v8;
LABEL_12:
        memset(v14, 0, sizeof(v14));
        outlined destroy of DataStreamState?((uint64_t)v14, &demangling cache variable for type metadata for (Int, LogitCollection)?);
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        char v13 = 1;
        uint64_t v7 = v10;
        goto LABEL_13;
      }
      if (v10 >= *(void *)(v5 + 16)) {
        break;
      }
      unint64_t v11 = v10 + 1;
      unint64_t v12 = *(void *)(a2 + 16);
      if (v10 == v12)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_12;
      }
      if (v10 >= v12) {
        goto LABEL_15;
      }
      *(void *)&v14[0] = *(void *)(v5 + 8 * v10 + 32);
      outlined init with copy of DeterministicLanguageModelProtocol(v9, (uint64_t)v14 + 8);
      double result = outlined destroy of DataStreamState?((uint64_t)v14, &demangling cache variable for type metadata for (Int, LogitCollection)?);
      v9 += 40;
      ++v10;
      if (v7 == v11)
      {
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        char v13 = 0;
        uint64_t v8 = v7;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs14PrefixSequenceVys04Zip2E0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_Sits5NeverOTg506_sSi24gh11Inference15jk21_pS2iIgyndd_Si_AaB_ptr6_Sits5L11OIegnrzr_TRSiAkL_pS2iIgyndd_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, char *))
{
  uint64_t v24 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v7 = v24;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v20 = a3;
  if (a3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a2 + 32;
    uint64_t v19 = a2;
    do
    {
      unint64_t v11 = *(void *)(a1 + 16);
      if (v9 == v11) {
        break;
      }
      if (v9 >= v11)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        return result;
      }
      unint64_t v12 = *(void *)(a2 + 16);
      if (v9 == v12) {
        break;
      }
      if (v9 >= v12) {
        goto LABEL_14;
      }
      *(void *)&v22[0] = *(void *)(a1 + 8 * v9 + 32);
      outlined init with copy of DeterministicLanguageModelProtocol(v10, (uint64_t)v22 + 8);
      v23[0] = v22[0];
      v23[1] = v22[1];
      v23[2] = v22[2];
      uint64_t v13 = a4(*(void *)&v22[0], (char *)v23 + 8);
      uint64_t v15 = v14;
      outlined destroy of DataStreamState?((uint64_t)v23, &demangling cache variable for type metadata for (Int, LogitCollection));
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v24;
      }
      unint64_t v17 = *(void *)(v7 + 16);
      unint64_t v16 = *(void *)(v7 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v7 = v24;
      }
      ++v9;
      *(void *)(v7 + 16) = v17 + 1;
      uint64_t v18 = v7 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      v10 += 40;
      a2 = v19;
    }
    while (v20 != v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs17DropFirstSequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, char *))
{
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v7 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = specialized DropFirstSequence.makeIterator()(a1, a2, a3, (uint64_t)v26);
  long long v28 = v26[1];
  long long v29 = v26[0];
  if ((v27 & 1) != 0 || (v9 = *((void *)&v29 + 1), unint64_t v10 = *(void *)(v29 + 16), *((void *)&v29 + 1) == v10))
  {
LABEL_3:
    outlined release of IndexingIterator<[LogitCollection]>((uint64_t)&v29);
    outlined release of IndexingIterator<[LogitCollection]>((uint64_t)&v28);
    return v7;
  }
  else
  {
    unint64_t v11 = *((void *)&v28 + 1);
    uint64_t v20 = v29 + 32;
    uint64_t v21 = v29;
    uint64_t v22 = v28;
    uint64_t v12 = v28 + 40 * *((void *)&v28 + 1) + 32;
    while (v9 < v10)
    {
      unint64_t v13 = *(void *)(v22 + 16);
      if (v11 == v13) {
        goto LABEL_3;
      }
      if (v11 >= v13) {
        goto LABEL_15;
      }
      *(void *)&v24[0] = *(void *)(v20 + 8 * v9);
      outlined init with copy of DeterministicLanguageModelProtocol(v12, (uint64_t)v24 + 8);
      v25[0] = v24[0];
      v25[1] = v24[1];
      v25[2] = v24[2];
      uint64_t v14 = a4(*(void *)&v24[0], (char *)v25 + 8);
      uint64_t v16 = v15;
      outlined destroy of DataStreamState?((uint64_t)v25, &demangling cache variable for type metadata for (Int, LogitCollection));
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v30;
      }
      unint64_t v18 = *(void *)(v7 + 16);
      unint64_t v17 = *(void *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v7 = v30;
      }
      ++v9;
      *(void *)(v7 + 16) = v18 + 1;
      uint64_t v19 = v7 + 16 * v18;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      unint64_t v10 = *(void *)(v21 + 16);
      v12 += 40;
      ++v11;
      if (v9 == v10) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5208_s24TokenGenerationInference27SpeculativeStreamingDecoderC33verifyPreviousDraftAndPrepareNext33_1EEAF925F3480DEDF57B931B9D581A9ELL013nodeToSampledA0010streamNodeuL10TopKTokensSaySiGSDyS2iG_SDySiAHGtFAHSiXEfU_SDySiAFGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v12;
  uint64_t v7 = (uint64_t *)(a1 + 32);
  while (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v7);
    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v9 = *(void *)(*(void *)(a2 + 56) + 8 * result);
    unint64_t v11 = *(void *)(v12 + 16);
    unint64_t v10 = *(void *)(v12 + 24);
    unint64_t result = swift_bridgeObjectRetain();
    if (v11 >= v10 >> 1) {
      unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    }
    *(void *)(v12 + 16) = v11 + 1;
    *(void *)(v12 + 8 * v11 + 32) = v9;
    ++v7;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[14];
  uint64_t v6 = v2[15];
  __swift_project_boxed_opaque_existential_1(v2 + 11, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a2, v5, v6);
  return a1;
}

uint64_t partial apply for closure #3 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  (*(void (**)(void, uint64_t, uint64_t))(v5 + 40))(*(void *)(v2 + 184), v4, v5);
  return a1;
}

uint64_t type metadata accessor for SpeculativeStreamingDecoder()
{
  return self;
}

uint64_t method lookup function for SpeculativeStreamingDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpeculativeStreamingDecoder);
}

uint64_t dispatch thunk of SpeculativeStreamingDecoder.__allocating_init(languageModel:behavior:streamTokenIDs:sampler:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

void *type metadata accessor for SpeculativeStreamingDecoder.DraftTree()
{
  return &unk_270BD48A0;
}

uint64_t outlined release of IndexingIterator<[LogitCollection]>(uint64_t a1)
{
  return a1;
}

uint64_t static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  unint64_t v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EventReporter();
  swift_allocObject();
  EventReporter.init()();
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  swift_release();
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v11);
}

uint64_t closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata?);
  MEMORY[0x270FA5388](v8 - 8, v9);
  unint64_t v11 = (uint64_t *)&v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x270FA5388](v12, v13);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition();
  uint64_t v14 = swift_allocBox();
  uint64_t v20 = a4;
  uint64_t v21 = v24;
  static Buildable.with(_:)();
  *unint64_t v11 = v14;
  uint64_t v15 = *MEMORY[0x263F4FCA0];
  uint64_t v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 104))(v11, v15, v16);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t partial apply for closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  return closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined destroy of GenerativeFunctionsInstrumentationEvent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion?);
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  static Buildable.with(_:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo?);
  MEMORY[0x270FA5388](v5 - 8, v6);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  static Buildable.with(_:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.fileResidentInfo.setter();
}

void closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x8000000000000000) != 0 || (MEMORY[0x261205080](a2, 0), (a3 & 0x8000000000000000) != 0))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x261205070](a3, 0);
    if (a3 < a2)
    {
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Log.device);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25FA51000, v6, v7, "Resident pages of model %ld reported as greater than total pages %ld. Will truncate resident ratio to 1.0", (uint8_t *)v8, 0x16u);
        MEMORY[0x261206F80](v8, -1, -1);
      }
    }
    if (a3)
    {
      GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentRatio.setter();
    }
    else
    {
      if (one-time initialization token for device != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.device);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_25FA51000, v10, v11, "Did not capture resident ratio due to total pages of model reported as 0.", v12, 2u);
        MEMORY[0x261206F80](v12, -1, -1);
      }
    }
  }
}

id TelemetryHelpers.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id TelemetryHelpers.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TelemetryHelpers.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TelemetryHelpers()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  return closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  return closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)()
{
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter();
}

uint64_t closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1);
}

unint64_t closure #1 in TGICAPIWrapper.makeSession()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a3 + 184);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v10)
    {
      uint64_t v11 = *(void *)(v8 + 56) + 24 * v9;
      uint64_t v12 = *(void *)v11;
      long long v19 = *(_OWORD *)(v11 + 8);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v13 = type metadata accessor for TGICAPILanguageModel();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TGICAPILanguageModel.NodeState>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_25FB61DF0;
      uint64_t v16 = MEMORY[0x263F8EE78];
      unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      *(void *)(v15 + 32) = result;
      *(void *)(v15 + 40) = v16;
      *(void *)(v15 + 48) = 0;
      *(void *)(v14 + 24) = v15;
      *(void *)(v14 + 32) = v12;
      *(_OWORD *)(v14 + 40) = v19;
      a4[3] = v13;
      a4[4] = (uint64_t)&protocol witness table for TGICAPILanguageModel;
      *a4 = v14;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError();
  swift_allocError();
  *uint64_t v18 = a1;
  v18[1] = a2;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t TGICAPIWrapper.__deallocating_deinit()
{
  long long v1 = *(_OWORD *)(v0 + 160);
  v7[8] = *(_OWORD *)(v0 + 144);
  v7[9] = v1;
  uint64_t v8 = *(void *)(v0 + 176);
  long long v2 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  void v7[5] = v2;
  long long v3 = *(_OWORD *)(v0 + 128);
  v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(v0 + 64);
  _OWORD v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v5;
  outlined release of TokenGenerationConfiguration((uint64_t)v7);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t TGITokenGeneratorCreate(_:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0, v2);
  long long v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  String.init(cString:)();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v5, v7);
    type metadata accessor for TGICAPIWrapper();
    uint64_t v9 = swift_allocObject();
    long long v10 = v24;
    *(_OWORD *)(v9 + 144) = v23;
    *(_OWORD *)(v9 + 160) = v10;
    *(void *)(v9 + 176) = v25;
    long long v11 = v20;
    *(_OWORD *)(v9 + 80) = v19;
    *(_OWORD *)(v9 + 96) = v11;
    long long v12 = v22;
    *(_OWORD *)(v9 + 112) = v21;
    *(_OWORD *)(v9 + 128) = v12;
    long long v13 = v16;
    *(_OWORD *)(v9 + 16) = *(_OWORD *)&v15[24];
    *(_OWORD *)(v9 + 32) = v13;
    long long v14 = v18;
    *(_OWORD *)(v9 + 48) = v17;
    *(_OWORD *)(v9 + 64) = v14;
    *(void *)(v9 + 184) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_release();
    return v9;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPIWrapper()
{
  return self;
}

uint64_t TGICAPILanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return MEMORY[0x270FA2498](TGICAPILanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t TGICAPILanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  swift_beginAccess();
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  unint64_t v6 = v0[6];
  if (*(void *)(v5 + 16) <= v6)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    goto LABEL_6;
  }
  uint64_t v7 = v5 + 24 * v6;
  uint64_t v8 = *(void *)(v7 + 48);
  if (v8)
  {
    uint64_t v9 = v0[5];
    *(void *)(v9 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    *(void *)(v9 + 32) = &protocol witness table for <A> [A];
    uint64_t v3 = v8;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v7 + 40);
  unint64_t v11 = *(void *)(v0[7] + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized Array.init(repeating:count:)(v11, 0);
  uint64_t v1 = v10 + 32;
  uint64_t v2 = *(void *)(v10 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v12 = v0[5];
  char v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(v0[7] + 40))(*(void *)(v0[7] + 48), v1, v2, v3 + 32, *(void *)(v3 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v12 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  *(void *)(v12 + 32) = &protocol witness table for <A> [A];
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
LABEL_8:
  *(void *)v0[5] = v3;
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  swift_bridgeObjectRetain();
  return v15();
}

uint64_t TGICAPILanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance TGICAPILanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  v7[6] = a2;
  v7[7] = v6;
  void v7[5] = a1;
  return MEMORY[0x270FA2498](TGICAPILanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance TGICAPILanguageModel()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance TGICAPILanguageModel(unint64_t a1, uint64_t a2)
{
  return specialized TGICAPILanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2);
}

uint64_t TGITokenGeneratorRegisterExternalLanguageModel(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  uint64_t v9 = String.init(cString:)();
  uint64_t v11 = v10;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a4, a5, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 184) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t TGITokenGeneratorGenerate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = String.init(cString:)();
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  swift_retain();
  v15(v10, 1, 1, v14);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  void v16[5] = v11;
  v16[6] = v13;
  v16[7] = a3;
  v16[8] = a4;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in TGITokenGeneratorGenerate(_:_:_:_:), (uint64_t)v16);
  return swift_release();
}

uint64_t TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = String.init(cString:)();
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  swift_retain();
  v15(v10, 1, 1, v14);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  void v16[5] = v11;
  v16[6] = v13;
  v16[7] = a3;
  v16[8] = a4;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)partial apply, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[29] = a7;
  v8[30] = a8;
  v8[27] = a5;
  v8[28] = a6;
  v8[26] = a4;
  return MEMORY[0x270FA2498](closure #1 in TGITokenGeneratorGenerate(_:_:_:_:), 0, 0);
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  long long v3 = *(_OWORD *)(v1 + 32);
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  long long v4 = *(_OWORD *)(v1 + 112);
  long long v6 = *(_OWORD *)(v1 + 64);
  long long v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v0 + 112) = v4;
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 80) = v5;
  long long v8 = *(_OWORD *)(v1 + 144);
  long long v7 = *(_OWORD *)(v1 + 160);
  long long v9 = *(_OWORD *)(v1 + 128);
  *(void *)(v0 + 176) = *(void *)(v1 + 176);
  *(_OWORD *)(v0 + 144) = v8;
  *(_OWORD *)(v0 + 160) = v7;
  *(_OWORD *)(v0 + 128) = v9;
  long long v10 = *(_OWORD *)(v1 + 160);
  v23[8] = *(_OWORD *)(v1 + 144);
  v23[9] = v10;
  uint64_t v24 = *(void *)(v1 + 176);
  long long v11 = *(_OWORD *)(v1 + 96);
  _OWORD v23[4] = *(_OWORD *)(v1 + 80);
  v23[5] = v11;
  long long v12 = *(_OWORD *)(v1 + 128);
  v23[6] = *(_OWORD *)(v1 + 112);
  v23[7] = v12;
  long long v13 = *(_OWORD *)(v1 + 32);
  v23[0] = *(_OWORD *)(v1 + 16);
  v23[1] = v13;
  long long v14 = *(_OWORD *)(v1 + 64);
  v23[2] = *(_OWORD *)(v1 + 48);
  v23[3] = v14;
  type metadata accessor for TokenGenerationSession();
  swift_allocObject();
  outlined retain of TokenGenerationConfiguration(v0 + 16);
  swift_retain();
  *(void *)(v0 + 248) = TokenGenerationSession.init(_:externalLanguageMaker:)((uint64_t)v23, (void (*)(long long *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in TGICAPIWrapper.makeSession());
  TokenGenerationSession.addPrompt(_:)(*(Swift::String *)(v0 + 216));
  if (v15)
  {
    swift_release();
    swift_release();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    *(void *)(v0 + 200) = MEMORY[0x263F8EE78];
    uint64_t v18 = *(void **)(v0 + 248);
    uint64_t v19 = v18[5];
    uint64_t v20 = v18[6];
    __swift_project_boxed_opaque_existential_1(v18 + 2, v19);
    long long v22 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v20 + 16) + **(int **)(v20 + 16));
    long long v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v21;
    *long long v21 = v0;
    v21[1] = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
    return v22(v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  void (*v7)(uint64_t, void);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t (*v20)(uint64_t, uint64_t);
  long long v21;
  uint64_t v22;

  uint64_t v1 = *(void *)(v0 + 264);
  if (!v1)
  {
    long long v6 = *(void *)(v0 + 240);
    long long v7 = *(void (**)(uint64_t, void))(v0 + 232);
    swift_bridgeObjectRelease();
    v7(v6, 0);
LABEL_18:
    swift_release();
    swift_release();
    long long v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_19;
  }
  specialized Array.append<A>(contentsOf:)(v1);
  long long v2 = swift_bridgeObjectRetain();
  long long v3 = TokenGenerationSession.detokenize(tokens:)((Swift::OpaquePointer)v2);
  if (v4)
  {
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release();
    long long v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_19:
    return v5();
  }
  long long v8 = (char *)(v0 + 280);
  long long v21 = *(_OWORD *)(v0 + 232);
  swift_bridgeObjectRelease();
  long long v9 = swift_task_alloc();
  *(_OWORD *)(v9 + 16) = v21;
  if (((uint64_t)v3._object & 0x1000000000000000) != 0
    || !((uint64_t)v3._object & 0x2000000000000000 | v3._countAndFlagsBits & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  long long v10 = swift_task_alloc();
  *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
  *(void *)(v10 + 24) = v9;
  if (((uint64_t)v3._object & 0x2000000000000000) == 0)
  {
    if ((v3._countAndFlagsBits & 0x1000000000000000) != 0) {
      long long v11 = ((uint64_t)v3._object & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      long long v11 = _StringObject.sharedUTF8.getter();
    }
    *long long v8 = (*(uint64_t (**)(void, uint64_t))(v0 + 232))(*(void *)(v0 + 240), v11);
    swift_task_dealloc();
    goto LABEL_11;
  }
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 232);
  long long v12 = *(void *)(v0 + 240);
  *(void *)(v0 + 184) = v3._countAndFlagsBits;
  *(void *)(v0 + 192) = (uint64_t)v3._object & 0xFFFFFFFFFFFFFFLL;
  *(unsigned char *)(v0 + 280) = v13(v12, v0 + 184);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
LABEL_13:
  long long v14 = *v8;
  swift_task_dealloc();
  uint64_t v15 = *(void **)(v0 + 248);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v16 = v15[5];
  long long v17 = v15[6];
  __swift_project_boxed_opaque_existential_1(v15 + 2, v16);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v17 + 16) + **(int **)(v17 + 16));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v18;
  *uint64_t v18 = v0;
  v18[1] = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
  return v20(v16, v17);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 272) = v1;
  swift_task_dealloc();
  if (v1) {
    long long v4 = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
  }
  else {
    long long v4 = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of DataStreamState?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t TGICAPILanguageModelWrapper.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t TGILanguageModelCreate(_:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0, v2);
  long long v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.init(cString:)();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v5, v7);
    long long v9 = v16;
    uint64_t v10 = v17;
    char v11 = v18;
    type metadata accessor for TGICAPILanguageModelWrapper();
    uint64_t v12 = swift_allocObject();
    long long v13 = v9;
    uint64_t v14 = v10;
    char v15 = v11;
    LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, (uint64_t *)&v16);
    outlined consume of LanguageModelReference(v9, *((uint64_t *)&v9 + 1), v10, v11);
    outlined init with take of LogitCollection(&v16, v12 + 16);
    swift_release();
    return v12;
  }
  return result;
}

uint64_t TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TGILanguageModelComputeLogits(_:_:_:_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_270BD4920, (uint64_t)&async function pointer to partial apply for closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:));
}

uint64_t closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  return MEMORY[0x270FA2498](closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:), 0, 0);
}

uint64_t closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)()
{
  v1._rawValue = *(void **)(v0 + 144);
  outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v0 + 136) + 16, v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  Swift::Int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_mutable_project_boxed_opaque_existential_1(v0 + 16, *(void *)(v0 + 40));
  Swift::Int v5 = DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(v4, v1, 1);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v6);
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  long long v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v8;
  *long long v8 = v0;
  v8[1] = closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 56, v5, v0 + 96, 0, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 96;
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  outlined destroy of DataStreamState?(v2, &demangling cache variable for type metadata for LogitPresampler?);
  if (v0) {
    uint64_t v3 = closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  }
  else {
    uint64_t v3 = closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  Swift::OpaquePointer v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  long long v22 = *(_OWORD *)(v0 + 152);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v1);
  uint64_t v3 = swift_task_alloc();
  *(_OWORD *)(v3 + 16) = v22;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = partial apply for invokeCallback #1 (_:) in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  *(void *)(v4 + 24) = v3;
  (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 24))(partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<Float>) -> (@error @owned Error), v4, MEMORY[0x263F8EE60] + 8, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  if (*(unsigned char *)(v0 + 184))
  {
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    Swift::Int v7 = specialized Sequence<>.max()();
    LOBYTE(v6) = v8;
    swift_bridgeObjectRelease();
    if (v6) {
      Swift::Int v9 = 0;
    }
    else {
      Swift::Int v9 = v7;
    }
    unint64_t result = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_21:
      __break(1u);
      return result;
    }
    uint64_t v11 = specialized Array.init(repeating:count:)(result, 0);
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    BitSet.Iterator.init(_:)();
    swift_bridgeObjectRetain();
    Swift::Int_optional v24 = BitSet.Iterator.next()();
    if (!v24.is_nil)
    {
      unint64_t value = v24.value;
      while (1)
      {
        uint64_t v15 = *(void *)(v0 + 80);
        uint64_t v16 = *(void *)(v0 + 88);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v15);
        float v17 = (*(float (**)(unint64_t, uint64_t, uint64_t))(v16 + 16))(value, v15, v16);
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if ((value & 0x8000000000000000) != 0) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          uint64_t v11 = result;
          if ((value & 0x8000000000000000) != 0)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (value >= *(void *)(v11 + 16)) {
          break;
        }
        *(float *)(v11 + 4 * value + 32) = v17;
        Swift::Int_optional v25 = BitSet.Iterator.next()();
        unint64_t value = v25.value;
        if (v25.is_nil) {
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v11 + 16);
    swift_bridgeObjectRetain();
    v19(v18, v11 + 32, v20);
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_15:
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  long long v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t *TGICAPIGuidedGenerationConstraintsWrapper.init(_:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v32 = *v3;
  uint64_t v33 = v2;
  uint64_t v5 = type metadata accessor for GuidedGenerationConstraints();
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v6);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Grammar();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9, v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v30 = *a1;
  uint64_t v34 = a1[1];
  uint64_t v17 = a1[4];
  swift_bridgeObjectRetain();
  uint64_t v18 = v33;
  Grammar.init(backusNaurForm:prependSpaceToRootRule:)();
  if (v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v27 = v16;
    uint64_t v28 = v17;
    Swift::Int_optional v24 = v13;
    Swift::Int_optional v25 = v8;
    uint64_t v33 = v9;
    uint64_t v26 = v5;
    type metadata accessor for TokenizerRunner();
    swift_allocObject();
    swift_bridgeObjectRetain();
    TokenizerRunner.init(tokenizerPath:)();
    uint64_t v30 = 0;
    uint64_t v20 = v31;
    long long v21 = v27;
    uint64_t v22 = v33;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v24, v27, v33);
    swift_bridgeObjectRetain();
    uint64_t v23 = v25;
    GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))((uint64_t)v3 + OBJC_IVAR____TtC24TokenGenerationInference41TGICAPIGuidedGenerationConstraintsWrapper_constraints, v23, v26);
  }
  return v3;
}

uint64_t TGICAPIGuidedGenerationConstraintsWrapper.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference41TGICAPIGuidedGenerationConstraintsWrapper_constraints;
  uint64_t v2 = type metadata accessor for GuidedGenerationConstraints();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t TGIGuidedGenerationConstraintsCreate(_:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0, v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.init(cString:)();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v5, v7);
    type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper();
    uint64_t v9 = swift_allocObject();
    TGICAPIGuidedGenerationConstraintsWrapper.init(_:)((uint64_t *)&v11);
    swift_release();
    return v9;
  }
  return result;
}

uint64_t TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TGILanguageModelComputeLogits(_:_:_:_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_270BD4948, (uint64_t)&async function pointer to partial apply for closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:));
}

uint64_t TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a6;
  uint64_t v31 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
  int64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v28 = a5;
    uint64_t v29 = a7;
    uint64_t v32 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v18 = 0;
    uint64_t v19 = v32;
    unint64_t v20 = *(void *)(v32 + 16);
    do
    {
      uint64_t v21 = *(int *)(v16 + 4 * v18 + 32);
      uint64_t v32 = v19;
      unint64_t v22 = *(void *)(v19 + 24);
      if (v20 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v20 + 1, 1);
        uint64_t v19 = v32;
      }
      ++v18;
      *(void *)(v19 + 16) = v20 + 1;
      *(void *)(v19 + 8 * v20++ + 32) = v21;
    }
    while (v17 != v18);
    swift_release();
    a5 = v28;
    a7 = v29;
  }
  else
  {
    swift_release();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v23 = type metadata accessor for TaskPriority();
  Swift::Int_optional v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  swift_retain();
  v24(v15, 1, 1, v23);
  Swift::Int_optional v25 = (void *)swift_allocObject();
  v25[2] = 0;
  _OWORD v25[3] = 0;
  v25[4] = a1;
  v25[5] = v19;
  v25[6] = v31;
  v25[7] = a5;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v15, a7, (uint64_t)v25);
  return swift_release();
}

uint64_t closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  void v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = type metadata accessor for TokenIDMask();
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TokenIDMaskResponse();
  v7[9] = v9;
  _OWORD v7[10] = *(void *)(v9 - 8);
  v7[11] = swift_task_alloc();
  v7[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:), 0, 0);
}

uint64_t closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:);
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[3];
  return MEMORY[0x270F7F5F0](v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:);
  }
  else {
    uint64_t v2 = closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, *(void *)(v0 + 96), v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 != *MEMORY[0x263F7FBB0])
  {
    if (v4 != *MEMORY[0x263F7FBB8]) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 48);
    int64_t v17 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 80) + 96))(v14, *(void *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v15, v14, v16);
    uint64_t v18 = TokenIDMask.allowedTokenIDs()();
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v30 = MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
      unint64_t v20 = 0;
      uint64_t v21 = v30;
      while (1)
      {
        unint64_t v22 = *(void *)(v18 + 8 * v20 + 32);
        if (v22 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_29;
        }
        if (v22 > 0x7FFFFFFF) {
          goto LABEL_30;
        }
        Swift::Int_optional v24 = *(void *)(v30 + 16);
        uint64_t v23 = *(void *)(v30 + 24);
        if (v24 >= v23 >> 1) {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        }
        ++v20;
        *(void *)(v30 + 16) = v24 + 1;
        *(_DWORD *)(v30 + 4 * v24 + 32) = v22;
        if (v19 == v20)
        {
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
LABEL_23:
    uint64_t v26 = *(void *)(v0 + 56);
    Swift::Int_optional v25 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 48);
    (*(void (**)(void, void, uint64_t, void))(v0 + 32))(*(void *)(v0 + 40), 0, v21 + 32, *(void *)(v21 + 16));
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
LABEL_24:
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  uint64_t v5 = *(uint64_t **)(v0 + 88);
  (*(void (**)(uint64_t *, void))(*(void *)(v0 + 80) + 96))(v5, *(void *)(v0 + 72));
  unint64_t v6 = *v5;
  unint64_t v7 = *(void *)(*v5 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_21:
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 32))(*(void *)(v0 + 40), 1, v10 + 32, *(void *)(v10 + 16));
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_24;
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  uint64_t v9 = 0;
  uint64_t v10 = v29;
  while (1)
  {
    uint64_t v11 = *(void *)(v6 + 8 * v9 + 32);
    if (v11 < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (v11 > 0x7FFFFFFF) {
      goto LABEL_28;
    }
    uint64_t v13 = *(void *)(v29 + 16);
    uint64_t v12 = *(void *)(v29 + 24);
    if (v13 >= v12 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    }
    ++v9;
    *(void *)(v29 + 16) = v13 + 1;
    *(_DWORD *)(v29 + 4 * v13 + 32) = v11;
    if (v7 == v9)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  *(void *)(v5 + 240) = v4;
  *(_OWORD *)(v5 + 224) = v6;
  *(void *)(v5 + 208) = v2;
  *(void *)(v5 + 216) = v3;
  return MEMORY[0x270FA2498](closure #1 in TGITokenGeneratorGenerate(_:_:_:_:), 0, 0);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference;
  if (!lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference;
  if (!lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPILanguageModelWrapper()
{
  return self;
}

uint64_t outlined consume of LanguageModelReference(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1)
  {
  }
  else
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  *(_OWORD *)(v2 + 152) = v4;
  *(_OWORD *)(v2 + 136) = v3;
  return MEMORY[0x270FA2498](closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper()
{
  uint64_t result = type metadata singleton initialization cache for TGICAPIGuidedGenerationConstraintsWrapper;
  if (!type metadata singleton initialization cache for TGICAPIGuidedGenerationConstraintsWrapper) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t type metadata accessor for TGICAPILanguageModel()
{
  return self;
}

uint64_t ObjC metadata update function for TGICAPIGuidedGenerationConstraintsWrapper()
{
  return type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper();
}

uint64_t type metadata completion function for TGICAPIGuidedGenerationConstraintsWrapper()
{
  uint64_t result = type metadata accessor for GuidedGenerationConstraints();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *assignWithCopy for TGICAPILanguageModel.NodeState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TGICAPILanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TGICAPILanguageModel.NodeState()
{
  return &type metadata for TGICAPILanguageModel.NodeState;
}

uint64_t specialized TGICAPILanguageModel.node(forPreviousNode:token:isPrompt:)(unint64_t a1, uint64_t a2)
{
  uint64_t v7 = v3 + 24;
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(v3 + 24);
  unint64_t v2 = *(void *)(v8 + 16);
  if (v2 <= a1)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    goto LABEL_7;
  }
  uint64_t v9 = v8 + 24 * a1;
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v4 = *(void **)(v9 + 40);
  if (*(void *)(v10 + 16))
  {
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v12) {
      return *(void *)(*(void *)(v10 + 56) + 8 * v11);
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v13 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_18;
  }
LABEL_7:
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  v13[2] = v15 + 1;
  v13[v15 + 4] = a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  int64_t v17 = *(void **)v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v17;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    int64_t v17 = (void *)result;
    *(void *)uint64_t v7 = result;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
    int64_t v17 = (void *)result;
    *(void *)uint64_t v7 = result;
  }
  v17[2] = v20 + 1;
  uint64_t v21 = &v17[3 * v20];
  v21[4] = v16;
  v21[5] = v13;
  v21[6] = 0;
  if (*(void *)(*(void *)v7 + 16) > a1)
  {
    uint64_t v22 = *(void *)v7 + 24 * a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *(void *)(v22 + 32);
    *(void *)(v22 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v22 + 32) = v24;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t outlined release of TokenGenerationConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for invokeCallback #1 (_:) in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v2 + 16))(*(void *)(v2 + 24), a1, a2);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<Float>) -> (@error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t partial apply for closure #1 in TGICAPIWrapper.makeSession()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in TGICAPIWrapper.makeSession()(a1, a2, v3, a3);
}

uint64_t outlined retain of TokenGenerationConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, void (*a18)(void))
{
  unint64_t v19 = a18;
  switch((a17 >> 38) & 3)
  {
    case 1uLL:
    case 2uLL:
      uint64_t v24 = a18;
      a18();
      a1 = a5;
      a2 = a6;
      a3 = a7;
      a4 = a8;
      goto LABEL_4;
    case 3uLL:
      uint64_t v24 = a18;
      a18();
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a18)(a5, a6, a7, a8);
      a1 = a9;
      a2 = a10;
      a3 = a11;
      a4 = a12;
LABEL_4:
      unint64_t v19 = v24;
      break;
    default:
      break;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a1, a2, a3, a4);
}

uint64_t outlined copy of LanguageModelReference(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2 && a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(v2 + 16))(*(void *)(v2 + 24), a1);
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError);
  }
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.__allocating_init(tinyModel:draftModel:languageModel:behavior:sampler:)(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v10 = swift_allocObject();
  ThreeStageSpeculativeDecoder.init(tinyModel:draftModel:languageModel:behavior:sampler:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t ThreeStageSpeculativeDecoder.init(tinyModel:draftModel:languageModel:behavior:sampler:)(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  uint64_t v10 = *a4;
  uint64_t v11 = a4[2];
  int v28 = *((_DWORD *)a4 + 6);
  char v29 = *((unsigned char *)a4 + 8);
  char v26 = *((unsigned char *)a4 + 29);
  char v27 = *((unsigned char *)a4 + 28);
  int v24 = *((_DWORD *)a4 + 8);
  char v25 = *((unsigned char *)a4 + 30);
  char v23 = *((unsigned char *)a4 + 36);
  *(void *)(v5 + 328) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v5 + 16);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  *(void *)(v5 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v5 + 64);
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  *(void *)(v5 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a3, v5 + 112);
  uint64_t v16 = a3[3];
  uint64_t v17 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  *(void *)(v5 + 152) = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  *(void *)(v5 + 160) = v10;
  *(unsigned char *)(v5 + 168) = v29;
  *(void *)(v5 + 176) = v11;
  *(_DWORD *)(v5 + 184) = v28;
  *(unsigned char *)(v5 + 188) = v27;
  *(unsigned char *)(v5 + 189) = v26;
  *(unsigned char *)(v5 + 190) = v25;
  *(_DWORD *)(v5 + 192) = v24;
  *(unsigned char *)(v5 + 196) = v23;
  *(void *)(v5 + 320) = v10;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a5, v5 + 200);
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v18);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 32))(v30, v18, v19);
  outlined init with take of LogitCollection(v30, v5 + 240);
  if (v11 == 2)
  {
    unint64_t v20 = &protocol witness table for TopK2Presampler;
    uint64_t v21 = &type metadata for TopK2Presampler;
  }
  else if (v11 == 1)
  {
    unint64_t v20 = &protocol witness table for ArgmaxPresampler;
    uint64_t v21 = &type metadata for ArgmaxPresampler;
  }
  else
  {
    unint64_t v20 = &protocol witness table for BasicLogitPresampler;
    uint64_t v21 = &type metadata for BasicLogitPresampler;
  }
  *(void *)(v5 + 304) = v21;
  *(void *)(v5 + 312) = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 32);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ThreeStageSpeculativeDecoder.BufferedToken(int64x2_t *a1, int64x2_t *a2)
{
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*a1, *a2), (int32x4_t)vceqq_s64(a1[1], a2[1]))), 0xFuLL))))return (a2[2].u8[0] ^ a1[2].u8[0] ^ 1) & 1; {
  else
  }
    return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t ThreeStageSpeculativeDecoder.generateTinyModelTree()()
{
  *(void *)(v1 + 784) = v0;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.generateTinyModelTree(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v1 = v0[98];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  *(void *)(inited + 32) = *(void *)(v1 + 104);
  uint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v0[99] = v3;
  swift_setDeallocating();
  v0[96] = v3;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 25));
  Swift::UInt v4 = v0[28];
  Swift::UInt8 v5 = v0[29];
  __swift_project_boxed_opaque_existential_1(v0 + 25, v4);
  uint64_t v6 = swift_allocObject();
  v0[100] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
  *(void *)(v6 + 32) = *(void *)(v1 + 56);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 280, (uint64_t)(v0 + 30));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[101] = v7;
  *uint64_t v7 = v0;
  v7[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v6, (uint64_t)(v0 + 30), v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80[3];
  void *v81;
  uint64_t v82;

  Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional v81 = v0;
  void v80[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[102];
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, (uint64_t)(v0 + 35));
  }
  else
  {
    v0[39] = 0;
    *(_OWORD *)(v0 + 35) = 0u;
    *(_OWORD *)(v0 + 37) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!v0[38]) {
LABEL_59:
  }
    __break(1u);
  unint64_t v77 = v0 + 93;
  Swift::UInt v2 = v0[103];
  uint64_t v3 = (void *)v0[98];
  outlined init with take of LogitCollection((long long *)(v0 + 35), (uint64_t)(v0 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 25));
  Swift::UInt v4 = v3[7];
  Swift::UInt8 v5 = v3[13];
  uint64_t v6 = v3[19];
  uint64_t v7 = v0[24];
  __swift_project_boxed_opaque_existential_1(v0 + 20, v0[23]);
  v0[104] = v3[22];
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 40))();
  swift_retain();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij21C08makeTinyA4Beam33_8mnopqrstu4810tinyLogits0T4Node05draftV006targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S3itFAKSiXEfU_AIS3iTf1cn_nTf4ngnnn_n(v8, v3, v6, v5, v4);
  swift_release();
  swift_bridgeObjectRelease();
  v0[93] = v9;
  if (!*(void *)(v9 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 20));
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x263F8EE78];
    uint64_t v41 = MEMORY[0x263F8EE78];
    goto LABEL_30;
  }
  uint64_t v74 = (uint64_t)(v0 + 20);
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v73 = v2;
  uint64_t v75 = v0 + 98;
  uint64_t v10 = type metadata accessor for Logger();
  v0[105] = __swift_project_value_buffer(v10, (uint64_t)static Log.device);
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  char v76 = v0;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134217984;
    swift_beginAccess();
    v0[97] = *(void *)(*v77 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v11, v12, "Tiny tree layer 0 speculated %ld tokens", v13, 0xCu);
    MEMORY[0x261206F80](v13, -1, -1);
  }

  swift_beginAccess();
  uint64_t v14 = *v77;
  uint64_t v15 = *(void *)(*v77 + 16);
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15)
  {
    v80[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v16 = v80[0];
    uint64_t v17 = *(void *)(v80[0] + 16);
    uint64_t v18 = 40;
    do
    {
      uint64_t v19 = *(void *)(v14 + v18);
      v80[0] = v16;
      unint64_t v20 = *(void *)(v16 + 24);
      if (v17 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v17 + 1, 1);
        uint64_t v16 = v80[0];
      }
      *(void *)(v16 + 16) = v17 + 1;
      *(void *)(v16 + 8 * v17 + 32) = v19;
      v18 += 32;
      ++v17;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = *(void *)(v16 + 16);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)(v16 + 32);
    do
    {
      char v23 = *v22++;
      specialized Set._Variant.insert(_:)(v80, v23);
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
  uint64_t inited = swift_initStackObject();
  char v25 = inited;
  uint64_t v0 = v76;
  v76[106] = inited;
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  char v26 = *(void *)(v14 + 16);
  char v27 = MEMORY[0x263F8EE78];
  if (v26)
  {
    uint64_t v78 = inited;
    v80[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for TokenTreeNode();
    int v28 = 56;
    do
    {
      char v29 = *(void *)(v14 + v28);
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = v27;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v28 += 32;
      --v26;
    }
    while (v26);
    char v27 = v80[0];
    swift_bridgeObjectRelease();
    char v25 = v78;
  }
  uint64_t v31 = *v75;
  *(void *)(v25 + 32) = v27;
  uint64_t v32 = *(void *)(v14 + 16);
  uint64_t v33 = *(void *)(v31 + 352);
  uint64_t v34 = __OFADD__(v33, v32);
  unint64_t v35 = v33 + v32;
  if (v34)
  {
    __break(1u);
    goto LABEL_58;
  }
  Swift::String v36 = v76[98];
  *(void *)(v31 + 352) = v35;
  uint64_t v37 = *(void *)(v36 + 320);
  v76[107] = v37;
  if (v37 < 1)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v37 == 1)
  {
    if (*(void *)(v25 + 16))
    {
      uint64_t v38 = *(void *)(v25 + 32);
      swift_bridgeObjectRetain();
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = specialized _copyCollectionToContiguousArray<A>(_:)(v39);
      swift_bridgeObjectRelease();
      v80[0] = (uint64_t)v40;
      specialized MutableCollection<>.sort(by:)(v80);
      if (!v73)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v80[0];
        __swift_destroy_boxed_opaque_existential_1(v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
        return v42(v38, v41);
      }
    }
    else
    {
      uint64_t v66 = swift_bridgeObjectRetain();
      uint64_t v67 = specialized _copyCollectionToContiguousArray<A>(_:)(v66);
      swift_bridgeObjectRelease();
      v80[0] = (uint64_t)v67;
      specialized MutableCollection<>.sort(by:)(v80);
      if (!v73)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v80[0];
        __swift_destroy_boxed_opaque_existential_1(v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = MEMORY[0x263F8EE78];
        goto LABEL_30;
      }
    }
    return swift_release();
  }
  v76[109] = v25;
  v76[108] = 1;
  uint64_t v44 = v76[93];
  uint64_t v45 = *(void *)(v44 + 16);
  uint64_t v46 = MEMORY[0x263F8EE78];
  if (v45)
  {
    uint64_t v79 = v76 + 85;
    uint64_t v47 = v76 + 86;
    uint64_t v48 = v76 + 89;
    v76[89] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
    uint64_t v49 = v76[89];
    uint64_t v50 = *(void *)(v49 + 16);
    uint64_t v51 = 48;
    do
    {
      uint64_t v52 = *(void *)(v44 + v51);
      *uint64_t v48 = v49;
      char v53 = *(void *)(v49 + 24);
      if (v50 >= v53 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v50 + 1, 1);
        uint64_t v49 = *v48;
      }
      *(void *)(v49 + 16) = v50 + 1;
      *(void *)(v49 + 8 * v50 + 32) = v52;
      v51 += 32;
      ++v50;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void *)(v44 + 16);
    uint64_t v46 = MEMORY[0x263F8EE78];
    if (v54)
    {
      void *v47 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
      uint64_t v46 = *v47;
      uint64_t v55 = *(void *)(*v47 + 16);
      Swift::String v56 = 40;
      do
      {
        uint64_t v57 = *(void *)(v44 + v56);
        void *v47 = v46;
        unint64_t v58 = *(void *)(v46 + 24);
        if (v55 >= v58 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v55 + 1, 1);
          uint64_t v46 = *v47;
        }
        *(void *)(v46 + 16) = v55 + 1;
        *(void *)(v46 + 8 * v55 + 32) = v57;
        v56 += 32;
        ++v55;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
      uint64_t v59 = *(void *)(v44 + 16);
      int v60 = MEMORY[0x263F8EE78];
      if (v59)
      {
        uint64_t v61 = v76 + 85;
        void *v79 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
        int v60 = *v79;
        uint64_t v62 = *(void *)(*v79 + 16);
        uint64_t v63 = 32;
        do
        {
          uint64_t v64 = *(void *)(v44 + v63);
          char *v61 = v60;
          uint64_t v65 = *(void *)(v60 + 24);
          if (v62 >= v65 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v62 + 1, 1);
            uint64_t v61 = v76 + 85;
            int v60 = *v79;
          }
          *(void *)(v60 + 16) = v62 + 1;
          *(void *)(v60 + 8 * v62 + 32) = v64;
          v63 += 32;
          ++v62;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease();
      }
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v49 = MEMORY[0x263F8EE78];
  }
  int v60 = v46;
LABEL_53:
  v76[112] = v60;
  v76[111] = v49;
  v76[110] = v46;
  uint64_t v68 = v76[98];
  uint64_t v69 = v68 + 280;
  outlined init with copy of DeterministicLanguageModelProtocol(v68 + 16, (uint64_t)(v76 + 45));
  uint64_t v70 = v76[48];
  char v71 = v76[49];
  __swift_project_boxed_opaque_existential_1(v76 + 45, v70);
  outlined init with copy of DeterministicLanguageModelProtocol(v69, (uint64_t)(v76 + 40));
  uint64_t v72 = (void *)swift_task_alloc();
  v76[113] = v72;
  *uint64_t v72 = v76;
  v72[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v49, (uint64_t)(v76 + 40), v70, v71);
}

{
  void *v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  void *v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  long long *v117;
  uint64_t v118;
  void *v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  long long *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t *v137;
  void *v138;
  uint64_t *v139;
  uint64_t v140[4];
  void *v141;
  uint64_t v142;

  uint64_t v141 = v0;
  uint64_t v1 = v0 + 2;
  Swift::UInt v2 = (uint64_t)(v0 + 14);
  v140[2] = *MEMORY[0x263EF8340];
  uint64_t v138 = v0 + 60;
  uint64_t v110 = v0 + 85;
  uint64_t v111 = v0 + 86;
  uint64_t v114 = v0 + 88;
  uint64_t v115 = v0 + 89;
  uint64_t v3 = v0 + 91;
  uint64_t v112 = v0 + 93;
  uint64_t v126 = v0 + 94;
  uint64_t v137 = v0 + 95;
  uint64_t v139 = v0 + 96;
  Swift::UInt v4 = v0[114];
  Swift::UInt8 v5 = v0[112];
  uint64_t v6 = v0[111];
  uint64_t v7 = v0[110];
  uint64_t v8 = v0[109];
  uint64_t v9 = v0[108];
  uint64_t v113 = v0 + 45;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 45));
  uint64_t v10 = MEMORY[0x263F8EE78];
  v0[84] = MEMORY[0x263F8EE78];
  v0[83] = v10;
  uint64_t v132 = v4;
  __int16 v118 = v4 + 32;
  uint64_t v128 = v7;
  uint64_t v129 = v6;
  uint64_t v124 = v7 + 32;
  char v125 = v6 + 32;
  char v127 = v5;
  uint64_t v11 = v5 + 32;
  uint64_t v12 = 0;
  long long v122 = v9 - 1;
  uint64_t v123 = v11;
  uint64_t v131 = v8;
  long long v121 = v8 + 32;
  uint64_t v13 = v0[115];
  uint64_t v116 = (uint64_t)(v0 + 15);
  uint64_t v117 = (long long *)(v0 + 9);
  uint64_t v130 = (long long *)(v0 + 3);
  uint64_t v136 = v0;
  uint64_t v119 = v0 + 14;
  long long v120 = v0 + 2;
  while (1)
  {
    uint64_t v14 = *(void *)(v132 + 16);
    if (v12 == v14)
    {
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)Swift::UInt v2 = 0u;
    }
    else
    {
      if (v12 >= v14) {
        goto LABEL_100;
      }
      uint64_t v9 = v12 + 1;
      outlined init with copy of DeterministicLanguageModelProtocol(v118 + 40 * v12, (uint64_t)v117);
      *(void *)Swift::UInt v2 = v12;
      outlined init with take of LogitCollection(v117, v116);
      ++v12;
    }
    outlined init with take of (offset: Int, element: LogitCollection)?(v2, (uint64_t)v1);
    if (!v0[6])
    {
      swift_bridgeObjectRelease();
      int v60 = v136;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v9 = v136[84];
      Swift::UInt v2 = v9 >> 62;
      if (!(v9 >> 62))
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_102:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v61 = (void *)v60[109];
LABEL_103:
          if (v61[2])
          {
            uint64_t v103 = v61[4];
            swift_bridgeObjectRetain();
            uint64_t v104 = swift_bridgeObjectRetain();
            uint64_t v105 = specialized _copyCollectionToContiguousArray<A>(_:)(v104);
            swift_bridgeObjectRelease();
            v140[0] = (uint64_t)v105;
            specialized MutableCollection<>.sort(by:)(v140);
            if (!v13)
            {
              swift_bridgeObjectRelease();
              uint64_t v106 = v140[0];
LABEL_109:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)(v136 + 20));
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v109 = (uint64_t (*)(uint64_t, uint64_t))v136[1];
              return v109(v103, v106);
            }
          }
          else
          {
            uint64_t v107 = swift_bridgeObjectRetain();
            uint64_t v108 = specialized _copyCollectionToContiguousArray<A>(_:)(v107);
            swift_bridgeObjectRelease();
            v140[0] = (uint64_t)v108;
            specialized MutableCollection<>.sort(by:)(v140);
            if (!v13)
            {
              swift_bridgeObjectRelease();
              uint64_t v106 = v140[0];
              uint64_t v103 = MEMORY[0x263F8EE78];
              goto LABEL_109;
            }
          }
          return swift_release();
        }
LABEL_60:
        uint64_t v61 = (void *)v60[109];
        uint64_t v62 = *(void *)(v131 + 16);
        uint64_t v63 = v61[3];
        swift_bridgeObjectRetain();
        if (v62 >= v63 >> 1) {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v62 + 1, 1, v61);
        }
        v61[2] = v62 + 1;
        v61[v62 + 4] = v9;
        if (v2)
        {
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v64 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v65 = v136[98];
        uint64_t v66 = *(void *)(v65 + 352);
        uint64_t v57 = __OFADD__(v66, v64);
        uint64_t v67 = v66 + v64;
        if (v57)
        {
          __break(1u);
        }
        else
        {
          *(void *)(v65 + 352) = v67;
          v136[93] = v136[83];
          swift_bridgeObjectRelease();
          uint64_t v9 = Logger.logObject.getter();
          LOBYTE(v64) = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled((os_log_t)v9, (os_log_type_t)v64)) {
            goto LABEL_70;
          }
          uint64_t v68 = v136[108];
          Swift::UInt v2 = swift_slowAlloc();
          *(_DWORD *)Swift::UInt v2 = 134218240;
          v136[87] = v68;
          uint64_t v69 = v114;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v2 + 12) = 2048;
          uint64_t v70 = v136[84];
          if (!(v70 >> 62))
          {
            char v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_69:
            *uint64_t v69 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_25FA51000, (os_log_t)v9, (os_log_type_t)v64, "Tiny tree layer %ld speculated %ld tokens", (uint8_t *)v2, 0x16u);
            MEMORY[0x261206F80](v2, -1, -1);
LABEL_70:
            uint64_t v72 = v136[108];
            uint64_t v73 = v136[107];

            swift_bridgeObjectRelease();
            if (v72 + 1 == v73) {
              goto LABEL_103;
            }
            uint64_t v74 = v136[108] + 1;
            v136[109] = v61;
            v136[108] = v74;
            if (v74 == v136[107]) {
              __break(1u);
            }
            uint64_t v75 = *v112;
            char v76 = *(void *)(*v112 + 16);
            unint64_t v77 = MEMORY[0x263F8EE78];
            if (v76)
            {
              *uint64_t v115 = MEMORY[0x263F8EE78];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
              uint64_t v78 = v115;
              uint64_t v79 = *v115;
              uint64_t v80 = *(void *)(*v115 + 16);
              Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional v81 = 48;
              do
              {
                uint64_t v82 = *(void *)(v75 + v81);
                uint64_t *v78 = v79;
                uint64_t v83 = *(void *)(v79 + 24);
                if (v80 >= v83 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v80 + 1, 1);
                  uint64_t v78 = v115;
                  uint64_t v79 = *v115;
                }
                *(void *)(v79 + 16) = v80 + 1;
                *(void *)(v79 + 8 * v80 + 32) = v82;
                v81 += 32;
                ++v80;
                --v76;
              }
              while (v76);
              swift_bridgeObjectRelease();
              unint64_t v84 = *(void *)(v75 + 16);
              unint64_t v77 = MEMORY[0x263F8EE78];
              if (v84)
              {
                uint64_t v85 = v111;
                *uint64_t v111 = MEMORY[0x263F8EE78];
                swift_bridgeObjectRetain();
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84, 0);
                unint64_t v77 = *v111;
                uint64_t v86 = *(void *)(*v111 + 16);
                uint64_t v87 = 40;
                do
                {
                  uint64_t v88 = *(void *)(v75 + v87);
                  *uint64_t v85 = v77;
                  uint64_t v89 = *(void *)(v77 + 24);
                  if (v86 >= v89 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v86 + 1, 1);
                    uint64_t v85 = v111;
                    unint64_t v77 = *v111;
                  }
                  *(void *)(v77 + 16) = v86 + 1;
                  *(void *)(v77 + 8 * v86 + 32) = v88;
                  v87 += 32;
                  ++v86;
                  --v84;
                }
                while (v84);
                swift_bridgeObjectRelease();
                uint64_t v90 = *(void *)(v75 + 16);
                uint64_t v91 = MEMORY[0x263F8EE78];
                if (v90)
                {
                  uint64_t v92 = v110;
                  *uint64_t v110 = MEMORY[0x263F8EE78];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90, 0);
                  uint64_t v91 = *v110;
                  unint64_t v93 = *(void *)(*v110 + 16);
                  unint64_t v94 = 32;
                  do
                  {
                    uint64_t v95 = *(void *)(v75 + v94);
                    char *v92 = v91;
                    uint64_t v96 = *(void *)(v91 + 24);
                    if (v93 >= v96 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v93 + 1, 1);
                      uint64_t v92 = v110;
                      uint64_t v91 = *v110;
                    }
                    *(void *)(v91 + 16) = v93 + 1;
                    *(void *)(v91 + 8 * v93 + 32) = v95;
                    v94 += 32;
                    ++v93;
                    --v90;
                  }
                  while (v90);
                  swift_bridgeObjectRelease();
                }
                goto LABEL_90;
              }
            }
            else
            {
              uint64_t v79 = MEMORY[0x263F8EE78];
            }
            uint64_t v91 = v77;
LABEL_90:
            v136[112] = v91;
            v136[111] = v79;
            v136[110] = v77;
            uint64_t v97 = v136[98];
            uint64_t v98 = v97 + 280;
            outlined init with copy of DeterministicLanguageModelProtocol(v97 + 16, (uint64_t)v113);
            uint64_t v99 = v136[48];
            uint64_t v100 = v136[49];
            __swift_project_boxed_opaque_existential_1(v113, v99);
            outlined init with copy of DeterministicLanguageModelProtocol(v98, (uint64_t)(v136 + 40));
            uint64_t v101 = (void *)swift_task_alloc();
            v136[113] = v101;
            *uint64_t v101 = v136;
            v101[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
            return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v79, (uint64_t)(v136 + 40), v99, v100);
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v69 = v114;
        char v71 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
LABEL_101:
      swift_bridgeObjectRetain();
      int v60 = v136;
      uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v102) {
        goto LABEL_102;
      }
      goto LABEL_60;
    }
    uint64_t v15 = *v1;
    outlined init with take of LogitCollection(v130, (uint64_t)v138);
    if ((v15 & 0x8000000000000000) != 0)
    {
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    if (v15 >= *(void *)(v129 + 16)) {
      goto LABEL_95;
    }
    if (v15 >= *(void *)(v128 + 16)) {
      goto LABEL_96;
    }
    if (v15 >= *(void *)(v127 + 16)) {
      goto LABEL_97;
    }
    uint64_t v133 = v12;
    uint64_t v16 = *(void *)(v125 + 8 * v15);
    uint64_t v17 = v0[104];
    uint64_t v18 = (void *)v0[98];
    uint64_t v19 = *(void *)(v124 + 8 * v15);
    unint64_t v20 = *(void *)(v123 + 8 * v15);
    uint64_t v21 = v0[63];
    uint64_t v22 = v0[64];
    __swift_project_boxed_opaque_existential_1(v138, v21);
    char v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40))(v17, v21, v22);
    swift_retain();
    int v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij21C08makeTinyA4Beam33_8mnopqrstu4810tinyLogits0T4Node05draftV006targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S3itFAKSiXEfU_AIS3iTf1cn_nTf4ngnnn_n(v23, v18, v20, v19, v16);
    uint64_t v134 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    char v25 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v25);
    char v26 = *(void *)(v24 + 16);
    char v135 = v24;
    if (v26)
    {
      uint64_t v13 = v15;
      char v27 = MEMORY[0x263F8EE78];
      *uint64_t v3 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      int v28 = (uint64_t *)(v24 + 56);
      char v29 = v26;
      do
      {
        uint64_t v30 = *v28;
        v28 += 4;
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = v30;
        *(void *)(v31 + 24) = v27;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v29;
      }
      while (v29);
      uint64_t v32 = *v3;
      Swift::UInt v2 = v27;
      uint64_t v15 = v13;
    }
    else
    {
      Swift::UInt v2 = MEMORY[0x263F8EE78];
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
    uint64_t v33 = v136[108];
    swift_beginAccess();
    uint64_t v34 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v34);
    swift_endAccess();
    uint64_t v9 = (unint64_t)v126;
    if (v33 > *(void *)(v131 + 16)) {
      goto LABEL_98;
    }
    unint64_t v35 = *(void *)(v121 + 8 * v122);
    if ((v35 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      Swift::String v36 = MEMORY[0x261205930](v15, v35);
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((int64_t)v15 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_99;
      }
      Swift::String v36 = *(void *)(v35 + 8 * v15 + 32);
      swift_retain();
    }
    swift_beginAccess();
    *(void *)(v36 + 24) = v32;
    swift_bridgeObjectRelease();
    swift_release();
    if (v26)
    {
      *uint64_t v126 = v2;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
      uint64_t v37 = *v126;
      uint64_t v38 = *(void *)(*v126 + 16);
      uint64_t v39 = 40;
      do
      {
        uint64_t v40 = *(void *)(v135 + v39);
        *uint64_t v126 = v37;
        uint64_t v41 = *(void *)(v37 + 24);
        if (v38 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v38 + 1, 1);
          uint64_t v37 = *v126;
        }
        *(void *)(v37 + 16) = v38 + 1;
        *(void *)(v37 + 8 * v38 + 32) = v40;
        v39 += 32;
        ++v38;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = v2;
    }
    uint64_t v42 = *(void *)(v37 + 16);
    uint64_t v9 = -1;
    if (v42) {
      break;
    }
LABEL_2:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
    uint64_t v0 = v136;
    Swift::UInt v2 = (uint64_t)v119;
    uint64_t v1 = v120;
    uint64_t v12 = v133;
    uint64_t v13 = v134;
  }
  uint64_t v43 = 0;
  uint64_t v13 = v37 + 32;
  uint64_t v44 = *v139;
  while (1)
  {
    uint64_t v45 = v44 + 56;
    while (1)
    {
      Swift::UInt v2 = *(void *)(v13 + 8 * v43++);
      uint64_t v46 = static Hasher._hash(seed:_:)();
      uint64_t v47 = -1 << *(unsigned char *)(v44 + 32);
      uint64_t v48 = v46 & ~v47;
      if (((*(void *)(v45 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
        break;
      }
      uint64_t v49 = *(void *)(v44 + 48);
      if (*(void *)(v49 + 8 * v48) != v2)
      {
        uint64_t v50 = ~v47;
        do
        {
          uint64_t v48 = (v48 + 1) & v50;
          if (((*(void *)(v45 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
            goto LABEL_38;
          }
        }
        while (*(void *)(v49 + 8 * v48) != v2);
      }
      if (v43 == v42) {
        goto LABEL_2;
      }
    }
LABEL_38:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v137 = v44;
    *uint64_t v139 = 0x8000000000000000;
    if (*(void *)(v44 + 24) > *(void *)(v44 + 16))
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        uint64_t v44 = *v137;
      }
      uint64_t v9 = -1;
      goto LABEL_51;
    }
    if (isUniquelyReferenced_nonNull_native) {
      specialized _NativeSet.resize(capacity:)();
    }
    else {
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v44 = *v137;
    uint64_t v52 = static Hasher._hash(seed:_:)();
    uint64_t v9 = -1;
    char v53 = -1 << *(unsigned char *)(v44 + 32);
    uint64_t v48 = v52 & ~v53;
    if (((*(void *)(v44 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
      goto LABEL_51;
    }
    uint64_t v54 = *(void *)(v44 + 48);
    if (*(void *)(v54 + 8 * v48) == v2) {
      break;
    }
    uint64_t v55 = ~v53;
    while (1)
    {
      uint64_t v48 = (v48 + 1) & v55;
      if (((*(void *)(v44 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v48) & 1) == 0) {
        break;
      }
      if (*(void *)(v54 + 8 * v48) == v2) {
        goto LABEL_55;
      }
    }
LABEL_51:
    *(void *)(v44 + ((v48 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v48;
    *(void *)(*(void *)(v44 + 48) + 8 * v48) = v2;
    Swift::String v56 = *(void *)(v44 + 16);
    uint64_t v57 = __OFADD__(v56, 1);
    unint64_t v58 = v56 + 1;
    if (v57)
    {
      __break(1u);
      goto LABEL_94;
    }
    *(void *)(v44 + 16) = v58;
    *uint64_t v139 = v44;
    swift_bridgeObjectRelease();
    if (v43 == v42) {
      goto LABEL_2;
    }
  }
LABEL_55:
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 360);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ThreeStageSpeculativeDecoder.generateTinyModelTree()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 816) = a1;
  *(void *)(v3 + 824) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    Swift::UInt v4 = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    Swift::UInt v4 = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 912) = a1;
  *(void *)(v3 + 920) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 320);
    swift_bridgeObjectRelease();
    Swift::UInt v4 = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 320);
    Swift::UInt v4 = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 800) = v4;
  *(unsigned char *)(v5 + 936) = a4;
  *(void *)(v5 + 792) = a3;
  *(void *)(v5 + 784) = a2;
  *(void *)(v5 + 776) = a1;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:), 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)()
{
  if ((uint64_t)v0[97] < 1)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v12 = MEMORY[0x263F8EE78];
    return v10(v11, v12);
  }
  else
  {
    uint64_t v1 = v0[100];
    uint64_t v2 = v0[98];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
    *(void *)(inited + 32) = *(void *)(v1 + 152);
    uint64_t v4 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    v0[101] = v4;
    swift_setDeallocating();
    v0[95] = v4;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 64, (uint64_t)(v0 + 25));
    uint64_t v5 = v0[28];
    uint64_t v6 = v0[29];
    __swift_project_boxed_opaque_existential_1(v0 + 25, v5);
    uint64_t v7 = swift_allocObject();
    v0[102] = v7;
    *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
    *(void *)(v7 + 32) = v2;
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 280, (uint64_t)(v0 + 30));
    uint64_t v8 = (void *)swift_task_alloc();
    v0[103] = v8;
    *uint64_t v8 = v0;
    v8[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
    return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v7, (uint64_t)(v0 + 30), v5, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70[3];
  uint64_t v71;
  uint64_t v72;

  char v71 = v0;
  v70[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 832);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 280);
  }
  else
  {
    *(void *)(v0 + 312) = 0;
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 304)) {
LABEL_56:
  }
    __break(1u);
  uint64_t v2 = *(void *)(v0 + 840);
  uint64_t v3 = *(void **)(v0 + 800);
  uint64_t v69 = (uint64_t *)(v0 + 736);
  uint64_t v4 = *(void *)(v0 + 792);
  uint64_t v5 = *(void *)(v0 + 784);
  outlined init with take of LogitCollection((long long *)(v0 + 280), v0 + 360);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v68 = v0 + 360;
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 360), *(void *)(v0 + 384));
  *(void *)(v0 + 848) = v3[22];
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 40))();
  swift_retain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v7, v3, v4, v5);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 736) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = specialized _copyCollectionToContiguousArray<A>(_:)(v39);
    swift_bridgeObjectRelease();
    v70[0] = (uint64_t)v40;
    specialized MutableCollection<>.sort(by:)(v70);
    if (!v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = v70[0];
      __swift_destroy_boxed_opaque_existential_1(v68);
      swift_bridgeObjectRelease();
      unint64_t v35 = MEMORY[0x263F8EE78];
      goto LABEL_46;
    }
    return swift_release();
  }
  uint64_t v67 = v2;
  uint64_t v65 = (uint64_t *)(v0 + 680);
  uint64_t v66 = (uint64_t *)(v0 + 704);
  v70[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  uint64_t v10 = v70[0];
  uint64_t v11 = *(void *)(v70[0] + 16);
  uint64_t v12 = 32;
  do
  {
    uint64_t v13 = *(void *)(v8 + v12);
    v70[0] = v10;
    uint64_t v14 = *(void *)(v10 + 24);
    if (v11 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v11 + 1, 1);
      uint64_t v10 = v70[0];
    }
    *(void *)(v10 + 16) = v11 + 1;
    *(void *)(v10 + 8 * v11 + 32) = v13;
    v12 += 32;
    ++v11;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v10 + 16);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)(v10 + 32);
    do
    {
      uint64_t v17 = *v16++;
      specialized Set._Variant.insert(_:)(v70, v17);
      --v15;
    }
    while (v15);
  }
  swift_release();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  *(void *)(v0 + 856) = __swift_project_value_buffer(v18, (uint64_t)static Log.device);
  uint64_t v19 = Logger.logObject.getter();
  unint64_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    swift_beginAccess();
    *(void *)(v0 + 768) = *(void *)(*(void *)(v0 + 736) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v19, v20, "Draft tree layer 0 speculated %ld tokens", v21, 0xCu);
    MEMORY[0x261206F80](v21, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 864) = inited;
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  swift_beginAccess();
  char v23 = *(void *)(v0 + 736);
  int v24 = *(void *)(v23 + 16);
  char v25 = MEMORY[0x263F8EE78];
  if (v24)
  {
    v70[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for TokenTreeNode();
    char v26 = 56;
    do
    {
      char v27 = *(void *)(v23 + v26);
      int v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = v25;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v26 += 32;
      --v24;
    }
    while (v24);
    char v25 = v70[0];
    swift_bridgeObjectRelease();
  }
  char v29 = *(void *)(v0 + 776);
  *(void *)(inited + 32) = v25;
  if (v29 == 1)
  {
    if ((*(unsigned char *)(v0 + 936) & 1) == 0)
    {
      uint64_t v30 = *(void *)(v0 + 800);
      uint64_t v31 = *(void *)(inited + 16);
      uint64_t v32 = *(void *)(v30 + 368);
      uint64_t v33 = __OFADD__(v32, v31);
      uint64_t v34 = v32 + v31;
      if (v33)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      *(void *)(v30 + 368) = v34;
    }
    if (*(void *)(inited + 16))
    {
      unint64_t v35 = *(void *)(inited + 32);
      swift_bridgeObjectRetain();
      Swift::String v36 = swift_bridgeObjectRetain();
      uint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v36);
      swift_bridgeObjectRelease();
      v70[0] = (uint64_t)v37;
      specialized MutableCollection<>.sort(by:)(v70);
      if (!v67)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v70[0];
        __swift_destroy_boxed_opaque_existential_1(v68);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_46:
        uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v59(v35, v38);
      }
      return swift_release();
    }
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v42 = *(void *)(v0 + 776);
  if (v42 <= 1) {
    uint64_t v43 = 1;
  }
  else {
    uint64_t v43 = *(void *)(v0 + 776);
  }
  *(void *)(v0 + 872) = v43;
  *(void *)(v0 + 888) = inited;
  *(void *)(v0 + 880) = 1;
  if (v42 < 2) {
    goto LABEL_54;
  }
  uint64_t v44 = *v69;
  uint64_t v45 = *(void *)(*v69 + 16);
  uint64_t v46 = MEMORY[0x263F8EE78];
  if (v45)
  {
    uint64_t v47 = (uint64_t *)(v0 + 704);
    *uint64_t v66 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
    uint64_t v46 = *v66;
    uint64_t v48 = *(void *)(*v66 + 16);
    uint64_t v49 = 40;
    do
    {
      uint64_t v50 = *(void *)(v44 + v49);
      void *v47 = v46;
      uint64_t v51 = *(void *)(v46 + 24);
      if (v48 >= v51 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v48 + 1, 1);
        uint64_t v47 = (uint64_t *)(v0 + 704);
        uint64_t v46 = *v66;
      }
      *(void *)(v46 + 16) = v48 + 1;
      *(void *)(v46 + 8 * v48 + 32) = v50;
      v49 += 32;
      ++v48;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v44 + 16);
    char v53 = MEMORY[0x263F8EE78];
    if (v52)
    {
      uint64_t v54 = (void *)(v0 + 680);
      *uint64_t v65 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      char v53 = *v65;
      uint64_t v55 = *(void *)(*v65 + 16);
      Swift::String v56 = 32;
      do
      {
        uint64_t v57 = *(void *)(v44 + v56);
        char *v54 = v53;
        unint64_t v58 = *(void *)(v53 + 24);
        if (v55 >= v58 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v55 + 1, 1);
          uint64_t v54 = (void *)(v0 + 680);
          char v53 = *v65;
        }
        *(void *)(v53 + 16) = v55 + 1;
        *(void *)(v53 + 8 * v55 + 32) = v57;
        v56 += 32;
        ++v55;
        --v52;
      }
      while (v52);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v53 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 904) = v53;
  *(void *)(v0 + 896) = v46;
  int v60 = *(void *)(v0 + 800);
  uint64_t v61 = v60 + 280;
  outlined init with copy of DeterministicLanguageModelProtocol(v60 + 64, v0 + 440);
  uint64_t v62 = *(void *)(v0 + 464);
  uint64_t v63 = *(void *)(v0 + 472);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 440), v62);
  outlined init with copy of DeterministicLanguageModelProtocol(v61, v0 + 400);
  uint64_t v64 = (void *)swift_task_alloc();
  *(void *)(v0 + 912) = v64;
  *uint64_t v64 = v0;
  v64[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v46, v0 + 400, v62, v63);
}

{
  unint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t **v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  void *v93;
  unint64_t v94;
  void *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  long long *v99;
  uint64_t v100;
  unint64_t **v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  long long *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t *v118;
  void *v119;
  uint64_t *v120;
  uint64_t v121[4];
  unint64_t v122;
  uint64_t v123;

  long long v122 = v0;
  uint64_t v1 = (unint64_t *)(v0 + 16);
  uint64_t v2 = v0 + 64;
  v121[2] = *MEMORY[0x263EF8340];
  uint64_t v119 = (void *)(v0 + 480);
  uint64_t v112 = v0 + 672;
  uint64_t v96 = (uint64_t *)(v0 + 696);
  uint64_t v97 = (uint64_t *)(v0 + 704);
  uint64_t v3 = v0 + 720;
  unint64_t v93 = (void *)(v0 + 680);
  unint64_t v94 = v0 + 736;
  uint64_t v101 = (unint64_t **)(v0 + 744);
  __int16 v118 = (uint64_t *)(v0 + 752);
  long long v120 = (uint64_t *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 920);
  uint64_t v5 = *(void *)(v0 + 904);
  uint64_t v6 = *(void *)(v0 + 896);
  uint64_t v7 = *(void *)(v0 + 888);
  uint64_t v8 = *(void *)(v0 + 880);
  uint64_t v95 = (void *)(v0 + 440);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 672) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 664) = v9;
  uint64_t v113 = v4;
  uint64_t v100 = v4 + 32;
  uint64_t v108 = v5;
  uint64_t v109 = v6;
  uint64_t v106 = v5 + 32;
  uint64_t v107 = v6 + 32;
  uint64_t v105 = v8 - 1;
  uint64_t v111 = v7;
  uint64_t v104 = v7 + 32;
  uint64_t v10 = 0;
  uint64_t v11 = *(void **)(v0 + 928);
  uint64_t v98 = v0 + 72;
  uint64_t v99 = (long long *)(v0 + 120);
  uint64_t v110 = (long long *)(v0 + 24);
  uint64_t v116 = (void *)v0;
  uint64_t v102 = v0 + 64;
  uint64_t v103 = (unint64_t *)(v0 + 16);
  while (1)
  {
    uint64_t v12 = *(void *)(v113 + 16);
    if (v10 == v12)
    {
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
    }
    else
    {
      if (v10 >= v12) {
        goto LABEL_89;
      }
      uint64_t v8 = v10 + 1;
      outlined init with copy of DeterministicLanguageModelProtocol(v100 + 40 * v10, (uint64_t)v99);
      *(void *)uint64_t v2 = v10;
      outlined init with take of LogitCollection(v99, v98);
      ++v10;
    }
    outlined init with take of (offset: Int, element: LogitCollection)?(v2, (uint64_t)v1);
    if (!*(void *)(v0 + 48))
    {
      uint64_t v8 = *(void *)(v0 + 904);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v3 = *(void *)(v0 + 672);
      if (!((unint64_t)v3 >> 62))
      {
        if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_94:
          uint64_t v57 = v116;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::String v56 = (void *)v116[111];
          while (1)
          {
            if ((v57[117] & 1) == 0)
            {
              unint64_t v84 = v116[100];
              uint64_t v85 = v56[2];
              uint64_t v86 = *(void *)(v84 + 368);
              char v53 = __OFADD__(v86, v85);
              uint64_t v87 = v86 + v85;
              if (v53)
              {
                __break(1u);
LABEL_109:
                swift_bridgeObjectRetain();
                uint64_t v59 = v96;
                uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                goto LABEL_65;
              }
              *(void *)(v84 + 368) = v87;
            }
            if (v56[2])
            {
              uint64_t v88 = v56[4];
              swift_bridgeObjectRetain();
              uint64_t v89 = swift_bridgeObjectRetain();
              uint64_t v90 = specialized _copyCollectionToContiguousArray<A>(_:)(v89);
              swift_bridgeObjectRelease();
              v121[0] = (uint64_t)v90;
              specialized MutableCollection<>.sort(by:)(v121);
              if (v11)
              {
                return swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v91 = v121[0];
                __swift_destroy_boxed_opaque_existential_1((uint64_t)(v116 + 45));
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t))v116[1];
                return v92(v88, v91);
              }
            }
            __break(1u);
LABEL_107:
            Swift::String v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), (int64_t)v1, 1, v56);
LABEL_62:
            uint64_t v57 = v116;
            v56[2] = v1;
            v56[v0 + 4] = v3;
            uint64_t v1 = (unint64_t *)v116[83];
            v116[92] = v1;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v8 = Logger.logObject.getter();
            uint64_t v3 = static os_log_type_t.debug.getter();
            if (!os_log_type_enabled((os_log_t)v8, (os_log_type_t)v3)) {
              goto LABEL_66;
            }
            unint64_t v58 = v116[110];
            uint64_t v2 = swift_slowAlloc();
            *(_DWORD *)uint64_t v2 = 134218240;
            v116[86] = v58;
            uint64_t v59 = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v2 + 12) = 2048;
            int v60 = v116[84];
            if (v60 >> 62) {
              goto LABEL_109;
            }
            uint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_65:
            *uint64_t v59 = v61;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_25FA51000, (os_log_t)v8, (os_log_type_t)v3, "Draft tree layer %ld speculated %ld tokens", (uint8_t *)v2, 0x16u);
            MEMORY[0x261206F80](v2, -1, -1);
            uint64_t v57 = v116;
LABEL_66:

            swift_bridgeObjectRelease();
            uint64_t v8 = v57[97];
            uint64_t v0 = v57[110] + 1;
            swift_bridgeObjectRelease();
            if (v0 != v8)
            {
              uint64_t v62 = v57[110] + 1;
              v57[111] = v56;
              v57[110] = v62;
              if (v62 == v57[109]) {
                __break(1u);
              }
              uint64_t v63 = *(void *)v94;
              uint64_t v64 = *(void *)(*(void *)v94 + 16);
              uint64_t v65 = MEMORY[0x263F8EE78];
              if (v64)
              {
                *uint64_t v97 = MEMORY[0x263F8EE78];
                swift_bridgeObjectRetain();
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
                uint64_t v66 = v97;
                uint64_t v65 = *v97;
                uint64_t v67 = *(void *)(*v97 + 16);
                uint64_t v68 = 40;
                do
                {
                  uint64_t v69 = *(void *)(v63 + v68);
                  *uint64_t v66 = v65;
                  uint64_t v70 = *(void *)(v65 + 24);
                  if (v67 >= v70 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v67 + 1, 1);
                    uint64_t v66 = v97;
                    uint64_t v65 = *v97;
                  }
                  *(void *)(v65 + 16) = v67 + 1;
                  *(void *)(v65 + 8 * v67 + 32) = v69;
                  v68 += 32;
                  ++v67;
                  --v64;
                }
                while (v64);
                swift_bridgeObjectRelease();
                char v71 = *(void *)(v63 + 16);
                uint64_t v72 = MEMORY[0x263F8EE78];
                if (v71)
                {
                  uint64_t v73 = v93;
                  *unint64_t v93 = MEMORY[0x263F8EE78];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
                  uint64_t v72 = *v93;
                  uint64_t v74 = *(void *)(*v93 + 16);
                  uint64_t v75 = 32;
                  do
                  {
                    char v76 = *(void *)(v63 + v75);
                    *uint64_t v73 = v72;
                    unint64_t v77 = *(void *)(v72 + 24);
                    if (v74 >= v77 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v74 + 1, 1);
                      uint64_t v73 = v93;
                      uint64_t v72 = *v93;
                    }
                    *(void *)(v72 + 16) = v74 + 1;
                    *(void *)(v72 + 8 * v74 + 32) = v76;
                    v75 += 32;
                    ++v74;
                    --v71;
                  }
                  while (v71);
                  swift_bridgeObjectRelease();
                }
              }
              else
              {
                uint64_t v72 = MEMORY[0x263F8EE78];
              }
              v116[113] = v72;
              v116[112] = v65;
              uint64_t v78 = v116[100];
              uint64_t v79 = v78 + 280;
              outlined init with copy of DeterministicLanguageModelProtocol(v78 + 64, (uint64_t)v95);
              uint64_t v80 = v116[58];
              Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional v81 = v116[59];
              __swift_project_boxed_opaque_existential_1(v95, v80);
              outlined init with copy of DeterministicLanguageModelProtocol(v79, (uint64_t)(v116 + 50));
              uint64_t v82 = (void *)swift_task_alloc();
              v116[114] = v82;
              char *v82 = v116;
              v82[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
              return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v65, (uint64_t)(v116 + 50), v80, v81);
            }
          }
        }
LABEL_61:
        Swift::String v56 = (void *)v116[111];
        uint64_t v0 = *(void *)(v111 + 16);
        uint64_t v8 = v56[3];
        uint64_t v1 = (unint64_t *)(v0 + 1);
        swift_bridgeObjectRetain();
        if (v0 >= v8 >> 1) {
          goto LABEL_107;
        }
        goto LABEL_62;
      }
LABEL_90:
      if (v3 < 0) {
        uint64_t v0 = v3;
      }
      else {
        uint64_t v0 = v3 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v83) {
        goto LABEL_94;
      }
      goto LABEL_61;
    }
    uint64_t v13 = *v1;
    outlined init with take of LogitCollection(v110, (uint64_t)v119);
    if ((v13 & 0x8000000000000000) != 0) {
      goto LABEL_84;
    }
    if (v13 >= *(void *)(v109 + 16))
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v13 >= *(void *)(v108 + 16)) {
      goto LABEL_86;
    }
    uint64_t v114 = v10;
    uint64_t v14 = *(void *)(v0 + 848);
    uint64_t v15 = *(void **)(v0 + 800);
    uint64_t v16 = *(void *)(v107 + 8 * v13);
    uint64_t v17 = *(void *)(v106 + 8 * v13);
    uint64_t v19 = *(void *)(v0 + 504);
    uint64_t v18 = *(void *)(v0 + 512);
    __swift_project_boxed_opaque_existential_1(v119, v19);
    unint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(v14, v19, v18);
    swift_retain();
    uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v20, v15, v17, v16);
    uint64_t v117 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v22 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v22);
    char v23 = *(void *)(v21 + 16);
    uint64_t v115 = v21;
    if (v23)
    {
      uint64_t v11 = (void *)v13;
      int v24 = (unint64_t *)MEMORY[0x263F8EE78];
      *(void *)uint64_t v3 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      char v25 = (uint64_t *)(v21 + 56);
      char v26 = v23;
      do
      {
        char v27 = *v25;
        v25 += 4;
        int v28 = swift_allocObject();
        *(void *)(v28 + 16) = v27;
        *(void *)(v28 + 24) = v24;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v26;
      }
      while (v26);
      uint64_t v2 = *(void *)v3;
      uint64_t v1 = v24;
      uint64_t v13 = (unint64_t)v11;
    }
    else
    {
      uint64_t v1 = (unint64_t *)MEMORY[0x263F8EE78];
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    char v29 = v116[110];
    uint64_t v8 = v112;
    swift_beginAccess();
    uint64_t v30 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v30);
    swift_endAccess();
    if (v29 > *(void *)(v111 + 16)) {
      goto LABEL_87;
    }
    uint64_t v31 = *(void *)(v104 + 8 * v105);
    if ((v31 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = MEMORY[0x261205930](v13, v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((int64_t)v13 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_88;
      }
      uint64_t v32 = *(void *)(v31 + 8 * v13 + 32);
      swift_retain();
    }
    swift_beginAccess();
    *(void *)(v32 + 24) = v2;
    swift_bridgeObjectRelease();
    swift_release();
    if (v23)
    {
      uint64_t v33 = v101;
      *uint64_t v101 = v1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      uint64_t v34 = *v101;
      unint64_t v35 = (*v101)[2];
      Swift::String v36 = 32;
      uint64_t v11 = v117;
      do
      {
        uint64_t v37 = *(void *)(v115 + v36);
        char *v33 = v34;
        uint64_t v38 = v34[3];
        if (v35 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v35 + 1, 1);
          uint64_t v33 = v101;
          uint64_t v34 = *v101;
        }
        void v34[2] = v35 + 1;
        v34[v35 + 4] = v37;
        v36 += 32;
        ++v35;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v1;
      uint64_t v11 = v117;
    }
    uint64_t v39 = v34[2];
    uint64_t v8 = -1;
    if (v39) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v119);
    uint64_t v0 = (unint64_t)v116;
    uint64_t v2 = v102;
    uint64_t v1 = v103;
    uint64_t v10 = v114;
  }
  uint64_t v2 = 0;
  uint64_t v11 = v34 + 4;
  uint64_t v40 = *v120;
  while (1)
  {
    uint64_t v41 = v40 + 56;
    while (1)
    {
      uint64_t v1 = (unint64_t *)v11[v2++];
      uint64_t v42 = static Hasher._hash(seed:_:)();
      uint64_t v43 = -1 << *(unsigned char *)(v40 + 32);
      uint64_t v44 = v42 & ~v43;
      if (((*(void *)(v41 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
        break;
      }
      uint64_t v45 = *(void *)(v40 + 48);
      if (*(unint64_t **)(v45 + 8 * v44) != v1)
      {
        uint64_t v46 = ~v43;
        do
        {
          uint64_t v44 = (v44 + 1) & v46;
          if (((*(void *)(v41 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
            goto LABEL_38;
          }
        }
        while (*(unint64_t **)(v45 + 8 * v44) != v1);
      }
      if (v2 == v39) {
        goto LABEL_2;
      }
    }
LABEL_38:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *__int16 v118 = v40;
    *long long v120 = 0x8000000000000000;
    if (*(void *)(v40 + 24) > *(void *)(v40 + 16))
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        uint64_t v40 = *v118;
      }
      uint64_t v8 = -1;
      goto LABEL_51;
    }
    if (isUniquelyReferenced_nonNull_native) {
      specialized _NativeSet.resize(capacity:)();
    }
    else {
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v40 = *v118;
    uint64_t v48 = static Hasher._hash(seed:_:)();
    uint64_t v8 = -1;
    uint64_t v49 = -1 << *(unsigned char *)(v40 + 32);
    uint64_t v44 = v48 & ~v49;
    if (((*(void *)(v40 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
      goto LABEL_51;
    }
    uint64_t v50 = *(void *)(v40 + 48);
    if (*(unint64_t **)(v50 + 8 * v44) == v1) {
      break;
    }
    uint64_t v51 = ~v49;
    while (1)
    {
      uint64_t v44 = (v44 + 1) & v51;
      if (((*(void *)(v40 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
        break;
      }
      if (*(unint64_t **)(v50 + 8 * v44) == v1) {
        goto LABEL_56;
      }
    }
LABEL_51:
    *(void *)(v40 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v44;
    *(void *)(*(void *)(v40 + 48) + 8 * v44) = v1;
    uint64_t v52 = *(void *)(v40 + 16);
    char v53 = __OFADD__(v52, 1);
    uint64_t v54 = v52 + 1;
    if (v53)
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    *(void *)(v40 + 16) = v54;
    *long long v120 = v40;
    swift_bridgeObjectRelease();
    if (v2 == v39)
    {
LABEL_2:
      swift_bridgeObjectRelease();
      uint64_t v11 = v117;
      goto LABEL_3;
    }
  }
LABEL_56:
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 360);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 832) = a1;
  *(void *)(v3 + 840) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    uint64_t v4 = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    uint64_t v4 = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 920) = a1;
  *(void *)(v3 + 928) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 400);
    swift_bridgeObjectRelease();
    uint64_t v4 = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 400);
    uint64_t v4 = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)(uint64_t a1, uint64_t a2)
{
  v3[59] = a2;
  v3[60] = v2;
  v3[58] = a1;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:), 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 504) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  else
  {
    *(void *)(v6 + 512) = a2;
    *(void *)(v6 + 520) = a1;
    uint64_t v7 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 536) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  else
  {
    *(void *)(v6 + 544) = a2;
    *(void *)(v6 + 552) = a1;
    uint64_t v7 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = (void *)*v3;
  v4[86] = a1;
  v4[87] = a2;
  v4[88] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  else
  {
    uint64_t v5 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)()
{
  unint64_t v198 = v0;
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void **)(v0 + 480);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  *(void *)(inited + 32) = v2[19];
  uint64_t v4 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  *(void *)(v0 + 400) = v4;
  if (!*(void *)(v1 + 16) || (unint64_t v5 = v2[13], v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v7 & 1) == 0))
  {
    uint64_t v22 = *(void *)(v0 + 480);
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)(v22 + 320);
    uint64_t v24 = v2[13];
    uint64_t v25 = v2[19];
    uint64_t v26 = swift_task_alloc();
    *(void *)(v0 + 528) = v26;
    *(void *)uint64_t v26 = v0;
    *(void *)(v26 + 8) = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
    *(void *)(v26 + 800) = *(void *)(v0 + 480);
    *(unsigned char *)(v26 + 936) = 0;
    *(void *)(v26 + 792) = v25;
    *(void *)(v26 + 784) = v24;
    goto LABEL_14;
  }
  uint64_t v8 = *(void **)(v0 + 480);
  unint64_t v9 = *(void *)(v0 + 464);
  outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(*(void *)(v0 + 472) + 56) + 40 * v6, v0 + 136);
  outlined init with take of LogitCollection((long long *)(v0 + 136), v0 + 96);
  uint64_t v10 = v2[19];
  unint64_t v11 = *(void *)(v0 + 128);
  uint64_t v192 = (void *)(v0 + 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), *(void *)(v0 + 120));
  uint64_t v196 = (void *)v0;
  *(void *)(v0 + 488) = v8[22];
  uint64_t v12 = (*(uint64_t (**)(void))(v11 + 40))();
  swift_retain();
  uint64_t v195 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v12, v8, v10, v5);
  uint64_t v191 = v8;
  swift_release();
  swift_bridgeObjectRelease();
  if (v9 >> 62) {
    goto LABEL_216;
  }
  uint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (v13)
    {
      v197[0] = MEMORY[0x263F8EE78];
      uint64_t v15 = v197;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
      if (v13 < 0) {
        goto LABEL_218;
      }
      uint64_t v14 = v197[0];
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v195;
        do
        {
          uint64_t v19 = *(void *)(MEMORY[0x261205930](v17, v196[58]) + 16);
          swift_unknownObjectRelease();
          v197[0] = v14;
          unint64_t v21 = *(void *)(v14 + 16);
          unint64_t v20 = *(void *)(v14 + 24);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            uint64_t v18 = v195;
            uint64_t v14 = v197[0];
          }
          ++v17;
          *(void *)(v14 + 16) = v21 + 1;
          *(void *)(v14 + 8 * v21 + 32) = v19;
        }
        while (v13 != v17);
      }
      else
      {
        uint64_t v18 = v195;
        uint64_t v46 = v196[58] + 32;
        unint64_t v47 = *(void *)(v197[0] + 16);
        uint64_t v48 = v13;
        do
        {
          uint64_t v49 = *(void *)(*(void *)v46 + 16);
          v197[0] = v14;
          unint64_t v50 = *(void *)(v14 + 24);
          if (v47 >= v50 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v47 + 1, 1);
            uint64_t v18 = v195;
            uint64_t v14 = v197[0];
          }
          *(void *)(v14 + 16) = v47 + 1;
          *(void *)(v14 + 8 * v47 + 32) = v49;
          v46 += 8;
          ++v47;
          --v48;
        }
        while (v48);
      }
    }
    else
    {
      uint64_t v18 = v195;
    }
    unint64_t v11 = *(void *)(v18 + 16);
    unint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v193 = (void *)v11;
    if (v11)
    {
      uint64_t v30 = v18;
      v197[0] = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
      uint64_t v31 = v197[0];
      unint64_t v32 = *(void *)(v197[0] + 16);
      uint64_t v33 = (uint64_t *)(v30 + 56);
      unint64_t v34 = v11;
      do
      {
        uint64_t v36 = *v33;
        v33 += 4;
        uint64_t v35 = v36;
        v197[0] = v31;
        unint64_t v37 = *(void *)(v31 + 24);
        if (v32 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v32 + 1, 1);
          uint64_t v31 = v197[0];
        }
        *(void *)(v31 + 16) = v32 + 1;
        *(void *)(v31 + 8 * v32++ + 32) = v35;
        --v34;
      }
      while (v34);
    }
    else
    {
      uint64_t v31 = MEMORY[0x263F8EE78];
    }
    char v38 = specialized Sequence<>.elementsEqual<A>(_:)(v31, v14);
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
      uint64_t v43 = v196[60];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v43 + 320);
      uint64_t v44 = v2[13];
      uint64_t v45 = v2[19];
      uint64_t v26 = swift_task_alloc();
      v196[62] = v26;
      *(void *)uint64_t v26 = v196;
      *(void *)(v26 + 8) = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
      *(void *)(v26 + 800) = v196[60];
      *(unsigned char *)(v26 + 936) = 0;
      *(void *)(v26 + 792) = v45;
      *(void *)(v26 + 784) = v44;
      goto LABEL_14;
    }
    if (v11)
    {
      v197[0] = v9;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      uint64_t v39 = (uint64_t *)(v195 + 56);
      unint64_t v40 = v11;
      do
      {
        uint64_t v41 = *v39;
        v39 += 4;
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = v41;
        *(void *)(v42 + 24) = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v11;
      }
      while (v11);
      unint64_t v0 = v197[0];
      unint64_t v11 = v40;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v0 = MEMORY[0x263F8EE78];
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v5 = v8[2];
    unint64_t v16 = v8[3];
    uint64_t v15 = (uint64_t *)(v5 + 1);
    if (v5 >= v16 >> 1) {
      goto LABEL_223;
    }
    while (1)
    {
      v8[2] = v15;
      v8[v5 + 4] = v0;
      if (v11)
      {
        v197[0] = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
        uint64_t v51 = v197[0];
        unint64_t v9 = v11;
        unint64_t v11 = *(void *)(v197[0] + 16);
        uint64_t v52 = 32;
        uint64_t v53 = v195;
        do
        {
          uint64_t v54 = *(void *)(v53 + v52);
          v197[0] = v51;
          unint64_t v55 = *(void *)(v51 + 24);
          if (v11 >= v55 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v11 + 1, 1);
            uint64_t v53 = v195;
            uint64_t v51 = v197[0];
          }
          *(void *)(v51 + 16) = v11 + 1;
          *(void *)(v51 + 8 * v11 + 32) = v54;
          v52 += 32;
          ++v11;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v51 = MEMORY[0x263F8EE78];
      }
      uint64_t v56 = *(void *)(v51 + 16);
      if (v56)
      {
        uint64_t v57 = (uint64_t *)(v51 + 32);
        do
        {
          uint64_t v58 = *v57++;
          specialized Set._Variant.insert(_:)(v197, v58);
          --v56;
        }
        while (v56);
      }
      unint64_t v5 = (unint64_t)v196;
      uint64_t v59 = v196[60];
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v192);
      uint64_t v61 = *(void *)(v59 + 344);
      uint64_t v62 = v61 + v60;
      if (__OFADD__(v61, v60))
      {
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        swift_bridgeObjectRelease_n();
        uint64_t v27 = swift_release();
        __break(1u);
        goto LABEL_228;
      }
      uint64_t v63 = v196[60];
      *(void *)(v59 + 344) = v62;
      uint64_t v64 = *(void *)(v63 + 368);
      BOOL v65 = __OFADD__(v64, 1);
      uint64_t v66 = v64 + 1;
      if (v65) {
        goto LABEL_225;
      }
      uint64_t v2 = v196;
      *(void *)(v63 + 368) = v66;
      uint64_t v67 = v191[20];
      v196[70] = v67;
      unint64_t v68 = v196[58];
      if ((void *)v13 != v193 || v67 < 2)
      {
        swift_bridgeObjectRetain();
        unint64_t v0 = v195;
LABEL_197:
        if (!v8[2]) {
          goto LABEL_208;
        }
        goto LABEL_198;
      }
      uint64_t v186 = (long long *)(v196 + 2);
      uint64_t v187 = v196 + 48;
      uint64_t v188 = v196 + 22;
      uint64_t v189 = v196 + 49;
      uint64_t v192 = v196 + 52;
      uint64_t v193 = v196 + 53;
      unint64_t v11 = (unint64_t)(v196 + 54);
      uint64_t v191 = v196 + 55;
      unint64_t v0 = v195;
      uint64_t v69 = *(void *)(v195 + 16);
      uint64_t v183 = v196 + 57;
      swift_bridgeObjectRetain();
      uint64_t v70 = 1;
      uint64_t v194 = v196 + 50;
      v185 = (uint64_t **)(v196 + 54);
      while (1)
      {
        v2[75] = v8;
        v2[74] = v68;
        v2[73] = v70;
        v2[72] = v0;
        v2[71] = v69;
        uint64_t v8 = (void *)MEMORY[0x263F8EE78];
        v2[55] = MEMORY[0x263F8EE78];
        v2[52] = v8;
        v2[53] = v8;
        if (v69) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v68 = (unint64_t)v8;
LABEL_187:
        uint64_t v8 = (void *)v2[75];
        unint64_t v9 = v2[52];
        uint64_t v168 = v2[53];
        unint64_t v5 = v8[2];
        unint64_t v169 = v8[3];
        if (v5 >= v169 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v169 > 1), v5 + 1, 1, (void *)v2[75]);
        }
        uint64_t v170 = v2[60];
        v8[2] = v5 + 1;
        v8[v5 + 4] = v168;
        uint64_t v171 = *(void *)(v170 + 368);
        BOOL v65 = __OFADD__(v171, 1);
        uint64_t v172 = v171 + 1;
        if (v65) {
          goto LABEL_226;
        }
        uint64_t v173 = v2[73];
        uint64_t v174 = v2[70] - 1;
        *(void *)(v2[60] + 368) = v172;
        if (v173 == v174) {
          goto LABEL_207;
        }
        if (v68 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v70 = v173 + 1;
        unint64_t v0 = v9;
        if (v69 != *(void *)(v9 + 16)) {
          goto LABEL_197;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v0 = 0;
      while (1)
      {
        v2[76] = v0;
        uint64_t v71 = v2[72];
        if (v0 >= *(void *)(v71 + 16)) {
          goto LABEL_214;
        }
        if (*(void *)(v2[59] + 16))
        {
          uint64_t v72 = v71 + 32 * v0;
          uint64_t v73 = *(void *)(v72 + 32);
          unint64_t v5 = *(void *)(v72 + 40);
          unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
          if (v75) {
            break;
          }
        }
LABEL_56:
        unint64_t v0 = v2[76] + 1;
        if (v0 == v2[71])
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v68 = v2[55];
          goto LABEL_187;
        }
      }
      unint64_t v190 = v0;
      unint64_t v77 = (void *)v2[60];
      uint64_t v76 = v2[61];
      unint64_t v0 = v2[74] & 0xC000000000000001;
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v2[59] + 56) + 40 * v74, (uint64_t)v186);
      outlined init with take of LogitCollection(v186, (uint64_t)v188);
      unint64_t v11 = v2[25];
      uint64_t v2 = (void *)v196[26];
      __swift_project_boxed_opaque_existential_1(v188, v11);
      unint64_t v9 = (unint64_t)v196;
      uint64_t v78 = ((uint64_t (*)(uint64_t, unint64_t, void *))v2[5])(v76, v11, v2);
      swift_retain();
      uint64_t v79 = v73;
      uint64_t v14 = 0;
      uint64_t v195 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v78, v77, v79, v5);
      v196[77] = v195;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v80 = v196[74];
      if (v0)
      {
        uint64_t v81 = MEMORY[0x261205930](v190, v80);
      }
      else
      {
        if (v190 >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_215;
        }
        uint64_t v81 = *(void *)(v80 + 8 * v190 + 32);
        swift_retain();
      }
      swift_beginAccess();
      unint64_t v11 = *(void *)(v81 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v82 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v15 = v196 + 48;
      if (!v82)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = (uint64_t)v8;
        goto LABEL_76;
      }
      *uint64_t v187 = (uint64_t)v8;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82 & ~(v82 >> 63), 0);
      if ((v82 & 0x8000000000000000) == 0) {
        break;
      }
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), (int64_t)v15, 1, v8);
    }
    uint64_t v83 = 0;
    uint64_t v14 = *v187;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        uint64_t v84 = MEMORY[0x261205930](v83, v11);
      }
      else {
        uint64_t v84 = swift_retain();
      }
      uint64_t v85 = *(void *)(v84 + 16);
      swift_release();
      *uint64_t v15 = v14;
      unint64_t v87 = *(void *)(v14 + 16);
      unint64_t v86 = *(void *)(v14 + 24);
      if (v87 >= v86 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
        uint64_t v15 = v196 + 48;
        uint64_t v14 = *v187;
      }
      ++v83;
      *(void *)(v14 + 16) = v87 + 1;
      *(void *)(v14 + 8 * v87 + 32) = v85;
    }
    while (v82 != v83);
    swift_bridgeObjectRelease();
LABEL_76:
    unint64_t v0 = *(void *)(v195 + 16);
    if (v0)
    {
      *uint64_t v189 = v8;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
      uint64_t v88 = v196 + 49;
      uint64_t v89 = (void *)*v189;
      unint64_t v90 = *(void *)(*v189 + 16);
      uint64_t v91 = (uint64_t *)(v195 + 56);
      unint64_t v92 = v0;
      do
      {
        uint64_t v94 = *v91;
        v91 += 4;
        uint64_t v93 = v94;
        void *v88 = v89;
        unint64_t v95 = v89[3];
        if (v90 >= v95 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v90 + 1, 1);
          uint64_t v88 = v196 + 49;
          uint64_t v89 = (void *)*v189;
        }
        v89[2] = v90 + 1;
        v89[v90++ + 4] = v93;
        --v92;
      }
      while (v92);
    }
    else
    {
      uint64_t v89 = v8;
    }
    uint64_t v96 = Set.init(minimumCapacity:)();
    uint64_t v97 = v96;
    uint64_t v98 = v89[2];
    if (v98)
    {
      uint64_t v99 = 0;
      uint64_t v100 = v96 + 56;
      while (1)
      {
        uint64_t v101 = v89[v99++ + 4];
        uint64_t v102 = static Hasher._hash(seed:_:)();
        uint64_t v103 = -1 << *(unsigned char *)(v97 + 32);
        unint64_t v104 = v102 & ~v103;
        if (((*(void *)(v100 + ((v104 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v104) & 1) == 0) {
          goto LABEL_92;
        }
        uint64_t v105 = *(void *)(v97 + 48);
        if (*(void *)(v105 + 8 * v104) == v101)
        {
LABEL_85:
          if (v99 == v98) {
            goto LABEL_94;
          }
        }
        else
        {
          uint64_t v106 = ~v103;
          while (1)
          {
            unint64_t v104 = (v104 + 1) & v106;
            if (((*(void *)(v100 + ((v104 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v104) & 1) == 0) {
              break;
            }
            if (*(void *)(v105 + 8 * v104) == v101) {
              goto LABEL_85;
            }
          }
LABEL_92:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v197[0] = v97;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v101, v104, isUniquelyReferenced_nonNull_native);
          uint64_t v97 = v197[0];
          swift_bridgeObjectRelease();
          if (v99 == v98)
          {
LABEL_94:
            swift_bridgeObjectRelease();
            uint64_t v8 = (void *)MEMORY[0x263F8EE78];
            goto LABEL_96;
          }
          uint64_t v100 = v97 + 56;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_96:
    swift_bridgeObjectRetain();
    uint64_t v108 = Set.init(minimumCapacity:)();
    uint64_t v109 = v108;
    uint64_t v13 = *(void *)(v14 + 16);
    if (v13)
    {
      uint64_t v110 = 0;
      uint64_t v111 = v108 + 56;
      while (1)
      {
        uint64_t v112 = *(void *)(v14 + 32 + 8 * v110++);
        uint64_t v113 = static Hasher._hash(seed:_:)();
        uint64_t v114 = -1 << *(unsigned char *)(v109 + 32);
        unint64_t v115 = v113 & ~v114;
        if (((*(void *)(v111 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115) & 1) == 0) {
          goto LABEL_105;
        }
        uint64_t v116 = *(void *)(v109 + 48);
        if (*(void *)(v116 + 8 * v115) == v112)
        {
LABEL_98:
          if (v110 == v13) {
            goto LABEL_107;
          }
        }
        else
        {
          uint64_t v117 = ~v114;
          while (1)
          {
            unint64_t v115 = (v115 + 1) & v117;
            if (((*(void *)(v111 + ((v115 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v115) & 1) == 0) {
              break;
            }
            if (*(void *)(v116 + 8 * v115) == v112) {
              goto LABEL_98;
            }
          }
LABEL_105:
          char v118 = swift_isUniquelyReferenced_nonNull_native();
          v197[0] = v109;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v112, v115, v118);
          uint64_t v109 = v197[0];
          swift_bridgeObjectRelease();
          if (v110 == v13)
          {
LABEL_107:
            swift_bridgeObjectRelease();
            uint64_t v8 = (void *)MEMORY[0x263F8EE78];
            goto LABEL_109;
          }
          uint64_t v111 = v109 + 56;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_109:
    unint64_t v9 = specialized _NativeSet.intersection(_:)(v109, v97);
    uint64_t v2 = v196;
    v196[78] = v9;
    swift_bridgeObjectRelease();
    uint64_t v119 = *(void *)(v9 + 16);
    unint64_t v5 = *(void *)(v14 + 16);
    swift_bridgeObjectRelease();
    unint64_t v11 = (unint64_t)(v196 + 54);
    if (v119 == v5)
    {
      unint64_t v184 = v9;
      if (v0)
      {
        uint64_t *v185 = v8;
        specialized ContiguousArray.reserveCapacity(_:)();
        unint64_t v5 = type metadata accessor for TokenTreeNode();
        unint64_t v9 = v195 + 56;
        uint64_t v13 = v0;
        do
        {
          uint64_t v120 = *(void *)v9;
          v9 += 32;
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v120;
          *(void *)(v14 + 24) = v8;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v13;
        }
        while (v13);
        uint64_t v15 = *v185;
        uint64_t v121 = v196[73];
        if (v121 < 0) {
          goto LABEL_219;
        }
      }
      else
      {
        uint64_t v15 = v8;
        uint64_t v121 = v196[73];
        if (v121 < 0) {
          goto LABEL_219;
        }
      }
      unint64_t v16 = v196[75];
      unint64_t v149 = v121 - 1;
      if (v149 >= *(void *)(v16 + 16)) {
        goto LABEL_220;
      }
      uint64_t v14 = *(void *)(v16 + 8 * v149 + 32);
      if ((v14 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v150 = MEMORY[0x261205930](v190, v14);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v190 >= v16) {
          goto LABEL_221;
        }
        uint64_t v150 = *(void *)(v14 + 8 * v190 + 32);
        swift_retain();
      }
      unint64_t v9 = v196[74] & 0xC000000000000001;
      swift_beginAccess();
      *(void *)(v150 + 24) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_release();
      specialized Array.append<A>(contentsOf:)((unint64_t)v15);
      uint64_t v151 = v196[74];
      if (v9)
      {
        uint64_t v152 = MEMORY[0x261205930](v190, v151);
      }
      else
      {
        uint64_t v152 = *(void *)(v151 + 8 * v190 + 32);
        swift_retain();
      }
      swift_beginAccess();
      unint64_t v153 = *(void *)(v152 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      specialized Array.append<A>(contentsOf:)(v153);
      unint64_t v5 = v195;
      uint64_t v154 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v154);
      if (!v0)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = (uint64_t)v8;
        uint64_t v159 = v8[2];
        if (v159) {
          goto LABEL_170;
        }
        goto LABEL_180;
      }
      uint64_t v155 = v196 + 57;
      *uint64_t v183 = (uint64_t)v8;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
      uint64_t v14 = *v183;
      unint64_t v156 = *(void *)(*v183 + 16);
      unint64_t v9 = 32;
      uint64_t v157 = v195;
      do
      {
        uint64_t v13 = *(void *)(v157 + v9);
        *uint64_t v155 = v14;
        unint64_t v158 = *(void *)(v14 + 24);
        unint64_t v5 = v156 + 1;
        if (v156 >= v158 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, v156 + 1, 1);
          uint64_t v157 = v195;
          uint64_t v155 = v196 + 57;
          uint64_t v14 = *v183;
        }
        *(void *)(v14 + 16) = v5;
        *(void *)(v14 + 8 * v156 + 32) = v13;
        v9 += 32;
        ++v156;
        --v0;
      }
      while (v0);
      swift_bridgeObjectRelease();
      uint64_t v159 = *(void *)(v14 + 16);
      if (!v159)
      {
LABEL_180:
        swift_bridgeObjectRelease();
        uint64_t v15 = (uint64_t *)v196[60];
        unint64_t v0 = *(void *)(v184 + 16);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
        uint64_t v167 = v15[43];
        BOOL v65 = __OFADD__(v167, v0);
        unint64_t v16 = v167 + v0;
        if (v65) {
          goto LABEL_222;
        }
        *(void *)(v196[60] + 344) = v16;
        goto LABEL_56;
      }
LABEL_170:
      uint64_t v13 = 0;
      unint64_t v11 = v14 + 32;
      uint64_t v160 = *v194;
      for (uint64_t i = *v194 + 56; ; uint64_t i = v160 + 56)
      {
        while (2)
        {
          unint64_t v5 = *(void *)(v11 + 8 * v13++);
          uint64_t v162 = static Hasher._hash(seed:_:)();
          uint64_t v163 = -1 << *(unsigned char *)(v160 + 32);
          unint64_t v9 = v162 & ~v163;
          if ((*(void *)(i + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
          {
            uint64_t v164 = *(void *)(v160 + 48);
            if (*(void *)(v164 + 8 * v9) == v5)
            {
LABEL_171:
              if (v13 == v159) {
                goto LABEL_180;
              }
              continue;
            }
            uint64_t v165 = ~v163;
            while (1)
            {
              unint64_t v9 = (v9 + 1) & v165;
              if (((*(void *)(i + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
                break;
              }
              if (*(void *)(v164 + 8 * v9) == v5) {
                goto LABEL_171;
              }
            }
          }
          break;
        }
        char v166 = swift_isUniquelyReferenced_nonNull_native();
        v197[0] = v160;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v5, v9, v166);
        uint64_t v160 = v197[0];
        *uint64_t v194 = v197[0];
        swift_bridgeObjectRelease();
        if (v13 == v159) {
          goto LABEL_180;
        }
      }
    }
    uint64_t v122 = *(void *)(v195 + 16);
    v196[79] = v122;
    if (!v122) {
      goto LABEL_55;
    }
    unint64_t v123 = 0;
    unint64_t v0 = (unint64_t)(v196 + 33);
LABEL_117:
    v2[80] = v123;
    uint64_t v124 = v2[77];
    if (v123 >= *(void *)(v124 + 16)) {
      goto LABEL_209;
    }
    uint64_t v125 = v2[78];
    uint64_t v126 = (void *)(v124 + 32 * v123);
    unint64_t v5 = v126[4];
    v2[81] = v5;
    unint64_t v11 = v126[5];
    v2[82] = v11;
    uint64_t v13 = v126[6];
    v2[83] = v13;
    uint64_t v127 = v126[7];
    v2[84] = v127;
    uint64_t v27 = specialized Set.contains(_:)(v127, v125);
    uint64_t v128 = v2[73];
    if ((v27 & 1) == 0)
    {
      if ((v128 & 0x8000000000000000) == 0)
      {
        uint64_t v178 = *(void *)(v2[60] + 320);
        BOOL v65 = __OFSUB__(v178, v128);
        uint64_t v179 = v178 - v128;
        if (!v65)
        {
          uint64_t v23 = v179 - 1;
          if (!__OFSUB__(v179, 1))
          {
            uint64_t v26 = swift_task_alloc();
            v2[85] = v26;
            *(void *)uint64_t v26 = v2;
            *(void *)(v26 + 8) = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
            *(void *)(v26 + 800) = v2[60];
            *(unsigned char *)(v26 + 936) = 1;
            *(void *)(v26 + 792) = v5;
            *(void *)(v26 + 784) = v11;
LABEL_14:
            *(void *)(v26 + 776) = v23;
            uint64_t v27 = (uint64_t)ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            return MEMORY[0x270FA2498](v27, v28, v29);
          }
LABEL_230:
          __break(1u);
          return MEMORY[0x270FA2498](v27, v28, v29);
        }
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }
LABEL_228:
      __break(1u);
      goto LABEL_229;
    }
    type metadata accessor for TokenTreeNode();
    uint64_t v129 = swift_allocObject();
    *(void *)(v129 + 16) = v127;
    *(void *)(v129 + 24) = v8;
    if (v128 < 0) {
      goto LABEL_210;
    }
    uint64_t v130 = v2[75];
    if ((unint64_t)(v128 - 1) >= *(void *)(v130 + 16)) {
      goto LABEL_211;
    }
    unint64_t v9 = v129;
    uint64_t v131 = *(void *)(v130 + 8 * (v128 - 1) + 32);
    unint64_t v132 = v2[76];
    uint64_t v195 = v11;
    if ((v131 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v133 = MEMORY[0x261205930](v132, v131);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v132 >= *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_212;
      }
      uint64_t v133 = *(void *)(v131 + 8 * v132 + 32);
      swift_retain();
    }
    swift_beginAccess();
    uint64_t v134 = swift_retain();
    MEMORY[0x261205540](v134);
    if (*(void *)((*(void *)(v133 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v133 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    uint64_t v135 = swift_retain();
    MEMORY[0x261205540](v135);
    if (*(void *)((*v193 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v193 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    unint64_t v136 = v2[74] & 0xC000000000000001;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v137 = v2[76];
    uint64_t v138 = v2[74];
    if (v136)
    {
      uint64_t v139 = MEMORY[0x261205930](v137, v138);
    }
    else
    {
      uint64_t v139 = *(void *)(v138 + 8 * v137 + 32);
      swift_retain();
    }
    swift_beginAccess();
    unint64_t v140 = *(void *)(v139 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    if (v140 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v141 = _CocoaArrayWrapper.endIndex.getter();
      if (!v141) {
        goto LABEL_227;
      }
    }
    else
    {
      uint64_t v141 = *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v141) {
        goto LABEL_227;
      }
    }
    uint64_t v2 = 0;
    while ((v140 & 0xC000000000000001) != 0)
    {
      unint64_t v11 = MEMORY[0x261205930](v2, v140);
      uint64_t v8 = (void *)((char *)v2 + 1);
      if (__OFADD__(v2, 1)) {
        goto LABEL_206;
      }
LABEL_139:
      if (*(void *)(v11 + 16) == *(void *)(v9 + 16))
      {
        swift_bridgeObjectRelease_n();
        uint64_t v142 = swift_release();
        MEMORY[0x261205540](v142);
        uint64_t v2 = v196;
        if (*(void *)((*v191 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v191 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v143 = (void *)*v192;
        char v144 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v8 = (void *)MEMORY[0x263F8EE78];
        if ((v144 & 1) == 0) {
          uint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v143[2] + 1, 1, v143);
        }
        unint64_t v0 = v143[2];
        unint64_t v145 = v143[3];
        if (v0 >= v145 >> 1) {
          uint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v145 > 1), v0 + 1, 1, v143);
        }
        unint64_t v11 = v196[60];
        v143[2] = v0 + 1;
        long long v146 = &v143[4 * v0];
        v146[4] = v5;
        v146[5] = v195;
        v146[6] = v13;
        v146[7] = v127;
        v196[52] = v143;
        specialized Set._Variant.insert(_:)(v197, v5);
        swift_release();
        uint64_t v147 = *(void *)(v11 + 344);
        BOOL v65 = __OFADD__(v147, 1);
        uint64_t v148 = v147 + 1;
        if (v65) {
          goto LABEL_213;
        }
        *(void *)(v196[60] + 344) = v148;
        unint64_t v123 = v196[80] + 1;
        unint64_t v0 = (unint64_t)(v196 + 33);
        if (v123 == v196[79])
        {
LABEL_55:
          swift_release();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
          goto LABEL_56;
        }
        goto LABEL_117;
      }
      swift_release();
      uint64_t v2 = (void *)((char *)v2 + 1);
      if (v8 == (void *)v141) {
        goto LABEL_227;
      }
    }
    unint64_t v11 = *(void *)(v140 + 8 * (void)v2 + 32);
    swift_retain();
    uint64_t v8 = (void *)((char *)v2 + 1);
    if (!__OFADD__(v2, 1)) {
      goto LABEL_139;
    }
LABEL_206:
    __break(1u);
LABEL_207:
    unint64_t v0 = v9;
    if (!v8[2])
    {
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_198:
  uint64_t v175 = v8[4];
  swift_bridgeObjectRetain();
  uint64_t v176 = swift_bridgeObjectRetain();
  uint64_t v177 = specialized _copyCollectionToContiguousArray<A>(_:)(v176);
  swift_bridgeObjectRelease();
  v197[0] = (uint64_t)v177;
  specialized MutableCollection<>.sort(by:)(v197);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v180 = v197[0];
  uint64_t v181 = (uint64_t (*)(uint64_t, uint64_t))v2[1];
  return v181(v175, v180);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 552), *(void *)(v0 + 544));
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  long long v23;
  long long v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  long long *v188;
  uint64_t *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199[3];
  uint64_t v200;
  uint64_t v201;

  uint64_t v200 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 696);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)(v3 + 32);
    do
    {
      unint64_t v6 = *v5++;
      specialized Set._Variant.insert(_:)(v199, v6);
      --v4;
    }
    while (v4);
  }
  char v7 = *(void *)(v0 + 688);
  uint64_t v8 = *(void *)(v0 + 672);
  unint64_t v9 = *(void *)(v0 + 584);
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 - 1;
  type metadata accessor for TokenTreeNode();
  unint64_t v11 = swift_allocObject();
  *(void *)(v11 + 24) = MEMORY[0x263F8EE78];
  uint64_t v12 = v11 + 24;
  *(void *)(v11 + 16) = v8;
  swift_beginAccess();
  *(void *)uint64_t v12 = v7;
  swift_bridgeObjectRelease();
  if (v10 < 0) {
    goto LABEL_190;
  }
  uint64_t v13 = *(void *)(v0 + 600);
  uint64_t v14 = *(void *)(v0 + 584) - 1;
  if (v14 >= *(void *)(v13 + 16)) {
    goto LABEL_191;
  }
  uint64_t v12 = *(void *)(v13 + 8 * v14 + 32);
  char v7 = *(void *)(v0 + 608);
  if ((v12 & 0xC000000000000001) != 0) {
    goto LABEL_192;
  }
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (v7 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_194;
  }
  unint64_t v16 = *(void *)(v12 + 8 * v7 + 32);
  swift_retain();
  while (2)
  {
    uint64_t v1 = (void *)(v0 + 424);
    swift_beginAccess();
    uint64_t v17 = swift_retain();
    MEMORY[0x261205540](v17);
    if (*(void *)((*(void *)(v16 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v16 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
LABEL_194:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unint64_t v198 = v2;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    uint64_t v18 = swift_retain();
    MEMORY[0x261205540](v18);
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v19 = *(void **)(v0 + 416);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    uint64_t v22 = (void *)(v0 + 176);
    uint64_t v188 = (long long *)(v0 + 16);
    uint64_t v23 = *(_OWORD *)(v0 + 648);
    uint64_t v24 = *(_OWORD *)(v0 + 664);
    v19[2] = v21 + 1;
    uint64_t v25 = &v19[4 * v21];
    *((_OWORD *)v25 + 2) = v23;
    *((_OWORD *)v25 + 3) = v24;
    *(void *)(v0 + 416) = v19;
    uint64_t v26 = swift_retain();
    MEMORY[0x261205540](v26);
    char v7 = *(void *)((*(void *)(v0 + 440) & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= *(void *)((*(void *)(v0 + 440) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v189 = (uint64_t *)(v0 + 392);
    uint64_t v187 = (unint64_t *)(v0 + 432);
    uint64_t v186 = (unint64_t *)(v0 + 456);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    uint64_t v191 = *(void *)(v0 + 704);
    uint64_t v2 = v198;
    unint64_t v190 = v1;
LABEL_19:
    uint64_t v27 = *(void *)(v0 + 640) + 1;
    if (v27 != *(void *)(v0 + 632)) {
      goto LABEL_137;
    }
    uint64_t v12 = *(void *)(v0 + 616);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_21:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    while (1)
    {
      uint64_t v28 = *(void *)(v0 + 608) + 1;
      uint64_t v29 = *(void *)(v0 + 576);
      if (v28 == *(void *)(v0 + 568)) {
        break;
      }
LABEL_32:
      *(void *)(v0 + 608) = v28;
      if (v28 >= *(void *)(v29 + 16)) {
        goto LABEL_189;
      }
      uint64_t v12 = *(void *)(v0 + 472);
      if (*(void *)(v12 + 16))
      {
        unint64_t v40 = v29 + 32 * v28;
        uint64_t v41 = *(void *)(v40 + 32);
        char v7 = *(void *)(v40 + 40);
        uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
        if (v43)
        {
          uint64_t v45 = *(void **)(v0 + 480);
          uint64_t v44 = *(void *)(v0 + 488);
          uint64_t v46 = *(void *)(v0 + 592) & 0xC000000000000001;
          outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(*(void *)(v0 + 472) + 56) + 40 * v42, (uint64_t)v188);
          outlined init with take of LogitCollection(v188, (uint64_t)v22);
          unint64_t v47 = *(void *)(v0 + 200);
          uint64_t v48 = *(void *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1(v22, v47);
          uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 40))(v44, v47, v48);
          swift_retain();
          unint64_t v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v49, v45, v41, v7);
          *(void *)(v0 + 616) = v50;
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v51 = *(void *)(v0 + 592);
          if (v46)
          {
            uint64_t v53 = MEMORY[0x261205930](v28, v51);
            uint64_t v52 = MEMORY[0x263F8EE78];
          }
          else
          {
            uint64_t v52 = MEMORY[0x263F8EE78];
            if (v28 >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_201;
            }
            uint64_t v53 = *(void *)(v51 + 8 * v28 + 32);
            swift_retain();
          }
          v185 = v50;
          swift_beginAccess();
          uint64_t v54 = *(void *)(v53 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          if (v54 >> 62)
          {
            swift_bridgeObjectRetain();
            unint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            uint64_t v56 = (uint64_t *)(v0 + 384);
            if (!v55)
            {
LABEL_65:
              swift_bridgeObjectRelease();
              uint64_t v58 = v52;
              goto LABEL_66;
            }
          }
          else
          {
            unint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v56 = (uint64_t *)(v0 + 384);
            if (!v55) {
              goto LABEL_65;
            }
          }
          *uint64_t v56 = v52;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55 & ~(v55 >> 63), 0);
          if (v55 < 0) {
            goto LABEL_206;
          }
          uint64_t v57 = 0;
          uint64_t v58 = *v56;
          uint64_t v193 = v54 & 0xC000000000000001;
          uint64_t v59 = v54;
          uint64_t v60 = v55;
          do
          {
            if (v193) {
              uint64_t v61 = MEMORY[0x261205930](v57, v54);
            }
            else {
              uint64_t v61 = swift_retain();
            }
            uint64_t v62 = *(void *)(v61 + 16);
            swift_release();
            *uint64_t v56 = v58;
            uint64_t v64 = *(void *)(v58 + 16);
            uint64_t v63 = *(void *)(v58 + 24);
            if (v64 >= v63 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
              uint64_t v56 = (uint64_t *)(v0 + 384);
              uint64_t v58 = *(void *)(v0 + 384);
            }
            ++v57;
            *(void *)(v58 + 16) = v64 + 1;
            *(void *)(v58 + 8 * v64 + 32) = v62;
            uint64_t v52 = MEMORY[0x263F8EE78];
            uint64_t v54 = v59;
          }
          while (v60 != v57);
          swift_bridgeObjectRelease();
LABEL_66:
          uint64_t v71 = *(void *)(v185 + 16);
          unint64_t v184 = v71;
          if (v71)
          {
            *uint64_t v189 = v52;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
            uint64_t v72 = (void *)(v0 + 392);
            uint64_t v73 = *v189;
            unint64_t v74 = *(void *)(*v189 + 16);
            char v75 = (uint64_t *)(v185 + 56);
            uint64_t v76 = v71;
            do
            {
              uint64_t v78 = *v75;
              v75 += 4;
              unint64_t v77 = v78;
              *uint64_t v72 = v73;
              uint64_t v79 = *(void *)(v73 + 24);
              if (v74 >= v79 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v74 + 1, 1);
                uint64_t v72 = (void *)(v0 + 392);
                uint64_t v73 = *v189;
              }
              *(void *)(v73 + 16) = v74 + 1;
              *(void *)(v73 + 8 * v74++ + 32) = v77;
              --v76;
            }
            while (v76);
          }
          else
          {
            uint64_t v73 = v52;
          }
          uint64_t v80 = Set.init(minimumCapacity:)();
          uint64_t v81 = v80;
          uint64_t v194 = *(void *)(v73 + 16);
          if (v194)
          {
            uint64_t v82 = 0;
            uint64_t v15 = MEMORY[0x263F8EE78];
            uint64_t v83 = v80 + 56;
            while (1)
            {
              uint64_t v84 = *(void *)(v73 + 32 + 8 * v82++);
              uint64_t v85 = static Hasher._hash(seed:_:)();
              unint64_t v86 = -1 << *(unsigned char *)(v81 + 32);
              unint64_t v87 = v85 & ~v86;
              if (((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) == 0) {
                goto LABEL_82;
              }
              uint64_t v88 = *(void *)(v81 + 48);
              if (*(void *)(v88 + 8 * v87) == v84)
              {
LABEL_75:
                if (v82 == v194) {
                  goto LABEL_84;
                }
              }
              else
              {
                uint64_t v89 = ~v86;
                while (1)
                {
                  unint64_t v87 = (v87 + 1) & v89;
                  if (((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v88 + 8 * v87) == v84) {
                    goto LABEL_75;
                  }
                }
LABEL_82:
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v199[0] = v81;
                specialized _NativeSet.insertNew(_:at:isUnique:)(v84, v87, isUniquelyReferenced_nonNull_native);
                uint64_t v81 = v199[0];
                swift_bridgeObjectRelease();
                if (v82 == v194)
                {
LABEL_84:
                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
                uint64_t v83 = v81 + 56;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v15 = MEMORY[0x263F8EE78];
LABEL_86:
          swift_bridgeObjectRetain();
          uint64_t v91 = Set.init(minimumCapacity:)();
          unint64_t v92 = v91;
          uint64_t v195 = *(void *)(v58 + 16);
          if (v195)
          {
            uint64_t v93 = 0;
            uint64_t v94 = v91 + 56;
            while (1)
            {
              unint64_t v95 = *(void *)(v58 + 32 + 8 * v93++);
              uint64_t v96 = static Hasher._hash(seed:_:)();
              uint64_t v97 = -1 << *(unsigned char *)(v92 + 32);
              uint64_t v98 = v96 & ~v97;
              if (((*(void *)(v94 + ((v98 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v98) & 1) == 0) {
                goto LABEL_95;
              }
              uint64_t v99 = *(void *)(v92 + 48);
              if (*(void *)(v99 + 8 * v98) == v95)
              {
LABEL_88:
                if (v93 == v195) {
                  break;
                }
              }
              else
              {
                uint64_t v100 = ~v97;
                while (1)
                {
                  uint64_t v98 = (v98 + 1) & v100;
                  if (((*(void *)(v94 + ((v98 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v98) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v99 + 8 * v98) == v95) {
                    goto LABEL_88;
                  }
                }
LABEL_95:
                uint64_t v101 = swift_isUniquelyReferenced_nonNull_native();
                v199[0] = v92;
                specialized _NativeSet.insertNew(_:at:isUnique:)(v95, v98, v101);
                unint64_t v92 = v199[0];
                swift_bridgeObjectRelease();
                if (v93 == v195) {
                  break;
                }
                uint64_t v94 = v92 + 56;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v102 = specialized _NativeSet.intersection(_:)(v92, v81);
          *(void *)(v0 + 624) = v102;
          swift_bridgeObjectRelease();
          uint64_t v103 = *(void *)(v102 + 16);
          unint64_t v104 = *(void *)(v58 + 16);
          swift_bridgeObjectRelease();
          uint64_t v105 = v103 == v104;
          uint64_t v12 = (unint64_t)v190;
          char v7 = v185;
          if (!v105)
          {
            unint64_t v140 = *(void *)(v185 + 16);
            *(void *)(v0 + 632) = v140;
            if (!v140)
            {
              swift_release();
              swift_bridgeObjectRelease();
              uint64_t v22 = (void *)(v0 + 176);
              uint64_t v2 = v198;
              goto LABEL_21;
            }
            uint64_t v27 = 0;
LABEL_137:
            *(void *)(v0 + 640) = v27;
            uint64_t v141 = *(void *)(v0 + 616);
            if (v27 < *(void *)(v141 + 16))
            {
              uint64_t v142 = *(void *)(v0 + 624);
              uint64_t v143 = (void *)(v141 + 32 * v27);
              char v144 = v143[4];
              *(void *)(v0 + 648) = v144;
              unint64_t v145 = v143[5];
              *(void *)(v0 + 656) = v145;
              long long v146 = v143[6];
              *(void *)(v0 + 664) = v146;
              uint64_t v147 = v143[7];
              *(void *)(v0 + 672) = v147;
              uint64_t v148 = specialized Set.contains(_:)(v147, v142);
              uint64_t v151 = *(void *)(v0 + 584);
              if (v148)
              {
                uint64_t v152 = swift_allocObject();
                *(void *)(v152 + 16) = v147;
                *(void *)(v152 + 24) = v15;
                if ((v151 & 0x8000000000000000) == 0)
                {
                  unint64_t v153 = *(void *)(v0 + 600);
                  if ((unint64_t)(v151 - 1) < *(void *)(v153 + 16))
                  {
                    uint64_t v154 = v152;
                    uint64_t v155 = *(void *)(v153 + 8 * (v151 - 1) + 32);
                    unint64_t v156 = *(void *)(v0 + 608);
                    uint64_t v197 = v146;
                    if ((v155 & 0xC000000000000001) != 0)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v157 = MEMORY[0x261205930](v156, v155);
                      swift_bridgeObjectRelease();
LABEL_144:
                      swift_beginAccess();
                      unint64_t v158 = swift_retain();
                      MEMORY[0x261205540](v158);
                      if (*(void *)((*(void *)(v157 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v157 + 24) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      }
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      swift_endAccess();
                      swift_release();
                      uint64_t v159 = swift_retain();
                      MEMORY[0x261205540](v159);
                      if (*(void *)((*v190 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v190 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      uint64_t v160 = *(void *)(v0 + 592) & 0xC000000000000001;
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      os_log_type_t v161 = *(void *)(v0 + 608);
                      uint64_t v162 = *(void *)(v0 + 592);
                      if (v160)
                      {
                        uint64_t v163 = MEMORY[0x261205930](v161, v162);
                      }
                      else
                      {
                        uint64_t v163 = *(void *)(v162 + 8 * v161 + 32);
                        swift_retain();
                      }
                      swift_beginAccess();
                      uint64_t v12 = *(void *)(v163 + 24);
                      swift_bridgeObjectRetain();
                      swift_release();
                      uint64_t v192 = v145;
                      if (v12 >> 62)
                      {
                        swift_retain();
                        swift_bridgeObjectRetain();
                        uint64_t v164 = _CocoaArrayWrapper.endIndex.getter();
                        if (!v164) {
                          goto LABEL_207;
                        }
                      }
                      else
                      {
                        uint64_t v164 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        swift_retain();
                        swift_bridgeObjectRetain();
                        if (!v164) {
                          goto LABEL_207;
                        }
                      }
                      uint64_t v2 = 0;
                      while (1)
                      {
                        if ((v12 & 0xC000000000000001) != 0)
                        {
                          char v7 = MEMORY[0x261205930](v2, v12);
                          uint64_t v165 = (char *)v2 + 1;
                          if (__OFADD__(v2, 1)) {
                            goto LABEL_187;
                          }
                        }
                        else
                        {
                          char v7 = *(void *)(v12 + 8 * (void)v2 + 32);
                          swift_retain();
                          uint64_t v165 = (char *)v2 + 1;
                          if (__OFADD__(v2, 1))
                          {
LABEL_187:
                            __break(1u);
                            goto LABEL_188;
                          }
                        }
                        if (*(void *)(v7 + 16) == *(void *)(v154 + 16)) {
                          break;
                        }
                        swift_release();
                        uint64_t v2 = (uint64_t *)((char *)v2 + 1);
                        if (v165 == (char *)v164) {
                          goto LABEL_207;
                        }
                      }
                      swift_bridgeObjectRelease_n();
                      char v166 = swift_release();
                      MEMORY[0x261205540](v166);
                      if (*(void *)((*(void *)(v0 + 440) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 440) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      }
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      uint64_t v167 = *(void **)(v0 + 416);
                      uint64_t v22 = (void *)(v0 + 176);
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        uint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v167[2] + 1, 1, v167);
                      }
                      unint64_t v169 = v167[2];
                      uint64_t v168 = v167[3];
                      char v7 = v169 + 1;
                      if (v169 >= v168 >> 1) {
                        uint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v168 > 1), v169 + 1, 1, v167);
                      }
                      uint64_t v170 = *(void *)(v0 + 480);
                      v167[2] = v7;
                      uint64_t v171 = &v167[4 * v169];
                      v171[4] = v144;
                      v171[5] = v192;
                      v171[6] = v197;
                      v171[7] = v147;
                      *(void *)(v0 + 416) = v167;
                      specialized Set._Variant.insert(_:)(v199, v144);
                      swift_release();
                      uint64_t v172 = *(void *)(v170 + 344);
                      uint64_t v36 = __OFADD__(v172, 1);
                      uint64_t v173 = v172 + 1;
                      if (!v36)
                      {
                        *(void *)(*(void *)(v0 + 480) + 344) = v173;
                        uint64_t v15 = MEMORY[0x263F8EE78];
                        uint64_t v2 = v198;
                        goto LABEL_19;
                      }
                      goto LABEL_200;
                    }
                    if (v156 < *(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      uint64_t v157 = *(void *)(v155 + 8 * v156 + 32);
                      swift_retain();
                      goto LABEL_144;
                    }
LABEL_199:
                    __break(1u);
LABEL_200:
                    __break(1u);
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
LABEL_203:
                    __break(1u);
LABEL_204:
                    __break(1u);
LABEL_205:
                    __break(1u);
LABEL_206:
                    __break(1u);
LABEL_207:
                    swift_bridgeObjectRelease_n();
                    uint64_t v148 = swift_release();
                    __break(1u);
LABEL_208:
                    __break(1u);
                    goto LABEL_209;
                  }
LABEL_198:
                  __break(1u);
                  goto LABEL_199;
                }
LABEL_197:
                __break(1u);
                goto LABEL_198;
              }
              if (v151 < 0) {
                goto LABEL_208;
              }
              uint64_t v180 = *(void *)(*(void *)(v0 + 480) + 320);
              uint64_t v36 = __OFSUB__(v180, v151);
              uint64_t v181 = v180 - v151;
              if (v36)
              {
LABEL_209:
                __break(1u);
              }
              else
              {
                uint64_t v182 = v181 - 1;
                if (!__OFSUB__(v181, 1))
                {
                  uint64_t v183 = swift_task_alloc();
                  *(void *)(v0 + 680) = v183;
                  *(void *)uint64_t v183 = v0;
                  *(void *)(v183 + 8) = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
                  *(void *)(v183 + 800) = *(void *)(v0 + 480);
                  *(unsigned char *)(v183 + 936) = 1;
                  *(void *)(v183 + 792) = v144;
                  *(void *)(v183 + 784) = v145;
                  *(void *)(v183 + 776) = v182;
                  uint64_t v148 = (uint64_t)ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
                  unint64_t v149 = 0;
                  uint64_t v150 = 0;
                  return MEMORY[0x270FA2498](v148, v149, v150);
                }
              }
              __break(1u);
              return MEMORY[0x270FA2498](v148, v149, v150);
            }
            __break(1u);
LABEL_196:
            __break(1u);
            goto LABEL_197;
          }
          uint64_t v196 = v102;
          uint64_t v106 = v184;
          if (v184)
          {
            *uint64_t v187 = v15;
            specialized ContiguousArray.reserveCapacity(_:)();
            uint64_t v107 = (uint64_t *)(v185 + 56);
            do
            {
              uint64_t v108 = *v107;
              v107 += 4;
              uint64_t v109 = swift_allocObject();
              *(void *)(v109 + 16) = v108;
              *(void *)(v109 + 24) = v15;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              --v106;
            }
            while (v106);
            uint64_t v110 = *v187;
          }
          else
          {
            uint64_t v110 = v15;
          }
          uint64_t v111 = *(void *)(v0 + 584);
          uint64_t v2 = v198;
          if (v111 < 0) {
            goto LABEL_202;
          }
          uint64_t v112 = *(void *)(v0 + 600);
          uint64_t v113 = v111 - 1;
          if (v113 >= *(void *)(v112 + 16)) {
            goto LABEL_203;
          }
          uint64_t v114 = *(void *)(v112 + 8 * v113 + 32);
          if ((v114 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            unint64_t v115 = MEMORY[0x261205930](v28, v114);
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v28 >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_204;
            }
            unint64_t v115 = *(void *)(v114 + 8 * v28 + 32);
            swift_retain();
          }
          uint64_t v116 = *(void *)(v0 + 592) & 0xC000000000000001;
          swift_beginAccess();
          *(void *)(v115 + 24) = v110;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_release();
          specialized Array.append<A>(contentsOf:)(v110);
          uint64_t v117 = *(void *)(v0 + 592);
          if (v116)
          {
            char v118 = MEMORY[0x261205930](v28, v117);
          }
          else
          {
            char v118 = *(void *)(v117 + 8 * v28 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v119 = *(void *)(v118 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          specialized Array.append<A>(contentsOf:)(v119);
          uint64_t v120 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v120);
          uint64_t v121 = v184;
          if (v184)
          {
            long long *v186 = v15;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v184, 0);
            uint64_t v122 = *v186;
            unint64_t v123 = *(void *)(*v186 + 16);
            uint64_t v124 = 32;
            do
            {
              uint64_t v125 = *(void *)(v185 + v124);
              long long *v186 = v122;
              uint64_t v126 = *(void *)(v122 + 24);
              if (v123 >= v126 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v126 > 1, v123 + 1, 1);
                uint64_t v122 = *v186;
              }
              *(void *)(v122 + 16) = v123 + 1;
              *(void *)(v122 + 8 * v123 + 32) = v125;
              v124 += 32;
              ++v123;
              --v121;
            }
            while (v121);
            swift_bridgeObjectRelease();
            uint64_t v15 = MEMORY[0x263F8EE78];
            uint64_t v127 = *(void *)(v122 + 16);
            if (v127)
            {
LABEL_118:
              uint64_t v128 = 0;
              uint64_t v129 = *v198;
              uint64_t v130 = *v198 + 56;
              while (1)
              {
                uint64_t v131 = *(void *)(v122 + 32 + 8 * v128++);
                unint64_t v132 = static Hasher._hash(seed:_:)();
                uint64_t v133 = -1 << *(unsigned char *)(v129 + 32);
                uint64_t v134 = v132 & ~v133;
                if (((*(void *)(v130 + ((v134 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v134) & 1) == 0) {
                  goto LABEL_126;
                }
                uint64_t v135 = *(void *)(v129 + 48);
                if (*(void *)(v135 + 8 * v134) == v131)
                {
LABEL_119:
                  if (v128 == v127) {
                    goto LABEL_128;
                  }
                }
                else
                {
                  unint64_t v136 = ~v133;
                  while (1)
                  {
                    uint64_t v134 = (v134 + 1) & v136;
                    if (((*(void *)(v130 + ((v134 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v134) & 1) == 0) {
                      break;
                    }
                    if (*(void *)(v135 + 8 * v134) == v131) {
                      goto LABEL_119;
                    }
                  }
LABEL_126:
                  uint64_t v137 = swift_isUniquelyReferenced_nonNull_native();
                  v199[0] = v129;
                  specialized _NativeSet.insertNew(_:at:isUnique:)(v131, v134, v137);
                  uint64_t v129 = v199[0];
                  *unint64_t v198 = v199[0];
                  swift_bridgeObjectRelease();
                  if (v128 == v127)
                  {
LABEL_128:
                    swift_bridgeObjectRelease();
                    uint64_t v2 = v198;
                    goto LABEL_131;
                  }
                  uint64_t v130 = v129 + 56;
                }
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v122 = v15;
            uint64_t v127 = *(void *)(v15 + 16);
            if (v127) {
              goto LABEL_118;
            }
          }
          swift_bridgeObjectRelease();
LABEL_131:
          uint64_t v12 = *(void *)(v0 + 480);
          char v7 = *(void *)(v196 + 16);
          swift_release();
          uint64_t v22 = (void *)(v0 + 176);
          __swift_destroy_boxed_opaque_existential_1(v0 + 176);
          uint64_t v138 = *(void *)(v12 + 344);
          uint64_t v36 = __OFADD__(v138, v7);
          uint64_t v139 = v138 + v7;
          if (v36) {
            goto LABEL_205;
          }
          *(void *)(*(void *)(v0 + 480) + 344) = v139;
        }
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void *)(v0 + 440);
    uint64_t v31 = *(void **)(v0 + 600);
    uint64_t v29 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    char v7 = v33 + 1;
    if (v33 >= v32 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, *(void **)(v0 + 600));
    }
    unint64_t v34 = *(void *)(v0 + 480);
    v31[2] = v7;
    v31[v33 + 4] = v12;
    uint64_t v35 = *(void *)(v34 + 368);
    uint64_t v36 = __OFADD__(v35, 1);
    unint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_188;
    }
    char v38 = *(void *)(v0 + 584);
    uint64_t v39 = *(void *)(v0 + 560) - 1;
    *(void *)(*(void *)(v0 + 480) + 368) = v37;
    if (v38 != v39)
    {
      if ((unint64_t)v30 >> 62)
      {
        uint64_t v12 = v30 < 0 ? v30 : v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        char v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v7 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v7 == *(void *)(v29 + 16))
      {
        *(void *)(v0 + 600) = v31;
        *(void *)(v0 + 592) = v30;
        *(void *)(v0 + 584) = v38 + 1;
        *(void *)(v0 + 576) = v29;
        *(void *)(v0 + 568) = v7;
        *(void *)(v0 + 440) = v15;
        *(void *)(v0 + 416) = v15;
        *(void *)(v0 + 424) = v15;
        if (!v7)
        {
          while (1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v31 = *(void **)(v0 + 600);
            uint64_t v29 = *(void *)(v0 + 416);
            uint64_t v12 = *(void *)(v0 + 424);
            uint64_t v66 = v31[2];
            BOOL v65 = v31[3];
            char v7 = v66 + 1;
            if (v66 >= v65 >> 1) {
              uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, *(void **)(v0 + 600));
            }
            uint64_t v67 = *(void *)(v0 + 480);
            v31[2] = v7;
            v31[v66 + 4] = v12;
            unint64_t v68 = *(void *)(v67 + 368);
            uint64_t v36 = __OFADD__(v68, 1);
            uint64_t v69 = v68 + 1;
            if (v36) {
              break;
            }
            uint64_t v12 = *(void *)(v0 + 584);
            uint64_t v70 = *(void *)(v0 + 560) - 1;
            *(void *)(*(void *)(v0 + 480) + 368) = v69;
            if (v12 == v70) {
              goto LABEL_173;
            }
            if (v15 >> 62)
            {
              swift_bridgeObjectRetain();
              char v7 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v7 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v7 != *(void *)(v29 + 16)) {
              goto LABEL_173;
            }
            *(void *)(v0 + 600) = v31;
            *(void *)(v0 + 592) = v15;
            *(void *)(v0 + 584) = v12 + 1;
            *(void *)(v0 + 576) = v29;
            *(void *)(v0 + 568) = v7;
            *(void *)(v0 + 440) = v15;
            *(void *)(v0 + 416) = v15;
            *(void *)(v0 + 424) = v15;
            if (v7) {
              goto LABEL_31;
            }
          }
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          swift_bridgeObjectRetain();
          unint64_t v16 = MEMORY[0x261205930](v7, v12);
          swift_bridgeObjectRelease();
          uint64_t v15 = MEMORY[0x263F8EE78];
          continue;
        }
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v28 = 0;
        goto LABEL_32;
      }
    }
    break;
  }
LABEL_173:
  if (!v31[2]) {
    goto LABEL_196;
  }
  uint64_t v174 = v31[4];
  swift_bridgeObjectRetain();
  uint64_t v175 = swift_bridgeObjectRetain();
  uint64_t v176 = specialized _copyCollectionToContiguousArray<A>(_:)(v175);
  swift_bridgeObjectRelease();
  v199[0] = (uint64_t)v176;
  specialized MutableCollection<>.sort(by:)(v199);
  if (v191)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v178 = v199[0];
    uint64_t v179 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v179(v174, v178);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(void *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4) {
      break;
    }
    uint64_t v7 = *(void *)(a2 + 32 + 8 * v3);
    unint64_t v8 = v3 + 1;
LABEL_6:
    unint64_t result = v2 == v5;
    if (v2 == v5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v5;
      if (v3 == v4) {
        return result;
      }
    }
    else
    {
      if (v2 >= v5) {
        goto LABEL_15;
      }
      uint64_t v9 = *(void *)(v6 + 8 * v2);
      unint64_t v10 = v2 + 1;
      if (v3 == v4) {
        return result;
      }
    }
    unint64_t result = 0;
    if (v2 != v5)
    {
      unint64_t v2 = v10;
      unint64_t v3 = v8;
      if (v7 == v9) {
        continue;
      }
    }
    return result;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()()
{
  *(void *)(v1 + 128) = v0;
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 136) = v2;
  void *v2 = v1;
  v2[1] = ThreeStageSpeculativeDecoder.generateDraft();
  v2[98] = v0;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.generateTinyModelTree(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[20] = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  unint64_t v2 = Logger.logObject.getter();
  unint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[18];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25FA51000, v2, v3, "Generated %ld tiny model nodes.", v6, 0xCu);
    MEMORY[0x261206F80](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl(&dword_25FA51000, v8, v9, "Scoring the tiny model tokens against the draft model.", v10, 2u);
    MEMORY[0x261206F80](v10, -1, -1);
  }
  unint64_t v11 = v0[16];

  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v11 + 64, (uint64_t)(v0 + 2));
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v12);
  outlined init with copy of DeterministicLanguageModelProtocol(v11 + 280, (uint64_t)(v0 + 7));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[21] = v14;
  *uint64_t v14 = v0;
  v14[1] = ThreeStageSpeculativeDecoder.generateDraft();
  uint64_t v15 = v0[19];
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v15, (uint64_t)(v0 + 7), v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = v0[22];
  unint64_t v2 = v0[19];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (*(void *)(v1 + 16) >= *(void *)(v2 + 16)) {
    unint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    unint64_t v3 = *(void *)(v1 + 16);
  }
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE80];
  }
  unint64_t v5 = v0[22];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[19];
  unint64_t v16 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, v5, 1, &v16);
  if (v6)
  {
    return swift_unexpectedError();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v16;
    v0[24] = v16;
    unint64_t v10 = Logger.logObject.getter();
    unint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_25FA51000, v10, v11, "Creating a draft tree from the tiny model suggestion.", v12, 2u);
      MEMORY[0x261206F80](v12, -1, -1);
    }

    uint64_t v13 = (void *)swift_task_alloc();
    v0[25] = v13;
    *uint64_t v13 = v0;
    v13[1] = ThreeStageSpeculativeDecoder.generateDraft();
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[16];
    v13[59] = v9;
    v13[60] = v15;
    v13[58] = v14;
    return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[18] = a1;
  v4[19] = a2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.generateDraft(), 0, 0);
  }
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(v6 + 208) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.generateDraft(), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 56;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of LogitPresampler?(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 56);
    unint64_t v5 = ThreeStageSpeculativeDecoder.generateDraft();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)(uint64_t a1, uint64_t a2)
{
  v3[80] = v2;
  v3[79] = a2;
  v3[78] = a1;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:), 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  uint64_t v114 = (uint64_t *)(v0 + 616);
  unint64_t v115 = (void *)(v0 + 560);
  uint64_t v2 = *(void **)(v0 + 640);
  uint64_t v3 = *(void *)(v0 + 632);
  uint64_t v4 = v2[19];
  uint64_t v5 = v2[13];
  uint64_t v6 = v2[7];
  *(void *)(v0 + 560) = 0;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v124 = (void *)v0;
  unint64_t v125 = *(void *)(v0 + 624);
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = v0 + 96;
    uint64_t v117 = (void *)(v0 + 256);
    char v118 = (long long *)(v0 + 136);
    uint64_t v116 = v0 + 464;
    uint64_t v119 = v0 + 96;
    while (1)
    {
      *(void *)(v0 + 672) = v125;
      *(void *)(v0 + 664) = v6;
      *(void *)(v0 + 656) = v5;
      *(void *)(v0 + 648) = v4;
      unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
      if ((v11 & 1) == 0) {
        goto LABEL_65;
      }
      uint64_t v12 = *(void *)(v0 + 640);
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(*(void *)(v0 + 632) + 56) + 40 * v10, (uint64_t)v118);
      outlined init with take of LogitCollection(v118, v7);
      uint64_t v13 = *(void *)(v0 + 640);
      if (*(unsigned char *)(v12 + 188))
      {
        if (*(unsigned char *)(v13 + 189) == 1)
        {
          outlined init with copy of DeterministicLanguageModelProtocol(v13 + 64, v0 + 56);
          uint64_t v107 = *(void *)(v0 + 80);
          uint64_t v108 = *(void *)(v0 + 88);
          __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v107);
          *(_OWORD *)(v0 + 192) = 0u;
          *(void *)(v0 + 208) = 0;
          *(_OWORD *)(v0 + 176) = 0u;
          uint64_t v109 = (void *)swift_task_alloc();
          *(void *)(v0 + 680) = v109;
          *uint64_t v109 = v0;
          v109[1] = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
          return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 16, v5, v0 + 176, 0, v107, v108);
        }
        uint64_t v14 = *(void *)(v13 + 224);
        uint64_t v15 = *(void *)(v13 + 232);
        __swift_project_boxed_opaque_existential_1((void *)(v13 + 200), v14);
        uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(v7, v14, v15);
      }
      else
      {
        float v16 = *(float *)(v12 + 184);
        outlined init with copy of DeterministicLanguageModelProtocol(v13 + 200, (uint64_t)v117);
        uint64_t v18 = *(void *)(v0 + 280);
        uint64_t v17 = *(void *)(v0 + 288);
        __swift_project_boxed_opaque_existential_1(v117, v18);
        if (v125 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v19 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        uint64_t v0 = -1;
        uint64_t v121 = v17;
        if (v19)
        {
          *uint64_t v114 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
          if (v19 < 0) {
            goto LABEL_102;
          }
          uint64_t v20 = *v114;
          if ((v125 & 0xC000000000000001) != 0)
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              uint64_t v22 = *(void *)(MEMORY[0x261205930](i, v125) + 16);
              swift_unknownObjectRelease();
              *uint64_t v114 = v20;
              unint64_t v24 = *(void *)(v20 + 16);
              unint64_t v23 = *(void *)(v20 + 24);
              if (v24 >= v23 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
                uint64_t v20 = *v114;
              }
              *(void *)(v20 + 16) = v24 + 1;
              *(void *)(v20 + 8 * v24 + 32) = v22;
            }
            swift_bridgeObjectRelease();
            uint64_t v7 = v119;
          }
          else
          {
            uint64_t v25 = v18;
            uint64_t v26 = 0;
            unint64_t v27 = *(void *)(v20 + 16);
            do
            {
              uint64_t v28 = *(void *)(*(void *)(v125 + 8 * v26 + 32) + 16);
              *uint64_t v114 = v20;
              unint64_t v29 = *(void *)(v20 + 24);
              if (v27 >= v29 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v27 + 1, 1);
                uint64_t v20 = *v114;
              }
              ++v26;
              *(void *)(v20 + 16) = v27 + 1;
              *(void *)(v20 + 8 * v27++ + 32) = v28;
            }
            while (v19 != v26);
            swift_bridgeObjectRelease();
            uint64_t v7 = v119;
            uint64_t v18 = v25;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v20 = MEMORY[0x263F8EE78];
        }
        uint64_t v30 = Set.init(minimumCapacity:)();
        uint64_t v31 = *(void *)(v20 + 16);
        if (v31)
        {
          uint64_t v32 = 0;
          do
          {
            uint64_t v34 = v30 + 56;
            while (1)
            {
              uint64_t v35 = *(void *)(v20 + 32 + 8 * v32++);
              uint64_t v36 = static Hasher._hash(seed:_:)();
              uint64_t v37 = -1 << *(unsigned char *)(v30 + 32);
              unint64_t v38 = v36 & ~v37;
              if (((*(void *)(v34 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
                break;
              }
              uint64_t v39 = *(void *)(v30 + 48);
              if (*(void *)(v39 + 8 * v38) != v35)
              {
                uint64_t v40 = ~v37;
                do
                {
                  unint64_t v38 = (v38 + 1) & v40;
                  if (((*(void *)(v34 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
                    goto LABEL_27;
                  }
                }
                while (*(void *)(v39 + 8 * v38) != v35);
              }
              if (v32 == v31) {
                goto LABEL_36;
              }
            }
LABEL_27:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeSet.insertNew(_:at:isUnique:)(v35, v38, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
          }
          while (v32 != v31);
        }
LABEL_36:
        swift_bridgeObjectRelease();
        uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v121 + 16))(v7, v30, v18, v16);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
        uint64_t v0 = (uint64_t)v124;
      }
      uint64_t v120 = *(void *)(v0 + 664);
      unint64_t v122 = *(void *)(v0 + 672);
      uint64_t v41 = *(void *)(v0 + 656);
      uint64_t v42 = *(void *)(v0 + 648);
      uint64_t v43 = *(void **)(v0 + 640);
      swift_beginAccess();
      uint64_t v44 = v43[17];
      uint64_t v45 = v43[18];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v43 + 14), v44);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v45 + 16))(v42, v1, 0, v44, v45);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v46 = v43[11];
      uint64_t v47 = v43[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v43 + 8), v46);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v47 + 16))(v41, v1, 0, v46, v47);
      swift_endAccess();
      uint64_t v0 = v116;
      swift_beginAccess();
      uint64_t v48 = v43[5];
      uint64_t v49 = v43[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v43 + 2), v48);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v49 + 16))(v120, v1, 0, v48, v49);
      swift_endAccess();
      if (v122 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v50)
        {
LABEL_84:
          uint64_t v0 = (uint64_t)v124;
          uint64_t v100 = v124[80];
          swift_bridgeObjectRelease();
          swift_beginAccess();
          unint64_t v77 = *(void **)(v100 + 328);
          char v101 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v100 + 328) = v77;
          if (v101) {
            goto LABEL_85;
          }
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v50 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v50) {
          goto LABEL_84;
        }
      }
      if ((v125 & 0xC000000000000001) != 0) {
        break;
      }
      uint64_t v54 = 4;
      do
      {
        uint64_t v55 = v54 - 3;
        if (__OFADD__(v54 - 4, 1)) {
          goto LABEL_100;
        }
        uint64_t v53 = *(void *)(v124[84] + 8 * v54);
        if (*(void *)(v53 + 16) == v1)
        {
          swift_retain();
          swift_bridgeObjectRelease();
LABEL_57:
          if (!__OFADD__(*v115, 1))
          {
            uint64_t v62 = v124[80];
            v124[70] = *v115 + 1;
            swift_beginAccess();
            unint64_t v63 = *(void *)(v53 + 24);
            swift_beginAccess();
            uint64_t v64 = *(void **)(v62 + 328);
            unint64_t v125 = v63;
            swift_bridgeObjectRetain();
            char v65 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v62 + 328) = v64;
            if ((v65 & 1) == 0)
            {
              uint64_t v69 = v124[80];
              uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
              *(void *)(v69 + 328) = v64;
            }
            uint64_t v7 = v119;
            unint64_t v67 = v64[2];
            unint64_t v66 = v64[3];
            if (v67 >= v66 >> 1)
            {
              uint64_t v68 = v124[80];
              uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v64);
              *(void *)(v68 + 328) = v64;
              uint64_t v7 = v119;
            }
            v64[2] = v67 + 1;
            unint64_t v8 = &v64[5 * v67];
            v8[4] = v4;
            v8[5] = v5;
            v8[6] = v6;
            v8[7] = v1;
            *((unsigned char *)v8 + 64) = 0;
            swift_endAccess();
            swift_release();
            goto LABEL_4;
          }
          goto LABEL_101;
        }
        ++v54;
      }
      while (v55 != v50);
      swift_bridgeObjectRelease();
LABEL_50:
      uint64_t v56 = v124[80];
      swift_beginAccess();
      uint64_t v57 = *(void **)(v56 + 328);
      char v58 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v56 + 328) = v57;
      if ((v58 & 1) == 0)
      {
        uint64_t v70 = v124[80];
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        *(void *)(v70 + 328) = v57;
      }
      unint64_t v60 = v57[2];
      unint64_t v59 = v57[3];
      if (v60 >= v59 >> 1)
      {
        uint64_t v71 = v124[80];
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v57);
        *(void *)(v71 + 328) = v57;
      }
      v57[2] = v60 + 1;
      uint64_t v61 = &v57[5 * v60];
      v61[4] = v4;
      v61[5] = v5;
      v61[6] = v6;
      v61[7] = v1;
      *((unsigned char *)v61 + 64) = 1;
      swift_endAccess();
      unint64_t v125 = MEMORY[0x263F8EE78];
      uint64_t v7 = v119;
LABEL_4:
      uint64_t v9 = v124[79];
      __swift_destroy_boxed_opaque_existential_1(v7);
      uint64_t v0 = (uint64_t)v124;
      if (!*(void *)(v9 + 16)) {
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v51 = 0;
    while (1)
    {
      uint64_t v52 = MEMORY[0x261205930](v51, v124[84]);
      uint64_t v0 = v51 + 1;
      if (__OFADD__(v51, 1)) {
        break;
      }
      uint64_t v53 = v52;
      if (*(void *)(v52 + 16) == v1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }
      swift_unknownObjectRelease();
      ++v51;
      if (v0 == v50)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
LABEL_65:
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v72 = *(void *)(v0 + 640);
    uint64_t v73 = *(void *)(v0 + 560);
    uint64_t v74 = *(void *)(v72 + 360);
    BOOL v75 = __OFADD__(v74, v73);
    uint64_t v76 = v74 + v73;
    if (v75)
    {
LABEL_103:
      __break(1u);
    }
    else
    {
      *(void *)(v72 + 360) = v76;
      if (one-time initialization token for device == -1) {
        goto LABEL_68;
      }
    }
    swift_once();
LABEL_68:
    unint64_t v77 = (void *)(v0 + 584);
    uint64_t v78 = type metadata accessor for Logger();
    uint64_t v6 = __swift_project_value_buffer(v78, (uint64_t)static Log.device);
    uint64_t v4 = v124[70];
    uint64_t v0 = (uint64_t)v124;
    swift_retain();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.debug.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v5 = v124[80];
    if (v81)
    {
      uint64_t v123 = v6;
      uint64_t v82 = v4;
      uint64_t v4 = (uint64_t)(v124 + 71);
      uint64_t v1 = (uint64_t)(v124 + 72);
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 134218240;
      swift_beginAccess();
      v124[72] = *(void *)(*(void *)(v5 + 328) + 16);
      uint64_t v0 = (uint64_t)v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v83 + 12) = 2048;
      v124[71] = v82;
      uint64_t v6 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v79, v80, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v83, 0x16u);
      MEMORY[0x261206F80](v83, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_beginAccess();
    if ((uint64_t)*v115 < 1) {
      goto LABEL_74;
    }
    uint64_t v84 = *(void *)(v0 + 640);
    uint64_t v85 = *(void *)(v84 + 392);
    BOOL v75 = __OFADD__(v85, 1);
    uint64_t v86 = v85 + 1;
    if (!v75) {
      break;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    uint64_t v112 = *(void *)(v0 + 640);
    unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
    *(void *)(v112 + 328) = v77;
LABEL_85:
    unint64_t v103 = v77[2];
    unint64_t v102 = v77[3];
    if (v103 >= v102 >> 1)
    {
      uint64_t v113 = v124[80];
      unint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v102 > 1), v103 + 1, 1, v77);
      *(void *)(v113 + 328) = v77;
      uint64_t v0 = (uint64_t)v124;
    }
    void v77[2] = v103 + 1;
    unint64_t v104 = &v77[5 * v103];
    v104[4] = v4;
    v104[5] = v5;
    v104[6] = v6;
    v104[7] = v1;
    *((unsigned char *)v104 + 64) = 1;
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1(v119);
  }
  *(void *)(v84 + 392) = v86;
LABEL_74:
  uint64_t v87 = *(void *)(v0 + 640);
  uint64_t v88 = *(void *)(v87 + 400);
  BOOL v75 = __OFADD__(v88, 1);
  uint64_t v89 = v88 + 1;
  if (v75)
  {
    __break(1u);
    goto LABEL_106;
  }
  *(void *)(v87 + 400) = v89;
  if (*(unsigned char *)(v87 + 168) == 1)
  {
    uint64_t v90 = *(void *)(v0 + 640);
    swift_beginAccess();
    unint64_t v91 = *(void *)(v90 + 320);
    int64_t v92 = *(void *)(*(void *)(v90 + 328) + 16);
    if ((uint64_t)v91 >= v92)
    {
      if (v91 == v92 || v91 < 2)
      {
        swift_retain();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v105))
        {
          uint64_t v106 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v106 = 134217984;
          v124[76] = *(void *)(v90 + 320);
          uint64_t v0 = (uint64_t)v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_25FA51000, v93, v105, "Keeping draftCount at %ld", v106, 0xCu);
          MEMORY[0x261206F80](v106, -1, -1);
          goto LABEL_95;
        }
      }
      else
      {
        *(void *)(v90 + 320) = v91 - 1;
        swift_retain();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v98))
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v99 = 134217984;
          *(void *)(v0 + 592) = *(void *)(v90 + 320);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_25FA51000, v93, v98, "Adjusting draftCount down to %ld", v99, 0xCu);
          MEMORY[0x261206F80](v99, -1, -1);
          goto LABEL_95;
        }
      }
      swift_release();
    }
    else
    {
      *(void *)(v90 + 320) = v91 + 1;
      swift_retain();
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v93, v94))
      {
        unint64_t v95 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = v77;
        uint64_t v97 = v95;
        *(_DWORD *)unint64_t v95 = 134217984;
        *uint64_t v96 = *(void *)(v90 + 320);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v93, v94, "Adjusting draftCount up to %ld", v97, 0xCu);
        MEMORY[0x261206F80](v97, -1, -1);
      }
      else
      {
        swift_release();
      }
      uint64_t v0 = (uint64_t)v124;
    }
LABEL_95:
  }
  uint64_t v111 = *(uint64_t (**)(void))(v0 + 8);
  return v111();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 176;
  *(void *)(*(void *)v1 + 688) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  }
  else
  {
    uint64_t v3 = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t k;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t *v137;
  void *v138;
  void *v139;
  long long *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  unint64_t v150;
  uint64_t v151;

  uint64_t v2 = v0 + 56;
  uint64_t v3 = v0 + 216;
  uint64_t v4 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 640) + 200;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined init with copy of DeterministicLanguageModelProtocol(v5, v0 + 216);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), v7);
  uint64_t v150 = v4;
  if (v4 >> 62)
  {
LABEL_135:
    swift_bridgeObjectRetain();
    unint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    unint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = (uint64_t *)(v0 + 600);
  unint64_t v149 = (void *)v0;
  unint64_t v145 = v6;
  if (v8)
  {
    *uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      goto LABEL_139;
    }
    unint64_t v10 = *v9;
    if ((v150 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v12 = *(void *)(MEMORY[0x261205930](i, v149[84]) + 16);
        swift_unknownObjectRelease();
        v149[75] = v10;
        uint64_t v14 = *(void *)(v10 + 16);
        uint64_t v13 = *(void *)(v10 + 24);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          unint64_t v10 = *v9;
        }
        *(void *)(v10 + 16) = v14 + 1;
        *(void *)(v10 + 8 * v14 + 32) = v12;
      }
      uint64_t v0 = (uint64_t)v149;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = v7;
      float v16 = *(void *)(v0 + 672) + 32;
      uint64_t v17 = *(void *)(v10 + 16);
      do
      {
        uint64_t v18 = *(void *)(*(void *)v16 + 16);
        *uint64_t v9 = v10;
        uint64_t v19 = *(void *)(v10 + 24);
        if (v17 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v17 + 1, 1);
          unint64_t v10 = *v9;
        }
        *(void *)(v10 + 16) = v17 + 1;
        *(void *)(v10 + 8 * v17 + 32) = v18;
        v16 += 8;
        ++v17;
        --v8;
      }
      while (v8);
      uint64_t v0 = (uint64_t)v149;
      swift_bridgeObjectRelease();
      uint64_t v7 = v15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v131 = (void *)v2;
  unint64_t v136 = v0 + 16;
  uint64_t v148 = v0 + 96;
  uint64_t v139 = (void *)(v0 + 256);
  unint64_t v140 = (long long *)(v0 + 136);
  uint64_t v142 = v0 + 392;
  uint64_t v141 = v0 + 464;
  uint64_t v20 = Set.init(minimumCapacity:)();
  unint64_t v21 = v20;
  uint64_t v22 = *(void *)(v10 + 16);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  unint64_t v23 = v3;
  unint64_t v24 = 0;
  for (uint64_t j = v20 + 56; ; uint64_t j = v21 + 56)
  {
    while (1)
    {
      uint64_t v26 = *(void *)(v10 + 32 + 8 * v24++);
      unint64_t v27 = static Hasher._hash(seed:_:)();
      uint64_t v28 = -1 << *(unsigned char *)(v21 + 32);
      unint64_t v29 = v27 & ~v28;
      if (((*(void *)(j + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v30 = *(void *)(v21 + 48);
      if (*(void *)(v30 + 8 * v29) != v26) {
        break;
      }
LABEL_19:
      if (v24 == v22) {
        goto LABEL_28;
      }
    }
    uint64_t v31 = ~v28;
    while (1)
    {
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(j + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
        break;
      }
      if (*(void *)(v30 + 8 * v29) == v26) {
        goto LABEL_19;
      }
    }
LABEL_26:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v26, v29, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (v24 == v22) {
      break;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v3 = v23;
LABEL_30:
  uint64_t v1 = v149;
  uint64_t v138 = v149 + 70;
  uint64_t v133 = v149 + 72;
  uint64_t v134 = v149 + 71;
  uint64_t v135 = v149 + 73;
  unint64_t v132 = v149 + 74;
  uint64_t v130 = v149 + 76;
  uint64_t v137 = v149 + 77;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 24))(v148, v136, v21, v7);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v136);
  __swift_destroy_boxed_opaque_existential_1(v3);
  while (1)
  {
    char v144 = v1[83];
    long long v146 = v1[84];
    uint64_t v33 = v1[82];
    uint64_t v34 = v1[81];
    uint64_t v35 = (void *)v1[80];
    swift_beginAccess();
    uint64_t v37 = v35[17];
    uint64_t v36 = v35[18];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v35 + 14), v37);
    uint64_t v143 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v36 + 16))(v34, v7, 0, v37, v36);
    swift_endAccess();
    uint64_t v3 = v142;
    swift_beginAccess();
    unint64_t v38 = v35[11];
    uint64_t v39 = v35[12];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v35 + 8), v38);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v39 + 16))(v33, v7, 0, v38, v39);
    swift_endAccess();
    uint64_t v0 = v141;
    swift_beginAccess();
    uint64_t v6 = v35[5];
    uint64_t v40 = v35[6];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v35 + 2), v6);
    uint64_t v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v40 + 16))(v144, v7, 0, v6, v40);
    swift_endAccess();
    if (v146 >> 62)
    {
      uint64_t v1 = v149;
      if ((uint64_t)v149[84] < 0) {
        uint64_t v6 = v149[84];
      }
      else {
        uint64_t v6 = v150 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v41)
      {
LABEL_99:
        os_log_type_t v94 = v1[80];
        swift_bridgeObjectRelease();
        swift_beginAccess();
        unint64_t v8 = *(void *)(v94 + 328);
        unint64_t v95 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v94 + 328) = v8;
        if (v95) {
          goto LABEL_100;
        }
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v1 = v149;
      uint64_t v41 = *(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v41) {
        goto LABEL_99;
      }
    }
    if ((v150 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v42 = MEMORY[0x261205930](v6, v1[84]);
        uint64_t v0 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          break;
        }
        uint64_t v43 = v42;
        if (*(void *)(v42 + 16) == v7)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_53;
        }
        swift_unknownObjectRelease();
        ++v6;
        if (v0 == v41)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_46;
        }
      }
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    uint64_t v44 = 4;
    do
    {
      uint64_t v45 = v44 - 3;
      if (__OFADD__(v44 - 4, 1)) {
        goto LABEL_132;
      }
      uint64_t v43 = *(void *)(v1[84] + 8 * v44);
      if (*(void *)(v43 + 16) == v7)
      {
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_53:
        if (!__OFADD__(*v138, 1))
        {
          uint64_t v53 = v1[80];
          v1[70] = *v138 + 1;
          swift_beginAccess();
          uint64_t v54 = *(void *)(v43 + 24);
          swift_beginAccess();
          uint64_t v55 = *(void **)(v53 + 328);
          uint64_t v150 = v54;
          swift_bridgeObjectRetain();
          uint64_t v56 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v53 + 328) = v55;
          if ((v56 & 1) == 0)
          {
            uint64_t v90 = v1[80];
            uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
            *(void *)(v90 + 328) = v55;
          }
          uint64_t v52 = v143;
          char v58 = v55[2];
          uint64_t v57 = v55[3];
          if (v58 >= v57 >> 1)
          {
            unint64_t v91 = v1[80];
            uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v55);
            *(void *)(v91 + 328) = v55;
            uint64_t v52 = v143;
          }
          v55[2] = v58 + 1;
          unint64_t v59 = &v55[5 * v58];
          v59[4] = v52;
          uint64_t v59[5] = v2;
          v59[6] = v9;
          v59[7] = v7;
          *((unsigned char *)v59 + 64) = 0;
          swift_endAccess();
          swift_release();
          goto LABEL_59;
        }
        goto LABEL_133;
      }
      ++v44;
    }
    while (v45 != v41);
    swift_bridgeObjectRelease();
LABEL_46:
    uint64_t v46 = v1[80];
    swift_beginAccess();
    uint64_t v47 = *(void **)(v46 + 328);
    uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v46 + 328) = v47;
    if ((v48 & 1) == 0)
    {
      int64_t v92 = v1[80];
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      *(void *)(v92 + 328) = v47;
    }
    uint64_t v50 = v47[2];
    uint64_t v49 = v47[3];
    if (v50 >= v49 >> 1)
    {
      uint64_t v93 = v1[80];
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v47);
      *(void *)(v93 + 328) = v47;
    }
    v47[2] = v50 + 1;
    uint64_t v51 = &v47[5 * v50];
    uint64_t v52 = v143;
    v51[4] = v143;
    v51[5] = v2;
    v51[6] = v9;
    v51[7] = v7;
    *((unsigned char *)v51 + 64) = 1;
    swift_endAccess();
    uint64_t v150 = MEMORY[0x263F8EE78];
LABEL_59:
    unint64_t v60 = v1[79];
    __swift_destroy_boxed_opaque_existential_1(v148);
    if (!*(void *)(v60 + 16)) {
      break;
    }
    v1[84] = v150;
    v1[83] = v9;
    v1[82] = v2;
    v1[81] = v52;
    uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
    if ((v62 & 1) == 0) {
      break;
    }
    unint64_t v63 = v1[80];
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v1[79] + 56) + 40 * v61, (uint64_t)v140);
    outlined init with take of LogitCollection(v140, v148);
    uint64_t v64 = v1[80];
    if (*(unsigned char *)(v63 + 188))
    {
      if (*(unsigned char *)(v64 + 189) == 1)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v64 + 64, (uint64_t)v131);
        uint64_t v124 = v1[10];
        uint64_t v123 = v1[11];
        __swift_project_boxed_opaque_existential_1(v131, v124);
        *((_OWORD *)v1 + 12) = 0u;
        v1[26] = 0;
        *((_OWORD *)v1 + 11) = 0u;
        unint64_t v125 = (void *)swift_task_alloc();
        v1[85] = v125;
        *unint64_t v125 = v1;
        v125[1] = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
        return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v136, v2, (uint64_t)(v1 + 22), 0, v124, v123);
      }
      char v65 = *(void *)(v64 + 224);
      unint64_t v66 = *(void *)(v64 + 232);
      __swift_project_boxed_opaque_existential_1((void *)(v64 + 200), v65);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 8))(v148, v65, v66);
    }
    else
    {
      unint64_t v67 = *(float *)(v63 + 184);
      outlined init with copy of DeterministicLanguageModelProtocol(v64 + 200, (uint64_t)v139);
      uint64_t v7 = v1[35];
      uint64_t v6 = v1[36];
      __swift_project_boxed_opaque_existential_1(v139, v7);
      uint64_t v2 = v150;
      uint64_t v0 = -1;
      if (v150 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v68 = *(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v69 = v149 + 77;
      uint64_t v147 = v6;
      if (v68)
      {
        *uint64_t v137 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68 & ~(v68 >> 63), 0);
        if (v68 < 0) {
          goto LABEL_134;
        }
        uint64_t v70 = *v137;
        if ((v150 & 0xC000000000000001) != 0)
        {
          for (uint64_t k = 0; k != v68; ++k)
          {
            uint64_t v72 = *(void *)(MEMORY[0x261205930](k, v150) + 16);
            swift_unknownObjectRelease();
            *uint64_t v69 = v70;
            uint64_t v74 = *(void *)(v70 + 16);
            uint64_t v73 = *(void *)(v70 + 24);
            if (v74 >= v73 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
              uint64_t v69 = v149 + 77;
              uint64_t v70 = *v137;
            }
            *(void *)(v70 + 16) = v74 + 1;
            *(void *)(v70 + 8 * v74 + 32) = v72;
          }
        }
        else
        {
          BOOL v75 = 0;
          uint64_t v76 = *(void *)(v70 + 16);
          do
          {
            unint64_t v77 = *(void *)(*(void *)(v2 + 8 * v75 + 32) + 16);
            *uint64_t v69 = v70;
            uint64_t v78 = *(void *)(v70 + 24);
            if (v76 >= v78 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v76 + 1, 1);
              uint64_t v69 = v149 + 77;
              uint64_t v70 = *v137;
            }
            ++v75;
            *(void *)(v70 + 16) = v76 + 1;
            *(void *)(v70 + 8 * v76++ + 32) = v77;
            uint64_t v2 = v150;
          }
          while (v68 != v75);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v70 = MEMORY[0x263F8EE78];
      }
      uint64_t v79 = Set.init(minimumCapacity:)();
      os_log_type_t v80 = *(void *)(v70 + 16);
      if (v80)
      {
        BOOL v81 = 0;
        do
        {
          uint64_t v83 = v79 + 56;
          while (1)
          {
            uint64_t v84 = *(void *)(v70 + 32 + 8 * v81++);
            uint64_t v85 = static Hasher._hash(seed:_:)();
            uint64_t v86 = -1 << *(unsigned char *)(v79 + 32);
            uint64_t v87 = v85 & ~v86;
            if (((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) == 0) {
              break;
            }
            uint64_t v88 = *(void *)(v79 + 48);
            if (*(void *)(v88 + 8 * v87) != v84)
            {
              uint64_t v89 = ~v86;
              do
              {
                uint64_t v87 = (v87 + 1) & v89;
                if (((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) == 0) {
                  goto LABEL_82;
                }
              }
              while (*(void *)(v88 + 8 * v87) != v84);
            }
            if (v81 == v80) {
              goto LABEL_31;
            }
          }
LABEL_82:
          uint64_t v82 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v84, v87, v82);
          swift_bridgeObjectRelease();
        }
        while (v81 != v80);
LABEL_31:
        swift_bridgeObjectRelease();
        uint64_t v1 = v149;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v147 + 16))(v148, v79, v7, v67);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    }
  }
  swift_bridgeObjectRelease();
  while (2)
  {
    uint64_t v99 = v1[80];
    uint64_t v100 = v1[70];
    char v101 = *(void *)(v99 + 360);
    unint64_t v102 = __OFADD__(v101, v100);
    unint64_t v103 = v101 + v100;
    if (v102)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v99 + 360) = v103;
      if (one-time initialization token for device == -1) {
        goto LABEL_105;
      }
    }
    swift_once();
LABEL_105:
    unint64_t v104 = type metadata accessor for Logger();
    uint64_t v9 = (uint64_t *)__swift_project_value_buffer(v104, (uint64_t)static Log.device);
    os_log_type_t v105 = v1[70];
    swift_retain();
    uint64_t v106 = Logger.logObject.getter();
    uint64_t v107 = static os_log_type_t.debug.getter();
    uint64_t v108 = os_log_type_enabled(v106, v107);
    uint64_t v7 = v1[80];
    if (v108)
    {
      uint64_t v109 = swift_slowAlloc();
      *(_DWORD *)uint64_t v109 = 134218240;
      swift_beginAccess();
      uint64_t v2 = (uint64_t)v133;
      *uint64_t v133 = *(void *)(*(void *)(v7 + 328) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v109 + 12) = 2048;
      *uint64_t v134 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v106, v107, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v109, 0x16u);
      MEMORY[0x261206F80](v109, -1, -1);
    }
    else
    {
      swift_release();
    }

    unint64_t v8 = (uint64_t)v138;
    swift_beginAccess();
    if ((uint64_t)*v138 >= 1)
    {
      uint64_t v110 = v1[80];
      uint64_t v111 = *(void *)(v110 + 392);
      unint64_t v102 = __OFADD__(v111, 1);
      uint64_t v112 = v111 + 1;
      if (!v102)
      {
        *(void *)(v110 + 392) = v112;
        break;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      uint64_t v128 = v1[80];
      unint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (void *)v8);
      *(void *)(v128 + 328) = v8;
LABEL_100:
      uint64_t v97 = *(void *)(v8 + 16);
      uint64_t v96 = *(void *)(v8 + 24);
      if (v97 >= v96 >> 1)
      {
        uint64_t v129 = v1[80];
        unint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v96 > 1), v97 + 1, 1, (void *)v8);
        *(void *)(v129 + 328) = v8;
      }
      *(void *)(v8 + 16) = v97 + 1;
      os_log_type_t v98 = v8 + 40 * v97;
      *(void *)(v98 + 32) = v143;
      *(void *)(v98 + 40) = v2;
      *(void *)(v98 + 48) = v9;
      *(void *)(v98 + 56) = v7;
      *(unsigned char *)(v98 + 64) = 1;
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1(v148);
      continue;
    }
    break;
  }
  uint64_t v113 = v1[80];
  uint64_t v114 = *(void *)(v113 + 400);
  unint64_t v102 = __OFADD__(v114, 1);
  unint64_t v115 = v114 + 1;
  if (v102)
  {
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  *(void *)(v113 + 400) = v115;
  if (*(unsigned char *)(v113 + 168) == 1)
  {
    uint64_t v116 = v1[80];
    swift_beginAccess();
    uint64_t v117 = *(void *)(v116 + 320);
    char v118 = *(void *)(*(void *)(v116 + 328) + 16);
    if ((uint64_t)v117 >= v118)
    {
      if (v117 == v118 || v117 < 2)
      {
        swift_retain();
        uint64_t v119 = Logger.logObject.getter();
        uint64_t v120 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v119, v120)) {
          goto LABEL_126;
        }
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v121 = 134217984;
        *uint64_t v130 = *(void *)(v116 + 320);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        unint64_t v122 = "Keeping draftCount at %ld";
      }
      else
      {
        *(void *)(v116 + 320) = v117 - 1;
        swift_retain();
        uint64_t v119 = Logger.logObject.getter();
        uint64_t v120 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v119, v120)) {
          goto LABEL_126;
        }
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v121 = 134217984;
        *unint64_t v132 = *(void *)(v116 + 320);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        unint64_t v122 = "Adjusting draftCount down to %ld";
      }
LABEL_125:
      _os_log_impl(&dword_25FA51000, v119, v120, v122, v121, 0xCu);
      MEMORY[0x261206F80](v121, -1, -1);
    }
    else
    {
      *(void *)(v116 + 320) = v117 + 1;
      swift_retain();
      uint64_t v119 = Logger.logObject.getter();
      uint64_t v120 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v119, v120))
      {
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v121 = 134217984;
        char *v135 = *(void *)(v116 + 320);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        unint64_t v122 = "Adjusting draftCount up to %ld";
        goto LABEL_125;
      }
LABEL_126:
      swift_release();
    }
  }
  uint64_t v127 = (uint64_t (*)(void))v1[1];
  return v127();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ThreeStageSpeculativeDecoder.drawBufferedToken()()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = v0[41];
  if (!*(void *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  int v7 = *(unsigned __int8 *)(v2 + 64);
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  uint64_t result = swift_endAccess();
  uint64_t v8 = v0[47];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v0[47] = v10;
  if (!v7)
  {
LABEL_6:
    v0[19] = v3;
    v0[13] = v4;
    v0[7] = v6;
    return v5;
  }
  uint64_t v11 = v0[48];
  BOOL v9 = __OFADD__(v11, 1);
  uint64_t v12 = v11 + 1;
  if (!v9)
  {
    v0[48] = v12;
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ThreeStageSpeculativeDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)prompt.queryTokens._rawValue;
  uint64_t v4 = *((void *)prompt.queryTokens._rawValue + 1);
  uint64_t v5 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(v4 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v9);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v27 + 16);
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_beginAccess();
    *(void *)(v2 + 328) = v6;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v2 + 152);
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    swift_beginAccess();
    uint64_t v13 = *(void *)(v2 + 136);
    uint64_t v14 = *(void *)(v2 + 144);
    __swift_mutable_project_boxed_opaque_existential_1(v2 + 112, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v14 + 48))(v12, &v24, v13, v14);
    swift_endAccess();
    *(void *)(v2 + 152) = v15;
    uint64_t v16 = *(void *)(v2 + 104);
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    swift_beginAccess();
    uint64_t v17 = *(void *)(v2 + 88);
    uint64_t v18 = *(void *)(v2 + 96);
    __swift_mutable_project_boxed_opaque_existential_1(v2 + 64, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, &v24, v17, v18);
    swift_endAccess();
    *(void *)(v2 + 104) = v19;
    uint64_t v20 = *(void *)(v2 + 56);
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v2 + 40);
    uint64_t v22 = *(void *)(v2 + 48);
    __swift_mutable_project_boxed_opaque_existential_1(v2 + 16, v21);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, &v24, v21, v22);
    swift_endAccess();
    *(void *)(v2 + 56) = v23;
    *(unsigned char *)(v2 + 336) = 1;
  }
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()()
{
  *(void *)(v1 + 400) = v0;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  uint64_t v10;

  uint64_t v1 = v0[50];
  if (*(unsigned char *)(v1 + 336) == 1)
  {
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 112, (uint64_t)(v0 + 2));
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
    v0[51] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v4 = swift_allocObject();
    v0[52] = v4;
    *(_OWORD *)(v4 + 16) = xmmword_25FB61DF0;
    *(void *)(v4 + 32) = *(void *)(v1 + 152);
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 240, (uint64_t)(v0 + 27));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[53] = v5;
    *uint64_t v5 = v0;
    v5[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
    return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v4, (uint64_t)(v0 + 27), v2, v3);
  }
  else
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 328) + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_25FB61DF0;
      *(void *)(v7 + 32) = ThreeStageSpeculativeDecoder.drawBufferedToken()();
      uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
      return v8(v7);
    }
    else
    {
      uint64_t v9 = (void *)swift_task_alloc();
      v0[56] = v9;
      *uint64_t v9 = v0;
      v9[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
      return ThreeStageSpeculativeDecoder.generateDraft()();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  uint64_t v1 = *(void *)(v0 + 432);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 56);
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 80)) {
    goto LABEL_12;
  }
  uint64_t v3 = *(void **)(v0 + 400);
  outlined init with take of LogitCollection((long long *)(v0 + 56), v0 + 176);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v4 = v3[28];
  uint64_t v5 = v3[29];
  __swift_project_boxed_opaque_existential_1(v3 + 25, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v0 + 176, v4, v5);
  uint64_t v6 = v3[47];
  uint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(v0 + 400);
  v3[47] = v7;
  uint64_t v9 = *(void *)(v8 + 384);
  uint64_t v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = *(void *)(v0 + 400);
  *(void *)(v8 + 384) = v11;
  uint64_t v14 = *(void *)(v13 + 152);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v13 + 136);
  uint64_t v15 = *(void *)(v13 + 144);
  __swift_mutable_project_boxed_opaque_existential_1(v13 + 112, v16);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v15 + 16))(v14, v12, 0, v16, v15);
  swift_endAccess();
  *(void *)(v13 + 152) = v17;
  uint64_t v18 = *(void *)(v13 + 104);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v13 + 88);
  uint64_t v20 = *(void *)(v13 + 96);
  __swift_mutable_project_boxed_opaque_existential_1(v13 + 64, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v20 + 16))(v18, v12, 0, v19, v20);
  swift_endAccess();
  *(void *)(v13 + 104) = v21;
  uint64_t v22 = *(void *)(v13 + 56);
  swift_beginAccess();
  uint64_t v23 = *(void *)(v13 + 40);
  uint64_t v24 = *(void *)(v13 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v13 + 16, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v24 + 16))(v22, v12, 0, v23, v24);
  swift_endAccess();
  *(void *)(v13 + 56) = v25;
  *(unsigned char *)(v13 + 336) = 0;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25FB61DF0;
  *(void *)(v26 + 32) = v12;
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v27(v26);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[50];
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 112, (uint64_t)(v0 + 12));
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v2);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 240, (uint64_t)(v0 + 17));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[59] = v4;
  *uint64_t v4 = v0;
  v4[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
  uint64_t v5 = v0[58];
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v5, (uint64_t)(v0 + 17), v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[58];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  if (*(void *)(v1 + 16) >= *(void *)(v2 + 16)) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = *(void *)(v1 + 16);
  }
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE80];
  }
  uint64_t v5 = v0[60];
  uint64_t v6 = v0[61];
  uint64_t v7 = v0[58];
  uint64_t v12 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, v5, 1, &v12);
  if (v6)
  {
    return swift_unexpectedError();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v12;
    v0[62] = v12;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[63] = v10;
    *uint64_t v10 = v0;
    v10[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
    uint64_t v11 = v0[57];
    v10[80] = v0[50];
    v10[79] = v9;
    v10[78] = v11;
    return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  else {
    uint64_t v2 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 400);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v1 + 328) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_25FB61DF0;
    *(void *)(v2 + 32) = ThreeStageSpeculativeDecoder.drawBufferedToken()();
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 216;
  *(void *)(v3 + 432) = a1;
  *(void *)(v3 + 440) = v1;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v4);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v5 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  else {
    uint64_t v5 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 136;
  *(void *)(v3 + 480) = a1;
  *(void *)(v3 + 488) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of LogitPresampler?(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 136);
    uint64_t v5 = ThreeStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[57] = a1;
  v4[58] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
  }
}

uint64_t ThreeStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 352);
  if (v1 < 1) {
    return 0;
  }
  else {
    return COERCE_UNSIGNED_INT((float)((float)*(uint64_t *)(v0 + 344) * 100.0) / (float)v1);
  }
}

double ThreeStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 368);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 360) * 100.0) / (float)v1;
  return result;
}

double ThreeStageSpeculativeDecoder.speculationSuccessRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 400);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 392) * 100.0) / (float)v1;
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.draftEmptyResponse.getter()
{
  return 0;
}

uint64_t ThreeStageSpeculativeDecoder.draftEarlyReturn.getter()
{
  return 0;
}

uint64_t ThreeStageSpeculativeDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  __swift_destroy_boxed_opaque_existential_1(v0 + 240);
  __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ThreeStageSpeculativeDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  __swift_destroy_boxed_opaque_existential_1(v0 + 240);
  __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance ThreeStageSpeculativeDecoder(TokenGenerationInference::SamplingDecoderPrompt a1@<0:X0, 8:X1, 16:X2>)
{
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  v3[50] = v2;
  return MEMORY[0x270FA2498](ThreeStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(*(void *)v0 + 360) * 100.0) / (float)v1;
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 352);
  if (v1 < 1) {
    return 0;
  }
  else {
    return COERCE_UNSIGNED_INT((float)((float)*(uint64_t *)(*(void *)v0 + 344) * 100.0) / (float)v1);
  }
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 400);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(*(void *)v0 + 392) * 100.0) / (float)v1;
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  uint64_t v2 = *(void *)(*(void *)v0 + 384);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ThreeStageSpeculativeDecoder()
{
  return self;
}

uint64_t method lookup function for ThreeStageSpeculativeDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ThreeStageSpeculativeDecoder);
}

uint64_t dispatch thunk of ThreeStageSpeculativeDecoder.__allocating_init(tinyModel:draftModel:languageModel:behavior:sampler:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ThreeStageSpeculativeDecoder.BufferedToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ThreeStageSpeculativeDecoder.BufferedToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ThreeStageSpeculativeDecoder.BufferedToken()
{
  return &unk_270BD4AF0;
}

unint64_t lazy protocol witness table accessor for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  unint64_t result = lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken;
  if (!lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij21C08makeTinyA4Beam33_8mnopqrstu48LL10tinyLogits0T4Node05draftV006targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S3itFAKSiXEfU_AIS3iTf1cn_nTf4ngnnn_n(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v28;
    uint64_t v9 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v27 = v9 + 1;
      swift_beginAccess();
      uint64_t v11 = a2[17];
      uint64_t v12 = a2[18];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 14), v11);
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v12 + 16))(a3, v10, 0, v11, v12);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v13 = a2[11];
      uint64_t v14 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v14 + 16))(a4, v10, 0, v13, v14);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v16 = a2[5];
      uint64_t v17 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v16);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v17 + 16))(a5, v10, 0, v16, v17);
      swift_endAccess();
      unint64_t v20 = *(void *)(v28 + 16);
      unint64_t v19 = *(void *)(v28 + 24);
      if (v20 >= v19 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      }
      *(void *)(v28 + 16) = v20 + 1;
      uint64_t v21 = (void *)(v28 + 32 * v20);
      v21[4] = v26;
      v21[5] = v15;
      v21[6] = v18;
      v21[7] = v10;
      --v5;
      uint64_t v9 = v27;
    }
    while (v5);
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu40LL11draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v27 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v27;
    uint64_t v8 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v9 = *v8;
      uint64_t v26 = v8 + 1;
      swift_beginAccess();
      uint64_t v10 = a2[17];
      uint64_t v11 = a2[18];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 14), v10);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v11 + 16))(a3, v9, 0, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v12 = a2[11];
      uint64_t v13 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v13 + 16))(a4, v9, 0, v12, v13);
      swift_endAccess();
      uint64_t v15 = a2[7];
      swift_beginAccess();
      uint64_t v17 = a2[5];
      uint64_t v16 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v17);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v16 + 16))(v15, v9, 0, v17, v16);
      swift_endAccess();
      unint64_t v20 = *(void *)(v27 + 16);
      unint64_t v19 = *(void *)(v27 + 24);
      if (v20 >= v19 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      }
      *(void *)(v27 + 16) = v20 + 1;
      uint64_t v21 = (void *)(v27 + 32 * v20);
      v21[4] = v25;
      v21[5] = v14;
      v21[6] = v18;
      v21[7] = v9;
      --v4;
      uint64_t v8 = v26;
    }
    while (v4);
  }
  return v5;
}

uint64_t outlined init with take of (offset: Int, element: LogitCollection)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: LogitCollection)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  return &unk_270BD4B70;
}

unint64_t lazy protocol witness table accessor for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  unint64_t result = lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes;
  if (!lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes);
  }
  return result;
}

unint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_SDyS2i4next_Sf5logittGs5NeverOTg5058_sS2iSDyS2i4next_Sf5logittGIgyyo_Si6offset_Si7elementtACs5h112OIegnrzr_TR089_s24TokenGenerationInference32WeightedFiniteStateLanguageModelV6tokens9vocabSizeACSaySiG_R39Sgtcfckl1_M22GSi_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, (next: Int, logit: Float)>);
      uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      ++v3;
      v6[(result >> 6) + 8] |= 1 << result;
      *(void *)(v6[6] + 8 * result) = v5;
      uint64_t v9 = v6[7] + 16 * result;
      *(void *)uint64_t v9 = v3;
      *(_DWORD *)(v9 + 8) = 0;
      uint64_t v10 = v6[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v6[2] = v12;
      unint64_t v14 = *(void *)(v15 + 16);
      unint64_t v13 = *(void *)(v15 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v15 + 16) = v14 + 1;
      *(void *)(v15 + 8 * v14 + 32) = v6;
      if (v2 == v3) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So29TGIE5AdapterConfigurationObjCCs5NeverOTg509_sS2SSo29defg28CCIgggo_SS3key_SS5valuetABs5H173OIegnrzr_TR0129_s24TokenGenerationInference22LanguageModelReferenceO04makedE008externalD5MakerAA013DeterministicdE8Protocol_pAaF_pSSKcSg_tKFSo29abcD13CCSS_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = specialized Dictionary.startIndex.getter(v1);
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = v1 + 64;
    uint64_t v25 = v1 + 80;
    uint64_t v26 = v2;
    uint64_t v28 = v1 + 64;
    uint64_t v29 = v1;
    int v27 = v4;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v1 + 32))
    {
      unint64_t v9 = (unint64_t)v5 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v1 + 36) != v4) {
        goto LABEL_23;
      }
      uint64_t v30 = v6;
      uint64_t v10 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v5);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      unint64_t v13 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      id v16 = objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = (void *)MEMORY[0x2612053D0](0, 0xE000000000000000);
      uint64_t v18 = (void *)MEMORY[0x2612053D0](v11, v12);
      unint64_t v19 = (void *)MEMORY[0x2612053D0](v14, v15);
      objc_msgSend(v16, sel_initWithAdapterType_symbolName_mutableWeightsFilePath_, v17, v18, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v1 = v29;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      int64_t v8 = 1 << *(unsigned char *)(v29 + 32);
      if (v5 >= v8) {
        goto LABEL_24;
      }
      uint64_t v7 = v28;
      uint64_t v20 = *(void *)(v28 + 8 * v9);
      if ((v20 & (1 << v5)) == 0) {
        goto LABEL_25;
      }
      int v4 = v27;
      if (*(_DWORD *)(v29 + 36) != v27) {
        goto LABEL_26;
      }
      unint64_t v21 = v20 & (-2 << (v5 & 0x3F));
      if (v21)
      {
        int64_t v8 = __clz(__rbit64(v21)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = v9 + 1;
        unint64_t v23 = (unint64_t)(v8 + 63) >> 6;
        if (v9 + 1 < v23)
        {
          unint64_t v24 = *(void *)(v28 + 8 * v22);
          if (v24)
          {
LABEL_18:
            int64_t v8 = __clz(__rbit64(v24)) + (v22 << 6);
          }
          else
          {
            while (v23 - 2 != v9)
            {
              unint64_t v24 = *(void *)(v25 + 8 * v9++);
              if (v24)
              {
                unint64_t v22 = v9 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v6 = v30 + 1;
      uint64_t v5 = v8;
      if (v30 + 1 == v26) {
        return v31;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(void (*a1)(long long *__return_ptr, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v7 = *(void *)(v2 + 16);
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(unsigned char *)(v2 + 24) == 1)
    {
      uint64_t v8 = swift_bridgeObjectRetain();
      unint64_t v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_SDyS2i4next_Sf5logittGs5NeverOTg5058_sS2iSDyS2i4next_Sf5logittGIgyyo_Si6offset_Si7elementtACs5h112OIegnrzr_TR089_s24TokenGenerationInference32WeightedFiniteStateLanguageModelV6tokens9vocabSizeACSaySiG_R39Sgtcfckl1_M22GSi_SitXEfU_Tf3nnnpf_nTf1cn_n(v8);
      outlined consume of LanguageModelReference(v6, v5, v7, 1);
      swift_getKeyPath();
      *(void *)&v39[0] = MEMORY[0x263F8EE78];
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = 0;
        do
        {
          ++v11;
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_bridgeObjectRelease();
          specialized Array.append<A>(contentsOf:)(*(int64_t *)&v37[0]);
        }
        while (v10 != v11);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v12 = *(void *)&v39[0];
      }
      else
      {
        swift_release();
        uint64_t v12 = MEMORY[0x263F8EE78];
      }
      int64_t v15 = specialized Sequence<>.max()(v12);
      char v17 = v16;
      swift_bridgeObjectRelease();
      if (v17) {
        int64_t v18 = 0;
      }
      else {
        int64_t v18 = v15;
      }
      a2[3] = (uint64_t)&type metadata for WeightedFiniteStateLanguageModel;
      a2[4] = (uint64_t)&protocol witness table for WeightedFiniteStateLanguageModel;
      *a2 = 0;
      a2[1] = v18;
      a2[2] = v9;
    }
    else if (a1)
    {
      swift_bridgeObjectRetain();
      a1(v37, v6, v5);
      outlined consume of LanguageModelReference(v6, v5, v7, 2);
      if (!v3)
      {
        outlined init with take of LogitCollection(v37, (uint64_t)v39);
        outlined init with take of LogitCollection(v39, (uint64_t)a2);
      }
    }
    else
    {
      uint64_t v38 = 0;
      memset(v37, 0, sizeof(v37));
      swift_bridgeObjectRetain();
      outlined destroy of DeterministicLanguageModelProtocol?((uint64_t)v37);
      lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError();
      swift_allocError();
      *uint64_t v36 = v6;
      v36[1] = v5;
      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v7) {
      unint64_t v13 = v7;
    }
    else {
      unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    swift_bridgeObjectRetain();
    unint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So29TGIE5AdapterConfigurationObjCCs5NeverOTg509_sS2SSo29defg28CCIgggo_SS3key_SS5valuetABs5H173OIegnrzr_TR0129_s24TokenGenerationInference22LanguageModelReferenceO04makedE008externalD5MakerAA013DeterministicdE8Protocol_pAaF_pSSKcSg_tKFSo29abcD13CCSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v13);
    swift_bridgeObjectRelease();
    specialized Set.init<A>(_:)(v19);
    swift_bridgeObjectRelease();
    if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
    }
    id v20 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    unint64_t v21 = (void *)MEMORY[0x2612053D0](v6, v5);
    swift_bridgeObjectRelease();
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
    lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
    Class v23 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v20, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, 0, v21, isa, v23);

    id v25 = objc_allocWithZone((Class)E5RunnerObjC);
    *(void *)&v39[0] = 0;
    id v26 = v24;
    id v27 = objc_msgSend(v25, sel_initWithModelConfiguration_error_, v26, v39);
    if (v27)
    {
      uint64_t v28 = v27;
      id v29 = *(id *)&v39[0];

      id v30 = v28;
      id v31 = objc_msgSend(v30, sel_maxContextLength);
      type metadata accessor for KVLRUCache();
      uint64_t v32 = (void *)swift_allocObject();
      v32[3] = 0;
      v32[4] = 0;
      v32[6] = v31;
      v32[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      v32[3] = 0;
      v32[4] = 0;
      v32[5] = 0;
      uint64_t v33 = type metadata accessor for E5TransformerLanguageModel();
      swift_allocObject();
      uint64_t v34 = E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)v30, (uint64_t)v32, 1);
      a2[3] = v33;
      a2[4] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;

      *a2 = v34;
    }
    else
    {
      id v35 = *(id *)&v39[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.CodingKeys()
{
  uint64_t v1 = 0x7261656E696CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C616E7265747865;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 13669;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized LanguageModelReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.E5CodingKeys()
{
  if (*v0) {
    return 0x7372657470616461;
  }
  else {
    return 0x6150656C646E7562;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.E5CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized LanguageModelReference.E5CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.E5CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.E5CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.ExternalCodingKeys()
{
  return 1701667182;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.ExternalCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.ExternalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.ExternalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.LinearCodingKeys()
{
  return 0x736E656B6F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.LinearCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736E656B6F74 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.LinearCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.LinearCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t LanguageModelReference.encode(to:)(void *a1)
{
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.ExternalCodingKeys>);
  uint64_t v31 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34, v3);
  uint64_t v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.LinearCodingKeys>);
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32, v5);
  char v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.E5CodingKeys>);
  uint64_t v29 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33, v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.CodingKeys>);
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v16 = v1[2];
  uint64_t v35 = v1[1];
  uint64_t v36 = v15;
  int v17 = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17)
  {
    if (v17 == 1)
    {
      LOBYTE(v41) = 1;
      lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();
      uint64_t v18 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v41 = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
      uint64_t v19 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v18);
    }
    LOBYTE(v41) = 2;
    lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();
    id v25 = v28;
    uint64_t v22 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v26 = v34;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v26);
  }
  else
  {
    uint64_t v21 = v29;
    LOBYTE(v41) = 0;
    lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
    uint64_t v22 = v39;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v41) = 0;
    uint64_t v23 = v33;
    uint64_t v24 = v37;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v24)
    {
      uint64_t v41 = v16;
      char v40 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v22);
}

uint64_t LanguageModelReference.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.ExternalCodingKeys>);
  uint64_t v48 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53, v3);
  uint64_t v52 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.LinearCodingKeys>);
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.E5CodingKeys>);
  uint64_t v49 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  int v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  uint64_t v19 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    id v20 = v52;
    uint64_t v21 = v53;
    uint64_t v46 = 0;
    uint64_t v55 = v14;
    uint64_t v22 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v22 + 16) == 1)
    {
      uint64_t v45 = v22;
      int v23 = *(unsigned __int8 *)(v22 + 32);
      if (*(unsigned char *)(v22 + 32))
      {
        if (v23 == 1)
        {
          LOBYTE(v57) = 1;
          lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();
          uint64_t v24 = v8;
          uint64_t v25 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (!v25)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
            lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
            uint64_t v26 = v51;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v26);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v13);
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = v57;
LABEL_14:
            uint64_t v44 = v47;
            uint64_t *v47 = v39;
            v44[1] = v37;
            v44[2] = v38;
            *((unsigned char *)v44 + 24) = v23;
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
          }
        }
        else
        {
          LOBYTE(v57) = 2;
          lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();
          uint64_t v34 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (!v34)
          {
            uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
            uint64_t v37 = v42;
            uint64_t v43 = *(void (**)(char *, uint64_t))(v48 + 8);
            uint64_t v51 = v35;
            v43(v20, v21);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v13);
            uint64_t v39 = v51;
            uint64_t v38 = 0;
            goto LABEL_14;
          }
        }
      }
      else
      {
        LOBYTE(v57) = 0;
        lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
        uint64_t v30 = v12;
        uint64_t v31 = v46;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v31)
        {
          uint64_t v53 = (uint64_t)v17;
          LOBYTE(v57) = 0;
          uint64_t v32 = v9;
          uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v37 = v40;
          uint64_t v39 = v33;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
          char v56 = 1;
          lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((unint64_t *)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v41 = v55;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v32);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v53, v13);
          uint64_t v38 = v57;
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v27 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v29 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v29 = &type metadata for LanguageModelReference;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v27);
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
}

uint64_t protocol witness for Decodable.init(from:) in conformance LanguageModelReference@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return LanguageModelReference.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LanguageModelReference(void *a1)
{
  return LanguageModelReference.encode(to:)(a1);
}

BOOL static TokenGenerationConfiguration.Sampling.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  return v4 == 2 && *(void *)&v3 == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  uint64_t v1 = 0x537375656C63756ELL;
  if (*v0 != 1) {
    uint64_t v1 = 1265659764;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x78616D677261;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.Sampling.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  return 0x6C6F687365726874;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenGenerationConfiguration.Sampling.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.TopKCodingKeys>);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4, v5);
  uint64_t v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys>);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v7, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys>);
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.CodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15, v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *v2;
  int v20 = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v20)
  {
    char v34 = 1;
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v28;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  if (v20 == 1)
  {
    char v35 = 2;
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();
    uint64_t v21 = v29;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v31;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  char v33 = 0;
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t TokenGenerationConfiguration.Sampling.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.TopKCodingKeys>);
  uint64_t v43 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40, v3);
  uint64_t v46 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys>);
  uint64_t v45 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  uint64_t v20 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_9;
  }
  uint64_t v39 = v10;
  uint64_t v22 = v45;
  uint64_t v21 = v46;
  uint64_t v48 = v15;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v18;
    uint64_t v33 = v14;
    char v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v35 = &type metadata for TokenGenerationConfiguration.Sampling;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v35, *MEMORY[0x263F8DCB0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v33);
LABEL_9:
    uint64_t v27 = (uint64_t)v47;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  if (*(unsigned char *)(v23 + 32))
  {
    if (*(unsigned char *)(v23 + 32) == 1)
    {
      char v50 = 1;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v41;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v14);
      uint64_t v27 = (uint64_t)v47;
      uint64_t v28 = v44;
      char v29 = 0;
      uint64_t v30 = v26;
    }
    else
    {
      char v51 = 2;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v44;
      uint64_t v37 = v40;
      uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v14);
      uint64_t v27 = (uint64_t)v47;
      char v29 = 1;
    }
  }
  else
  {
    char v49 = 0;
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v14);
    uint64_t v30 = 0;
    char v29 = 2;
    uint64_t v27 = (uint64_t)v47;
    uint64_t v28 = v44;
  }
  *(void *)uint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v29;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration.Sampling@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenGenerationConfiguration.Sampling.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration.Sampling(void *a1)
{
  return TokenGenerationConfiguration.Sampling.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TokenGenerationConfiguration.Sampling(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0;
  }
  return v4 == 2 && *(void *)&v3 == 0;
}

unint64_t TokenGenerationConfiguration.DecoderType.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6369736162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  return 0x65676175676E616CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65676175676E616CLL && a2 == 0xED00006C65646F4DLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  return TokenGenerationConfiguration.DecoderType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.DecoderType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TokenGenerationConfiguration.DecoderType.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7466617264;
      break;
    case 2:
      uint64_t result = 2037279092;
      break;
    case 3:
      uint64_t result = 0x726F697661686562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  uint64_t v1 = 0x7466617264;
  if (*v0 != 1) {
    uint64_t v1 = 0x726F697661686562;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7466617264;
      break;
    case 2:
      uint64_t result = 0x726F697661686562;
      break;
    case 3:
      uint64_t result = 0x656B6F54706F7473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenGenerationConfiguration.DecoderType.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)&long long v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys>);
  uint64_t v81 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86, v4);
  uint64_t v85 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys>);
  uint64_t v80 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84, v6);
  uint64_t v83 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys>);
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82, v8);
  uint64_t v10 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.BasicCodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.CodingKeys>);
  uint64_t v87 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90, v16);
  uint64_t v18 = &v70[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with take of TokenGenerationConfiguration.DecoderType(v2, (uint64_t)v99);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  uint64_t v89 = v18;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v99, (uint64_t)v100);
  switch(_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v100))
  {
    case 1u:
      uint64_t v25 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v100);
      long long v86 = *(_OWORD *)v25;
      uint64_t v26 = *(unsigned char **)(v25 + 16);
      char v27 = *(unsigned char *)(v25 + 24);
      uint64_t v85 = *(unsigned char **)(v25 + 32);
      uint64_t v28 = *(void *)(v25 + 40);
      uint64_t v83 = *(unsigned char **)(v25 + 48);
      *(void *)&long long v84 = v28;
      LODWORD(v81) = *(unsigned __int8 *)(v25 + 56);
      uint64_t v80 = *(void *)(v25 + 64);
      LODWORD(v78) = *(unsigned __int8 *)(v25 + 72);
      unint64_t v77 = *(unsigned char **)(v25 + 80);
      LODWORD(v76) = *(_DWORD *)(v25 + 88);
      int v101 = *(unsigned __int8 *)(v25 + 92);
      LODWORD(v28) = *(unsigned __int8 *)(v25 + 93);
      int v74 = *(unsigned __int8 *)(v25 + 94);
      int v75 = v28;
      int v73 = *(_DWORD *)(v25 + 96);
      int v29 = *(unsigned __int8 *)(v25 + 100);
      LOBYTE(v91) = 1;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();
      uint64_t v31 = v89;
      uint64_t v30 = v90;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v91 = v86;
      int64_t v92 = v26;
      LOBYTE(v93) = v27;
      char v102 = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v32 = v82;
      uint64_t v33 = v88;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v33)
      {
        (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v10, v32);
        uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v31, v30);
      }
      else
      {
        LODWORD(v88) = v29;
        unint64_t v63 = v77;
        char v64 = v78;
        uint64_t v65 = v80;
        *(void *)&long long v91 = v85;
        *((void *)&v91 + 1) = v84;
        int64_t v92 = v83;
        LOBYTE(v93) = v81;
        char v102 = 1;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        *(void *)&long long v91 = v65;
        BYTE8(v91) = v64;
        int64_t v92 = v63;
        int v93 = (int)v76;
        char v94 = v101;
        char v95 = v75;
        char v96 = v74;
        int v97 = v73;
        char v98 = v88;
        char v102 = 2;
        lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v10, v32);
        uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v89, v90);
      }
      break;
    case 2u:
      uint64_t v34 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v100);
      long long v86 = *(_OWORD *)v34;
      char v35 = *(unsigned char **)(v34 + 16);
      char v36 = *(unsigned char *)(v34 + 24);
      uint64_t v85 = *(unsigned char **)(v34 + 32);
      uint64_t v37 = *(void *)(v34 + 40);
      uint64_t v81 = *(void *)(v34 + 48);
      uint64_t v82 = v37;
      LODWORD(v79) = *(unsigned __int8 *)(v34 + 56);
      uint64_t v78 = *(void *)(v34 + 64);
      LODWORD(v77) = *(unsigned __int8 *)(v34 + 72);
      uint64_t v76 = *(unsigned char **)(v34 + 80);
      int v101 = *(_DWORD *)(v34 + 88);
      LODWORD(v37) = *(unsigned __int8 *)(v34 + 92);
      int v74 = *(unsigned __int8 *)(v34 + 93);
      int v75 = v37;
      LODWORD(v37) = *(unsigned __int8 *)(v34 + 94);
      int v72 = *(_DWORD *)(v34 + 96);
      int v73 = v37;
      int v71 = *(unsigned __int8 *)(v34 + 100);
      LOBYTE(v91) = 2;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();
      uint64_t v38 = v83;
      uint64_t v39 = v89;
      uint64_t v40 = v90;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v91 = v86;
      int64_t v92 = v35;
      LOBYTE(v93) = v36;
      char v102 = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v41 = v84;
      uint64_t v42 = v88;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v42)
      {
        (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v38, v41);
        uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v39, v40);
      }
      else
      {
        char v66 = (char)v77;
        uint64_t v67 = v78;
        *(void *)&long long v91 = v85;
        *((void *)&v91 + 1) = v82;
        int64_t v92 = (unsigned char *)v81;
        LOBYTE(v93) = v79;
        char v102 = 1;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        *(void *)&long long v91 = v67;
        BYTE8(v91) = v66;
        int64_t v92 = v76;
        int v93 = v101;
        char v94 = v75;
        char v95 = v74;
        char v96 = v73;
        int v97 = v72;
        char v98 = v71;
        char v102 = 2;
        lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        LOBYTE(v91) = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        uint64_t v69 = v89;
        uint64_t v68 = v90;
        (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v38, v41);
        uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v69, v68);
      }
      break;
    case 3u:
      uint64_t v43 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v100);
      long long v84 = *(_OWORD *)v43;
      uint64_t v44 = *(unsigned char **)(v43 + 16);
      char v45 = *(unsigned char *)(v43 + 24);
      LOBYTE(v91) = 3;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();
      uint64_t v46 = v85;
      uint64_t v48 = v89;
      uint64_t v47 = v90;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v91 = v84;
      int64_t v92 = v44;
      LOBYTE(v93) = v45;
      char v102 = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v49 = v86;
      uint64_t v50 = v88;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v50)
      {
        char v51 = *(unsigned char **)(v43 + 48);
        char v52 = *(unsigned char *)(v43 + 56);
        long long v91 = *(_OWORD *)(v43 + 32);
        int64_t v92 = v51;
        LOBYTE(v93) = v52;
        char v102 = 1;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v53 = *(unsigned char **)(v43 + 80);
        char v54 = *(unsigned char *)(v43 + 88);
        long long v91 = *(_OWORD *)(v43 + 64);
        int64_t v92 = v53;
        LOBYTE(v93) = v54;
        char v102 = 2;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        char v55 = *(unsigned char *)(v43 + 104);
        char v56 = *(unsigned char **)(v43 + 112);
        int v57 = *(_DWORD *)(v43 + 120);
        char v58 = *(unsigned char *)(v43 + 124);
        char v59 = *(unsigned char *)(v43 + 125);
        char v60 = *(unsigned char *)(v43 + 126);
        int v61 = *(_DWORD *)(v43 + 128);
        char v62 = *(unsigned char *)(v43 + 132);
        *(void *)&long long v91 = *(void *)(v43 + 96);
        BYTE8(v91) = v55;
        int64_t v92 = v56;
        int v93 = v57;
        char v94 = v58;
        char v95 = v59;
        char v96 = v60;
        int v97 = v61;
        char v98 = v62;
        char v102 = 3;
        lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(unsigned char *, uint64_t))(v81 + 8))(v46, v49);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v48, v47);
      break;
    default:
      uint64_t v19 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v100);
      long long v86 = *(_OWORD *)v19;
      uint64_t v20 = *(unsigned char **)(v19 + 16);
      char v21 = *(unsigned char *)(v19 + 24);
      LOBYTE(v91) = 0;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();
      uint64_t v22 = v89;
      uint64_t v23 = v90;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v91 = v86;
      int64_t v92 = v20;
      LOBYTE(v93) = v21;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v11);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v22, v23);
      break;
  }
  return result;
}

uint64_t TokenGenerationConfiguration.DecoderType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys>);
  uint64_t v76 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82, v3);
  long long v84 = &v62[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys>);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  MEMORY[0x270FA5388](v5, v6);
  uint64_t v83 = &v62[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys>);
  uint64_t v78 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81, v8);
  uint64_t v10 = &v62[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.BasicCodingKeys>);
  unint64_t v77 = *(unsigned char **)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12);
  uint64_t v14 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.CodingKeys>);
  uint64_t v85 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15, v16);
  uint64_t v18 = &v62[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = a1[3];
  long long v86 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  uint64_t v20 = v87;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_9;
  }
  uint64_t v87 = v11;
  char v21 = v10;
  uint64_t v23 = v83;
  uint64_t v22 = v84;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v15;
    int v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v29 = &type metadata for TokenGenerationConfiguration.DecoderType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v18, v27);
LABEL_9:
    uint64_t v32 = (uint64_t)v86;
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  switch(*(unsigned char *)(v24 + 32))
  {
    case 1:
      LOBYTE(v88) = 1;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v88) = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v30 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      unint64_t v77 = v18;
      char v36 = v127;
      uint64_t v87 = v128;
      uint64_t v37 = v129;
      LODWORD(v84) = v130;
      LOBYTE(v88) = 1;
      uint64_t v38 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v39 = v78;
      uint64_t v83 = v36;
      LOBYTE(v36) = (_BYTE)v84;
      uint64_t v76 = v123;
      uint64_t v79 = v124;
      uint64_t v80 = v125;
      LODWORD(v82) = v126;
      LOBYTE(v119) = 2;
      lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v38, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v77, v15);
      *(void *)&long long v88 = v83;
      *((void *)&v88 + 1) = v87;
      uint64_t v89 = (uint64_t)v37;
      char v90 = (char)v36;
      uint64_t v91 = v76;
      uint64_t v92 = v79;
      uint64_t v93 = v80;
      char v94 = v82;
      uint64_t v95 = v111;
      LOBYTE(v96) = BYTE8(v111);
      uint64_t v97 = v112;
      int v98 = v113;
      unsigned __int8 v99 = v114;
      unsigned __int8 v100 = v115;
      unsigned __int8 v101 = v116;
      LODWORD(v102) = v117;
      BYTE4(v102) = v118;
      _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi0_((uint64_t)&v88);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)&v88, (uint64_t)v131);
      uint64_t v35 = (uint64_t)v86;
      break;
    case 2:
      uint64_t v87 = v24;
      LOBYTE(v88) = 2;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v88) = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v31 = v80;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      unint64_t v77 = v18;
      uint64_t v81 = v15;
      uint64_t v41 = v127;
      uint64_t v40 = v128;
      uint64_t v42 = (uint64_t)v129;
      LODWORD(v84) = v130;
      LOBYTE(v88) = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v31;
      uint64_t v44 = v79;
      int v74 = v41;
      uint64_t v76 = v40;
      uint64_t v82 = v42;
      uint64_t v49 = v123;
      uint64_t v48 = v124;
      uint64_t v50 = v125;
      LODWORD(v78) = v126;
      LOBYTE(v88) = 2;
      lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v71 = v49;
      uint64_t v72 = v48;
      uint64_t v73 = v50;
      uint64_t v54 = v111;
      LODWORD(v70) = BYTE8(v111);
      uint64_t v69 = v112;
      LODWORD(v68) = v113;
      LODWORD(v67) = v114;
      int v65 = v116;
      LODWORD(v66) = v115;
      int v63 = v118;
      int v64 = v117;
      LOBYTE(v119) = 3;
      uint64_t v55 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v56 = v76;
      int v57 = v74;
      uint64_t v61 = v55;
      (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v23, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v77, v81);
      *(void *)&long long v88 = v57;
      *((void *)&v88 + 1) = v56;
      uint64_t v89 = v82;
      char v90 = (char)v84;
      uint64_t v91 = v71;
      uint64_t v92 = v72;
      uint64_t v93 = v73;
      char v94 = v78;
      uint64_t v95 = v54;
      LOBYTE(v96) = v70;
      uint64_t v97 = v69;
      int v98 = v68;
      unsigned __int8 v99 = v67;
      unsigned __int8 v100 = v66;
      unsigned __int8 v101 = v65;
      LODWORD(v102) = v64;
      BYTE4(v102) = v63;
      uint64_t v103 = v61;
      _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi1_((uint64_t)&v88);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)&v88, (uint64_t)v131);
      uint64_t v35 = (uint64_t)v86;
      break;
    case 3:
      uint64_t v87 = v24;
      LOBYTE(v88) = 3;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v88) = 0;
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v34 = v82;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      unint64_t v77 = v18;
      uint64_t v81 = v15;
      uint64_t v46 = v127;
      uint64_t v45 = v128;
      uint64_t v83 = v129;
      int v47 = v130;
      LOBYTE(v88) = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      char v51 = v83;
      int v74 = v46;
      uint64_t v78 = v45;
      LODWORD(v79) = v47;
      uint64_t v52 = v123;
      uint64_t v80 = v124;
      uint64_t v53 = v125;
      LODWORD(v45) = v126;
      LOBYTE(v88) = 2;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v70 = v52;
      uint64_t v71 = v53;
      LODWORD(v72) = v45;
      uint64_t v66 = v119;
      uint64_t v67 = v120;
      uint64_t v68 = v121;
      LODWORD(v69) = v122;
      v131[159] = 3;
      lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v73 = 0;
      char v58 = v79;
      uint64_t v59 = v78;
      char v60 = v74;
      (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v22, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v77, v81);
      v131[156] = v114;
      v131[152] = v118;
      *(void *)&long long v88 = v60;
      *((void *)&v88 + 1) = v59;
      uint64_t v89 = (uint64_t)v51;
      char v90 = v58;
      uint64_t v91 = v70;
      uint64_t v92 = v80;
      uint64_t v93 = v71;
      char v94 = v72;
      uint64_t v95 = v66;
      uint64_t v96 = v67;
      uint64_t v97 = v68;
      LOBYTE(v98) = v69;
      uint64_t v102 = v111;
      LOBYTE(v103) = BYTE8(v111);
      uint64_t v104 = v112;
      int v105 = v113;
      unsigned __int8 v106 = v114;
      unsigned __int8 v107 = v115;
      unsigned __int8 v108 = v116;
      int v109 = v117;
      unsigned __int8 v110 = v118;
      _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi2_((uint64_t)&v88);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)&v88, (uint64_t)v131);
      uint64_t v35 = (uint64_t)v86;
      break;
    default:
      LOBYTE(v88) = 0;
      lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
      uint64_t v25 = v87;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*((void (**)(unsigned char *, uint64_t))v77 + 1))(v14, v25);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v18, v15);
      long long v88 = v111;
      uint64_t v89 = v112;
      char v90 = v113;
      _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi_((uint64_t)&v88);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)&v88, (uint64_t)v131);
      uint64_t v35 = (uint64_t)v86;
      break;
  }
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v131, v75);
  uint64_t v32 = v35;
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration.DecoderType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenGenerationConfiguration.DecoderType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration.DecoderType(void *a1)
{
  return TokenGenerationConfiguration.DecoderType.encode(to:)(a1);
}

double TokenGenerationConfiguration.init(decoder:tokenizerPath:sampling:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of TokenGenerationConfiguration.DecoderType(a1, (uint64_t)v16);
  uint64_t v9 = *a4;
  LOBYTE(a4) = *((unsigned char *)a4 + 8);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v16, (uint64_t)v17);
  *((void *)&v18 + 1) = v9;
  LOBYTE(v19) = (_BYTE)a4;
  *((void *)&v19 + 1) = a2;
  *(void *)(a5 + 160) = a3;
  long long v10 = v17[5];
  *(_OWORD *)(a5 + 64) = v17[4];
  *(_OWORD *)(a5 + 80) = v10;
  long long v11 = v17[7];
  *(_OWORD *)(a5 + 96) = v17[6];
  *(_OWORD *)(a5 + 112) = v11;
  long long v12 = v17[1];
  *(_OWORD *)a5 = v17[0];
  *(_OWORD *)(a5 + 16) = v12;
  long long v13 = v17[3];
  *(_OWORD *)(a5 + 32) = v17[2];
  *(_OWORD *)(a5 + 48) = v13;
  double result = *(double *)&v18;
  long long v15 = v19;
  *(_OWORD *)(a5 + 128) = v18;
  *(_OWORD *)(a5 + 144) = v15;
  return result;
}

uint64_t TokenGenerationConfiguration.decoder.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of TokenGenerationConfiguration.DecoderType(v1, (uint64_t)v4);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v4, a1);
  return outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v4, (void (*)(void))outlined copy of LanguageModelReference);
}

void TokenGenerationConfiguration.sampling.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 144);
  *(void *)a1 = *(void *)(v1 + 136);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t TokenGenerationConfiguration.tokenizerPath.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.CodingKeys()
{
  uint64_t v1 = 0x676E696C706D6173;
  if (*v0 != 1) {
    uint64_t v1 = 0x657A696E656B6F74;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265646F636564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TokenGenerationConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TokenGenerationConfiguration.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of TokenGenerationConfiguration.DecoderType(v1, (uint64_t)v15);
  uint64_t v12 = *(void *)(v1 + 136);
  int v16 = *(unsigned __int8 *)(v1 + 144);
  uint64_t v9 = *(void *)(v1 + 152);
  v11[0] = *(void *)(v1 + 160);
  v11[1] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v15, (uint64_t)&v13);
  char v17 = 0;
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v12;
    char v14 = v16;
    char v17 = 1;
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t TokenGenerationConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.CodingKeys>);
  uint64_t v5 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v5;
  v30[135] = 0;
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType();
  uint64_t v10 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)&v31, (uint64_t)v30);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v30, (uint64_t)v32);
  LOBYTE(v23[0]) = 1;
  outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v30, (void (*)(void))outlined copy of LanguageModelReference);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = *(void *)&v27[0];
  *((void *)&v33 + 1) = *(void *)&v27[0];
  HIDWORD(v22) = BYTE8(v27[0]);
  LOBYTE(v34) = BYTE8(v27[0]);
  char v29 = 2;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v8;
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v10);
  *((void *)&v34 + 1) = v12;
  uint64_t v35 = v15;
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v30, (uint64_t)v23);
  *((void *)&v24 + 1) = v11;
  LOBYTE(v25) = BYTE4(v22);
  *((void *)&v25 + 1) = v12;
  uint64_t v26 = v15;
  outlined retain of TokenGenerationConfiguration((uint64_t)v23);
  outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v30, (void (*)(void))outlined consume of LanguageModelReference);
  long long v16 = v25;
  *(_OWORD *)(a2 + 128) = v24;
  *(_OWORD *)(a2 + 144) = v16;
  *(void *)(a2 + 160) = v26;
  long long v17 = v23[5];
  *(_OWORD *)(a2 + 64) = v23[4];
  *(_OWORD *)(a2 + 80) = v17;
  long long v18 = v23[7];
  *(_OWORD *)(a2 + 96) = v23[6];
  *(_OWORD *)(a2 + 112) = v18;
  long long v19 = v23[1];
  *(_OWORD *)a2 = v23[0];
  *(_OWORD *)(a2 + 16) = v19;
  long long v20 = v23[3];
  *(_OWORD *)(a2 + 32) = v23[2];
  *(_OWORD *)(a2 + 48) = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27[8] = v33;
  v27[9] = v34;
  uint64_t v28 = v35;
  v27[4] = v32[4];
  v27[5] = v32[5];
  v27[6] = v32[6];
  v27[7] = v32[7];
  v27[0] = v32[0];
  v27[1] = v32[1];
  long long v27[2] = v32[2];
  v27[3] = v32[3];
  return outlined release of TokenGenerationConfiguration((uint64_t)v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenGenerationConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration(void *a1)
{
  return TokenGenerationConfiguration.encode(to:)(a1);
}

uint64_t TokenGenerationConfiguration.makeDecoder(externalLanguageMaker:)@<X0>(void (*a1)(long long *__return_ptr, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  long long v6 = *(_OWORD *)(v2 + 144);
  v105[8] = *(_OWORD *)(v2 + 128);
  v105[9] = v6;
  uint64_t v106 = *(void *)(v2 + 160);
  long long v7 = *(_OWORD *)(v2 + 80);
  v105[4] = *(_OWORD *)(v2 + 64);
  v105[5] = v7;
  long long v8 = *(_OWORD *)(v2 + 112);
  v105[6] = *(_OWORD *)(v2 + 96);
  v105[7] = v8;
  long long v9 = *(_OWORD *)(v2 + 16);
  v105[0] = *(_OWORD *)v2;
  v105[1] = v9;
  long long v10 = *(_OWORD *)(v2 + 48);
  v105[2] = *(_OWORD *)(v2 + 32);
  v105[3] = v10;
  uint64_t result = TokenGenerationConfiguration.makeSampling()(v104);
  if (!v3)
  {
    outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v105, (uint64_t)v103);
    switch(_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v103))
    {
      case 1u:
        uint64_t v22 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v103);
        uint64_t v107 = *(void *)v22;
        uint64_t v68 = *(void *)(v22 + 8);
        uint64_t v71 = *(void *)(v22 + 16);
        char v65 = *(unsigned char *)(v22 + 24);
        uint64_t v23 = *(void *)(v22 + 48);
        char v24 = *(unsigned char *)(v22 + 56);
        uint64_t v62 = *(void *)(v22 + 64);
        char v59 = *(unsigned char *)(v22 + 72);
        uint64_t v56 = *(void *)(v22 + 80);
        int v25 = *(_DWORD *)(v22 + 88);
        char v26 = *(unsigned char *)(v22 + 92);
        char v27 = *(unsigned char *)(v22 + 93);
        char v28 = *(unsigned char *)(v22 + 94);
        int v29 = *(_DWORD *)(v22 + 96);
        char v30 = *(unsigned char *)(v22 + 100);
        long long v96 = *(_OWORD *)(v22 + 32);
        uint64_t v97 = v23;
        LOBYTE(v98) = v24;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, v100);
        uint64_t v92 = v107;
        uint64_t v93 = v68;
        uint64_t v94 = v71;
        char v95 = v65;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, (uint64_t *)&v96);
        uint64_t v74 = v62;
        LOBYTE(v75) = v59;
        uint64_t v76 = v56;
        int v77 = v25;
        char v78 = v26;
        char v79 = v27;
        char v80 = v28;
        int v81 = v29;
        char v82 = v30;
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v104, (uint64_t)&v92);
        uint64_t v15 = type metadata accessor for TwoStageSpeculativeDecoder();
        swift_allocObject();
        uint64_t v31 = 0;
        goto LABEL_6;
      case 2u:
        uint64_t v32 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v103);
        uint64_t v107 = *(void *)v32;
        uint64_t v69 = *(void *)(v32 + 8);
        uint64_t v72 = *(void *)(v32 + 16);
        char v66 = *(unsigned char *)(v32 + 24);
        uint64_t v33 = *(void *)(v32 + 48);
        char v34 = *(unsigned char *)(v32 + 56);
        uint64_t v63 = *(void *)(v32 + 64);
        char v60 = *(unsigned char *)(v32 + 72);
        uint64_t v57 = *(void *)(v32 + 80);
        int v54 = *(_DWORD *)(v32 + 88);
        char v35 = *(unsigned char *)(v32 + 92);
        char v36 = *(unsigned char *)(v32 + 93);
        char v37 = *(unsigned char *)(v32 + 94);
        int v38 = *(_DWORD *)(v32 + 96);
        char v39 = *(unsigned char *)(v32 + 100);
        uint64_t v40 = *(void *)(v32 + 104);
        long long v96 = *(_OWORD *)(v32 + 32);
        uint64_t v97 = v33;
        LOBYTE(v98) = v34;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, v100);
        uint64_t v92 = v107;
        uint64_t v93 = v69;
        uint64_t v94 = v72;
        char v95 = v66;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, (uint64_t *)&v96);
        uint64_t v74 = v63;
        LOBYTE(v75) = v60;
        uint64_t v76 = v57;
        int v77 = v54;
        char v78 = v35;
        char v79 = v36;
        char v80 = v37;
        int v81 = v38;
        char v82 = v39;
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v104, (uint64_t)&v92);
        uint64_t v15 = type metadata accessor for TwoStageSpeculativeDecoder();
        swift_allocObject();
        uint64_t v31 = v40;
LABEL_6:
        uint64_t v16 = TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(v100, &v96, &v74, &v92, v31);
        char v21 = &protocol witness table for TwoStageSpeculativeDecoder;
        break;
      case 3u:
        char v51 = a2;
        uint64_t v41 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v103);
        uint64_t v61 = *(void *)(v41 + 8);
        uint64_t v64 = *(void *)v41;
        uint64_t v58 = *(void *)(v41 + 16);
        char v55 = *(unsigned char *)(v41 + 24);
        uint64_t v73 = *(void *)(v41 + 32);
        uint64_t v107 = *(void *)(v41 + 40);
        uint64_t v70 = *(void *)(v41 + 48);
        char v67 = *(unsigned char *)(v41 + 56);
        uint64_t v42 = *(void *)(v41 + 80);
        char v43 = *(unsigned char *)(v41 + 88);
        uint64_t v53 = *(void *)(v41 + 96);
        char v52 = *(unsigned char *)(v41 + 104);
        uint64_t v44 = *(void *)(v41 + 112);
        int v45 = *(_DWORD *)(v41 + 120);
        char v46 = *(unsigned char *)(v41 + 124);
        char v47 = *(unsigned char *)(v41 + 125);
        char v48 = *(unsigned char *)(v41 + 126);
        int v49 = *(_DWORD *)(v41 + 128);
        char v50 = *(unsigned char *)(v41 + 132);
        long long v96 = *(_OWORD *)(v41 + 64);
        uint64_t v97 = v42;
        LOBYTE(v98) = v43;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, v100);
        uint64_t v92 = v73;
        uint64_t v93 = v107;
        uint64_t v94 = v70;
        char v95 = v67;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, (uint64_t *)&v96);
        uint64_t v74 = v64;
        uint64_t v75 = v61;
        uint64_t v76 = v58;
        LOBYTE(v77) = v55;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, &v92);
        uint64_t v83 = v53;
        char v84 = v52;
        uint64_t v85 = v44;
        int v86 = v45;
        char v87 = v46;
        char v88 = v47;
        char v89 = v48;
        int v90 = v49;
        char v91 = v50;
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v104, (uint64_t)&v74);
        uint64_t v15 = type metadata accessor for ThreeStageSpeculativeDecoder();
        swift_allocObject();
        uint64_t v16 = ThreeStageSpeculativeDecoder.init(tinyModel:draftModel:languageModel:behavior:sampler:)(v100, &v96, &v92, &v83, &v74);
        char v21 = &protocol witness table for ThreeStageSpeculativeDecoder;
        a2 = v51;
        break;
      default:
        uint64_t v12 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v103);
        uint64_t v13 = *(void *)(v12 + 16);
        char v14 = *(unsigned char *)(v12 + 24);
        long long v96 = *(_OWORD *)v12;
        uint64_t v97 = v13;
        LOBYTE(v98) = v14;
        LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(a1, v100);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v104, (uint64_t)&v96);
        uint64_t v15 = type metadata accessor for BasicDecoder();
        uint64_t v16 = swift_allocObject();
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v100, v16 + 16);
        uint64_t v17 = v101;
        uint64_t v18 = v102;
        __swift_project_boxed_opaque_existential_1(v100, v101);
        *(void *)(v16 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
        outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)&v96, v16 + 64);
        uint64_t v19 = v98;
        uint64_t v20 = v99;
        __swift_project_boxed_opaque_existential_1(&v96, v98);
        (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
        char v21 = &protocol witness table for BasicDecoder;
        break;
    }
    a2[3] = v15;
    a2[4] = (uint64_t)v21;
    *a2 = v16;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
  }
  return result;
}

uint64_t TokenGenerationConfiguration.makeSampling()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 136);
  if (!*(unsigned char *)(v1 + 144))
  {
    uint64_t v11 = &type metadata for SeedableRandomNumberGenerator;
    unint64_t v12 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
    *(void *)&long long v10 = 0;
    uint64_t v5 = type metadata accessor for NucleusSampling();
    swift_allocObject();
    uint64_t result = NucleusSampling.init(p:temperature:generator:)(&v10, *(double *)&v4, 1.0);
    if (v2) {
      return result;
    }
    long long v7 = &protocol witness table for NucleusSampling;
    goto LABEL_7;
  }
  if (*(unsigned char *)(v1 + 144) == 1)
  {
    uint64_t v11 = &type metadata for SeedableRandomNumberGenerator;
    unint64_t v12 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
    *(void *)&long long v10 = 0;
    uint64_t v5 = type metadata accessor for TopK();
    swift_allocObject();
    uint64_t result = (uint64_t)TopK.init(k:temperature:generator:)(v4, &v10, 1.0);
    if (v2) {
      return result;
    }
    long long v7 = &protocol witness table for TopK;
LABEL_7:
    a1[3] = v5;
    a1[4] = (uint64_t)v7;
    *a1 = result;
    return result;
  }
  uint64_t v11 = &type metadata for SeedableRandomNumberGenerator;
  unint64_t v12 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(void *)&long long v10 = 0;
  uint64_t v8 = type metadata accessor for GreedySampling();
  uint64_t v9 = swift_allocObject();
  uint64_t result = outlined init with take of LogitCollection(&v10, v9 + 16);
  a1[3] = v8;
  a1[4] = (uint64_t)&protocol witness table for GreedySampling;
  *a1 = v9;
  return result;
}

uint64_t GuidedGenerationConfiguration.tokenizerPath.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GuidedGenerationConfiguration.grammarString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GuidedGenerationConfiguration.stopTokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GuidedGenerationConfiguration.CodingKeys()
{
  uint64_t v1 = 0x5372616D6D617267;
  if (*v0 != 1) {
    uint64_t v1 = 0x656B6F54706F7473;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657A696E656B6F74;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GuidedGenerationConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized GuidedGenerationConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GuidedGenerationConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GuidedGenerationConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GuidedGenerationConfiguration.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GuidedGenerationConfiguration.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  long long v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[2];
  uint64_t v14 = v1[3];
  uint64_t v15 = v8;
  uint64_t v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = 0;
  uint64_t v9 = v16;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    uint64_t v10 = v13;
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v10;
    char v18 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t GuidedGenerationConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GuidedGenerationConfiguration.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v21 = v10;
  char v24 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v19 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  char v23 = 2;
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  uint64_t v20 = v15;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v16 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v20;
  *a2 = v21;
  a2[1] = v12;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GuidedGenerationConfiguration@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return GuidedGenerationConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GuidedGenerationConfiguration(void *a1)
{
  return GuidedGenerationConfiguration.encode(to:)(a1);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    char v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;

  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  char v28 = result + 64;
  int64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 64);
  int v29 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    uint64_t v7 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    char v30 = v3;
    unint64_t v8 = v7 | (v3 << 6);
LABEL_25:
    int64_t v13 = result;
    uint64_t v14 = (uint64_t *)(*(void *)(result + 48) + 16 * v8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(result + 56) + 24 * v8;
    uint64_t v19 = *(void *)v17;
    char v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(unsigned char *)(v17 + 16);
    swift_bridgeObjectRetain();
    outlined copy of MetadataSpecialToken(v19, v18, v20);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      goto LABEL_39;
    }
    char v24 = *(void *)(a2 + 56) + 24 * v21;
    char v25 = *(void *)v24;
    if (*(unsigned char *)(v24 + 16) == 1)
    {
      if ((v20 & 1) == 0) {
        return 0;
      }
      char v26 = v25 == v19 && *(void *)(v24 + 8) == v18;
      if (v26)
      {
        outlined consume of MetadataSpecialToken(v19, v18, 1);
        uint64_t result = v13;
        uint64_t v3 = v30;
      }
      else
      {
        int64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined consume of MetadataSpecialToken(v19, v18, 1);
        uint64_t result = v13;
        uint64_t v3 = v30;
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
    }
    else
    {
      if (v20)
      {
        uint64_t v20 = 1;
LABEL_39:
        outlined consume of MetadataSpecialToken(v19, v18, v20);
        return 0;
      }
      char v26 = v25 == v19;
      uint64_t result = v13;
      uint64_t v3 = v30;
      if (!v26) {
        return 0;
      }
    }
  }
  unint64_t v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v9 >= v29) {
    return 1;
  }
  unint64_t v10 = *(void *)(v28 + 8 * v9);
  int64_t v11 = v3 + 1;
  if (v10) {
    goto LABEL_24;
  }
  int64_t v11 = v3 + 2;
  if (v3 + 2 >= v29) {
    return 1;
  }
  unint64_t v10 = *(void *)(v28 + 8 * v11);
  if (v10) {
    goto LABEL_24;
  }
  int64_t v11 = v3 + 3;
  if (v3 + 3 >= v29) {
    return 1;
  }
  unint64_t v10 = *(void *)(v28 + 8 * v11);
  if (v10) {
    goto LABEL_24;
  }
  int64_t v11 = v3 + 4;
  if (v3 + 4 >= v29) {
    return 1;
  }
  unint64_t v10 = *(void *)(v28 + 8 * v11);
  if (v10)
  {
LABEL_24:
    uint64_t v6 = (v10 - 1) & v10;
    char v30 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    goto LABEL_25;
  }
  unint64_t v12 = v3 + 5;
  if (v3 + 5 >= v29) {
    return 1;
  }
  unint64_t v10 = *(void *)(v28 + 8 * v12);
  if (v10)
  {
    int64_t v11 = v3 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v29) {
      return 1;
    }
    unint64_t v10 = *(void *)(v28 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  if (result == a2) {
    return 1;
  }
  uint64_t v2 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  int64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(result + 64);
  unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      uint64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        return 1;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        uint64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          return 1;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          uint64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            return 1;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_24:
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v20 = swift_bridgeObjectRetain();
    unint64_t v21 = specialized static Dictionary<>.== infix(_:_:)(v20, v17);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      return 0;
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8) {
    return 1;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    uint64_t v3 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

BOOL specialized static GuidedGenerationConfiguration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = (void *)a1[4];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = (void *)a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v9 = v2 == v5 && v4 == v6;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v3, v7);
}

uint64_t specialized static LanguageModelReference.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  int v5 = *((unsigned __int8 *)a1 + 24);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  int v9 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a1 + 24))
  {
    if (v5 == 1)
    {
      if (v9 == 1)
      {
        char v10 = specialized static Array<A>.== infix(_:_:)((void *)*a1, (void *)*a2);
        outlined copy of LanguageModelReference(v7, v6, v8, 1);
        outlined copy of LanguageModelReference(v3, v2, v4, 1);
        outlined consume of LanguageModelReference(v3, v2, v4, 1);
        uint64_t v11 = v7;
        uint64_t v12 = v6;
        uint64_t v13 = v8;
        char v14 = 1;
LABEL_26:
        outlined consume of LanguageModelReference(v11, v12, v13, v14);
        return v10 & 1;
      }
    }
    else if (v9 == 2)
    {
      if (v3 == v7 && v2 == v6) {
        char v10 = 1;
      }
      else {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of LanguageModelReference(v7, v6, v8, 2);
      outlined copy of LanguageModelReference(v3, v2, v4, 2);
      outlined consume of LanguageModelReference(v3, v2, v4, 2);
      uint64_t v11 = v7;
      uint64_t v12 = v6;
      uint64_t v13 = v8;
      char v14 = 2;
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if (*((unsigned char *)a2 + 24))
  {
LABEL_21:
    outlined copy of LanguageModelReference(*a2, a2[1], v8, v9);
    outlined copy of LanguageModelReference(v3, v2, v4, v5);
    outlined consume of LanguageModelReference(v3, v2, v4, v5);
    uint64_t v19 = v7;
    uint64_t v20 = v6;
    uint64_t v21 = v8;
    char v22 = v9;
LABEL_22:
    outlined consume of LanguageModelReference(v19, v20, v21, v22);
    goto LABEL_23;
  }
  BOOL v15 = v3 == v7 && v2 == v6;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    outlined copy of LanguageModelReference(v7, v6, v8, 0);
    outlined copy of LanguageModelReference(v3, v2, v4, 0);
    outlined consume of LanguageModelReference(v3, v2, v4, 0);
    uint64_t v19 = v7;
    uint64_t v20 = v6;
    uint64_t v21 = v8;
    char v22 = 0;
    goto LABEL_22;
  }
  if (!v4)
  {
    outlined copy of LanguageModelReference(v7, v6, v8, 0);
    outlined copy of LanguageModelReference(v3, v2, 0, 0);
    swift_bridgeObjectRetain();
    outlined consume of LanguageModelReference(v3, v2, 0, 0);
    outlined consume of LanguageModelReference(v7, v6, v8, 0);
    if (v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  if (!v8)
  {
    outlined copy of LanguageModelReference(v7, v6, 0, 0);
    outlined copy of LanguageModelReference(v3, v2, v4, 0);
    outlined consume of LanguageModelReference(v3, v2, v4, 0);
    uint64_t v19 = v7;
    uint64_t v20 = v6;
    uint64_t v21 = 0;
    char v22 = 0;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  outlined copy of LanguageModelReference(v7, v6, v8, 0);
  outlined copy of LanguageModelReference(v3, v2, v4, 0);
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  char v17 = specialized static Dictionary<>.== infix(_:_:)(v16, v8);
  outlined consume of LanguageModelReference(v3, v2, v4, 0);
  outlined consume of LanguageModelReference(v7, v6, v8, 0);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_30:
    char v10 = 1;
    return v10 & 1;
  }
LABEL_23:
  char v10 = 0;
  return v10 & 1;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

uint64_t specialized static TokenGenerationConfiguration.DecoderType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of TokenGenerationConfiguration.DecoderType(a1, (uint64_t)v146);
  outlined init with take of TokenGenerationConfiguration.DecoderType(a2, (uint64_t)v147);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (uint64_t)v148);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (uint64_t)&v149);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (uint64_t)v150);
  switch(_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v150))
  {
    case 1u:
      uint64_t v61 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v150);
      uint64_t v126 = *(void *)(v61 + 8);
      uint64_t v128 = *(void *)v61;
      uint64_t v124 = *(void *)(v61 + 16);
      char v122 = *(unsigned char *)(v61 + 24);
      uint64_t v118 = *(void *)(v61 + 40);
      uint64_t v120 = *(void *)(v61 + 32);
      uint64_t v116 = *(void *)(v61 + 48);
      char v62 = *(unsigned char *)(v61 + 56);
      uint64_t v63 = *(void *)(v61 + 64);
      char v64 = *(unsigned char *)(v61 + 72);
      uint64_t v65 = *(void *)(v61 + 80);
      int v66 = *(_DWORD *)(v61 + 88);
      char v67 = *(unsigned char *)(v61 + 92);
      char v68 = *(unsigned char *)(v61 + 93);
      char v69 = *(unsigned char *)(v61 + 94);
      int v70 = *(_DWORD *)(v61 + 96);
      char v71 = *(unsigned char *)(v61 + 100);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (uint64_t)v145);
      if (_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v145) != 1) {
        goto LABEL_19;
      }
      char v114 = v62;
      char v88 = v71;
      int v90 = v70;
      char v92 = v69;
      char v94 = v68;
      char v96 = v67;
      int v98 = v66;
      uint64_t v100 = v65;
      char v102 = v64;
      uint64_t v104 = v63;
      uint64_t v72 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v145);
      uint64_t v73 = *(void *)(v72 + 16);
      char v74 = *(unsigned char *)(v72 + 24);
      uint64_t v110 = *(void *)(v72 + 40);
      uint64_t v112 = *(void *)(v72 + 32);
      uint64_t v108 = *(void *)(v72 + 48);
      char v106 = *(unsigned char *)(v72 + 56);
      uint64_t v75 = *(void *)(v72 + 64);
      char v76 = *(unsigned char *)(v72 + 72);
      uint64_t v77 = *(void *)(v72 + 80);
      int v78 = *(_DWORD *)(v72 + 88);
      char v79 = *(unsigned char *)(v72 + 92);
      char v80 = *(unsigned char *)(v72 + 93);
      char v81 = *(unsigned char *)(v72 + 94);
      int v82 = *(_DWORD *)(v72 + 96);
      char v83 = *(unsigned char *)(v72 + 100);
      *(void *)&long long v137 = v128;
      *((void *)&v137 + 1) = v126;
      uint64_t v138 = v124;
      LOBYTE(v139) = v122;
      long long v129 = *(_OWORD *)v72;
      uint64_t v130 = v73;
      LOBYTE(v131) = v74;
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
      if ((specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129) & 1) == 0) {
        goto LABEL_20;
      }
      *(void *)&long long v137 = v120;
      *((void *)&v137 + 1) = v118;
      uint64_t v138 = v116;
      LOBYTE(v139) = v114;
      *(void *)&long long v129 = v112;
      *((void *)&v129 + 1) = v110;
      uint64_t v130 = v108;
      LOBYTE(v131) = v106;
      char v84 = specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129);
      outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)v148);
      if ((v84 & 1) == 0) {
        goto LABEL_21;
      }
      *(void *)&long long v137 = v104;
      BYTE8(v137) = v102;
      uint64_t v138 = v100;
      int v139 = v98;
      char v140 = v96;
      char v141 = v94;
      char v142 = v92;
      int v143 = v90;
      char v144 = v88;
      *(void *)&long long v129 = v75;
      BYTE8(v129) = v76;
      uint64_t v130 = v77;
      int v131 = v78;
      char v132 = v79;
      char v133 = v80;
      char v134 = v81;
      int v135 = v82;
      char v136 = v83;
      goto LABEL_18;
    case 2u:
      uint64_t v12 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v150);
      uint64_t v13 = *(void *)v12;
      uint64_t v14 = *(void *)(v12 + 8);
      uint64_t v15 = *(void *)(v12 + 16);
      char v16 = *(unsigned char *)(v12 + 24);
      uint64_t v17 = *(void *)(v12 + 32);
      uint64_t v18 = *(void *)(v12 + 40);
      uint64_t v19 = *(void *)(v12 + 48);
      char v20 = *(unsigned char *)(v12 + 56);
      uint64_t v21 = *(void *)(v12 + 64);
      char v127 = *(unsigned char *)(v12 + 72);
      uint64_t v125 = *(void *)(v12 + 80);
      char v121 = *(unsigned char *)(v12 + 92);
      int v123 = *(_DWORD *)(v12 + 88);
      char v119 = *(unsigned char *)(v12 + 93);
      char v117 = *(unsigned char *)(v12 + 94);
      char v113 = *(unsigned char *)(v12 + 100);
      int v115 = *(_DWORD *)(v12 + 96);
      uint64_t v22 = *(void *)(v12 + 104);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (uint64_t)v145);
      if (_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v145) != 2) {
        goto LABEL_19;
      }
      uint64_t v107 = v21;
      uint64_t v87 = v22;
      uint64_t v23 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v145);
      uint64_t v24 = *(void *)(v23 + 16);
      char v25 = *(unsigned char *)(v23 + 24);
      uint64_t v26 = *(void *)(v23 + 32);
      uint64_t v27 = *(void *)(v23 + 40);
      uint64_t v111 = *(void *)(v23 + 48);
      char v109 = *(unsigned char *)(v23 + 56);
      uint64_t v105 = *(void *)(v23 + 64);
      char v103 = *(unsigned char *)(v23 + 72);
      uint64_t v101 = *(void *)(v23 + 80);
      char v97 = *(unsigned char *)(v23 + 92);
      int v99 = *(_DWORD *)(v23 + 88);
      char v93 = *(unsigned char *)(v23 + 94);
      char v95 = *(unsigned char *)(v23 + 93);
      char v89 = *(unsigned char *)(v23 + 100);
      int v91 = *(_DWORD *)(v23 + 96);
      uint64_t v86 = *(void *)(v23 + 104);
      *(void *)&long long v137 = v13;
      *((void *)&v137 + 1) = v14;
      uint64_t v138 = v15;
      LOBYTE(v139) = v16;
      long long v129 = *(_OWORD *)v23;
      uint64_t v130 = v24;
      LOBYTE(v131) = v25;
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
      if ((specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129) & 1) == 0) {
        goto LABEL_20;
      }
      *(void *)&long long v137 = v17;
      *((void *)&v137 + 1) = v18;
      uint64_t v138 = v19;
      LOBYTE(v139) = v20;
      *(void *)&long long v129 = v26;
      *((void *)&v129 + 1) = v27;
      uint64_t v130 = v111;
      LOBYTE(v131) = v109;
      char v28 = specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129);
      outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)v148);
      if ((v28 & 1) == 0) {
        goto LABEL_21;
      }
      *(void *)&long long v137 = v107;
      BYTE8(v137) = v127;
      uint64_t v138 = v125;
      int v139 = v123;
      char v140 = v121;
      char v141 = v119;
      char v142 = v117;
      int v143 = v115;
      char v144 = v113;
      *(void *)&long long v129 = v105;
      BYTE8(v129) = v103;
      uint64_t v130 = v101;
      int v131 = v99;
      char v132 = v97;
      char v133 = v95;
      char v134 = v93;
      int v135 = v91;
      char v136 = v89;
      if ((specialized static DraftingBehavior.== infix(_:_:)((uint64_t)&v137, (uint64_t)&v129) & 1) == 0) {
        goto LABEL_21;
      }
      char v11 = v87 == v86;
      break;
    case 3u:
      uint64_t v29 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v150);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (uint64_t)v145);
      if (_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v145) != 3) {
        goto LABEL_19;
      }
      uint64_t v30 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v145);
      uint64_t v31 = *(void *)(v29 + 16);
      char v32 = *(unsigned char *)(v29 + 24);
      uint64_t v33 = *(void *)(v30 + 16);
      char v34 = *(unsigned char *)(v30 + 24);
      long long v137 = *(_OWORD *)v29;
      uint64_t v138 = v31;
      LOBYTE(v139) = v32;
      long long v129 = *(_OWORD *)v30;
      uint64_t v130 = v33;
      LOBYTE(v131) = v34;
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
      outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
      if ((specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129) & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v35 = *(void *)(v29 + 48);
      char v36 = *(unsigned char *)(v29 + 56);
      uint64_t v37 = *(void *)(v30 + 48);
      char v38 = *(unsigned char *)(v30 + 56);
      long long v137 = *(_OWORD *)(v29 + 32);
      uint64_t v138 = v35;
      LOBYTE(v139) = v36;
      long long v129 = *(_OWORD *)(v30 + 32);
      uint64_t v130 = v37;
      LOBYTE(v131) = v38;
      if ((specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129) & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v39 = *(void *)(v29 + 80);
      char v40 = *(unsigned char *)(v29 + 88);
      uint64_t v41 = *(void *)(v30 + 80);
      char v42 = *(unsigned char *)(v30 + 88);
      long long v137 = *(_OWORD *)(v29 + 64);
      uint64_t v138 = v39;
      LOBYTE(v139) = v40;
      long long v129 = *(_OWORD *)(v30 + 64);
      uint64_t v130 = v41;
      LOBYTE(v131) = v42;
      char v43 = specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129);
      outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)v148);
      if ((v43 & 1) == 0) {
        goto LABEL_21;
      }
      char v44 = *(unsigned char *)(v29 + 104);
      uint64_t v45 = *(void *)(v29 + 112);
      int v46 = *(_DWORD *)(v29 + 120);
      char v47 = *(unsigned char *)(v29 + 124);
      char v48 = *(unsigned char *)(v29 + 125);
      char v49 = *(unsigned char *)(v29 + 126);
      int v50 = *(_DWORD *)(v29 + 128);
      char v51 = *(unsigned char *)(v29 + 132);
      uint64_t v52 = *(void *)(v30 + 96);
      char v53 = *(unsigned char *)(v30 + 104);
      uint64_t v54 = *(void *)(v30 + 112);
      int v55 = *(_DWORD *)(v30 + 120);
      char v56 = *(unsigned char *)(v30 + 124);
      char v57 = *(unsigned char *)(v30 + 125);
      char v58 = *(unsigned char *)(v30 + 126);
      int v59 = *(_DWORD *)(v30 + 128);
      char v60 = *(unsigned char *)(v30 + 132);
      *(void *)&long long v137 = *(void *)(v29 + 96);
      BYTE8(v137) = v44;
      uint64_t v138 = v45;
      int v139 = v46;
      char v140 = v47;
      char v141 = v48;
      char v142 = v49;
      int v143 = v50;
      char v144 = v51;
      *(void *)&long long v129 = v52;
      BYTE8(v129) = v53;
      uint64_t v130 = v54;
      int v131 = v55;
      char v132 = v56;
      char v133 = v57;
      char v134 = v58;
      int v135 = v59;
      char v136 = v60;
LABEL_18:
      char v11 = specialized static DraftingBehavior.== infix(_:_:)((uint64_t)&v137, (uint64_t)&v129);
      break;
    default:
      uint64_t v3 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v150);
      uint64_t v4 = *(void *)v3;
      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      char v7 = *(unsigned char *)(v3 + 24);
      outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (uint64_t)v145);
      if (_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v145))
      {
LABEL_19:
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
LABEL_20:
        outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)v148);
LABEL_21:
        char v11 = 0;
      }
      else
      {
        uint64_t v8 = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v145);
        uint64_t v9 = *(void *)(v8 + 16);
        char v10 = *(unsigned char *)(v8 + 24);
        *(void *)&long long v137 = v4;
        *((void *)&v137 + 1) = v5;
        uint64_t v138 = v6;
        LOBYTE(v139) = v7;
        long long v129 = *(_OWORD *)v8;
        uint64_t v130 = v9;
        LOBYTE(v131) = v10;
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined copy of LanguageModelReference);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined copy of LanguageModelReference);
        char v11 = specialized static LanguageModelReference.== infix(_:_:)((uint64_t *)&v137, (uint64_t *)&v129);
        outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)v148);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v147, (void (*)(void))outlined consume of LanguageModelReference);
        outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v146, (void (*)(void))outlined consume of LanguageModelReference);
      }
      break;
  }
  return v11 & 1;
}

uint64_t outlined init with take of TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  *(void *)(a2 + 125) = *(void *)(a1 + 125);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  return a2;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 132) >> 6;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior;
  if (!lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior;
  if (!lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 128);
  unint64_t v2 = v1 | ((unint64_t)*(unsigned __int8 *)(result + 132) << 32);
  *(_DWORD *)(result + 128) = v1;
  *(unsigned char *)(result + 132) = BYTE4(v2) & 0x3F;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi2_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  uint64_t v3 = *(void *)(result - 72) & 3;
  uint64_t v4 = *(void *)(result - 40) & 0x10101FFFFFFFFLL;
  uint64_t v5 = *(void *)(result - 8) & 0x10101FFFFFFFFLL;
  unint64_t v6 = ((unint64_t)(*(unsigned char *)(result + 4) & 1) << 32) | 0xC000000000;
  *(void *)(result - 104) &= 3uLL;
  *(void *)(result - 72) = v3;
  *(void *)(result - 40) = v4;
  *(void *)(result - 8) = v5;
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi1_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  uint64_t v3 = *(void *)(result - 72) & 3;
  uint64_t v4 = *(void *)(result - 40) & 0x10101FFFFFFFFLL;
  uint64_t v5 = *(void *)(result - 8) & 0x10101FFFFFFFFLL;
  unint64_t v6 = ((unint64_t)(*(unsigned char *)(result + 4) & 1) << 32) | 0x8000000000;
  *(void *)(result - 104) &= 3uLL;
  *(void *)(result - 72) = v3;
  *(void *)(result - 40) = v4;
  *(void *)(result - 8) = v5;
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi0_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  uint64_t v3 = *(void *)(result - 72) & 3;
  uint64_t v4 = *(void *)(result - 40) & 0x10101FFFFFFFFLL;
  uint64_t v5 = *(void *)(result - 8) & 0x10101FFFFFFFFLL;
  unint64_t v6 = ((unint64_t)(*(unsigned char *)(result + 4) & 1) << 32) | 0x4000000000;
  *(void *)(result - 104) &= 3uLL;
  *(void *)(result - 72) = v3;
  *(void *)(result - 40) = v4;
  *(void *)(result - 8) = v5;
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  char v3 = *(unsigned char *)(result + 4);
  uint64_t v4 = *(void *)(result - 72) & 3;
  uint64_t v5 = *(void *)(result - 40) & 0x10101FFFFFFFFLL;
  uint64_t v6 = *(void *)(result - 8) & 0x10101FFFFFFFFLL;
  *(void *)(result - 104) &= 3uLL;
  *(void *)(result - 72) = v4;
  *(void *)(result - 40) = v5;
  *(void *)(result - 8) = v6;
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = v3 & 1;
  return result;
}

uint64_t specialized static TokenGenerationConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of TokenGenerationConfiguration.DecoderType(a1, (uint64_t)v15);
  double v4 = *(double *)(a1 + 136);
  int v5 = *(unsigned __int8 *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  outlined init with take of TokenGenerationConfiguration.DecoderType(a2, (uint64_t)v16);
  double v8 = *(double *)(a2 + 136);
  int v9 = *(unsigned __int8 *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 152);
  uint64_t v10 = *(void *)(a2 + 160);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v15, (uint64_t)v14);
  outlined init with take of TokenGenerationConfiguration.DecoderType((uint64_t)v16, (uint64_t)v13);
  if ((specialized static TokenGenerationConfiguration.DecoderType.== infix(_:_:)((uint64_t)v14, (uint64_t)v13) & 1) == 0) {
    return 0;
  }
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t result = 0;
      if (v9 != 1 || *(void *)&v4 != *(void *)&v8) {
        return result;
      }
LABEL_12:
      if (v7)
      {
        if (v10 && (v6 == v11 && v7 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
      return 0;
    }
    uint64_t result = 0;
    if (v9 == 2 && v8 == 0.0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = 0;
    if (!v9 && v4 == v8) {
      goto LABEL_12;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling);
  }
  return result;
}

uint64_t outlined retain of TokenGenerationConfiguration.DecoderType(uint64_t a1, void (*a2)(void))
{
  return a1;
}

uint64_t outlined copy of TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, void (*a18)(void))
{
  uint64_t v19 = a18;
  switch((a17 >> 38) & 3)
  {
    case 1uLL:
    case 2uLL:
      uint64_t v24 = a18;
      a18();
      a1 = a5;
      a2 = a6;
      a3 = a7;
      a4 = a8;
      goto LABEL_4;
    case 3uLL:
      uint64_t v24 = a18;
      a18();
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a18)(a5, a6, a7, a8);
      a1 = a9;
      a2 = a10;
      a3 = a11;
      a4 = a12;
LABEL_4:
      uint64_t v19 = v24;
      break;
    default:
      break;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

uint64_t destroy for LanguageModelReference(uint64_t a1)
{
  return outlined consume of LanguageModelReference(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of LanguageModelReference(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of LanguageModelReference(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of LanguageModelReference(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of LanguageModelReference(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LanguageModelReference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LanguageModelReference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LanguageModelReference(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for LanguageModelReference(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LanguageModelReference()
{
  return &type metadata for LanguageModelReference;
}

uint64_t destroy for TokenGenerationConfiguration(uint64_t a1)
{
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32), (void (*)(void))outlined consume of LanguageModelReference);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 80);
  uint64_t v18 = *(void *)(a2 + 88);
  uint64_t v19 = *(void *)(a2 + 96);
  uint64_t v20 = *(void *)(a2 + 104);
  uint64_t v23 = *(unsigned __int8 *)(a2 + 132);
  uint64_t v24 = *(unsigned int *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 112);
  uint64_t v22 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v15, v16, v17, v18, v19, v20, v21, v22, v24 | (v23 << 32), (void (*)(void))outlined copy of LanguageModelReference);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 88) = v18;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v21;
  *(void *)(a1 + 120) = v22;
  *(unsigned char *)(a1 + 132) = v23;
  *(_DWORD *)(a1 + 128) = v24;
  uint64_t v12 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v28 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 72);
  uint64_t v30 = *(void *)(a2 + 80);
  uint64_t v31 = *(void *)(a2 + 88);
  uint64_t v32 = *(void *)(a2 + 96);
  uint64_t v33 = *(void *)(a2 + 104);
  uint64_t v36 = *(unsigned int *)(a2 + 128);
  uint64_t v37 = *(unsigned __int8 *)(a2 + 132);
  uint64_t v34 = *(void *)(a2 + 112);
  uint64_t v35 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v28, v29, v30, v31, v32, v33, v34, v35, v36 | (v37 << 32), (void (*)(void))outlined copy of LanguageModelReference);
  unint64_t v12 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v21 = *(_OWORD *)(a1 + 64);
  long long v22 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v28;
  *(void *)(a1 + 72) = v29;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v31;
  long long v23 = *(_OWORD *)(a1 + 96);
  *(void *)(a1 + 96) = v32;
  *(void *)(a1 + 104) = v33;
  *(_DWORD *)(a1 + 128) = v36;
  *(unsigned char *)(a1 + 132) = v37;
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v25 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v34;
  *(void *)(a1 + 120) = v35;
  outlined copy of TokenGenerationConfiguration.DecoderType(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v12, (void (*)(void))outlined consume of LanguageModelReference);
  uint64_t v26 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v26;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 132);
  int v5 = *(_DWORD *)(a2 + 128);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  unint64_t v19 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v20;
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v21;
  long long v22 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v22;
  long long v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v23;
  *(_DWORD *)(a1 + 128) = v5;
  *(unsigned char *)(a1 + 132) = v4;
  outlined copy of TokenGenerationConfiguration.DecoderType(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, v18, v19, (void (*)(void))outlined consume of LanguageModelReference);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v24 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for TokenGenerationConfiguration(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 4 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(void *)(a1 + 125) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationConfiguration()
{
  return &type metadata for TokenGenerationConfiguration;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)double result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.Sampling(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.Sampling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TokenGenerationConfiguration.Sampling(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for TokenGenerationConfiguration.Sampling(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)double result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationConfiguration.Sampling()
{
  return &type metadata for TokenGenerationConfiguration.Sampling;
}

uint64_t destroy for TokenGenerationConfiguration.DecoderType(uint64_t a1)
{
  return outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32), (void (*)(void))outlined consume of LanguageModelReference);
}

uint64_t initializeWithCopy for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v20 = *(unsigned __int8 *)(a2 + 132);
  uint64_t v21 = *(unsigned int *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a2, v4, v5, v6, v7, v8, v9, v11, v13, v14, v15, v16, v17, v18, v10, v19, v21 | (v20 << 32), (void (*)(void))outlined copy of LanguageModelReference);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v19;
  *(unsigned char *)(a1 + 132) = v20;
  *(_DWORD *)(a1 + 128) = v21;
  return a1;
}

uint64_t assignWithCopy for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v27 = *(void *)(a2 + 64);
  uint64_t v28 = *(void *)(a2 + 72);
  uint64_t v29 = *(void *)(a2 + 80);
  uint64_t v30 = *(void *)(a2 + 88);
  uint64_t v31 = *(void *)(a2 + 96);
  uint64_t v32 = *(void *)(a2 + 104);
  uint64_t v35 = *(unsigned __int8 *)(a2 + 132);
  uint64_t v11 = *(unsigned int *)(a2 + 128);
  uint64_t v33 = *(void *)(a2 + 112);
  uint64_t v34 = *(void *)(a2 + 120);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v27, v28, v29, v30, v31, v32, v33, v34, v11 | (v35 << 32), (void (*)(void))outlined copy of LanguageModelReference);
  unint64_t v12 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  long long v21 = *(_OWORD *)(a1 + 64);
  long long v22 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v27;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v30;
  long long v23 = *(_OWORD *)(a1 + 96);
  *(void *)(a1 + 96) = v31;
  *(void *)(a1 + 104) = v32;
  *(_DWORD *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 132) = v35;
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v25 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v33;
  *(void *)(a1 + 120) = v34;
  outlined copy of TokenGenerationConfiguration.DecoderType(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v12, (void (*)(void))outlined consume of LanguageModelReference);
  return a1;
}

__n128 __swift_memcpy133_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 132);
  int v4 = *(_DWORD *)(a2 + 128);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 120);
  unint64_t v18 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  long long v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  long long v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  long long v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  *(_DWORD *)(a1 + 128) = v4;
  *(unsigned char *)(a1 + 132) = v3;
  outlined copy of TokenGenerationConfiguration.DecoderType(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17, v18, (void (*)(void))outlined consume of LanguageModelReference);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 133)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 132) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 133) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 4 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(void *)(a1 + 125) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 133) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveProjectEnumData for TokenGenerationConfiguration.DecoderType(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  unint64_t v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)uint64_t result = v2;
  *(unsigned char *)(result + 4) = BYTE4(v3) & 0x3F;
  return result;
}

uint64_t destructiveInjectEnumTag for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 128);
  uint64_t result = a1 + 128;
  uint64_t v4 = *(void *)(result - 72) & 3;
  uint64_t v5 = *(void *)(result - 40) & 0x10101FFFFFFFFLL;
  uint64_t v6 = *(void *)(result - 8) & 0x10101FFFFFFFFLL;
  unint64_t v7 = (a2 << 38) | ((unint64_t)(*(unsigned char *)(result + 4) & 1) << 32);
  *(void *)(result - 104) &= 3uLL;
  *(void *)(result - 72) = v4;
  *(void *)(result - 40) = v5;
  *(void *)(result - 8) = v6;
  *(_DWORD *)uint64_t result = v3;
  *(unsigned char *)(result + 4) = BYTE4(v7);
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationConfiguration.DecoderType()
{
  return &type metadata for TokenGenerationConfiguration.DecoderType;
}

uint64_t destroy for GuidedGenerationConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GuidedGenerationConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GuidedGenerationConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GuidedGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GuidedGenerationConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuidedGenerationConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GuidedGenerationConfiguration()
{
  return &type metadata for GuidedGenerationConfiguration;
}

void *type metadata accessor for GuidedGenerationConfiguration.CodingKeys()
{
  return &unk_270BD4ED0;
}

void *type metadata accessor for TokenGenerationConfiguration.CodingKeys()
{
  return &unk_270BD4F60;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  return &unk_270BD4FF0;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  return &unk_270BD5080;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  return &unk_270BD5110;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  return &unk_270BD51A0;
}

unsigned char *storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB4A320);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  return &unk_270BD5230;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.CodingKeys()
{
  return &unk_270BD52C0;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  return &unk_270BD52E0;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  return &unk_270BD5370;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  return &unk_270BD5400;
}

unsigned char *storeEnumTagSinglePayload for GuidedGenerationConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB4A464);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LanguageModelReference.CodingKeys()
{
  return &unk_270BD5490;
}

unsigned char *storeEnumTagSinglePayload for LanguageModelReference.E5CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25FB4A568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LanguageModelReference.E5CodingKeys()
{
  return &unk_270BD5520;
}

void *type metadata accessor for LanguageModelReference.LinearCodingKeys()
{
  return &unk_270BD55B0;
}

unsigned char *storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.BasicCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25FB4A64CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for LanguageModelReference.ExternalCodingKeys()
{
  return &unk_270BD5640;
}

uint64_t specialized LanguageModelReference.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 13669 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261656E696CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616E7265747865 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized LanguageModelReference.E5CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7372657470616461 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.Sampling.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x78616D677261 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x537375656C63756ELL && a2 == 0xEF676E696C706D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1265659764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.DecoderType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6369736162 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000025FB6E0B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000025FB6E0D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000025FB6E100)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7466617264 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 2037279092 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7466617264 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7466617264 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656B6F54706F7473 && a2 == 0xEB0000000064496ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized TokenGenerationConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265646F636564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696C706D6173 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized GuidedGenerationConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5372616D6D617267 && a2 == 0xED0000676E697274 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656B6F54706F7473 && a2 == 0xEC0000007344496ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)(uint64_t a1)
{
  uint64_t v15 = *(void *)(a1 + 144);
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 216);
  long long v13 = *(_OWORD *)(a1 + 200);
  long long v11 = *(_OWORD *)(a1 + 232);
  unint64_t v7 = *(unsigned int *)(a1 + 264) | ((unint64_t)*(unsigned __int8 *)(a1 + 268) << 32);
  uint64_t v8 = *(void *)(a1 + 248);
  uint64_t v9 = *(void *)(a1 + 256);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32), (void (*)(void))outlined consume of LanguageModelReference);
  outlined copy of TokenGenerationConfiguration.DecoderType(v16, v15, v14, v2, v3, v4, v5, v6, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, v7, (void (*)(void))outlined consume of LanguageModelReference);
  return a1;
}

uint64_t sub_25FB4C3D8()
{
  return MEMORY[0x263F8D6D8];
}

uint64_t sub_25FB4C3E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.TokenGenerationConfigurationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.TokenGenerationConfigurationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for TokenGenerationConfiguration.TokenGenerationConfigurationError(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationConfiguration.TokenGenerationConfigurationError()
{
  return &type metadata for TokenGenerationConfiguration.TokenGenerationConfigurationError;
}

uint64_t TokenGenerationSession.__allocating_init(_:externalLanguageMaker:)(uint64_t a1, void (*a2)(long long *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4 = swift_allocObject();
  TokenGenerationSession.init(_:externalLanguageMaker:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenGenerationSession.addPrompt(_:)(Swift::String a1)
{
  unint64_t v3 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (v3[7])
  {
    swift_retain();
    uint64_t v6 = (void *)dispatch thunk of TokenizerRunner.tokenize(_:)();
    swift_release();
    if (v2) {
      return;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = *(void *)(specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, countAndFlagsBits, (unint64_t)object)+ 16);
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v10 = *(v8 - 3);
      unint64_t v9 = *(v8 - 2);
      if ((v9 ^ v10) >= 0x4000)
      {
        unint64_t v12 = *(v8 - 1);
        unint64_t v11 = *v8;
        if ((*v8 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v10, v9, v12, v11, 10);
          char v19 = v18;
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0) {
            goto LABEL_15;
          }
        }
        else
        {
          if ((v11 & 0x2000000000000000) != 0)
          {
            uint64_t v24 = (void *)*(v8 - 1);
            uint64_t v25 = v11 & 0xFFFFFFFFFFFFFFLL;
            long long v13 = &v24;
          }
          else if ((v12 & 0x1000000000000000) != 0)
          {
            long long v13 = (void *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            long long v13 = (void *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v14 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v13, v10, v9, v12, v11, 10);
          char v27 = v15 & 1;
          if ((v15 & 1) == 0)
          {
LABEL_15:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
            }
            unint64_t v17 = v6[2];
            unint64_t v16 = v6[3];
            if (v17 >= v16 >> 1) {
              uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v6);
            }
            v6[2] = v17 + 1;
            v6[v17 + 4] = v14;
          }
        }
      }
      v8 += 4;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
LABEL_24:
  long long v20 = v3 + 2;
  uint64_t v22 = v3[5];
  uint64_t v21 = v3[6];
  __swift_project_boxed_opaque_existential_1(v20, v22);
  uint64_t v24 = v6;
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v26 = MEMORY[0x263F8EE78];
  long long v23 = *(void (**)(void **, uint64_t, uint64_t))(v21 + 8);
  swift_bridgeObjectRetain();
  v23(&v24, v22, v21);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t TokenGenerationSession.generateTokenChunk()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](TokenGenerationSession.generateTokenChunk(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[5];
  unint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = TokenGenerationSession.generateTokenChunk();
  return v6(v2, v3);
}

uint64_t TokenGenerationSession.generateTokenChunk()(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenGenerationSession.detokenize(tokens:)(Swift::OpaquePointer tokens)
{
  if (*(void *)(v1 + 56))
  {
    swift_retain();
    uint64_t v4 = dispatch thunk of TokenizerRunner.detokenize(_:)();
    uint64_t v6 = v5;
    swift_release();
    if (v2) {
      uint64_t v8 = (void *)v7;
    }
    else {
      uint64_t v8 = v6;
    }
    if (v2) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v4;
    }
  }
  else
  {
    int64_t v10 = *((void *)tokens._rawValue + 2);
    if (v10)
    {
      uint64_t v22 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
      unint64_t v11 = (char *)tokens._rawValue + 32;
      do
      {
        v11 += 8;
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v14 = v13;
        unint64_t v16 = *(void *)(v22 + 16);
        unint64_t v15 = *(void *)(v22 + 24);
        if (v16 >= v15 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        }
        *(void *)(v22 + 16) = v16 + 1;
        uint64_t v17 = v22 + 16 * v16;
        *(void *)(v17 + 32) = v12;
        *(void *)(v17 + 40) = v14;
        --v10;
      }
      while (v10);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v8 = v18;
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v9;
  long long v20 = v8;
  result._object = v20;
  result._uint64_t countAndFlagsBits = v19;
  return result;
}

uint64_t TokenGenerationSession.init(_:externalLanguageMaker:)(uint64_t a1, void (*a2)(long long *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4 = v2;
  long long v6 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v6;
  long long v7 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v7;
  long long v8 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  void v14[2] = *(_OWORD *)(a1 + 32);
  _OWORD v14[3] = v10;
  uint64_t v15 = *(void *)(a1 + 160);
  TokenGenerationConfiguration.makeDecoder(externalLanguageMaker:)(a2, (uint64_t *)v13);
  if (v3)
  {
    _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe((uint64_t)a2);
    outlined release of TokenGenerationConfiguration((uint64_t)v14);
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of LogitCollection(v13, v2 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      outlined release of TokenGenerationConfiguration((uint64_t)v14);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      type metadata accessor for TokenizerRunner();
      swift_allocObject();
      uint64_t v12 = TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
      _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe((uint64_t)a2);
      *(void *)(v4 + 56) = v12;
    }
    else
    {
      _sxs5Error_pRi_zRi0_zlySay24TokenGenerationInference15LogitCollection_pGIsegHTrzo_SgWOe((uint64_t)a2);
      outlined release of TokenGenerationConfiguration((uint64_t)v14);
      *(void *)(v2 + 56) = 0;
    }
  }
  return v4;
}

Swift::Void __swiftcall TokenGenerationSession.addPrompt(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  v6[0] = tokens._rawValue;
  v6[1] = MEMORY[0x263F8EE78];
  v6[2] = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v5(v6, v3, v4);
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a1 < 0) {
    goto LABEL_38;
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = MEMORY[0x263F8EE78];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 15;
  uint64_t v9 = HIBYTE(a4) & 0xF;
  if (!a1 || ((a4 & 0x2000000000000000) != 0 ? (uint64_t v10 = HIBYTE(a4) & 0xF) : (uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL), !v10))
  {
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v25 = 7;
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v25 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v25 | (v9 << 16), v8, a2 & 1, v7);
    swift_bridgeObjectRelease();
    unint64_t v11 = *(void **)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  uint64_t v37 = a1;
  unint64_t v42 = 4 * v10;
  unint64_t v11 = (void *)MEMORY[0x263F8EE78];
  unint64_t v12 = 15;
  unint64_t v13 = 15;
  uint64_t v38 = v7;
  do
  {
    String.subscript.getter();
    char v14 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      unint64_t v12 = String.index(after:)();
      continue;
    }
    if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
    {
      unint64_t v12 = String.index(after:)();
      *(void *)(v8 + 16) = v12;
      unint64_t v13 = v12;
      continue;
    }
    if (v12 >> 14 < v13 >> 14) {
      goto LABEL_37;
    }
    uint64_t v15 = String.subscript.getter();
    uint64_t v39 = v16;
    uint64_t v17 = v11;
    uint64_t v40 = v18;
    uint64_t v20 = v19;
    uint64_t v21 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v23 = v17[2];
    unint64_t v22 = v17[3];
    if (v23 >= v22 >> 1) {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v17);
    }
    v17[2] = v23 + 1;
    uint64_t v24 = &v17[4 * v23];
    v24[4] = v21;
    v24[5] = v20;
    unint64_t v11 = v17;
    v24[6] = v40;
    v24[7] = v39;
    *(void *)(v38 + 16) = v17;
    unint64_t v13 = String.index(after:)();
    *(void *)(v8 + 16) = v13;
    unint64_t v12 = v13;
    if (v17[2] == v37) {
      break;
    }
  }
  while (v42 != v12 >> 14);
  if (v42 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v11;
  }
  if (v42 >= v13 >> 14)
  {
    uint64_t v26 = String.subscript.getter();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v34 = v11[2];
    unint64_t v33 = v11[3];
    if (v34 >= v33 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v11);
    }
    void v11[2] = v34 + 1;
    uint64_t v35 = &v11[4 * v34];
    v35[4] = v26;
    void v35[5] = v28;
    v35[6] = v30;
    v35[7] = v32;
    *(void *)(v38 + 16) = v11;
    goto LABEL_35;
  }
LABEL_37:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_38:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TokenGenerationSession.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t TokenGenerationSession.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    char v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      char v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    void v14[2] = v17 + 1;
    uint64_t v18 = &v14[4 * v17];
    v18[4] = v7;
    uint64_t v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x2612054C0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x261205440);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x261205440](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x261205440]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          unint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TokenGenerationSession()
{
  return self;
}

uint64_t method lookup function for TokenGenerationSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TokenGenerationSession);
}

uint64_t dispatch thunk of TokenGenerationSession.__allocating_init(_:externalLanguageMaker:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t sub_25FB4E21C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25FB4E254()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 232) = a4;
  *(void *)(v5 + 160) = a3;
  *(void *)(v5 + 168) = v4;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 152) = a2;
  *(void *)(v5 + 176) = *v4;
  return MEMORY[0x270FA2498](specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)()
{
  *(void *)(v0 + 136) = *(void *)(v0 + 168);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of LogitCollection((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 16)
                                                                                       + **(int **)(v2 + 16));
    unint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *unint64_t v3 = v0;
    v3[1] = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
    uint64_t v4 = *(unsigned __int8 *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 144);
    return v14(v7, v5, v6, v4, v1, v2);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 152);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
    outlined destroy of DataStreamState?(v0 + 56, &demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 200) = v10;
    *(_OWORD *)(v10 + 16) = xmmword_25FB61DF0;
    *(void *)(v10 + 32) = v9;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v11;
    *uint64_t v11 = v0;
    v11[1] = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
    char v12 = *(unsigned char *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 160);
    return DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:)(v10, v13, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  else {
    uint64_t v2 = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 216);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 96);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  unint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120))
  {
    outlined init with take of LogitCollection((long long *)(v0 + 96), *(void *)(v0 + 144));
    unint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t TokenHealingDecoder.__allocating_init(processor:overflowConstraints:buildDecoder:)(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, uint64_t (*)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>), unsigned char *))
{
  uint64_t v6 = swift_allocObject();
  TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)(a1, a2, a3);
  return v6;
}

uint64_t TokenHealingDecoder.baseDecoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
  swift_beginAccess();
  return outlined init with copy of DeterministicLanguageModelProtocol(v3, a1);
}

uint64_t TokenHealingDecoder.baseDecoder.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of LogitCollection(a1, v3);
  return swift_endAccess();
}

uint64_t (*TokenHealingDecoder.baseDecoder.modify())()
{
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, uint64_t (*)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>), unsigned char *))
{
  uint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt);
  uint64_t v9 = MEMORY[0x263F8EE78];
  *uint64_t v8 = MEMORY[0x263F8EE78];
  v8[1] = v9;
  v8[2] = v9;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed) = 0;
  outlined init with copy of DeterministicLanguageModelProtocol(a1, v3 + 16);
  uint64_t v10 = v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_overflowConstraints;
  outlined init with copy of (Int, LogitCollection)(a2, v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_overflowConstraints, &demangling cache variable for type metadata for Constraints?);
  uint64_t v15 = v9;
  uint64_t v13 = &v15;
  a3(v14, partial apply for closure #1 in TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:), v12);
  outlined destroy of DataStreamState?(a2, &demangling cache variable for type metadata for Constraints?);
  __swift_destroy_boxed_opaque_existential_1(a1);
  if (v4)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v3 + 16);
    outlined destroy of DataStreamState?(v10, &demangling cache variable for type metadata for Constraints?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of LogitCollection(v14, v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder);
    *(void *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_delayedLanguageModels) = v15;
  }
  return v3;
}

uint64_t closure #1 in TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of DeterministicLanguageModelProtocol(a1, (uint64_t)v9);
  uint64_t v5 = type metadata accessor for DelayedMaskedLanguageModel();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  outlined init with take of LogitCollection(v9, v6 + 24);
  uint64_t v7 = swift_retain();
  MEMORY[0x261205540](v7);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized Array._endMutation()();
  a3[3] = v5;
  a3[4] = (uint64_t)&protocol witness table for DelayedMaskedLanguageModel;
  *a3 = v6;
  return result;
}

uint64_t partial apply for closure #1 in TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in TokenHealingDecoder.init(processor:overflowConstraints:buildDecoder:)(a1, *(void **)(v2 + 16), a2);
}

Swift::Void __swiftcall TokenHealingDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *((void *)prompt.queryTokens._rawValue + 1);
    uint64_t v2 = *((void *)prompt.queryTokens._rawValue + 2);
    uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt);
    *uint64_t v4 = *(void *)prompt.queryTokens._rawValue;
    v4[1] = v3;
    v4[2] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t TokenHealingDecoder.decodeNextChunk()()
{
  *(void *)(v1 + 80) = v0;
  return MEMORY[0x270FA2498](TokenHealingDecoder.decodeNextChunk(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[10];
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed))
  {
    if (*(void *)(*(void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt + 16)
                   + 16))
    {
      *(void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt + 16) = MEMORY[0x263F8EE78];
      uint64_t v2 = (uint64_t (*)(void))v0[1];
      return v2();
    }
    else
    {
      uint64_t v5 = v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v5, (uint64_t)(v0 + 2));
      uint64_t v6 = v0[5];
      uint64_t v7 = v0[6];
      __swift_project_boxed_opaque_existential_1(v0 + 2, v6);
      uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
      uint64_t v8 = (void *)swift_task_alloc();
      v0[12] = v8;
      *uint64_t v8 = v0;
      v8[1] = TokenHealingDecoder.decodeNextChunk();
      return v9(v6, v7);
    }
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *uint64_t v4 = v0;
    v4[1] = TokenHealingDecoder.decodeNextChunk();
    return TokenHealingDecoder.healPromptTokens()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x270FA2498](TokenHealingDecoder.decodeNextChunk(), 0, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = v0[10];
  if (*(void *)(*(void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt + 16)
                 + 16))
  {
    *(void *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt + 16) = MEMORY[0x263F8EE78];
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v4, (uint64_t)(v0 + 2));
    uint64_t v5 = v0[5];
    uint64_t v6 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 16) + **(int **)(v6 + 16));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    *uint64_t v7 = v0;
    v7[1] = TokenHealingDecoder.decodeNextChunk();
    return v8(v5, v6);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenHealingDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = TokenHealingDecoder.decodeNextChunk();
  }
  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v5 = DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:isPrompt:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t TokenHealingDecoder.healPromptTokens()()
{
  *(void *)(v1 + 1000) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  *(void *)(v1 + 1008) = swift_task_alloc();
  return MEMORY[0x270FA2498](TokenHealingDecoder.healPromptTokens(), 0, 0);
}

{
  NSObject *v0;
  NSObject *v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  long long *v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  Class v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  long long *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  Class v57;
  uint64_t (*v58)(uint64_t, Class);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  Class v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  long long *v86;
  void *p_isa;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  Class v95;
  uint64_t v96;
  Class v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v113)(void);
  objc_class *v114;
  objc_class *v115;
  Class v116;
  Class v117;
  uint64_t v118;
  uint64_t v119;
  Class v120;
  uint64_t v121;
  objc_class *v122;
  uint64_t v123;
  long long *v124;
  NSObject *v125;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  long long *v131;
  objc_class *v132;
  long long *v133;
  uint64_t v134;
  long long *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  objc_class *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  NSObject *v148;
  NSObject *v149;
  NSObject *v150;
  NSObject *v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  long long v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;

  uint64_t v159 = v0;
  Class isa = v0[125].isa;
  uint64_t v3 = OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed;
  v0[127].Class isa = (Class)OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed;
  if (*((unsigned char *)isa + v3)) {
    goto LABEL_69;
  }
  uint64_t v1 = v0;
  uint64_t v4 = OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt;
  v0[128].Class isa = (Class)OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt;
  uint64_t v5 = (long long *)((char *)isa + v4);
  uint64_t v6 = *(objc_class **)((char *)isa + v4);
  v0[129].Class isa = v6;
  if (!*((void *)v6 + 2))
  {
    if (one-time initialization token for healing != -1) {
      goto LABEL_73;
    }
    while (1)
    {
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Log.healing);
      uint64_t v11 = Logger.logObject.getter();
      char v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_25FA51000, v11, v12, "Skipping token healing because prompt was empty", v13, 2u);
        MEMORY[0x261206F80](v13, -1, -1);
      }
      unint64_t v14 = v1[125].isa;

      uint64_t v15 = *(void *)((char *)v14
                      + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_delayedLanguageModels);
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain_n();
        unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (!v16)
        {
LABEL_75:
          swift_bridgeObjectRelease_n();
          goto LABEL_76;
        }
      }
      else
      {
        unint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v16) {
          goto LABEL_75;
        }
      }
      unint64_t v17 = 0;
      uint64_t v148 = v1 + 37;
      uint64_t v150 = v1 + 22;
      int64_t v18 = (long long *)&v1[47];
      char v19 = (uint64_t)&v1[67];
      uint64_t v128 = (uint64_t)&v1[67];
      int v20 = (uint64_t)&v1[72];
      long long v137 = v15;
      char v140 = v15 & 0xC000000000000001;
      int v131 = (long long *)&v1[47];
      char v134 = v16;
      uint64_t v125 = v1 + 72;
      while (v140)
      {
        unsigned __int8 v22 = (void *)MEMORY[0x261205930](v17, v15);
        unsigned __int8 v23 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_66;
        }
LABEL_17:
        *(void *)(v20 + 32) = 0;
        *(_OWORD *)int v20 = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
        if (v22[2]) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v154 = v23;
        outlined init with copy of (Int, LogitCollection)(v20, (uint64_t)v18, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
        if (v1[50].isa)
        {
          outlined init with take of LogitCollection(v18, v19);
          outlined init with copy of DeterministicLanguageModelProtocol(v19, (uint64_t)v148);
          swift_beginAccess();
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v22 + 3), (uint64_t)v150);
          type metadata accessor for MaskedLanguageModel();
          uint64_t v24 = swift_allocObject();
          *(void *)(v24 + 16) = MEMORY[0x263F8EE78];
          unsigned __int8 v25 = (void *)(v24 + 16);
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v148, v24 + 24);
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v150, v24 + 64);
          uint64_t v26 = v1;
          unsigned int v27 = (uint64_t)v1[40].isa;
          char v28 = v1[41].isa;
          __swift_project_boxed_opaque_existential_1(v148, v27);
          int v143 = (*((uint64_t (**)(uint64_t, Class))v28 + 1))(v27, v28);
          uint64_t v29 = (uint64_t)v26[25].isa;
          uint64_t v30 = v26[26].isa;
          __swift_project_boxed_opaque_existential_1(v150, v29);
          unsigned __int8 v31 = (*((uint64_t (**)(uint64_t, Class))v30 + 1))(v29, v30);
          unsigned __int8 v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          swift_beginAccess();
          unsigned __int8 v33 = *(void **)(v24 + 16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v24 + 16) = v33;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
            unsigned __int8 *v25 = v33;
          }
          unsigned int v36 = v33[2];
          uint64_t v35 = v33[3];
          int v20 = (uint64_t)v125;
          if (v36 >= v35 >> 1)
          {
            unsigned __int8 v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v33);
            unsigned __int8 *v25 = v33;
          }
          void v33[2] = v36 + 1;
          char v37 = &v33[3 * v36];
          v37[4] = v143;
          v37[5] = v31;
          v37[6] = v32;
          swift_endAccess();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
          uint64_t v38 = v22[2];
          v22[2] = v24;
          swift_retain();
          outlined consume of DelayedMaskedLanguageModel.MaskResolution(v38);
          unsigned __int8 v40 = v22[6];
          unsigned __int8 v39 = v22[7];
          unsigned __int8 v41 = __swift_project_boxed_opaque_existential_1(v22 + 3, v40);
          uint64_t v42 = *(void *)(v40 - 8);
          unsigned int v43 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v42 + 16))(v43, v41, v40);
          char v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v39);
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v40);
          char v19 = v128;
          __swift_destroy_boxed_opaque_existential_1(v128);
          swift_task_dealloc();
          uint64_t v1 = v153;
          unint64_t v16 = v134;
          uint64_t v15 = v137;
          int64_t v18 = v131;
          if (v44) {
            goto LABEL_67;
          }
        }
        else
        {
          outlined destroy of DataStreamState?((uint64_t)v18, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
          unsigned __int8 v21 = v22[2];
          v22[2] = 1;
          outlined consume of DelayedMaskedLanguageModel.MaskResolution(v21);
        }
        outlined destroy of DataStreamState?(v20, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
        swift_release();
        ++v17;
        if (v154 == v16) {
          goto LABEL_75;
        }
      }
      unsigned __int8 v22 = *(void **)(v15 + 8 * v17 + 32);
      swift_retain();
      unsigned __int8 v23 = v17 + 1;
      if (!__OFADD__(v17, 1)) {
        goto LABEL_17;
      }
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_once();
    }
  }
  uint64_t v7 = (uint64_t)v0[126].isa;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)isa + 16, (uint64_t)&v1[2]);
  outlined init with copy of (Int, LogitCollection)((uint64_t)isa + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_overflowConstraints, v7, &demangling cache variable for type metadata for Constraints?);
  uint64_t v8 = type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = (objc_class *)OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:overflowConstraints:)(v1 + 2, v6, v7);
  v1[130].Class isa = v9;
  uint64_t v45 = v9;
  if (!v9)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for healing != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Log.healing);
    int v78 = Logger.logObject.getter();
    char v79 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v78, v79))
    {
      char v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v80 = 0;
      _os_log_impl(&dword_25FA51000, v78, v79, "Skipping token healing because no healing is possible", v80, 2u);
      MEMORY[0x261206F80](v80, -1, -1);
    }
    uint64_t v124 = v5;
    char v81 = v1[125].isa;

    int v82 = *(void *)((char *)v81 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_delayedLanguageModels);
    if (v82 >> 62)
    {
      swift_bridgeObjectRetain_n();
      char v83 = _CocoaArrayWrapper.endIndex.getter();
      if (v83)
      {
LABEL_49:
        char v84 = 0;
        uint64_t v85 = (uint64_t)&v1[12];
        uint64_t v86 = (long long *)&v1[17];
        p_Class isa = &v1[32].isa;
        uint64_t v152 = v1 + 42;
        char v88 = (uint64_t)&v1[7];
        char v144 = (uint64_t)&v1[7];
        long long v146 = v82 & 0xC000000000000001;
        int v139 = v83;
        char v142 = v82;
        char v133 = (long long *)&v1[17];
        char v136 = (uint64_t)&v1[12];
        uint64_t v130 = (uint64_t)&v1[32];
        do
        {
          if (v146)
          {
            int v90 = (void *)MEMORY[0x261205930](v84, v82);
            int v91 = v84 + 1;
            if (__OFADD__(v84, 1)) {
              goto LABEL_71;
            }
          }
          else
          {
            int v90 = *(void **)(v82 + 8 * v84 + 32);
            swift_retain();
            int v91 = v84 + 1;
            if (__OFADD__(v84, 1)) {
              goto LABEL_71;
            }
          }
          *(void *)(v88 + 32) = 0;
          *(_OWORD *)char v88 = 0u;
          *(_OWORD *)(v88 + 16) = 0u;
          if (v90[2]) {
            return _assertionFailure(_:_:file:line:flags:)();
          }
          unint64_t v156 = v91;
          outlined init with copy of (Int, LogitCollection)(v88, (uint64_t)v86, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
          if (v1[20].isa)
          {
            outlined init with take of LogitCollection(v86, v85);
            outlined init with copy of DeterministicLanguageModelProtocol(v85, (uint64_t)p_isa);
            swift_beginAccess();
            outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v90 + 3), (uint64_t)v152);
            type metadata accessor for MaskedLanguageModel();
            char v92 = swift_allocObject();
            *(void *)(v92 + 16) = MEMORY[0x263F8EE78];
            char v93 = (void *)(v92 + 16);
            outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)p_isa, v92 + 24);
            outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v152, v92 + 64);
            char v94 = (uint64_t)v1[35].isa;
            char v95 = v1[36].isa;
            __swift_project_boxed_opaque_existential_1(p_isa, v94);
            uint64_t v147 = (*((uint64_t (**)(uint64_t, Class))v95 + 1))(v94, v95);
            char v96 = (uint64_t)v1[45].isa;
            char v97 = v1[46].isa;
            __swift_project_boxed_opaque_existential_1(v152, v96);
            int v98 = (*((uint64_t (**)(uint64_t, Class))v97 + 1))(v96, v97);
            int v99 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
            swift_beginAccess();
            uint64_t v100 = *(void **)(v92 + 16);
            uint64_t v101 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v92 + 16) = v100;
            if ((v101 & 1) == 0)
            {
              uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100[2] + 1, 1, v100);
              *char v93 = v100;
            }
            char v103 = v100[2];
            char v102 = v100[3];
            if (v103 >= v102 >> 1)
            {
              uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v102 > 1), v103 + 1, 1, v100);
              *char v93 = v100;
            }
            v100[2] = v103 + 1;
            uint64_t v104 = &v100[3 * v103];
            v104[4] = v147;
            uint64_t v104[5] = v98;
            v104[6] = v99;
            swift_endAccess();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
            p_Class isa = (void *)v130;
            __swift_destroy_boxed_opaque_existential_1(v130);
            uint64_t v105 = v90[2];
            v90[2] = v92;
            swift_retain();
            outlined consume of DelayedMaskedLanguageModel.MaskResolution(v105);
            uint64_t v107 = v90[6];
            char v106 = v90[7];
            uint64_t v108 = __swift_project_boxed_opaque_existential_1(v90 + 3, v107);
            char v109 = *(void *)(v107 - 8);
            uint64_t v110 = swift_task_alloc();
            (*(void (**)(uint64_t, void *, uint64_t))(v109 + 16))(v110, v108, v107);
            uint64_t v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8))(v107, v106);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v107);
            uint64_t v85 = v136;
            __swift_destroy_boxed_opaque_existential_1(v136);
            swift_task_dealloc();
            uint64_t v1 = v153;
            char v83 = v139;
            int v82 = v142;
            uint64_t v86 = v133;
            if (v111) {
              goto LABEL_72;
            }
          }
          else
          {
            outlined destroy of DataStreamState?((uint64_t)v86, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
            char v89 = v90[2];
            v90[2] = 1;
            outlined consume of DelayedMaskedLanguageModel.MaskResolution(v89);
          }
          char v88 = v144;
          outlined destroy of DataStreamState?(v144, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
          swift_release();
          ++v84;
        }
        while (v156 != v83);
      }
    }
    else
    {
      char v83 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v83) {
        goto LABEL_49;
      }
    }
    char v117 = v1[125].isa;
    swift_bridgeObjectRelease_n();
    uint64_t v118 = (uint64_t)v117 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v118, (uint64_t)&v1[27]);
    char v119 = (uint64_t)v1[30].isa;
    uint64_t v120 = v1[31].isa;
    __swift_project_boxed_opaque_existential_1(&v1[27].isa, v119);
    char v121 = *((void *)v124 + 2);
    uint64_t v157 = *v124;
    unint64_t v158 = v121;
    (*((void (**)(long long *, uint64_t, Class))v120 + 1))(&v157, v119, v120);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[27]);
LABEL_76:
    *((unsigned char *)v1[125].isa + (unint64_t)v1[127].isa) = 1;
    swift_task_dealloc();
    char v113 = (uint64_t (*)(void))v1[1].isa;
    return v113();
  }
  int v46 = *(void *)((char *)v1[125].isa
                  + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_delayedLanguageModels);
  char v122 = v6;
  char v141 = (objc_class *)v8;
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain_n();
    char v47 = _CocoaArrayWrapper.endIndex.getter();
    if (v47)
    {
LABEL_28:
      char v48 = 0;
      char v49 = (uint64_t)&v1[52];
      int v50 = (uint64_t)&v1[57];
      char v51 = (long long *)&v1[62];
      uint64_t v149 = v1 + 92;
      uint64_t v151 = v1 + 87;
      int v123 = (uint64_t)&v1[57];
      int v135 = (long long *)&v1[62];
      uint64_t v138 = v46 & 0xC000000000000001;
      long long v129 = v46;
      char v132 = v45;
      uint64_t v126 = v1 + 52;
      char v127 = v47;
      do
      {
        if (v138)
        {
          char v53 = (void *)MEMORY[0x261205930](v48, v46);
        }
        else
        {
          char v53 = *(void **)(v46 + 8 * v48 + 32);
          swift_retain();
        }
        if (__OFADD__(v48, 1)) {
          goto LABEL_68;
        }
        v1[55].Class isa = v141;
        v1[56].Class isa = (Class)&protocol witness table for OneTokenHealingPrefixMatchingLanguageModel;
        v1[52].Class isa = v45;
        if (v53[2]) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v155 = v48 + 1;
        outlined init with copy of (Int, LogitCollection)(v49, (uint64_t)v51, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
        if (v1[65].isa)
        {
          outlined init with take of LogitCollection(v51, v50);
          outlined init with copy of DeterministicLanguageModelProtocol(v50, (uint64_t)v149);
          swift_beginAccess();
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v53 + 3), (uint64_t)v151);
          type metadata accessor for MaskedLanguageModel();
          uint64_t v54 = swift_allocObject();
          *(void *)(v54 + 16) = MEMORY[0x263F8EE78];
          int v55 = (void **)(v54 + 16);
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v149, v54 + 24);
          unint64_t v145 = v54;
          outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v151, v54 + 64);
          char v56 = (uint64_t)v1[95].isa;
          char v57 = v1[96].isa;
          __swift_project_boxed_opaque_existential_1(v149, v56);
          char v58 = (uint64_t (*)(uint64_t, Class))*((void *)v57 + 1);
          swift_retain();
          int v59 = v58(v56, v57);
          char v60 = *(void *)(v153 + 720);
          uint64_t v61 = *(void *)(v153 + 728);
          __swift_project_boxed_opaque_existential_1(v151, v60);
          char v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v60, v61);
          uint64_t v63 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          swift_beginAccess();
          char v64 = *v55;
          uint64_t v65 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t *v55 = v64;
          int v66 = v59;
          if ((v65 & 1) == 0)
          {
            char v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
            uint64_t *v55 = v64;
          }
          char v68 = v64[2];
          char v67 = v64[3];
          int v50 = v123;
          if (v68 >= v67 >> 1)
          {
            char v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v64);
            uint64_t *v55 = v64;
          }
          v64[2] = v68 + 1;
          char v69 = &v64[3 * v68];
          v69[4] = v66;
          v69[5] = v62;
          v69[6] = v63;
          swift_endAccess();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
          int v70 = v53[2];
          v53[2] = v145;
          swift_retain();
          outlined consume of DelayedMaskedLanguageModel.MaskResolution(v70);
          uint64_t v72 = v53[6];
          char v71 = v53[7];
          uint64_t v73 = __swift_project_boxed_opaque_existential_1(v53 + 3, v72);
          char v74 = *(void *)(v72 - 8);
          uint64_t v75 = swift_task_alloc();
          (*(void (**)(uint64_t, void *, uint64_t))(v74 + 16))(v75, v73, v72);
          char v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v72, v71);
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v75, v72);
          __swift_destroy_boxed_opaque_existential_1(v123);
          swift_task_dealloc();
          uint64_t v1 = v153;
          int v46 = v129;
          uint64_t v45 = v132;
          char v49 = (uint64_t)v126;
          char v47 = v127;
          if (v76) {
            goto LABEL_70;
          }
        }
        else
        {
          swift_retain();
          outlined destroy of DataStreamState?((uint64_t)v51, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
          uint64_t v52 = v53[2];
          v53[2] = 1;
          outlined consume of DelayedMaskedLanguageModel.MaskResolution(v52);
        }
        outlined destroy of DataStreamState?(v49, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
        swift_release();
        ++v48;
        char v51 = v135;
      }
      while (v155 != v47);
    }
  }
  else
  {
    char v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v47) {
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease_n();
  char v114 = (objc_class *)*((void *)v45 + 9);
  v1[131].Class isa = v114;
  swift_bridgeObjectRetain();
  int v115 = (objc_class *)swift_task_alloc();
  v1[132].Class isa = v115;
  *(void *)int v115 = v1;
  *((void *)v115 + 1) = TokenHealingDecoder.healPromptTokens();
  uint64_t v116 = v1[125].isa;
  *((void *)v115 + 24) = v122;
  *((void *)v115 + 25) = v116;
  *((void *)v115 + 22) = v1 + 109;
  *((void *)v115 + 23) = v114;
  return MEMORY[0x270FA2498](TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1064) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = TokenHealingDecoder.healPromptTokens();
  }
  else {
    uint64_t v2 = TokenHealingDecoder.healPromptTokens();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  long long *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(void);
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  unsigned __int8 v40 = v0;
  uint64_t v1 = *(void *)(v0 + 1000);
  uint64_t v2 = (long long *)(v1 + *(void *)(v0 + 1024));
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t *v2 = *(_OWORD *)(v0 + 872);
  *((void *)v2 + 2) = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v4, v0 + 616);
  uint64_t v5 = *(void *)(v0 + 640);
  uint64_t v6 = *(void *)(v0 + 648);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 616), v5);
  uint64_t v7 = *((void *)v2 + 2);
  char v37 = *v2;
  uint64_t v38 = v7;
  (*(void (**)(long long *, uint64_t, uint64_t))(v6 + 8))(&v37, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(v0 + 616);
  if (one-time initialization token for healing != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.healing);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v34 = v10;
    uint64_t v11 = *(void *)(v0 + 1000) + 16;
    char v12 = (uint8_t *)swift_slowAlloc();
    unsigned __int8 v33 = swift_slowAlloc();
    unsigned __int8 v39 = v33;
    uint64_t v35 = v12;
    *(_DWORD *)char v12 = 136642819;
    uint64_t v13 = *((void *)v2 + 2);
    unsigned int v36 = (void *)(v0 + 656);
    outlined init with copy of DeterministicLanguageModelProtocol(v11, v0 + 656);
    unint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = MEMORY[0x263F8EE78];
    if (v14)
    {
      unsigned __int8 v32 = v9;
      *(void *)&char v37 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      unint64_t v16 = 0;
      uint64_t v15 = v37;
      do
      {
        unint64_t v17 = *(void *)(v13 + 8 * v16 + 32);
        int64_t v18 = *(void *)(v0 + 680);
        char v19 = *(void *)(v0 + 688);
        __swift_project_boxed_opaque_existential_1(v36, v18);
        int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 24))(v17, v18, v19);
        unsigned __int8 v22 = v21;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&char v37 = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
          uint64_t v15 = v37;
        }
        unsigned __int8 v25 = *(void *)(v15 + 16);
        uint64_t v24 = *(void *)(v15 + 24);
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          uint64_t v15 = v37;
        }
        ++v16;
        *(void *)(v15 + 16) = v25 + 1;
        uint64_t v26 = v15 + 16 * v25;
        *(void *)(v26 + 32) = v20;
        *(void *)(v26 + 40) = v22;
      }
      while (v14 != v16);
      swift_bridgeObjectRelease();
      uint64_t v9 = v32;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    unsigned int v27 = MEMORY[0x261205560](v15, MEMORY[0x263F8D310]);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 992) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_25FA51000, v9, v34, "Boundary overflow tokens: %{sensitive}s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261206F80](v33, -1, -1);
    MEMORY[0x261206F80](v35, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_release();
  *(unsigned char *)(*(void *)(v0 + 1000) + *(void *)(v0 + 1016)) = 1;
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  *(unsigned char *)(v0[125] + v0[127]) = 1;
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  return MEMORY[0x270FA2498](TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:), 0, 0);
}

unint64_t TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:)()
{
  uint64_t v73 = v0;
  if (one-time initialization token for healing != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 208) = __swift_project_value_buffer(v1, (uint64_t)static Log.healing);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 184);
  if (v4)
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218240;
    *(void *)(v0 + 160) = *(void *)(*(void *)(v5
                                                  + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt)
                                      + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v7 + 12) = 2048;
    *(void *)(v0 + 168) = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25FA51000, v2, v3, "Healing prompt from %ld to %ld token(s)", (uint8_t *)v7, 0x16u);
    MEMORY[0x261206F80](v7, -1, -1);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }

  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt;
  *(void *)(v0 + 216) = OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt;
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)(v0 + 224) = v11;
  uint64_t v12 = *(void *)(v10 + 16);
  *(void *)(v0 + 232) = v12;
  unint64_t v13 = *(void *)(v8 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_delayedLanguageModels);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!(v13 >> 62))
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_8;
    }
LABEL_29:
    unint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_29;
  }
LABEL_8:
  unint64_t result = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v70 = v12;
  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_31:
    unint64_t v16 = (void *)MEMORY[0x261205930](result, v13);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (result >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v16 = *(void **)(v13 + 8 * result + 32);
  swift_retain();
LABEL_13:
  *(void *)(v0 + 240) = v16;
  unint64_t v17 = *(void **)(v0 + 200);
  uint64_t v69 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v19 = v16[6];
  uint64_t v20 = v16[7];
  unsigned __int8 v21 = __swift_project_boxed_opaque_existential_1(v16 + 3, v19);
  uint64_t v22 = *(void *)(v19 - 8);
  uint64_t v23 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v22 + 16))(v23, v21, v19);
  Swift::Int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v19);
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  v72[0] = v18;
  v72[1] = v11;
  void v72[2] = v70;
  v75.queryTokens._rawValue = v72;
  Swift::Int v25 = DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(v24, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v17 + 2;
  uint64_t v27 = v17[5];
  uint64_t v28 = v17[6];
  __swift_project_boxed_opaque_existential_1(v17 + 2, v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v69, v27, v28);
  *(void *)(v0 + 248) = v29;
  *(void *)(v0 + 256) = v30;
  uint64_t v31 = *(void *)(v0 + 184);
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  uint64_t v34 = v17[5];
  uint64_t v35 = v17[6];
  __swift_project_boxed_opaque_existential_1(v26, v34);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v31, v34, v35);
  unint64_t v38 = v37;
  swift_bridgeObjectRetain();
  uint64_t v39 = v32;
  uint64_t v40 = v33;
  if (String.hasPrefix(_:)(*(Swift::String *)&v39))
  {
    unint64_t v41 = v38;
    uint64_t v42 = *(void *)(v0 + 184);
    uint64_t v43 = *(void *)(v0 + 248);
    unint64_t v44 = *(void *)(v0 + 256);
    uint64_t v45 = *(void *)(*(void *)(v0 + 200) + *(void *)(v0 + 216) + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = TokenHealingDecoder.proceedingCharacterTokens(sourceText:targetText:)(v43, v44, v36, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    char v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v52 = *(void *)(v0 + 200);
    uint64_t v53 = *(void *)(v0 + 184);
    if (!v51)
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();

LABEL_27:
      uint64_t v63 = *(void **)(v0 + 176);
      *uint64_t v63 = v42;
      v63[1] = v45;
      void v63[2] = v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v64 = *(uint64_t (**)(void))(v0 + 8);
      return v64();
    }
    os_log_type_t v66 = v50;
    log = v49;
    uint64_t v68 = v48;
    uint64_t v54 = *(void *)(v0 + 216);
    uint64_t v55 = swift_slowAlloc();
    unint64_t result = swift_slowAlloc();
    unint64_t v65 = result;
    v72[0] = result;
    *(_DWORD *)uint64_t v55 = 136643075;
    unint64_t v56 = *(void *)(v53 + 16);
    if (*(void *)(*(void *)(v52 + v54) + 16) >= v56)
    {
      swift_bridgeObjectRetain();
      uint64_t v57 = ArraySlice.description.getter();
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t result = swift_bridgeObjectRelease_n();
      *(_WORD *)(v55 + 12) = 2085;
      if (*(void *)(v42 + 16) >= v56)
      {
        swift_bridgeObjectRetain();
        uint64_t v60 = ArraySlice.description.getter();
        unint64_t v62 = v61;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25FA51000, log, v66, "Healed from %{sensitive}s to %{sensitive}s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261206F80](v65, -1, -1);
        MEMORY[0x261206F80](v55, -1, -1);
        swift_release();

        uint64_t v48 = v68;
        goto LABEL_27;
      }
LABEL_35:
      __break(1u);
      return result;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v0 + 184);
  *(void *)(v0 + 264) = v25;
  *(void *)(v0 + 272) = v46;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 88) = 0;
  char v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)
                                                                + async function pointer to specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:));
  char v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v47;
  void *v47 = v0;
  v47[1] = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:);
  return v71(v0 + 16, v25, v0 + 56, 1);
}

uint64_t TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:)()
{
  uint64_t v2 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    outlined destroy of DataStreamState?(v2, &demangling cache variable for type metadata for LogitPresampler?);
    swift_bridgeObjectRelease();
    os_log_type_t v3 = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:);
  }
  else
  {
    outlined destroy of DataStreamState?(v2, &demangling cache variable for type metadata for LogitPresampler?);
    os_log_type_t v3 = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t result;
  Swift::Int v12;
  char isUniquelyReferenced_nonNull_native;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, char);
  os_log_t log;
  NSObject *loga;
  uint64_t v57[2];
  uint64_t v58;
  uint64_t v59;

  unint64_t v58 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 40);
  os_log_type_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  BOOL v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 240);
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    __swift_mutable_project_boxed_opaque_existential_1(v7 + 24, v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, Swift::Int, uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v4, 1, v8, v9);
    swift_endAccess();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 264);
    swift_retain();
    uint64_t v10 = MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(v12, v4, 1);
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v5);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void **)(v0 + 272);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, *(void **)(v0 + 272));
  }
  unint64_t v16 = v14[2];
  uint64_t v15 = v14[3];
  log = (os_log_t)v10;
  if (v16 >= v15 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  unint64_t v17 = *(void *)(v0 + 288);
  uint64_t v18 = *(void **)(v0 + 200);
  long long v14[2] = v16 + 1;
  v14[v16 + 4] = v4;
  uint64_t v19 = v18[5];
  uint64_t v20 = v18[6];
  __swift_project_boxed_opaque_existential_1(v18 + 2, v19);
  unsigned __int8 v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = v21(v22, v19, v20);
  Swift::Int v25 = *(void **)(v0 + 256);
  if (v17)
  {
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_12:
    return v26();
  }
  uint64_t v27 = v23;
  uint64_t v28 = v24;
  uint64_t v29 = *(void *)(v0 + 248);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = v29;
  v30._object = v25;
  if (String.hasPrefix(_:)(v30))
  {
    uint64_t v32 = *(void *)(v0 + 248);
    uint64_t v31 = *(void *)(v0 + 256);
    uint64_t v33 = *(void *)(*(void *)(v0 + 200) + *(void *)(v0 + 216) + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = TokenHealingDecoder.proceedingCharacterTokens(sourceText:targetText:)(v32, v31, v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v36 = Logger.logObject.getter();
    unint64_t v37 = static os_log_type_t.debug.getter();
    unint64_t v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 200);
    uint64_t v40 = *(void *)(v0 + 184);
    if (v38)
    {
      uint64_t v53 = v37;
      os_log_t loga = v36;
      unint64_t v41 = *(void *)(v0 + 216);
      uint64_t v42 = swift_slowAlloc();
      unint64_t result = swift_slowAlloc();
      uint64_t v52 = result;
      v57[0] = result;
      *(_DWORD *)uint64_t v42 = 136643075;
      uint64_t v43 = *(void *)(v40 + 16);
      if (*(void *)(*(void *)(v39 + v41) + 16) < v43)
      {
        __break(1u);
      }
      else
      {
        BOOL v51 = v35;
        swift_bridgeObjectRetain();
        unint64_t v44 = ArraySlice.description.getter();
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t result = swift_bridgeObjectRelease_n();
        *(_WORD *)(v42 + 12) = 2085;
        if (v14[2] >= v43)
        {
          swift_bridgeObjectRetain();
          char v47 = ArraySlice.description.getter();
          char v49 = v48;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25FA51000, loga, v53, "Healed from %{sensitive}s to %{sensitive}s", (uint8_t *)v42, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261206F80](v52, -1, -1);
          MEMORY[0x261206F80](v42, -1, -1);
          swift_release();

          uint64_t v35 = v51;
LABEL_25:
          os_log_type_t v50 = *(void **)(v0 + 176);
          *os_log_type_t v50 = v14;
          v50[1] = v33;
          v50[2] = v35;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_12;
        }
      }
      __break(1u);
      return result;
    }
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();

    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 264) = log;
  *(void *)(v0 + 272) = v14;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 88) = 0;
  uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)
                                                                + async function pointer to specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:));
  uint64_t v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v34;
  *uint64_t v34 = v0;
  v34[1] = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptTokens:);
  return v54(v0 + 16, (uint64_t)log, v0 + 56, 1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TokenHealingDecoder.proceedingCharacterTokens(sourceText:targetText:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  if (!String.hasPrefix(_:)(*(Swift::String *)&a1)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v12 = a1;
  }
  uint64_t v13 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  unint64_t v14 = v13 | (v12 << 16);
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized Collection.suffix(from:)(v14, a3, a4);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (!((v15 ^ v17) >> 14))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v32 = v19;
  uint64_t v25 = v7[5];
  uint64_t v24 = v7[6];
  __swift_project_boxed_opaque_existential_1(v7 + 2, v25);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 56))(v25, v24))
  {
    uint64_t v26 = v7[5];
    uint64_t v27 = v7[6];
    uint64_t v22 = (uint64_t)__swift_project_boxed_opaque_existential_1(v7 + 2, v26);
    uint64_t v28 = MEMORY[0x261205430](v15, v17, v32, v21);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v28, v30, v26, v27);
    if (!v6) {
      uint64_t v22 = v31;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs_Sis5NeverOTg5119_s24TokenGenerationInference0A14HealingDecoderC25proceedingCharacterTokens10sourceText06targetJ0SaySiGSS_SStKFSiSJXEfU_0fG9Inference0fjK0CTf1cn_nTf4ng_n(v15, v17, v32, v21, v7);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v22;
}

uint64_t TokenHealingDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DataStreamState?(v0 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_overflowConstraints, &demangling cache variable for type metadata for Constraints?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TokenHealingDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of DataStreamState?(v0 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_overflowConstraints, &demangling cache variable for type metadata for Constraints?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_baseDecoder);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *protocol witness for SamplingDecoder.append(prompt:) in conformance TokenHealingDecoder(void *result)
{
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_tokensAreHealed))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result[1];
    uint64_t v3 = result[2];
    uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference19TokenHealingDecoder_bufferedPrompt);
    *uint64_t v5 = *result;
    v5[1] = v4;
    v5[2] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TokenHealingDecoder()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  v3[10] = v2;
  return MEMORY[0x270FA2498](TokenHealingDecoder.decodeNextChunk(), 0, 0);
}

uint64_t ObjC metadata update function for TokenHealingDecoder()
{
  return type metadata accessor for TokenHealingDecoder();
}

uint64_t type metadata accessor for TokenHealingDecoder()
{
  uint64_t result = type metadata singleton initialization cache for TokenHealingDecoder;
  if (!type metadata singleton initialization cache for TokenHealingDecoder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TokenHealingDecoder()
{
  type metadata accessor for Constraints?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TokenHealingDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TokenHealingDecoder);
}

uint64_t dispatch thunk of TokenHealingDecoder.__allocating_init(processor:overflowConstraints:buildDecoder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs_Sis5NeverOTg5119_s24TokenGenerationInference0A14HealingDecoderC25proceedingCharacterTokens10sourceText06targetJ0SaySiGSS_SStKFSiSJXEfU_0fG9Inference0fjK0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = Substring.distance(from:to:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v5) {
    return v6;
  }
  uint64_t v7 = v5;
  uint64_t v26 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = v26;
    uint64_t v24 = a5 + 2;
    do
    {
      uint64_t v10 = Substring.subscript.getter();
      uint64_t v11 = v9;
      if (v10 == 32 && v9 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v12 = a5[5];
        uint64_t v13 = a5[6];
        __swift_project_boxed_opaque_existential_1(v24, v12);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 32))(8492770, 0xA300000000000000, v12, v13);
      }
      else if (v10 == 9 && v11 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v15 = a5[5];
        uint64_t v16 = a5[6];
        __swift_project_boxed_opaque_existential_1(v24, v15);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 32))(0x3E393078303CLL, 0xE600000000000000, v15, v16);
      }
      else if (v10 == 10 && v11 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v17 = a5[5];
        uint64_t v18 = a5[6];
        __swift_project_boxed_opaque_existential_1(v24, v17);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 32))(0x3E413078303CLL, 0xE600000000000000, v17, v18);
      }
      else
      {
        uint64_t v19 = a5[5];
        uint64_t v20 = a5[6];
        __swift_project_boxed_opaque_existential_1(v24, v19);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32))(v10, v11, v19, v20);
      }
      uint64_t v21 = v14;
      swift_bridgeObjectRelease();
      unint64_t v23 = *(void *)(v26 + 16);
      unint64_t v22 = *(void *)(v26 + 24);
      if (v23 >= v22 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      }
      *(void *)(v26 + 16) = v23 + 1;
      *(void *)(v26 + 8 * v23 + 32) = v21;
      Substring.index(after:)();
      --v7;
    }
    while (v7);
    return v6;
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, remaining: String));
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v12;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v12;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = (void *)(v2 + 24 * v6);
      v7[4] = v9;
      void v7[5] = v10;
      v7[6] = v11;
      v4 += 24;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.__allocating_init(tokenizer:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 32) = 1;
  *(void *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 513;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.tokenizer.getter()
{
  return swift_retain();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.init(tokenizer:)(uint64_t a1)
{
  *(unsigned char *)(v1 + 32) = 1;
  *(void *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 48) = 513;
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = 0;
  return v1;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.encode(text:)()
{
  return dispatch thunk of TokenizerRunner.tokenize(_:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenizerRunnerPrefixMatchingTextProcessor.decode(tokenIDs:)(Swift::OpaquePointer tokenIDs)
{
  uint64_t v1 = dispatch thunk of TokenizerRunner.detokenize(_:)();
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall TokenizerRunnerPrefixMatchingTextProcessor.text(forTokenID:)(Swift::Int forTokenID)
{
  uint64_t v1 = dispatch thunk of TokenizerRunner.text(forTokenID:)();
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::Int __swiftcall TokenizerRunnerPrefixMatchingTextProcessor.tokenID(forText:)(Swift::String forText)
{
  return dispatch thunk of TokenizerRunner.tokenID(forText:)();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter()
{
  if (*(unsigned char *)(v0 + 32) != 1) {
    return *(void *)(v0 + 24);
  }
  uint64_t result = dispatch thunk of TokenizerRunner.longestTokenLength.getter();
  *(void *)(v0 + 24) = result;
  *(unsigned char *)(v0 + 32) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 32) = 0;
  return result;
}

void *(*TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.modify(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
  return TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.modify;
}

void *TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 24) = *result;
  *(unsigned char *)(v1 + 32) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter()
{
  if (*(unsigned char *)(v0 + 48) != 1) {
    return *(void *)(v0 + 40);
  }
  uint64_t result = dispatch thunk of TokenizerRunner.vocabularyCount.getter();
  *(void *)(v0 + 40) = result;
  *(unsigned char *)(v0 + 48) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

void *(*TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.modify(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
  return TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.modify;
}

void *TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 40) = *result;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 49);
  if (v1 == 2)
  {
    char v2 = closure #1 in TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter();
    *(unsigned char *)(v0 + 49) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t closure #1 in TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25FB61DF0;
  *(void *)(v0 + 32) = dispatch thunk of TokenizerRunner.tokenID(forText:)();
  uint64_t v1 = dispatch thunk of TokenizerRunner.detokenize(_:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  if (v1 == 24864 && v3 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (one-time initialization token for healing != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Log.healing);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v8))
      {
        uint64_t v10 = 0;
        goto LABEL_18;
      }
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_25FA51000, v7, v8, "Non-continuation tokenizer with token healing: results may be unexpected", v9, 2u);
      uint64_t v10 = 0;
      goto LABEL_15;
    }
  }
  if (one-time initialization token for healing != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.healing);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v7, v12))
  {
    uint64_t v10 = 1;
    goto LABEL_18;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v9 = 0;
  _os_log_impl(&dword_25FA51000, v7, v12, "Detected continuation tokenizer", v9, 2u);
  uint64_t v10 = 1;
LABEL_15:
  MEMORY[0x261206F80](v9, -1, -1);
LABEL_18:

  return v10;
}

unsigned char *(*TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter() & 1;
  return TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.modify;
}

unsigned char *TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 49) = result[8];
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(a1, a2, MEMORY[0x263F7FBF0]);
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(a1, a2, MEMORY[0x263F7FBF8]);
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(a1, a2, MEMORY[0x263F7FC00]);
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  uint64_t v4 = specialized _arrayForceCast<A, B>(_:)(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.deinit()
{
  swift_release();
  return v0;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.encode(text:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return dispatch thunk of TokenizerRunner.tokenize(_:)();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.decode(tokenIDs:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return dispatch thunk of TokenizerRunner.detokenize(_:)();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.text(forTokenID:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return dispatch thunk of TokenizerRunner.text(forTokenID:)();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.tokenID(forText:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return dispatch thunk of TokenizerRunner.tokenID(forText:)();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.vocabularyCount.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.longestTokenLength.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.isContinuationTokenizer.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter() & 1;
}

uint64_t protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(a1, a2, a3, a4, MEMORY[0x263F7FBF0]);
}

uint64_t protocol witness for PrefixMatchingTextProcessor.tokenIDs(forRawPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(a1, a2, a3, a4, MEMORY[0x263F7FBF8]);
}

uint64_t protocol witness for PrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(a1, a2, a3, a4, MEMORY[0x263F7FC00]);
}

uint64_t protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a5();
  uint64_t v6 = specialized _arrayForceCast<A, B>(_:)(v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25FB53114@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
  *a1 = result;
  return result;
}

void *sub_25FB53140(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 24) = *result;
  *(unsigned char *)(v2 + 32) = 0;
  return result;
}

uint64_t sub_25FB53154@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
  *a1 = result;
  return result;
}

void *sub_25FB53180(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 40) = *result;
  *(unsigned char *)(v2 + 48) = 0;
  return result;
}

uint64_t sub_25FB53194@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *sub_25FB531C4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 49) = *result;
  return result;
}

uint64_t type metadata accessor for TokenizerRunnerPrefixMatchingTextProcessor()
{
  return self;
}

uint64_t method lookup function for TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TokenizerRunnerPrefixMatchingTextProcessor);
}

uint64_t dispatch thunk of TokenizerRunnerPrefixMatchingTextProcessor.__allocating_init(tokenizer:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t TwoStageSpeculativeDecoder.__allocating_init(draftModel:languageModel:behavior:sampler:stopTokenId:)(void *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(void *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *a3;
  char v10 = *((unsigned char *)a3 + 8);
  uint64_t v11 = a3[2];
  char v25 = *((unsigned char *)a3 + 28);
  int v26 = *((_DWORD *)a3 + 6);
  char v23 = *((unsigned char *)a3 + 30);
  char v24 = *((unsigned char *)a3 + 29);
  char v21 = *((unsigned char *)a3 + 36);
  int v22 = *((_DWORD *)a3 + 8);
  *(void *)(v5 + 280) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_WORD *)(v5 + 320) = 0;
  *(void *)(v5 + 328) = 0;
  *(void *)(v5 + 336) = 0;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v5 + 16);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  *(void *)(v5 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v5 + 64);
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v14);
  *(void *)(v5 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  *(void *)(v5 + 112) = v9;
  *(unsigned char *)(v5 + 120) = v10;
  *(void *)(v5 + 128) = v11;
  *(_DWORD *)(v5 + 136) = v26;
  *(unsigned char *)(v5 + 140) = v25;
  *(unsigned char *)(v5 + 141) = v24;
  *(unsigned char *)(v5 + 142) = v23;
  *(_DWORD *)(v5 + 144) = v22;
  *(unsigned char *)(v5 + 148) = v21;
  *(void *)(v5 + 272) = v9;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a4, v5 + 152);
  uint64_t v16 = a4[3];
  uint64_t v17 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v16);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v17 + 32))(v28, v16, v17);
  outlined init with take of LogitCollection(v28, v5 + 192);
  if (v11 == 2)
  {
    uint64_t v18 = &protocol witness table for TopK2Presampler;
    uint64_t v19 = &type metadata for TopK2Presampler;
  }
  else if (v11 == 1)
  {
    uint64_t v18 = &protocol witness table for ArgmaxPresampler;
    uint64_t v19 = &type metadata for ArgmaxPresampler;
  }
  else
  {
    uint64_t v18 = &protocol witness table for BasicLogitPresampler;
    uint64_t v19 = &type metadata for BasicLogitPresampler;
  }
  *(void *)(v5 + 256) = v19;
  *(void *)(v5 + 264) = v18;
  *(void *)(v5 + 344) = a5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 24);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TwoStageSpeculativeDecoder.BufferedToken(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    return (*(unsigned __int8 *)(a2 + 24) ^ *(unsigned __int8 *)(a1 + 24) ^ 1) & 1;
  }
  else
  {
    return 0;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t TwoStageSpeculativeDecoder.generateDraftTokens()()
{
  *(void *)(v1 + 776) = v0;
  return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.generateDraftTokens(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v1 = v0[97];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  *(void *)(inited + 32) = *(void *)(v1 + 104);
  uint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v0[98] = v3;
  swift_setDeallocating();
  v0[95] = v3;
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 25));
  Swift::UInt8 v4 = v0[28];
  uint64_t v5 = v0[29];
  __swift_project_boxed_opaque_existential_1(v0 + 25, v4);
  uint64_t v6 = swift_allocObject();
  v0[99] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_25FB61DF0;
  *(void *)(v6 + 32) = *(void *)(v1 + 56);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 232, (uint64_t)(v0 + 30));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[100] = v7;
  *uint64_t v7 = v0;
  v7[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v6, (uint64_t)(v0 + 30), v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68[3];
  uint64_t v69;
  uint64_t v70;

  uint64_t v69 = v0;
  _OWORD v68[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 808);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 280);
  }
  else
  {
    *(void *)(v0 + 312) = 0;
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 304)) {
LABEL_51:
  }
    __break(1u);
  Swift::UInt v2 = *(void *)(v0 + 816);
  uint64_t v3 = *(void **)(v0 + 776);
  outlined init with take of LogitCollection((long long *)(v0 + 280), v0 + 360);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  Swift::UInt8 v4 = v3[7];
  uint64_t v5 = v3[13];
  uint64_t v6 = *(void *)(v0 + 392);
  os_log_type_t v66 = v0 + 360;
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 360), *(void *)(v0 + 384));
  *(void *)(v0 + 824) = v3[16];
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 40))();
  swift_retain();
  os_log_type_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v7, v3, v5, v4);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 736) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = specialized _copyCollectionToContiguousArray<A>(_:)(v39);
    swift_bridgeObjectRelease();
    v68[0] = (uint64_t)v40;
    specialized MutableCollection<>.sort(by:)(v68);
    if (!v2)
    {
      swift_bridgeObjectRelease();
      unint64_t v38 = v68[0];
      __swift_destroy_boxed_opaque_existential_1(v66);
      swift_bridgeObjectRelease();
      uint64_t v35 = MEMORY[0x263F8EE78];
      goto LABEL_41;
    }
    return swift_release();
  }
  unint64_t v65 = v2;
  uint64_t v63 = (uint64_t *)(v0 + 680);
  char v67 = (uint64_t *)(v0 + 704);
  char v64 = v0 + 776;
  v68[0] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  char v10 = v68[0];
  uint64_t v11 = *(void *)(v68[0] + 16);
  uint64_t v12 = 32;
  do
  {
    uint64_t v13 = *(void *)(v8 + v12);
    v68[0] = v10;
    uint64_t v14 = *(void *)(v10 + 24);
    if (v11 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v11 + 1, 1);
      char v10 = v68[0];
    }
    *(void *)(v10 + 16) = v11 + 1;
    *(void *)(v10 + 8 * v11 + 32) = v13;
    v12 += 24;
    ++v11;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v10 + 16);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)(v10 + 32);
    do
    {
      uint64_t v17 = *v16++;
      specialized Set._Variant.insert(_:)(v68, v17);
      --v15;
    }
    while (v15);
  }
  swift_release();
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  *(void *)(v0 + 832) = __swift_project_value_buffer(v18, (uint64_t)static Log.device);
  uint64_t v19 = Logger.logObject.getter();
  uint64_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    char v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v21 = 134217984;
    swift_beginAccess();
    *(void *)(v0 + 768) = *(void *)(*(void *)(v0 + 736) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25FA51000, v19, v20, "Tree layer 0 speculated %ld tokens", v21, 0xCu);
    MEMORY[0x261206F80](v21, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 840) = inited;
  *(_OWORD *)(inited + 16) = xmmword_25FB61DF0;
  swift_beginAccess();
  char v23 = *(void *)(v0 + 736);
  char v24 = *(void *)(v23 + 16);
  char v25 = MEMORY[0x263F8EE78];
  if (v24)
  {
    v68[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for TokenTreeNode();
    int v26 = 48;
    do
    {
      uint64_t v27 = *(void *)(v23 + v26);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = v25;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v26 += 24;
      --v24;
    }
    while (v24);
    char v25 = v68[0];
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = *(void *)(v0 + 776);
  *(void *)(inited + 32) = v25;
  uint64_t v30 = *(void *)(v29 + 272);
  *(void *)(v0 + 848) = v30;
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v30 == 1)
  {
    uint64_t v31 = *(void *)(inited + 16);
    uint64_t v32 = *(void *)(*(void *)v64 + 296);
    uint64_t v33 = __OFADD__(v32, v31);
    uint64_t v34 = v32 + v31;
    if (!v33)
    {
      *(void *)(*(void *)v64 + 296) = v34;
      if (*(void *)(inited + 16))
      {
        uint64_t v35 = *(void *)(inited + 32);
        swift_bridgeObjectRetain();
        uint64_t v36 = swift_bridgeObjectRetain();
        unint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v36);
        swift_bridgeObjectRelease();
        v68[0] = (uint64_t)v37;
        specialized MutableCollection<>.sort(by:)(v68);
        if (!v65)
        {
          swift_bridgeObjectRelease();
          unint64_t v38 = v68[0];
          __swift_destroy_boxed_opaque_existential_1(v66);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_41:
          uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
          return v57(v35, v38);
        }
        return swift_release();
      }
      goto LABEL_50;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v0 + 864) = inited;
  *(void *)(v0 + 856) = 1;
  uint64_t v42 = *(void *)(v0 + 736);
  uint64_t v43 = *(void *)(v42 + 16);
  unint64_t v44 = MEMORY[0x263F8EE78];
  if (v43)
  {
    *char v67 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
    uint64_t v45 = (uint64_t *)(v0 + 704);
    unint64_t v44 = *v67;
    uint64_t v46 = *(void *)(*v67 + 16);
    char v47 = 40;
    do
    {
      uint64_t v48 = *(void *)(v42 + v47);
      *uint64_t v45 = v44;
      char v49 = *(void *)(v44 + 24);
      if (v46 >= v49 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v46 + 1, 1);
        uint64_t v45 = (uint64_t *)(v0 + 704);
        unint64_t v44 = *v67;
      }
      *(void *)(v44 + 16) = v46 + 1;
      *(void *)(v44 + 8 * v46 + 32) = v48;
      v47 += 24;
      ++v46;
      --v43;
    }
    while (v43);
    swift_bridgeObjectRelease();
    os_log_type_t v50 = *(void *)(v42 + 16);
    BOOL v51 = MEMORY[0x263F8EE78];
    if (v50)
    {
      uint64_t v52 = (void *)(v0 + 680);
      *uint64_t v63 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50, 0);
      BOOL v51 = *v63;
      uint64_t v53 = *(void *)(*v63 + 16);
      uint64_t v54 = 32;
      do
      {
        uint64_t v55 = *(void *)(v42 + v54);
        *uint64_t v52 = v51;
        unint64_t v56 = *(void *)(v51 + 24);
        if (v53 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v53 + 1, 1);
          uint64_t v52 = (void *)(v0 + 680);
          BOOL v51 = *v63;
        }
        *(void *)(v51 + 16) = v53 + 1;
        *(void *)(v51 + 8 * v53 + 32) = v55;
        v54 += 24;
        ++v53;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    BOOL v51 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 880) = v51;
  *(void *)(v0 + 872) = v44;
  unint64_t v58 = *(void *)(v0 + 776);
  unint64_t v59 = v58 + 232;
  outlined init with copy of DeterministicLanguageModelProtocol(v58 + 16, v0 + 440);
  uint64_t v60 = *(void *)(v0 + 464);
  unint64_t v61 = *(void *)(v0 + 472);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 440), v60);
  outlined init with copy of DeterministicLanguageModelProtocol(v59, v0 + 400);
  unint64_t v62 = (void *)swift_task_alloc();
  *(void *)(v0 + 888) = v62;
  *unint64_t v62 = v0;
  v62[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v44, v0 + 400, v60, v61);
}

{
  unint64_t v0;
  unint64_t *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t **v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  void *v58;
  void *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  void *v97;
  unint64_t v98;
  void *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  long long *v103;
  uint64_t v104;
  unint64_t **v105;
  _OWORD *v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  long long *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t *v122;
  void *v123;
  uint64_t *v124;
  uint64_t v125[4];
  unint64_t v126;
  uint64_t v127;

  uint64_t v126 = v0;
  uint64_t v1 = (unint64_t *)(v0 + 16);
  Swift::UInt v2 = (_OWORD *)(v0 + 64);
  v125[2] = *MEMORY[0x263EF8340];
  int v123 = (void *)(v0 + 480);
  uint64_t v116 = v0 + 672;
  uint64_t v100 = (uint64_t *)(v0 + 696);
  uint64_t v101 = (uint64_t *)(v0 + 704);
  uint64_t v3 = v0 + 720;
  char v97 = (void *)(v0 + 680);
  int v98 = v0 + 736;
  uint64_t v105 = (unint64_t **)(v0 + 744);
  char v122 = (uint64_t *)(v0 + 752);
  uint64_t v124 = (uint64_t *)(v0 + 760);
  Swift::UInt8 v4 = *(void *)(v0 + 896);
  uint64_t v5 = *(void *)(v0 + 880);
  uint64_t v6 = *(void *)(v0 + 872);
  uint64_t v7 = *(void *)(v0 + 864);
  os_log_type_t v8 = *(void *)(v0 + 856);
  int v99 = (void *)(v0 + 440);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 672) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 664) = v9;
  char v117 = v4;
  uint64_t v104 = v4 + 32;
  uint64_t v112 = v5;
  char v113 = v6;
  uint64_t v110 = v5 + 32;
  uint64_t v111 = v6 + 32;
  char v109 = v8 - 1;
  int v115 = v7;
  uint64_t v108 = v7 + 32;
  char v10 = 0;
  uint64_t v11 = *(void **)(v0 + 904);
  char v102 = v0 + 72;
  char v103 = (long long *)(v0 + 120);
  char v114 = (long long *)(v0 + 24);
  uint64_t v120 = (void *)v0;
  char v106 = (_OWORD *)(v0 + 64);
  uint64_t v107 = (unint64_t *)(v0 + 16);
  while (1)
  {
    uint64_t v12 = *(void *)(v117 + 16);
    if (v10 == v12)
    {
      v2[1] = 0u;
      v2[2] = 0u;
      void *v2 = 0u;
    }
    else
    {
      if (v10 >= v12) {
        goto LABEL_89;
      }
      os_log_type_t v8 = v10 + 1;
      outlined init with copy of DeterministicLanguageModelProtocol(v104 + 40 * v10, (uint64_t)v103);
      *(void *)Swift::UInt v2 = v10;
      outlined init with take of LogitCollection(v103, v102);
      ++v10;
    }
    outlined init with take of (offset: Int, element: LogitCollection)?((uint64_t)v2, (uint64_t)v1);
    if (!*(void *)(v0 + 48)) {
      break;
    }
    uint64_t v13 = *v1;
    outlined init with take of LogitCollection(v114, (uint64_t)v123);
    if ((v13 & 0x8000000000000000) != 0) {
      goto LABEL_84;
    }
    if (v13 >= *(void *)(v113 + 16))
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      if (v3 < 0) {
        uint64_t v0 = v3;
      }
      else {
        uint64_t v0 = v3 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v87) {
        goto LABEL_94;
      }
LABEL_61:
      unint64_t v58 = (void *)v120[108];
      uint64_t v0 = *(void *)(v115 + 16);
      os_log_type_t v8 = v58[3];
      uint64_t v1 = (unint64_t *)(v0 + 1);
      swift_bridgeObjectRetain();
      if (v0 < v8 >> 1) {
        goto LABEL_62;
      }
      goto LABEL_106;
    }
    if (v13 >= *(void *)(v112 + 16)) {
      goto LABEL_86;
    }
    uint64_t v118 = v10;
    uint64_t v14 = *(void *)(v0 + 824);
    uint64_t v15 = *(void **)(v0 + 776);
    uint64_t v16 = *(void *)(v111 + 8 * v13);
    uint64_t v17 = *(void *)(v110 + 8 * v13);
    uint64_t v19 = *(void *)(v0 + 504);
    uint64_t v18 = *(void *)(v0 + 512);
    __swift_project_boxed_opaque_existential_1(v123, v19);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(v14, v19, v18);
    swift_retain();
    char v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v20, v15, v17, v16);
    char v121 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    int v22 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v22);
    char v23 = *(void *)(v21 + 16);
    char v119 = v21;
    if (v23)
    {
      uint64_t v11 = (void *)v13;
      char v24 = (unint64_t *)MEMORY[0x263F8EE78];
      *(void *)uint64_t v3 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      char v25 = (uint64_t *)(v21 + 48);
      int v26 = v23;
      do
      {
        uint64_t v27 = *v25;
        v25 += 3;
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v27;
        *(void *)(v28 + 24) = v24;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v26;
      }
      while (v26);
      uint64_t v29 = *(void *)v3;
      uint64_t v1 = v24;
      uint64_t v13 = (unint64_t)v11;
    }
    else
    {
      uint64_t v1 = (unint64_t *)MEMORY[0x263F8EE78];
      uint64_t v29 = MEMORY[0x263F8EE78];
    }
    uint64_t v30 = v120[107];
    os_log_type_t v8 = v116;
    swift_beginAccess();
    uint64_t v31 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v31);
    swift_endAccess();
    if (v30 > *(void *)(v115 + 16)) {
      goto LABEL_87;
    }
    uint64_t v32 = *(void *)(v108 + 8 * v109);
    if ((v32 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x261205930](v13, v32);
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((int64_t)v13 >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_88;
      }
      uint64_t v33 = *(void *)(v32 + 8 * v13 + 32);
      swift_retain();
    }
    swift_beginAccess();
    *(void *)(v33 + 24) = v29;
    swift_bridgeObjectRelease();
    swift_release();
    if (v23)
    {
      uint64_t v34 = v105;
      *uint64_t v105 = v1;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      uint64_t v35 = *v105;
      uint64_t v36 = (*v105)[2];
      unint64_t v37 = 32;
      uint64_t v11 = v121;
      do
      {
        unint64_t v38 = *(void *)(v119 + v37);
        *uint64_t v34 = v35;
        uint64_t v39 = v35[3];
        if (v36 >= v39 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v36 + 1, 1);
          uint64_t v34 = v105;
          uint64_t v35 = *v105;
        }
        v35[2] = v36 + 1;
        v35[v36 + 4] = v38;
        v37 += 24;
        ++v36;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v35 = v1;
      uint64_t v11 = v121;
    }
    uint64_t v40 = v35[2];
    os_log_type_t v8 = -1;
    if (v40)
    {
      unint64_t v41 = 0;
      uint64_t v11 = v35 + 4;
      uint64_t v42 = *v124;
      while (1)
      {
        uint64_t v43 = v42 + 56;
        while (1)
        {
          uint64_t v1 = (unint64_t *)v11[v41++];
          unint64_t v44 = static Hasher._hash(seed:_:)();
          uint64_t v45 = -1 << *(unsigned char *)(v42 + 32);
          uint64_t v46 = v44 & ~v45;
          if (((*(void *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
            break;
          }
          char v47 = *(void *)(v42 + 48);
          if (*(unint64_t **)(v47 + 8 * v46) != v1)
          {
            uint64_t v48 = ~v45;
            do
            {
              uint64_t v46 = (v46 + 1) & v48;
              if (((*(void *)(v43 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
                goto LABEL_38;
              }
            }
            while (*(unint64_t **)(v47 + 8 * v46) != v1);
          }
          if (v41 == v40) {
            goto LABEL_2;
          }
        }
LABEL_38:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *char v122 = v42;
        void *v124 = 0x8000000000000000;
        if (*(void *)(v42 + 24) <= *(void *)(v42 + 16))
        {
          if (isUniquelyReferenced_nonNull_native) {
            specialized _NativeSet.resize(capacity:)();
          }
          else {
            specialized _NativeSet.copyAndResize(capacity:)();
          }
          uint64_t v42 = *v122;
          os_log_type_t v50 = static Hasher._hash(seed:_:)();
          os_log_type_t v8 = -1;
          BOOL v51 = -1 << *(unsigned char *)(v42 + 32);
          uint64_t v46 = v50 & ~v51;
          if ((*(void *)(v42 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46))
          {
            uint64_t v52 = *(void *)(v42 + 48);
            if (*(unint64_t **)(v52 + 8 * v46) == v1)
            {
LABEL_56:
              return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            uint64_t v53 = ~v51;
            while (1)
            {
              uint64_t v46 = (v46 + 1) & v53;
              if (((*(void *)(v42 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
                break;
              }
              if (*(unint64_t **)(v52 + 8 * v46) == v1) {
                goto LABEL_56;
              }
            }
          }
        }
        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeSet.copy()();
            uint64_t v42 = *v122;
          }
          os_log_type_t v8 = -1;
        }
        *(void *)(v42 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v46;
        *(void *)(*(void *)(v42 + 48) + 8 * v46) = v1;
        uint64_t v54 = *(void *)(v42 + 16);
        uint64_t v55 = __OFADD__(v54, 1);
        unint64_t v56 = v54 + 1;
        if (v55)
        {
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        *(void *)(v42 + 16) = v56;
        void *v124 = v42;
        swift_bridgeObjectRelease();
        if (v41 == v40)
        {
LABEL_2:
          swift_bridgeObjectRelease();
          uint64_t v11 = v121;
          goto LABEL_3;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
    uint64_t v0 = (unint64_t)v120;
    Swift::UInt v2 = v106;
    uint64_t v1 = v107;
    char v10 = v118;
  }
  os_log_type_t v8 = *(void *)(v0 + 880);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 672);
  if ((unint64_t)v3 >> 62) {
    goto LABEL_90;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_61;
  }
LABEL_94:
  unint64_t v59 = v120;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v58 = (void *)v120[108];
  do
  {
    char v88 = v59[97];
    char v89 = v58[2];
    int v90 = *(void *)(v88 + 296);
    uint64_t v55 = __OFADD__(v90, v89);
    int v91 = v90 + v89;
    if (v55)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v88 + 296) = v91;
      if (v58[2])
      {
        char v92 = v58[4];
        swift_bridgeObjectRetain();
        char v93 = swift_bridgeObjectRetain();
        char v94 = specialized _copyCollectionToContiguousArray<A>(_:)(v93);
        swift_bridgeObjectRelease();
        v125[0] = (uint64_t)v94;
        specialized MutableCollection<>.sort(by:)(v125);
        if (v11)
        {
          return swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          char v95 = v125[0];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)(v120 + 45));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v96 = (uint64_t (*)(uint64_t, uint64_t))v120[1];
          return v96(v92, v95);
        }
      }
    }
    __break(1u);
LABEL_106:
    unint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), (int64_t)v1, 1, v58);
LABEL_62:
    unint64_t v59 = v120;
    v58[2] = v1;
    v58[v0 + 4] = v3;
    uint64_t v1 = (unint64_t *)v120[83];
    v120[92] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v60 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, (os_log_type_t)v3))
    {
      unint64_t v61 = v120[107];
      unint64_t v62 = swift_slowAlloc();
      *(_DWORD *)unint64_t v62 = 134218240;
      v120[86] = v61;
      uint64_t v63 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2048;
      char v64 = v120[84];
      if (v64 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v63 = v100;
        unint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      *uint64_t v63 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v60, (os_log_type_t)v3, "Tree layer %ld speculated %ld tokens", (uint8_t *)v62, 0x16u);
      MEMORY[0x261206F80](v62, -1, -1);
      unint64_t v59 = v120;
    }

    swift_bridgeObjectRelease();
    os_log_type_t v8 = v59[106];
    uint64_t v0 = v59[107] + 1;
    swift_bridgeObjectRelease();
  }
  while (v0 == v8);
  os_log_type_t v66 = v59[107] + 1;
  v59[108] = v58;
  v59[107] = v66;
  if (v66 == v59[106]) {
    __break(1u);
  }
  char v67 = *(void *)v98;
  uint64_t v68 = *(void *)(*(void *)v98 + 16);
  uint64_t v69 = MEMORY[0x263F8EE78];
  if (v68)
  {
    *uint64_t v101 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68, 0);
    uint64_t v70 = v101;
    uint64_t v69 = *v101;
    char v71 = *(void *)(*v101 + 16);
    uint64_t v72 = 40;
    do
    {
      uint64_t v73 = *(void *)(v67 + v72);
      *uint64_t v70 = v69;
      uint64_t v74 = *(void *)(v69 + 24);
      if (v71 >= v74 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v71 + 1, 1);
        uint64_t v70 = v101;
        uint64_t v69 = *v101;
      }
      *(void *)(v69 + 16) = v71 + 1;
      *(void *)(v69 + 8 * v71 + 32) = v73;
      v72 += 24;
      ++v71;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease();
    TokenGenerationInference::SamplingDecoderPrompt v75 = *(void *)(v67 + 16);
    char v76 = MEMORY[0x263F8EE78];
    if (v75)
    {
      uint64_t v77 = v97;
      *char v97 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75, 0);
      char v76 = *v97;
      int v78 = *(void *)(*v97 + 16);
      char v79 = 32;
      do
      {
        char v80 = *(void *)(v67 + v79);
        *uint64_t v77 = v76;
        char v81 = *(void *)(v76 + 24);
        if (v78 >= v81 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v78 + 1, 1);
          uint64_t v77 = v97;
          char v76 = *v97;
        }
        *(void *)(v76 + 16) = v78 + 1;
        *(void *)(v76 + 8 * v78 + 32) = v80;
        v79 += 24;
        ++v78;
        --v75;
      }
      while (v75);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v76 = MEMORY[0x263F8EE78];
  }
  v120[110] = v76;
  v120[109] = v69;
  int v82 = v120[97];
  char v83 = v82 + 232;
  outlined init with copy of DeterministicLanguageModelProtocol(v82 + 16, (uint64_t)v99);
  char v84 = v120[58];
  uint64_t v85 = v120[59];
  __swift_project_boxed_opaque_existential_1(v99, v84);
  outlined init with copy of DeterministicLanguageModelProtocol(v83, (uint64_t)(v120 + 50));
  uint64_t v86 = (void *)swift_task_alloc();
  v120[111] = v86;
  void *v86 = v120;
  v86[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v69, (uint64_t)(v120 + 50), v84, v85);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 360);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TwoStageSpeculativeDecoder.generateDraftTokens()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 808) = a1;
  *(void *)(v3 + 816) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    Swift::UInt8 v4 = TwoStageSpeculativeDecoder.generateDraftTokens();
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 240);
    swift_bridgeObjectRelease();
    Swift::UInt8 v4 = TwoStageSpeculativeDecoder.generateDraftTokens();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 896) = a1;
  *(void *)(v3 + 904) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of LogitPresampler?(v3 + 400);
    swift_bridgeObjectRelease();
    Swift::UInt8 v4 = TwoStageSpeculativeDecoder.generateDraftTokens();
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 400);
    Swift::UInt8 v4 = TwoStageSpeculativeDecoder.generateDraftTokens();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)(uint64_t a1, uint64_t a2)
{
  v3[77] = v2;
  v3[76] = a2;
  v3[75] = a1;
  return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:), 0, 0);
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  uint64_t v2 = v0;
  uint64_t v112 = v0 + 74;
  char v113 = v0 + 67;
  uint64_t v3 = v0[77];
  uint64_t v4 = v0[76];
  uint64_t v5 = *(void *)(v3 + 104);
  uint64_t v6 = *(void **)(v3 + 56);
  v0[67] = 0;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  unint64_t v7 = v0[75];
  uint64_t v118 = v0;
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = (uint64_t)(v0 + 12);
    uint64_t v116 = v2 + 32;
    char v117 = (long long *)(v2 + 17);
    uint64_t v115 = (uint64_t)(v2 + 12);
    while (1)
    {
      v2[80] = v7;
      v2[79] = v6;
      v2[78] = v5;
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v12 & 1) == 0) {
        goto LABEL_65;
      }
      uint64_t v13 = v2[77];
      outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(v2[76] + 56) + 40 * v11, (uint64_t)v117);
      outlined init with take of LogitCollection(v117, v8);
      uint64_t v14 = v2[77];
      if (*(unsigned char *)(v13 + 140))
      {
        if (*(unsigned char *)(v14 + 141) == 1)
        {
          outlined init with copy of DeterministicLanguageModelProtocol(v14 + 16, (uint64_t)(v2 + 22));
          uint64_t v105 = v2[25];
          uint64_t v106 = v2[26];
          __swift_project_boxed_opaque_existential_1(v2 + 22, v105);
          *((_OWORD *)v2 + 2) = 0u;
          v2[6] = 0;
          *((_OWORD *)v2 + 1) = 0u;
          uint64_t v107 = (void *)swift_task_alloc();
          v2[81] = v107;
          *uint64_t v107 = v2;
          v107[1] = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
          return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)((uint64_t)(v2 + 7), (uint64_t)v6, (uint64_t)(v2 + 2), 0, v105, v106);
        }
        uint64_t v15 = *(void *)(v14 + 176);
        uint64_t v16 = *(void *)(v14 + 184);
        __swift_project_boxed_opaque_existential_1((void *)(v14 + 152), v15);
        uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 8))(v8, v15, v16);
      }
      else
      {
        float v17 = *(float *)(v13 + 136);
        outlined init with copy of DeterministicLanguageModelProtocol(v14 + 152, (uint64_t)v116);
        uint64_t v19 = v2[35];
        uint64_t v18 = v2[36];
        uint64_t v6 = __swift_project_boxed_opaque_existential_1(v116, v19);
        if (v7 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v20 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        char v21 = v112;
        uint64_t v119 = v19;
        uint64_t v114 = v18;
        if (v20)
        {
          *uint64_t v112 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
          if (v20 < 0) {
            goto LABEL_102;
          }
          uint64_t v22 = *v112;
          if ((v7 & 0xC000000000000001) != 0)
          {
            for (uint64_t i = 0; i != v20; ++i)
            {
              uint64_t v24 = *(void *)(MEMORY[0x261205930](i, v7) + 16);
              swift_unknownObjectRelease();
              *char v21 = v22;
              unint64_t v26 = *(void *)(v22 + 16);
              unint64_t v25 = *(void *)(v22 + 24);
              if (v26 >= v25 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
                char v21 = v112;
                uint64_t v22 = *v112;
              }
              *(void *)(v22 + 16) = v26 + 1;
              *(void *)(v22 + 8 * v26 + 32) = v24;
            }
          }
          else
          {
            uint64_t v27 = 0;
            unint64_t v28 = *(void *)(v22 + 16);
            do
            {
              uint64_t v29 = *(void *)(*(void *)(v7 + 8 * v27 + 32) + 16);
              *char v21 = v22;
              unint64_t v30 = *(void *)(v22 + 24);
              if (v28 >= v30 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v28 + 1, 1);
                char v21 = v112;
                uint64_t v22 = *v112;
              }
              ++v27;
              *(void *)(v22 + 16) = v28 + 1;
              *(void *)(v22 + 8 * v28++ + 32) = v29;
            }
            while (v20 != v27);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = MEMORY[0x263F8EE78];
        }
        uint64_t v31 = Set.init(minimumCapacity:)();
        uint64_t v32 = *(void *)(v22 + 16);
        if (v32)
        {
          uint64_t v33 = 0;
          do
          {
            uint64_t v35 = v31 + 56;
            while (1)
            {
              uint64_t v36 = *(void *)(v22 + 32 + 8 * v33++);
              uint64_t v37 = static Hasher._hash(seed:_:)();
              uint64_t v38 = -1 << *(unsigned char *)(v31 + 32);
              unint64_t v39 = v37 & ~v38;
              if (((*(void *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
                break;
              }
              uint64_t v40 = *(void *)(v31 + 48);
              if (*(void *)(v40 + 8 * v39) != v36)
              {
                uint64_t v41 = ~v38;
                do
                {
                  unint64_t v39 = (v39 + 1) & v41;
                  if (((*(void *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
                    goto LABEL_27;
                  }
                }
                while (*(void *)(v40 + 8 * v39) != v36);
              }
              if (v33 == v32) {
                goto LABEL_36;
              }
            }
LABEL_27:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeSet.insertNew(_:at:isUnique:)(v36, v39, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
          }
          while (v33 != v32);
        }
LABEL_36:
        swift_bridgeObjectRelease();
        uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v114 + 16))(v8, v31, v119, v17);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
        uint64_t v2 = v118;
      }
      unint64_t v120 = v2[80];
      uint64_t v42 = v2[79];
      uint64_t v43 = v2[78];
      unint64_t v44 = (void *)v2[77];
      swift_beginAccess();
      uint64_t v45 = v44[11];
      uint64_t v46 = v44[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v44 + 8), v45);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v46 + 16))(v43, v1, 0, v45, v46);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v47 = v44[5];
      uint64_t v48 = v44[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v44 + 2), v47);
      uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v48 + 16))(v42, v1, 0, v47, v48);
      swift_endAccess();
      if (v120 >> 62)
      {
        uint64_t v2 = v118;
        swift_bridgeObjectRetain();
        uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_83:
          uint64_t v97 = v2[77];
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v77 = *(void **)(v97 + 280);
          char v98 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v97 + 280) = v77;
          if (v98) {
            goto LABEL_84;
          }
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v49 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v2 = v118;
        if (!v49) {
          goto LABEL_83;
        }
      }
      if ((v7 & 0xC000000000000001) != 0) {
        break;
      }
      uint64_t v54 = 4;
      do
      {
        uint64_t v55 = v54 - 3;
        if (__OFADD__(v54 - 4, 1)) {
          goto LABEL_100;
        }
        uint64_t v53 = *(void *)(v2[80] + 8 * v54);
        if (*(void *)(v53 + 16) == v1)
        {
          swift_retain();
          swift_bridgeObjectRelease();
LABEL_57:
          if (!__OFADD__(*v113, 1))
          {
            uint64_t v62 = v2[77];
            v2[67] = *v113 + 1;
            swift_beginAccess();
            unint64_t v7 = *(void *)(v53 + 24);
            swift_beginAccess();
            uint64_t v63 = *(void **)(v62 + 280);
            swift_bridgeObjectRetain();
            char v64 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v62 + 280) = v63;
            if ((v64 & 1) == 0)
            {
              uint64_t v68 = v2[77];
              uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
              *(void *)(v68 + 280) = v63;
            }
            unint64_t v66 = v63[2];
            unint64_t v65 = v63[3];
            uint64_t v8 = v115;
            if (v66 >= v65 >> 1)
            {
              uint64_t v67 = v2[77];
              uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v63);
              *(void *)(v67 + 280) = v63;
              uint64_t v8 = v115;
            }
            void v63[2] = v66 + 1;
            uint64_t v9 = &v63[4 * v66];
            v9[4] = v5;
            v9[5] = v6;
            v9[6] = v1;
            *((unsigned char *)v9 + 56) = 0;
            swift_endAccess();
            swift_release();
            goto LABEL_4;
          }
          goto LABEL_101;
        }
        ++v54;
      }
      while (v55 != v49);
      swift_bridgeObjectRelease();
LABEL_50:
      uint64_t v56 = v2[77];
      swift_beginAccess();
      uint64_t v57 = *(void **)(v56 + 280);
      char v58 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v56 + 280) = v57;
      if ((v58 & 1) == 0)
      {
        uint64_t v69 = v2[77];
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        *(void *)(v69 + 280) = v57;
      }
      unint64_t v60 = v57[2];
      unint64_t v59 = v57[3];
      uint64_t v8 = v115;
      if (v60 >= v59 >> 1)
      {
        uint64_t v70 = v2[77];
        uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v57);
        *(void *)(v70 + 280) = v57;
        uint64_t v8 = v115;
      }
      v57[2] = v60 + 1;
      unint64_t v61 = &v57[4 * v60];
      v61[4] = v5;
      v61[5] = v6;
      v61[6] = v1;
      *((unsigned char *)v61 + 56) = 1;
      swift_endAccess();
      unint64_t v7 = MEMORY[0x263F8EE78];
LABEL_4:
      uint64_t v10 = v2[76];
      __swift_destroy_boxed_opaque_existential_1(v8);
      if (!*(void *)(v10 + 16)) {
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = 0;
    while (1)
    {
      uint64_t v51 = MEMORY[0x261205930](v50, v2[80]);
      uint64_t v52 = v50 + 1;
      if (__OFADD__(v50, 1)) {
        break;
      }
      uint64_t v53 = v51;
      if (*(void *)(v51 + 16) == v1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }
      swift_unknownObjectRelease();
      ++v50;
      if (v52 == v49)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
LABEL_65:
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v71 = v2[77];
    uint64_t v72 = v2[67];
    uint64_t v73 = *(void *)(v71 + 288);
    BOOL v74 = __OFADD__(v73, v72);
    uint64_t v75 = v73 + v72;
    if (v74)
    {
LABEL_103:
      __break(1u);
    }
    else
    {
      *(void *)(v71 + 288) = v75;
      if (one-time initialization token for device == -1) {
        goto LABEL_68;
      }
    }
    swift_once();
LABEL_68:
    char v121 = v2 + 70;
    uint64_t v76 = type metadata accessor for Logger();
    uint64_t v77 = (void *)__swift_project_value_buffer(v76, (uint64_t)static Log.device);
    uint64_t v78 = v2[67];
    swift_retain();
    char v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.debug.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v5 = v2[77];
    if (v81)
    {
      uint64_t v6 = v118 + 69;
      uint64_t v1 = swift_slowAlloc();
      *(_DWORD *)uint64_t v1 = 134218240;
      swift_beginAccess();
      v118[69] = *(void *)(*(void *)(v5 + 280) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v1 + 12) = 2048;
      v118[68] = v78;
      uint64_t v2 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v79, v80, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v1, 0x16u);
      MEMORY[0x261206F80](v1, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_beginAccess();
    if ((uint64_t)*v113 < 1) {
      goto LABEL_74;
    }
    uint64_t v82 = v2[77];
    uint64_t v83 = *(void *)(v82 + 328);
    BOOL v74 = __OFADD__(v83, 1);
    uint64_t v84 = v83 + 1;
    if (!v74) {
      break;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    uint64_t v110 = v2[77];
    uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
    *(void *)(v110 + 280) = v77;
LABEL_84:
    unint64_t v100 = v77[2];
    unint64_t v99 = v77[3];
    uint64_t v101 = v115;
    if (v100 >= v99 >> 1)
    {
      uint64_t v111 = v2[77];
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v99 > 1), v100 + 1, 1, v77);
      *(void *)(v111 + 280) = v77;
      uint64_t v101 = v115;
    }
    void v77[2] = v100 + 1;
    char v102 = &v77[4 * v100];
    v102[4] = v5;
    v102[5] = v6;
    v102[6] = v1;
    *((unsigned char *)v102 + 56) = 1;
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1(v101);
  }
  *(void *)(v82 + 328) = v84;
LABEL_74:
  uint64_t v85 = v2[77];
  uint64_t v86 = *(void *)(v85 + 336);
  BOOL v74 = __OFADD__(v86, 1);
  uint64_t v87 = v86 + 1;
  if (v74)
  {
    __break(1u);
    goto LABEL_106;
  }
  *(void *)(v85 + 336) = v87;
  if (*(unsigned char *)(v85 + 120) == 1)
  {
    uint64_t v88 = v2[77];
    swift_beginAccess();
    unint64_t v89 = *(void *)(v88 + 272);
    int64_t v90 = *(void *)(*(void *)(v88 + 280) + 16);
    if ((uint64_t)v89 >= v90)
    {
      if (v89 == v90 || v89 < 2)
      {
        swift_retain();
        int v91 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v91, v103)) {
          goto LABEL_94;
        }
        uint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v104 = 134217984;
        v2[73] = *(void *)(v88 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v91, v103, "Keeping draftCount at %ld", v104, 0xCu);
        char v94 = v104;
      }
      else
      {
        *(void *)(v88 + 272) = v89 - 1;
        swift_retain();
        int v91 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v91, v95)) {
          goto LABEL_94;
        }
        char v96 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v96 = 134217984;
        v2[71] = *(void *)(v88 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v91, v95, "Adjusting draftCount down to %ld", v96, 0xCu);
        char v94 = v96;
      }
LABEL_90:
      MEMORY[0x261206F80](v94, -1, -1);
    }
    else
    {
      *(void *)(v88 + 272) = v89 + 1;
      swift_retain();
      int v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        char v93 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v93 = 134217984;
        *char v121 = *(void *)(v88 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_25FA51000, v91, v92, "Adjusting draftCount up to %ld", v93, 0xCu);
        char v94 = v93;
        goto LABEL_90;
      }
LABEL_94:
      swift_release();
    }
  }
  char v109 = (uint64_t (*)(void))v2[1];
  return v109();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 656) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  }
  else
  {
    uint64_t v3 = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t j;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t (*v124)(void);
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  long long *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;

  uint64_t v1 = v0 + 176;
  uint64_t v2 = v0 + 216;
  uint64_t v3 = *(void *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 616) + 152;
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  outlined init with copy of DeterministicLanguageModelProtocol(v4, v0 + 216);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 216), v6);
  if (v3 >> 62)
  {
LABEL_126:
    swift_bridgeObjectRetain();
    unint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    unint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = (uint64_t *)(v0 + 576);
  uint64_t v128 = (void *)v1;
  unint64_t v145 = v3;
  long long v137 = v6;
  int v139 = v2;
  char v136 = v5;
  if (v7)
  {
    *uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v9 = (void *)(v0 + 576);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      goto LABEL_130;
    }
    uint64_t v10 = *v8;
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        char v12 = *(void *)(MEMORY[0x261205930](i, *(void *)(v0 + 640)) + 16);
        swift_unknownObjectRelease();
        *(void *)(v0 + 576) = v10;
        uint64_t v14 = *(void *)(v10 + 16);
        uint64_t v13 = *(void *)(v10 + 24);
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v10 = *v8;
        }
        *(void *)(v10 + 16) = v14 + 1;
        *(void *)(v10 + 8 * v14 + 32) = v12;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 640) + 32;
      uint64_t v16 = *(void *)(v10 + 16);
      do
      {
        float v17 = *(void *)(*(void *)v15 + 16);
        *uint64_t v8 = v10;
        uint64_t v18 = *(void *)(v10 + 24);
        if (v16 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v16 + 1, 1);
          uint64_t v10 = *v8;
        }
        *(void *)(v10 + 16) = v16 + 1;
        *(void *)(v10 + 8 * v16 + 32) = v17;
        v15 += 8;
        ++v16;
        --v7;
      }
      while (v7);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  char v133 = v0 + 56;
  char v144 = v0 + 96;
  char v141 = (void *)(v0 + 256);
  char v142 = (long long *)(v0 + 136);
  uint64_t v19 = Set.init(minimumCapacity:)();
  uint64_t v20 = v19;
  char v21 = *(void *)(v10 + 16);
  if (v21)
  {
    uint64_t v22 = 0;
    char v23 = v19 + 56;
    while (1)
    {
      uint64_t v24 = *(void *)(v10 + 32 + 8 * v22++);
      unint64_t v25 = static Hasher._hash(seed:_:)();
      unint64_t v26 = -1 << *(unsigned char *)(v20 + 32);
      uint64_t v27 = v25 & ~v26;
      if (((*(void *)(v23 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v20 + 48);
      if (*(void *)(v28 + 8 * v27) == v24)
      {
LABEL_19:
        if (v22 == v21) {
          break;
        }
      }
      else
      {
        uint64_t v29 = ~v26;
        while (1)
        {
          uint64_t v27 = (v27 + 1) & v29;
          if (((*(void *)(v23 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
            break;
          }
          if (*(void *)(v28 + 8 * v27) == v24) {
            goto LABEL_19;
          }
        }
LABEL_26:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeSet.insertNew(_:at:isUnique:)(v24, v27, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        if (v22 == v21) {
          break;
        }
        char v23 = v20 + 56;
      }
    }
  }
  swift_bridgeObjectRelease();
  int v135 = (void *)(v0 + 536);
  uint64_t v130 = (void *)(v0 + 552);
  int v131 = (void *)(v0 + 544);
  char v132 = (void *)(v0 + 560);
  long long v129 = (void *)(v0 + 568);
  char v127 = (void *)(v0 + 584);
  char v134 = (uint64_t *)(v0 + 592);
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 24))(v144, v133, v20, v137);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v133);
  __swift_destroy_boxed_opaque_existential_1(v139);
  int v143 = v0;
  while (1)
  {
    uint64_t v31 = (void *)v0;
    uint64_t v32 = *(void *)(v0 + 640);
    uint64_t v33 = v31[79];
    uint64_t v34 = v31[78];
    uint64_t v35 = (void *)v31[77];
    swift_beginAccess();
    uint64_t v36 = v35[11];
    uint64_t v37 = v35[12];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v35 + 8), v36);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v37 + 16))(v34, v1, 0, v36, v37);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v38 = v35[5];
    uint64_t v6 = v35[6];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v35 + 2), v38);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v6 + 16))(v33, v1, 0, v38, v6);
    swift_endAccess();
    if (v32 >> 62)
    {
      uint64_t v0 = v143;
      unint64_t v39 = v145;
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v40)
      {
LABEL_90:
        int v91 = *(void *)(v0 + 616);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v9 = *(void **)(v91 + 280);
        os_log_type_t v92 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v91 + 280) = v9;
        if (v92) {
          goto LABEL_91;
        }
        goto LABEL_132;
      }
    }
    else
    {
      unint64_t v39 = v145;
      uint64_t v40 = *(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v0 = v143;
      if (!v40) {
        goto LABEL_90;
      }
    }
    uint64_t v5 = *(void *)(v0 + 640);
    if ((v39 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = 0;
      while (1)
      {
        uint64_t v42 = MEMORY[0x261205930](v41, *(void *)(v0 + 640));
        uint64_t v5 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          break;
        }
        uint64_t v43 = v42;
        if (*(void *)(v42 + 16) == v1)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_50;
        }
        swift_unknownObjectRelease();
        ++v41;
        if (v5 == v40)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_43;
        }
      }
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    unint64_t v44 = 4;
    do
    {
      uint64_t v45 = v44 - 3;
      if (__OFADD__(v44 - 4, 1)) {
        goto LABEL_123;
      }
      uint64_t v43 = *(void *)(v5 + 8 * v44);
      if (*(void *)(v43 + 16) == v1)
      {
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_50:
        if (!__OFADD__(*v135, 1))
        {
          uint64_t v54 = *(void *)(v0 + 616);
          *(void *)(v0 + 536) = *v135 + 1;
          swift_beginAccess();
          uint64_t v52 = *(void *)(v43 + 24);
          swift_beginAccess();
          uint64_t v55 = *(void **)(v54 + 280);
          swift_bridgeObjectRetain();
          uint64_t v56 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v54 + 280) = v55;
          if ((v56 & 1) == 0)
          {
            uint64_t v87 = *(void *)(v0 + 616);
            uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
            *(void *)(v87 + 280) = v55;
          }
          char v58 = v55[2];
          uint64_t v57 = v55[3];
          uint64_t v53 = v144;
          if (v58 >= v57 >> 1)
          {
            uint64_t v88 = *(void *)(v0 + 616);
            uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v55);
            *(void *)(v88 + 280) = v55;
            uint64_t v53 = v144;
          }
          v55[2] = v58 + 1;
          unint64_t v59 = &v55[4 * v58];
          v59[4] = v2;
          uint64_t v59[5] = v3;
          v59[6] = v1;
          *((unsigned char *)v59 + 56) = 0;
          swift_endAccess();
          swift_release();
          goto LABEL_56;
        }
        goto LABEL_124;
      }
      ++v44;
    }
    while (v45 != v40);
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v46 = *(void *)(v0 + 616);
    swift_beginAccess();
    uint64_t v47 = *(void **)(v46 + 280);
    uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v46 + 280) = v47;
    if ((v48 & 1) == 0)
    {
      unint64_t v89 = *(void *)(v0 + 616);
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      *(void *)(v89 + 280) = v47;
    }
    uint64_t v50 = v47[2];
    uint64_t v49 = v47[3];
    if (v50 >= v49 >> 1)
    {
      int64_t v90 = *(void *)(v0 + 616);
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v47);
      *(void *)(v90 + 280) = v47;
    }
    v47[2] = v50 + 1;
    uint64_t v51 = &v47[4 * v50];
    v51[4] = v2;
    v51[5] = v3;
    v51[6] = v1;
    *((unsigned char *)v51 + 56) = 1;
    swift_endAccess();
    uint64_t v52 = MEMORY[0x263F8EE78];
    uint64_t v53 = v144;
LABEL_56:
    unint64_t v60 = *(void *)(v0 + 608);
    __swift_destroy_boxed_opaque_existential_1(v53);
    unint64_t v145 = v52;
    if (!*(void *)(v60 + 16)) {
      break;
    }
    *(void *)(v0 + 640) = v52;
    *(void *)(v0 + 632) = v3;
    *(void *)(v0 + 624) = v2;
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
    if ((v62 & 1) == 0) {
      break;
    }
    uint64_t v63 = *(void *)(v0 + 616);
    outlined init with copy of DeterministicLanguageModelProtocol(*(void *)(*(void *)(v0 + 608) + 56) + 40 * v61, (uint64_t)v142);
    outlined init with take of LogitCollection(v142, v53);
    char v64 = *(void *)(v0 + 616);
    if (*(unsigned char *)(v63 + 140))
    {
      if (*(unsigned char *)(v64 + 141) == 1)
      {
        outlined init with copy of DeterministicLanguageModelProtocol(v64 + 16, (uint64_t)v128);
        char v121 = *(void *)(v0 + 200);
        unint64_t v120 = *(void *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1(v128, v121);
        *(_OWORD *)(v0 + 32) = 0u;
        *(void *)(v0 + 48) = 0;
        *(_OWORD *)(v0 + 16) = 0u;
        uint64_t v122 = (void *)swift_task_alloc();
        *(void *)(v0 + 648) = v122;
        *uint64_t v122 = v0;
        v122[1] = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
        return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v133, v3, v0 + 16, 0, v121, v120);
      }
      unint64_t v65 = *(void *)(v64 + 176);
      unint64_t v66 = *(void *)(v64 + 184);
      __swift_project_boxed_opaque_existential_1((void *)(v64 + 152), v65);
      uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 8))(v53, v65, v66);
    }
    else
    {
      uint64_t v67 = *(float *)(v63 + 136);
      outlined init with copy of DeterministicLanguageModelProtocol(v64 + 152, (uint64_t)v141);
      uint64_t v1 = *(void *)(v0 + 280);
      uint64_t v3 = *(void *)(v0 + 288);
      __swift_project_boxed_opaque_existential_1(v141, v1);
      if (v52 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v5 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v6 = MEMORY[0x263F8EE78];
      uint64_t v138 = v3;
      char v140 = v1;
      if (v5)
      {
        *char v134 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
        if (v5 < 0) {
          goto LABEL_125;
        }
        uint64_t v6 = *v134;
        if ((v52 & 0xC000000000000001) != 0)
        {
          for (uint64_t j = 0; j != v5; ++j)
          {
            uint64_t v69 = *(void *)(MEMORY[0x261205930](j, v52) + 16);
            swift_unknownObjectRelease();
            *char v134 = v6;
            uint64_t v71 = *(void *)(v6 + 16);
            uint64_t v70 = *(void *)(v6 + 24);
            if (v71 >= v70 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
              uint64_t v6 = *v134;
            }
            *(void *)(v6 + 16) = v71 + 1;
            *(void *)(v6 + 8 * v71 + 32) = v69;
          }
        }
        else
        {
          uint64_t v72 = 0;
          uint64_t v73 = *(void *)(v6 + 16);
          do
          {
            BOOL v74 = *(void *)(*(void *)(v52 + 8 * v72 + 32) + 16);
            *char v134 = v6;
            uint64_t v75 = *(void *)(v6 + 24);
            if (v73 >= v75 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v73 + 1, 1);
              uint64_t v6 = *v134;
            }
            ++v72;
            *(void *)(v6 + 16) = v73 + 1;
            *(void *)(v6 + 8 * v73++ + 32) = v74;
          }
          while (v5 != v72);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v76 = Set.init(minimumCapacity:)();
      uint64_t v77 = *(void *)(v6 + 16);
      if (v77)
      {
        uint64_t v78 = 0;
        do
        {
          os_log_type_t v80 = v76 + 56;
          while (1)
          {
            BOOL v81 = *(void *)(v6 + 32 + 8 * v78++);
            uint64_t v82 = static Hasher._hash(seed:_:)();
            uint64_t v83 = -1 << *(unsigned char *)(v76 + 32);
            uint64_t v84 = v82 & ~v83;
            if (((*(void *)(v80 + ((v84 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v84) & 1) == 0) {
              break;
            }
            uint64_t v85 = *(void *)(v76 + 48);
            if (*(void *)(v85 + 8 * v84) != v81)
            {
              uint64_t v86 = ~v83;
              do
              {
                uint64_t v84 = (v84 + 1) & v86;
                if (((*(void *)(v80 + ((v84 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v84) & 1) == 0) {
                  goto LABEL_77;
                }
              }
              while (*(void *)(v85 + 8 * v84) != v81);
            }
            if (v78 == v77) {
              goto LABEL_29;
            }
          }
LABEL_77:
          char v79 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v81, v84, v79);
          swift_bridgeObjectRelease();
        }
        while (v78 != v77);
      }
LABEL_29:
      swift_bridgeObjectRelease();
      uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v138 + 16))(v53, v76, v140, v67);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
    }
  }
  swift_bridgeObjectRelease();
  while (1)
  {
    char v96 = *(void *)(v0 + 616);
    uint64_t v97 = *(void *)(v0 + 536);
    char v98 = *(void *)(v96 + 288);
    unint64_t v99 = __OFADD__(v98, v97);
    unint64_t v100 = v98 + v97;
    if (v99)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v96 + 288) = v100;
      if (one-time initialization token for device == -1) {
        goto LABEL_96;
      }
    }
    swift_once();
LABEL_96:
    uint64_t v101 = type metadata accessor for Logger();
    uint64_t v9 = (void *)__swift_project_value_buffer(v101, (uint64_t)static Log.device);
    char v102 = *(void *)(v0 + 536);
    swift_retain();
    os_log_type_t v103 = Logger.logObject.getter();
    uint64_t v104 = static os_log_type_t.debug.getter();
    uint64_t v105 = os_log_type_enabled(v103, v104);
    uint64_t v3 = *(void *)(v0 + 616);
    if (v105)
    {
      uint64_t v106 = swift_slowAlloc();
      *(_DWORD *)uint64_t v106 = 134218240;
      swift_beginAccess();
      uint64_t v2 = (uint64_t)v130;
      *uint64_t v130 = *(void *)(*(void *)(v3 + 280) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v106 + 12) = 2048;
      uint8_t *v131 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25FA51000, v103, v104, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v106, 0x16u);
      MEMORY[0x261206F80](v106, -1, -1);
    }
    else
    {
      swift_release();
    }

    uint64_t v1 = (uint64_t)v135;
    swift_beginAccess();
    if ((uint64_t)*v135 >= 1)
    {
      uint64_t v107 = *(void *)(v0 + 616);
      uint64_t v108 = *(void *)(v107 + 328);
      unint64_t v99 = __OFADD__(v108, 1);
      char v109 = v108 + 1;
      if (v99) {
        goto LABEL_131;
      }
      *(void *)(v107 + 328) = v109;
    }
    uint64_t v110 = *(void *)(v0 + 616);
    uint64_t v111 = *(void *)(v110 + 336);
    unint64_t v99 = __OFADD__(v111, 1);
    uint64_t v112 = v111 + 1;
    if (!v99) {
      break;
    }
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    uint64_t v125 = *(void *)(v0 + 616);
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *(void *)(v125 + 280) = v9;
LABEL_91:
    char v94 = v9[2];
    char v93 = v9[3];
    if (v94 >= v93 >> 1)
    {
      uint64_t v126 = *(void *)(v0 + 616);
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v9);
      *(void *)(v126 + 280) = v9;
    }
    long long v9[2] = v94 + 1;
    os_log_type_t v95 = &v9[4 * v94];
    v95[4] = v2;
    v95[5] = v3;
    v95[6] = v1;
    *((unsigned char *)v95 + 56) = 1;
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1(v144);
  }
  *(void *)(v110 + 336) = v112;
  if (*(unsigned char *)(v110 + 120) == 1)
  {
    char v113 = *(void *)(v0 + 616);
    swift_beginAccess();
    uint64_t v114 = *(void *)(v113 + 272);
    uint64_t v115 = *(void *)(*(void *)(v113 + 280) + 16);
    if ((uint64_t)v114 >= v115)
    {
      if (v114 == v115 || v114 < 2)
      {
        swift_retain();
        uint64_t v116 = Logger.logObject.getter();
        char v117 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v116, v117)) {
          goto LABEL_117;
        }
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 134217984;
        *char v127 = *(void *)(v113 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v119 = "Keeping draftCount at %ld";
      }
      else
      {
        *(void *)(v113 + 272) = v114 - 1;
        swift_retain();
        uint64_t v116 = Logger.logObject.getter();
        char v117 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v116, v117)) {
          goto LABEL_117;
        }
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 134217984;
        *long long v129 = *(void *)(v113 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v119 = "Adjusting draftCount down to %ld";
      }
LABEL_116:
      _os_log_impl(&dword_25FA51000, v116, v117, v119, v118, 0xCu);
      MEMORY[0x261206F80](v118, -1, -1);
    }
    else
    {
      *(void *)(v113 + 272) = v114 + 1;
      swift_retain();
      uint64_t v116 = Logger.logObject.getter();
      char v117 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 134217984;
        *char v132 = *(void *)(v113 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        uint64_t v119 = "Adjusting draftCount up to %ld";
        goto LABEL_116;
      }
LABEL_117:
      swift_release();
    }
  }
  uint64_t v124 = *(uint64_t (**)(void))(v0 + 8);
  return v124();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall TwoStageSpeculativeDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)prompt.queryTokens._rawValue;
  uint64_t v4 = *((void *)prompt.queryTokens._rawValue + 1);
  uint64_t v5 = *((void *)prompt.queryTokens._rawValue + 2);
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(v4 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v9);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v23 + 16);
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_beginAccess();
    *(void *)(v2 + 280) = v6;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v2 + 104);
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    swift_beginAccess();
    uint64_t v13 = *(void *)(v2 + 88);
    uint64_t v14 = *(void *)(v2 + 96);
    __swift_mutable_project_boxed_opaque_existential_1(v2 + 64, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v14 + 48))(v12, &v20, v13, v14);
    swift_endAccess();
    *(void *)(v2 + 104) = v15;
    uint64_t v16 = *(void *)(v2 + 56);
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    swift_beginAccess();
    uint64_t v17 = *(void *)(v2 + 40);
    uint64_t v18 = *(void *)(v2 + 48);
    __swift_mutable_project_boxed_opaque_existential_1(v2 + 16, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, &v20, v17, v18);
    swift_endAccess();
    *(void *)(v2 + 56) = v19;
    *(unsigned char *)(v2 + 352) = 1;
  }
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()()
{
  *(void *)(v1 + 144) = v0;
  return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;

  uint64_t v1 = v0[18];
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 280) + 16))
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[19] = v4;
    *uint64_t v4 = v0;
    v4[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
    v4[97] = v0[18];
    return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.generateDraftTokens(), 0, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[18];
  swift_beginAccess();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 64, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 192, (uint64_t)(v0 + 7));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *uint64_t v4 = v0;
  v4[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  uint64_t v5 = v0[21];
  return DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(v5, (uint64_t)(v0 + 7), v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (*(void *)(v1 + 16) >= *(void *)(v2 + 16)) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = *(void *)(v1 + 16);
  }
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE80];
  }
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[21];
  uint64_t v12 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, v5, 1, &v12);
  if (v6)
  {
    return swift_unexpectedError();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v12;
    v0[25] = v12;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[26] = v10;
    *uint64_t v10 = v0;
    v10[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
    uint64_t v11 = v0[20];
    v10[77] = v0[18];
    v10[76] = v9;
    v10[75] = v11;
    return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  }
  else {
    uint64_t v2 = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[20] = a1;
  v4[21] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty(), 0, 0);
  }
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 56;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of LogitPresampler?(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:);
  }
  else
  {
    outlined destroy of LogitPresampler?(v3 + 56);
    uint64_t v5 = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t TwoStageSpeculativeDecoder.decodeNextChunk()()
{
  *(void *)(v1 + 568) = v0;
  return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 568);
  if (*(unsigned char *)(v1 + 352) == 1)
  {
    if (*(unsigned char *)(v1 + 142) == 1)
    {
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, v0 + 136);
      uint64_t v2 = *(void *)(v0 + 160);
      uint64_t v3 = *(void *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v2);
      uint64_t v4 = *(void *)(v1 + 56);
      *(_OWORD *)(v0 + 72) = 0u;
      *(void *)(v0 + 88) = 0;
      *(_OWORD *)(v0 + 56) = 0u;
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v5;
      *uint64_t v5 = v0;
      v5[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
      uint64_t v6 = v0 + 256;
      uint64_t v7 = v4;
      uint64_t v8 = v0 + 56;
      uint64_t v9 = v2;
      uint64_t v10 = v3;
    }
    else
    {
      swift_beginAccess();
      outlined init with copy of DeterministicLanguageModelProtocol(v1 + 64, v0 + 176);
      uint64_t v12 = *(void *)(v0 + 200);
      uint64_t v13 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v12);
      uint64_t v14 = *(void *)(v1 + 104);
      outlined init with copy of DeterministicLanguageModelProtocol(v1 + 192, v0 + 216);
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v15;
      *uint64_t v15 = v0;
      v15[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
      uint64_t v6 = v0 + 96;
      uint64_t v7 = v14;
      uint64_t v8 = v0 + 216;
      uint64_t v9 = v12;
      uint64_t v10 = v13;
    }
    return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v6, v7, v8, 0, v9, v10);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v11;
    *uint64_t v11 = v0;
    v11[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
    v11[18] = *(void *)(v0 + 568);
    return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty(), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 56;
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2);
  if (v0) {
    uint64_t v3 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  else {
    uint64_t v3 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  float v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL *v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;

  uint64_t v2 = *(void **)(v0 + 568);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[13];
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 288);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v5);
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v6 + 40))(v2[16], v5, v6);
  swift_retain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(v7, v2, v4, v3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2[43];
  if (v9)
  {
    if (*(void *)(v8 + 16))
    {
      uint64_t v10 = *(void *)(v8 + 48);
      swift_bridgeObjectRelease();
      if (v10 == v9)
      {
        uint64_t v11 = (BOOL *)(v0 + 644);
        uint64_t v12 = (uint64_t *)(v0 + 568);
        uint64_t v13 = *(void *)(v0 + 568);
        *(unsigned char *)(v13 + 320) = 1;
        *(unsigned char *)(v0 + 644) = 1;
        if (*(unsigned char *)(v13 + 148)) {
          goto LABEL_18;
        }
        uint64_t v14 = *(float *)(*(void *)(v0 + 568) + 144);
        uint64_t v15 = *(void *)(v0 + 280);
        uint64_t v16 = *(void *)(v0 + 288);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v15);
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 56))(v15, v16);
        swift_bridgeObjectRelease();
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v9 < *(void *)(v17 + 16))
        {
          uint64_t v4 = v17 + 32;
          uint64_t v1 = *(float *)(v17 + 32 + 4 * v9);
          *uint64_t v11 = v14 <= v1;
          if (one-time initialization token for device == -1)
          {
LABEL_8:
            uint64_t v18 = type metadata accessor for Logger();
            __swift_project_value_buffer(v18, (uint64_t)static Log.device);
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v19 = Logger.logObject.getter();
            uint64_t v20 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v19, v20))
            {
              uint64_t v21 = swift_slowAlloc();
              *(_DWORD *)uint64_t v21 = 67109632;
              *(_DWORD *)(v0 + 640) = v14 <= v1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v21 + 8) = 2048;
              *(double *)(v0 + 552) = *(float *)(v4 + 4 * v9);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_release();
              *(_WORD *)(v21 + 18) = 2048;
              *(double *)(v0 + 560) = v14;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_25FA51000, v19, v20, "shouldDoEarlyReturn: %{BOOL}d, Stop token probability: %f, Early return probability threshold: %f", (uint8_t *)v21, 0x1Cu);
              MEMORY[0x261206F80](v21, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_release();
            }

LABEL_18:
            swift_beginAccess();
            if (*v11)
            {
              uint64_t v27 = *v12;
              *(unsigned char *)(v27 + 321) = 1;
              unint64_t v28 = *(void *)(v27 + 304);
              uint64_t v29 = v28 + 1;
              if (__OFADD__(v28, 1))
              {
                __break(1u);
              }
              else
              {
                unint64_t v30 = *v12;
                *(void *)(v27 + 304) = v29;
                uint64_t v31 = *(void *)(v30 + 288);
                uint64_t v32 = v31 + 1;
                if (!__OFADD__(v31, 1))
                {
                  uint64_t v33 = *v12;
                  *(void *)(v30 + 288) = v32;
                  uint64_t v34 = *(void *)(v33 + 296);
                  uint64_t v35 = __OFADD__(v34, 1);
                  uint64_t v36 = v34 + 1;
                  if (!v35)
                  {
                    *(void *)(v33 + 296) = v36;
                    if (one-time initialization token for device == -1)
                    {
LABEL_23:
                      uint64_t v37 = type metadata accessor for Logger();
                      __swift_project_value_buffer(v37, (uint64_t)static Log.device);
                      uint64_t v38 = Logger.logObject.getter();
                      unint64_t v39 = static os_log_type_t.info.getter();
                      if (os_log_type_enabled(v38, v39))
                      {
                        uint64_t v40 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v40 = 0;
                        _os_log_impl(&dword_25FA51000, v38, v39, "Early return from draft model is triggered", v40, 2u);
                        MEMORY[0x261206F80](v40, -1, -1);
                      }

                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                      uint64_t v41 = swift_allocObject();
                      *(_OWORD *)(v41 + 16) = xmmword_25FB61DF0;
                      *(void *)(v41 + 32) = v9;
                      __swift_destroy_boxed_opaque_existential_1(v0 + 256);
                      uint64_t v42 = *(uint64_t (**)(uint64_t))(v0 + 8);
                      return v42(v41);
                    }
LABEL_37:
                    swift_once();
                    goto LABEL_23;
                  }
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
              }
              __break(1u);
              goto LABEL_36;
            }
            goto LABEL_28;
          }
LABEL_33:
          swift_once();
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_28:
    __swift_destroy_boxed_opaque_existential_1(v0 + 256);
    uint64_t v43 = *(void *)(v0 + 568);
    swift_beginAccess();
    outlined init with copy of DeterministicLanguageModelProtocol(v43 + 64, v0 + 176);
    unint64_t v44 = *(void *)(v0 + 200);
    uint64_t v45 = *(void *)(v0 + 208);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v44);
    uint64_t v46 = *(void *)(v43 + 104);
    outlined init with copy of DeterministicLanguageModelProtocol(v43 + 192, v0 + 216);
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v47;
    void *v47 = v0;
    v47[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
    return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 96, v46, v0 + 216, 0, v44, v45);
  }
  if (one-time initialization token for device != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.device);
  uint64_t v23 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl(&dword_25FA51000, v23, v24, "Stop token id cannot be 0 when earlyReturn in drafting behavior is set to true", v25, 2u);
    MEMORY[0x261206F80](v25, -1, -1);
  }

  return _assertionFailure(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)v1 + 216;
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2);
  if (v0) {
    uint64_t v3 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  else {
    uint64_t v3 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v1 = *(void **)(v0 + 568);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v2 = v1[22];
  uint64_t v3 = v1[23];
  __swift_project_boxed_opaque_existential_1(v1 + 19, v2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0 + 96, v2, v3);
  *(void *)(v0 + 608) = result;
  uint64_t v5 = v1[38];
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v0 + 568);
  v1[38] = v6;
  uint64_t v8 = *(void *)(v7 + 312);
  uint64_t v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void **)(v0 + 568);
  *(void *)(v7 + 312) = v10;
  uint64_t v13 = v12[13];
  swift_beginAccess();
  uint64_t v14 = v12[11];
  uint64_t v15 = v12[12];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v12 + 8), v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v15 + 16))(v13, v11, 0, v14, v15);
  swift_endAccess();
  v12[13] = v16;
  uint64_t v17 = v12[7];
  swift_beginAccess();
  uint64_t v18 = v12[5];
  uint64_t v19 = v12[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v12 + 2), v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v19 + 16))(v17, v11, 0, v18, v19);
  swift_endAccess();
  v12[7] = v20;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v12 + 2), v0 + 336);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 368);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 336), v21);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v23;
  *uint64_t v23 = v0;
  v23[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
  return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:isPrompt:)(v0 + 296, v20, v0 + 16, 0, v21, v22);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  *(void *)(*v1 + 624) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v3);
  if (v0)
  {
    uint64_t v4 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + 296);
    uint64_t v4 = TwoStageSpeculativeDecoder.decodeNextChunk();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = v0[76];
  uint64_t v2 = v0[71];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 42));
  *(unsigned char *)(v2 + 352) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_25FB61DF0;
  *(void *)(v3 + 32) = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = *(void *)(v0 + 568) + 280;
  swift_beginAccess();
  if (!*(void *)(*(void *)v1 + 16))
  {
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)v1;
  if (!*(void *)(*(void *)v1 + 16))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 48);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 56);
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  uint64_t result = swift_endAccess();
  uint64_t v9 = *(void *)(v4 + 304);
  uint64_t v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(void *)(v4 + 304) = v11;
  if (v8)
  {
    uint64_t v12 = *(void *)(v0 + 568);
    uint64_t v13 = *(void *)(v12 + 312);
    uint64_t v10 = __OFADD__(v13, 1);
    uint64_t v14 = v13 + 1;
    if (!v10)
    {
      *(void *)(v12 + 312) = v14;
      goto LABEL_7;
    }
LABEL_14:
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *(void *)(v0 + 568);
  *(void *)(v15 + 104) = v5;
  *(void *)(v15 + 56) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_25FB61DF0;
  *(void *)(v16 + 32) = v7;
LABEL_9:
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v17(v16);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double TwoStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 296);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 288) * 100.0) / (float)v1;
  return result;
}

uint64_t TwoStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  return 0x100000000;
}

double TwoStageSpeculativeDecoder.speculationSuccessRateInPercent.getter()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(v0 + 328) * 100.0) / (float)v1;
  return result;
}

uint64_t TwoStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t TwoStageSpeculativeDecoder.draftEmptyResponse.getter()
{
  return *(unsigned __int8 *)(v0 + 320);
}

uint64_t TwoStageSpeculativeDecoder.draftEarlyReturn.getter()
{
  return *(unsigned __int8 *)(v0 + 321);
}

uint64_t TwoStageSpeculativeDecoder.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TwoStageSpeculativeDecoder.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance TwoStageSpeculativeDecoder(TokenGenerationInference::SamplingDecoderPrompt a1@<0:X0, 8:X1, 16:X2>)
{
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TwoStageSpeculativeDecoder()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  v3[71] = v2;
  return MEMORY[0x270FA2498](TwoStageSpeculativeDecoder.decodeNextChunk(), 0, 0);
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance TwoStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 296);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(*(void *)v0 + 288) * 100.0) / (float)v1;
  return result;
}

double protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance TwoStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  if (v1 < 1) {
    return 0.0;
  }
  *(float *)&double result = (float)((float)*(uint64_t *)(*(void *)v0 + 328) * 100.0) / (float)v1;
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance TwoStageSpeculativeDecoder()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 304);
  uint64_t v2 = *(void *)(*(void *)v0 + 312);
  uint64_t result = v1 - v2;
  if (__OFSUB__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftEmptyResponse.getter in conformance TwoStageSpeculativeDecoder()
{
  return *(unsigned __int8 *)(*(void *)v0 + 320);
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftEarlyReturn.getter in conformance TwoStageSpeculativeDecoder()
{
  return *(unsigned __int8 *)(*(void *)v0 + 321);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          int64_t v90 = &v86[16 * v85 + 32];
          *(void *)int64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  os_log_type_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        unint64_t v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          uint64_t *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    unint64_t v30 = &v11[16 * v28 + 32];
    *(void *)unint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          unint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            unint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        BOOL v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  Swift::Int v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x261205930](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *Swift::Int v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    uint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      void *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[32 * a1 + 32];
    uint64_t v15 = &v4[32 * a2 + 32];
    if (a1 != a2 || result >= &v15[32 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 32 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      void *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[32 * a1 + 32];
    uint64_t v15 = &v4[32 * a2 + 32];
    uint64_t v16 = 32 * v14;
    if (32 * a1 != 32 * a2 || result >= &v15[v16]) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v17, v8);
    Swift::Int v18 = v17 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v18;
LABEL_21:
      void *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[40 * a1 + 32];
    uint64_t v15 = &v4[40 * a2 + 32];
    uint64_t v16 = 40 * v14;
    if (40 * a1 < 40 * a2 || (result < &v15[v16] ? (uint64_t v17 = a1 == a2) : (uint64_t v17 = 0), !v17)) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    Swift::Int v18 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v18, v8);
    Swift::Int v19 = v18 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v19;
LABEL_24:
      void *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_nTf4ngnn_n(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v23;
    uint64_t v8 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v9 = *v8;
      uint64_t v22 = v8 + 1;
      swift_beginAccess();
      uint64_t v10 = a2[11];
      uint64_t v11 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v11 + 16))(a3, v9, 0, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v13 = a2[5];
      uint64_t v14 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v14 + 16))(a4, v9, 0, v13, v14);
      swift_endAccess();
      unint64_t v17 = *(void *)(v23 + 16);
      unint64_t v16 = *(void *)(v23 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v23 + 16) = v17 + 1;
      Swift::Int v18 = (void *)(v23 + 24 * v17);
      v18[4] = v12;
      uint64_t v18[5] = v15;
      v18[6] = v9;
      --v4;
      uint64_t v8 = v22;
    }
    while (v4);
  }
  return v5;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x263F7FB20]);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(a4(0) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *int64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TwoStageSpeculativeDecoder()
{
  return self;
}

uint64_t method lookup function for TwoStageSpeculativeDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TwoStageSpeculativeDecoder);
}

uint64_t dispatch thunk of TwoStageSpeculativeDecoder.__allocating_init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t getEnumTagSinglePayload for TwoStageSpeculativeDecoder.BufferedToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TwoStageSpeculativeDecoder.BufferedToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TwoStageSpeculativeDecoder.BufferedToken()
{
  return &unk_270BD5858;
}

unint64_t lazy protocol witness table accessor for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  unint64_t result = lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken;
  if (!lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken);
  }
  return result;
}

void *type metadata accessor for TwoStageSpeculativeDecoder.TokenWithNodes()
{
  return &unk_270BD58D8;
}

unint64_t lazy protocol witness table accessor for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  unint64_t result = lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes;
  if (!lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes);
  }
  return result;
}

ValueMetadata *type metadata accessor for WeightedFiniteStateLanguageModel()
{
  return &type metadata for WeightedFiniteStateLanguageModel;
}

unint64_t WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16) || (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v3 & 1) == 0))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 0x206E6920746F6E20;
    v5._object = (void *)0xE800000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = BitSet.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return swift_bridgeObjectRetain();
}

unint64_t protocol witness for LogitCollection.subscript.getter in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t a1)
{
  return WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(a1, *v1);
}

uint64_t WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a2;
  v7[4] = a7;
  _OWORD v7[2] = a1;
  return MEMORY[0x270FA2498](WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

void WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  if (*(void *)(v1 + 16) <= v2)
  {
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  else
  {
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    unint64_t v3 = *(void *)(v1 + 8 * v2 + 32);
    swift_bridgeObjectRetain();
  }
  Swift::String v4 = (unint64_t *)v0[2];
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized BitSet.init<A>(_:)(v5);
  v4[3] = (unint64_t)&type metadata for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
  v4[4] = (unint64_t)&protocol witness table for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
  *Swift::String v4 = v3;
  v4[1] = v6;
  uint64_t v7 = (void (*)(void))v0[1];
  v7();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:isPrompt:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  _OWORD v7[2] = a1;
  return MEMORY[0x270FA2498](WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:isPrompt:), 0, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t a2)
{
  return specialized WeightedFiniteStateLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, *v2, v2[1], v2[2]);
}

uint64_t specialized WeightedFiniteStateLanguageModel.node(forPreviousNode:token:isPrompt:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (v5 > result)
  {
    if (result < 0)
    {
LABEL_9:
      __break(1u);
      return result;
    }
    uint64_t v6 = *(void *)(a5 + 8 * result + 32);
    if (*(void *)(v6 + 16))
    {
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if (v8) {
        return *(void *)(*(void *)(v6 + 56) + 16 * v7);
      }
    }
  }
  unint64_t result = v5 + 2;
  if (__OFADD__(v5, 2))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

void *assignWithCopy for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return &type metadata for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
}

uint64_t cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::AJAXE5MLModelBase(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = 134218240;
  uint64_t v6 = v3;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  _os_log_debug_impl(&dword_25FA51000, log, OS_LOG_TYPE_DEBUG, "Model vocab size: %zu, max context length: %zu", (uint8_t *)&v5, 0x16u);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prepareStreamOps()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt()
{
}

{
  __assert_rtn("prompt", "ane_ajax_e5ml_model.mm", 427, "mNumTokensProcessed == 0");
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend()
{
  __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 256, "tokens.size() >= startTokenOffset");
}

{
  __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 257, "!mInDynamicState && \"Inference cannot be run while in dynamic state\"");
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl(&dword_25FA51000, a2, OS_LOG_TYPE_DEBUG, "Setting ANE qos_class request to %u", (uint8_t *)v2, 8u);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset()
{
  __assert_rtn("reset", "ane_ajax_e5ml_model.mm", 495, "numHoles <= mCacheHoleIndices.size() && \"More holes before reset than exist?\"");
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a1, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *a2, NSObject *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t MaxStateLength = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(*a1);
  int v6 = 134218240;
  uint64_t v7 = MaxStateLength;
  __int16 v8 = 2048;
  uint64_t v9 = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(a2);
  _os_log_debug_impl(&dword_25FA51000, a3, OS_LOG_TYPE_DEBUG, "Switching extend module from size %zu to size %zu", (uint8_t *)&v6, 0x16u);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward()
{
  __assert_rtn("forward", "enumerated_shape_ajax_e5ml_model.cpp", 191, "mCurExtendModule != nullptr");
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_25FA51000, log, OS_LOG_TYPE_ERROR, "EnumeratedShape model doesn't know how to zero all state. This model is outdated, please use a newer one.", v1, 2u);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::FlexibleShapeAJAXE5MLModel(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward()
{
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward()
{
  __assert_rtn("forward", "static_shape_ajax_e5ml_model.cpp", 69, "mExtendModule != nullptr");
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_25FA51000, log, OS_LOG_TYPE_ERROR, "StaticShape model doesn't know how to zero all state. This model is outdated, please use a newer one.", v1, 2u);
}

uint64_t type metadata accessor for BNNS.DataLayout()
{
  return MEMORY[0x270F9C968]();
}

uint64_t static BNNS.applyActivation(activation:input:output:batchSize:filterParameters:)()
{
  return MEMORY[0x270F9CA58]();
}

uint64_t type metadata accessor for BNNS.ActivationFunction()
{
  return MEMORY[0x270F9CA98]();
}

uint64_t BNNS.Shape.size.getter()
{
  return MEMORY[0x270F9CB70]();
}

uint64_t BNNS.Shape.layout.getter()
{
  return MEMORY[0x270F9CB78]();
}

uint64_t BNNS.Shape.stride.getter()
{
  return MEMORY[0x270F9CB80]();
}

uint64_t type metadata accessor for BNNS.Shape()
{
  return MEMORY[0x270F9CB88]();
}

uint64_t BNNS.Shape.init(_:dataLayout:stride:)()
{
  return MEMORY[0x270F9CB90]();
}

uint64_t static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)()
{
  return MEMORY[0x270F9CBC0]();
}

uint64_t type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return MEMORY[0x270EEDD68]();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  return MEMORY[0x270EEDD70]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x270EEFD78]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x270EEFF40]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return MEMORY[0x270EF1458]();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = MEMORY[0x270EF14D8](a1);
  result.memberAfterInsert = v2;
  result.inserted = v1;
  return result;
}

uint64_t IndexSet.isEmpty.getter()
{
  return MEMORY[0x270EF1508]();
}

uint64_t IndexSet.init()()
{
  return MEMORY[0x270EF1538]();
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x270EF1550]();
}

uint64_t dispatch thunk of CatalogAssetProtocol.version.getter()
{
  return MEMORY[0x270F4BBB0]();
}

uint64_t dispatch thunk of CatalogAssetProtocol.contents.getter()
{
  return MEMORY[0x270F4BBB8]();
}

uint64_t dispatch thunk of CatalogClient.resourceBundle(for:)()
{
  return MEMORY[0x270F4BC68]();
}

uint64_t dispatch thunk of CatalogClient.resource(for:)()
{
  return MEMORY[0x270F4BC88]();
}

uint64_t CatalogClient.init()()
{
  return MEMORY[0x270F4BC98]();
}

uint64_t type metadata accessor for CatalogClient()
{
  return MEMORY[0x270F4BCA0]();
}

uint64_t dispatch thunk of CatalogResource.dependentResourceIDs.getter()
{
  return MEMORY[0x270F4BCC8]();
}

uint64_t dispatch thunk of CatalogResource.id.getter()
{
  return MEMORY[0x270F4BCD8]();
}

uint64_t CostProfile.energyEfficientMode.getter()
{
  return MEMORY[0x270F4BD18]();
}

uint64_t type metadata accessor for CostProfile()
{
  return MEMORY[0x270F4BD20]();
}

uint64_t AssetVersion.number.getter()
{
  return MEMORY[0x270F4BD30]();
}

uint64_t type metadata accessor for AssetVersion()
{
  return MEMORY[0x270F4BD48]();
}

uint64_t dispatch thunk of AssetContents.baseURL.getter()
{
  return MEMORY[0x270F4BDA0]();
}

uint64_t dispatch thunk of ResourceBundle.resources.getter()
{
  return MEMORY[0x270F4BDB8]();
}

uint64_t dispatch thunk of ManagedResource.cost.getter()
{
  return MEMORY[0x270F4BDE8]();
}

uint64_t dispatch thunk of AssetBackedResource.fetchAsset()()
{
  return MEMORY[0x270F4BE70]();
}

uint64_t PromptCompletionEventRenderedPrompt.init(responseIdentifier:renderedPrompt:)()
{
  return MEMORY[0x270F7EB48]();
}

uint64_t type metadata accessor for PromptCompletionEventRenderedPrompt()
{
  return MEMORY[0x270F7EB50]();
}

uint64_t Token.init(text:)()
{
  return MEMORY[0x270F7F350]();
}

uint64_t Token.text.getter()
{
  return MEMORY[0x270F7F358]();
}

uint64_t type metadata accessor for Token()
{
  return MEMORY[0x270F7F360]();
}

uint64_t TokenGenerationError.toInferenceError()()
{
  return MEMORY[0x270F7EC10]();
}

uint64_t TokenGenerationError.inferenceErrorContext.getter()
{
  return MEMORY[0x270F7EC18]();
}

uint64_t TokenGenerationError.Context.init(debugDescription:underlyingError:)()
{
  return MEMORY[0x270F7EC20]();
}

uint64_t type metadata accessor for TokenGenerationError.Context()
{
  return MEMORY[0x270F7EC30]();
}

uint64_t type metadata accessor for TokenGenerationError()
{
  return MEMORY[0x270F7EC38]();
}

uint64_t type metadata accessor for Constraints()
{
  return MEMORY[0x270F7EC58]();
}

uint64_t type metadata accessor for FinishReason()
{
  return MEMORY[0x270F7EC80]();
}

uint64_t static Serialization.decode<A>(_:from:)()
{
  return MEMORY[0x270F7EC88]();
}

uint64_t static Serialization.encode<A>(_:)()
{
  return MEMORY[0x270F7EC90]();
}

uint64_t type metadata accessor for RequestPayload()
{
  return MEMORY[0x270F7EC98]();
}

uint64_t static RequestMetadata.userInfoKeyShouldDetokenizeRenderedPrompt.getter()
{
  return MEMORY[0x270F7ECA0]();
}

uint64_t RequestMetadata.userInfo.getter()
{
  return MEMORY[0x270F7ECA8]();
}

uint64_t type metadata accessor for RequestMetadata()
{
  return MEMORY[0x270F7ECB0]();
}

uint64_t ModelInformation.Asset.init(identifier:version:metadata:)()
{
  return MEMORY[0x270F7ECE0]();
}

uint64_t type metadata accessor for ModelInformation.Asset()
{
  return MEMORY[0x270F7ECF8]();
}

uint64_t ModelInformation.init(assets:systemVersion:)()
{
  return MEMORY[0x270F7ED00]();
}

uint64_t type metadata accessor for ModelInformation()
{
  return MEMORY[0x270F7ED10]();
}

uint64_t type metadata accessor for PromptCompletion()
{
  return MEMORY[0x270F7EE40]();
}

uint64_t type metadata accessor for SamplingStrategy.Choice()
{
  return MEMORY[0x270F7EE58]();
}

uint64_t SamplingStrategy.choice.getter()
{
  return MEMORY[0x270F7EE68]();
}

uint64_t type metadata accessor for SamplingStrategy()
{
  return MEMORY[0x270F7EE70]();
}

uint64_t CountTokensRequest.prompt.getter()
{
  return MEMORY[0x270F7EE78]();
}

uint64_t CountTokensRequest.metadata.getter()
{
  return MEMORY[0x270F7EE80]();
}

uint64_t type metadata accessor for CountTokensRequest()
{
  return MEMORY[0x270F7EE88]();
}

uint64_t SamplingParameters.randomSeed.getter()
{
  return MEMORY[0x270F7EE98]();
}

uint64_t SamplingParameters.temperature.getter()
{
  return MEMORY[0x270F7EEA0]();
}

uint64_t SamplingParameters.tokenHealing.getter()
{
  return MEMORY[0x270F7EEA8]();
}

uint64_t SamplingParameters.maximumTokens.getter()
{
  return MEMORY[0x270F7EEC0]();
}

uint64_t SamplingParameters.stopSequences.getter()
{
  return MEMORY[0x270F7EED0]();
}

uint64_t SamplingParameters.promptLookupDraftSteps.getter()
{
  return MEMORY[0x270F7EEE0]();
}

uint64_t static SamplingParameters.== infix(_:_:)()
{
  return MEMORY[0x270F7EEF0]();
}

uint64_t SamplingParameters.strategy.getter()
{
  return MEMORY[0x270F7EF08]();
}

uint64_t type metadata accessor for SamplingParameters()
{
  return MEMORY[0x270F7EF18]();
}

uint64_t CountTokensResponse.init(count:renderedPrompt:)()
{
  return MEMORY[0x270F7EF38]();
}

uint64_t CountTokensResponse.count.getter()
{
  return MEMORY[0x270F7EF40]();
}

uint64_t type metadata accessor for CountTokensResponse()
{
  return MEMORY[0x270F7EF48]();
}

uint64_t CompletePromptRequest.parameters.getter()
{
  return MEMORY[0x270F7EFF0]();
}

uint64_t CompletePromptRequest.constraints.getter()
{
  return MEMORY[0x270F7F000]();
}

uint64_t CompletePromptRequest.prompt.getter()
{
  return MEMORY[0x270F7F010]();
}

uint64_t CompletePromptRequest.metadata.getter()
{
  return MEMORY[0x270F7F018]();
}

uint64_t type metadata accessor for CompletePromptRequest()
{
  return MEMORY[0x270F7F028]();
}

uint64_t CompletePromptResponse.init(completion:)()
{
  return MEMORY[0x270F7F030]();
}

uint64_t type metadata accessor for CompletePromptResponse()
{
  return MEMORY[0x270F7F038]();
}

uint64_t type metadata accessor for StreamingRequestPayload()
{
  return MEMORY[0x270F7F080]();
}

uint64_t PromptCompletionEventUsage.init(responseIdentifier:usage:)()
{
  return MEMORY[0x270F7F0B8]();
}

uint64_t type metadata accessor for PromptCompletionEventUsage()
{
  return MEMORY[0x270F7F0C0]();
}

uint64_t type metadata accessor for CompletePromptResponseElement()
{
  return MEMORY[0x270F7F0F8]();
}

uint64_t CompletePromptResponseElement.init(_:)()
{
  return MEMORY[0x270F7F100]();
}

uint64_t CompletePromptTemplateRequest.promptTemplateInfo.getter()
{
  return MEMORY[0x270F7F108]();
}

uint64_t CompletePromptTemplateRequest.parameters.getter()
{
  return MEMORY[0x270F7F110]();
}

uint64_t CompletePromptTemplateRequest.constraints.getter()
{
  return MEMORY[0x270F7F120]();
}

uint64_t CompletePromptTemplateRequest.prompt.getter()
{
  return MEMORY[0x270F7F130]();
}

uint64_t CompletePromptTemplateRequest.metadata.getter()
{
  return MEMORY[0x270F7F138]();
}

uint64_t type metadata accessor for CompletePromptTemplateRequest()
{
  return MEMORY[0x270F7F148]();
}

uint64_t CountTokensPromptTemplateRequest.promptTemplateInfo.getter()
{
  return MEMORY[0x270F7F150]();
}

uint64_t CountTokensPromptTemplateRequest.prompt.getter()
{
  return MEMORY[0x270F7F158]();
}

uint64_t CountTokensPromptTemplateRequest.metadata.getter()
{
  return MEMORY[0x270F7F160]();
}

uint64_t type metadata accessor for CountTokensPromptTemplateRequest()
{
  return MEMORY[0x270F7F168]();
}

uint64_t PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)()
{
  return MEMORY[0x270F7F170]();
}

uint64_t type metadata accessor for PromptCompletionEventModelInformation()
{
  return MEMORY[0x270F7F178]();
}

uint64_t PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)()
{
  return MEMORY[0x270F7F1B0]();
}

uint64_t type metadata accessor for PromptCompletionEventCandidateFinished()
{
  return MEMORY[0x270F7F1B8]();
}

uint64_t PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)()
{
  return MEMORY[0x270F7F1C0]();
}

uint64_t type metadata accessor for PromptCompletionEventCandidateTextDelta()
{
  return MEMORY[0x270F7F1C8]();
}

uint64_t Usage.init(promptTokenCount:completionTokenCount:)()
{
  return MEMORY[0x270F7F1F0]();
}

uint64_t type metadata accessor for Usage()
{
  return MEMORY[0x270F7F1F8]();
}

uint64_t static Prompt.SpecialToken.endPrompt.getter()
{
  return MEMORY[0x270F7F378]();
}

uint64_t Prompt.SpecialToken.init(identifier:)()
{
  return MEMORY[0x270F7F388]();
}

uint64_t type metadata accessor for Prompt.SpecialToken()
{
  return MEMORY[0x270F7F438]();
}

uint64_t Prompt.RenderedPromptFragment.text.getter()
{
  return MEMORY[0x270F7F440]();
}

uint64_t type metadata accessor for Prompt.RenderedPromptFragment()
{
  return MEMORY[0x270F7F448]();
}

uint64_t Prompt.renderPromptModules(tokenTable:localizationOverrideMap:)()
{
  return MEMORY[0x270F7F450]();
}

uint64_t Prompt.description.getter()
{
  return MEMORY[0x270F7F498]();
}

uint64_t static Prompt.== infix(_:_:)()
{
  return MEMORY[0x270F7F508]();
}

uint64_t Prompt.Rendering.renderedString.getter()
{
  return MEMORY[0x270F7F570]();
}

uint64_t Prompt.Rendering.Source.init(identifier:version:)()
{
  return MEMORY[0x270F7F588]();
}

uint64_t type metadata accessor for Prompt.Rendering.Source()
{
  return MEMORY[0x270F7F5A0]();
}

uint64_t Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:detokenizedString:)()
{
  return MEMORY[0x270F7F5A8]();
}

uint64_t Prompt.Rendering.tokenIDs.getter()
{
  return MEMORY[0x270F7F5C8]();
}

uint64_t type metadata accessor for Prompt.Rendering()
{
  return MEMORY[0x270F7F5D8]();
}

uint64_t type metadata accessor for Prompt()
{
  return MEMORY[0x270F7F5E0]();
}

uint64_t BitSet.isDisjoint(with:)()
{
  return MEMORY[0x270F182C0]();
}

uint64_t BitSet.startIndex.getter()
{
  return MEMORY[0x270F182C8]();
}

uint64_t BitSet.description.getter()
{
  return MEMORY[0x270F182D0]();
}

uint64_t BitSet.intersection(_:)()
{
  return MEMORY[0x270F182D8]();
}

uint64_t BitSet.count.getter()
{
  return MEMORY[0x270F182E8]();
}

uint64_t BitSet.index(after:)()
{
  return MEMORY[0x270F182F0]();
}

uint64_t BitSet.index(before:)()
{
  return MEMORY[0x270F182F8]();
}

uint64_t BitSet.union(_:)()
{
  return MEMORY[0x270F18300]();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall BitSet.insert(_:)(Swift::Int a1)
{
  char v1 = MEMORY[0x270F18308](a1);
  result.memberAfterInsert = v2;
  result.inserted = v1;
  return result;
}

uint64_t BitSet.isEmpty.getter()
{
  return MEMORY[0x270F18310]();
}

Swift::Int_optional __swiftcall BitSet.Iterator.next()()
{
  Swift::Int v0 = MEMORY[0x270F18318]();
  result.unint64_t value = v0;
  result.is_nil = v1;
  return result;
}

uint64_t BitSet.Iterator.init(_:)()
{
  return MEMORY[0x270F18320]();
}

Swift::Bool __swiftcall BitSet.contains(_:)(Swift::Int a1)
{
  return MEMORY[0x270F18328](a1);
}

uint64_t BitSet.endIndex.getter()
{
  return MEMORY[0x270F18330]();
}

uint64_t BitSet.init()()
{
  return MEMORY[0x270F18340]();
}

uint64_t GuidedGenerationConstraints.vocabularyCount.getter()
{
  return MEMORY[0x270F7F5F8]();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(Swift::OpaquePointer follow)
{
  return MEMORY[0x270F7F600](follow._rawValue);
}

uint64_t GuidedGenerationConstraints.init(grammar:vocabularyManager:enableDeterministicTokenRuns:numberOfParallelTasks:)()
{
  return MEMORY[0x270F7F608]();
}

uint64_t GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)()
{
  return MEMORY[0x270F7F610]();
}

uint64_t type metadata accessor for GuidedGenerationConstraints()
{
  return MEMORY[0x270F7F618]();
}

Swift::Void __swiftcall GuidedGenerationVocabularyManager.initVocabManager()()
{
}

uint64_t GuidedGenerationVocabularyManager.init(tokenizer:stopTokenIDs:characterSetsUsedInGrammar:)()
{
  return MEMORY[0x270F7F628]();
}

uint64_t type metadata accessor for GuidedGenerationVocabularyManager()
{
  return MEMORY[0x270F7F630]();
}

uint64_t type metadata accessor for GuidedGenerationError()
{
  return MEMORY[0x270F7F638]();
}

uint64_t type metadata accessor for TokenIDMaskResponse()
{
  return MEMORY[0x270F7F640]();
}

uint64_t TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)()
{
  return MEMORY[0x270F7F648]();
}

uint64_t type metadata accessor for TokenIDToTextConverter()
{
  return MEMORY[0x270F7F650]();
}

uint64_t dispatch thunk of TokenIDToTextConverterProtocol.text.getter()
{
  return MEMORY[0x270F7F658]();
}

uint64_t TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)()
{
  return MEMORY[0x270F7F660]();
}

uint64_t TokenIDMask.allowedTokenIDs()()
{
  return MEMORY[0x270F7F668]();
}

uint64_t TokenIDMask.bitSet()()
{
  return MEMORY[0x270F7F670]();
}

uint64_t type metadata accessor for TokenIDMask()
{
  return MEMORY[0x270F7F678]();
}

uint64_t Overridable.wrappedValue.getter()
{
  return MEMORY[0x270F7F680]();
}

uint64_t Overridable<A>.init(key:)()
{
  return MEMORY[0x270F7F688]();
}

{
  return MEMORY[0x270F7F690]();
}

{
  return MEMORY[0x270F7F698]();
}

{
  return MEMORY[0x270F7F6A0]();
}

uint64_t type metadata accessor for Overridable()
{
  return MEMORY[0x270F7F6A8]();
}

uint64_t static EarleyParser.createRootParser(for:)()
{
  return MEMORY[0x270F7F6B0]();
}

uint64_t EarleyParser.childParser(consumingElement:)()
{
  return MEMORY[0x270F7F6B8]();
}

uint64_t type metadata accessor for EarleyParser()
{
  return MEMORY[0x270F7F6C0]();
}

uint64_t TokenizedPrompt.promptFragments.getter()
{
  return MEMORY[0x270F7F6D0]();
}

uint64_t TokenizedPrompt.renderdedString.getter()
{
  return MEMORY[0x270F7F6D8]();
}

uint64_t TokenizedPrompt.tokenIDs.getter()
{
  return MEMORY[0x270F7F6E0]();
}

uint64_t type metadata accessor for TokenizedPrompt()
{
  return MEMORY[0x270F7F6E8]();
}

uint64_t dispatch thunk of TokenizerRunner.longestTokenLength.getter()
{
  return MEMORY[0x270F7F6F0]();
}

uint64_t dispatch thunk of TokenizerRunner.detokenize(_:)()
{
  return MEMORY[0x270F7F6F8]();
}

uint64_t TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)()
{
  return MEMORY[0x270F7F700]();
}

uint64_t TokenizerRunner.init(tokenizerPath:)()
{
  return MEMORY[0x270F7F708]();
}

uint64_t dispatch thunk of TokenizerRunner.vocabularyCount.getter()
{
  return MEMORY[0x270F7F710]();
}

uint64_t static TokenizerRunner.== infix(_:_:)()
{
  return MEMORY[0x270F7F718]();
}

uint64_t dispatch thunk of TokenizerRunner.text(forTokenID:)()
{
  return MEMORY[0x270F7F720]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenID(forText:)()
{
  return MEMORY[0x270F7F728]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(promptModules:tokenTable:)()
{
  return MEMORY[0x270F7F730]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(_:)()
{
  return MEMORY[0x270F7F738]();
}

uint64_t type metadata accessor for TokenizerRunner()
{
  return MEMORY[0x270F7F740]();
}

uint64_t ModelConfiguration.init(modelConfigurationData:)()
{
  return MEMORY[0x270F7F748]();
}

uint64_t type metadata accessor for ModelConfiguration()
{
  return MEMORY[0x270F7F770]();
}

uint64_t PromptTemplateInfo.templateID.getter()
{
  return MEMORY[0x270F7F780]();
}

uint64_t type metadata accessor for PromptTemplateInfo()
{
  return MEMORY[0x270F7F808]();
}

uint64_t StopSequenceMonitor.init(stopSequences:)()
{
  return MEMORY[0x270F7F810]();
}

Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional __swiftcall StopSequenceMonitor.handleOutputTokens(_:)(Swift::OpaquePointer a1)
{
  Swift::Bool v1 = (void *)MEMORY[0x270F7F818](a1._rawValue);
  result.stopSequence.value._object = v3;
  result.stopSequence.value._uint64_t countAndFlagsBits = v2;
  result.tokens._rawValue = v1;
  return result;
}

uint64_t StopSequenceMonitor.currentBufferedTokens()()
{
  return MEMORY[0x270F7F820]();
}

uint64_t type metadata accessor for StopSequenceMonitor()
{
  return MEMORY[0x270F7F828]();
}

uint64_t Grammar.characterSetsUsedInGrammar.getter()
{
  return MEMORY[0x270F7F8A0]();
}

uint64_t Grammar.init(backusNaurForm:prependSpaceToRootRule:)()
{
  return MEMORY[0x270F7F8A8]();
}

uint64_t Grammar.init(schema:)()
{
  return MEMORY[0x270F7F8B0]();
}

uint64_t type metadata accessor for Grammar()
{
  return MEMORY[0x270F7F8B8]();
}

uint64_t AuditToken.realUserIdentifier.getter()
{
  return MEMORY[0x270F4C190]();
}

uint64_t type metadata accessor for AuditToken()
{
  return MEMORY[0x270F4C1A0]();
}

uint64_t ClientData.data.getter()
{
  return MEMORY[0x270F4C1B8]();
}

uint64_t ClientData.init(data:)()
{
  return MEMORY[0x270F4C1C0]();
}

uint64_t type metadata accessor for ClientData()
{
  return MEMORY[0x270F4C1C8]();
}

uint64_t InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)()
{
  return MEMORY[0x270F4C1D0]();
}

uint64_t type metadata accessor for InferenceError.Context()
{
  return MEMORY[0x270F4C1F8]();
}

uint64_t type metadata accessor for InferenceError()
{
  return MEMORY[0x270F4C210]();
}

uint64_t InferenceProvider.loadOut(inferenceAssetIdentifier:)()
{
  return MEMORY[0x270F4C2D0]();
}

uint64_t InferenceProviding.prewarmHint(_:)()
{
  return MEMORY[0x270F4C2D8]();
}

uint64_t InferenceProviderAssetDescriptor.init(identifier:version:)()
{
  return MEMORY[0x270F4C2F0]();
}

uint64_t InferenceProviderAssetDescriptor.identifier.getter()
{
  return MEMORY[0x270F4C2F8]();
}

uint64_t InferenceProviderAssetDescriptor.version.getter()
{
  return MEMORY[0x270F4C300]();
}

uint64_t type metadata accessor for InferenceProviderAssetDescriptor()
{
  return MEMORY[0x270F4C308]();
}

uint64_t InferenceProviderRequestConfiguration.auditToken.getter()
{
  return MEMORY[0x270F4C348]();
}

uint64_t InferenceProviderRequestConfiguration.requestUUID.getter()
{
  return MEMORY[0x270F4C350]();
}

uint64_t InferenceProviderRequestConfiguration.sessionUUID.getter()
{
  return MEMORY[0x270F4C358]();
}

uint64_t InferenceProviderRequestConfiguration.assetIdentifiers.getter()
{
  return MEMORY[0x270F4C370]();
}

uint64_t InferenceProviderRequestConfiguration.assetBundleIdentifier.getter()
{
  return MEMORY[0x270F4C380]();
}

uint64_t type metadata accessor for InferenceProviderRequestConfiguration()
{
  return MEMORY[0x270F4C388]();
}

uint64_t LoadState.rawValue.getter()
{
  return MEMORY[0x270F4C438]();
}

uint64_t type metadata accessor for LoadState()
{
  return MEMORY[0x270F4C440]();
}

uint64_t type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment()
{
  return MEMORY[0x270F43620]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter()
{
  return MEMORY[0x270F43810]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers()
{
  return MEMORY[0x270F43898]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.identifiers.setter()
{
  return MEMORY[0x270F438B8]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter()
{
  return MEMORY[0x270F438F8]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter()
{
  return MEMORY[0x270F43908]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion()
{
  return MEMORY[0x270F43918]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.metadata.setter()
{
  return MEMORY[0x270F43978]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.eventType.setter()
{
  return MEMORY[0x270F43990]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent()
{
  return MEMORY[0x270F439A8]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.totalPages.setter()
{
  return MEMORY[0x270F439C0]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentPages.setter()
{
  return MEMORY[0x270F439C8]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentRatio.setter()
{
  return MEMORY[0x270F439D8]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo()
{
  return MEMORY[0x270F439E0]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.fileResidentInfo.setter()
{
  return MEMORY[0x270F439F0]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition()
{
  return MEMORY[0x270F43A58]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType()
{
  return MEMORY[0x270F43BF8]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata()
{
  return MEMORY[0x270F441A8]();
}

uint64_t static Buildable.with(_:)()
{
  return MEMORY[0x270F44210]();
}

uint64_t type metadata accessor for GenerationSchema.StringConstraint()
{
  return MEMORY[0x270F2F218]();
}

uint64_t type metadata accessor for GenerationSchema()
{
  return MEMORY[0x270F2F270]();
}

uint64_t Schema.init(type:)()
{
  return MEMORY[0x270F2F428]();
}

uint64_t type metadata accessor for Schema()
{
  return MEMORY[0x270F2F458]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t type metadata accessor for Instrumenter()
{
  return MEMORY[0x270F2F650]();
}

uint64_t EventReporter.__allocating_init(onBehalfOfUserIdentifier:)()
{
  return MEMORY[0x270F2F658]();
}

uint64_t EventReporter.send(eventBuiltWithPresetsAnd:)()
{
  return MEMORY[0x270F2F668]();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EventReporter.warmup()()
{
}

uint64_t EventReporter.init()()
{
  return MEMORY[0x270F2F678]();
}

uint64_t type metadata accessor for EventReporter()
{
  return MEMORY[0x270F2F680]();
}

uint64_t TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)()
{
  return MEMORY[0x270F2F6D0]();
}

uint64_t TransparencyReport.init()()
{
  return MEMORY[0x270F2F6D8]();
}

uint64_t type metadata accessor for TransparencyReport()
{
  return MEMORY[0x270F2F6E0]();
}

uint64_t InstrumenterFinalizer.init()()
{
  return MEMORY[0x270F2F6E8]();
}

uint64_t type metadata accessor for InstrumenterFinalizer()
{
  return MEMORY[0x270F2F6F0]();
}

uint64_t ExtendInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)()
{
  return MEMORY[0x270F2F718]();
}

uint64_t ExtendInferenceInstrumenter.outputTokensCount.setter()
{
  return MEMORY[0x270F2F728]();
}

uint64_t type metadata accessor for ExtendInferenceInstrumenter()
{
  return MEMORY[0x270F2F738]();
}

uint64_t PromptProcessingInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)()
{
  return MEMORY[0x270F2F750]();
}

uint64_t PromptProcessingInstrumenter.inputTokensCount.setter()
{
  return MEMORY[0x270F2F758]();
}

uint64_t PromptProcessingInstrumenter.errorType.setter()
{
  return MEMORY[0x270F2F760]();
}

uint64_t type metadata accessor for PromptProcessingInstrumenter()
{
  return MEMORY[0x270F2F768]();
}

uint64_t dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)()
{
  return MEMORY[0x270F2F780]();
}

uint64_t FirstTokenInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:eventReporter:)()
{
  return MEMORY[0x270F2F788]();
}

uint64_t type metadata accessor for FirstTokenInferenceInstrumenter()
{
  return MEMORY[0x270F2F7A0]();
}

uint64_t CompletePromptRequestInstrumenter.init(signpostLogger:requestIdentifier:oneshot:onBehalfOfUserIdentifier:eventReporter:)()
{
  return MEMORY[0x270F2F7B0]();
}

uint64_t CompletePromptRequestInstrumenter.inputTokensCount.setter()
{
  return MEMORY[0x270F2F7C0]();
}

uint64_t CompletePromptRequestInstrumenter.outputTokensCount.setter()
{
  return MEMORY[0x270F2F7C8]();
}

uint64_t CompletePromptRequestInstrumenter.speculativeDecoderStats.setter()
{
  return MEMORY[0x270F2F7D0]();
}

uint64_t CompletePromptRequestInstrumenter.prefixKVCacheTokensMatchCount.setter()
{
  return MEMORY[0x270F2F7D8]();
}

uint64_t CompletePromptRequestInstrumenter.promptModulesKVCacheTokensMatchCount.setter()
{
  return MEMORY[0x270F2F7E0]();
}

uint64_t CompletePromptRequestInstrumenter.errorType.setter()
{
  return MEMORY[0x270F2F7F0]();
}

uint64_t type metadata accessor for CompletePromptRequestInstrumenter()
{
  return MEMORY[0x270F2F7F8]();
}

uint64_t static BinaryFloatingPoint<>.random<A>(in:using:)()
{
  return MEMORY[0x270F9D018]();
}

{
  return MEMORY[0x270F9D020]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x270F9D380]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x270F9D410]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return MEMORY[0x270EF1870]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x270F9D7C0]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x270F9D808]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x270F9D810]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D878](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

{
  return MEMORY[0x270F9D8F0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t Array.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9DC48]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x270FA1E30]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x270FA1FE8]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA20F0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Iterator()
{
  return MEMORY[0x270FA2108]();
}

uint64_t AsyncThrowingStream.init<>(unfolding:)()
{
  return MEMORY[0x270FA2110]();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return MEMORY[0x270FA2118]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t static Float.bnnsDataType.getter()
{
  return MEMORY[0x270F9CD80]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x270F9DE48]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x270F9E4A0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x270F9E4E8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x270F9E4F8]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x270F9E658]();
}

uint64_t ArraySlice.description.getter()
{
  return MEMORY[0x270F9E6C8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x270F9E988]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x270F9E9A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x270FA21A8]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x270FA21B0]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t AsyncMapSequence.init(_:transform:)()
{
  return MEMORY[0x270FA2240]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F270]();
}

{
  return MEMORY[0x270F9F278]();
}

{
  return MEMORY[0x270F9F288]();
}

{
  return MEMORY[0x270F9F290]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F2F0]();
}

{
  return MEMORY[0x270F9F2F8]();
}

{
  return MEMORY[0x270F9F300]();
}

{
  return MEMORY[0x270F9F308]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

{
  return MEMORY[0x270F9F3C8]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F430]();
}

{
  return MEMORY[0x270F9F438]();
}

{
  return MEMORY[0x270F9F448]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x270F9F730]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x270F9F7E8]();
}

{
  return MEMORY[0x270F9F808]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Clock.measure(_:)()
{
  return MEMORY[0x270FA2388]();
}

uint64_t static Int32.bnnsDataType.getter()
{
  return MEMORY[0x270F9CE68]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x270F9FD50]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x270F9FD60]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x270F9FF68]();
}

uint64_t static Duration.+= infix(_:_:)()
{
  return MEMORY[0x270F9FFD0]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x270F9FFE0]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t E5RT_Private::GetMaxPortDescriptor()
{
  return MEMORY[0x270F277C8]();
}

uint64_t E5RT_Private::SetMaxPortDescriptor()
{
  return MEMORY[0x270F277D0]();
}

uint64_t E5RT_Private::SetQualityOfServiceForStream()
{
  return MEMORY[0x270F277D8]();
}

uint64_t E5RT_Private::GetE5BundlePathFromProgramLibrary()
{
  return MEMORY[0x270F277E0]();
}

uint64_t E5RT::E5Compiler::MakeCompiler()
{
  return MEMORY[0x270F277F0]();
}

uint64_t E5RT::E5Compiler::IsNewCompileRequired()
{
  return MEMORY[0x270F277F8]();
}

uint64_t E5RT::E5Compiler::Compile()
{
  return MEMORY[0x270F27800]();
}

uint64_t E5RT::BufferObject::AllocMemory()
{
  return MEMORY[0x270F27808]();
}

uint64_t E5RT::BufferObject::GetDataSpan(E5RT::BufferObject *this)
{
  return MEMORY[0x270F27810](this);
}

uint64_t E5RT::MemoryObject::TryAsBuffer(E5RT::MemoryObject *this)
{
  return MEMORY[0x270F27828](this);
}

uint64_t E5RT::MemoryObject::Buffer(E5RT::MemoryObject *this)
{
  return MEMORY[0x270F27830](this);
}

uint64_t E5RT::ExecuteOptions::SetExecutionIdentifier()
{
  return MEMORY[0x270F27840]();
}

uint64_t E5RT::ExecuteOptions::SetEnableResourceTelemetry(E5RT::ExecuteOptions *this)
{
  return MEMORY[0x270F27848](this);
}

uint64_t E5RT::ExecuteOptions::Create(E5RT::ExecuteOptions *this)
{
  return MEMORY[0x270F27850](this);
}

uint64_t E5RT::ProgramLibrary::OpenLibrary()
{
  return MEMORY[0x270F27858]();
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return MEMORY[0x270F27860](this);
}

uint64_t E5RT::TensorDataType::TensorDataType()
{
  return MEMORY[0x270F27868]();
}

{
  return MEMORY[0x270F27870]();
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
}

uint64_t E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F27880](this);
}

uint64_t E5RT::ExecutionStream::EncodeOperation()
{
  return MEMORY[0x270F27888]();
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this, const E5RT::ExecuteOptions *a2)
{
  return MEMORY[0x270F27890](this, a2);
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F27898](this);
}

uint64_t E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F278A0](this);
}

uint64_t E5RT::ExecutionStream::PreWireInUseAllocations(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F278A8](this);
}

uint64_t E5RT::TensorDescriptor::CreateTensorDesc()
{
  return MEMORY[0x270F278B8]();
}

uint64_t E5RT::E5CompilerOptions::SetMilEntryPoints()
{
  return MEMORY[0x270F278C0]();
}

uint64_t E5RT::E5CompilerOptions::SetCustomAneCompilerOptions()
{
  return MEMORY[0x270F278D8]();
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed()
{
  return MEMORY[0x270F278E0]();
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x270F278E8](this);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x270F278F0](this);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x270F278F8](this);
}

uint64_t E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x270F27900](this);
}

uint64_t E5RT::E5CompilerConfigOptions::SetBundleCacheLocation()
{
  return MEMORY[0x270F27908]();
}

uint64_t E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  return MEMORY[0x270F27910](this);
}

void E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPortRef()
{
  return MEMORY[0x270F27920]();
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPortRef()
{
  return MEMORY[0x270F27928]();
}

{
  return MEMORY[0x270F27AA8]();
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPortRef()
{
  return MEMORY[0x270F27930]();
}

uint64_t E5RT::ExecutionStreamOperation::ReshapeOperation()
{
  return MEMORY[0x270F27938]();
}

uint64_t E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp()
{
  return MEMORY[0x270F27940]();
}

uint64_t E5RT::ExecutionStreamOperation::SerializeInferenceFrameData()
{
  return MEMORY[0x270F27950]();
}

uint64_t E5RT::ExecutionStreamOperation::CreateResourceSharingPreCompiledComputeOps()
{
  return MEMORY[0x270F27958]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths()
{
  return MEMORY[0x270F27968]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x270F27978](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x270F27980](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x270F27988](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::Create()
{
  return MEMORY[0x270F27990]();
}

{
  return MEMORY[0x270F27998]();
}

uint64_t E5RT::IOPort::GetMemoryObject(E5RT::IOPort *this)
{
  return MEMORY[0x270F279A0](this);
}

{
  return MEMORY[0x270F27AB0](this);
}

uint64_t E5RT::IOPort::BindMemoryObject()
{
  return MEMORY[0x270F279A8]();
}

uint64_t E5RT::IOPort::GetMemoryObjectRef(E5RT::IOPort *this)
{
  return MEMORY[0x270F279B0](this);
}

uint64_t E5RT::operator!=()
{
  return MEMORY[0x270F279B8]();
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F27A00](this);
}

uint64_t E5RT::TensorDataType::GetNumComponents(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F27A08](this);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F27A10](this);
}

uint64_t E5RT::TensorDescriptor::AllocateMemory()
{
  return MEMORY[0x270F27A18]();
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A20](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A28](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A30](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A38](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataTypeRef(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A40](this);
}

uint64_t E5RT::TensorDescriptor::GetRank(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A48](this);
}

uint64_t E5RT::TensorDescriptor::GetSize(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A50](this);
}

uint64_t E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x270F27A58](this);
}

uint64_t E5RT::OperandDescriptor::TryAsTensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x270F27A68](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x270F27A90](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x270F27A98](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x270F27AA0](this);
}

uint64_t E5RT::IOPort::GetPortDescriptor(E5RT::IOPort *this)
{
  return MEMORY[0x270F27AB8](this);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPort *this)
{
  return MEMORY[0x270F27AC0](this);
}

uint64_t E5RT::IOPort::IsDynamic(E5RT::IOPort *this)
{
  return MEMORY[0x270F27AC8](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  Swift::Bool v1 = (const std::string_view::value_type *)MEMORY[0x270F98290](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x270F982D0](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983D0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987B8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x270F98A40](retstr, a2, __ec);
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x270F98C88](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x270F98DA0](this, a2, a3, a4);
}

{
  return MEMORY[0x270F98DB8](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x270F98DA8]();
}

{
  return MEMORY[0x270F98DB0]();
}

{
  return MEMORY[0x270F98DC0]();
}

{
  return MEMORY[0x270F98DC8]();
}

{
  return MEMORY[0x270F98DD8]();
}

{
  return MEMORY[0x270F98DE0]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x270F98DD0](this, a2, a3, a4);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t __udivti3()
{
  return MEMORY[0x270ED7F10]();
}

uint64_t __umodti3()
{
  return MEMORY[0x270ED7F28]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

void free(void *a1)
{
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x270EDAA60](log);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x270EDB0B0]();
}

uint64_t sendAneSessionSignal()
{
  return MEMORY[0x270F08AB0]();
}

uint64_t sendAneSignal()
{
  return MEMORY[0x270F08AB8]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x270FA23D0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x270FA0248]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsorti(const float *__C, vDSP_Length *__I, vDSP_Length *__Temporary, vDSP_Length __N, int __Order)
{
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF020](src, dest, *(void *)&flags);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}