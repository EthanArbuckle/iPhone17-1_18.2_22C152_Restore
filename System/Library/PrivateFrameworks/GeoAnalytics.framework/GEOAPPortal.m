@interface GEOAPPortal
+ (BOOL)directionsRequestDetailsAreDisabled;
+ (BOOL)isDisabledEvent:(id)a3 inCountry:(id)a4;
+ (BOOL)isDisabledState:(id)a3 inCountry:(id)a4;
+ (BOOL)isRunningInVisualIntelligence;
+ (BOOL)permittedToCountAC;
+ (id)_caChargingStateFromAPChargingState:(int)a3;
+ (id)_caFeatureFromAPFeature:(int)a3;
+ (id)_caNavMapTypeFromAPNavMapType:(int)a3;
+ (id)_caTriggerTypeFromFromAPThermalPressure:(int)a3;
+ (id)_netEventHandlingConfig;
+ (id)addCodeGenDailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5;
+ (id)addStaticDailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5;
+ (id)captureQueue;
+ (id)dailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5;
+ (int)_eventNavChargingStateFromAPNavChargingState:(int)a3;
+ (int)_eventNavMapTypeFromAPNavMapType:(int)a3;
+ (int)_eventThermalPressureFromAPThermalPressure:(int)a3;
+ (void)_captureImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 elementType:(int)a8 isEnriched:(BOOL)a9 impressionEvent:(unsigned int)a10 impressionVisibleTimestamp:(double)a11 impressionNonvisibleTimestamp:(double)a12;
+ (void)captureAccountSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureArpPrivacyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureBatchTrafficWithLocationCollection:(id)a3;
+ (void)captureBatchTrafficWithLocationCollection:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureCarplayUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureClientACKeypressWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 keypressStatus:(int)a6;
+ (void)captureClientACKeypressWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 keypressStatus:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureClientACResponseWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 shouldDifferentiateClientAndServerResults:(id)a6 overallLatencyInMs:(id)a7 isRerankerTriggered:(id)a8 isRetainedQuery:(id)a9;
+ (void)captureClientACResponseWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 shouldDifferentiateClientAndServerResults:(id)a6 overallLatencyInMs:(id)a7 isRerankerTriggered:(id)a8 isRetainedQuery:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13;
+ (void)captureClientACSuggestionWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 selectedIndex:(id)a6 selectedSectionIndex:(id)a7 withinSectionSelectedIndex:(id)a8 isRetainedQuery:(id)a9 isRerankerTriggered:(id)a10 shouldDifferentiateClientAndServerResults:(id)a11;
+ (void)captureClientACSuggestionWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 selectedIndex:(id)a6 selectedSectionIndex:(id)a7 withinSectionSelectedIndex:(id)a8 isRetainedQuery:(id)a9 isRerankerTriggered:(id)a10 shouldDifferentiateClientAndServerResults:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15;
+ (void)captureCommuteDoomWindow:(id)a3 exitTime:(id)a4 destinations:(id)a5 reason:(int64_t)a6 networkRequests:(unint64_t)a7 alerts:(unint64_t)a8;
+ (void)captureCommuteWindowWithStartTime:(id)a3 duration:(id)a4 predictedExitTime:(id)a5 endReason:(int)a6 numberOfAlertingResponses:(id)a7 numberOfDoomRoutingRequests:(id)a8 predictedDestinations:(id)a9;
+ (void)captureCommuteWindowWithStartTime:(id)a3 duration:(id)a4 predictedExitTime:(id)a5 endReason:(int)a6 numberOfAlertingResponses:(id)a7 numberOfDoomRoutingRequests:(id)a8 predictedDestinations:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13;
+ (void)captureCuratedCollectionUserAction:(int)a3 target:(int)a4 value:(id)a5 publisherId:(id)a6 following:(id)a7 collectionId:(id)a8 collectionCategory:(id)a9 collectionCurrentlySaved:(id)a10 verticalIndex:(id)a11 horizontalIndex:(id)a12 placeCardType:(id)a13 possibleActions:(id)a14 impossibleActions:(id)a15 modules:(id)a16;
+ (void)captureCuratedCollectionUserAction:(int)a3 target:(int)a4 value:(id)a5 publisherId:(id)a6 following:(id)a7 collectionId:(id)a8 collectionCategory:(id)a9 collectionCurrentlySaved:(id)a10 verticalIndex:(id)a11 horizontalIndex:(id)a12 placeCardType:(id)a13 possibleActions:(id)a14 impossibleActions:(id)a15 providerId:(id)a16 repeatableSectionIndex:(id)a17 modules:(id)a18;
+ (void)captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureCuratedCollectionsSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureCuratedCollectionsShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureDailyUseSummaryWithUseEvents:(id)a3 summaryPeriod:(int)a4 summaryDate:(id)a5 firstEventDate:(id)a6 user_mapsUseLastDate:(id)a7;
+ (void)captureDailyUseSummaryWithUseEvents:(id)a3 summaryPeriod:(int)a4 summaryDate:(id)a5 firstEventDate:(id)a6 user_mapsUseLastDate:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11;
+ (void)captureDirectionsRequestDetailsWithNavStarted:(id)a3 purpose:(int)a4 origin:(int)a5 destination:(int)a6;
+ (void)captureDirectionsRequestDetailsWithNavStarted:(id)a3 purpose:(int)a4 origin:(int)a5 destination:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 isBadEvExperience:(id)a19 isEvSampleTrip:(id)a20 stateOfChargeAtOrigin:(id)a21 stateOfChargeAtDestPredicted:(id)a22 stateOfChargeAtDestActual:(id)a23 stateOfChargeDiffAtDest:(id)a24 waypoints:(id)a25 evConsumptionModel:(id)a26 evChargingMode:(id)a27 activeNavMode:(int)a28 arWalkingUsedInRoutePlanning:(id)a29 arWalkingUsedInNavigation:(id)a30 voiceGuidanceLevel:(int)a31 hFPEnabled:(id)a32 isEndRouteTermination:(id)a33 isParkedCarTermination:(id)a34 isTransitionToWalkingTermination:(id)a35 isTransitionToFindmyTermination:(id)a36 parkingDetectionLocation:(id)a37 timeBetweenParkedAndArrival:(id)a38 arrivedAtDestinationCount:(id)a39 inParkingModeCount:(id)a40 isInParkingMode:(id)a41 isSuggestToWalkingTriggered:(id)a42 isTransitedToWalking:(id)a43 isSuggestToFindmyTriggered:(id)a44 isTransitedToFindmy:(id)a45;
+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 isBadEvExperience:(id)a19 isEvSampleTrip:(id)a20 stateOfChargeAtOrigin:(id)a21 stateOfChargeAtDestPredicted:(id)a22 stateOfChargeAtDestActual:(id)a23 stateOfChargeDiffAtDest:(id)a24 waypoints:(id)a25 evConsumptionModel:(id)a26 evChargingMode:(id)a27 activeNavMode:(int)a28 arWalkingUsedInRoutePlanning:(id)a29 arWalkingUsedInNavigation:(id)a30 voiceGuidanceLevel:(int)a31 hFPEnabled:(id)a32 isEndRouteTermination:(id)a33 isParkedCarTermination:(id)a34 isTransitionToWalkingTermination:(id)a35 isTransitionToFindmyTermination:(id)a36 parkingDetectionLocation:(id)a37 timeBetweenParkedAndArrival:(id)a38 arrivedAtDestinationCount:(id)a39 inParkingModeCount:(id)a40 isInParkingMode:(id)a41 isSuggestToWalkingTriggered:(id)a42 isTransitedToWalking:(id)a43 isSuggestToFindmyTriggered:(id)a44 isTransitedToFindmy:(id)a45 additionalStates:(id)a46 providedDropRate:(id)a47 completionQueue:(id)a48 completionBlock:(id)a49;
+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 wasBadRouteExperience:(id)a19 isBadEvExperience:(id)a20 isEvSampleTrip:(id)a21 stateOfChargeAtOrigin:(id)a22 stateOfChargeAtDestPredicted:(id)a23 stateOfChargeAtDestActual:(id)a24 stateOfChargeDiffAtDest:(id)a25 waypoints:(id)a26 evConsumptionModel:(id)a27 evChargingMode:(id)a28 isEVRoute:(BOOL)a29 activeNavMode:(int)a30 arWalkingUsedInRoutePlanning:(id)a31 arWalkingUsedInNavigation:(id)a32 voiceGuidanceLevel:(int)a33 hFPEnabled:(id)a34 isEndRouteTermination:(id)a35 isParkedCarTermination:(id)a36 isTransitionToWalkingTermination:(id)a37 isTransitionToFindmyTermination:(id)a38 parkingDetectionLocation:(id)a39 timeBetweenParkedAndArrival:(id)a40 arrivedAtDestinationCount:(id)a41 inParkingModeCount:(id)a42 isInParkingMode:(id)a43 isSuggestToWalkingTriggered:(id)a44 isTransitedToWalking:(id)a45 isSuggestToFindmyTriggered:(id)a46 isTransitedToFindmy:(id)a47;
+ (void)captureDisplayAnalyticWithDisplayActionTrigger:(int)a3 requiredResourcesAvailable:(id)a4 totalTime:(id)a5 requestedImageCount:(id)a6 renderedImageCount:(id)a7 movementDistance:(id)a8 meanImageSpacing:(id)a9 displayEvent:(int)a10;
+ (void)captureDisplayAnalyticWithDisplayActionTrigger:(int)a3 requiredResourcesAvailable:(id)a4 totalTime:(id)a5 requestedImageCount:(id)a6 renderedImageCount:(id)a7 movementDistance:(id)a8 meanImageSpacing:(id)a9 displayEvent:(int)a10 additionalStates:(id)a11 providedDropRate:(id)a12 completionQueue:(id)a13 completionBlock:(id)a14;
+ (void)captureEnterMapsShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureEvRoutingVehicleDetailsWithMake:(id)a3 model:(id)a4 towingNotSupported:(id)a5 batteryCapacity:(id)a6;
+ (void)captureEvRoutingVehicleDetailsWithMake:(id)a3 model:(id)a4 towingNotSupported:(id)a5 batteryCapacity:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureEvTripWithOutOfCharge:(id)a3 outOfRangeAlertDisplayed:(id)a4 originalTripIncludedChargingStation:(id)a5 chargingStopAddedThroughSar:(id)a6 tripIncludedPreferredChargingStation:(id)a7 stopRemovedDetails:(id)a8 realtimeDodgeballs:(id)a9 chargeLocationDetails:(id)a10 stopAddedDetails:(id)a11;
+ (void)captureEvTripWithOutOfCharge:(id)a3 outOfRangeAlertDisplayed:(id)a4 originalTripIncludedChargingStation:(id)a5 chargingStopAddedThroughSar:(id)a6 tripIncludedPreferredChargingStation:(id)a7 stopRemovedDetails:(id)a8 realtimeDodgeballs:(id)a9 chargeLocationDetails:(id)a10 stopAddedDetails:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15;
+ (void)captureExtraStatesUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureGridDuration:(double)a3 previousState:(int)a4 endState:(int)a5 displayType:(int)a6 errors:(id)a7;
+ (void)captureGridDurationWithDurationMs:(id)a3 previousState:(int)a4 endState:(int)a5 endStateErrorReasons:(id)a6 displayType:(int)a7;
+ (void)captureGridDurationWithDurationMs:(id)a3 previousState:(int)a4 endState:(int)a5 endStateErrorReasons:(id)a6 displayType:(int)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11;
+ (void)captureHardStopWithScore:(id)a3 digits:(id)a4 cities:(id)a5;
+ (void)captureHardStopWithScore:(id)a3 digits:(id)a4 cities:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureImpressionEvent;
+ (void)captureImpressionEventWithAdditionalStates:(id)a3 providedDropRate:(id)a4 completionQueue:(id)a5 completionBlock:(id)a6;
+ (void)captureLookAroundUserAction:(int)a3 onTarget:(int)a4 eventValue:(id)a5;
+ (void)captureLookAroundUserAction:(int)a3 onTarget:(int)a4 eventValue:(id)a5 location:(id)a6 heading:(unsigned int)a7 zoom:(double)a8 numberPoisInView:(unsigned int)a9 labelingShown:(BOOL)a10;
+ (void)captureMapLaunchEventWithLaunchUrl:(id)a3 sourceAppId:(id)a4 isLaunchedFromTTL:(BOOL)a5 ttlEventTime:(id)a6;
+ (void)captureMapLaunchWithLaunchUri:(id)a3 sourceAppId:(id)a4 GEOTimeToLeaveMapLaunch_minutesUntilEvent:(id)a5;
+ (void)captureMapLaunchWithLaunchUri:(id)a3 sourceAppId:(id)a4 GEOTimeToLeaveMapLaunch_minutesUntilEvent:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureMapsEngagementWithUser_mapsUseLastDate:(id)a3;
+ (void)captureMapsEngagementWithUser_mapsUseLastDate:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureMapsInteractionWithInteractionType:(int)a3;
+ (void)captureMapsInteractionWithInteractionType:(int)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureMapsWidgetsInteractionForType:(int)a3 endState:(int)a4 widgetSpecificObject:(id)a5 wasLocked:(BOOL)a6 startDate:(id)a7 forDuration:(double)a8;
+ (void)captureMarcoLiteWithTotalNavTime:(id)a3 usageStates:(id)a4 vioTrigger:(int)a5;
+ (void)captureMarcoLiteWithTotalNavTime:(id)a3 usageStates:(id)a4 vioTrigger:(int)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureMuninCameraUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureMuninUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureNavThermalPressureTrigger:(int)a3 thermalPressure:(id)a4 navMapType:(int)a5 supressedFeatures:(id)a6;
+ (void)captureNavThermalPressureTrigger:(int)a3 thermalPressure:(id)a4 navMapType:(int)a5 supressedFeatures:(id)a6 chargingState:(int)a7;
+ (void)captureNavThermalPressureWithThermalPressure:(id)a3 disableMapFeatures:(id)a4 navMapType:(int)a5 collectionTrigger:(int)a6;
+ (void)captureNavThermalPressureWithThermalPressure:(id)a3 disableMapFeatures:(id)a4 navMapType:(int)a5 collectionTrigger:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureNavTraceWithNavTraceData:(id)a3;
+ (void)captureNavTraceWithNavTraceData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureNearbyTransitAction:(int)a3 target:(int)a4 value:(id)a5 pinnedLines:(id)a6 lineGroupReadBlock:(id)a7;
+ (void)captureNearbyTransitShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureNetEventSummaryWithGroups:(id)a3;
+ (void)captureNetEventSummaryWithGroups:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureNetEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 requestAppIdMajorVer:(id)a5 requestAppIdMinorVer:(id)a6 requestErrorDomain:(id)a7 requestErrorCode:(id)a8 requestDataSize:(id)a9 responseDataSize:(id)a10 totalTime:(id)a11 httpResponseCode:(id)a12 serviceIpAddress:(id)a13 taskMetrics:(id)a14 mptcpServiceType:(int)a15 mptcpNegotiated:(id)a16 rnfTriggered:(id)a17 queuedTime:(id)a18 redirectCount:(id)a19 requestStart:(id)a20 requestEnd:(id)a21 wasBackground:(id)a22;
+ (void)captureNetEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 requestAppIdMajorVer:(id)a5 requestAppIdMinorVer:(id)a6 requestErrorDomain:(id)a7 requestErrorCode:(id)a8 requestDataSize:(id)a9 responseDataSize:(id)a10 totalTime:(id)a11 httpResponseCode:(id)a12 serviceIpAddress:(id)a13 taskMetrics:(id)a14 mptcpServiceType:(int)a15 mptcpNegotiated:(id)a16 rnfTriggered:(id)a17 queuedTime:(id)a18 redirectCount:(id)a19 requestStart:(id)a20 requestEnd:(id)a21 wasBackground:(id)a22 additionalStates:(id)a23 providedDropRate:(id)a24 completionQueue:(id)a25 completionBlock:(id)a26;
+ (void)captureNetSelectionHarvestWithHarvestData:(id)a3;
+ (void)captureNetSelectionHarvestWithHarvestData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureNetworkEventForDataRequestKind:(id)a3 networkService:(int)a4 usedBackgroundURL:(id)a5 requestAppIdentifier:(id)a6 appMajorVersion:(id)a7 appMinorVersion:(id)a8 error:(id)a9 clientMetrics:(id)a10 states:(id)a11;
+ (void)captureOfflineSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureOfflineShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)capturePeriodicSettingsWithMapSettings:(id)a3 mapUiShown:(id)a4 mapsFeatures:(id)a5 mapsUserSettings:(id)a6 routingSettings:(id)a7;
+ (void)capturePeriodicSettingsWithMapSettings:(id)a3 mapUiShown:(id)a4 mapsFeatures:(id)a5 mapsUserSettings:(id)a6 routingSettings:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11;
+ (void)capturePlaceCacheLookupWithRequestAppIdentifier:(id)a3 businessId:(id)a4 localSearchProviderID:(id)a5 bytes:(id)a6 lookupResult:(int)a7;
+ (void)capturePlaceCacheLookupWithRequestAppIdentifier:(id)a3 businessId:(id)a4 localSearchProviderID:(id)a5 bytes:(id)a6 lookupResult:(int)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11;
+ (void)capturePlaceCardImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 moduleType:(int)a8 isEnriched:(BOOL)a9 impressionEvent:(unsigned int)a10 impressionVisibleTimestamp:(double)a11 impressionNonvisibleTimestamp:(double)a12;
+ (void)capturePlaceCardRevealWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 placeCardType:(int)a8 categoriesDisplayed:(id)a9 categorySelected:(id)a10;
+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 actionURL:(id)a12 photoID:(id)a13 placeCardType:(int)a14 localizedMapItemCategory:(id)a15 availableActions:(id)a16 unactionableUIElements:(id)a17 commingledRichProviderIds:(id)a18;
+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 actionURL:(id)a12 photoID:(id)a13 placeCardType:(int)a14 localizedMapItemCategory:(id)a15 availableActions:(id)a16 unactionableUIElements:(id)a17 modules:(id)a18 commingledRichProviderIds:(id)a19 actionRichProviderId:(id)a20;
+ (void)capturePlaceSummaryUserAction:(int)a3 target:(int)a4 value:(id)a5 placeSummarySpecifierBlock:(id)a6;
+ (void)capturePoiBusynessDataWithTimestamp:(id)a3 GEOLatLng_lat:(id)a4 GEOLatLng_lng:(id)a5 horizontalAccuracy:(id)a6 verticalAccuracy:(id)a7 altitude:(id)a8 poiPredictions:(id)a9;
+ (void)capturePoiBusynessDataWithTimestamp:(id)a3 GEOLatLng_lat:(id)a4 GEOLatLng_lng:(id)a5 horizontalAccuracy:(id)a6 verticalAccuracy:(id)a7 altitude:(id)a8 poiPredictions:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13;
+ (void)capturePredExSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)capturePredExShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isCarplayConnected:(id)a27 isTourist:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocationGeohash4:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33;
+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isCarplayConnected:(id)a27 isTourist:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocationGeohash4:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33 additionalStates:(id)a34 providedDropRate:(id)a35 completionQueue:(id)a36 completionBlock:(id)a37;
+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isTourist:(id)a27 isCarplayConnected:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocation:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33;
+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isTourist:(id)a26 isCarplayConnected:(id)a27 isTransitPossible:(id)a28 userLocation:(id)a29 isVehicleBluetoothConnected:(id)a30 weatherAqi:(id)a31;
+ (void)capturePressureDataWithPressureData:(id)a3;
+ (void)capturePressureDataWithPressureData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)capturePriorityPlacecardActionShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)capturePriorityShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureProactiveSuggestionInteractionForType:(int)a3 items:(id)a4 interactedWithItemIndex:(int)a5 forDuration:(double)a6;
+ (void)captureProactiveSuggestionWithListType:(int)a3 interactedItemIndex:(id)a4 duration:(id)a5 proactiveItems:(id)a6;
+ (void)captureProactiveSuggestionWithListType:(int)a3 interactedItemIndex:(id)a4 duration:(id)a5 proactiveItems:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureRAPUserAction:(int)a3 target:(int)a4 value:(id)a5 entryPoint:(int)a6 feedbackType:(int)a7 feedbackFieldOptionKeys:(id)a8 rapServerManifestVersion:(id)a9 duration:(id)a10;
+ (void)captureRAPUserAction:(int)a3 target:(int)a4 value:(id)a5 entryPoint:(int)a6 feedbackType:(int)a7 feedbackFieldOptionKeys:(id)a8 rapServerManifestVersion:(id)a9 duration:(id)a10 rapABManifestVersion:(id)a11 rapAPBranchId:(id)a12;
+ (void)captureRapSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureRapShortAndSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureRapUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureRealTrafficWithLocationCollection:(id)a3;
+ (void)captureRealTrafficWithLocationCollection:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureRideBookedWithRideBookedSessionId:(id)a3 bookedUsingMaps:(id)a4 cancelled:(id)a5 contactedDriver:(id)a6 viewedInProactiveTray:(id)a7 tappedProactiveTrayItem:(id)a8 viewedDetails:(id)a9 invalidVehicleLocation:(id)a10 missingVehicleLocation:(id)a11 rideAppId:(id)a12 rideAppVersion:(id)a13 intentResponseFailures:(id)a14;
+ (void)captureRideBookedWithRideBookedSessionId:(id)a3 bookedUsingMaps:(id)a4 cancelled:(id)a5 contactedDriver:(id)a6 viewedInProactiveTray:(id)a7 tappedProactiveTrayItem:(id)a8 viewedDetails:(id)a9 invalidVehicleLocation:(id)a10 missingVehicleLocation:(id)a11 rideAppId:(id)a12 rideAppVersion:(id)a13 intentResponseFailures:(id)a14 additionalStates:(id)a15 providedDropRate:(id)a16 completionQueue:(id)a17 completionBlock:(id)a18;
+ (void)captureRideBookingWithRideBookingSessionId:(id)a3 statusIssue:(int)a4 endState:(int)a5 endView:(int)a6 rideAppId:(id)a7 rideAppVersion:(id)a8 originBlurred:(id)a9 destinationBlurred:(id)a10 exploredOtherOptions:(id)a11 distanceToPickupInMeters:(id)a12 paymentIsApplePay:(id)a13 numberOfAvailableExtensions:(id)a14 switchedApp:(id)a15 comparedRideOptions:(id)a16 showedSurgePricingAlert:(id)a17 durationOfSessionInSeconds:(id)a18 installedApp:(id)a19 timestamp:(id)a20 unavailable:(id)a21 movedPickupLocation:(id)a22 errorMessages:(id)a23 intentResponseFailures:(id)a24;
+ (void)captureRideBookingWithRideBookingSessionId:(id)a3 statusIssue:(int)a4 endState:(int)a5 endView:(int)a6 rideAppId:(id)a7 rideAppVersion:(id)a8 originBlurred:(id)a9 destinationBlurred:(id)a10 exploredOtherOptions:(id)a11 distanceToPickupInMeters:(id)a12 paymentIsApplePay:(id)a13 numberOfAvailableExtensions:(id)a14 switchedApp:(id)a15 comparedRideOptions:(id)a16 showedSurgePricingAlert:(id)a17 durationOfSessionInSeconds:(id)a18 installedApp:(id)a19 timestamp:(id)a20 unavailable:(id)a21 movedPickupLocation:(id)a22 errorMessages:(id)a23 intentResponseFailures:(id)a24 additionalStates:(id)a25 providedDropRate:(id)a26 completionQueue:(id)a27 completionBlock:(id)a28;
+ (void)captureSearchResultImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 isEnriched:(BOOL)a8 impressionEvent:(unsigned int)a9 impressionVisibleTimestamp:(double)a10 impressionNonvisibleTimestamp:(double)a11;
+ (void)captureServiceMetadataWithServiceMetadataType:(int)a3 directionsMetadata:(id)a4 placesMetadata:(id)a5;
+ (void)captureServiceMetadataWithServiceMetadataType:(int)a3 directionsMetadata:(id)a4 placesMetadata:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureSessionlessUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureShowcaseSuppressionEventWithBusinessId:(unint64_t)a3 localSearchProviderID:(unsigned int)a4 showcaseId:(id)a5 adamId:(id)a6 suppressionReason:(int)a7;
+ (void)captureShowcaseSuppressionWithBusinessId:(id)a3 localSearchProviderID:(id)a4 showcaseId:(id)a5 suppressionReason:(int)a6 adamId:(id)a7;
+ (void)captureShowcaseSuppressionWithBusinessId:(id)a3 localSearchProviderID:(id)a4 showcaseId:(id)a5 suppressionReason:(int)a6 adamId:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11;
+ (void)captureStandardShortWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureTableBookedEventWithSessionId:(id)a3 bookedUsingMaps:(BOOL)a4 cancelled:(BOOL)a5 viewedInProactiveTray:(BOOL)a6 tappedProactiveTrayItem:(BOOL)a7 viewedInPlacecard:(BOOL)a8 viewedDetailsInPlacecard:(BOOL)a9 isAsync:(BOOL)a10 bookedAppId:(id)a11 muid:(unint64_t)a12 called:(BOOL)a13 routed:(BOOL)a14 tappedChangeReservation:(BOOL)a15 tappedCancelReservation:(BOOL)a16;
+ (void)captureTableBookedWithBookedTableSessionId:(id)a3 bookedTables:(id)a4;
+ (void)captureTableBookedWithBookedTableSessionId:(id)a3 bookedTables:(id)a4 additionalStates:(id)a5 providedDropRate:(id)a6 completionQueue:(id)a7 completionBlock:(id)a8;
+ (void)captureTableBookingWithBookTableSessionId:(id)a3 endState:(int)a4 endView:(int)a5 bookTableAppId:(id)a6 muid:(id)a7 blurredReservationTimestamp:(id)a8 blurredBookingTimestamp:(id)a9 durationOfSessionInSeconds:(id)a10 installNeeded:(id)a11 installNeededTappedAppId:(id)a12 installCompleted:(id)a13 tableSize:(id)a14 addedSpecialRequest:(id)a15 swipedAvailableTimes:(id)a16 tappedDatePicker:(id)a17 errorMessages:(id)a18;
+ (void)captureTableBookingWithBookTableSessionId:(id)a3 endState:(int)a4 endView:(int)a5 bookTableAppId:(id)a6 muid:(id)a7 blurredReservationTimestamp:(id)a8 blurredBookingTimestamp:(id)a9 durationOfSessionInSeconds:(id)a10 installNeeded:(id)a11 installNeededTappedAppId:(id)a12 installCompleted:(id)a13 tableSize:(id)a14 addedSpecialRequest:(id)a15 swipedAvailableTimes:(id)a16 tappedDatePicker:(id)a17 errorMessages:(id)a18 additionalStates:(id)a19 providedDropRate:(id)a20 completionQueue:(id)a21 completionBlock:(id)a22;
+ (void)captureTelemetricEntityCountForEventKey:(int)a3 eventDetail:(id)a4;
+ (void)captureTelemetricEntityCountForEventKey:(int)a3 eventValue:(unint64_t)a4 eventDetail:(id)a5;
+ (void)captureTelemetricWithTelemetricEntitys:(id)a3;
+ (void)captureTelemetricWithTelemetricEntitys:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureThrottleEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 throttleType:(int)a5 throttleMode:(int)a6 throttleReqType:(id)a7 throttleTriggerCount:(id)a8 throttleTriggerDuration:(id)a9 throttleCount:(id)a10 throttleDuration:(id)a11;
+ (void)captureThrottleEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 throttleType:(int)a5 throttleMode:(int)a6 throttleReqType:(id)a7 throttleTriggerCount:(id)a8 throttleTriggerDuration:(id)a9 throttleCount:(id)a10 throttleDuration:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15;
+ (void)captureTileSetStateWithTileSetStateType:(int)a3 newCoverage:(id)a4 oldCoverage:(id)a5 durationInOldState:(id)a6;
+ (void)captureTileSetStateWithTileSetStateType:(int)a3 newCoverage:(id)a4 oldCoverage:(id)a5 durationInOldState:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureTimeToLeaveHypothesisEventWithEarlyDepartureDelta:(double)a3 lateDepartureDelta:(double)a4 earlyArrivalDelta:(double)a5 lateArrivalDelta:(double)a6 rerouteCount:(unint64_t)a7 uiNotification:(int)a8;
+ (void)captureTimeToLeaveIntialTravelTimeEventWithTravelTime:(double)a3;
+ (void)captureTransitAppLaunchSource:(id)a3 destination:(id)a4 bundleIdentifier:(id)a5;
+ (void)captureTransitAppLaunchWithBundleIdentifier:(id)a3 source:(id)a4 destination:(id)a5 timestamp:(id)a6;
+ (void)captureTransitAppLaunchWithBundleIdentifier:(id)a3 source:(id)a4 destination:(id)a5 timestamp:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10;
+ (void)captureTransitPlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 transitCardCategory:(int)a12 transitSystem:(id)a13 transitDepartureSequence:(id)a14 transitIncident:(id)a15;
+ (void)captureTransitShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureTripDepartureWithTransportMode:(int)a3 distanceFromOrigin:(id)a4 timeFromOrigin:(id)a5;
+ (void)captureTripDepartureWithTransportMode:(int)a3 distanceFromOrigin:(id)a4 timeFromOrigin:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureTtlHypothesisWithArrival:(int)a3 departure:(int)a4 ttlUiNotificationShown:(int)a5 earliestArrivalOffset:(id)a6 earliestDepartureOffset:(id)a7 latestArrivalOffset:(id)a8 latestDepartureOffset:(id)a9 numberOfReroutes:(id)a10;
+ (void)captureTtlHypothesisWithArrival:(int)a3 departure:(int)a4 ttlUiNotificationShown:(int)a5 earliestArrivalOffset:(id)a6 earliestDepartureOffset:(id)a7 latestArrivalOffset:(id)a8 latestDepartureOffset:(id)a9 numberOfReroutes:(id)a10 additionalStates:(id)a11 providedDropRate:(id)a12 completionQueue:(id)a13 completionBlock:(id)a14;
+ (void)captureTtlInitialTimeWithTravelTime:(id)a3;
+ (void)captureTtlInitialTimeWithTravelTime:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)captureUGCSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureUGCShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureUGCUserAction:(int)a3 target:(int)a4 value:(id)a5 photoSources:(id)a6;
+ (void)captureUgcDeleteLogsWithCertificates:(id)a3 signature:(id)a4 trigger:(int)a5;
+ (void)captureUgcDeleteLogsWithCertificates:(id)a3 signature:(id)a4 trigger:(int)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9;
+ (void)captureUgcDeleteWithSignature:(id)a3 certificates:(id)a4 queue:(id)a5 completion:(id)a6;
+ (void)captureUgcDeleteWithSignature:(id)a3 certificates:(id)a4 trigger:(int)a5 queue:(id)a6 completion:(id)a7;
+ (void)captureUserAccountUserAction:(int)a3 target:(int)a4 value:(id)a5 signedIntoIcloud:(id)a6 possibleActionsReadBlock:(id)a7;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 actionRichProviderId:(id)a6;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 categoriesDisplayed:(id)a6 categorySelected:(id)a7;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 categoriesMetadataDisplayed:(id)a6 categoryMetadataSelected:(id)a7;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 mapRegion:(id)a6 zoomLevel:(double)a7 mapType:(int)a8;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 mapsServerMetadata:(id)a6;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(int)a6 moduleMetadata:(id)a7;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 placeActionDetails:(id)a6;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 placeActionDetails:(id)a6 mapRegion:(id)a7 zoomLevel:(double)a8 mapType:(int)a9;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 routeDetails:(id)a6;
+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 transitStep:(id)a6;
+ (void)captureVisualIntelligenceShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12;
+ (void)captureVlfUsageWithEntryPoint:(id)a3 sessionTimeMs:(id)a4 timeRoundedToHour:(id)a5 localizationDetails:(id)a6 finalState:(int)a7 postFusionCorrection:(id)a8 initialPositionContextClassification:(GEOVLFPositionContextClassification *)a9 initialLocation:(id)a10 initializationFailureDetails:(id)a11 arStates:(id)a12 deviceOrientations:(id)a13 crowdsourcingDetails:(id)a14 arFailureTypes:(id)a15;
+ (void)captureVlfUsageWithEntryPoint:(id)a3 sessionTimeMs:(id)a4 timeRoundedToHour:(id)a5 localizationDetails:(id)a6 finalState:(int)a7 postFusionCorrection:(id)a8 initialPositionContextClassification:(GEOVLFPositionContextClassification *)a9 initialLocation:(id)a10 initializationFailureDetails:(id)a11 arStates:(id)a12 deviceOrientations:(id)a13 crowdsourcingDetails:(id)a14 arFailureTypes:(id)a15 additionalStates:(id)a16 providedDropRate:(id)a17 completionQueue:(id)a18 completionBlock:(id)a19;
+ (void)captureWaypointManipulationUserAction:(int)a3 target:(int)a4 value:(id)a5 originalNumberOfStops:(id)a6 originalWaypointId:(id)a7 finalWaypointId:(id)a8;
+ (void)captureWidgetInteractionWithMapsWidgetType:(int)a3 endState:(int)a4 lockedMode:(id)a5 localHour:(id)a6 localDayOfWeek:(id)a7 duration:(id)a8 mapsNearbyWidget:(id)a9 mapsTransitWidget:(id)a10 mapsDestinationsWidget:(id)a11;
+ (void)captureWidgetInteractionWithMapsWidgetType:(int)a3 endState:(int)a4 lockedMode:(id)a5 localHour:(id)a6 localDayOfWeek:(id)a7 duration:(id)a8 mapsNearbyWidget:(id)a9 mapsTransitWidget:(id)a10 mapsDestinationsWidget:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15;
+ (void)captureWifiProbeWithWifiConnectionQuality:(id)a3;
+ (void)captureWifiProbeWithWifiConnectionQuality:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7;
+ (void)populateCommonEventValues:(id)a3;
+ (void)processMapsDeletionWithCompletionQueue:(id)a3 completion:(id)a4;
+ (void)reportDailyUsageCountType:(int)a3;
+ (void)reportLogMsgEvent:(id)a3 uploadBatchId:(unint64_t)a4 completion:(id)a5 completionQueue:(id)a6;
@end

@implementation GEOAPPortal

+ (void)captureEnterMapsShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v325 = *MEMORY[0x263EF8340];
  id v313 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v324 = "+[GEOAPPortal(UserActionCodeGen) captureEnterMapsShortUserActionTargetPairWithAction:target:value:moduleType:"
           "moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      v287 = v22;
      id v289 = v20;
      id v309 = v18;
      unint64_t v310 = (unint64_t)v17;
      unint64_t v291 = (unint64_t)v16;
      id v290 = v19;
      v288 = v21;
      if ([v19 count])
      {
        v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v318 = 0u;
        long long v319 = 0u;
        long long v320 = 0u;
        long long v321 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v318 objects:v322 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v319;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v319 != v29) {
                objc_enumerationMutation(v26);
              }
              v31 = *(void **)(*((void *)&v318 + 1) + 8 * i);
              v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v318 objects:v322 count:16];
          }
          while (v28);
        }

        v33 = (void *)[v25 copy];
      }
      else
      {
        v33 = 0;
      }
      v34 = NSNumber;
      v35 = +[GEOAPStateFactory sharedFactory];
      v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      v37 = [v33 objectForKeyedSubscript:v36];
      v38 = v37;
      unsigned int v286 = a4;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      v43 = (void *)v42;
      if (v42) {
        v44 = (void *)v42;
      }
      else {
        v44 = v39;
      }
      id v45 = v44;

      v46 = NSNumber;
      v47 = +[GEOAPStateFactory sharedFactory];
      v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      v49 = [v33 objectForKeyedSubscript:v48];
      v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v33 objectForKeyedSubscript:v53];
      v55 = (void *)v54;
      if (v54) {
        v56 = (void *)v54;
      }
      else {
        v56 = v51;
      }
      id v57 = v56;

      v58 = NSNumber;
      v59 = +[GEOAPStateFactory sharedFactory];
      v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      v61 = [v33 objectForKeyedSubscript:v60];
      v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:16];
      }
      v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v33 objectForKeyedSubscript:v65];
      v67 = (void *)v66;
      if (v66) {
        v68 = (void *)v66;
      }
      else {
        v68 = v63;
      }
      id v307 = v68;

      v69 = NSNumber;
      v70 = +[GEOAPStateFactory sharedFactory];
      v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 35));

      v72 = [v33 objectForKeyedSubscript:v71];
      v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:35];
      }
      v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v33 objectForKeyedSubscript:v76];
      v78 = (void *)v77;
      if (v77) {
        v79 = (void *)v77;
      }
      else {
        v79 = v74;
      }
      id v306 = v79;

      v80 = NSNumber;
      v81 = +[GEOAPStateFactory sharedFactory];
      v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 30));

      v83 = [v33 objectForKeyedSubscript:v82];
      v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:30];
      }
      v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v33 objectForKeyedSubscript:v87];
      v89 = (void *)v88;
      if (v88) {
        v90 = (void *)v88;
      }
      else {
        v90 = v85;
      }
      id v305 = v90;

      v91 = NSNumber;
      v92 = +[GEOAPStateFactory sharedFactory];
      v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 0));

      v94 = [v33 objectForKeyedSubscript:v93];
      v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:0];
      }
      v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v33 objectForKeyedSubscript:v98];
      v100 = (void *)v99;
      if (v99) {
        v101 = (void *)v99;
      }
      else {
        v101 = v96;
      }
      id v304 = v101;

      v102 = NSNumber;
      v103 = +[GEOAPStateFactory sharedFactory];
      v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 3));

      v105 = [v33 objectForKeyedSubscript:v104];
      v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:3];
      }
      v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v33 objectForKeyedSubscript:v109];
      v111 = (void *)v110;
      if (v110) {
        v112 = (void *)v110;
      }
      else {
        v112 = v107;
      }
      id v303 = v112;

      v113 = NSNumber;
      v114 = +[GEOAPStateFactory sharedFactory];
      v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 41));

      v116 = [v33 objectForKeyedSubscript:v115];
      v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:41];
      }
      v120 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v121 = [v33 objectForKeyedSubscript:v120];
      v122 = (void *)v121;
      if (v121) {
        v123 = (void *)v121;
      }
      else {
        v123 = v118;
      }
      id v302 = v123;

      v124 = NSNumber;
      v125 = +[GEOAPStateFactory sharedFactory];
      v126 = objc_msgSend(v124, "numberWithInt:", objc_msgSend(v125, "logMsgStateTypeForType:", 26));

      v127 = [v33 objectForKeyedSubscript:v126];
      v128 = v127;
      if (v127)
      {
        id v129 = v127;
      }
      else
      {
        v130 = +[GEOAPStateFactory sharedFactory];
        id v129 = [v130 stateForType:26];
      }
      v131 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v129, "stateType"));
      uint64_t v132 = [v33 objectForKeyedSubscript:v131];
      v133 = (void *)v132;
      if (v132) {
        v134 = (void *)v132;
      }
      else {
        v134 = v129;
      }
      id v301 = v134;

      v135 = NSNumber;
      v136 = +[GEOAPStateFactory sharedFactory];
      v137 = objc_msgSend(v135, "numberWithInt:", objc_msgSend(v136, "logMsgStateTypeForType:", 64));

      v138 = [v33 objectForKeyedSubscript:v137];
      v139 = v138;
      if (v138)
      {
        id v140 = v138;
      }
      else
      {
        v141 = +[GEOAPStateFactory sharedFactory];
        id v140 = [v141 stateForType:64];
      }
      v142 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v140, "stateType"));
      uint64_t v143 = [v33 objectForKeyedSubscript:v142];
      v144 = (void *)v143;
      if (v143) {
        v145 = (void *)v143;
      }
      else {
        v145 = v140;
      }
      id v300 = v145;

      v146 = NSNumber;
      v147 = +[GEOAPStateFactory sharedFactory];
      v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 13));

      v149 = [v33 objectForKeyedSubscript:v148];
      v150 = v149;
      if (v149)
      {
        id v151 = v149;
      }
      else
      {
        v152 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v152 stateForType:13];
      }
      v153 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v151, "stateType"));
      uint64_t v154 = [v33 objectForKeyedSubscript:v153];
      v155 = (void *)v154;
      if (v154) {
        v156 = (void *)v154;
      }
      else {
        v156 = v151;
      }
      id v299 = v156;

      v157 = NSNumber;
      v158 = +[GEOAPStateFactory sharedFactory];
      v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 14));

      v160 = [v33 objectForKeyedSubscript:v159];
      v161 = v160;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:14];
      }
      v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v33 objectForKeyedSubscript:v164];
      v166 = (void *)v165;
      if (v165) {
        v167 = (void *)v165;
      }
      else {
        v167 = v162;
      }
      id v298 = v167;

      v168 = NSNumber;
      v169 = +[GEOAPStateFactory sharedFactory];
      v170 = objc_msgSend(v168, "numberWithInt:", objc_msgSend(v169, "logMsgStateTypeForType:", 9));

      v171 = [v33 objectForKeyedSubscript:v170];
      v172 = v171;
      if (v171)
      {
        id v173 = v171;
      }
      else
      {
        v174 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v174 stateForType:9];
      }
      v175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v173, "stateType"));
      uint64_t v176 = [v33 objectForKeyedSubscript:v175];
      v177 = (void *)v176;
      if (v176) {
        v178 = (void *)v176;
      }
      else {
        v178 = v173;
      }
      id v297 = v178;

      v179 = NSNumber;
      v180 = +[GEOAPStateFactory sharedFactory];
      v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 10));

      v182 = [v33 objectForKeyedSubscript:v181];
      v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:10];
      }
      v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v33 objectForKeyedSubscript:v186];
      v188 = (void *)v187;
      if (v187) {
        v189 = (void *)v187;
      }
      else {
        v189 = v184;
      }
      id v296 = v189;

      v190 = NSNumber;
      v191 = +[GEOAPStateFactory sharedFactory];
      v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 20));

      v193 = [v33 objectForKeyedSubscript:v192];
      v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:20];
      }
      v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v33 objectForKeyedSubscript:v197];
      v199 = (void *)v198;
      if (v198) {
        v200 = (void *)v198;
      }
      else {
        v200 = v195;
      }
      id v295 = v200;

      v201 = NSNumber;
      v202 = +[GEOAPStateFactory sharedFactory];
      v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 42));

      v204 = [v33 objectForKeyedSubscript:v203];
      v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:42];
      }
      v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v33 objectForKeyedSubscript:v208];
      v210 = (void *)v209;
      if (v209) {
        v211 = (void *)v209;
      }
      else {
        v211 = v206;
      }
      id v294 = v211;

      v212 = NSNumber;
      v213 = +[GEOAPStateFactory sharedFactory];
      v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 70));

      v215 = [v33 objectForKeyedSubscript:v214];
      v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:70];
      }
      v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v33 objectForKeyedSubscript:v219];
      v221 = (void *)v220;
      if (v220) {
        v222 = (void *)v220;
      }
      else {
        v222 = v217;
      }
      id v285 = v222;

      v223 = NSNumber;
      v224 = +[GEOAPStateFactory sharedFactory];
      v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 7));

      v226 = [v33 objectForKeyedSubscript:v225];
      v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:7];
      }
      v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v33 objectForKeyedSubscript:v230];
      v232 = (void *)v231;
      if (v231) {
        v233 = (void *)v231;
      }
      else {
        v233 = v228;
      }
      id v293 = v233;

      v234 = NSNumber;
      v235 = +[GEOAPStateFactory sharedFactory];
      v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 17));

      v237 = [v33 objectForKeyedSubscript:v236];
      v238 = v237;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:17];
      }
      v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v33 objectForKeyedSubscript:v241];
      v243 = (void *)v242;
      if (v242) {
        v244 = (void *)v242;
      }
      else {
        v244 = v239;
      }
      id v292 = v244;

      v245 = NSNumber;
      v246 = +[GEOAPStateFactory sharedFactory];
      v247 = objc_msgSend(v245, "numberWithInt:", objc_msgSend(v246, "logMsgStateTypeForType:", 19));

      v248 = [v33 objectForKeyedSubscript:v247];
      v249 = v248;
      v308 = v57;
      if (v248)
      {
        id v250 = v248;
      }
      else
      {
        v251 = +[GEOAPStateFactory sharedFactory];
        id v250 = [v251 stateForType:19];
      }
      v252 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v250, "stateType"));
      uint64_t v253 = [v33 objectForKeyedSubscript:v252];
      v254 = (void *)v253;
      if (v253) {
        v255 = (void *)v253;
      }
      else {
        v255 = v250;
      }
      id v256 = v255;

      v257 = NSNumber;
      v258 = +[GEOAPStateFactory sharedFactory];
      uint64_t v259 = objc_msgSend(v257, "numberWithInt:", objc_msgSend(v258, "logMsgStateTypeForType:", 27));

      v284 = (void *)v259;
      v260 = [v33 objectForKeyedSubscript:v259];
      v261 = v260;
      if (v260)
      {
        id v262 = v260;
      }
      else
      {
        v263 = +[GEOAPStateFactory sharedFactory];
        id v262 = [v263 stateForType:27];
      }
      id v16 = (id)v291;

      v264 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v262, "stateType"));
      uint64_t v265 = [v33 objectForKeyedSubscript:v264];
      v266 = (void *)v265;
      if (v265) {
        v267 = (void *)v265;
      }
      else {
        v267 = v262;
      }
      id v268 = v267;

      id v269 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v269 setEventType:1];
      id v270 = objc_alloc_init(MEMORY[0x263F41958]);
      [v269 setUserActionEvent:v270];

      v271 = [v269 userActionEvent];
      [v271 setUserActionEventAction:a3];

      v272 = [v269 userActionEvent];
      [v272 setUserActionEventTarget:v286];

      v273 = [v269 userActionEvent];
      [v273 setUserActionEventValue:v313];

      v274 = [v269 userActionEvent];
      [v274 setActionRichProviderId:v309];

      id v17 = (id)v310;
      v312 = v45;
      if (v291 | v310)
      {
        id v275 = objc_alloc_init(MEMORY[0x263F41960]);
        v276 = [v269 userActionEvent];
        [v276 setModuleInfo:v275];

        if (v291)
        {
          uint64_t v277 = [(id)v291 intValue];
          v278 = [v269 userActionEvent];
          v279 = [v278 moduleInfo];
          [v279 setType:v277];

          id v45 = v312;
          id v16 = (id)v291;
        }
        id v17 = (id)v310;
        if (v310)
        {
          v280 = [v269 userActionEvent];
          v281 = [v280 moduleInfo];
          [v281 setModuleMetadata:v310];

          id v17 = (id)v310;
        }
      }
      if (v45) {
        [v269 addLogMsgState:v45];
      }
      if (v308) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v307) {
        [v269 addLogMsgState:v307];
      }
      if (v306) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v305) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v304) {
        [v269 addLogMsgState:v304];
      }
      if (v303) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v302) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v301) {
        [v269 addLogMsgState:v301];
      }
      if (v300) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v299) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v298) {
        [v269 addLogMsgState:v298];
      }
      if (v297) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v296) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v295) {
        [v269 addLogMsgState:v295];
      }
      if (v294) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v293) {
        [v269 addLogMsgState:v293];
      }
      if (v292) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v256) {
        [v269 addLogMsgState:v256];
      }
      if (v268) {
        [v269 addLogMsgState:v268];
      }
      if (v285) {
        [v269 addLogMsgState:v285];
      }
      v282 = +[GEOAPStateFactory sharedFactory];
      v314[0] = MEMORY[0x263EF8330];
      v314[1] = 3221225472;
      v314[2] = __206__GEOAPPortal_UserActionCodeGen__captureEnterMapsShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v314[3] = &unk_2653457B8;
      id v283 = v269;
      id v315 = v283;
      id v22 = v287;
      id v317 = v287;
      id v316 = v288;
      [v282 sessionStateForType:6 callback:v314];

      id v21 = v288;
      id v18 = v309;
      id v20 = v289;
      id v19 = v290;
    }
  }
}

uint64_t __193__GEOAPPortal_UserActionCodeGen__captureSessionlessUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

uint64_t __206__GEOAPPortal_UserActionCodeGen__captureEnterMapsShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

uint64_t __185__GEOAPPortal_UserActionCodeGen__captureStandardShortWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5
{
}

+ (void)reportDailyUsageCountType:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  id v4 = +[GEOAPServiceManager sharedManager];
  [v4 reportDailyUsageCountType:v3];
}

void __172__GEOAPPortal_UserActionCodeGen__captureUserAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, int a2, double a3)
{
  if (a2)
  {
    +[GEOAPSequencesManager sharedManager]();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    -[GEOAPSequencesManager processUserAction:target:atTime:]((uint64_t)v5, *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36), a3);
  }
}

+ (void)reportLogMsgEvent:(id)a3 uploadBatchId:(unint64_t)a4 completion:(id)a5 completionQueue:(id)a6
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  unint64_t v67 = a4;
  uint64_t v10 = GEOBatchLogMessageType();
  v11 = [MEMORY[0x263F41B90] sharedPlatform];
  int v12 = [v11 isInternalInstall];

  if (v12)
  {
    v13 = GEOGetGEOAPPortalAnalyticsLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
LABEL_104:

      goto LABEL_105;
    }
    uint64_t v14 = [v8 eventType];
    v15 = @"LOG_MSG_EVENT_TYPE_UNKNOWN";
    switch((int)v14)
    {
      case 0:
        break;
      case 1:
        v15 = @"USER_ACTION";
        break;
      case 2:
        v15 = @"STATE_TIMING";
        break;
      case 4:
        v15 = @"TILE_SET_STATE";
        break;
      case 5:
        v15 = @"PLACE_DATA_CACHE";
        break;
      case 6:
        v15 = @"NETWORK";
        break;
      case 7:
        v15 = @"CACHE_HIT";
        break;
      case 8:
        v15 = @"DIRECTIONS";
        break;
      case 9:
        v15 = @"TRANSIT_APP_LAUNCH";
        break;
      case 10:
        v15 = @"TIME_TO_LEAVE_HYPOTHESIS";
        break;
      case 11:
        v15 = @"TIME_TO_LEAVE_INITIAL_TRAVEL_TIME";
        break;
      case 12:
        v15 = @"LOG_FRAMEWORK";
        break;
      case 13:
        v15 = @"MAPS_WIDGETS_SESSION";
        break;
      case 14:
        v15 = @"LIST_INTERACTION_SESSION";
        break;
      case 15:
        v15 = @"REFINE_SEARCH_SESSION";
        break;
      case 16:
        v15 = @"PROACTIVE_SUGGESTION_SESSION";
        break;
      case 17:
        v15 = @"MAP_LAUNCH";
        break;
      case 18:
        v15 = @"RIDE_BOOKING_SESSION";
        break;
      case 19:
        v15 = @"RIDE_BOOKED_SESSION";
        break;
      case 20:
        v15 = @"TABLE_BOOKING_SESSION";
        break;
      case 21:
        v15 = @"TABLE_BOOKED_SESSION";
        break;
      case 22:
        v15 = @"STALE_RESOURCE";
        break;
      case 23:
        v15 = @"FULL_NAV_TRACE";
        break;
      case 24:
        v15 = @"TELEMETRIC";
        break;
      case 25:
        v15 = @"CLIENT_AC_SUGGESTIONS";
        break;
      case 26:
        v15 = @"REALTIME_TRAFFIC_PROBE_COLLECTION";
        break;
      case 27:
        v15 = @"BATCH_TRAFFIC_PROBE_COLLECTION";
        break;
      case 28:
        v15 = @"OFFLINE_REQUEST_RESPONSE";
        break;
      case 29:
        v15 = @"COMMUTE_WINDOW";
        break;
      case 30:
        v15 = @"GENERIC_APP_ERROR";
        break;
      case 31:
        v15 = @"WIFI_CONNECTION_QUALITY_PROBE";
        break;
      case 32:
        v15 = @"PARKED_CAR";
        break;
      case 33:
        v15 = @"TILE_CACHE_ANALYTIC";
        break;
      case 34:
        v15 = @"GRID_DURATION";
        break;
      case 35:
        v15 = @"DISPLAY_ANALYTIC";
        break;
      case 36:
        v15 = @"THROTTLE";
        break;
      case 37:
        v15 = @"MAP_KIT_COUNTS";
        break;
      case 38:
        v15 = @"PRED_EX_TRAINING";
        break;
      case 39:
        v15 = @"MARCOLITE_USAGE";
        break;
      case 40:
        v15 = @"TRIP_DEPARTURE";
        break;
      case 41:
        v15 = @"DIRECTIONS_REQUEST_DETAILS";
        break;
      case 42:
        v15 = @"EV_ROUTING_VEHICLE_DETAILS";
        break;
      case 43:
        v15 = @"EV_TRIP";
        break;
      case 44:
        v15 = @"CURATED_COLLECTION_STATS";
        break;
      case 45:
        v15 = @"CURATED_COLLECTION_USAGE";
        break;
      case 46:
        v15 = @"MAPS_DEVICE_SETTINGS";
        break;
      case 47:
        v15 = @"HARD_STOP";
        break;
      case 48:
        v15 = @"VLF_USAGE";
        break;
      case 49:
        v15 = @"LOG_DISCARD";
        break;
      case 50:
        v15 = @"DAILY_USE_SUMMARY";
        break;
      case 51:
        v15 = @"PRESSURE_DATA";
        break;
      case 52:
        v15 = @"POI_BUSYNESS_DATA";
        break;
      case 53:
        v15 = @"PERIODIC_SETTINGS_SUMMARY";
        break;
      case 54:
        v15 = @"THERMAL_PRESSURE";
        break;
      case 55:
        v15 = @"AR_SESSION_USAGE";
        break;
      case 56:
        v15 = @"NETWORK_SELECTION_HARVEST";
        break;
      case 57:
        v15 = @"IMPRESSION_EVENT";
        break;
      case 58:
        v15 = @"SHOWCASE_SUPPRESSION";
        break;
      case 59:
        v15 = @"PLACE_CACHE_LOOKUP";
        break;
      case 60:
        v15 = @"DEVICE_SYNC_STATUS";
        break;
      case 61:
        v15 = @"MAPS_INTERACTION";
        break;
      case 62:
        v15 = @"NETWORK_EVENT_SUMMARY";
        break;
      case 63:
        v15 = @"SERVICE_METADATA";
        break;
      case 64:
        v15 = @"MAPS_ENGAGEMENT";
        break;
      default:
        objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", v14);
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
        break;
    }
    id v16 = v15;
    if ((int)v10 <= 11999)
    {
      id v17 = @"LOG_MESSAGE_TYPE_UNKNOWN";
      switch((int)v10)
      {
        case 0:
          goto LABEL_103;
        case 1:
          id v17 = @"DEBUGLOG";
          break;
        case 2:
          id v17 = @"CURATED_COLLECTION_SESSION";
          break;
        case 3:
          id v17 = @"FIFTEEN_MONTH_SESSION";
          break;
        case 4:
          id v17 = @"PRESSURE_DATA_SESSION";
          break;
        case 5:
          id v17 = @"POI_BUSYNESS_DATA_SESSION";
          break;
        case 6:
          id v17 = @"FIFTEEN_MONTH_USER_SESSION";
          break;
        case 7:
          id v17 = @"NETWORK_SELECTION_HARVEST_SESSION";
          break;
        default:
          if (v10 == 10000)
          {
            id v17 = @"USAGE";
          }
          else
          {
            if (v10 != 11000) {
              goto LABEL_91;
            }
            id v17 = @"SHORT_SESSION_USAGE";
          }
          break;
      }
      goto LABEL_103;
    }
    if ((int)v10 > 29999)
    {
      switch((int)v10)
      {
        case 50000:
          id v17 = @"REALTIME_TRAFFIC_PROBE";
          break;
        case 50001:
          id v17 = @"BATCH_TRAFFIC_PROBE";
          break;
        case 50002:
          id v17 = @"WIFI_CONNECTION_QUALITY_PROBE_COLLECTION";
          break;
        case 50003:
          id v17 = @"LOG_DISCARD_EVENT";
          break;
        default:
          if (v10 == 30000)
          {
            id v17 = @"NAVIGATION_TRACE";
          }
          else
          {
            if (v10 != 40000) {
              goto LABEL_91;
            }
            id v17 = @"TELEMETRY";
          }
          break;
      }
      goto LABEL_103;
    }
    if ((int)v10 <= 13999)
    {
      if (v10 == 12000)
      {
        id v17 = @"LONG_SESSION_USAGE";
        goto LABEL_103;
      }
      if (v10 == 13000)
      {
        id v17 = @"SESSIONLESS_USAGE";
        goto LABEL_103;
      }
    }
    else
    {
      switch(v10)
      {
        case 0x36B0:
          id v17 = @"LONG_SESSION_LOG_FRAMEWORK_USAGE";
          goto LABEL_103;
        case 0x3A98:
          id v17 = @"COHORTS_SESSION_USAGE";
          goto LABEL_103;
        case 0x4E20:
          id v17 = @"PERFORMANCE";
LABEL_103:
          *(_DWORD *)buf = 138412802;
          id v85 = v16;
          __int16 v86 = 2112;
          v87 = v17;
          __int16 v88 = 2112;
          id v89 = v8;
          _os_log_impl(&dword_24FE56000, v13, OS_LOG_TYPE_DEBUG, "logged event type %@, session type %@\nevent: %@", buf, 0x20u);

          goto LABEL_104;
      }
    }
LABEL_91:
    objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", v10);
    id v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_103;
  }
LABEL_105:
  if (v10 != 12000)
  {
    if (v10 != 11000) {
      goto LABEL_135;
    }
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    id v18 = [v8 logMsgStates];
    uint64_t v19 = [v18 countByEnumeratingWithState:&v77 objects:v83 count:16];
    if (!v19) {
      goto LABEL_134;
    }
    uint64_t v20 = v19;
    uint64_t v21 = v10;
    id v22 = v9;
    uint64_t v23 = *(void *)v78;
    while (2)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v78 != v23) {
          objc_enumerationMutation(v18);
        }
        v25 = *(void **)(*((void *)&v77 + 1) + 8 * i);
        if ([v25 hasCarPlay])
        {
          id v26 = [v25 carPlay];
          int v27 = [v26 isConnected];

          if (v27)
          {
            v36 = +[GEOAPSharedStateData sharedData];
            if ([v36 mapsInOfflineMode]) {
              uint64_t v37 = 229;
            }
            else {
              uint64_t v37 = 23;
            }

            v38 = +[GEOAPServiceManager sharedManager];
            id v39 = +[GEOAPUtils GEOAPApplicationIdentifier];
            [v38 reportDailyUsageCountType:v37 usageString:0 usageBool:0 appId:v39];

            goto LABEL_132;
          }
        }
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v77 objects:v83 count:16];
      if (v20) {
        continue;
      }
      goto LABEL_133;
    }
  }
  uint64_t v28 = [v8 networkEvent];
  uint64_t v29 = [v28 requestAppIdentifier];
  uint64_t v30 = *MEMORY[0x263F416F0];
  int v31 = [v29 isEqualToString:*MEMORY[0x263F416F0]];

  if (!v31) {
    goto LABEL_135;
  }
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  id v18 = [v8 logMsgStates];
  uint64_t v32 = [v18 countByEnumeratingWithState:&v73 objects:v82 count:16];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v21 = v10;
    id v22 = v9;
    uint64_t v34 = *(void *)v74;
    while (2)
    {
      for (uint64_t j = 0; j != v33; ++j)
      {
        if (*(void *)v74 != v34) {
          objc_enumerationMutation(v18);
        }
        if ([*(id *)(*((void *)&v73 + 1) + 8 * j) hasPairedDevice])
        {
          v38 = +[GEOAPServiceManager sharedManager];
          [v38 reportDailyUsageCountType:34 usageString:0 usageBool:0 appId:v30];
LABEL_132:

          goto LABEL_133;
        }
      }
      uint64_t v33 = [v18 countByEnumeratingWithState:&v73 objects:v82 count:16];
      if (v33) {
        continue;
      }
      break;
    }
LABEL_133:
    id v9 = v22;
    uint64_t v10 = v21;
  }
LABEL_134:

LABEL_135:
  if ([v8 eventType] == 1)
  {
    id v65 = v9;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    v40 = [v8 logMsgStates];
    uint64_t v41 = [v40 countByEnumeratingWithState:&v69 objects:v81 count:16];
    if (!v41) {
      goto LABEL_156;
    }
    uint64_t v42 = v41;
    uint64_t v43 = *(void *)v70;
    while (1)
    {
      for (uint64_t k = 0; k != v42; ++k)
      {
        if (*(void *)v70 != v43) {
          objc_enumerationMutation(v40);
        }
        id v45 = *(void **)(*((void *)&v69 + 1) + 8 * k);
        if ([v45 hasMapSettings])
        {
          v46 = [v45 mapSettings];
          if ([v46 hasLocationType])
          {
            v47 = [v45 mapSettings];
            int v48 = [v47 locationType];

            if (v48 == 3)
            {
              v49 = +[GEOAPServiceManager sharedManager];
              v50 = +[GEOAPUtils GEOAPApplicationIdentifier];
              id v51 = v49;
              uint64_t v52 = 24;
LABEL_151:
              [v51 reportDailyUsageCountType:v52 usageString:0 usageBool:0 appId:v50];
              goto LABEL_152;
            }
          }
          else
          {
          }
        }
        if (![v45 hasSearchResults]) {
          continue;
        }
        v49 = [v45 searchResults];
        if (![v49 includesEnrichedResult]) {
          goto LABEL_153;
        }
        v50 = [v8 userActionEvent];
        if ([v50 userActionEventAction] == 2015)
        {
          v53 = [v8 userActionEvent];
          int v54 = [v53 userActionEventTarget];

          if (v54 != 101) {
            continue;
          }
          v49 = +[GEOAPServiceManager sharedManager];
          v50 = +[GEOAPUtils GEOAPApplicationIdentifier];
          id v51 = v49;
          uint64_t v52 = 175;
          goto LABEL_151;
        }
LABEL_152:

LABEL_153:
      }
      uint64_t v42 = [v40 countByEnumeratingWithState:&v69 objects:v81 count:16];
      if (!v42)
      {
LABEL_156:

        v55 = [v8 userActionEvent];
        if ([v55 userActionEventAction] == 19)
        {

          id v9 = v65;
          goto LABEL_165;
        }
        v60 = [v8 userActionEvent];
        int v61 = [v60 userActionEventAction];

        id v9 = v65;
        if (v61 == 2196)
        {
LABEL_165:
          v58 = [a1 captureQueue];
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = __74__GEOAPPortal_reportLogMsgEvent_uploadBatchId_completion_completionQueue___block_invoke;
          block[3] = &__block_descriptor_40_e5_v8__0l;
          block[4] = a1;
          dispatch_async(v58, block);
          goto LABEL_166;
        }
        goto LABEL_167;
      }
    }
  }
  if ([v8 eventType] == 25 && objc_msgSend(a1, "permittedToCountAC"))
  {
    v56 = +[GEOAPSharedStateData sharedData];
    if ([v56 mapsInOfflineMode]) {
      uint64_t v57 = 228;
    }
    else {
      uint64_t v57 = 22;
    }

    v58 = +[GEOAPServiceManager sharedManager];
    v59 = +[GEOAPUtils GEOAPApplicationIdentifier];
    [v58 reportDailyUsageCountType:v57 usageString:0 usageBool:0 appId:v59];

LABEL_166:
  }
LABEL_167:
  id v62 = objc_alloc_init(MEMORY[0x263F417E0]);
  [v62 setLogMessageType:v10];
  +[GEOAPPortal populateCommonEventValues:v8];
  [v8 clearSensitiveFields:0];
  [v62 addLogMsgEvent:v8];
  id v63 = +[GEOAPServiceManager sharedManager];
  v64 = [v62 data];
  [v63 reportLogMsg:v64 uploadBatchId:v67 completion:v9];
}

+ (void)populateCommonEventValues:(id)a3
{
  id v3 = a3;
  id v4 = [MEMORY[0x263F41B90] sharedPlatform];
  int v5 = [v4 isInternalInstall];

  if (v5)
  {
    uint64_t v6 = [MEMORY[0x263F41BD0] modernManager];
    v7 = [v6 activeTileGroup];
    id v8 = [v7 environment];
    [v3 setMapsEnvironment:v8];
  }
  int BOOL = GEOConfigGetBOOL();
  if (BOOL & 1) != 0 || ((v5 ^ 1))
  {
    if (!BOOL) {
      goto LABEL_15;
    }
  }
  else if ((GEOConfigGetBOOL() & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  id v10 = objc_alloc_init(MEMORY[0x263F41858]);
  if (v5 && GEOConfigGetBOOL())
  {
    if (qword_26B201950 != -1) {
      dispatch_once(&qword_26B201950, &__block_literal_global_13);
    }
    id v11 = (id)qword_26B201948;
    [v10 setDeanonymizeId:GEOConfigGetUInteger()];
  }
  else
  {
    id v11 = objc_alloc_init(MEMORY[0x263F08C38]);
  }
  [v11 getUUIDBytes:&v12];
  [v10 setHigh:v12];
  [v10 setLow:v13];
  [v3 setAnalyticTag:v10];

LABEL_15:
}

+ (id)captureQueue
{
  if (qword_26B201940 != -1) {
    dispatch_once(&qword_26B201940, &__block_literal_global_8);
  }
  v2 = (void *)qword_26B201938;
  return v2;
}

uint64_t __74__GEOAPPortal_reportLogMsgEvent_uploadBatchId_completion_completionQueue___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "captureMapsEngagementWithUser_mapsUseLastDate:", 0);
}

+ (void)captureMapsEngagementWithUser_mapsUseLastDate:(id)a3
{
}

uint64_t __27__GEOAPPortal_captureQueue__block_invoke()
{
  qword_26B201938 = geo_dispatch_queue_create_with_qos();
  return MEMORY[0x270F9A758]();
}

void __127__GEOAPPortal_captureMapsEngagementWithUser_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureMapsEngagementWithUser_mapsUseLastDate:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v69[0] = MEMORY[0x263EF8330];
  v69[1] = 3221225472;
  v69[2] = __127__GEOAPPortal_captureMapsEngagementWithUser_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v69[3] = &unk_265345530;
  id v17 = v16;
  id v71 = v17;
  id v18 = v15;
  id v70 = v18;
  uint64_t v19 = (void (**)(void))MEMORY[0x25337B980](v69);
  uint64_t v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B201958 != -1) {
      dispatch_once(&qword_26B201958, &__block_literal_global_20);
    }
    if (_MergedGlobals_4) {
      goto LABEL_8;
    }
    double v24 = [MEMORY[0x263F41770] sharedConfiguration];
    v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"mapsEngagement" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_30;
      }
    }
    else if (v26)
    {
      goto LABEL_30;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v28 = +[GEOAPStateFactory sharedFactory];
      uint64_t v29 = [v28 stateForType:48];
      uint64_t v30 = (void *)[v29 copy];

      if (v12)
      {
        [v12 doubleValue];
        double v32 = v31;
        uint64_t v33 = [v30 user];
        [v33 setMapsUseLastDate:v32];
      }
      int v61 = v30;
      id v62 = v25;
      id v60 = v12;
      if ([v13 count])
      {
        id v57 = v17;
        id v58 = v14;
        uint64_t v34 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id v35 = v13;
        uint64_t v36 = [v35 countByEnumeratingWithState:&v65 objects:v72 count:16];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v38 = *(void *)v66;
          do
          {
            for (uint64_t i = 0; i != v37; ++i)
            {
              if (*(void *)v66 != v38) {
                objc_enumerationMutation(v35);
              }
              v40 = *(void **)(*((void *)&v65 + 1) + 8 * i);
              uint64_t v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
              [v34 setObject:v40 forKeyedSubscript:v41];
            }
            uint64_t v37 = [v35 countByEnumeratingWithState:&v65 objects:v72 count:16];
          }
          while (v37);
        }

        uint64_t v42 = (void *)[v34 copy];
        id v17 = v57;
        id v14 = v58;
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v43 = NSNumber;
      v44 = +[GEOAPStateFactory sharedFactory];
      id v45 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v44, "logMsgStateTypeForType:", 49));

      v59 = v42;
      v46 = [v42 objectForKeyedSubscript:v45];
      v47 = v46;
      if (v46)
      {
        id v48 = v46;
      }
      else
      {
        v49 = +[GEOAPStateFactory sharedFactory];
        id v48 = [v49 stateForType:49];
      }
      v25 = v62;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v50 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v50 setEventType:64];
        id v51 = objc_alloc_init(MEMORY[0x263F41878]);
        [v50 setMapsEngagement:v51];

        uint64_t v52 = +[GEOAPUtils currentDailyAggregationTimestamp];
        v53 = [v50 mapsEngagement];
        [v53 setSummaryDate:v52];

        int v54 = [v50 mapsEngagement];
        [v54 setReportingChannel:2];

        if (v48) {
          [v50 addLogMsgState:v48];
        }
        if (v61) {
          objc_msgSend(v50, "addLogMsgState:");
        }
        v55 = +[GEOAPStateFactory sharedFactory];
        v63[0] = MEMORY[0x263EF8330];
        v63[1] = 3221225472;
        v63[2] = __127__GEOAPPortal_captureMapsEngagementWithUser_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v63[3] = &unk_265345680;
        id v64 = v50;
        id v56 = v50;
        [v55 sessionStateForType:2 callback:v63];

        v25 = v62;
      }
      v19[2](v19);

      id v12 = v60;
      goto LABEL_42;
    }
LABEL_30:
    v19[2](v19);
LABEL_42:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v74 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

+ (void)captureSessionlessUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v248 = *MEMORY[0x263EF8340];
  id v16 = a5;
  unint64_t v17 = (unint64_t)a6;
  unint64_t v18 = (unint64_t)a7;
  id v19 = a8;
  id v20 = a9;
  id v235 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v247 = "+[GEOAPPortal(UserActionCodeGen) captureSessionlessUserActionWithAction:target:value:moduleType:moduleMetadat"
           "a:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      v222 = v22;
      id v229 = v19;
      unint64_t v223 = v17;
      id v224 = v20;
      unint64_t v230 = v18;
      if ([v20 count])
      {
        v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v241 = 0u;
        long long v242 = 0u;
        long long v243 = 0u;
        long long v244 = 0u;
        id v26 = v20;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v241 objects:v245 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v242;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v242 != v29) {
                objc_enumerationMutation(v26);
              }
              double v31 = *(void **)(*((void *)&v241 + 1) + 8 * i);
              double v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v241 objects:v245 count:16];
          }
          while (v28);
        }

        uint64_t v33 = (void *)[v25 copy];
        unint64_t v17 = v223;
        unint64_t v18 = v230;
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = NSNumber;
      id v35 = +[GEOAPStateFactory sharedFactory];
      uint64_t v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 2));

      uint64_t v37 = [v33 objectForKeyedSubscript:v36];
      uint64_t v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:2];
      }
      uint64_t v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        v44 = (void *)v42;
      }
      else {
        v44 = v39;
      }
      id v228 = v44;

      id v45 = NSNumber;
      v46 = +[GEOAPStateFactory sharedFactory];
      v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 6));

      id v48 = [v33 objectForKeyedSubscript:v47];
      v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:6];
      }
      uint64_t v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      int v54 = (void *)v53;
      if (v53) {
        v55 = (void *)v53;
      }
      else {
        v55 = v50;
      }
      id v227 = v55;

      id v56 = NSNumber;
      id v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 30));

      v59 = [v33 objectForKeyedSubscript:v58];
      id v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:30];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      long long v65 = (void *)v64;
      if (v64) {
        long long v66 = (void *)v64;
      }
      else {
        long long v66 = v61;
      }
      id v234 = v66;

      long long v67 = NSNumber;
      long long v68 = +[GEOAPStateFactory sharedFactory];
      long long v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 0));

      id v70 = [v33 objectForKeyedSubscript:v69];
      id v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        long long v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:0];
      }
      long long v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      long long v76 = (void *)v75;
      if (v75) {
        long long v77 = (void *)v75;
      }
      else {
        long long v77 = v72;
      }
      id v233 = v77;

      long long v78 = NSNumber;
      long long v79 = +[GEOAPStateFactory sharedFactory];
      long long v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 3));

      v81 = [v33 objectForKeyedSubscript:v80];
      v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:3];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      v87 = (void *)v86;
      if (v86) {
        __int16 v88 = (void *)v86;
      }
      else {
        __int16 v88 = v83;
      }
      id v232 = v88;

      id v89 = NSNumber;
      uint64_t v90 = +[GEOAPStateFactory sharedFactory];
      v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 42));

      v92 = [v33 objectForKeyedSubscript:v91];
      v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:42];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v231 = v99;

      v100 = NSNumber;
      v101 = +[GEOAPStateFactory sharedFactory];
      v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 70));

      v103 = [v33 objectForKeyedSubscript:v102];
      v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:70];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v226 = v110;

      v111 = NSNumber;
      v112 = +[GEOAPStateFactory sharedFactory];
      v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 17));

      v114 = [v33 objectForKeyedSubscript:v113];
      v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:17];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v225 = v121;

      id v122 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v122 setEventType:1];
      id v123 = objc_alloc_init(MEMORY[0x263F41958]);
      [v122 setUserActionEvent:v123];

      v124 = [v122 userActionEvent];
      [v124 setUserActionEventAction:a3];

      v125 = [v122 userActionEvent];
      [v125 setUserActionEventTarget:a4];

      v126 = [v122 userActionEvent];
      [v126 setUserActionEventValue:v16];

      v127 = [v122 userActionEvent];
      [v127 setActionRichProviderId:v229];

      if (v17 | v18)
      {
        id v128 = objc_alloc_init(MEMORY[0x263F41960]);
        id v129 = [v122 userActionEvent];
        [v129 setModuleInfo:v128];

        if (v17)
        {
          uint64_t v130 = [(id)v17 intValue];
          v131 = [v122 userActionEvent];
          uint64_t v132 = [v131 moduleInfo];
          [v132 setType:v130];
        }
        if (v18)
        {
          v133 = [v122 userActionEvent];
          v134 = [v133 moduleInfo];
          [v134 setModuleMetadata:v18];
        }
      }
      if (v228) {
        objc_msgSend(v122, "addLogMsgState:");
      }
      id v20 = v224;
      v135 = v234;
      if (v234) {
        [v122 addLogMsgState:v234];
      }
      if (v233) {
        [v122 addLogMsgState:v233];
      }
      if (v232) {
        [v122 addLogMsgState:v232];
      }
      if (v231) {
        [v122 addLogMsgState:v231];
      }
      if (v225) {
        objc_msgSend(v122, "addLogMsgState:");
      }
      if (v227) {
        [v122 addLogMsgState:v227];
      }
      if (v226) {
        objc_msgSend(v122, "addLogMsgState:");
      }
      id v221 = v21;
      if (a3 == 2059 && a4 == 201)
      {
        v136 = NSNumber;
        v137 = +[GEOAPStateFactory sharedFactory];
        uint64_t v138 = objc_msgSend(v136, "numberWithInt:", objc_msgSend(v137, "logMsgStateTypeForType:", 68));

        v139 = [v33 objectForKeyedSubscript:v138];
        id v140 = v139;
        if (v139)
        {
          id v141 = v139;
        }
        else
        {
          v153 = +[GEOAPStateFactory sharedFactory];
          id v141 = [v153 stateForType:68];
        }
        uint64_t v154 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v141, "stateType"));
        uint64_t v155 = [v33 objectForKeyedSubscript:v154];
        v156 = (void *)v155;
        if (v155) {
          v157 = (void *)v155;
        }
        else {
          v157 = v141;
        }
        id v158 = v157;

        BOOL v159 = 0;
        BOOL v142 = 0;
        if (v158)
        {
LABEL_102:
          unint64_t v18 = v230;
          id v20 = v224;
LABEL_103:
          [v122 addLogMsgState:v158];
LABEL_114:

          v113 = (void *)v138;
          v135 = v234;
          goto LABEL_115;
        }
      }
      else
      {
        BOOL v142 = a4 == 30;
        if (a3 != 2059 || a4 != 30)
        {
          if (a3 == 469 && a4 == 201)
          {
            v148 = NSNumber;
            v149 = +[GEOAPStateFactory sharedFactory];
            uint64_t v138 = objc_msgSend(v148, "numberWithInt:", objc_msgSend(v149, "logMsgStateTypeForType:", 68));

            v150 = [v33 objectForKeyedSubscript:v138];
            id v151 = v150;
            if (v150)
            {
              id v152 = v150;
            }
            else
            {
              id v206 = +[GEOAPStateFactory sharedFactory];
              id v152 = [v206 stateForType:68];
            }
            v207 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v152, "stateType"));
            uint64_t v208 = [v33 objectForKeyedSubscript:v207];
            uint64_t v209 = (void *)v208;
            if (v208) {
              v210 = (void *)v208;
            }
            else {
              v210 = v152;
            }
            id v158 = v210;

            BOOL v159 = 0;
          }
          else
          {
            if (a3 != 469 || a4 != 30)
            {
              BOOL v159 = a3 == 477;
              if (a3 != 477 || a4 != 201)
              {
LABEL_115:
                if (v159 && v142)
                {
                  v170 = NSNumber;
                  v171 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v172 = objc_msgSend(v170, "numberWithInt:", objc_msgSend(v171, "logMsgStateTypeForType:", 68));

                  id v173 = [v33 objectForKeyedSubscript:v172];
                  v174 = v173;
                  if (v173)
                  {
                    id v175 = v173;
                  }
                  else
                  {
                    v183 = +[GEOAPStateFactory sharedFactory];
                    id v175 = [v183 stateForType:68];
                  }
                  id v21 = v221;
                }
                else
                {
                  BOOL v176 = a3 == 2073;
                  if (a3 == 2073 && a4 == 201)
                  {
                    v177 = NSNumber;
                    v178 = +[GEOAPStateFactory sharedFactory];
                    uint64_t v179 = objc_msgSend(v177, "numberWithInt:", objc_msgSend(v178, "logMsgStateTypeForType:", 68));

                    v180 = [v33 objectForKeyedSubscript:v179];
                    v181 = v180;
                    if (v180)
                    {
                      id v182 = v180;
                    }
                    else
                    {
                      id v184 = +[GEOAPStateFactory sharedFactory];
                      id v182 = [v184 stateForType:68];
                    }
                    v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v182, "stateType"));
                    uint64_t v186 = [v33 objectForKeyedSubscript:v185];
                    uint64_t v187 = (void *)v186;
                    if (v186) {
                      v188 = (void *)v186;
                    }
                    else {
                      v188 = v182;
                    }
                    id v189 = v188;

                    if (v189) {
                      [v122 addLogMsgState:v189];
                    }

                    BOOL v176 = 1;
                    v113 = (void *)v179;
                    unint64_t v18 = v230;
                    v135 = v234;
                  }
                  if (!v142 || !v176)
                  {
                    id v21 = v221;
LABEL_143:
                    v199 = +[GEOAPStateFactory sharedFactory];
                    v237[0] = MEMORY[0x263EF8330];
                    v237[1] = 3221225472;
                    v237[2] = __193__GEOAPPortal_UserActionCodeGen__captureSessionlessUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
                    v237[3] = &unk_2653457B8;
                    id v200 = v122;
                    id v238 = v200;
                    id v240 = v222;
                    id v239 = v21;
                    [v199 sessionStateForType:8 callback:v237];

                    id v22 = v222;
                    unint64_t v17 = v223;
                    id v19 = v229;
                    goto LABEL_144;
                  }
                  v190 = NSNumber;
                  v191 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v172 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 68));

                  v192 = [v33 objectForKeyedSubscript:v172];
                  v174 = v192;
                  id v21 = v221;
                  if (v192)
                  {
                    id v175 = v192;
                  }
                  else
                  {
                    v193 = +[GEOAPStateFactory sharedFactory];
                    id v175 = [v193 stateForType:68];
                  }
                }

                v194 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v175, "stateType"));
                uint64_t v195 = [v33 objectForKeyedSubscript:v194];
                v196 = (void *)v195;
                if (v195) {
                  v197 = (void *)v195;
                }
                else {
                  v197 = v175;
                }
                id v198 = v197;

                unint64_t v18 = v230;
                v135 = v234;
                if (v198) {
                  [v122 addLogMsgState:v198];
                }

                v113 = (void *)v172;
                goto LABEL_143;
              }
              v201 = NSNumber;
              v202 = +[GEOAPStateFactory sharedFactory];
              uint64_t v138 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 68));

              v203 = [v33 objectForKeyedSubscript:v138];
              v204 = v203;
              if (v203)
              {
                id v205 = v203;
              }
              else
              {
                v216 = +[GEOAPStateFactory sharedFactory];
                id v205 = [v216 stateForType:68];
              }
              id v217 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v205, "stateType"));
              uint64_t v218 = [v33 objectForKeyedSubscript:v217];
              v219 = (void *)v218;
              if (v218) {
                uint64_t v220 = (void *)v218;
              }
              else {
                uint64_t v220 = v205;
              }
              id v158 = v220;

              BOOL v159 = 1;
              if (v158) {
                goto LABEL_102;
              }
              goto LABEL_113;
            }
            v160 = NSNumber;
            v161 = +[GEOAPStateFactory sharedFactory];
            uint64_t v138 = objc_msgSend(v160, "numberWithInt:", objc_msgSend(v161, "logMsgStateTypeForType:", 68));

            id v162 = [v33 objectForKeyedSubscript:v138];
            v163 = v162;
            if (v162)
            {
              id v164 = v162;
            }
            else
            {
              v211 = +[GEOAPStateFactory sharedFactory];
              id v164 = [v211 stateForType:68];
            }
            v212 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v164, "stateType"));
            uint64_t v213 = [v33 objectForKeyedSubscript:v212];
            v214 = (void *)v213;
            if (v213) {
              v215 = (void *)v213;
            }
            else {
              v215 = v164;
            }
            id v158 = v215;

            BOOL v159 = 0;
            BOOL v142 = 1;
          }
          unint64_t v18 = v230;
          id v20 = v224;
          if (!v158) {
            goto LABEL_114;
          }
          goto LABEL_103;
        }
        uint64_t v143 = NSNumber;
        v144 = +[GEOAPStateFactory sharedFactory];
        uint64_t v138 = objc_msgSend(v143, "numberWithInt:", objc_msgSend(v144, "logMsgStateTypeForType:", 68));

        v145 = [v33 objectForKeyedSubscript:v138];
        v146 = v145;
        if (v145)
        {
          id v147 = v145;
        }
        else
        {
          uint64_t v165 = +[GEOAPStateFactory sharedFactory];
          id v147 = [v165 stateForType:68];
        }
        v166 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v147, "stateType"));
        uint64_t v167 = [v33 objectForKeyedSubscript:v166];
        v168 = (void *)v167;
        if (v167) {
          v169 = (void *)v167;
        }
        else {
          v169 = v147;
        }
        id v158 = v169;

        BOOL v159 = 0;
        BOOL v142 = 1;
        if (v158) {
          goto LABEL_102;
        }
      }
LABEL_113:
      unint64_t v18 = v230;
      id v20 = v224;
      goto LABEL_114;
    }
  }
LABEL_144:
}

void __127__GEOAPPortal_captureMapsEngagementWithUser_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    int v5 = v4;
    dispatch_async(v4, v1);
  }
}

+ (BOOL)isDisabledEvent:(id)a3 inCountry:(id)a4
{
  uint64_t v5 = qword_26B201AD8;
  id v6 = a4;
  id v7 = a3;
  if (v5 != -1) {
    dispatch_once(&qword_26B201AD8, &__block_literal_global_548);
  }
  id v8 = [(id)qword_26B201AD0 objectForKeyedSubscript:v7];

  id v9 = [v6 lowercaseString];

  char v10 = [v8 containsObject:v9];
  return v10;
}

+ (id)dailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5
{
  uint64_t v5 = *(void *)&a5;
  id v8 = a4;
  uint64_t v9 = [a1 addStaticDailyCountsWithActionTargetTuple:a3 actionTargetValue:v8 appGroup:v5];
  uint64_t v10 = [a1 addCodeGenDailyCountsWithActionTargetTuple:a3 actionTargetValue:v8 appGroup:v5];

  if (v9 | v10)
  {
    if (v9 && v10)
    {
      id v11 = [(id)v9 setByAddingObjectsFromSet:v10];
      id v12 = [v11 allObjects];
    }
    else
    {
      if (v9) {
        id v13 = (void *)v9;
      }
      else {
        id v13 = (void *)v10;
      }
      id v12 = [v13 allObjects];
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

+ (id)addStaticDailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5
{
  id v6 = (void *)[objc_alloc(MEMORY[0x263EFF9C0]) initWithCapacity:1];
  id v7 = v6;
  switch(a3)
  {
    case 0x1300000000uLL:
      id v8 = &unk_270161AB0;
      break;
    case 0x89500000000uLL:
      id v8 = &unk_270161AE0;
      break;
    case 0x1400000000uLL:
      id v8 = &unk_270161AC8;
      break;
    default:
      goto LABEL_8;
  }
  [v6 addObject:v8];
LABEL_8:
  uint64_t v9 = (void *)[v7 copy];

  return v9;
}

+ (id)addCodeGenDailyCountsWithActionTargetTuple:(unint64_t)a3 actionTargetValue:(id)a4 appGroup:(int)a5
{
  uint64_t v268 = *MEMORY[0x263EF8340];
  id v8 = a4;
  if (qword_26B201B50 != -1) {
    dispatch_once(&qword_26B201B50, &__block_literal_global_7);
  }
  uint64_t v9 = _MergedGlobals_9;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_9, OS_LOG_TYPE_DEBUG))
  {
    int v266 = 136315138;
    v267 = "+[GEOAPPortal(DailyUsageCodeGen) addCodeGenDailyCountsWithActionTargetTuple:actionTargetValue:appGroup:]";
    _os_log_impl(&dword_24FE56000, v9, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v266, 0xCu);
  }
  uint64_t v10 = +[GEOAPSharedStateData sharedData];
  id v11 = (void *)[objc_alloc(MEMORY[0x263EFF9C0]) initWithCapacity:2];
  id v12 = v11;
  id v13 = &unk_270161AF8;
  if ((uint64_t)a3 > 0x426000001F4)
  {
    if ((uint64_t)a3 > 0x1772FFFFFFFFLL)
    {
      if ((uint64_t)a3 <= 0x17D100000190)
      {
        if ((uint64_t)a3 <= 0x178D0000001DLL)
        {
          if ((uint64_t)a3 <= 0x1778000000C8)
          {
            if ((uint64_t)a3 > 0x1773000002BCLL)
            {
              if ((uint64_t)a3 > 0x1774000000C8)
              {
                if ((uint64_t)a3 <= 0x1776000000C8)
                {
                  if (a3 != 0x1774000000C9)
                  {
                    if (a3 != 0x1775000004B9)
                    {
                      if (a3 != 0x177600000065) {
                        goto LABEL_1562;
                      }
                      goto LABEL_642;
                    }
LABEL_889:
                    id v13 = &unk_270161BB8;
                    goto LABEL_1561;
                  }
                  v127 = &unk_270162710;
LABEL_1543:
                  [v11 addObject:v127];
                  id v13 = &unk_270161AF8;
                  goto LABEL_1561;
                }
                if (a3 == 0x1776000000C9 || a3 == 0x1777000000C9) {
                  goto LABEL_1561;
                }
                uint64_t v73 = 0x1777000004B9;
                goto LABEL_868;
              }
              if ((uint64_t)a3 <= 0x177300000321)
              {
                if (a3 == 0x1773000002BDLL)
                {
                  [v11 addObject:&unk_270161EB8];
                  if ([v10 mapsInOfflineMode]) {
                    [v12 addObject:&unk_270161ED0];
                  }
                  if (a5 == 2)
                  {
                    id v13 = &unk_270161F00;
                    goto LABEL_1561;
                  }
                }
                else if (a3 == 0x1773000002BELL)
                {
                  [v11 addObject:&unk_270161EB8];
                  if ([v10 mapsInOfflineMode]) {
                    [v12 addObject:&unk_270161ED0];
                  }
                  if (a5 == 3)
                  {
                    id v13 = &unk_270161F30;
                    goto LABEL_1561;
                  }
                }
                goto LABEL_1562;
              }
              if (a3 != 0x177300000322)
              {
                if (a3 == 0x177300000323)
                {
                  [v11 addObject:&unk_270161EB8];
                  if ([v10 mapsInOfflineMode]) {
                    [v12 addObject:&unk_270161ED0];
                  }
                  if (a5 == 1)
                  {
                    id v13 = &unk_270161F18;
                    goto LABEL_1561;
                  }
                  goto LABEL_1562;
                }
                uint64_t v14 = 0x17740000001ELL;
                goto LABEL_984;
              }
LABEL_738:
              [v11 addObject:&unk_270161EB8];
              if (([v10 mapsInOfflineMode] & 1) == 0) {
                goto LABEL_1562;
              }
              id v13 = &unk_270161ED0;
              goto LABEL_1561;
            }
            if ((uint64_t)a3 <= 0x1773000000C8)
            {
              switch(a3)
              {
                case 0x177300000082uLL:
                case 0x177300000083uLL:
                case 0x177300000084uLL:
                case 0x177300000087uLL:
                case 0x177300000089uLL:
                  id v13 = &unk_270161EB8;
                  goto LABEL_1561;
                case 0x177300000085uLL:
                case 0x177300000086uLL:
                case 0x177300000088uLL:
                  goto LABEL_1562;
                default:
                  if (a3 == 0x177300000000) {
                    goto LABEL_738;
                  }
                  if (a3 != 0x17730000001ELL) {
                    goto LABEL_1562;
                  }
                  id v13 = &unk_270161EE8;
                  break;
              }
              goto LABEL_1561;
            }
            if (a3 != 0x1773000000C9)
            {
              if (a3 != 0x17730000025FLL && a3 != 0x17730000028ALL) {
                goto LABEL_1562;
              }
              goto LABEL_738;
            }
            [v11 addObject:&unk_270161EB8];
            if ([v10 mapsInOfflineMode]) {
              [v12 addObject:&unk_270161ED0];
            }
            [v12 addObject:&unk_270161EE8];
            int v186 = a5 - 1;
            if ((a5 - 1) >= 3) {
              goto LABEL_1562;
            }
            uint64_t v187 = &unk_265345870;
LABEL_1521:
            id v13 = (void *)v187[v186];
            goto LABEL_1561;
          }
          if ((uint64_t)a3 > 0x177D000000C8)
          {
            if ((uint64_t)a3 <= 0x177D000006A4)
            {
              switch(a3)
              {
                case 0x177D0000025CuLL:
                  id v13 = &unk_2701622F0;
                  goto LABEL_1561;
                case 0x177D0000025DuLL:
                  id v13 = &unk_270162308;
                  goto LABEL_1561;
                case 0x177D0000025EuLL:
                  id v13 = &unk_2701622C0;
                  goto LABEL_1561;
                case 0x177D0000025FuLL:
                case 0x177D00000260uLL:
                case 0x177D00000261uLL:
                  goto LABEL_1562;
                case 0x177D00000262uLL:
                  [v11 addObject:&unk_2701622C0];
                  goto LABEL_1032;
                default:
                  if (a3 == 0x177D000000C9) {
                    goto LABEL_1486;
                  }
                  break;
              }
              goto LABEL_1562;
            }
            if ((uint64_t)a3 <= 0x17800000001DLL)
            {
              if (a3 == 0x177D000006A5)
              {
                id v13 = &unk_2701622A8;
                goto LABEL_1561;
              }
              uint64_t v14 = 0x177F000000C9;
            }
            else
            {
              if (a3 == 0x17800000001ELL || a3 == 0x1780000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x178B000000C9;
            }
            goto LABEL_984;
          }
          if ((uint64_t)a3 <= 0x177A000000C8)
          {
            if ((uint64_t)a3 > 0x1779000000C8)
            {
              if (a3 != 0x1779000000C9)
              {
                if (a3 == 0x1779000004B9) {
                  goto LABEL_889;
                }
                uint64_t v14 = 0x177A0000001ELL;
                goto LABEL_984;
              }
LABEL_1561:
              [v12 addObject:v13];
              goto LABEL_1562;
            }
            if (a3 == 0x1778000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x17790000001ELL;
LABEL_984:
            if (a3 == v14) {
              goto LABEL_1561;
            }
            goto LABEL_1562;
          }
          if ((uint64_t)a3 <= 0x177C000000C8)
          {
            if (a3 == 0x177A000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x177B000000C9;
            goto LABEL_984;
          }
          if (a3 == 0x177C000000C9) {
            goto LABEL_1561;
          }
          if (a3 != 0x177D0000001ELL)
          {
            if (a3 != 0x177D0000003DLL) {
              goto LABEL_1562;
            }
            id v13 = &unk_2701622D8;
            goto LABEL_1561;
          }
          [v11 addObject:&unk_270161AF8];
          id v11 = v12;
LABEL_1486:
          [v11 addObject:&unk_270161AF8];
LABEL_1487:
          id v13 = &unk_270162038;
          goto LABEL_1561;
        }
        if ((uint64_t)a3 <= 0x17A2000000C8)
        {
          if ((uint64_t)a3 <= 0x179D0000001DLL)
          {
            if ((uint64_t)a3 > 0x1794000000C8)
            {
              if ((uint64_t)a3 <= 0x179A000000C8)
              {
                if (a3 == 0x1794000000C9) {
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x1796000000C9;
              }
              else
              {
                if (a3 == 0x179A000000C9 || a3 == 0x179B000000C9) {
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x179C000000C9;
              }
            }
            else if ((uint64_t)a3 <= 0x1790000000C8)
            {
              if (a3 == 0x178D0000001ELL) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x178D000000C9;
            }
            else
            {
              if (a3 == 0x1790000000C9 || a3 == 0x1792000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x17940000001ELL;
            }
            goto LABEL_984;
          }
          if ((uint64_t)a3 <= 0x17A0000000C8)
          {
            if ((uint64_t)a3 > 0x179E000000C8)
            {
              if (a3 == 0x179E000000C9 || a3 == 0x179F000000C9) {
                goto LABEL_1561;
              }
              if (a3 == 0x17A000000065) {
                goto LABEL_642;
              }
              goto LABEL_1562;
            }
            if (a3 == 0x179D0000001ELL) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x179D000000C9;
            goto LABEL_984;
          }
          if ((uint64_t)a3 <= 0x17A100000064)
          {
            if (a3 == 0x17A0000000C9) {
              goto LABEL_1561;
            }
            uint64_t v73 = 0x17A0000004B9;
          }
          else
          {
            if (a3 == 0x17A100000065)
            {
LABEL_642:
              id v13 = &unk_270162260;
              goto LABEL_1561;
            }
            if (a3 == 0x17A1000000C9) {
              goto LABEL_1561;
            }
            uint64_t v73 = 0x17A1000004B9;
          }
        }
        else
        {
          if ((uint64_t)a3 <= 0x17BC000000C8)
          {
            if ((uint64_t)a3 > 0x17A9FFFFFFFFLL)
            {
              if ((uint64_t)a3 <= 0x17BA0000001DLL)
              {
                if (a3 == 0x17AA00000000)
                {
                  id v13 = &unk_270161D20;
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x17AC000000C9;
              }
              else
              {
                if (a3 == 0x17BA0000001ELL || a3 == 0x17BA000000C9) {
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x17BB000000C9;
              }
            }
            else if ((uint64_t)a3 <= 0x17A7000000C8)
            {
              if (a3 == 0x17A2000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x17A4000000C9;
            }
            else
            {
              if (a3 == 0x17A7000000C9 || a3 == 0x17A8000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x17A9000000C9;
            }
            goto LABEL_984;
          }
          if ((uint64_t)a3 > 0x17C0000000C8)
          {
            if ((uint64_t)a3 <= 0x17D100000067)
            {
              if (a3 == 0x17C0000000C9 || a3 == 0x17C1000000C9) {
                goto LABEL_1561;
              }
              if (a3 != 0x17D10000003ALL) {
                goto LABEL_1562;
              }
              goto LABEL_749;
            }
            if (a3 == 0x17D100000068 || a3 == 0x17D1000000C9) {
              goto LABEL_749;
            }
            uint64_t v88 = 301;
LABEL_748:
            if (a3 != (v88 & 0xFFFF0000FFFFFFFFLL | 0x17D100000000)) {
              goto LABEL_1562;
            }
            goto LABEL_749;
          }
          if ((uint64_t)a3 <= 0x17BE000000C8)
          {
            if (a3 == 0x17BC000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x17BD000000C9;
            goto LABEL_984;
          }
          if (a3 == 0x17BE000000C9 || a3 == 0x17BF000000C9) {
            goto LABEL_1561;
          }
          uint64_t v73 = 0x17BF000004B9;
        }
LABEL_868:
        if (a3 == v73) {
          goto LABEL_889;
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 <= 0x233B000003FELL)
      {
        if ((uint64_t)a3 > 0x232A000002E0)
        {
          if ((uint64_t)a3 > 0x2338000003E8)
          {
            switch(a3)
            {
              case 0x233B000003E9uLL:
              case 0x233B000003EAuLL:
              case 0x233B000003EDuLL:
              case 0x233B000003EFuLL:
              case 0x233B000003F1uLL:
              case 0x233B000003F2uLL:
              case 0x233B000003F3uLL:
              case 0x233B000003FBuLL:
                goto LABEL_1560;
              case 0x233B000003EBuLL:
              case 0x233B000003ECuLL:
              case 0x233B000003EEuLL:
              case 0x233B000003F0uLL:
              case 0x233B000003F4uLL:
              case 0x233B000003F5uLL:
              case 0x233B000003F6uLL:
              case 0x233B000003F7uLL:
              case 0x233B000003F8uLL:
              case 0x233B000003F9uLL:
              case 0x233B000003FAuLL:
                goto LABEL_1562;
              default:
                switch(a3)
                {
                  case 0x2338000003E9uLL:
                  case 0x2338000003EDuLL:
                  case 0x2338000003EEuLL:
                  case 0x2338000003EFuLL:
                  case 0x2338000003F0uLL:
                    goto LABEL_472;
                  default:
                    goto LABEL_1562;
                }
            }
            goto LABEL_1562;
          }
          if ((uint64_t)a3 > 0x232E000003FCLL)
          {
            switch(a3)
            {
              case 0x23380000012DuLL:
                if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 3) {
                  [v12 addObject:&unk_2701625A8];
                }
                goto LABEL_891;
              case 0x23380000012EuLL:
                if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 3) {
                  [v12 addObject:&unk_2701625A8];
                }
                goto LABEL_1570;
              case 0x23380000012FuLL:
                if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 3) {
                  [v12 addObject:&unk_2701625A8];
                }
                goto LABEL_1573;
              case 0x233800000130uLL:
                goto LABEL_1562;
              case 0x233800000131uLL:
                if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 3) {
                  [v12 addObject:&unk_2701625A8];
                }
                id v13 = &unk_270162500;
                goto LABEL_1561;
              default:
                uint64_t v55 = 1021;
                goto LABEL_1558;
            }
            goto LABEL_1562;
          }
          if (a3 == 0x232A000002E1 || a3 == 0x232A000002E2) {
            goto LABEL_623;
          }
          uint64_t v55 = 1005;
LABEL_1558:
          unint64_t v107 = v55 & 0xFFFF0000FFFFFFFFLL | 0x232E00000000;
LABEL_1559:
          if (a3 != v107) {
            goto LABEL_1562;
          }
          goto LABEL_1560;
        }
        if ((uint64_t)a3 > 0x1B5D000000C8)
        {
          if ((uint64_t)a3 <= 0x1B62000000C8)
          {
            if ((uint64_t)a3 <= 0x1B5F000000C8)
            {
              if (a3 == 0x1B5D000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x1B5E000000C9;
            }
            else
            {
              if (a3 == 0x1B5F000000C9 || a3 == 0x1B60000000C9) {
                goto LABEL_1561;
              }
              uint64_t v14 = 0x1B61000000C9;
            }
            goto LABEL_984;
          }
          if ((uint64_t)a3 <= 0x1B6F00000277)
          {
            if (a3 == 0x1B62000000C9 || a3 == 0x1B63000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x1B65000000C9;
            goto LABEL_984;
          }
          if (a3 != 0x1B6F00000278)
          {
            if (a3 != 0x1F49000003F2)
            {
              if (a3 != 0x232A000002D3) {
                goto LABEL_1562;
              }
LABEL_623:
              id v13 = &unk_270161C78;
              goto LABEL_1561;
            }
LABEL_1560:
            id v13 = &unk_270161FA8;
            goto LABEL_1561;
          }
LABEL_1032:
          id v13 = &unk_270161D08;
          goto LABEL_1561;
        }
        if ((uint64_t)a3 > 0x17D90000029DLL)
        {
          if ((uint64_t)a3 <= 0x1B5A000000C8)
          {
            if (a3 == 0x17D90000029ELL)
            {
              id v13 = &unk_270162218;
              goto LABEL_1561;
            }
            uint64_t v14 = 0x1B59000000C9;
          }
          else
          {
            if (a3 == 0x1B5A000000C9 || a3 == 0x1B5B000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x1B5C000000C9;
          }
          goto LABEL_984;
        }
        if ((uint64_t)a3 > 0x17D1000003F0)
        {
          if (a3 != 0x17D1000003F1 && a3 != 0x17D1000003FDLL && a3 != 0x17D100000401) {
            goto LABEL_1562;
          }
          id v13 = &unk_270162608;
          goto LABEL_1561;
        }
        if (a3 != 0x17D100000191)
        {
          uint64_t v88 = 607;
          goto LABEL_748;
        }
LABEL_749:
        id v13 = &unk_270162020;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 <= 0x23500000025DLL)
      {
        if ((uint64_t)a3 <= 0x2346000002D4)
        {
          switch(a3)
          {
            case 0x2345000002D5uLL:
            case 0x2345000002D6uLL:
            case 0x2345000002D7uLL:
            case 0x2345000002D8uLL:
            case 0x2345000002D9uLL:
            case 0x2345000002DAuLL:
            case 0x2345000002DBuLL:
            case 0x2345000002DCuLL:
              id v13 = &unk_270161C60;
              goto LABEL_1561;
            default:
              unint64_t v107 = 0x233B000003FFLL;
              goto LABEL_1559;
          }
        }
        switch(a3)
        {
          case 0x2346000002D5uLL:
          case 0x2346000002D6uLL:
          case 0x2346000002D7uLL:
          case 0x2346000002D8uLL:
          case 0x2346000002D9uLL:
          case 0x2346000002DAuLL:
          case 0x2346000002DBuLL:
          case 0x2346000002DCuLL:
            id v13 = &unk_270162620;
            goto LABEL_1561;
          default:
            if (a3 == 0x234C000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x234D000000C9;
            break;
        }
        goto LABEL_984;
      }
      if ((uint64_t)a3 <= 0x2B0900000060)
      {
        if ((uint64_t)a3 <= 0x2B05000004B8)
        {
          if ((uint64_t)a3 > 0x2AFB000004B7)
          {
            if (a3 != 0x2AFB000004B8)
            {
              if (a3 != 0x2B04000004B9 && a3 != 0x2B04000004C0) {
                goto LABEL_1562;
              }
              id v13 = &unk_270161F60;
              goto LABEL_1561;
            }
            goto LABEL_865;
          }
          if (a3 == 0x23500000025ELL) {
            goto LABEL_1032;
          }
          uint64_t v87 = 0x235000000262;
LABEL_717:
          if (a3 != v87) {
            goto LABEL_1562;
          }
          goto LABEL_1032;
        }
        if ((uint64_t)a3 <= 0x2B06000004B8)
        {
          if (a3 != 0x2B05000004B9 && a3 != 0x2B05000004C0) {
            goto LABEL_1562;
          }
          id v13 = &unk_270161F90;
          goto LABEL_1561;
        }
        if (a3 == 0x2B06000004B9 || a3 == 0x2B06000004C0)
        {
          id v13 = &unk_270161F78;
          goto LABEL_1561;
        }
        uint64_t v74 = 0x2B090000005DLL;
        goto LABEL_876;
      }
      if ((uint64_t)a3 <= 0x2B130000006CLL)
      {
        if ((uint64_t)a3 > 0x2B0900000070)
        {
          if (a3 != 0x2B0900000071)
          {
            if (a3 != 0x2B12000004B9 && a3 != 0x2B12000004C0) {
              goto LABEL_1562;
            }
            id v13 = &unk_270161F48;
            goto LABEL_1561;
          }
          goto LABEL_894;
        }
        if (a3 != 0x2B0900000061)
        {
          if (a3 != 0x2B090000006FLL) {
            goto LABEL_1562;
          }
          goto LABEL_895;
        }
LABEL_759:
        [v11 addObject:&unk_270162530];
        id v13 = &unk_270162590;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0x42B400000000)
      {
        if (a3 == 0x42B400000001 || a3 == 0x42B400000002) {
          goto LABEL_1487;
        }
        uint64_t v77 = 0x42B400000004;
LABEL_558:
        if (a3 != v77) {
          goto LABEL_1562;
        }
        goto LABEL_1487;
      }
      if (a3 != 0x2B130000006DLL)
      {
        if (a3 != 0x36B40000057ALL) {
          goto LABEL_1562;
        }
        id v13 = &unk_270162080;
        goto LABEL_1561;
      }
      goto LABEL_865;
    }
    if ((uint64_t)a3 <= 0x813000000C8)
    {
      if ((uint64_t)a3 > 0x7D7000004B6)
      {
        if ((uint64_t)a3 > 0x7FE00000007)
        {
          if ((uint64_t)a3 > 0x802FFFFFFFFLL)
          {
            if ((uint64_t)a3 > 0x80B000000C8)
            {
              if ((uint64_t)a3 <= 0x81000000007)
              {
                if (a3 == 0x80B000000C9 || a3 == 0x80C0000001ELL) {
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x80C000000C9;
                goto LABEL_984;
              }
              if (a3 == 0x81000000008)
              {
                id v13 = &unk_2701627B8;
                goto LABEL_1561;
              }
              if (a3 != 0x81300000008 && a3 != 0x8130000000BLL) {
                goto LABEL_1562;
              }
LABEL_619:
              id v13 = &unk_270162368;
              goto LABEL_1561;
            }
            if ((uint64_t)a3 > 0x80900000007)
            {
              if (a3 != 0x80900000008)
              {
                if (a3 == 0x809000000FELL)
                {
                  id v13 = &unk_270162350;
                  goto LABEL_1561;
                }
                uint64_t v14 = 0x80B0000001ELL;
                goto LABEL_984;
              }
              goto LABEL_1487;
            }
            if (a3 != 0x80300000000)
            {
              uint64_t v41 = 0x80400000000;
              goto LABEL_815;
            }
            goto LABEL_816;
          }
          if ((uint64_t)a3 > 0x7FF000003ECLL)
          {
            if ((uint64_t)a3 > 0x801000000FDLL)
            {
              if (a3 == 0x801000000FELL) {
                goto LABEL_833;
              }
              if (a3 != 0x801000003EDLL)
              {
                uint64_t v41 = 0x80200000000;
                goto LABEL_815;
              }
              goto LABEL_834;
            }
            if (a3 == 0x7FF000003EDLL) {
              goto LABEL_834;
            }
            uint64_t v48 = 0x80100000008;
          }
          else
          {
            if ((uint64_t)a3 > 0x7FE000003ECLL)
            {
              if (a3 != 0x7FE000003EDLL)
              {
                if (a3 != 0x7FF00000008)
                {
                  uint64_t v48 = 0x7FF000000FELL;
                  goto LABEL_832;
                }
LABEL_833:
                id v13 = &unk_2701626F8;
                goto LABEL_1561;
              }
LABEL_834:
              [v11 addObject:&unk_2701620B0];
              id v13 = &unk_2701626E0;
              goto LABEL_1561;
            }
            if (a3 == 0x7FE00000008) {
              goto LABEL_833;
            }
            uint64_t v48 = 0x7FE000000FELL;
          }
LABEL_832:
          if (a3 != v48) {
            goto LABEL_1562;
          }
          goto LABEL_833;
        }
        if ((uint64_t)a3 <= 0x7DF000004B6)
        {
          if ((uint64_t)a3 > 0x7DF000002BCLL)
          {
            if ((uint64_t)a3 <= 0x7DF00000321)
            {
              if (a3 == 0x7DF000002BDLL)
              {
                if ((objc_msgSend(a1, "permittedToCountAC", &unk_270161AF8) & 1) == 0) {
                  goto LABEL_1562;
                }
                id v13 = &unk_2701623E0;
              }
              else
              {
                if (a3 != 0x7DF000002BELL || (objc_msgSend(a1, "permittedToCountAC", &unk_270161AF8) & 1) == 0) {
                  goto LABEL_1562;
                }
                id v13 = &unk_270162410;
              }
            }
            else
            {
              if (a3 != 0x7DF00000322 && a3 != 0x7DF00000323 && a3 != 0x7DF00000325) {
                goto LABEL_1562;
              }
              id v13 = &unk_2701623F8;
            }
            goto LABEL_1561;
          }
          if ((uint64_t)a3 > 0x7DF00000062)
          {
            if (a3 != 0x7DF00000063)
            {
              if (a3 == 0x7DF00000065)
              {
                if (objc_msgSend(v10, "shouldCountAsEnrichmentResult", &unk_270161AF8)) {
                  [v12 addObject:&unk_2701623C8];
                }
              }
              else if (a3 != 0x7DF00000066)
              {
                goto LABEL_1562;
              }
              [v12 addObject:&unk_270162398];
              if (([v10 mapsInOfflineMode] & 1) == 0) {
                goto LABEL_1562;
              }
              id v13 = &unk_2701623B0;
              goto LABEL_1561;
            }
            goto LABEL_865;
          }
          if (a3 == 0x7D7000004B7) {
            goto LABEL_865;
          }
          uint64_t v37 = 0x7DE000003FFLL;
          goto LABEL_727;
        }
        if ((uint64_t)a3 <= 0x7EE000004B2)
        {
          if ((uint64_t)a3 > 0x7E90000000CLL)
          {
            switch(a3)
            {
              case 0x7E90000000DuLL:
                id v13 = &unk_2701627D0;
                break;
              case 0x7EE0000000DuLL:
                [v11 addObject:&unk_270162638];
                if (([v10 mapsInOfflineMode] & 1) == 0) {
                  goto LABEL_1562;
                }
                id v13 = &unk_270162650;
                break;
              case 0x7EE0000006DuLL:
                [v11 addObject:&unk_270162290];
                id v13 = &unk_270162290;
                break;
              default:
                goto LABEL_1562;
            }
            goto LABEL_1561;
          }
          if (a3 != 0x7DF000004B7)
          {
            uint64_t v14 = 0x7E0000000C9;
            goto LABEL_984;
          }
          goto LABEL_865;
        }
        if ((uint64_t)a3 > 0x7F500000007)
        {
          if (a3 == 0x7F500000008) {
            goto LABEL_1487;
          }
          if (a3 == 0x7F700000008)
          {
            id v13 = &unk_270162818;
            goto LABEL_1561;
          }
          uint64_t v77 = 0x7F800000008;
          goto LABEL_558;
        }
        if (a3 == 0x7EE000004B3)
        {
LABEL_865:
          id v13 = &unk_270162290;
          goto LABEL_1561;
        }
        if (a3 != 0x7EF0000000BLL) {
          goto LABEL_1562;
        }
        id v72 = @"DOWNLOAD_OFFLINE_MAP";
LABEL_859:
        if (([v8 isEqualToString:v72] & 1) == 0) {
          goto LABEL_1562;
        }
        id v13 = &unk_2701626B0;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 <= 0x429000001F4)
      {
        if ((uint64_t)a3 <= 0x427FFFFFFFFLL)
        {
          switch(a3)
          {
            case 0x426000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v258 >= 12.0) {
                  goto LABEL_1000;
                }
              }
              goto LABEL_1509;
            case 0x426000001F6uLL:
            case 0x426000001F7uLL:
            case 0x426000001F8uLL:
            case 0x426000001F9uLL:
              goto LABEL_578;
            default:
              goto LABEL_1581;
          }
        }
        switch(a3)
        {
          case 0x428000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v61 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x428000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v220 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x428000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v221 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x428000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v222 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x428000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v223 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          default:
            if (a3 == 0x42800000000) {
              goto LABEL_578;
            }
            if (a3 != 0x42900000000) {
              goto LABEL_1562;
            }
            goto LABEL_582;
        }
      }
      if ((uint64_t)a3 <= 0x7D700000065)
      {
        if ((uint64_t)a3 <= 0x7D10000006CLL)
        {
          switch(a3)
          {
            case 0x429000001F5uLL:
            case 0x429000001F6uLL:
            case 0x429000001F7uLL:
            case 0x429000001F8uLL:
            case 0x429000001F9uLL:
              goto LABEL_582;
            default:
              goto LABEL_1562;
          }
          goto LABEL_1562;
        }
        if ((uint64_t)a3 <= 0x7D70000000ALL)
        {
          if (a3 == 0x7D10000006DLL) {
            goto LABEL_865;
          }
          if (a3 != 0x7D4000000C9)
          {
            uint64_t v37 = 0x7D4000003FFLL;
LABEL_727:
            if (a3 != v37) {
              goto LABEL_1562;
            }
            goto LABEL_728;
          }
          [v11 addObject:&unk_270161AF8];
          goto LABEL_1113;
        }
        if (a3 != 0x7D70000000BLL)
        {
          if (a3 == 0x7D700000063) {
            goto LABEL_865;
          }
          if (a3 != 0x7D700000065) {
            goto LABEL_1562;
          }
        }
LABEL_824:
        [v11 addObject:&unk_270162728];
        if (([v10 mapsInOfflineMode] & 1) == 0) {
          goto LABEL_1562;
        }
        id v13 = &unk_270162740;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0x7D700000322)
      {
        if ((uint64_t)a3 > 0x7D7000003F0)
        {
          if (a3 != 0x7D7000003F1 && a3 != 0x7D7000003F3)
          {
            if (a3 != 0x7D7000003FFLL) {
              goto LABEL_1562;
            }
            [v11 addObject:&unk_2701620B0];
LABEL_728:
            [v12 addObject:&unk_270161FA8];
            id v13 = &unk_270162668;
            goto LABEL_1561;
          }
LABEL_779:
          id v13 = &unk_2701620B0;
          goto LABEL_1561;
        }
        if (a3 != 0x7D700000323 && a3 != 0x7D700000324)
        {
          if (a3 != 0x7D7000003EBLL) {
            goto LABEL_1562;
          }
          goto LABEL_779;
        }
LABEL_512:
        id v13 = &unk_270162770;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0x7D7000002BCLL)
      {
        if (a3 == 0x7D7000002BDLL)
        {
          id v13 = &unk_270162758;
          goto LABEL_1561;
        }
        if (a3 == 0x7D7000002BELL)
        {
          id v13 = &unk_270162788;
          goto LABEL_1561;
        }
        if (a3 != 0x7D700000322) {
          goto LABEL_1562;
        }
        goto LABEL_512;
      }
      if (a3 == 0x7D700000066) {
        goto LABEL_824;
      }
      uint64_t v50 = 0x7D70000006DLL;
LABEL_822:
      if (a3 != v50) {
        goto LABEL_1562;
      }
      goto LABEL_865;
    }
    if ((uint64_t)a3 <= 0xBB9000000C8)
    {
      if ((uint64_t)a3 <= 0x82E000000C8)
      {
        if ((uint64_t)a3 > 0x8190000001DLL)
        {
          if ((uint64_t)a3 > 0x823000000C8)
          {
            if ((uint64_t)a3 > 0x828000000FALL)
            {
              if (a3 != 0x828000000FBLL && a3 != 0x82800000103)
              {
                if (a3 != 0x82B00000103) {
                  goto LABEL_1562;
                }
                id v13 = &unk_270162248;
                goto LABEL_1561;
              }
            }
            else
            {
              if (a3 == 0x823000000C9 || a3 == 0x824000000C9) {
                goto LABEL_1561;
              }
              if (a3 != 0x82800000008) {
                goto LABEL_1562;
              }
            }
            id v13 = &unk_270161C30;
            goto LABEL_1561;
          }
          if ((uint64_t)a3 > 0x82200000007)
          {
            if (a3 != 0x82200000008 && a3 != 0x822000000FBLL && a3 != 0x822000000FCLL) {
              goto LABEL_1562;
            }
            id v13 = &unk_270162320;
            goto LABEL_1561;
          }
          if (a3 == 0x8190000001ELL) {
            goto LABEL_1561;
          }
          uint64_t v14 = 0x819000000C9;
          goto LABEL_984;
        }
        if ((uint64_t)a3 <= 0x81400000102)
        {
          if ((uint64_t)a3 > 0x813000000FFLL)
          {
            if (a3 != 0x81300000100)
            {
              if (a3 != 0x814000000FCLL && a3 != 0x81400000100) {
                goto LABEL_1562;
              }
              id v13 = &unk_270162680;
              goto LABEL_1561;
            }
            goto LABEL_619;
          }
          if (a3 == 0x813000000C9)
          {
            v127 = &unk_270162368;
            goto LABEL_1543;
          }
          if (a3 != 0x813000000FBLL) {
            goto LABEL_1562;
          }
          [v11 addObject:&unk_270162368];
          goto LABEL_753;
        }
        if ((uint64_t)a3 <= 0x818000000C8)
        {
          if (a3 == 0x81400000103)
          {
            id v13 = &unk_270162698;
            goto LABEL_1561;
          }
          uint64_t v76 = 8;
        }
        else
        {
          if (a3 == 0x818000000C9)
          {
            v127 = &unk_270161C18;
            goto LABEL_1543;
          }
          if (a3 == 0x818000000FBLL)
          {
LABEL_840:
            id v13 = &unk_270161C18;
            goto LABEL_1561;
          }
          uint64_t v76 = 256;
        }
        if (a3 != (v76 & 0xFFFF0000FFFFFFFFLL | 0x81800000000)) {
          goto LABEL_1562;
        }
        goto LABEL_840;
      }
      if ((uint64_t)a3 <= 0x8710000029CLL)
      {
        if ((uint64_t)a3 > 0x833000000C8)
        {
          if ((uint64_t)a3 <= 0x8630000001DLL)
          {
            if (a3 != 0x833000000C9)
            {
              if (a3 != 0x84200000294) {
                goto LABEL_1562;
              }
              id v13 = &unk_2701625D8;
            }
          }
          else if (a3 != 0x8630000001ELL)
          {
            if (a3 == 0x86D0000029DLL)
            {
              id v13 = &unk_270161BA0;
            }
            else
            {
              if (a3 != 0x8700000029DLL) {
                goto LABEL_1562;
              }
              id v13 = &unk_270162860;
            }
          }
          goto LABEL_1561;
        }
        if ((uint64_t)a3 <= 0x830000000FALL)
        {
          if (a3 == 0x82E000000C9) {
            goto LABEL_1561;
          }
          if (a3 != 0x83000000008) {
            goto LABEL_1562;
          }
        }
        else if (a3 != 0x830000000FBLL && a3 != 0x83000000103)
        {
          uint64_t v50 = 0x8330000006DLL;
          goto LABEL_822;
        }
        id v13 = &unk_270162338;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0xBB90000006ELL)
      {
        switch(a3)
        {
          case 0xBB900000082uLL:
          case 0xBB900000083uLL:
            id v13 = &unk_270162440;
            goto LABEL_1561;
          case 0xBB900000084uLL:
            id v13 = &unk_270162428;
            goto LABEL_1561;
          case 0xBB900000085uLL:
          case 0xBB900000086uLL:
          case 0xBB900000088uLL:
            goto LABEL_1562;
          case 0xBB900000087uLL:
          case 0xBB900000089uLL:
            goto LABEL_644;
          default:
            if (a3 == 0xBB90000006FLL) {
              goto LABEL_895;
            }
            if (a3 == 0xBB900000071) {
              goto LABEL_894;
            }
            goto LABEL_1562;
        }
      }
      if ((uint64_t)a3 <= 0xBB90000005CLL)
      {
        if (a3 == 0x8710000029DLL)
        {
          id v13 = &unk_270162878;
        }
        else
        {
          if (a3 != 0x89400000000) {
            goto LABEL_1562;
          }
          id v13 = &unk_270161BD0;
        }
        goto LABEL_1561;
      }
      if (a3 == 0xBB90000005DLL) {
        goto LABEL_877;
      }
      uint64_t v86 = 97;
LABEL_649:
      if (a3 != (v86 & 0xFFFF0000FFFFFFFFLL | 0xBB900000000)) {
        goto LABEL_1562;
      }
      goto LABEL_759;
    }
    if ((uint64_t)a3 <= 0xBB9000004D4)
    {
      if ((uint64_t)a3 <= 0xBB9000003E8)
      {
        if ((uint64_t)a3 > 0xBB900000190)
        {
          if ((uint64_t)a3 <= 0xBB900000192)
          {
            if (a3 == 0xBB900000191) {
LABEL_891:
            }
              id v13 = &unk_270162470;
            else {
LABEL_1570:
            }
              id v13 = &unk_2701624A0;
          }
          else if (a3 == 0xBB900000193)
          {
LABEL_1573:
            id v13 = &unk_270162488;
          }
          else
          {
            if (a3 != 0xBB900000322 && a3 != 0xBB900000323) {
              goto LABEL_1562;
            }
LABEL_1011:
            id v13 = &unk_2701624D0;
          }
        }
        else
        {
          switch(a3)
          {
            case 0xBB90000012DuLL:
              if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 2) {
                [v12 addObject:&unk_2701624E8];
              }
              uint64_t v38 = &unk_270162470;
              goto LABEL_1028;
            case 0xBB90000012EuLL:
              if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 2) {
                [v12 addObject:&unk_2701624E8];
              }
              uint64_t v38 = &unk_2701624A0;
              goto LABEL_1028;
            case 0xBB90000012FuLL:
              if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 2) {
                [v12 addObject:&unk_2701624E8];
              }
              uint64_t v38 = &unk_270162488;
              goto LABEL_1028;
            case 0xBB900000130uLL:
              goto LABEL_1562;
            case 0xBB900000131uLL:
              if (objc_msgSend(v10, "mapSettingsLocationPrecisionType", &unk_270161AF8) == 2) {
                [v12 addObject:&unk_2701624E8];
              }
              [v12 addObject:&unk_270162500];
              if ([v10 mapSettingsEBike])
              {
                uint64_t v38 = &unk_270162518;
LABEL_1028:
                [v12 addObject:v38];
                id v13 = &unk_2701624B8;
              }
              else
              {
                id v13 = &unk_2701624B8;
              }
              break;
            default:
              if (a3 == 0xBB9000000C9)
              {
                [v11 addObject:&unk_2701624B8];
                if (a5 == 1) {
                  goto LABEL_1011;
                }
              }
              goto LABEL_1562;
          }
        }
        goto LABEL_1561;
      }
      if ((uint64_t)a3 <= 0xBB9000004BALL)
      {
        switch(a3)
        {
          case 0xBB9000003E9uLL:
          case 0xBB9000003EDuLL:
          case 0xBB9000003EEuLL:
          case 0xBB9000003EFuLL:
          case 0xBB9000003F0uLL:
          case 0xBB9000003F2uLL:
LABEL_472:
            id v13 = &unk_270162458;
            goto LABEL_1561;
          default:
            goto LABEL_1562;
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 > 0xBB9000004C4)
      {
        if (a3 != 0xBB9000004C5)
        {
          uint64_t v74 = 0xBB9000004C6;
LABEL_876:
          if (a3 != v74) {
            goto LABEL_1562;
          }
LABEL_877:
          [v11 addObject:&unk_270162530];
          id v13 = &unk_270162578;
          goto LABEL_1561;
        }
LABEL_894:
        [v11 addObject:&unk_270162530];
        id v13 = &unk_270162560;
        goto LABEL_1561;
      }
      if (a3 == 0xBB9000004BBLL)
      {
        id v13 = &unk_270162530;
        goto LABEL_1561;
      }
      uint64_t v86 = 1220;
      goto LABEL_649;
    }
    if ((uint64_t)a3 > 0x1389000001F4)
    {
      if ((uint64_t)a3 <= 0x138A00000258)
      {
        switch(a3)
        {
          case 0x1389000001F5uLL:
          case 0x1389000001F6uLL:
          case 0x1389000001F7uLL:
          case 0x1389000001F8uLL:
            goto LABEL_235;
          default:
            if (a3 == 0x1389000004B8) {
              goto LABEL_956;
            }
            break;
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 <= 0x138C00000258)
      {
        if (a3 == 0x138A00000259)
        {
          id v13 = &unk_270162800;
        }
        else
        {
          if (a3 != 0x138B00000259) {
            goto LABEL_1562;
          }
          id v13 = &unk_270162830;
        }
        goto LABEL_1561;
      }
      if (a3 == 0x138C00000259)
      {
        id v13 = &unk_2701627E8;
        goto LABEL_1561;
      }
      if (a3 == 0x1391000000C9) {
        goto LABEL_1561;
      }
      uint64_t v14 = 0x1392000000C9;
      goto LABEL_984;
    }
    if ((uint64_t)a3 <= 0xBF7000000C8)
    {
      if ((uint64_t)a3 > 0xBCB00000261)
      {
        if (a3 != 0xBCB00000262 && a3 != 0xBDE0000028BLL) {
          goto LABEL_1562;
        }
        goto LABEL_1032;
      }
      if (a3 != 0xBB9000004D5)
      {
        uint64_t v87 = 0xBBC00000193;
        goto LABEL_717;
      }
LABEL_895:
      [v11 addObject:&unk_270162530];
      id v13 = &unk_270162548;
      goto LABEL_1561;
    }
    if ((uint64_t)a3 <= 0xFA1000004B7)
    {
      if (a3 == 0xBF7000000C9) {
        goto LABEL_1561;
      }
      if (a3 != 0xBF900000262) {
        goto LABEL_1562;
      }
      goto LABEL_1032;
    }
    if (a3 != 0xFA1000004B8)
    {
      if (a3 != 0xFA600000284)
      {
        if (a3 != 0x138900000000) {
          goto LABEL_1562;
        }
LABEL_235:
        id v13 = &unk_270162380;
        goto LABEL_1561;
      }
      goto LABEL_1113;
    }
LABEL_956:
    id v13 = &unk_270161CD8;
    goto LABEL_1561;
  }
  if ((uint64_t)a3 > 0x4060000004FLL)
  {
    if ((uint64_t)a3 > 0x414FFFFFFFFLL)
    {
      if ((uint64_t)a3 <= 0x41B000001F4)
      {
        if ((uint64_t)a3 > 0x417FFFFFFFFLL)
        {
          if ((uint64_t)a3 <= 0x419000001F4)
          {
            switch(a3)
            {
              case 0x418000001F5uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v59 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v60 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x418000001F6uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v212 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v213 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x418000001F7uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v214 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v215 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x418000001F8uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v216 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v217 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x418000001F9uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v218 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v219 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              default:
                if (a3 == 0x41800000000)
                {
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v262 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if ([v10 mapViewIsGlobeProjection])
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v263 < 12.0) {
                      [v12 addObject:&unk_270161CA8];
                    }
                  }
                  if ([v10 mapViewIsAdvancedMap]) {
                    goto LABEL_1510;
                  }
                }
                else if (a3 == 0x41900000000)
                {
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v91 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if ([v10 mapViewIsGlobeProjection])
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v92 < 12.0)
                    {
LABEL_1111:
                      v82 = &unk_270161CA8;
                      goto LABEL_1508;
                    }
                  }
                  goto LABEL_1509;
                }
                break;
            }
          }
          else
          {
            if ((uint64_t)a3 <= 0x41A000001F4)
            {
              switch(a3)
              {
                case 0x419000001F5uLL:
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v45 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if ([v10 mapViewIsGlobeProjection])
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v46 < 12.0) {
                      goto LABEL_1111;
                    }
                  }
                  goto LABEL_1509;
                case 0x419000001F6uLL:
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v172 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if (![v10 mapViewIsGlobeProjection]) {
                    goto LABEL_1509;
                  }
                  [v10 mapViewStyleZoomLevel];
                  if (v173 >= 12.0) {
                    goto LABEL_1509;
                  }
                  goto LABEL_1506;
                case 0x419000001F7uLL:
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v174 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if (![v10 mapViewIsGlobeProjection]) {
                    goto LABEL_1509;
                  }
                  [v10 mapViewStyleZoomLevel];
                  if (v175 >= 12.0) {
                    goto LABEL_1509;
                  }
                  goto LABEL_1506;
                case 0x419000001F8uLL:
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v176 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if (![v10 mapViewIsGlobeProjection]) {
                    goto LABEL_1509;
                  }
                  [v10 mapViewStyleZoomLevel];
                  if (v177 >= 12.0) {
                    goto LABEL_1509;
                  }
                  goto LABEL_1506;
                case 0x419000001F9uLL:
                  if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                  {
                    [v10 mapViewStyleZoomLevel];
                    if (v178 >= 12.0) {
                      [v12 addObject:&unk_270161C90];
                    }
                  }
                  if (![v10 mapViewIsGlobeProjection]) {
                    goto LABEL_1509;
                  }
                  [v10 mapViewStyleZoomLevel];
                  if (v179 >= 12.0) {
                    goto LABEL_1509;
                  }
LABEL_1506:
                  v82 = &unk_270161CA8;
                  goto LABEL_1508;
                default:
                  if (a3 == 0x41A00000000)
                  {
                    if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                    {
                      [v10 mapViewStyleZoomLevel];
                      if (v113 >= 12.0) {
                        [v12 addObject:&unk_270161C90];
                      }
                    }
                    if ([v10 mapViewIsGlobeProjection])
                    {
                      [v10 mapViewStyleZoomLevel];
                      if (v114 < 12.0) {
                        [v12 addObject:&unk_270161CA8];
                      }
                    }
                    if ([v10 mapViewIsAdvancedMap]) {
                      goto LABEL_1510;
                    }
                  }
                  goto LABEL_1562;
              }
            }
            switch(a3)
            {
              case 0x41A000001F5uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v70 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v71 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x41A000001F6uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v248 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v249 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x41A000001F7uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v250 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v251 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x41A000001F8uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v252 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v253 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              case 0x41A000001F9uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v254 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v255 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1510;
                }
                break;
              default:
                if (a3 == 0x41B00000000)
                {
                  if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
                    goto LABEL_1509;
                  }
                  [v10 mapViewStyleZoomLevel];
                  if (v126 < 12.0) {
                    goto LABEL_1509;
                  }
                  goto LABEL_1000;
                }
                break;
            }
          }
          goto LABEL_1562;
        }
        if ((uint64_t)a3 > 0x416000001F4)
        {
          if ((uint64_t)a3 > 0x416FFFFFFFFLL)
          {
            switch(a3)
            {
              case 0x417000001F5uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v65 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v66 < 12.0) {
                    goto LABEL_1111;
                  }
                }
                goto LABEL_1509;
              case 0x417000001F6uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v236 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v237 < 12.0) {
                    goto LABEL_1506;
                  }
                }
                goto LABEL_1509;
              case 0x417000001F7uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v238 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v239 < 12.0) {
                    goto LABEL_1506;
                  }
                }
                goto LABEL_1509;
              case 0x417000001F8uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v240 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v241 < 12.0) {
                    goto LABEL_1506;
                  }
                }
                goto LABEL_1509;
              case 0x417000001F9uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v242 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v243 < 12.0) {
                    goto LABEL_1506;
                  }
                }
                goto LABEL_1509;
              default:
                if (a3 != 0x41700000000) {
                  goto LABEL_1562;
                }
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v121 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v122 < 12.0) {
                    goto LABEL_1111;
                  }
                }
                goto LABEL_1509;
            }
          }
          switch(a3)
          {
            case 0x416000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v39 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v40 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x416000001F6uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v152 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v153 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x416000001F7uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v154 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v155 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x416000001F8uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v156 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v157 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x416000001F9uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v158 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v159 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            default:
              uint64_t v102 = 0x416000004B8;
              goto LABEL_955;
          }
          goto LABEL_1562;
        }
        if ((uint64_t)a3 <= 0x415000004B7)
        {
          switch(a3)
          {
            case 0x415000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v53 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v54 < 12.0) {
                  goto LABEL_1111;
                }
              }
              goto LABEL_1509;
            case 0x415000001F6uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v192 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v193 < 12.0) {
                  goto LABEL_1506;
                }
              }
              goto LABEL_1509;
            case 0x415000001F7uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v194 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v195 < 12.0) {
                  goto LABEL_1506;
                }
              }
              goto LABEL_1509;
            case 0x415000001F8uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v196 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v197 < 12.0) {
                  goto LABEL_1506;
                }
              }
              goto LABEL_1509;
            case 0x415000001F9uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v198 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v199 < 12.0) {
                  goto LABEL_1506;
                }
              }
              goto LABEL_1509;
            default:
              if (a3 != 0x41500000000) {
                goto LABEL_1562;
              }
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v115 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v116 < 12.0) {
                  goto LABEL_1111;
                }
              }
              goto LABEL_1509;
          }
        }
        if (a3 == 0x415000004B8) {
          goto LABEL_956;
        }
        if (a3 != 0x41600000000) {
          goto LABEL_1562;
        }
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v96 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v97 < 12.0) {
            [v12 addObject:&unk_270161CA8];
          }
        }
        if (![v10 mapViewIsAdvancedMap]) {
          goto LABEL_1562;
        }
LABEL_1531:
        [v10 mapViewStyleZoomLevel];
        if (v261 < 12.0) {
          goto LABEL_1562;
        }
LABEL_1511:
        id v13 = &unk_270161CC0;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0x422FFFFFFFFLL)
      {
        if ((uint64_t)a3 <= 0x424000001F4)
        {
          switch(a3)
          {
            case 0x423000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v57 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v58 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1510;
              }
              break;
            case 0x423000001F6uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v204 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v205 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x423000001F7uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v206 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v207 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1510;
              }
              break;
            case 0x423000001F8uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v208 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v209 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x423000001F9uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v210 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v211 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1510;
              }
              break;
            default:
              if (a3 == 0x42300000000)
              {
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v259 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v260 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1531;
                }
              }
              else if (a3 == 0x42400000000)
              {
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v89 >= 12.0) {
                    [v12 addObject:&unk_270161C90];
                  }
                }
                if ([v10 mapViewIsGlobeProjection])
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v90 < 12.0) {
                    [v12 addObject:&unk_270161CA8];
                  }
                }
                if ([v10 mapViewIsAdvancedMap]) {
                  goto LABEL_1531;
                }
              }
              break;
          }
        }
        else
        {
          if ((uint64_t)a3 > 0x425000001F4)
          {
            switch(a3)
            {
              case 0x425000001F5uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v69 >= 12.0) {
                    goto LABEL_1000;
                  }
                }
                goto LABEL_1509;
              case 0x425000001F6uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v244 >= 12.0) {
                    goto LABEL_1507;
                  }
                }
                goto LABEL_1509;
              case 0x425000001F7uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v245 >= 12.0) {
                    goto LABEL_1507;
                  }
                }
                goto LABEL_1509;
              case 0x425000001F8uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v246 >= 12.0) {
                    goto LABEL_1507;
                  }
                }
                goto LABEL_1509;
              case 0x425000001F9uLL:
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v247 >= 12.0) {
                    goto LABEL_1507;
                  }
                }
                goto LABEL_1509;
              default:
                if (a3 != 0x42600000000) {
                  goto LABEL_1562;
                }
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v125 >= 12.0) {
                    goto LABEL_1000;
                  }
                }
                goto LABEL_1509;
            }
          }
          switch(a3)
          {
            case 0x424000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v43 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v44 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x424000001F6uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v164 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v165 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x424000001F7uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v166 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v167 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x424000001F8uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v168 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v169 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            case 0x424000001F9uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v170 >= 12.0) {
                  [v12 addObject:&unk_270161C90];
                }
              }
              if ([v10 mapViewIsGlobeProjection])
              {
                [v10 mapViewStyleZoomLevel];
                if (v171 < 12.0) {
                  [v12 addObject:&unk_270161CA8];
                }
              }
              if ([v10 mapViewIsAdvancedMap]) {
                goto LABEL_1531;
              }
              break;
            default:
              if (a3 == 0x42500000000)
              {
                if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
                  goto LABEL_1509;
                }
                [v10 mapViewStyleZoomLevel];
                if (v112 < 12.0) {
                  goto LABEL_1509;
                }
                goto LABEL_1000;
              }
              break;
          }
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 > 0x41F000001F4)
      {
        switch(a3)
        {
          case 0x422000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v19 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v20 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x422000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v144 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v145 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x422000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v146 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v147 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x422000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v148 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v149 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x422000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v150 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v151 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          default:
            if (a3 != 0x42200000000) {
              goto LABEL_1562;
            }
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v105 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v106 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
        }
      }
      if ((uint64_t)a3 <= 0x41D000001F4)
      {
        switch(a3)
        {
          case 0x41B000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v49 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x41B000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v180 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x41B000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v181 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x41B000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v182 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x41B000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v183 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          default:
            goto LABEL_1562;
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 <= 0x41EFFFFFFFFLL)
      {
        if (a3 != 0x41D000001F5 && a3 != 0x41D000001F6) {
          goto LABEL_1562;
        }
LABEL_1113:
        if ([v10 placeCardPlaceCardType] != 12) {
          goto LABEL_1562;
        }
        goto LABEL_1114;
      }
      if (a3 != 0x41F00000000)
      {
        if (a3 != 0x41F00000008)
        {
          uint64_t v14 = 0x41F000000C9;
          goto LABEL_984;
        }
LABEL_1114:
        id v13 = &unk_270162008;
        goto LABEL_1561;
      }
      if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) != 0
        || ([v10 mapViewStyleZoomLevel], v256 < 12.0))
      {
LABEL_1509:
        if (![v10 mapViewIsAdvancedMap]) {
          goto LABEL_1562;
        }
LABEL_1510:
        [v10 mapViewStyleZoomLevel];
        if (v257 < 12.0) {
          goto LABEL_1562;
        }
        goto LABEL_1511;
      }
LABEL_1507:
      v82 = &unk_270161C90;
LABEL_1508:
      [v12 addObject:v82];
      goto LABEL_1509;
    }
    if ((uint64_t)a3 <= 0x40C000001F4)
    {
      if ((uint64_t)a3 <= 0x408FFFFFFFFLL)
      {
        if ((uint64_t)a3 > 0x407000001F4)
        {
          if ((uint64_t)a3 <= 0x408000000C8)
          {
            switch(a3)
            {
              case 0x407000001F5uLL:
              case 0x407000001F6uLL:
              case 0x407000001F7uLL:
              case 0x407000001F8uLL:
              case 0x407000001F9uLL:
                goto LABEL_419;
              default:
                if (a3 != 0x40800000000) {
                  goto LABEL_1562;
                }
                if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
                {
                  [v10 mapViewStyleZoomLevel];
                  if (v110 >= 12.0) {
                    goto LABEL_1000;
                  }
                }
                goto LABEL_1509;
            }
          }
          switch(a3)
          {
            case 0x408000001F5uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v64 >= 12.0) {
                  goto LABEL_1000;
                }
              }
              goto LABEL_1509;
            case 0x408000001F6uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v232 >= 12.0) {
                  goto LABEL_1507;
                }
              }
              goto LABEL_1509;
            case 0x408000001F7uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v233 >= 12.0) {
                  goto LABEL_1507;
                }
              }
              goto LABEL_1509;
            case 0x408000001F8uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v234 >= 12.0) {
                  goto LABEL_1507;
                }
              }
              goto LABEL_1509;
            case 0x408000001F9uLL:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v235 >= 12.0) {
                  goto LABEL_1507;
                }
              }
              goto LABEL_1509;
            default:
              uint64_t v14 = 0x408000000C9;
              goto LABEL_984;
          }
        }
        if ((uint64_t)a3 > 0x406000001F4)
        {
          switch(a3)
          {
            case 0x406000001F5uLL:
            case 0x406000001F6uLL:
            case 0x406000001F7uLL:
            case 0x406000001F8uLL:
            case 0x406000001F9uLL:
              goto LABEL_582;
            default:
              if (a3 == 0x406000004B9) {
                goto LABEL_889;
              }
              if (a3 != 0x40700000000) {
                goto LABEL_1562;
              }
              goto LABEL_419;
          }
        }
        if (a3 != 0x40600000050)
        {
          uint64_t v14 = 0x406000000C9;
          goto LABEL_984;
        }
        goto LABEL_956;
      }
      if ((uint64_t)a3 <= 0x40A000004B7)
      {
        if ((uint64_t)a3 > 0x409FFFFFFFFLL)
        {
          switch(a3)
          {
            case 0x40A000001F5uLL:
            case 0x40A000001F6uLL:
            case 0x40A000001F7uLL:
            case 0x40A000001F8uLL:
            case 0x40A000001F9uLL:
              goto LABEL_998;
            default:
              uint64_t v123 = 0x40A00000000;
LABEL_997:
              if (a3 != v123) {
                goto LABEL_1562;
              }
LABEL_998:
              if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
              {
                [v10 mapViewStyleZoomLevel];
                if (v124 >= 12.0) {
                  goto LABEL_1000;
                }
              }
              goto LABEL_1509;
          }
        }
        switch(a3)
        {
          case 0x409000001F5uLL:
          case 0x409000001F6uLL:
          case 0x409000001F7uLL:
          case 0x409000001F8uLL:
          case 0x409000001F9uLL:
            goto LABEL_419;
          default:
            if (a3 != 0x40900000000) {
              goto LABEL_1562;
            }
LABEL_419:
            if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
              goto LABEL_589;
            }
            [v10 mapViewStyleZoomLevel];
            if (v67 < 12.0) {
              goto LABEL_589;
            }
            long long v68 = &unk_270161C90;
            break;
        }
        goto LABEL_588;
      }
      if ((uint64_t)a3 > 0x40B000001F4)
      {
        switch(a3)
        {
          case 0x40B000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v56 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x40B000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v200 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x40B000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v201 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x40B000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v202 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x40B000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v203 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          default:
            if (a3 != 0x40C00000000) {
              goto LABEL_1562;
            }
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v117 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
        }
      }
      if (a3 == 0x40A000004B8) {
        goto LABEL_956;
      }
      if (a3 != 0x40B00000000) {
        goto LABEL_1562;
      }
      if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
        goto LABEL_1509;
      }
      [v10 mapViewStyleZoomLevel];
      if (v98 < 12.0) {
        goto LABEL_1509;
      }
LABEL_1000:
      v82 = &unk_270161C90;
      goto LABEL_1508;
    }
    if ((uint64_t)a3 > 0x411000001F4)
    {
      if ((uint64_t)a3 <= 0x412FFFFFFFFLL)
      {
        switch(a3)
        {
          case 0x411000001F5uLL:
          case 0x411000001F6uLL:
          case 0x411000001F7uLL:
          case 0x411000001F8uLL:
          case 0x411000001F9uLL:
            goto LABEL_582;
          default:
            goto LABEL_1581;
        }
      }
      if ((uint64_t)a3 <= 0x413FFFFFFFFLL)
      {
        switch(a3)
        {
          case 0x413000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v15 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v16 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x413000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v128 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v129 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x413000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v130 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v131 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x413000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v132 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v133 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          case 0x413000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v134 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v135 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
          default:
            if (a3 != 0x41300000000) {
              goto LABEL_1562;
            }
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v108 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v109 < 12.0) {
                goto LABEL_1111;
              }
            }
            goto LABEL_1509;
        }
      }
      switch(a3)
      {
        case 0x414000001F5uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v62 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v63 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
          break;
        case 0x414000001F6uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v224 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v225 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
          break;
        case 0x414000001F7uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v226 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v227 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
          break;
        case 0x414000001F8uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v228 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v229 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
          break;
        case 0x414000001F9uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v230 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v231 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
          break;
        default:
          if (a3 == 0x41400000000)
          {
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v119 >= 12.0) {
                [v12 addObject:&unk_270161C90];
              }
            }
            if ([v10 mapViewIsGlobeProjection])
            {
              [v10 mapViewStyleZoomLevel];
              if (v120 < 12.0) {
                [v12 addObject:&unk_270161CA8];
              }
            }
            if ([v10 mapViewIsAdvancedMap]) {
              goto LABEL_1510;
            }
          }
          break;
      }
      goto LABEL_1562;
    }
    if ((uint64_t)a3 <= 0x40FFFFFFFFFLL)
    {
      switch(a3)
      {
        case 0x40C000001F5uLL:
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v80 >= 12.0) {
              goto LABEL_1000;
            }
          }
          goto LABEL_1509;
        case 0x40C000001F6uLL:
        case 0x40C000001F7uLL:
        case 0x40C000001F8uLL:
        case 0x40C000001F9uLL:
LABEL_578:
          if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
            goto LABEL_1509;
          }
          [v10 mapViewStyleZoomLevel];
          if (v81 < 12.0) {
            goto LABEL_1509;
          }
          v82 = &unk_270161C90;
          break;
        default:
LABEL_1581:
          JUMPOUT(0);
      }
      goto LABEL_1508;
    }
    if ((uint64_t)a3 <= 0x410000004B7)
    {
      switch(a3)
      {
        case 0x410000001F5uLL:
        case 0x410000001F6uLL:
        case 0x410000001F7uLL:
        case 0x410000001F8uLL:
        case 0x410000001F9uLL:
          goto LABEL_582;
        default:
          if (a3 == 0x41000000000) {
            goto LABEL_582;
          }
          break;
      }
      goto LABEL_1562;
    }
    if (a3 == 0x410000004B8) {
      goto LABEL_956;
    }
    if (a3 != 0x41100000000) {
      goto LABEL_1562;
    }
LABEL_582:
    if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
    {
      [v10 mapViewStyleZoomLevel];
      if (v83 >= 12.0) {
        [v12 addObject:&unk_270161C90];
      }
    }
    if (![v10 mapViewIsGlobeProjection]) {
      goto LABEL_589;
    }
    [v10 mapViewStyleZoomLevel];
    if (v84 >= 12.0) {
      goto LABEL_589;
    }
    long long v68 = &unk_270161CA8;
LABEL_588:
    [v12 addObject:v68];
LABEL_589:
    if (![v10 mapViewIsAdvancedMap]) {
      goto LABEL_1562;
    }
    [v10 mapViewStyleZoomLevel];
    if (v85 < 12.0) {
      goto LABEL_1562;
    }
    id v13 = &unk_270161CC0;
    goto LABEL_1561;
  }
  if ((uint64_t)a3 <= 0x17D000002BDLL)
  {
    if ((uint64_t)a3 > 0xAC00000007)
    {
      if ((uint64_t)a3 <= 0x1340000012ELL)
      {
        if ((uint64_t)a3 > 0xF30000001ELL)
        {
          if ((uint64_t)a3 <= 0x11A000000C8)
          {
            if ((uint64_t)a3 > 0x11900000037)
            {
              if (a3 - 0x11900000038 < 2) {
                goto LABEL_1561;
              }
              goto LABEL_1562;
            }
            if (a3 == 0xF30000001FLL)
            {
              if (([v8 isEqualToString:@"AUTOMOBILE"] & 1) == 0) {
                goto LABEL_1562;
              }
              id v13 = &unk_270162068;
              goto LABEL_1561;
            }
            if (a3 == 0xF50000006DLL) {
              goto LABEL_865;
            }
            if (a3 != 0xFA000001F8) {
              goto LABEL_1562;
            }
            id v72 = @"OFFLINE";
            goto LABEL_859;
          }
          if ((uint64_t)a3 <= 0x11D00000037)
          {
            if (a3 == 0x11A000000C9) {
              goto LABEL_1561;
            }
            uint64_t v14 = 0x11C000000C9;
            goto LABEL_984;
          }
          if (a3 - 0x11D00000038 < 2) {
            goto LABEL_1561;
          }
          if (a3 == 0x12300000001) {
            goto LABEL_749;
          }
          if (a3 != 0x13400000008) {
            goto LABEL_1562;
          }
LABEL_887:
          id v13 = &unk_270162848;
          goto LABEL_1561;
        }
        if ((uint64_t)a3 <= 0xDC0000002BLL)
        {
          if ((uint64_t)a3 > 0xD60000006CLL)
          {
            if (a3 == 0xD60000006DLL) {
              goto LABEL_865;
            }
            if (a3 == 0xD700000259)
            {
              id v13 = &unk_2701626C8;
              goto LABEL_1561;
            }
            uint64_t v47 = 0xDB0000002CLL;
            goto LABEL_828;
          }
          if (a3 == 0xAC00000008)
          {
            id v13 = &unk_2701625F0;
            goto LABEL_1561;
          }
          uint64_t v79 = 0xC800000015;
          goto LABEL_742;
        }
        if ((uint64_t)a3 <= 0xEB00000261)
        {
          if (a3 != 0xDC0000002CLL)
          {
            uint64_t v47 = 0xE70000002CLL;
LABEL_828:
            if (a3 != v47) {
              goto LABEL_1562;
            }
          }
        }
        else
        {
          if (a3 == 0xEB00000262) {
            goto LABEL_1032;
          }
          if (a3 != 0xED0000002CLL)
          {
            uint64_t v47 = 0xF10000002CLL;
            goto LABEL_828;
          }
        }
        id v13 = &unk_2701627A0;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 <= 0x1730000012CLL)
      {
        if ((uint64_t)a3 <= 0x16D000004B8)
        {
          if ((uint64_t)a3 <= 0x16B000000C8)
          {
            if (a3 != 0x1340000012FLL)
            {
              if (a3 != 0x15100000322) {
                goto LABEL_1562;
              }
              [v11 addObject:&unk_270161B10];
              uint64_t v99 = +[GEOAPSharedStateData sharedData];
              char v100 = [v99 hasCarPlayInfo];

              if ((v100 & 1) == 0) {
                goto LABEL_1562;
              }
              id v13 = &unk_270161B28;
              goto LABEL_1561;
            }
            goto LABEL_887;
          }
          if (a3 != 0x16B000000C9 && a3 != 0x16C000000C9 && a3 != 0x16D000000C9) {
            goto LABEL_1562;
          }
LABEL_864:
          id v13 = &unk_270162278;
          goto LABEL_1561;
        }
        if ((uint64_t)a3 > 0x171FFFFFFFFLL)
        {
          if (a3 == 0x17200000000)
          {
            id v13 = &unk_270161BE8;
            goto LABEL_1561;
          }
          if (a3 == 0x17300000008) {
            goto LABEL_1017;
          }
          unint64_t v75 = 0x173000000C9;
          goto LABEL_1016;
        }
        if (a3 != 0x16D000004B9)
        {
          uint64_t v101 = 0x16F000000C9;
          goto LABEL_863;
        }
LABEL_888:
        [v11 addObject:&unk_270162278];
        goto LABEL_889;
      }
      if ((uint64_t)a3 <= 0x17D0000002DLL)
      {
        switch(a3)
        {
          case 0x1730000012DuLL:
          case 0x1730000012EuLL:
          case 0x1730000012FuLL:
          case 0x17300000131uLL:
            goto LABEL_1017;
          case 0x17300000130uLL:
            goto LABEL_1562;
          default:
            uint64_t v78 = 30;
            goto LABEL_1015;
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 <= 0x17D00000055)
      {
        if (a3 != 0x17D0000002ELL)
        {
          uint64_t v78 = 84;
          goto LABEL_1015;
        }
      }
      else if (a3 != 0x17D00000056 && a3 != 0x17D0000005ALL)
      {
        uint64_t v78 = 201;
LABEL_1015:
        unint64_t v75 = v78 & 0xFFFF0000FFFFFFFFLL | 0x17D00000000;
LABEL_1016:
        if (a3 != v75) {
          goto LABEL_1562;
        }
      }
LABEL_1017:
      id v13 = &unk_2701626B0;
      goto LABEL_1561;
    }
    if ((uint64_t)a3 <= 0x52FFFFFFFFLL)
    {
      if ((uint64_t)a3 <= 0x15000000C8)
      {
        if ((uint64_t)a3 > 0x150000001CLL)
        {
          switch(a3)
          {
            case 0x1500000082uLL:
              id v13 = &unk_270162200;
              goto LABEL_1561;
            case 0x1500000083uLL:
              id v13 = &unk_270162110;
              goto LABEL_1561;
            case 0x1500000084uLL:
              id v13 = &unk_2701621E8;
              goto LABEL_1561;
            case 0x1500000085uLL:
            case 0x1500000086uLL:
            case 0x1500000088uLL:
            case 0x150000008AuLL:
            case 0x150000008BuLL:
              goto LABEL_1562;
            case 0x1500000087uLL:
            case 0x1500000089uLL:
            case 0x150000008CuLL:
              goto LABEL_753;
            default:
              if (a3 == 0x150000001DLL)
              {
                id v13 = &unk_270162098;
              }
              else
              {
                if (a3 != 0x150000002CLL) {
                  goto LABEL_1562;
                }
                id v13 = &unk_270162140;
              }
              break;
          }
          goto LABEL_1561;
        }
        if ((uint64_t)a3 > 0x1500000012)
        {
          if (a3 == 0x1500000013)
          {
            id v13 = &unk_2701620C8;
          }
          else
          {
            if (a3 != 0x150000001CLL) {
              goto LABEL_1562;
            }
            id v13 = &unk_2701620E0;
          }
          goto LABEL_1561;
        }
        if (a3 == 0x110000026ELL)
        {
          id v13 = &unk_2701625C0;
          goto LABEL_1561;
        }
        if (a3 != 0x1300000000) {
          goto LABEL_1562;
        }
        [v11 addObject:&unk_270161D38];
        if ([v10 mapsInOfflineMode]) {
          [v12 addObject:&unk_270161D50];
        }
        if ([v10 mapLaunchIsHandoff]) {
          [v12 addObject:&unk_270161D68];
        }
        id v21 = +[GEOAPSharedStateData sharedData];
        int v22 = [v21 is3rdPartyPunchIn];

        if (v22) {
          [v12 addObject:&unk_270161D80];
        }
        uint64_t v23 = +[GEOAPSharedStateData sharedData];
        int v24 = [v23 isFindMyPunchIn];

        if (v24) {
          [v12 addObject:&unk_270161D98];
        }
        v25 = +[GEOAPSharedStateData sharedData];
        int v26 = [v25 isOther2ndPartyPunchIn];

        if (v26) {
          [v12 addObject:&unk_270161DB0];
        }
        uint64_t v27 = +[GEOAPSharedStateData sharedData];
        int v28 = [v27 isSafariPunchIn];

        if (v28) {
          [v12 addObject:&unk_270161DC8];
        }
        uint64_t v29 = +[GEOAPSharedStateData sharedData];
        int v30 = [v29 isSiriPunchIn];

        if (v30) {
          [v12 addObject:&unk_270161DE0];
        }
        double v31 = +[GEOAPSharedStateData sharedData];
        int v32 = [v31 isSMSPunchIn];

        if (v32) {
          [v12 addObject:&unk_270161DF8];
        }
        uint64_t v33 = +[GEOAPSharedStateData sharedData];
        int v34 = [v33 isSpotlightPunchIn];

        if (v34) {
          [v12 addObject:&unk_270161E10];
        }
        id v35 = [v10 mapLaunchSourceAppId];
        char v36 = [v35 isEqualToString:@"com.apple.Maps.GeneralMapsWidget"];

        if ((v36 & 1) == 0) {
          goto LABEL_1562;
        }
        id v13 = &unk_270161E28;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 > 0x2100000285)
      {
        if ((uint64_t)a3 <= 0x320000001DLL)
        {
          if (a3 == 0x2100000286)
          {
            id v13 = &unk_270161CF0;
          }
          else
          {
            if (a3 != 0x2D000006ACLL) {
              goto LABEL_1562;
            }
            id v13 = &unk_270161C48;
          }
          goto LABEL_1561;
        }
        if (a3 == 0x320000001ELL) {
          goto LABEL_1561;
        }
        uint64_t v14 = 0x32000000C9;
        goto LABEL_984;
      }
      if ((uint64_t)a3 > 0x1500000102)
      {
        if (a3 == 0x1500000103)
        {
          id v13 = &unk_2701620F8;
          goto LABEL_1561;
        }
        if (a3 != 0x15000003EFLL) {
          goto LABEL_1562;
        }
        goto LABEL_779;
      }
      if (a3 == 0x15000000C9)
      {
        [v11 addObject:&unk_270162158];
        id v184 = +[GEOAPSharedStateData sharedData];
        int v185 = [v184 placeCardIsPersonLocationShared];

        if (v185) {
          [v12 addObject:&unk_270162170];
        }
        if ([v10 hasShowcase]) {
          [v12 addObject:&unk_270162188];
        }
        int v186 = a5 - 1;
        if ((a5 - 1) >= 3) {
          goto LABEL_1562;
        }
        uint64_t v187 = &unk_265345888;
        goto LABEL_1521;
      }
      if (a3 != 0x15000000FELL) {
        goto LABEL_1562;
      }
LABEL_753:
      id v13 = &unk_270162128;
      goto LABEL_1561;
    }
    if ((uint64_t)a3 > 0x780000012DLL)
    {
      if ((uint64_t)a3 > 0x7A00000191)
      {
        if ((uint64_t)a3 <= 0x7B00000191)
        {
          if (a3 == 0x7A00000192) {
            goto LABEL_873;
          }
          if (a3 != 0x7B0000012ELL) {
            goto LABEL_1562;
          }
        }
        else if (a3 != 0x7B00000192)
        {
          if (a3 == 0x9B00000015)
          {
LABEL_743:
            id v13 = &unk_270161FF0;
            goto LABEL_1561;
          }
          uint64_t v79 = 0x9D00000015;
LABEL_742:
          if (a3 != v79) {
            goto LABEL_1562;
          }
          goto LABEL_743;
        }
        id v13 = &unk_270161B88;
        goto LABEL_1561;
      }
      if ((uint64_t)a3 <= 0x790000012DLL)
      {
        if (a3 == 0x780000012ELL) {
          goto LABEL_873;
        }
        uint64_t v51 = 0x7800000192;
      }
      else
      {
        if (a3 == 0x790000012ELL || a3 == 0x7900000192)
        {
          id v13 = &unk_270161B70;
          goto LABEL_1561;
        }
        uint64_t v51 = 0x7A0000012ELL;
      }
    }
    else
    {
      if ((uint64_t)a3 <= 0x5BFFFFFFFFLL)
      {
        if ((uint64_t)a3 <= 0x54000000FDLL)
        {
          if (a3 == 0x5300000000) {
            goto LABEL_816;
          }
          uint64_t v48 = 0x5400000008;
          goto LABEL_832;
        }
        if (a3 != 0x54000000FELL)
        {
          if (a3 != 0x5A00000000)
          {
            uint64_t v41 = 0x5B00000000;
            goto LABEL_815;
          }
          goto LABEL_816;
        }
        goto LABEL_833;
      }
      if ((uint64_t)a3 <= 0x67FFFFFFFFLL)
      {
        if (a3 != 0x5C00000000)
        {
          uint64_t v41 = 0x5D00000000;
LABEL_815:
          if (a3 != v41) {
            goto LABEL_1562;
          }
        }
LABEL_816:
        id v13 = &unk_270161C00;
        goto LABEL_1561;
      }
      if (a3 == 0x6800000000)
      {
        [v11 addObject:&unk_270161E40];
        if ([v10 mapUiShownActiveNavMode] == 5) {
          [v12 addObject:&unk_270161E58];
        }
        if ([v10 mapUiShownActiveNavMode] == 1) {
          [v12 addObject:&unk_270161E70];
        }
        if ([v10 mapUiShownActiveNavMode] == 3) {
          [v12 addObject:&unk_270161E88];
        }
        if ([v10 mapUiShownActiveNavMode] == 2)
        {
          id v13 = &unk_270161EA0;
          goto LABEL_1561;
        }
        goto LABEL_1562;
      }
      if (a3 == 0x770000012ELL)
      {
LABEL_873:
        id v13 = &unk_270161B58;
        goto LABEL_1561;
      }
      uint64_t v51 = 0x7700000192;
    }
    if (a3 != v51) {
      goto LABEL_1562;
    }
    goto LABEL_873;
  }
  if ((uint64_t)a3 > 0x3EBFFFFFFFFLL)
  {
    if ((uint64_t)a3 <= 0x3F8FFFFFFFFLL)
    {
      if ((uint64_t)a3 <= 0x3F2000004B7)
      {
        if ((uint64_t)a3 > 0x3F1FFFFFFFFLL)
        {
          switch(a3)
          {
            case 0x3F2000001F5uLL:
            case 0x3F2000001F6uLL:
            case 0x3F2000001F7uLL:
            case 0x3F2000001F8uLL:
            case 0x3F2000001F9uLL:
              goto LABEL_419;
            default:
              if (a3 == 0x3F200000000) {
                goto LABEL_419;
              }
              break;
          }
        }
        else
        {
          switch(a3)
          {
            case 0x3EC000001F5uLL:
            case 0x3EC000001F6uLL:
            case 0x3EC000001F7uLL:
            case 0x3EC000001F8uLL:
            case 0x3EC000001F9uLL:
              goto LABEL_582;
            default:
              if (a3 == 0x3EC00000000) {
                goto LABEL_582;
              }
              break;
          }
        }
        goto LABEL_1562;
      }
      if ((uint64_t)a3 > 0x3F3000001F4)
      {
        switch(a3)
        {
          case 0x3F3000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v52 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x3F3000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v188 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x3F3000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v189 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x3F3000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v190 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          case 0x3F3000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v191 >= 12.0) {
                goto LABEL_1507;
              }
            }
            goto LABEL_1509;
          default:
            uint64_t v102 = 0x3F3000004B8;
            goto LABEL_955;
        }
      }
      if (a3 == 0x3F2000004B8) {
        goto LABEL_956;
      }
      if (a3 != 0x3F300000000) {
        goto LABEL_1562;
      }
      if (objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8)) {
        goto LABEL_1509;
      }
      [v10 mapViewStyleZoomLevel];
      if (v95 < 12.0) {
        goto LABEL_1509;
      }
      goto LABEL_1000;
    }
    if ((uint64_t)a3 <= 0x3FBFFFFFFFFLL)
    {
      if ((uint64_t)a3 <= 0x3F9FFFFFFFFLL)
      {
        switch(a3)
        {
          case 0x3F9000001F5uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v42 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x3F9000001F6uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v160 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x3F9000001F7uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v161 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x3F9000001F8uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v162 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          case 0x3F9000001F9uLL:
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v163 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
          default:
            if (a3 != 0x3F900000000) {
              goto LABEL_1562;
            }
            if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
            {
              [v10 mapViewStyleZoomLevel];
              if (v111 >= 12.0) {
                goto LABEL_1000;
              }
            }
            goto LABEL_1509;
        }
      }
      switch(a3)
      {
        case 0x3FA000001F5uLL:
        case 0x3FA000001F7uLL:
        case 0x3FA000001F8uLL:
        case 0x3FA000001F9uLL:
          goto LABEL_419;
        case 0x3FA000001F6uLL:
          goto LABEL_998;
        default:
          uint64_t v123 = 0x3FA00000000;
          goto LABEL_997;
      }
    }
    if ((uint64_t)a3 <= 0x3FC000004B7)
    {
      switch(a3)
      {
        case 0x3FC000001F5uLL:
        case 0x3FC000001F6uLL:
        case 0x3FC000001F7uLL:
        case 0x3FC000001F8uLL:
        case 0x3FC000001F9uLL:
          goto LABEL_998;
        default:
          if (a3 != 0x3FC00000000) {
            goto LABEL_1562;
          }
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v118 >= 12.0) {
              goto LABEL_1000;
            }
          }
          goto LABEL_1509;
      }
    }
    if (a3 == 0x3FC000004B8) {
      goto LABEL_956;
    }
    if (a3 != 0x40600000000) {
      goto LABEL_1562;
    }
    goto LABEL_582;
  }
  if ((uint64_t)a3 <= 0x1D500000083)
  {
    if ((uint64_t)a3 > 0x19F0000006CLL)
    {
      if ((uint64_t)a3 <= 0x1A400000062)
      {
        if ((uint64_t)a3 <= 0x1A200000064)
        {
          if (a3 != 0x19F0000006DLL && a3 != 0x1A00000006DLL) {
            goto LABEL_1562;
          }
          goto LABEL_865;
        }
        if (a3 == 0x1A200000065 || a3 == 0x1A200000066)
        {
          [v11 addObject:&unk_270161FC0];
          if (([v10 mapsInOfflineMode] & 1) == 0) {
            goto LABEL_1562;
          }
          id v13 = &unk_270161FD8;
          goto LABEL_1561;
        }
        uint64_t v50 = 0x1A3000004B7;
        goto LABEL_822;
      }
      if ((uint64_t)a3 > 0x1A8000004B7)
      {
        if (a3 == 0x1A8000004B8) {
          goto LABEL_956;
        }
        if (a3 != 0x1AC000000C9)
        {
          if (a3 != 0x1CF00000083) {
            goto LABEL_1562;
          }
          id v13 = &unk_270162230;
          goto LABEL_1561;
        }
        goto LABEL_864;
      }
      if (a3 == 0x1A400000063) {
        goto LABEL_865;
      }
      uint64_t v101 = 0x1A6000000C9;
LABEL_863:
      if (a3 != v101) {
        goto LABEL_1562;
      }
      goto LABEL_864;
    }
    if ((uint64_t)a3 > 0x195000000C8)
    {
      if ((uint64_t)a3 > 0x19A000000C8)
      {
        if (a3 == 0x19A000000C9 || a3 == 0x19C000000C9) {
          goto LABEL_864;
        }
        if (a3 != 0x19C000004B9) {
          goto LABEL_1562;
        }
        goto LABEL_888;
      }
      if (a3 != 0x195000000C9)
      {
        uint64_t v102 = 0x196000004B8;
LABEL_955:
        if (a3 != v102) {
          goto LABEL_1562;
        }
        goto LABEL_956;
      }
    }
    else
    {
      if ((uint64_t)a3 <= 0x18A000000C8)
      {
        if (a3 != 0x17D000002BELL)
        {
          unint64_t v75 = 0x17E00000051;
          goto LABEL_1016;
        }
        goto LABEL_1017;
      }
      if (a3 == 0x18A000000C9) {
        goto LABEL_1017;
      }
      if (a3 == 0x193000000C9)
      {
        id v13 = &unk_270162050;
        goto LABEL_1561;
      }
      if (a3 != 0x194000001F6) {
        goto LABEL_1562;
      }
    }
    id v13 = &unk_270162170;
    goto LABEL_1561;
  }
  if ((uint64_t)a3 > 0x3EA000001F4)
  {
    switch(a3)
    {
      case 0x3EB000001F5uLL:
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v17 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v18 < 12.0) {
            goto LABEL_1111;
          }
        }
        goto LABEL_1509;
      case 0x3EB000001F6uLL:
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v136 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v137 < 12.0) {
            [v12 addObject:&unk_270161CA8];
          }
        }
        if ([v10 mapViewIsAdvancedMap]) {
          goto LABEL_1510;
        }
        break;
      case 0x3EB000001F7uLL:
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v138 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v139 < 12.0) {
            [v12 addObject:&unk_270161CA8];
          }
        }
        if ([v10 mapViewIsAdvancedMap]) {
          goto LABEL_1510;
        }
        break;
      case 0x3EB000001F8uLL:
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v140 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v141 < 12.0) {
            [v12 addObject:&unk_270161CA8];
          }
        }
        if ([v10 mapViewIsAdvancedMap]) {
          goto LABEL_1510;
        }
        break;
      case 0x3EB000001F9uLL:
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v142 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v143 < 12.0) {
            goto LABEL_1111;
          }
        }
        goto LABEL_1509;
      default:
        if (a3 == 0x3EB00000000)
        {
          if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
          {
            [v10 mapViewStyleZoomLevel];
            if (v103 >= 12.0) {
              [v12 addObject:&unk_270161C90];
            }
          }
          if ([v10 mapViewIsGlobeProjection])
          {
            [v10 mapViewStyleZoomLevel];
            if (v104 < 12.0) {
              [v12 addObject:&unk_270161CA8];
            }
          }
          if ([v10 mapViewIsAdvancedMap]) {
            goto LABEL_1510;
          }
        }
        break;
    }
    goto LABEL_1562;
  }
  if ((uint64_t)a3 > 0x3E9000001F4)
  {
    switch(a3)
    {
      case 0x3E9000001F5uLL:
      case 0x3E9000001F6uLL:
      case 0x3E9000001F7uLL:
      case 0x3E9000001F8uLL:
      case 0x3E9000001F9uLL:
        goto LABEL_582;
      default:
        if (a3 == 0x3E9000004B8) {
          goto LABEL_956;
        }
        if (a3 != 0x3EA00000000) {
          goto LABEL_1562;
        }
        if ((objc_msgSend(v10, "mapViewIsAdvancedMap", &unk_270161AF8) & 1) == 0)
        {
          [v10 mapViewStyleZoomLevel];
          if (v93 >= 12.0) {
            [v12 addObject:&unk_270161C90];
          }
        }
        if ([v10 mapViewIsGlobeProjection])
        {
          [v10 mapViewStyleZoomLevel];
          if (v94 < 12.0) {
            goto LABEL_1111;
          }
        }
        goto LABEL_1509;
    }
  }
  switch(a3)
  {
    case 0x1D500000084uLL:
      id v13 = &unk_270161B40;
      goto LABEL_1561;
    case 0x1D600000088uLL:
LABEL_644:
      if (v8) {
        id v13 = &unk_270162428;
      }
      else {
        id v13 = &unk_270162440;
      }
      goto LABEL_1561;
    case 0x3E900000000uLL:
      goto LABEL_582;
  }
LABEL_1562:
  if (objc_msgSend(v12, "count", v13)) {
    v264 = (void *)[v12 copy];
  }
  else {
    v264 = 0;
  }

  return v264;
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v15 = *(void *)&a4;
  uint64_t v184 = *(void *)&a3;
  uint64_t v201 = *MEMORY[0x263EF8340];
  id v188 = a5;
  id v186 = a6;
  id v16 = a7;
  id v185 = a8;
  id v17 = a9;
  id v18 = a10;
  double v19 = a11;
  id v187 = a12;
  double v20 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (v15 == 201)
    {
      if ([a1 isRunningInVisualIntelligence])
      {
        int v28 = GEOGetGEOAPUserActionAnalyticsLog();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v29 = GEOApplicationIdentifierOrProcessName();
          *(_DWORD *)buf = 138412546;
          double v198 = (const char *)@"VISUAL_INTELLIGENCE_SNIPPET";
          __int16 v199 = 2112;
          double v200 = v29;
          _os_log_impl(&dword_24FE56000, v28, OS_LOG_TYPE_DEBUG, "forcing target to be '%@' for process '%@'", buf, 0x16u);
        }
        uint64_t v15 = 145;
      }
      else
      {
        uint64_t v15 = 201;
      }
    }
    int v30 = GEOGetGEOAPUserActionAnalyticsLog();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      double v198 = "+[GEOAPPortal(UserActionCodeGen) captureUserAction:target:value:moduleType:moduleMetadata:richProviderId:ad"
             "ditionalStates:providedDropRate:completionQueue:completionBlock:]";
      _os_log_impl(&dword_24FE56000, v30, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    }

    uint64_t v181 = v15;
    uint64_t v31 = (int)v15 | (unint64_t)(v184 << 32);
    uint64_t v32 = +[GEOAPUtils functionalAppGroup];
    if ([a1 isRunningInVisualIntelligence])
    {
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = +[GEOAPPortal dailyCountsWithActionTargetTuple:v31 actionTargetValue:v188 appGroup:v32];
    }
    int v24 = v187;
    if ([v33 count]) {
      int v34 = 0;
    }
    else {
      int v34 = v19;
    }
    double v180 = v34;
    if ([v33 count]) {
      id v35 = 0;
    }
    else {
      id v35 = v187;
    }
    double v179 = (void *)MEMORY[0x25337B980](v35);
    int v36 = 1;
    v25 = v17;
    if (v31 > 0x7DF00000047)
    {
      id v37 = v186;
      if (v31 > 0x1785000000C8)
      {
        if (v31 > 0x277F0000044BLL)
        {
          if (v31 <= 0x2B080000004FLL)
          {
            if (v31 <= 0x27900000044BLL)
            {
              if (v31 > 0x27800000044CLL)
              {
                if (v31 <= 0x27830000044ELL)
                {
                  char v80 = v31 - 77;
                  if ((unint64_t)(v31 - 0x27800000044DLL) > 0x39) {
                    goto LABEL_508;
                  }
                  if (((1 << v80) & 0x24022100608E637) != 0) {
                    goto LABEL_3149;
                  }
                  if (((1 << v80) & 0x1BC00400000000) == 0)
                  {
LABEL_508:
                    if (v31 == 0x278000000516) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x278100000519;
                    goto LABEL_3148;
                  }
                }
                else
                {
                  if (v31 <= 0x27850000025ALL)
                  {
                    if (v31 <= 0x278300000515)
                    {
                      if ((unint64_t)(v31 - 0x27830000044FLL) <= 0x34)
                      {
                        uint64_t v38 = 1 << (v31 - 79);
                        uint64_t v39 = 0x10080101023905;
                        goto LABEL_2868;
                      }
LABEL_3151:
                      int v157 = v36;
                      double v183 = v33;
                      if ((unint64_t)[v33 count] >= 2)
                      {
                        double v176 = v19;
                        id v177 = v18;
                        double v178 = v25;
                        long long v192 = 0u;
                        long long v193 = 0u;
                        long long v194 = 0u;
                        long long v195 = 0u;
                        double v158 = -[NSObject subarrayWithRange:](v33, "subarrayWithRange:", 1, [v33 count] - 1);
                        uint64_t v159 = [v158 countByEnumeratingWithState:&v192 objects:v196 count:16];
                        if (v159)
                        {
                          uint64_t v160 = v159;
                          uint64_t v161 = *(void *)v193;
                          do
                          {
                            for (uint64_t i = 0; i != v160; ++i)
                            {
                              if (*(void *)v193 != v161) {
                                objc_enumerationMutation(v158);
                              }
                              double v163 = *(void **)(*((void *)&v192 + 1) + 8 * i);
                              double v164 = +[GEOAPServiceManager sharedManager];
                              uint64_t v165 = [v163 intValue];
                              double v166 = +[GEOAPUtils GEOAPApplicationIdentifier];
                              [v164 reportDailyUsageCountType:v165 usageString:0 usageBool:0 appId:v166 queue:0 completion:0];
                            }
                            uint64_t v160 = [v158 countByEnumeratingWithState:&v192 objects:v196 count:16];
                          }
                          while (v160);
                        }

                        id v18 = v177;
                        v25 = v178;
                        double v19 = v176;
                        int v24 = v187;
                        uint64_t v33 = v183;
                      }
                      double v167 = [v33 firstObject];
                      if (v167)
                      {
                        double v168 = +[GEOAPServiceManager sharedManager];
                        double v169 = v25;
                        uint64_t v170 = [v167 intValue];
                        +[GEOAPUtils GEOAPApplicationIdentifier];
                        double v172 = v171 = v19;
                        uint64_t v173 = v170;
                        v25 = v169;
                        int v24 = v187;
                        [v168 reportDailyUsageCountType:v173 usageString:0 usageBool:0 appId:v172 queue:v171 completion:v187];

                        double v19 = v171;
                      }
                      else
                      {
                        if (v19) {
                          int v174 = v157;
                        }
                        else {
                          int v174 = 0;
                        }
                        if (v24 && v174) {
                          dispatch_async(v19, v24);
                        }
                      }
                      double v175 = [MEMORY[0x263F41BB8] sharedManager];
                      v189[0] = MEMORY[0x263EF8330];
                      v189[1] = 3221225472;
                      v189[2] = __172__GEOAPPortal_UserActionCodeGen__captureUserAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
                      v189[3] = &__block_descriptor_40_e11_v20__0B8d12l;
                      int v190 = v184;
                      int v191 = v181;
                      [v175 referenceTimeResult:v189];

                      int v26 = v186;
                      double v43 = v183;
                      uint64_t v23 = v188;
                      goto LABEL_3169;
                    }
                    if (v31 > 0x278500000007)
                    {
                      if (v31 != 0x278500000008)
                      {
                        if (v31 != 0x278500000025)
                        {
                          unint64_t v99 = 0x278500000027;
                          goto LABEL_3129;
                        }
                        goto LABEL_2983;
                      }
LABEL_3130:
                      [a1 captureRapUserActionShortOnlyWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                      goto LABEL_3150;
                    }
                    if (v31 != 0x278300000516)
                    {
                      unint64_t v41 = 0x27840000025BLL;
                      goto LABEL_3148;
                    }
LABEL_3149:
                    [a1 captureStandardShortWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                    goto LABEL_3150;
                  }
                  if (v31 <= 0x278C0000025ALL)
                  {
                    if (v31 > 0x278900000471)
                    {
                      if (v31 > 0x278A0000025ALL)
                      {
                        if (v31 == 0x278A0000025BLL) {
                          goto LABEL_3149;
                        }
                        unint64_t v41 = 0x278B0000025BLL;
                        goto LABEL_3148;
                      }
                      if (v31 == 0x278900000472) {
                        goto LABEL_3149;
                      }
                      uint64_t v148 = 1140;
                    }
                    else
                    {
                      if (v31 <= 0x27860000025ALL)
                      {
                        if (v31 == 0x27850000025BLL) {
                          goto LABEL_3149;
                        }
                        unint64_t v41 = 0x278500000452;
                        goto LABEL_3148;
                      }
                      if (v31 == 0x27860000025BLL) {
                        goto LABEL_3149;
                      }
                      uint64_t v148 = 603;
                    }
                    unint64_t v41 = v148 & 0xFFFF0000FFFFFFFFLL | 0x278900000000;
LABEL_3148:
                    if (v31 != v41) {
                      goto LABEL_3151;
                    }
                    goto LABEL_3149;
                  }
                  if (v31 <= 0x278C0000047ELL)
                  {
                    if (v31 > 0x278C00000451)
                    {
                      if (v31 == 0x278C00000452) {
                        goto LABEL_3149;
                      }
                      uint64_t v125 = 1108;
                    }
                    else
                    {
                      if (v31 == 0x278C0000025BLL) {
                        goto LABEL_3149;
                      }
                      uint64_t v125 = 1100;
                    }
                    unint64_t v41 = v125 & 0xFFFF0000FFFFFFFFLL | 0x278C00000000;
                    goto LABEL_3148;
                  }
                  if (v31 > 0x278E00000451)
                  {
                    if (v31 == 0x278E00000452) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x278F00000454;
                    goto LABEL_3148;
                  }
                  if (v31 != 0x278C0000047FLL)
                  {
                    unint64_t v41 = 0x278D00000454;
                    goto LABEL_3148;
                  }
                }
                goto LABEL_2952;
              }
              if (v31 > 0x277FFFFFFFFFLL)
              {
                if ((unint64_t)(v31 - 0x278000000020) <= 0x2E
                  && ((1 << (v31 - 32)) & 0x4000E000080FLL) != 0)
                {
                  goto LABEL_3130;
                }
                if (v31 != 0x278000000000)
                {
                  unint64_t v41 = 0x27800000025BLL;
                  goto LABEL_3148;
                }
                goto LABEL_3149;
              }
              char v76 = v31 - 76;
              if ((unint64_t)(v31 - 0x277F0000044CLL) > 0x3D) {
                goto LABEL_3151;
              }
              if (((1 << v76) & 0x2F8805100C13FFEBLL) != 0) {
                goto LABEL_3149;
              }
              uint64_t v77 = 1 << v76;
              uint64_t v78 = 0x37800800000000;
              goto LABEL_1748;
            }
            if (v31 <= 0x27BC00000482)
            {
              if (v31 <= 0x27A900000465)
              {
                if (v31 > 0x279B00000454)
                {
                  if (v31 > 0x27A00000045CLL)
                  {
                    if (v31 <= 0x27A20000045CLL)
                    {
                      if (v31 == 0x27A00000045DLL) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x27A10000045DLL;
                    }
                    else
                    {
                      if (v31 == 0x27A20000045DLL || v31 == 0x27A300000484) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x27A600000472;
                    }
                  }
                  else
                  {
                    if ((unint64_t)(v31 - 0x279D00000455) <= 0x34
                      && ((1 << (v31 - 85)) & 0x16000200020001) != 0
                      || v31 == 0x279B00000455)
                    {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x279D0000025BLL;
                  }
                  goto LABEL_3148;
                }
                if (v31 > 0x279500000453)
                {
                  if (v31 > 0x279900000452)
                  {
                    if ((unint64_t)(v31 - 0x279A00000458) < 2) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x279900000453;
                  }
                  else
                  {
                    if (v31 == 0x279500000454 || v31 == 0x279600000457) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x279700000457;
                  }
                  goto LABEL_3148;
                }
                if (v31 > 0x279100000458)
                {
                  if (v31 > 0x279300000458)
                  {
                    if (v31 == 0x279300000459) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x27940000045CLL;
                  }
                  else
                  {
                    if (v31 == 0x279100000459) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x279200000459;
                  }
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x27900000044CLL) > 8) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 - 76);
                uint64_t v39 = 321;
              }
              else
              {
                if (v31 <= 0x27B6FFFFFFFFLL)
                {
                  if (v31 > 0x27B10000047ELL)
                  {
                    if (v31 > 0x27B5FFFFFFFFLL)
                    {
                      if ((unint64_t)(v31 - 0x27B600000460) <= 0x23
                        && ((1 << (v31 - 96)) & 0x804000001) != 0)
                      {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x27B600000000;
                      goto LABEL_3148;
                    }
                    if (v31 != 0x27B10000047FLL && v31 != 0x27B20000047FLL)
                    {
                      unint64_t v41 = 0x27B500000482;
                      goto LABEL_3148;
                    }
                    goto LABEL_2952;
                  }
                  if (v31 <= 0x27AD0000047ELL)
                  {
                    if (v31 == 0x27A900000466 || v31 == 0x27AA0000044CLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x27AA0000044FLL;
                    goto LABEL_3148;
                  }
                  if (v31 <= 0x27AF00000480)
                  {
                    if (v31 != 0x27AD0000047FLL)
                    {
                      unint64_t v48 = 0x27AE0000047FLL;
                      goto LABEL_2951;
                    }
LABEL_2952:
                    [a1 captureMuninUserActionShortOnlyWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                    goto LABEL_3150;
                  }
                  if (v31 == 0x27AF00000481) {
                    goto LABEL_2952;
                  }
                  unint64_t v48 = 0x27B000000481;
LABEL_2951:
                  if (v31 != v48) {
                    goto LABEL_3151;
                  }
                  goto LABEL_2952;
                }
                if (v31 <= 0x27B90000045FLL)
                {
                  if (v31 <= 0x27B80000045FLL)
                  {
                    if (v31 == 0x27B700000000 || v31 == 0x27B700000460) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x27B700000483;
                    goto LABEL_3148;
                  }
                  unint64_t v151 = 0xFFFFD847FFFFFBA0;
                }
                else
                {
                  if (v31 > 0x27BA00000483)
                  {
                    if (v31 > 0x27BB00000482)
                    {
                      if (v31 == 0x27BB00000483) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x27BC00000460;
                    }
                    else
                    {
                      if (v31 == 0x27BA00000484) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x27BB00000460;
                    }
                    goto LABEL_3148;
                  }
                  unint64_t v151 = 0xFFFFD846FFFFFBA0;
                }
                unint64_t v155 = v31 + v151;
                if (v155 > 0x23) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << v155;
                uint64_t v39 = 0x804000001;
              }
LABEL_2868:
              if ((v38 & v39) == 0) {
                goto LABEL_3151;
              }
              goto LABEL_3149;
            }
            if (v31 <= 0x27CA00000485)
            {
              if (v31 <= 0x27C50000045FLL)
              {
                if (v31 > 0x27C200000482)
                {
                  if ((unint64_t)(v31 - 0x27C300000460) <= 0x23
                    && ((1 << (v31 - 96)) & 0x804000001) != 0
                    || (unint64_t)(v31 - 0x27C400000460) <= 0x23
                    && ((1 << (v31 - 96)) & 0x804000001) != 0)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27C200000483;
                }
                else if (v31 <= 0x27BE00000484)
                {
                  if (v31 == 0x27BC00000483) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27BD00000485;
                }
                else
                {
                  if (v31 == 0x27BE00000485 || v31 == 0x27BF00000485) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27C100000483;
                }
              }
              else if (v31 <= 0x27C700000482)
              {
                if (v31 <= 0x27C60000045FLL)
                {
                  if (v31 == 0x27C500000460) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27C500000483;
                }
                else
                {
                  if ((unint64_t)(v31 - 0x27C600000460) <= 0x23
                    && ((1 << (v31 - 96)) & 0x804000001) != 0)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27C700000460;
                }
              }
              else if (v31 <= 0x27C900000485)
              {
                if (v31 == 0x27C700000483 || v31 == 0x27C800000486) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x27C90000025BLL;
              }
              else
              {
                if ((unint64_t)(v31 - 0x27C900000486) <= 3 && v31 != 0x27C900000488) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x27CA0000025BLL;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x2B00000004B2)
            {
              if (v31 <= 0x2B04000004B8)
              {
                if ((unint64_t)(v31 - 0x2B00000004B3) <= 0xE
                  && ((1 << (v31 + 77)) & 0x40E1) != 0
                  || v31 == 0x2B01000004B3)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2B03000004B3;
              }
              else if (v31 > 0x2B06000004B8)
              {
                if (v31 > 0x2B070000004FLL)
                {
                  if (v31 == 0x2B0700000050) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2B07000004BFLL;
                }
                else
                {
                  if (v31 == 0x2B06000004B9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2B06000004C0;
                }
              }
              else if (v31 > 0x2B05000004B8)
              {
                if (v31 == 0x2B05000004B9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2B05000004C0;
              }
              else
              {
                if (v31 == 0x2B04000004B9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2B04000004C0;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x27CE00000486)
            {
              if (v31 <= 0x2AFB000004B0)
              {
                if (v31 == 0x27CE00000487 || v31 == 0x27CF00000487) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x27CF00000489;
              }
              else
              {
                if ((unint64_t)(v31 - 0x2AFB000004B1) <= 0xE
                  && ((1 << (v31 + 79)) & 0x4081) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2AFC000004B1;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x27CB00000485)
            {
              if (v31 == 0x27CB00000486 || v31 == 0x27CC00000486) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x27CD00000486;
              goto LABEL_3148;
            }
            unint64_t v115 = 0xFFFFD835FFFFFB7ALL;
LABEL_2624:
            unint64_t v153 = v31 + v115;
            if (v153 > 3 || v153 == 2) {
              goto LABEL_3151;
            }
            goto LABEL_3149;
          }
          if (v31 > 0x427FFFFFFFFFLL)
          {
            if (v31 <= 0x42B1FFFFFFFFLL)
            {
              if (v31 <= 0x429DFFFFFFFFLL)
              {
                if (v31 > 0x4297000002C0)
                {
                  if (v31 > 0x429AFFFFFFFFLL)
                  {
                    if ((unint64_t)(v31 - 0x429D00000000) <= 4 && v31 != 0x429D00000003
                      || v31 == 0x429B00000000)
                    {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x429C00000000;
                  }
                  else if (v31 <= 0x4298FFFFFFFFLL)
                  {
                    if (v31 == 0x4297000002C1 || v31 == 0x4297000002C3) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x429800000000;
                  }
                  else
                  {
                    if ((unint64_t)(v31 - 0x429A00000000) <= 4 && ((1 << v31) & 0x13) != 0) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x429900000000;
                  }
                }
                else if (v31 > 0x4286FFFFFFFFLL)
                {
                  if (v31 <= 0x428EFFFFFFFFLL)
                  {
                    if (v31 == 0x428700000000 || v31 == 0x428800000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x428B00000000;
                  }
                  else if (v31 > 0x4291FFFFFFFFLL)
                  {
                    if (v31 == 0x429200000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x429300000000;
                  }
                  else
                  {
                    if (v31 == 0x428F00000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x429000000000;
                  }
                }
                else if (v31 <= 0x4282FFFFFFFFLL)
                {
                  if (v31 == 0x428000000000 || v31 == 0x428100000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x428200000000;
                }
                else if (v31 > 0x4284FFFFFFFFLL)
                {
                  if (v31 == 0x428500000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x428600000000;
                }
                else
                {
                  if (v31 == 0x428300000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x428400000000;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x42ACFFFFFFFFLL)
              {
                if (v31 > 0x42A4FFFFFFFFLL)
                {
                  if (v31 > 0x42A9FFFFFFFFLL)
                  {
                    if (v31 == 0x42AA00000000 || v31 == 0x42AB00000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42AC00000000;
                  }
                  else
                  {
                    if (v31 == 0x42A500000000 || v31 == 0x42A800000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42A900000000;
                  }
                }
                else if (v31 > 0x42A0FFFFFFFFLL)
                {
                  if (v31 == 0x42A100000000 || v31 == 0x42A200000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x42A400000000;
                }
                else
                {
                  if (v31 == 0x429E00000000 || v31 == 0x429F00000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x42A000000000;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x42AFFFFFFFFFLL)
              {
                if (v31 == 0x42AD00000000 || v31 == 0x42AE00000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x42AF00000000;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x42B000000000) <= 7 && ((1 << v31) & 0xB7) != 0) {
                goto LABEL_3149;
              }
              uint64_t v82 = 0xBD4F00000000;
            }
            else
            {
              if (v31 > 0x42B7FFFFFFFFLL)
              {
                if (v31 > 0x42C5FFFFFFFFLL)
                {
                  if (v31 > 0x42CB000000FALL)
                  {
                    if (v31 <= 0x42D1FFFFFFFFLL)
                    {
                      if (v31 == 0x42CB000000FBLL || v31 == 0x42CB00000191) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x42D100000000;
                    }
                    else if (v31 > 0x42D3FFFFFFFFLL)
                    {
                      if (v31 == 0x42D400000000) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x15F9A000003EALL;
                    }
                    else
                    {
                      if (v31 == 0x42D200000000) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x42D300000000;
                    }
                  }
                  else if (v31 <= 0x42C8FFFFFFFFLL)
                  {
                    if (v31 == 0x42C600000000 || v31 == 0x42C700000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42C800000000;
                  }
                  else if (v31 > 0x42CB0000001DLL)
                  {
                    if (v31 == 0x42CB0000001ELL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42CB000000C9;
                  }
                  else
                  {
                    if (v31 == 0x42C900000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42CA00000000;
                  }
                }
                else if (v31 > 0x42BAFFFFFFFFLL)
                {
                  if (v31 <= 0x42C0FFFFFFFFLL)
                  {
                    if (v31 == 0x42BB00000000 || v31 == 0x42BF00000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42C000000000;
                  }
                  else if (v31 > 0x42C3FFFFFFFFLL)
                  {
                    if (v31 == 0x42C400000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42C500000000;
                  }
                  else
                  {
                    if (v31 == 0x42C100000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x42C300000000;
                  }
                }
                else
                {
                  if ((unint64_t)(v31 - 0x42B800000000) <= 7 && ((1 << v31) & 0xB7) != 0
                    || v31 == 0x42B900000000)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x42BA00000000;
                }
                goto LABEL_3148;
              }
              if (v31 > 0x42B4FFFFFFFFLL)
              {
                if ((unint64_t)(v31 - 0x42B500000000) <= 7 && ((1 << v31) & 0xB7) != 0
                  || (unint64_t)(v31 - 0x42B700000000) <= 4 && v31 != 0x42B700000003)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x42B600000007;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x42B300000000) <= 7 && ((1 << v31) & 0x97) != 0
                || (unint64_t)(v31 - 0x42B400000000) <= 5 && v31 != 0x42B400000003)
              {
                goto LABEL_3149;
              }
              uint64_t v82 = 0xBD4E00000000;
            }
            unint64_t v59 = v82 & 0xFFFFFFFFFFFFLL | 0xFFFF000000000000;
            goto LABEL_2155;
          }
          if (v31 <= 0x36B700000578)
          {
            if (v31 > 0x2B0F000004C7)
            {
              if (v31 > 0x2EE500000279)
              {
                if (v31 > 0x36B10000012FLL)
                {
                  if (v31 > 0x36B400000579)
                  {
                    if (v31 == 0x36B40000057ALL || v31 == 0x36B50000057CLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x36B60000057ALL;
                  }
                  else
                  {
                    if (v31 == 0x36B100000130 || v31 == 0x36B200000130) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x36B300000130;
                  }
                }
                else if (v31 > 0x2EE90000027BLL)
                {
                  if (v31 == 0x2EE90000027CLL || v31 == 0x2EEA00000279) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x32CB00000517;
                }
                else
                {
                  if (v31 == 0x2EE50000027ALL || v31 == 0x2EE600000279) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2EE800000279;
                }
              }
              else if (v31 > 0x2B130000006CLL)
              {
                if (v31 > 0x2B1500000190)
                {
                  if (v31 == 0x2B1500000191 || v31 == 0x2EE200000279) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2EE40000027ALL;
                }
                else
                {
                  if (v31 == 0x2B130000006DLL || v31 == 0x2B13000004B1) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2B1400000191;
                }
              }
              else
              {
                if ((unint64_t)(v31 - 0x2B0F000004C8) <= 0xC
                  && ((1 << (v31 + 56)) & 0x1049) != 0
                  || v31 == 0x2B12000004B9)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2B12000004C0;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x2B0C000004B2)
            {
              if ((unint64_t)(v31 - 0x2B0D000004C8) <= 0xC
                && ((1 << (v31 + 56)) & 0x18DB) != 0
                || (unint64_t)(v31 - 0x2B0E000004C8) <= 0xC
                && ((1 << (v31 + 56)) & 0x156D) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x2B0C000004B3;
              goto LABEL_3148;
            }
            if (v31 <= 0x2B09000004B9)
            {
              if ((unint64_t)(v31 - 0x2B090000005DLL) <= 0x14
                && ((1 << (v31 - 93)) & 0x140011) != 0
                || v31 == 0x2B0800000050)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x2B08000004BFLL;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x2B09000004BALL) > 0x1B) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << (v31 + 70);
            uint64_t v39 = 134224899;
            goto LABEL_2868;
          }
          if (v31 > 0x426B00000064)
          {
            if (v31 > 0x4273FFFFFFFFLL)
            {
              if (v31 > 0x4279FFFFFFFFLL)
              {
                if (v31 > 0x427CFFFFFFFFLL)
                {
                  if (v31 == 0x427D00000000 || v31 == 0x427E00000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x427F00000000;
                }
                else
                {
                  if (v31 == 0x427A00000000 || v31 == 0x427B00000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x427C00000000;
                }
              }
              else if (v31 > 0x4276FFFFFFFFLL)
              {
                if (v31 == 0x427700000000 || v31 == 0x427800000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x427900000000;
              }
              else
              {
                if (v31 == 0x427400000000 || v31 == 0x427500000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x427600000000;
              }
            }
            else if (v31 > 0x426CFFFFFFFFLL)
            {
              if (v31 > 0x426FFFFFFFFFLL)
              {
                if (v31 == 0x427000000000 || v31 == 0x427100000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x427300000000;
              }
              else
              {
                if (v31 == 0x426D00000000 || v31 == 0x426E00000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x426F00000000;
              }
            }
            else
            {
              if ((unint64_t)(v31 - 0x426B000005DDLL) < 4 || v31 == 0x426B00000065) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x426C00000000;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x4269000005DCLL)
          {
            if (v31 > 0x3E81000002BCLL)
            {
              if ((unint64_t)(v31 - 0x426900000000) <= 0xB && ((1 << v31) & 0x903) != 0
                || (unint64_t)(v31 - 0x3E81000002BDLL) < 2)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x426900000065;
            }
            else if (v31 > 0x3A9A0000027FLL)
            {
              if ((unint64_t)(v31 - 0x3E8100000048) < 2 || v31 == 0x3A9A00000280) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x3E8100000000;
            }
            else
            {
              if (v31 == 0x36B700000579 || v31 == 0x36B800000579) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x3A9900000280;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x426A000005DCLL)
          {
            if ((unint64_t)(v31 - 0x426A000005DDLL) < 4) {
              goto LABEL_3149;
            }
            if ((unint64_t)(v31 - 0x426B00000000) > 0xB) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << v31;
            uint64_t v39 = 2307;
            goto LABEL_2868;
          }
          if ((unint64_t)(v31 - 0x4269000005DDLL) < 4) {
            goto LABEL_3149;
          }
          unint64_t v88 = 0xFFFFBD9600000000;
LABEL_3102:
          if (v31 + v88 >= 2) {
            goto LABEL_3151;
          }
          goto LABEL_3149;
        }
        if (v31 <= 0x1B6C0000028ALL)
        {
          if (v31 <= 0x17B6000006A3)
          {
            if (v31 <= 0x17A5000000C8)
            {
              if (v31 <= 0x179D000000C8)
              {
                if (v31 > 0x179400000090)
                {
                  if (v31 > 0x179A00000090)
                  {
                    if (v31 <= 0x179C00000289)
                    {
                      if (v31 != 0x179A00000091)
                      {
                        if (v31 == 0x179A000000C9) {
                          goto LABEL_3149;
                        }
                        unint64_t v41 = 0x179C000000C9;
                        goto LABEL_3148;
                      }
                      goto LABEL_2960;
                    }
                    if (v31 <= 0x179D0000001DLL)
                    {
                      if (v31 == 0x179C0000028ALL) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x179D00000000;
                      goto LABEL_3148;
                    }
                    if (v31 == 0x179D0000001ELL) {
                      goto LABEL_3149;
                    }
                    uint64_t v61 = 0x179D00000091;
                    goto LABEL_2959;
                  }
                  if (v31 > 0x1796000000C8)
                  {
                    if (v31 == 0x1796000000C9) {
                      goto LABEL_3149;
                    }
                    if (v31 != 0x179800000091)
                    {
                      unint64_t v41 = 0x1798000000C9;
                      goto LABEL_3148;
                    }
                    goto LABEL_2960;
                  }
                  if (v31 != 0x179400000091)
                  {
                    if (v31 != 0x1794000000C9)
                    {
                      unint64_t v41 = 0x179400000279;
                      goto LABEL_3148;
                    }
                    goto LABEL_2794;
                  }
LABEL_2960:
                  [a1 captureVisualIntelligenceShortUserActionsWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                  goto LABEL_3150;
                }
                if (v31 <= 0x178D000000C8)
                {
                  if (v31 <= 0x178B000000C8)
                  {
                    if (v31 == 0x1785000000C9 || v31 == 0x1787000000C9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x1789000000C9;
                    goto LABEL_3148;
                  }
                  if (v31 == 0x178B000000C9 || v31 == 0x178D0000001ELL) {
                    goto LABEL_3149;
                  }
                  uint64_t v61 = 0x178D00000091;
                  goto LABEL_2959;
                }
                if (v31 <= 0x1791000000C8)
                {
                  if (v31 == 0x178D000000C9 || v31 == 0x178F0000026CLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x1790000000C9;
                  goto LABEL_3148;
                }
                if (v31 == 0x1791000000C9 || v31 == 0x179200000279) {
                  goto LABEL_3149;
                }
                uint64_t v101 = 0x17940000001ELL;
                goto LABEL_2793;
              }
              if (v31 <= 0x17A100000263)
              {
                if (v31 <= 0x17A0000000C8)
                {
                  if (v31 <= 0x179F000000C8)
                  {
                    if ((unint64_t)(v31 - 0x179D000002BDLL) < 2 || v31 == 0x179D000000C9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x179E000000C9;
                    goto LABEL_3148;
                  }
                  if (v31 == 0x179F000000C9 || v31 == 0x17A000000065) {
                    goto LABEL_3149;
                  }
                  uint64_t v61 = 0x17A000000091;
                  goto LABEL_2959;
                }
                if (v31 <= 0x17A100000064)
                {
                  if (v31 == 0x17A0000000C9) {
                    goto LABEL_3149;
                  }
                  if (v31 != 0x17A000000264)
                  {
                    unint64_t v41 = 0x17A0000004B9;
                    goto LABEL_3148;
                  }
                  goto LABEL_3025;
                }
                if (v31 == 0x17A100000065) {
                  goto LABEL_3149;
                }
                if (v31 == 0x17A100000091) {
                  goto LABEL_2960;
                }
                uint64_t v154 = 201;
LABEL_3024:
                unint64_t v41 = v154 & 0xFFFF0000FFFFFFFFLL | 0x17A100000000;
                goto LABEL_3148;
              }
              if (v31 <= 0x17A2000000C8)
              {
                if (v31 <= 0x17A20000001DLL)
                {
                  if (v31 == 0x17A100000264) {
                    goto LABEL_3025;
                  }
                  uint64_t v154 = 1209;
                  goto LABEL_3024;
                }
                if ((unint64_t)(v31 - 0x17A20000001ELL) <= 0x1B
                  && ((1 << (v31 - 30)) & 0xC000001) != 0)
                {
                  goto LABEL_3149;
                }
                uint64_t v61 = 0x17A200000091;
LABEL_2959:
                if (v31 != v61) {
                  goto LABEL_3151;
                }
                goto LABEL_2960;
              }
              if (v31 > 0x17A20000027FLL)
              {
                if ((unint64_t)(v31 - 0x17A200000280) <= 0x19
                  && ((1 << (v31 + 0x80)) & 0x2000081) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17A4000000C9;
                goto LABEL_3148;
              }
              if (v31 == 0x17A2000000C9) {
                goto LABEL_3149;
              }
              unint64_t v69 = 0x17A200000103;
              goto LABEL_3084;
            }
            if (v31 <= 0x17AD0000025BLL)
            {
              if (v31 > 0x17AD0000000ALL)
              {
                if (v31 <= 0x17AD000000C8)
                {
                  if ((unint64_t)(v31 - 0x17AD00000065) <= 5
                    && ((1 << (v31 - 101)) & 0x33) != 0
                    || v31 == 0x17AD0000000BLL)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x17AD0000000DLL;
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x17AD0000012DLL) < 3) {
                  goto LABEL_3149;
                }
                if ((unint64_t)(v31 - 0x17AD000001F5) < 3) {
                  goto LABEL_2952;
                }
                uint64_t v135 = 201;
              }
              else
              {
                if (v31 <= 0x17A8000000C8)
                {
                  if (v31 <= 0x17A700000090)
                  {
                    if (v31 == 0x17A5000000C9) {
                      goto LABEL_3149;
                    }
                    if (v31 != 0x17A600000091)
                    {
                      unint64_t v41 = 0x17A6000000C9;
                      goto LABEL_3148;
                    }
                    goto LABEL_2960;
                  }
                  if (v31 == 0x17A700000091) {
                    goto LABEL_2960;
                  }
                  if (v31 == 0x17A7000000C9) {
                    goto LABEL_3149;
                  }
                  uint64_t v61 = 0x17A800000091;
                  goto LABEL_2959;
                }
                if (v31 <= 0x17AAFFFFFFFFLL)
                {
                  if (v31 == 0x17A8000000C9 || v31 == 0x17A9000000C9) {
                    goto LABEL_3149;
                  }
                  unint64_t v48 = 0x17AA00000000;
                  goto LABEL_2951;
                }
                if (v31 <= 0x17ACFFFFFFFFLL)
                {
                  if (v31 == 0x17AB00000000) {
                    goto LABEL_2952;
                  }
                  unint64_t v48 = 0x17AC000000C9;
                  goto LABEL_2951;
                }
                if (v31 == 0x17AD00000000) {
                  goto LABEL_3149;
                }
                uint64_t v135 = 8;
              }
              unint64_t v48 = v135 & 0xFFFF0000FFFFFFFFLL | 0x17AD00000000;
              goto LABEL_2951;
            }
            if (v31 <= 0x17B0000006A5)
            {
              if (v31 <= 0x17AE000006A3)
              {
                if ((unint64_t)(v31 - 0x17AD0000025CLL) > 0x2F) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 - 92);
                uint64_t v39 = 0x80040000000FLL;
                goto LABEL_2868;
              }
              if ((unint64_t)(v31 - 0x17AF000006A4) <= 7 && ((1 << (v31 + 92)) & 0xC5) != 0
                || v31 == 0x17AE000006A4)
              {
                goto LABEL_1420;
              }
              uint64_t v116 = 0x17AE000006ABLL;
              goto LABEL_3054;
            }
            if (v31 > 0x17B3000006A4)
            {
              if ((unint64_t)(v31 - 0x17B5000006A4) > 7 || ((1 << (v31 + 92)) & 0xF5) == 0)
              {
                if (v31 == 0x17B3000006A5) {
                  goto LABEL_2952;
                }
                unint64_t v48 = 0x17B4000006A5;
                goto LABEL_2951;
              }
              goto LABEL_1420;
            }
            if (v31 > 0x17B1000006A6)
            {
              if (v31 == 0x17B1000006A7) {
                goto LABEL_2952;
              }
              unint64_t v48 = 0x17B2000006A5;
              goto LABEL_2951;
            }
            if (v31 != 0x17B0000006A6)
            {
              uint64_t v116 = 0x17B0000006AALL;
LABEL_3054:
              if (v31 != v116) {
                goto LABEL_3151;
              }
            }
LABEL_1420:
            [a1 captureMuninCameraUserActionShortOnlyWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
            goto LABEL_3150;
          }
          if (v31 <= 0x17D100000039)
          {
            if (v31 <= 0x17BF000004B8)
            {
              if (v31 > 0x17B8000006A3)
              {
                if (v31 > 0x17BB000000C8)
                {
                  if (v31 <= 0x17BE000000C8)
                  {
                    if (v31 == 0x17BB000000C9 || v31 == 0x17BC000000C9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x17BD000000C9;
                    goto LABEL_3148;
                  }
                  if (v31 > 0x17BF000000C8)
                  {
                    if (v31 == 0x17BF000000C9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x17BF0000028FLL;
                    goto LABEL_3148;
                  }
                  if (v31 == 0x17BE000000C9) {
                    goto LABEL_3149;
                  }
                  uint64_t v61 = 0x17BF00000091;
                  goto LABEL_2959;
                }
                if (v31 <= 0x17BA0000001DLL)
                {
                  switch(v31)
                  {
                    case 0x17B8000006A4:
                    case 0x17B8000006ABLL:
                      goto LABEL_3149;
                    case 0x17B8000006A6:
                    case 0x17B8000006AALL:
                      goto LABEL_1420;
                    default:
                      goto LABEL_3151;
                  }
                  goto LABEL_3151;
                }
                if (v31 != 0x17BA0000001ELL)
                {
                  if (v31 == 0x17BA00000091) {
                    goto LABEL_2960;
                  }
                  uint64_t v101 = 0x17BA000000C9;
                  goto LABEL_2793;
                }
LABEL_2794:
                [a1 capturePriorityPlacecardActionShortUserActionsWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                goto LABEL_3150;
              }
              char v119 = v31 + 92;
              if ((unint64_t)(v31 - 0x17B7000006A4) <= 7)
              {
                if (((1 << v119) & 0xC5) != 0) {
                  goto LABEL_1420;
                }
                if (((1 << v119) & 0x30) != 0) {
                  goto LABEL_3149;
                }
              }
              unint64_t v107 = 0xFFFFE849FFFFF95CLL;
              goto LABEL_1417;
            }
            if (v31 <= 0x17C900000263)
            {
              if (v31 > 0x17C2000003EDLL)
              {
                if (v31 <= 0x17C700000090)
                {
                  if (v31 == 0x17C2000003EELL || v31 == 0x17C3000000C9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x17C6000000C9;
                  goto LABEL_3148;
                }
                if (v31 != 0x17C700000091)
                {
                  if (v31 == 0x17C7000000C9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x17C800000264;
                  goto LABEL_3148;
                }
                goto LABEL_2960;
              }
              if (v31 <= 0x17C1000000C8)
              {
                if (v31 == 0x17BF000004B9 || v31 == 0x17C0000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17C00000028ELL;
                goto LABEL_3148;
              }
              if (v31 == 0x17C1000000C9 || v31 == 0x17C100000290) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x17C2000003EDLL;
              goto LABEL_3176;
            }
            if (v31 <= 0x17CF000003E8)
            {
              if (v31 <= 0x17CC000003E8)
              {
                if (v31 == 0x17C900000264) {
                  goto LABEL_3149;
                }
                if (v31 != 0x17CA00000103)
                {
                  unint64_t v41 = 0x17CC00000267;
                  goto LABEL_3148;
                }
                goto LABEL_3085;
              }
              if (v31 != 0x17CC000003E9)
              {
                if (v31 == 0x17CE00000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17CF00000267;
                goto LABEL_3148;
              }
LABEL_3177:
              [a1 captureCarplayUserActionWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            if (v31 <= 0x17D0000003E8)
            {
              if (v31 != 0x17CF000003E9)
              {
                if (v31 == 0x17D000000064) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17D000000191;
                goto LABEL_3148;
              }
              goto LABEL_3177;
            }
            if ((unint64_t)(v31 - 0x17D0000004C9) < 2) {
              goto LABEL_3149;
            }
            uint64_t v47 = 0x17D0000003E9;
LABEL_3176:
            if (v31 != v47) {
              goto LABEL_3151;
            }
            goto LABEL_3177;
          }
          if (v31 <= 0x17DC000003FCLL)
          {
            if (v31 <= 0x17D2000001F7)
            {
              if (v31 > 0x17D10000025ELL)
              {
                if ((unint64_t)(v31 - 0x17D1000003E9) <= 0x18
                  && ((1 << (v31 + 23)) & 0x1100101) != 0)
                {
                  goto LABEL_3177;
                }
                if (v31 == 0x17D10000025FLL) {
                  goto LABEL_3149;
                }
                uint64_t v79 = 615;
              }
              else if (v31 <= 0x17D10000012CLL)
              {
                if (v31 == 0x17D10000003ALL || v31 == 0x17D100000068) {
                  goto LABEL_3149;
                }
                uint64_t v79 = 201;
              }
              else
              {
                if ((unint64_t)(v31 - 0x17D100000191) <= 3 && v31 != 0x17D100000193) {
                  goto LABEL_3149;
                }
                uint64_t v79 = 301;
              }
              unint64_t v41 = v79 & 0xFFFF0000FFFFFFFFLL | 0x17D100000000;
              goto LABEL_3148;
            }
            if (v31 > 0x17D500000298)
            {
              if (v31 > 0x17D8000001F8)
              {
                if (v31 == 0x17D8000001F9 || v31 == 0x17D8000001FFLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17D90000029ELL;
                goto LABEL_3148;
              }
              if (v31 == 0x17D500000299 || v31 == 0x17D6000000C9) {
                goto LABEL_3025;
              }
              unint64_t v98 = 0x17D60000029ALL;
              goto LABEL_3173;
            }
            if (v31 <= 0x17D300000266)
            {
              if (v31 == 0x17D2000001F8) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x17D2000003EFLL;
              goto LABEL_3176;
            }
            if (v31 == 0x17D300000267) {
              goto LABEL_3149;
            }
            if (v31 == 0x17D3000003E9) {
              goto LABEL_3177;
            }
            uint64_t v143 = 0x17D400000299;
LABEL_2085:
            if (v31 != v143) {
              goto LABEL_3151;
            }
            goto LABEL_3025;
          }
          if (v31 > 0x1B5F000000C8)
          {
            if (v31 > 0x1B65000000C8)
            {
              if (v31 > 0x1B680000028ALL)
              {
                if (v31 == 0x1B680000028BLL || v31 == 0x1B690000028BLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1B6A0000028BLL;
              }
              else
              {
                if (v31 == 0x1B65000000C9 || v31 == 0x1B660000025ELL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1B670000028BLL;
              }
            }
            else if (v31 > 0x1B61000000C8)
            {
              if (v31 == 0x1B61000000C9 || v31 == 0x1B62000000C9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1B63000000C9;
            }
            else
            {
              if (v31 == 0x1B5F000000C9 || v31 == 0x1B60000000C9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1B600000028BLL;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x1B5A000000C8)
          {
            if (v31 > 0x1B5D000000C8)
            {
              if (v31 == 0x1B5D000000C9 || v31 == 0x1B5E000000C9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1B5E00000274;
            }
            else
            {
              if (v31 == 0x1B5A000000C9 || v31 == 0x1B5B000000C9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1B5C000000C9;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x17DE000000C8)
          {
            if (v31 != 0x17DE000000C9)
            {
              if (v31 != 0x17DF000000C9)
              {
                unint64_t v41 = 0x1B59000000C9;
                goto LABEL_3148;
              }
              goto LABEL_2884;
            }
            goto LABEL_3109;
          }
          if (v31 == 0x17DC000003FDLL) {
            goto LABEL_3177;
          }
          unint64_t v60 = 0x17DD000000C9;
          goto LABEL_3108;
        }
        if (v31 > 0x2339000003E8)
        {
          if (v31 > 0x2390000002C0)
          {
            if (v31 <= 0x277D0000025ALL)
            {
              if (v31 <= 0x277C0000044DLL)
              {
                if (v31 <= 0x27760000044BLL)
                {
                  if (v31 > 0x2392000002C0)
                  {
                    if (v31 == 0x2392000002C1) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x27750000044CLL;
                  }
                  else
                  {
                    if (v31 == 0x2390000002C1) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x2391000002C1;
                  }
                }
                else if (v31 <= 0x27790000044DLL)
                {
                  if (v31 == 0x27760000044CLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x27770000044CLL;
                }
                else
                {
                  if (v31 == 0x27790000044ELL || v31 == 0x277A0000044DLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x277B0000044DLL;
                }
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x277D0000001FLL) > 0x2F) {
                goto LABEL_446;
              }
              if (((1 << (v31 - 31)) & 0x8071C000115ALL) != 0) {
                goto LABEL_3130;
              }
              if (v31 != 0x277D0000001FLL)
              {
LABEL_446:
                if (v31 != 0x277C0000044ELL)
                {
                  unint64_t v41 = 0x277D00000000;
                  goto LABEL_3148;
                }
              }
              goto LABEL_3149;
            }
            if (v31 > 0x277D00000515)
            {
              if ((unint64_t)(v31 - 0x277E00000453) <= 0x36
                && ((1 << (v31 - 83)) & 0x46000060000025) != 0
                || v31 == 0x277D00000516)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x277F0000025BLL;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x277D0000044CLL) > 0x37) {
              goto LABEL_789;
            }
            if (((1 << (v31 - 76)) & 0x80015804120145) != 0) {
              goto LABEL_3149;
            }
            if (v31 != 0x277D0000047FLL)
            {
LABEL_789:
              unint64_t v41 = 0x277D0000025BLL;
              goto LABEL_3148;
            }
            goto LABEL_2952;
          }
          if (v31 <= 0x2341000003FALL)
          {
            if (v31 > 0x233C000003EDLL)
            {
              if (v31 > 0x233E000001F8)
              {
                if (v31 > 0x234100000288)
                {
                  if ((unint64_t)(v31 - 0x2341000002DFLL) < 2) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x234100000289;
                }
                else
                {
                  if (v31 == 0x233E000001F9 || v31 == 0x233E000002A4) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x233E000003FDLL;
                }
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x233C000003EELL) <= 3 && v31 != 0x233C000003F0) {
                goto LABEL_3149;
              }
              unint64_t v115 = 0xFFFFDCC1FFFFFE6FLL;
              goto LABEL_2624;
            }
            if (v31 <= 0x233B000003E8)
            {
              if (v31 == 0x2339000003E9 || v31 == 0x233A000001F9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x233A000003E9;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x233B000003E9) > 0x16) {
              goto LABEL_3151;
            }
            if (((1 << (v31 + 23)) & 0x440553) != 0) {
              goto LABEL_3149;
            }
            if (v31 != 0x233B000003F2) {
              goto LABEL_3151;
            }
            goto LABEL_3177;
          }
          if (v31 > 0x234D00000064)
          {
            if (v31 > 0x235000000102)
            {
              if (v31 > 0x238D000002C0)
              {
                if (v31 == 0x238D000002C1 || v31 == 0x238E000002C1) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x238F000002C1;
                goto LABEL_3148;
              }
              if (v31 == 0x235000000103) {
                goto LABEL_3085;
              }
              if (v31 == 0x23500000025ELL) {
                goto LABEL_3149;
              }
              uint64_t v136 = 610;
            }
            else
            {
              if (v31 <= 0x234E0000000CLL)
              {
                if (v31 == 0x234D00000065) {
                  goto LABEL_3085;
                }
                if (v31 == 0x234D00000091) {
                  goto LABEL_2960;
                }
                unint64_t v69 = 0x234D000000C9;
                goto LABEL_3084;
              }
              if (v31 == 0x234E0000000DLL || v31 == 0x234F00000103) {
                goto LABEL_3085;
              }
              uint64_t v136 = 201;
            }
            unint64_t v41 = v136 & 0xFFFF0000FFFFFFFFLL | 0x235000000000;
            goto LABEL_3148;
          }
          if (v31 <= 0x2345000002D4)
          {
            if (v31 <= 0x2342000003FALL)
            {
              if (v31 == 0x2341000003FBLL || v31 == 0x234200000289) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x2342000002E0;
            }
            else if (v31 > 0x234400000289)
            {
              if (v31 == 0x23440000028ALL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x2344000003FCLL;
            }
            else
            {
              if (v31 == 0x2342000003FBLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x234300000289;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x234B00000102)
          {
            if ((unint64_t)(v31 - 0x2345000002D5) < 2) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x2346000002D5;
            goto LABEL_3148;
          }
          if (v31 == 0x234B00000103 || v31 == 0x234C00000065) {
            goto LABEL_3085;
          }
          unint64_t v69 = 0x234C000000C9;
LABEL_3084:
          if (v31 != v69) {
            goto LABEL_3151;
          }
          goto LABEL_3085;
        }
        if (v31 > 0x232B00000025)
        {
          if (v31 > 0x232F000003E8)
          {
            if (v31 <= 0x2337FFFFFFFFLL)
            {
              if (v31 <= 0x2333000003E9)
              {
                if ((unint64_t)(v31 - 0x232F000003E9) <= 5
                  && ((1 << (v31 + 23)) & 0x31) != 0
                  || v31 == 0x2330000003EALL)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2331000003EALL;
              }
              else
              {
                if ((unint64_t)(v31 - 0x2335000003EDLL) <= 0x12
                  && ((1 << (v31 + 19)) & 0x40017) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2333000003EALL;
              }
            }
            else if (v31 <= 0x2338000003E8)
            {
              if ((unint64_t)(v31 - 0x23380000012DLL) <= 4 && v31 != 0x233800000130) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x233800000000;
            }
            else
            {
              if ((unint64_t)(v31 - 0x2338000003E9) <= 0xA
                && ((1 << (v31 + 23)) & 0x671) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x2339000001F9;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x232D00000025)
          {
            char v121 = v31 + 23;
            if ((unint64_t)(v31 - 0x232E000003E9) > 0x16) {
              goto LABEL_1385;
            }
            if (((1 << v121) & 0x400561) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v121) & 0x100010) == 0)
            {
LABEL_1385:
              if (v31 == 0x232D00000026) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x232D0000002ALL;
              goto LABEL_3148;
            }
            goto LABEL_3177;
          }
          char v75 = v31 + 82;
          if ((unint64_t)(v31 - 0x232B000002AELL) <= 0x34)
          {
            if (((1 << v75) & 0x18006B82400000) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v75) & 0x41) != 0) {
              goto LABEL_3014;
            }
            if (v31 == 0x232B000002C9) {
              goto LABEL_3130;
            }
          }
          if (v31 == 0x232B00000026) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x232B0000002ALL;
          goto LABEL_3148;
        }
        if (v31 <= 0x232A00000025)
        {
          if (v31 > 0x1F4A000003F1)
          {
            char v56 = v31 + 94;
            if ((unint64_t)(v31 - 0x2329000002A2) > 0x21) {
              goto LABEL_284;
            }
            if (((1 << v56) & 0x380000007) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v56) & 0xDA0) == 0)
            {
LABEL_284:
              switch(v31)
              {
                case 0x1F4B000003EFLL:
                case 0x1F4B000003F1:
                case 0x1F4B000003F3:
                  goto LABEL_3149;
                case 0x1F4B000003F0:
                  goto LABEL_3151;
                case 0x1F4B000003F2:
                  goto LABEL_3177;
                default:
                  uint64_t v47 = 0x1F4A000003F2;
                  goto LABEL_3176;
              }
              goto LABEL_3151;
            }
            goto LABEL_3109;
          }
          if (v31 > 0x1F4400000321)
          {
            if (v31 <= 0x1F4700000321)
            {
              if (v31 == 0x1F4400000322 || v31 == 0x1F4500000322) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1F4600000322;
              goto LABEL_3148;
            }
            if (v31 == 0x1F4700000322) {
              goto LABEL_3149;
            }
            if (v31 == 0x1F48000003FDLL) {
              goto LABEL_3177;
            }
            uint64_t v47 = 0x1F49000003F2;
            goto LABEL_3176;
          }
          if (v31 <= 0x1F4100000320)
          {
            if (v31 == 0x1B6C0000028BLL || v31 == 0x1B6D0000028BLL) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1B6F00000278;
            goto LABEL_3148;
          }
          if (v31 != 0x1F4100000321)
          {
            if (v31 == 0x1F4200000321) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1F4300000322;
            goto LABEL_3148;
          }
LABEL_3126:
          [a1 capturePriorityShortUserActionsWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0x232A000002ADLL)
        {
          if ((unint64_t)(v31 - 0x232A00000046) >= 2)
          {
            if (v31 == 0x232A00000026) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x232A0000002ALL;
            goto LABEL_3148;
          }
          goto LABEL_3109;
        }
        char v97 = v31 + 82;
        if ((unint64_t)(v31 - 0x232A000002AELL) > 0x34)
        {
LABEL_852:
          if ((unint64_t)(v31 - 0x232A000004D7) >= 2) {
            goto LABEL_3151;
          }
          goto LABEL_3109;
        }
        if (((1 << v97) & 0x18007F82400000) != 0) {
          goto LABEL_3109;
        }
        if (((1 << v97) & 0x41) == 0)
        {
          if (v31 == 0x232A000002C9) {
            goto LABEL_3130;
          }
          goto LABEL_852;
        }
LABEL_3014:
        [a1 capturePredExSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
        goto LABEL_3150;
      }
      if (v31 > 0xBBE0000012CLL)
      {
        if (v31 <= 0x138B00000258)
        {
          if (v31 <= 0xBDD0000025DLL)
          {
            if (v31 > 0xBCA0000012ELL)
            {
              if (v31 <= 0xBD200000265)
              {
                if (v31 > 0xBCC00000265)
                {
                  if (v31 > 0xBCF00000265)
                  {
                    if (v31 > 0xBD100000013)
                    {
                      if (v31 == 0xBD100000014 || v31 == 0xBD100000266) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0xBD200000014;
                    }
                    else
                    {
                      if (v31 == 0xBCF00000266 || v31 == 0xBD000000014) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0xBD000000266;
                    }
                  }
                  else if (v31 > 0xBCE00000013)
                  {
                    if (v31 == 0xBCE00000014 || v31 == 0xBCE00000266) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBCF00000014;
                  }
                  else
                  {
                    if (v31 == 0xBCC00000266 || v31 == 0xBCD00000014) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBCD00000266;
                  }
                }
                else if (v31 > 0xBCB0000025BLL)
                {
                  if ((unint64_t)(v31 - 0xBCB0000025CLL) <= 6
                    && ((1 << (v31 - 92)) & 0x47) != 0
                    || v31 == 0xBCB0000044ELL)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBCC00000014;
                }
                else if (v31 > 0xBCA0000044DLL)
                {
                  if (v31 == 0xBCA0000044ELL || v31 == 0xBCB00000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBCB0000012FLL;
                }
                else
                {
                  if ((unint64_t)(v31 - 0xBCA0000025CLL) <= 6
                    && ((1 << (v31 - 92)) & 0x45) != 0)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBCA0000012FLL;
                }
              }
              else
              {
                if (v31 > 0xBD900000265)
                {
                  if (v31 > 0xBDBFFFFFFFFLL)
                  {
                    if ((unint64_t)(v31 - 0xBDC0000012DLL) < 4) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBDC00000000;
                  }
                  else if (v31 > 0xBDA0000012ELL)
                  {
                    if ((unint64_t)(v31 - 0xBDB0000012DLL) < 3 || v31 == 0xBDA0000012FLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBDB00000000;
                  }
                  else
                  {
                    if (v31 == 0xBD900000266 || v31 == 0xBDA00000000) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBDA0000012DLL;
                  }
                  goto LABEL_3148;
                }
                if (v31 <= 0xBD700000276)
                {
                  if (v31 > 0xBD400000276)
                  {
                    if (v31 == 0xBD400000277 || v31 == 0xBD500000277) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBD600000277;
                  }
                  else
                  {
                    if (v31 == 0xBD200000266 || v31 == 0xBD300000014) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0xBD300000266;
                  }
                }
                else
                {
                  if (v31 <= 0xBD80000012ELL)
                  {
                    if (v31 == 0xBD700000277 || v31 == 0xBD70000027ALL) {
                      goto LABEL_3149;
                    }
                    uint64_t v58 = 117;
                  }
                  else
                  {
                    if (v31 > 0xBD900000074)
                    {
                      if (v31 == 0xBD900000075) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0xBD90000012FLL;
                      goto LABEL_3148;
                    }
                    if (v31 == 0xBD80000012FLL) {
                      goto LABEL_3149;
                    }
                    uint64_t v58 = 614;
                  }
                  unint64_t v41 = v58 & 0xFFFF0000FFFFFFFFLL | 0xBD800000000;
                }
              }
              goto LABEL_3148;
            }
            if (v31 <= 0xBC4FFFFFFFFLL)
            {
              if (v31 > 0xBC2FFFFFFFFLL)
              {
                if (v31 > 0xBC3FFFFFFFFLL)
                {
                  if ((unint64_t)(v31 - 0xBC40000012DLL) <= 4 && v31 != 0xBC40000012ELL
                    || v31 == 0xBC400000000)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBC400000075;
                }
                else
                {
                  if ((unint64_t)(v31 - 0xBC30000012ELL) < 4 || v31 == 0xBC300000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBC300000075;
                }
              }
              else if (v31 > 0xBC10000025ELL)
              {
                if ((unint64_t)(v31 - 0xBC20000012DLL) < 5 || v31 == 0xBC10000025FLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBC200000000;
              }
              else
              {
                if ((unint64_t)(v31 - 0xBBE0000012DLL) < 5 || v31 == 0xBBF0000025FLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBC00000025FLL;
              }
              goto LABEL_3148;
            }
            if (v31 <= 0xBC70000012CLL)
            {
              if (v31 > 0xBC5FFFFFFFFLL)
              {
                if ((unint64_t)(v31 - 0xBC60000012DLL) <= 4 && v31 != 0xBC600000130 || v31 == 0xBC600000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBC700000000;
              }
              else
              {
                if ((unint64_t)(v31 - 0xBC50000012DLL) <= 4 && v31 != 0xBC50000012FLL || v31 == 0xBC500000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBC500000075;
              }
              goto LABEL_3148;
            }
            if (v31 > 0xBC7000003E8)
            {
              if ((unint64_t)(v31 - 0xBC7000003E9) <= 6 && ((1 << (v31 + 23)) & 0x43) != 0) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBCA00000000;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0xBC7000001F5) < 5) {
              goto LABEL_3149;
            }
            unint64_t v59 = 0xFFFFF438FFFFFED3;
            goto LABEL_2155;
          }
          if (v31 > 0xBF600000190)
          {
            if (v31 > 0xFA1000001F8)
            {
              if (v31 > 0xFA5000001F8)
              {
                if (v31 <= 0x1389000004B7)
                {
                  if (v31 > 0x13890000006CLL)
                  {
                    if ((unint64_t)(v31 - 0x1389000001F5) < 4) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x13890000006DLL;
                  }
                  else
                  {
                    if (v31 == 0xFA5000001F9 || v31 == 0xFA600000284) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x138900000000;
                  }
                  goto LABEL_3148;
                }
                if (v31 <= 0x138A00000485)
                {
                  if (v31 == 0x1389000004B8 || v31 == 0x138A00000259) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x138A0000025BLL;
                  goto LABEL_3148;
                }
                unint64_t v115 = 0xFFFFEC75FFFFFB7ALL;
                goto LABEL_2624;
              }
              if (v31 <= 0xFA1000004B7)
              {
                if (v31 > 0xFA1000003E8)
                {
                  if (v31 == 0xFA1000003E9) {
                    goto LABEL_3149;
                  }
                  uint64_t v146 = 1005;
                }
                else
                {
                  if (v31 == 0xFA1000001F9) {
                    goto LABEL_3149;
                  }
                  uint64_t v146 = 623;
                }
                unint64_t v41 = v146 & 0xFFFF0000FFFFFFFFLL | 0xFA100000000;
                goto LABEL_3148;
              }
              if (v31 > 0xFA2000003ECLL)
              {
                if (v31 == 0xFA2000003EDLL || v31 == 0xFA3000003EDLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xFA4000001F9;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0xFA1000004B8) > 0x1A) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 + 72);
              unsigned __int16 v100 = 33;
LABEL_2090:
              uint64_t v39 = v100 | 0x5240000u;
              goto LABEL_2868;
            }
            if (v31 > 0xBFFFFFFFFFFLL)
            {
              if (v31 > 0xC01000001F8)
              {
                if (v31 == 0xC01000001F9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xC020000028BLL;
              }
              else
              {
                if ((unint64_t)(v31 - 0xC00000003E9) <= 0x16
                  && ((1 << (v31 + 23)) & 0x440773) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xC0000000000;
              }
              goto LABEL_3148;
            }
            if (v31 <= 0xBF800000277)
            {
              if (v31 > 0xBF7000000C8)
              {
                if (v31 == 0xBF7000000C9 || v31 == 0xBF700000278) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBF70000027FLL;
                goto LABEL_3148;
              }
              unint64_t v42 = 0xFFFFF409FFFFFE6FLL;
              goto LABEL_1349;
            }
            if (v31 <= 0xBFA00000261)
            {
              if (v31 == 0xBF800000278 || v31 == 0xBF900000262) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBF90000026ALL;
              goto LABEL_3148;
            }
            if (v31 != 0xBFA00000262)
            {
              if (v31 == 0xBFA0000026ALL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBFB0000027FLL;
              goto LABEL_3148;
            }
LABEL_3142:
            [a1 captureTransitShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
            goto LABEL_3150;
          }
          if (v31 > 0xBEB00000190)
          {
            if (v31 > 0xBEE00000262)
            {
              if (v31 <= 0xBF200000267)
              {
                if (v31 > 0xBEF00000321)
                {
                  if (v31 == 0xBEF00000322 || v31 == 0xBF000000263) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBF100000263;
                }
                else
                {
                  if (v31 == 0xBEE00000263 || v31 == 0xBEE00000322) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xBEF00000263;
                }
              }
              else if (v31 <= 0xBF400000266)
              {
                if (v31 == 0xBF200000268 || v31 == 0xBF300000267) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBF400000191;
              }
              else if (v31 > 0xBF500000266)
              {
                if (v31 == 0xBF500000267) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBF600000000;
              }
              else
              {
                if (v31 == 0xBF400000267) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBF500000191;
              }
              goto LABEL_3148;
            }
            if (v31 <= 0xBEB000003FCLL)
            {
              if ((unint64_t)(v31 - 0xBEB00000191) < 4 || (unint64_t)(v31 - 0xBEB000003E9) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBEB00000322;
              goto LABEL_3148;
            }
            if (v31 > 0xBEC000003FCLL)
            {
              if (v31 != 0xBEC000003FDLL)
              {
                if (v31 == 0xBED00000263) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBED00000322;
                goto LABEL_3148;
              }
            }
            else if (v31 != 0xBEB000003FDLL)
            {
              if (v31 == 0xBEC00000263) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBEC00000322;
              goto LABEL_3148;
            }
            goto LABEL_3177;
          }
          if (v31 <= 0xBE700000265)
          {
            if (v31 > 0xBE100000265)
            {
              if (v31 > 0xBE400000265)
              {
                if (v31 == 0xBE400000266 || v31 == 0xBE500000266) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBE600000266;
              }
              else
              {
                if (v31 == 0xBE100000266 || v31 == 0xBE200000266) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBE300000266;
              }
              goto LABEL_3148;
            }
            if (v31 > 0xBDE0000025DLL)
            {
              if (v31 == 0xBDE0000025ELL || v31 == 0xBDE0000028BLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBE000000266;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0xBDD0000025ELL) > 0xC) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << (v31 - 94);
            uint64_t v39 = 4113;
            goto LABEL_2868;
          }
          if (v31 > 0xBEA00000321)
          {
            if (v31 <= 0xBEA000003FCLL)
            {
              if (v31 == 0xBEA00000322) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBEA000003E9;
              goto LABEL_3148;
            }
            if (v31 != 0xBEA000003FDLL)
            {
              unint64_t v41 = 0xBEB00000000;
              goto LABEL_3148;
            }
            goto LABEL_3177;
          }
          if (v31 <= 0xBEA00000190)
          {
            if (v31 == 0xBE700000266 || v31 == 0xBE800000131) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0xBEA00000000;
            goto LABEL_3148;
          }
          unint64_t v42 = 0xFFFFF415FFFFFE6FLL;
LABEL_1349:
          if (v31 + v42 >= 4) {
            goto LABEL_3151;
          }
          goto LABEL_3149;
        }
        if (v31 > 0x13A9000002BALL)
        {
          if (v31 > 0x1776000000C8)
          {
            if (v31 > 0x177C000000C8)
            {
              if (v31 > 0x1780000000C8)
              {
                if (v31 <= 0x17840000012FLL)
                {
                  if (v31 <= 0x178200000263)
                  {
                    if (v31 == 0x1780000000C9) {
                      goto LABEL_3149;
                    }
                    if (v31 != 0x178200000091)
                    {
                      unint64_t v41 = 0x1782000000C9;
                      goto LABEL_3148;
                    }
                    goto LABEL_2960;
                  }
                  if (v31 == 0x178200000264) {
                    goto LABEL_3149;
                  }
                  if (v31 == 0x178400000091) {
                    goto LABEL_2960;
                  }
                  uint64_t v152 = 201;
                }
                else
                {
                  if (v31 > 0x178400000579)
                  {
                    if ((unint64_t)(v31 - 0x17840000057ALL) < 3) {
                      goto LABEL_3149;
                    }
                    uint64_t v61 = 0x178500000091;
                    goto LABEL_2959;
                  }
                  if (v31 == 0x178400000130 || v31 == 0x178400000279) {
                    goto LABEL_3149;
                  }
                  uint64_t v152 = 647;
                }
                unint64_t v41 = v152 & 0xFFFF0000FFFFFFFFLL | 0x178400000000;
                goto LABEL_3148;
              }
              if (v31 <= 0x177D0000025BLL)
              {
                if (v31 <= 0x177D00000090)
                {
                  if ((unint64_t)(v31 - 0x177D00000000) <= 0x3D && ((1 << v31) & 0x2000000040000001) != 0) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x177C000000C9;
                  goto LABEL_3148;
                }
                if (v31 != 0x177D00000091)
                {
                  unint64_t v41 = 0x177D000000C9;
                  goto LABEL_3148;
                }
                goto LABEL_2960;
              }
              if (v31 <= 0x177D000003FDLL)
              {
                if ((unint64_t)(v31 - 0x177D0000025CLL) > 6) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 - 92);
                uint64_t v39 = 71;
                goto LABEL_2868;
              }
              if (v31 != 0x177D000003FELL)
              {
                if (v31 != 0x177D000006A5)
                {
                  unint64_t v41 = 0x17800000001ELL;
                  goto LABEL_3148;
                }
                goto LABEL_2952;
              }
              goto LABEL_3177;
            }
            if (v31 > 0x177900000090)
            {
              if (v31 <= 0x1779000004BDLL)
              {
                if (v31 <= 0x1779000002BCLL)
                {
                  if (v31 == 0x177900000091) {
                    goto LABEL_2960;
                  }
                  uint64_t v112 = 201;
                }
                else
                {
                  if ((unint64_t)(v31 - 0x1779000002BDLL) < 2 || v31 == 0x177900000323) {
                    goto LABEL_3149;
                  }
                  uint64_t v112 = 1209;
                }
                unint64_t v41 = v112 & 0xFFFF0000FFFFFFFFLL | 0x177900000000;
                goto LABEL_3148;
              }
              if (v31 > 0x177A000000C8)
              {
                if (v31 == 0x177A000000C9 || v31 == 0x177B000000C9) {
                  goto LABEL_3149;
                }
                uint64_t v61 = 0x177C00000091;
              }
              else
              {
                if (v31 == 0x1779000004BELL || v31 == 0x177A0000001ELL) {
                  goto LABEL_3149;
                }
                uint64_t v61 = 0x177A00000091;
              }
              goto LABEL_2959;
            }
            if (v31 > 0x1778000000C8)
            {
              if ((unint64_t)(v31 - 0x177900000048) <= 0x1C
                && ((1 << (v31 - 72)) & 0x15800001) != 0
                || (unint64_t)(v31 - 0x177900000000) <= 0x2D && ((1 << v31) & 0x200040000001) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1778000000C9;
              goto LABEL_3148;
            }
            if (v31 > 0x1777000000C8)
            {
              if (v31 == 0x1777000000C9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1777000004B9;
              goto LABEL_3148;
            }
            if (v31 == 0x1776000000C9) {
              goto LABEL_3149;
            }
            uint64_t v143 = 0x177600000299;
            goto LABEL_2085;
          }
          if (v31 > 0x13AE0000012DLL)
          {
            if (v31 > 0x177300000289)
            {
              if (v31 <= 0x1774000000C8)
              {
                if (v31 > 0x177300000321)
                {
                  if ((unint64_t)(v31 - 0x177300000322) < 2 || v31 == 0x1773000003FCLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x17740000001ELL;
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x17730000028ALL) > 0x34) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 + 118);
                uint64_t v39 = 0x18000000000001;
                goto LABEL_2868;
              }
              if (v31 <= 0x1775000004B8)
              {
                if (v31 == 0x1774000000C9 || v31 == 0x1775000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x17750000026FLL;
                goto LABEL_3148;
              }
              if (v31 == 0x1775000004B9) {
                goto LABEL_3149;
              }
              if (v31 != 0x177600000065)
              {
                uint64_t v61 = 0x177600000091;
                goto LABEL_2959;
              }
              goto LABEL_3126;
            }
            if (v31 > 0x177300000081)
            {
              if ((unint64_t)(v31 - 0x177300000082) <= 0xF)
              {
                if (((1 << (v31 + 126)) & 0xA7) != 0) {
                  goto LABEL_3149;
                }
                if (v31 == 0x177300000091) {
                  goto LABEL_2960;
                }
              }
              if (v31 == 0x1773000000C9) {
                goto LABEL_3126;
              }
              uint64_t v46 = 607;
LABEL_2006:
              unint64_t v41 = v46 & 0xFFFF0000FFFFFFFFLL | 0x177300000000;
              goto LABEL_3148;
            }
            if (v31 > 0x1772FFFFFFFFLL)
            {
              if (v31 == 0x177300000000) {
                goto LABEL_3149;
              }
              if (v31 == 0x17730000001ELL) {
                goto LABEL_3126;
              }
              uint64_t v46 = 72;
              goto LABEL_2006;
            }
            if (v31 == 0x13AE0000012ELL) {
              goto LABEL_3149;
            }
            uint64_t v156 = 699;
LABEL_3077:
            unint64_t v41 = v156 & 0xFFFF0000FFFFFFFFLL | 0x13AE00000000;
            goto LABEL_3148;
          }
          if (v31 <= 0x13AB000002BALL)
          {
            if (v31 > 0x13AA000002BALL)
            {
              if (v31 > 0x13AB0000012DLL)
              {
                if (v31 == 0x13AB0000012ELL || v31 == 0x13AB00000131) {
                  goto LABEL_3149;
                }
                uint64_t v138 = 658;
              }
              else
              {
                if (v31 == 0x13AA000002BBLL || v31 == 0x13AB00000014) {
                  goto LABEL_3149;
                }
                uint64_t v138 = 117;
              }
              unint64_t v41 = v138 & 0xFFFF0000FFFFFFFFLL | 0x13AB00000000;
            }
            else
            {
              if (v31 > 0x13AA0000012DLL)
              {
                if (v31 == 0x13AA0000012ELL || v31 == 0x13AA00000131) {
                  goto LABEL_3149;
                }
                uint64_t v109 = 658;
              }
              else
              {
                if (v31 == 0x13A9000002BBLL || v31 == 0x13AA00000014) {
                  goto LABEL_3149;
                }
                uint64_t v109 = 117;
              }
              unint64_t v41 = v109 & 0xFFFF0000FFFFFFFFLL | 0x13AA00000000;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x13AC000002BALL)
          {
            if (v31 > 0x13AC0000012DLL)
            {
              if (v31 == 0x13AC0000012ELL || v31 == 0x13AC00000131) {
                goto LABEL_3149;
              }
              uint64_t v130 = 658;
            }
            else
            {
              if (v31 == 0x13AB000002BBLL || v31 == 0x13AC00000014) {
                goto LABEL_3149;
              }
              uint64_t v130 = 117;
            }
            unint64_t v41 = v130 & 0xFFFF0000FFFFFFFFLL | 0x13AC00000000;
            goto LABEL_3148;
          }
          if (v31 <= 0x13AD0000012DLL)
          {
            if (v31 == 0x13AC000002BBLL || v31 == 0x13AD00000014) {
              goto LABEL_3149;
            }
            uint64_t v83 = 117;
          }
          else
          {
            if (v31 > 0x13AE00000013)
            {
              if (v31 == 0x13AE00000014) {
                goto LABEL_3149;
              }
              uint64_t v156 = 117;
              goto LABEL_3077;
            }
            if (v31 == 0x13AD0000012ELL) {
              goto LABEL_3149;
            }
            uint64_t v83 = 699;
          }
          unint64_t v41 = v83 & 0xFFFF0000FFFFFFFFLL | 0x13AD00000000;
          goto LABEL_3148;
        }
        if (v31 > 0x139500000007)
        {
          if (v31 > 0x139A00000074)
          {
            if (v31 > 0x13A600000259)
            {
              if (v31 <= 0x13A800000485)
              {
                if (v31 <= 0x13A700000258)
                {
                  if (v31 == 0x13A60000025ALL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x13A700000008;
                }
                else
                {
                  if (v31 == 0x13A700000259 || v31 == 0x13A7000004B9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x13A80000025BLL;
                }
              }
              else
              {
                if (v31 > 0x13A900000074)
                {
                  if (v31 > 0x13A900000130)
                  {
                    if (v31 == 0x13A900000131) {
                      goto LABEL_3149;
                    }
                    uint64_t v102 = 658;
                  }
                  else
                  {
                    if (v31 == 0x13A900000075) {
                      goto LABEL_3149;
                    }
                    uint64_t v102 = 302;
                  }
                }
                else
                {
                  if ((unint64_t)(v31 - 0x13A800000486) <= 3 && v31 != 0x13A800000488) {
                    goto LABEL_3149;
                  }
                  uint64_t v102 = 20;
                }
                unint64_t v41 = v102 & 0xFFFF0000FFFFFFFFLL | 0x13A900000000;
              }
            }
            else if (v31 <= 0x139C00000074)
            {
              if (v31 > 0x139B00000074)
              {
                if (v31 == 0x139B00000075 || v31 == 0x139B0000012DLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x139B00000276;
              }
              else
              {
                if (v31 == 0x139A00000075 || v31 == 0x139A0000012DLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x139A00000276;
              }
            }
            else if (v31 <= 0x13A100000259)
            {
              if (v31 == 0x139C00000075 || v31 == 0x139C0000012DLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x139C00000276;
            }
            else if (v31 > 0x13A300000259)
            {
              if (v31 == 0x13A30000025ALL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x13A50000025ALL;
            }
            else
            {
              if (v31 == 0x13A10000025ALL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x13A20000025ALL;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x139500000258)
          {
            if (v31 > 0x139500000518)
            {
              if (v31 > 0x139900000074)
              {
                if (v31 == 0x139900000075 || v31 == 0x13990000012DLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x139900000276;
                goto LABEL_3148;
              }
              if (v31 == 0x139500000519) {
                goto LABEL_3149;
              }
              if (v31 != 0x1395000006A5)
              {
                unint64_t v41 = 0x139600000259;
                goto LABEL_3148;
              }
              goto LABEL_2952;
            }
            if ((unint64_t)(v31 - 0x139500000259) > 0x1D) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << (v31 - 89);
            uint64_t v39 = 536880033;
            goto LABEL_2868;
          }
          if (v31 > 0x139500000102)
          {
            if (v31 <= 0x139500000130)
            {
              if ((unint64_t)(v31 - 0x13950000012DLL) < 3) {
                goto LABEL_3149;
              }
              unint64_t v69 = 0x139500000103;
              goto LABEL_3084;
            }
            if (v31 == 0x139500000131) {
              goto LABEL_3149;
            }
            uint64_t v110 = 401;
            goto LABEL_3072;
          }
          if (v31 > 0x13950000003CLL)
          {
            if (v31 == 0x13950000003DLL) {
              goto LABEL_3130;
            }
            if (v31 == 0x139500000091) {
              goto LABEL_2960;
            }
            if (v31 != 0x1395000000C9) {
              goto LABEL_3151;
            }
          }
          else if (v31 != 0x139500000008 && v31 != 0x13950000001ELL)
          {
            uint64_t v110 = 39;
LABEL_3072:
            unint64_t v99 = v110 & 0xFFFF0000FFFFFFFFLL | 0x139500000000;
            goto LABEL_3129;
          }
LABEL_2983:
          [a1 captureRapShortAndSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0x1391000003ECLL)
        {
          if (v31 <= 0x139100000064)
          {
            if (v31 > 0x138F00000258)
            {
              if ((unint64_t)(v31 - 0x139100000000) <= 0xD && ((1 << v31) & 0x2901) != 0
                || v31 == 0x138F00000259)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x139000000259;
            }
            else if (v31 <= 0x138C00000485)
            {
              if (v31 == 0x138B00000259) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x138C00000259;
            }
            else
            {
              if (v31 == 0x138C00000486 || v31 == 0x138D00000259) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x138E00000259;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x13910000012CLL)
          {
            if ((unint64_t)(v31 - 0x139100000065) <= 5 && ((1 << (v31 - 101)) & 0x33) != 0) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1391000000C9;
            goto LABEL_3148;
          }
          if ((unint64_t)(v31 - 0x13910000012DLL) < 5) {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0x13910000025CLL) > 0x2F) {
            goto LABEL_3151;
          }
          uint64_t v38 = 1 << (v31 - 92);
          uint64_t v39 = 0x80000000000BLL;
          goto LABEL_2868;
        }
        if (v31 <= 0x13920000012CLL)
        {
          if (v31 > 0x139200000064)
          {
            if ((unint64_t)(v31 - 0x139200000065) <= 5 && ((1 << (v31 - 101)) & 0x33) != 0) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1392000000C9;
            goto LABEL_3148;
          }
          if ((unint64_t)(v31 - 0x139200000000) <= 0xD && ((1 << v31) & 0x2901) != 0) {
            goto LABEL_3149;
          }
          unint64_t v88 = 0xFFFFEC6EFFFFFC13;
          goto LABEL_3102;
        }
        if (v31 > 0x13920000025BLL)
        {
          if ((unint64_t)(v31 - 0x13920000025CLL) <= 0x2F
            && ((1 << (v31 - 92)) & 0x80040000000FLL) != 0
            || (unint64_t)(v31 - 0x1392000003EDLL) < 2)
          {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x139500000000;
          goto LABEL_3148;
        }
        unint64_t v74 = 0xFFFFEC6DFFFFFED3;
LABEL_2034:
        if (v31 + v74 >= 5) {
          goto LABEL_3151;
        }
        goto LABEL_3149;
      }
      if (v31 <= 0x84100000293)
      {
        if (v31 <= 0x810000004B0)
        {
          if (v31 <= 0x7F500000007)
          {
            if (v31 > 0x7E0000000C8)
            {
              if (v31 <= 0x7EE0000000CLL)
              {
                if (v31 > 0x7E5000000C8)
                {
                  if (v31 > 0x7E90000025ELL)
                  {
                    if (v31 == 0x7E90000025FLL || v31 == 0x7EA0000000DLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x7EB0000000DLL;
                  }
                  else
                  {
                    if (v31 == 0x7E5000000C9 || v31 == 0x7E80000000BLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x7E90000000DLL;
                  }
                }
                else if (v31 > 0x7E400000064)
                {
                  if (v31 == 0x7E400000065 || v31 == 0x7E4000000C9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7E500000065;
                }
                else
                {
                  if (v31 == 0x7E0000000C9 || v31 == 0x7E300000065) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7E3000000C9;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x7EF00000064)
              {
                if (v31 > 0x7EE000004B2)
                {
                  if (v31 == 0x7EE000004B3 || v31 == 0x7EF00000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7EF0000000BLL;
                }
                else
                {
                  if (v31 == 0x7EE0000000DLL || v31 == 0x7EE0000006DLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7EE000002E6;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x7F100000039)
              {
                if (v31 == 0x7EF00000065 || v31 == 0x7EF0000025FLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7F00000000BLL;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x7F10000003ALL) > 0x2C) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 - 58);
              uint64_t v39 = 0x180000000001;
              goto LABEL_2868;
            }
            if (v31 > 0x7DF000004B6)
            {
              if ((unint64_t)(v31 - 0x7E000000000) <= 0x3A && ((1 << v31) & 0x400000000002901) != 0
                || (unint64_t)(v31 - 0x7E000000065) <= 4 && ((1 << (v31 - 101)) & 0x13) != 0)
              {
                goto LABEL_3149;
              }
              uint64_t v45 = 1207;
              goto LABEL_2095;
            }
            if (v31 <= 0x7DF00000322)
            {
              char v44 = v31 - 72;
              if ((unint64_t)(v31 - 0x7DF00000048) <= 0x21)
              {
                if (((1 << v44) & 0x108000001) != 0) {
                  goto LABEL_3149;
                }
                if (((1 << v44) & 0x260000000) != 0) {
                  goto LABEL_3126;
                }
              }
              if (v31 == 0x7DF000002BDLL) {
                goto LABEL_3126;
              }
              uint64_t v45 = 702;
              goto LABEL_2095;
            }
            if ((unint64_t)(v31 - 0x7DF000003E9) <= 0x16)
            {
              if (((1 << (v31 + 23)) & 0x440353) != 0) {
                goto LABEL_3149;
              }
              if (v31 == 0x7DF000003F3) {
                goto LABEL_3177;
              }
            }
            uint64_t v123 = 0x7DF00000323;
LABEL_3125:
            if (v31 != v123) {
              goto LABEL_3151;
            }
            goto LABEL_3126;
          }
          if (v31 > 0x8000000006CLL)
          {
            if (v31 > 0x809000000FDLL)
            {
              if (v31 <= 0x80D000000FCLL)
              {
                if (v31 > 0x80B000000C8)
                {
                  if (v31 == 0x80B000000C9 || v31 == 0x80C000000C9) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x80C000000FDLL;
                }
                else
                {
                  if (v31 == 0x809000000FELL || v31 == 0x80A000000FELL) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x80B0000001ELL;
                }
              }
              else if (v31 <= 0x81000000007)
              {
                if (v31 == 0x80D000000FDLL || v31 == 0x80E000000FDLL) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x80F000000FDLL;
              }
              else
              {
                if (v31 > 0x81000000077)
                {
                  if (v31 == 0x81000000078) {
                    goto LABEL_3109;
                  }
                  uint64_t v104 = 257;
                }
                else
                {
                  if (v31 == 0x81000000008) {
                    goto LABEL_3109;
                  }
                  uint64_t v104 = 109;
                }
                unint64_t v60 = v104 & 0xFFFF0000FFFFFFFFLL | 0x81000000000;
              }
            }
            else if (v31 <= 0x801FFFFFFFFLL)
            {
              if (v31 > 0x8010000006CLL)
              {
                if (v31 == 0x8010000006DLL || v31 == 0x801000003EDLL) {
                  goto LABEL_3109;
                }
                uint64_t v129 = 1201;
              }
              else
              {
                if (v31 == 0x8000000006DLL || v31 == 0x800000004B1) {
                  goto LABEL_3109;
                }
                uint64_t v129 = 8;
              }
              unint64_t v60 = v129 & 0xFFFF0000FFFFFFFFLL | 0x80100000000;
            }
            else if (v31 <= 0x804FFFFFFFFLL)
            {
              if (v31 == 0x80200000000 || v31 == 0x80300000000) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x80400000000;
            }
            else if (v31 > 0x807000000FDLL)
            {
              if (v31 == 0x807000000FELL) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x808000000FELL;
            }
            else
            {
              if (v31 == 0x80500000000) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x806000000FELL;
            }
            goto LABEL_3108;
          }
          if (v31 > 0x7FC000000FDLL)
          {
            if (v31 <= 0x7FE000004B0)
            {
              if (v31 > 0x7FE0000006CLL)
              {
                if (v31 == 0x7FE0000006DLL || v31 == 0x7FE000000FELL) {
                  goto LABEL_3109;
                }
                uint64_t v133 = 1005;
              }
              else
              {
                if (v31 == 0x7FC000000FELL || v31 == 0x7FD00000008) {
                  goto LABEL_3109;
                }
                uint64_t v133 = 8;
              }
              unint64_t v60 = v133 & 0xFFFF0000FFFFFFFFLL | 0x7FE00000000;
              goto LABEL_3108;
            }
            if (v31 <= 0x7FF000000FDLL)
            {
              if (v31 == 0x7FE000004B1 || v31 == 0x7FF00000008) {
                goto LABEL_3109;
              }
              uint64_t v90 = 109;
            }
            else
            {
              if (v31 > 0x7FF000004B0)
              {
                if (v31 == 0x7FF000004B1) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x80000000008;
                goto LABEL_3108;
              }
              if (v31 == 0x7FF000000FELL) {
                goto LABEL_3109;
              }
              uint64_t v90 = 1005;
            }
            unint64_t v60 = v90 & 0xFFFF0000FFFFFFFFLL | 0x7FF00000000;
            goto LABEL_3108;
          }
          if (v31 > 0x7F900000007)
          {
            if (v31 > 0x7FB00000007)
            {
              if (v31 == 0x7FB00000008 || v31 == 0x7FB000000FELL) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x7FC00000008;
              goto LABEL_3108;
            }
            if (v31 != 0x7F900000008)
            {
              if (v31 == 0x7FA00000008) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x7FA000000FELL;
              goto LABEL_3108;
            }
            goto LABEL_3014;
          }
          if (v31 > 0x7F70000006CLL)
          {
            if (v31 == 0x7F70000006DLL || v31 == 0x7F7000004B1) {
              goto LABEL_3109;
            }
            unint64_t v60 = 0x7F800000008;
            goto LABEL_3108;
          }
          if (v31 == 0x7F500000008) {
            goto LABEL_3149;
          }
          if (v31 != 0x7F600000008)
          {
            unint64_t v60 = 0x7F700000008;
            goto LABEL_3108;
          }
LABEL_2918:
          [a1 capturePredExShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0x82300000007)
        {
          if (v31 > 0x818000000C8)
          {
            if (v31 <= 0x81A000000C8)
            {
              if (v31 <= 0x8190000001DLL)
              {
                if ((unint64_t)(v31 - 0x818000000C9) > 0x37
                  || ((1 << (v31 + 55)) & 0xCC000000000001) == 0)
                {
                  unint64_t v41 = 0x8190000000BLL;
                  goto LABEL_3148;
                }
                goto LABEL_3109;
              }
              if (v31 <= 0x819000000C8)
              {
                if (v31 == 0x8190000001ELL || v31 == 0x81900000089) {
                  goto LABEL_3109;
                }
                uint64_t v51 = 140;
LABEL_2258:
                unint64_t v60 = v51 & 0xFFFF0000FFFFFFFFLL | 0x81900000000;
                goto LABEL_3108;
              }
              if (v31 <= 0x819000000FFLL)
              {
                if (v31 == 0x819000000C9) {
                  goto LABEL_3109;
                }
                uint64_t v51 = 252;
                goto LABEL_2258;
              }
              if (v31 == 0x81900000100) {
                goto LABEL_3109;
              }
              if (v31 != 0x81900000103) {
                goto LABEL_3151;
              }
              [a1 captureCuratedCollectionsSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
LABEL_3150:
              int v36 = 0;
              goto LABEL_3151;
            }
            if (v31 > 0x81F000000FCLL)
            {
              if (v31 > 0x82200000007)
              {
                if ((unint64_t)(v31 - 0x822000000FBLL) < 2) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x82200000008;
              }
              else
              {
                if ((unint64_t)(v31 - 0x821000000FBLL) < 2 || v31 == 0x81F000000FDLL) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x82100000008;
              }
              goto LABEL_3108;
            }
            if (v31 > 0x81C000000FBLL)
            {
              if (v31 == 0x81C000000FCLL || v31 == 0x81D000000FCLL) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x81E000000FDLL;
              goto LABEL_3108;
            }
            if (v31 != 0x81A000000C9)
            {
              if (v31 == 0x81A000000FCLL) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x81B000000FCLL;
              goto LABEL_3108;
            }
            goto LABEL_3174;
          }
          if (v31 > 0x813000004B0)
          {
            if (v31 > 0x814000004C2)
            {
              if (v31 <= 0x816000000C8)
              {
                if (v31 == 0x814000004C3 || v31 == 0x815000000FCLL) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x81500000100;
              }
              else if (v31 > 0x817000000FFLL)
              {
                if (v31 == 0x81700000100) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x81800000008;
              }
              else
              {
                if (v31 == 0x816000000C9) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x816000000FCLL;
              }
              goto LABEL_3108;
            }
            if (v31 > 0x814000000FFLL)
            {
              if (v31 == 0x81400000100) {
                goto LABEL_3109;
              }
              if (v31 == 0x81400000103) {
                goto LABEL_3085;
              }
              unint64_t v69 = 0x8140000010ALL;
              goto LABEL_3084;
            }
            if (v31 == 0x813000004B1) {
              goto LABEL_3109;
            }
            if (v31 == 0x81400000000) {
              goto LABEL_3149;
            }
            unint64_t v98 = 0x814000000FCLL;
            goto LABEL_3173;
          }
          if (v31 <= 0x8130000000ALL)
          {
            if (v31 <= 0x812000000FALL)
            {
              if (v31 == 0x810000004B1 || v31 == 0x81100000008) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x81200000008;
              goto LABEL_3108;
            }
            if (v31 == 0x812000000FBLL || v31 == 0x812000004B1) {
              goto LABEL_3109;
            }
            uint64_t v140 = 8;
LABEL_2505:
            unint64_t v60 = v140 & 0xFFFF0000FFFFFFFFLL | 0x81300000000;
            goto LABEL_3108;
          }
          if (v31 > 0x813000000C8)
          {
            if ((unint64_t)(v31 - 0x813000000C9) > 0x37
              || ((1 << (v31 + 55)) & 0x84000000000001) == 0)
            {
              goto LABEL_3151;
            }
            goto LABEL_3109;
          }
          if (v31 != 0x8130000000BLL && v31 != 0x8130000006DLL)
          {
            uint64_t v140 = 119;
            goto LABEL_2505;
          }
LABEL_3109:
          [a1 captureSessionlessUserActionWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0x833000000C8)
        {
          if (v31 > 0x82E000000C8)
          {
            if (v31 <= 0x83300000007)
            {
              if (v31 > 0x830000000FALL)
              {
                if (v31 == 0x830000000FBLL || v31 == 0x83000000103) {
                  goto LABEL_3085;
                }
                unint64_t v69 = 0x83100000105;
              }
              else
              {
                if (v31 == 0x82E000000C9) {
                  goto LABEL_3085;
                }
                if (v31 == 0x83000000000) {
                  goto LABEL_3149;
                }
                unint64_t v69 = 0x83000000008;
              }
              goto LABEL_3084;
            }
            if (v31 > 0x83300000064)
            {
              if (v31 <= 0x83300000076)
              {
                if (v31 == 0x83300000065) {
                  goto LABEL_3085;
                }
                uint64_t v67 = 109;
                goto LABEL_1717;
              }
              if (v31 != 0x83300000077)
              {
                uint64_t v61 = 0x83300000091;
                goto LABEL_2959;
              }
LABEL_3085:
              [a1 captureCuratedCollectionsShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            if ((unint64_t)(v31 - 0x83300000008) > 5) {
              goto LABEL_3151;
            }
            uint64_t v141 = 1 << (v31 - 8);
            uint64_t v142 = 41;
LABEL_2307:
            if ((v141 & v142) == 0) {
              goto LABEL_3151;
            }
            goto LABEL_3085;
          }
          if (v31 <= 0x825000000FALL)
          {
            if (v31 > 0x82400000007)
            {
              if (v31 == 0x82400000008 || v31 == 0x824000000C9) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x824000000FBLL;
            }
            else
            {
              if (v31 == 0x82300000008 || v31 == 0x823000000C9) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x823000000FBLL;
            }
            goto LABEL_3108;
          }
          if (v31 <= 0x82800000102)
          {
            if (v31 == 0x825000000FBLL) {
              goto LABEL_3109;
            }
            if (v31 == 0x82800000008) {
              goto LABEL_3085;
            }
            unint64_t v69 = 0x828000000FBLL;
            goto LABEL_3084;
          }
          if (v31 == 0x82800000103) {
            goto LABEL_3085;
          }
          if (v31 != 0x82A00000000)
          {
            unint64_t v69 = 0x82B00000103;
            goto LABEL_3084;
          }
LABEL_3143:
          [a1 captureEnterMapsShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0x83600000102)
        {
          if (v31 > 0x8340000000ALL)
          {
            if ((unint64_t)(v31 - 0x83600000000) <= 0x1C)
            {
              if (((1 << v31) & 0x10082800) != 0) {
                goto LABEL_3085;
              }
              if (v31 == 0x83600000000) {
                goto LABEL_3149;
              }
            }
            if (v31 == 0x8340000000BLL) {
              goto LABEL_3085;
            }
            unint64_t v69 = 0x83400000065;
            goto LABEL_3084;
          }
          if ((unint64_t)(v31 - 0x833000000C9) <= 0x3F
            && ((1 << (v31 + 55)) & 0x9804000000000001) != 0)
          {
            goto LABEL_3085;
          }
          uint64_t v67 = 1201;
LABEL_1717:
          unint64_t v69 = v67 & 0xFFFF0000FFFFFFFFLL | 0x83300000000;
          goto LABEL_3084;
        }
        if (v31 > 0x83C000001FELL)
        {
          if (v31 > 0x83E00000295)
          {
            if (v31 == 0x83E00000296 || v31 == 0x83F00000294) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x84000000296;
          }
          else
          {
            if (v31 == 0x83C000001FFLL || v31 == 0x83D0000001DLL) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x83D00000259;
          }
          goto LABEL_3148;
        }
        if (v31 > 0x83A000002B4)
        {
          if (v31 != 0x83A000002B5)
          {
            if (v31 == 0x83B00000294) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x83C00000008;
            goto LABEL_3148;
          }
          goto LABEL_3014;
        }
        if (v31 == 0x83600000103 || v31 == 0x83700000105) {
          goto LABEL_3085;
        }
        uint64_t v89 = 0x83A000000FDLL;
LABEL_3013:
        if (v31 != v89) {
          goto LABEL_3151;
        }
        goto LABEL_3014;
      }
      if (v31 > 0x88C000001F7)
      {
        if (v31 <= 0xBBA0000005ELL)
        {
          if (v31 <= 0xBB9000000C8)
          {
            if (v31 > 0x89800000007)
            {
              if ((unint64_t)(v31 - 0xBB90000005DLL) <= 0x2C
                && ((1 << (v31 - 93)) & 0x14E000140811) != 0)
              {
                goto LABEL_3149;
              }
              if ((unint64_t)(v31 - 0x89800000008) > 0xB || ((1 << (v31 - 8)) & 0x821) == 0)
              {
                unint64_t v41 = 0xBB900000000;
                goto LABEL_3148;
              }
              goto LABEL_3085;
            }
            if (v31 <= 0x893FFFFFFFFLL)
            {
              if (v31 <= 0x88EFFFFFFFFLL)
              {
                if (v31 == 0x88C000001F8) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x88C000003EFLL;
                goto LABEL_3148;
              }
              if (v31 == 0x88F00000000 || v31 == 0x89200000000) {
                goto LABEL_3109;
              }
              unint64_t v69 = 0x8930000000BLL;
              goto LABEL_3084;
            }
            if (v31 <= 0x89700000007)
            {
              if (v31 == 0x89400000000) {
                goto LABEL_3149;
              }
              if (v31 == 0x89600000008) {
                goto LABEL_3085;
              }
              unint64_t v69 = 0x89600000013;
              goto LABEL_3084;
            }
            if ((unint64_t)(v31 - 0x89700000008) > 0xB) {
              goto LABEL_3151;
            }
            uint64_t v141 = 1 << (v31 - 8);
            uint64_t v142 = 2081;
            goto LABEL_2307;
          }
          if (v31 <= 0xBB9000004B9)
          {
            if (v31 > 0xBB9000003E8)
            {
              if ((unint64_t)(v31 - 0xBB9000003E9) > 0x16) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 + 23);
              uint64_t v39 = 6293361;
              goto LABEL_2868;
            }
            if ((unint64_t)(v31 - 0xBB90000012DLL) > 4 || v31 == 0xBB900000130)
            {
              if ((unint64_t)(v31 - 0xBB900000322) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBB9000000C9;
              goto LABEL_3148;
            }
            goto LABEL_3126;
          }
          if ((unint64_t)(v31 - 0xBB9000004BALL) <= 0x1B
            && ((1 << (v31 + 70)) & 0x8001C03) != 0
            || v31 == 0xBBA00000000)
          {
            goto LABEL_3149;
          }
          uint64_t v124 = 45;
        }
        else
        {
          if (v31 > 0xBBB00000190)
          {
            if (v31 > 0xBBC00000190)
            {
              if (v31 > 0xBBD00000190)
              {
                if (v31 == 0xBBD00000191 || v31 == 0xBBD000002E6) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xBBE00000000;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0xBBC000004BALL) <= 0x1B
                && ((1 << (v31 + 70)) & 0x8001C01) != 0
                || (unint64_t)(v31 - 0xBBC00000191) < 4)
              {
                goto LABEL_3149;
              }
              unint64_t v88 = 0xFFFFF443FFFFFE08;
              goto LABEL_3102;
            }
            if (v31 <= 0xBBC0000012CLL)
            {
              if ((unint64_t)(v31 - 0xBBC0000005DLL) <= 0x14
                && ((1 << (v31 - 93)) & 0x140011) != 0
                || (unint64_t)(v31 - 0xBBB00000191) <= 3 && v31 != 0xBBB00000193)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBBC00000000;
              goto LABEL_3148;
            }
            unint64_t v59 = 0xFFFFF443FFFFFED3;
LABEL_2155:
            unint64_t v147 = v31 + v59;
            if (v147 > 4 || v147 == 3) {
              goto LABEL_3151;
            }
            goto LABEL_3149;
          }
          if (v31 > 0xBBA00000321)
          {
            if (v31 > 0xBBA000004BDLL)
            {
              if ((unint64_t)(v31 - 0xBBA000004BELL) <= 0x15
                && ((1 << (v31 + 66)) & 0x36D801) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBBB00000000;
              goto LABEL_3148;
            }
            if (v31 == 0xBBA00000322 || v31 == 0xBBA000003F5) {
              goto LABEL_3149;
            }
            uint64_t v47 = 0xBBA000003FDLL;
            goto LABEL_3176;
          }
          if ((unint64_t)(v31 - 0xBBA0000005FLL) <= 0x29
            && ((1 << (v31 - 95)) & 0x2006000A02BLL) != 0)
          {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0xBBA00000191) < 3)
          {
            [a1 captureExtraStatesUserActionWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
            goto LABEL_3150;
          }
          uint64_t v124 = 404;
        }
        unint64_t v41 = v124 & 0xFFFF0000FFFFFFFFLL | 0xBBA00000000;
        goto LABEL_3148;
      }
      if (v31 <= 0x85EFFFFFFFFLL)
      {
        if (v31 > 0x8520000026BLL)
        {
          if (v31 > 0x857000000C8)
          {
            if (v31 > 0x85BFFFFFFFFLL)
            {
              if (v31 > 0x85E00000007)
              {
                if (v31 == 0x85E00000008 || v31 == 0x85E000000C9) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x85E0000029ALL;
              }
              else
              {
                if (v31 == 0x85C00000000 || v31 == 0x85D0000026CLL) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x85E00000000;
              }
            }
            else if (v31 > 0x85900000007)
            {
              if (v31 == 0x85900000008 || v31 == 0x85A00000008) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x85B00000000;
            }
            else
            {
              if (v31 == 0x857000000C9 || v31 == 0x8570000029ALL) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x858000000C9;
            }
          }
          else if (v31 > 0x8540000026BLL)
          {
            if (v31 > 0x85500000299)
            {
              if (v31 == 0x8550000029ALL || v31 == 0x8560000026CLL) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x85700000008;
            }
            else
            {
              if (v31 == 0x8540000026CLL || v31 == 0x85500000008) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x855000000C9;
            }
          }
          else
          {
            if (v31 > 0x85300000263)
            {
              if ((unint64_t)(v31 - 0x85300000264) > 0x36
                || ((1 << (v31 - 100)) & 0x60000000000101) == 0)
              {
                goto LABEL_3151;
              }
              goto LABEL_3174;
            }
            if (v31 == 0x8520000026CLL)
            {
LABEL_3174:
              [a1 captureUGCSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            if (v31 == 0x85300000008) {
              goto LABEL_3109;
            }
            unint64_t v98 = 0x853000000C9;
          }
        }
        else
        {
          if (v31 <= 0x84A00000031)
          {
            if (v31 <= 0x84700000017)
            {
              if (v31 <= 0x84300000293)
              {
                if (v31 == 0x84100000294 || v31 == 0x84200000294) {
                  goto LABEL_3149;
                }
                uint64_t v66 = 504;
              }
              else
              {
                if (v31 > 0x84500000294)
                {
                  if (v31 == 0x84500000295) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x84600000293;
                  goto LABEL_3148;
                }
                if (v31 == 0x84300000294) {
                  goto LABEL_3149;
                }
                uint64_t v66 = 672;
              }
              unint64_t v41 = v66 & 0xFFFF0000FFFFFFFFLL | 0x84300000000;
              goto LABEL_3148;
            }
            if (v31 <= 0x848000000FALL)
            {
              if (v31 == 0x84700000018) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x84700000037;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x848000000FBLL) >= 2)
            {
              if (v31 == 0x84800000296) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x84900000296;
              goto LABEL_3148;
            }
            goto LABEL_3109;
          }
          if (v31 <= 0x84AFFFFFFFFLL)
          {
            switch(v31)
            {
              case 0x84A00000032:
                goto LABEL_2759;
              case 0x84A00000033:
                goto LABEL_3151;
              case 0x84A00000034:
              case 0x84A00000036:
              case 0x84A00000037:
                goto LABEL_3149;
              case 0x84A00000035:
                goto LABEL_3174;
              default:
                unint64_t v41 = 0x84A00000293;
                goto LABEL_3148;
            }
            goto LABEL_3151;
          }
          if (v31 <= 0x84E00000293)
          {
            if (v31 == 0x84B00000000 || v31 == 0x84C00000294) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x84D00000296;
            goto LABEL_3148;
          }
          if (v31 == 0x84E00000294 || v31 == 0x85000000296) {
            goto LABEL_3149;
          }
          unint64_t v98 = 0x8510000026CLL;
        }
      }
      else
      {
        if (v31 > 0x868000003E8)
        {
          if (v31 > 0x87800000007)
          {
            if (v31 > 0x87D00000130)
            {
              if (v31 <= 0x88900000130)
              {
                if (v31 == 0x87D00000131 || v31 == 0x87F00000131) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x88400000131;
                goto LABEL_3148;
              }
              if (v31 <= 0x88B000001F7)
              {
                if (v31 == 0x88900000131) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x88A000001F8;
                goto LABEL_3148;
              }
              if (v31 == 0x88B000001F8) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x88B000003EFLL;
              goto LABEL_3176;
            }
            if (v31 > 0x87A00000104)
            {
              if (v31 == 0x87A00000105 || v31 == 0x87B00000103) {
                goto LABEL_3085;
              }
              unint64_t v69 = 0x87B00000105;
              goto LABEL_3084;
            }
            if (v31 != 0x87800000008 && v31 != 0x87900000008)
            {
              unint64_t v69 = 0x87A00000103;
              goto LABEL_3084;
            }
            goto LABEL_3014;
          }
          if (v31 <= 0x8710000029CLL)
          {
            if (v31 > 0x86E0000029CLL)
            {
              if (v31 == 0x86E0000029DLL || v31 == 0x86F0000029DLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x8700000029DLL;
            }
            else
            {
              if (v31 == 0x868000003E9 || v31 == 0x86C0000029DLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x86D0000029DLL;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x875000001F7)
          {
            if (v31 == 0x8710000029DLL || v31 == 0x873000001F8) {
              goto LABEL_3149;
            }
            uint64_t v47 = 0x873000003EFLL;
            goto LABEL_3176;
          }
          if (v31 <= 0x87600000007)
          {
            if (v31 == 0x875000001F8) {
              goto LABEL_3149;
            }
            uint64_t v47 = 0x875000003EFLL;
            goto LABEL_3176;
          }
          if (v31 == 0x87600000008) {
            goto LABEL_2918;
          }
          uint64_t v89 = 0x87700000008;
          goto LABEL_3013;
        }
        if (v31 <= 0x862FFFFFFFFLL)
        {
          if (v31 > 0x86000000007)
          {
            if (v31 > 0x860000002AALL)
            {
              if (v31 == 0x860000002ABLL) {
                goto LABEL_3109;
              }
              if (v31 == 0x8610000026CLL) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x8620000026CLL;
            }
            else
            {
              if (v31 == 0x86000000008 || v31 == 0x860000000C9) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x8600000029ALL;
            }
          }
          else if (v31 > 0x85F00000299)
          {
            if (v31 == 0x85F0000029ALL) {
              goto LABEL_3174;
            }
            if (v31 == 0x85F000002ABLL) {
              goto LABEL_3109;
            }
            unint64_t v98 = 0x86000000000;
          }
          else
          {
            if (v31 == 0x85F00000000 || v31 == 0x85F00000008) {
              goto LABEL_3174;
            }
            unint64_t v98 = 0x85F000000C9;
          }
        }
        else
        {
          if (v31 > 0x867FFFFFFFFLL)
          {
            if (v31 > 0x86800000026)
            {
              if (v31 == 0x86800000027) {
                goto LABEL_3130;
              }
              if (v31 == 0x8680000029BLL) {
                goto LABEL_3149;
              }
              uint64_t v131 = 741;
            }
            else
            {
              if (v31 == 0x86800000000) {
                goto LABEL_3149;
              }
              if (v31 == 0x86800000008) {
                goto LABEL_3130;
              }
              uint64_t v131 = 17;
            }
            unint64_t v41 = v131 & 0xFFFF0000FFFFFFFFLL | 0x86800000000;
            goto LABEL_3148;
          }
          if (v31 <= 0x863000000C8)
          {
            if (v31 == 0x86300000000) {
              goto LABEL_3149;
            }
            if (v31 == 0x86300000008) {
              goto LABEL_3174;
            }
            uint64_t v84 = 30;
          }
          else
          {
            if ((unint64_t)(v31 - 0x86300000264) <= 0x36
              && ((1 << (v31 - 100)) & 0x60000000000001) != 0)
            {
              goto LABEL_3174;
            }
            uint64_t v84 = 201;
          }
          unint64_t v98 = v84 & 0xFFFF0000FFFFFFFFLL | 0x86300000000;
        }
      }
LABEL_3173:
      if (v31 != v98) {
        goto LABEL_3151;
      }
      goto LABEL_3174;
    }
    id v37 = v186;
    if (v31 <= 0x1180000025ELL)
    {
      if (v31 > 0x290000004CLL)
      {
        if (v31 <= 0xA500000013)
        {
          if (v31 <= 0x6500000007)
          {
            if (v31 <= 0x420000012DLL)
            {
              if (v31 > 0x2F000000C8)
              {
                if (v31 > 0x38000002B1)
                {
                  if (v31 > 0x3D000001F4)
                  {
                    if (v31 > 0x3E000002AFLL)
                    {
                      if (v31 == 0x3E000002B0 || v31 == 0x400000012DLL) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x410000012FLL;
                      goto LABEL_3148;
                    }
                    unint64_t v115 = 0xFFFFFFC2FFFFFE0BLL;
                    goto LABEL_2624;
                  }
                  if (v31 > 0x3B000002AFLL)
                  {
                    if (v31 == 0x3B000002B0) {
                      goto LABEL_3149;
                    }
                    if (v31 != 0x3C00000264)
                    {
                      unint64_t v41 = 0x3D00000000;
                      goto LABEL_3148;
                    }
                  }
                  else
                  {
                    if ((unint64_t)(v31 - 0x38000002B2) < 2) {
                      goto LABEL_3149;
                    }
                    if (v31 != 0x3A00000264)
                    {
                      unint64_t v41 = 0x3B0000000FLL;
                      goto LABEL_3148;
                    }
                  }
LABEL_3025:
                  [a1 captureUGCShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                  goto LABEL_3150;
                }
                if (v31 > 0x310000028ALL)
                {
                  if (v31 > 0x32000002BDLL)
                  {
                    if (v31 == 0x32000002BELL || v31 == 0x36000002A3) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x380000025FLL;
                    goto LABEL_3148;
                  }
                  if (v31 == 0x310000028BLL) {
                    goto LABEL_3149;
                  }
                  if (v31 == 0x320000001ELL) {
                    goto LABEL_2794;
                  }
                  uint64_t v101 = 0x32000000C9;
                  goto LABEL_2793;
                }
                if (v31 > 0x310000001BLL)
                {
                  if ((unint64_t)(v31 - 0x3100000104) < 2) {
                    goto LABEL_3085;
                  }
                  uint64_t v108 = 28;
                }
                else
                {
                  if (v31 == 0x2F000000C9) {
                    goto LABEL_3149;
                  }
                  if (v31 == 0x30000000FCLL) {
                    goto LABEL_3109;
                  }
                  uint64_t v108 = 19;
                }
                unint64_t v69 = v108 & 0xFFFF0000FFFFFFFFLL | 0x3100000000;
                goto LABEL_3084;
              }
              if (v31 <= 0x2D0000007BLL)
              {
                if (v31 <= 0x2900000485)
                {
                  if (v31 <= 0x2900000293)
                  {
                    if (v31 == 0x290000004DLL) {
                      goto LABEL_3174;
                    }
                    uint64_t v126 = 121;
                  }
                  else
                  {
                    if ((unint64_t)(v31 - 0x2900000294) <= 3 && v31 != 0x2900000295) {
                      goto LABEL_3149;
                    }
                    uint64_t v126 = 734;
                  }
                  unint64_t v41 = v126 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x2D00000033) <= 0x28)
                {
                  if (((1 << (v31 - 51)) & 0x1000000001BLL) != 0) {
                    goto LABEL_3149;
                  }
                  if (v31 == 0x2D00000035) {
                    goto LABEL_3174;
                  }
                  if (v31 == 0x2D0000004BLL) {
                    goto LABEL_3109;
                  }
                }
                if (v31 == 0x2900000486) {
                  goto LABEL_3149;
                }
                uint64_t v40 = 0x2D00000032;
LABEL_2043:
                if (v31 != v40) {
                  goto LABEL_3151;
                }
                goto LABEL_2759;
              }
              if (v31 > 0x2D000006ABLL)
              {
                if (v31 <= 0x2F00000012)
                {
                  if (v31 == 0x2D000006ACLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x2E00000264;
                  goto LABEL_3148;
                }
                if (v31 != 0x2F00000013 && v31 != 0x2F0000001BLL)
                {
                  uint64_t v61 = 0x2F00000091;
                  goto LABEL_2959;
                }
                goto LABEL_3085;
              }
              if ((unint64_t)(v31 - 0x2D0000007CLL) <= 0xC
                && ((1 << (v31 - 124)) & 0x1007) != 0)
              {
                goto LABEL_3149;
              }
              if (v31 != 0x2D000002BALL)
              {
                unint64_t v41 = 0x2D000002DDLL;
                goto LABEL_3148;
              }
LABEL_1927:
              [a1 captureArpPrivacyWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            if (v31 <= 0x50FFFFFFFFLL)
            {
              if (v31 <= 0x4B00000266)
              {
                if (v31 <= 0x450000012ELL)
                {
                  if (v31 <= 0x43000001F4)
                  {
                    if (v31 == 0x420000012ELL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x4300000000;
                  }
                  else
                  {
                    if ((unint64_t)(v31 - 0x43000001F5) <= 4
                      && ((1 << (v31 + 11)) & 0x19) != 0)
                    {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x440000012DLL;
                  }
                  goto LABEL_3148;
                }
                if (v31 > 0x49000000FALL)
                {
                  if (v31 > 0x4A000003E8)
                  {
                    if (v31 == 0x4A000003E9) {
                      goto LABEL_3177;
                    }
                    uint64_t v57 = 1201;
                  }
                  else
                  {
                    if (v31 == 0x49000000FBLL) {
                      goto LABEL_3109;
                    }
                    uint64_t v57 = 8;
                  }
                  unint64_t v60 = v57 & 0xFFFF0000FFFFFFFFLL | 0x4A00000000;
                  goto LABEL_3108;
                }
                if (v31 == 0x450000012FLL || v31 == 0x460000012ELL) {
                  goto LABEL_3149;
                }
                unint64_t v69 = 0x490000000BLL;
                goto LABEL_3084;
              }
              if (v31 <= 0x4D000002B0)
              {
                if (v31 > 0x4C000002B0)
                {
                  if (v31 == 0x4C000002B1 || v31 == 0x4D00000033) {
                    goto LABEL_3149;
                  }
                  unint64_t v60 = 0x4D0000004BLL;
                }
                else
                {
                  if (v31 == 0x4B00000267) {
                    goto LABEL_3149;
                  }
                  if (v31 == 0x4B000003E9) {
                    goto LABEL_3177;
                  }
                  unint64_t v60 = 0x4C0000004BLL;
                }
                goto LABEL_3108;
              }
              if (v31 <= 0x4EFFFFFFFFLL)
              {
                if (v31 == 0x4D000002B1) {
                  goto LABEL_3149;
                }
                if (v31 == 0x4E00000000) {
                  goto LABEL_3014;
                }
                uint64_t v89 = 0x4E000000FELL;
              }
              else if (v31 > 0x4FFFFFFFFFLL)
              {
                if (v31 == 0x5000000000) {
                  goto LABEL_3014;
                }
                uint64_t v89 = 0x50000000FELL;
              }
              else
              {
                if (v31 == 0x4F00000000) {
                  goto LABEL_3014;
                }
                uint64_t v89 = 0x4F000000FELL;
              }
              goto LABEL_3013;
            }
            if (v31 <= 0x5AFFFFFFFFLL)
            {
              if (v31 > 0x550000012CLL)
              {
                if ((unint64_t)(v31 - 0x550000012DLL) < 4) {
                  goto LABEL_3149;
                }
                if (v31 == 0x56000000C9) {
                  goto LABEL_3174;
                }
                uint64_t v89 = 0x5A00000000;
              }
              else if (v31 <= 0x5400000007)
              {
                if (v31 == 0x5100000000 || v31 == 0x51000000FELL) {
                  goto LABEL_3014;
                }
                uint64_t v89 = 0x5300000000;
              }
              else
              {
                if (v31 > 0x54000003ECLL)
                {
                  if (v31 != 0x54000003EDLL)
                  {
                    unint64_t v41 = 0x5500000075;
                    goto LABEL_3148;
                  }
                  goto LABEL_3014;
                }
                if (v31 == 0x5400000008) {
                  goto LABEL_3014;
                }
                uint64_t v89 = 0x54000000FELL;
              }
              goto LABEL_3013;
            }
            if (v31 <= 0x6100000007)
            {
              if (v31 > 0x5E000002B7)
              {
                if (v31 == 0x5E000002B8 || v31 == 0x5F000002B8) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x60000002B8;
                goto LABEL_3108;
              }
              if (v31 == 0x5B00000000 || v31 == 0x5C00000000) {
                goto LABEL_3014;
              }
              uint64_t v89 = 0x5D00000000;
              goto LABEL_3013;
            }
            if (v31 > 0x63000000C8)
            {
              if (v31 == 0x63000000C9 || v31 == 0x6400000008) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x64000000C9;
              goto LABEL_3173;
            }
            if (v31 == 0x6100000008 || v31 == 0x62000002B9) {
              goto LABEL_3174;
            }
            uint64_t v120 = 0x62000002BALL;
LABEL_1926:
            if (v31 != v120) {
              goto LABEL_3151;
            }
            goto LABEL_1927;
          }
          if (v31 <= 0x800000012DLL)
          {
            if (v31 > 0x730000025ALL)
            {
              if (v31 > 0x7B0000012DLL)
              {
                if (v31 > 0x7D0000029CLL)
                {
                  if (v31 > 0x7F0000000DLL)
                  {
                    if ((unint64_t)(v31 - 0x7F0000000ELL) < 2) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x7F00000086;
                  }
                  else
                  {
                    if (v31 == 0x7D0000029DLL || v31 == 0x7E0000012ELL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x7E00000192;
                  }
                }
                else if (v31 > 0x7C00000191)
                {
                  if (v31 == 0x7C00000192 || v31 == 0x7D0000012ELL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7D00000192;
                }
                else
                {
                  if (v31 == 0x7B0000012ELL || v31 == 0x7B00000192) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7C0000012ELL;
                }
                goto LABEL_3148;
              }
              if (v31 > 0x7700000191)
              {
                if (v31 <= 0x790000012DLL)
                {
                  if (v31 == 0x7700000192 || v31 == 0x780000012ELL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7800000192;
                }
                else if (v31 > 0x7A0000012DLL)
                {
                  if (v31 == 0x7A0000012ELL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7A00000192;
                }
                else
                {
                  if (v31 == 0x790000012ELL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x7900000192;
                }
                goto LABEL_3148;
              }
              if (v31 > 0x7600000007)
              {
                if (v31 != 0x7600000008)
                {
                  unint64_t v41 = 0x770000012ELL;
                  goto LABEL_3148;
                }
                goto LABEL_3174;
              }
              if ((unint64_t)(v31 - 0x73000003ECLL) <= 0x11
                && ((1 << (v31 + 20)) & 0x20005) != 0)
              {
                goto LABEL_3149;
              }
              uint64_t v132 = 603;
            }
            else
            {
              if (v31 <= 0x6B000003E8)
              {
                if (v31 > 0x69FFFFFFFFLL)
                {
                  if (v31 <= 0x6A000003E8)
                  {
                    if (v31 == 0x6A00000000 || v31 == 0x6A000002E3) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x6A000002E5;
                  }
                  else if (v31 > 0x6B000002E2)
                  {
                    if (v31 == 0x6B000002E3) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x6B000002E5;
                  }
                  else
                  {
                    if (v31 == 0x6A000003E9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x6B00000000;
                  }
                  goto LABEL_3148;
                }
                if (v31 > 0x67000002DELL)
                {
                  if (v31 == 0x67000002DFLL || v31 == 0x6800000000) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x6900000000;
                  goto LABEL_3148;
                }
                if (v31 != 0x6500000008 && v31 != 0x65000000C9)
                {
                  unint64_t v41 = 0x66000001F9;
                  goto LABEL_3148;
                }
                goto LABEL_3174;
              }
              if (v31 <= 0x6DFFFFFFFFLL)
              {
                if (v31 > 0x6C000003E8)
                {
                  if (v31 == 0x6C000003E9 || v31 == 0x6D000002E3) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x6D000003E9;
                }
                else
                {
                  if (v31 == 0x6B000003E9 || v31 == 0x6C000002E3) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x6C000002E5;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x70FFFFFFFFLL)
              {
                if (v31 == 0x6E00000000 || v31 == 0x6F000002E7) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7000000000;
                goto LABEL_3148;
              }
              if (v31 <= 0x7300000042)
              {
                if (v31 == 0x7100000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7200000000;
                goto LABEL_3148;
              }
              if (v31 == 0x7300000043) {
                goto LABEL_3130;
              }
              uint64_t v132 = 401;
            }
            unint64_t v41 = v132 & 0xFFFF0000FFFFFFFFLL | 0x7300000000;
            goto LABEL_3148;
          }
          if (v31 <= 0x9100000013)
          {
            if (v31 > 0x8D000003E8)
            {
              if (v31 <= 0x8FFFFFFFFFLL)
              {
                if (v31 > 0x8E000003E8)
                {
                  if (v31 == 0x8E000003E9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x8F00000017;
                }
                else
                {
                  if (v31 == 0x8D000003E9) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x8E000001F9;
                }
              }
              else
              {
                if ((unint64_t)(v31 - 0x90000001F5) < 6 || v31 == 0x9000000000) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x90000004B8;
              }
            }
            else if (v31 <= 0x85000001F7)
            {
              if (v31 > 0x810000000ELL)
              {
                if (v31 == 0x810000000FLL || v31 == 0x820000029DLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x830000029DLL;
              }
              else
              {
                if (v31 == 0x800000012ELL || v31 == 0x8000000192) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x800000029DLL;
              }
            }
            else if (v31 <= 0x8B000001F8)
            {
              if (v31 == 0x85000001F8 || v31 == 0x8A000001F9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x8A000003E9;
            }
            else if (v31 > 0x8C000001F8)
            {
              if (v31 == 0x8C000001F9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x8D000001F9;
            }
            else
            {
              if (v31 == 0x8B000001F9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x8B000003E9;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x9D00000014)
          {
            if (v31 > 0xA10000000CLL)
            {
              if (v31 > 0xA200000012)
              {
                if (v31 != 0xA200000013)
                {
                  if (v31 == 0xA300000014) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xA40000001DLL;
                  goto LABEL_3148;
                }
                goto LABEL_3085;
              }
              if ((unint64_t)(v31 - 0xA10000000DLL) > 0xF) {
                goto LABEL_3151;
              }
              uint64_t v141 = 1 << (v31 - 13);
              uint64_t v142 = 32833;
              goto LABEL_2307;
            }
            if (v31 <= 0x9E00000015)
            {
              if (v31 == 0x9D00000015) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x9D0000003ALL;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x9E00000016) < 2 || v31 == 0x9F00000017) {
              goto LABEL_3149;
            }
            uint64_t v52 = 0xA00000001DLL;
          }
          else
          {
            if (v31 > 0x9700000013)
            {
              if (v31 > 0x9A00000016)
              {
                if (v31 <= 0x9B00000039)
                {
                  if (v31 == 0x9A00000017) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x9B00000015;
                  goto LABEL_3148;
                }
                if (v31 == 0x9B0000003ALL) {
                  goto LABEL_3149;
                }
                unint64_t v69 = 0x9C00000013;
                goto LABEL_3084;
              }
              if (v31 == 0x9700000014) {
                goto LABEL_3149;
              }
              if (v31 != 0x980000001DLL)
              {
                unint64_t v41 = 0x9900000014;
                goto LABEL_3148;
              }
              goto LABEL_3081;
            }
            if (v31 <= 0x9400000013)
            {
              if (v31 == 0x9100000014) {
                goto LABEL_3149;
              }
              if (v31 != 0x920000001DLL)
              {
                unint64_t v69 = 0x9300000013;
                goto LABEL_3084;
              }
              goto LABEL_3081;
            }
            if (v31 == 0x9400000014 || v31 == 0x9500000014) {
              goto LABEL_3149;
            }
            uint64_t v52 = 0x960000001DLL;
          }
LABEL_3080:
          if (v31 != v52) {
            goto LABEL_3151;
          }
          goto LABEL_3081;
        }
        if (v31 > 0xE500000026)
        {
          if (v31 > 0xFC0000028ALL)
          {
            if (v31 > 0x1100000029ALL)
            {
              if (v31 <= 0x1130000029ALL)
              {
                if (v31 > 0x111000003E8)
                {
                  if (v31 > 0x112000002E4)
                  {
                    if (v31 == 0x112000002E5 || v31 == 0x112000003E9) {
                      goto LABEL_3109;
                    }
                    unint64_t v60 = 0x11300000000;
                  }
                  else
                  {
                    if (v31 == 0x111000003E9 || v31 == 0x11200000000) {
                      goto LABEL_3109;
                    }
                    unint64_t v60 = 0x1120000029BLL;
                  }
                }
                else if (v31 > 0x110FFFFFFFFLL)
                {
                  if (v31 == 0x11100000000 || v31 == 0x1110000029BLL) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x111000002E5;
                }
                else
                {
                  if (v31 == 0x1100000029BLL || v31 == 0x110000002E5) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x110000003E9;
                }
              }
              else
              {
                if (v31 > 0x114000003E8)
                {
                  if (v31 > 0x1160000025ELL)
                  {
                    if (v31 > 0x1170000025ELL)
                    {
                      if (v31 == 0x1170000025FLL) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x1180000012DLL;
                    }
                    else
                    {
                      if (v31 == 0x1160000025FLL) {
                        goto LABEL_3149;
                      }
                      unint64_t v41 = 0x1170000012DLL;
                    }
                    goto LABEL_3148;
                  }
                  if (v31 != 0x114000003E9)
                  {
                    if (v31 == 0x1150000012DLL) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x1150000025FLL;
                    goto LABEL_3148;
                  }
                  goto LABEL_3109;
                }
                if (v31 > 0x113FFFFFFFFLL)
                {
                  if (v31 == 0x11400000000 || v31 == 0x1140000029BLL) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x114000002E5;
                }
                else
                {
                  if (v31 == 0x1130000029BLL || v31 == 0x113000002E5) {
                    goto LABEL_3109;
                  }
                  unint64_t v60 = 0x113000003E9;
                }
              }
              goto LABEL_3108;
            }
            if (v31 > 0x107000000C8)
            {
              if (v31 > 0x10E00000032)
              {
                switch(v31)
                {
                  case 0x10F00000032:
                    goto LABEL_2759;
                  case 0x10F00000033:
                    goto LABEL_3151;
                  case 0x10F00000034:
                  case 0x10F00000036:
                    goto LABEL_3149;
                  case 0x10F00000035:
                    goto LABEL_3174;
                  default:
                    if (v31 == 0x10E00000033) {
                      goto LABEL_3149;
                    }
                    unint64_t v60 = 0x11000000000;
                    goto LABEL_3108;
                }
              }
              if (v31 <= 0x10A000000C8)
              {
                if (v31 == 0x107000000C9 || v31 == 0x108000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x109000000C9;
              }
              else if (v31 > 0x10C000000C8)
              {
                if (v31 == 0x10C000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x10D000000C9;
              }
              else
              {
                if (v31 == 0x10A000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x10B000000C9;
              }
              goto LABEL_3148;
            }
            if (v31 <= 0x1020000000ALL)
            {
              if (v31 <= 0xFF0000002BLL)
              {
                if (v31 == 0xFC0000028BLL || v31 == 0xFD0000002CLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xFE0000002CLL;
                goto LABEL_3148;
              }
              if (v31 == 0xFF0000002CLL || v31 == 0x1000000002CLL) {
                goto LABEL_3149;
              }
              unint64_t v69 = 0x10100000030;
              goto LABEL_3084;
            }
            if (v31 <= 0x10500000102)
            {
              if (v31 == 0x1020000000BLL || v31 == 0x10300000103) {
                goto LABEL_3085;
              }
              unint64_t v69 = 0x10400000103;
              goto LABEL_3084;
            }
            if (v31 > 0x106000000C8)
            {
              if (v31 == 0x106000000C9) {
                goto LABEL_3149;
              }
              uint64_t v61 = 0x10700000091;
              goto LABEL_2959;
            }
            if (v31 != 0x10500000103)
            {
              uint64_t v61 = 0x10600000091;
              goto LABEL_2959;
            }
            goto LABEL_3085;
          }
          if (v31 > 0xF30000001ELL)
          {
            if (v31 > 0xF7000004BALL)
            {
              if (v31 > 0xF90000002DLL)
              {
                if (v31 > 0xFA00000261)
                {
                  if (v31 == 0xFA00000262 || v31 == 0xFA000004BBLL) {
                    goto LABEL_3149;
                  }
                  uint64_t v137 = 1221;
                }
                else
                {
                  if (v31 == 0xF90000002ELL || v31 == 0xFA000001F8) {
                    goto LABEL_3149;
                  }
                  uint64_t v137 = 606;
                }
                unint64_t v41 = v137 & 0xFFFF0000FFFFFFFFLL | 0xFA00000000;
              }
              else
              {
                if ((unint64_t)(v31 - 0xF7000004BBLL) <= 0x1A
                  && ((1 << (v31 + 69)) & 0x4000E01) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xF800000191;
              }
              goto LABEL_3148;
            }
            if (v31 > 0xF70000005CLL)
            {
              if (v31 <= 0xF7000001F7)
              {
                if ((unint64_t)(v31 - 0xF70000005DLL) > 0x14) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 - 93);
                uint64_t v39 = 1310737;
                goto LABEL_2868;
              }
              if (v31 <= 0xF700000261)
              {
                if (v31 == 0xF7000001F8) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xF70000025ELL;
                goto LABEL_3148;
              }
              if (v31 == 0xF700000262) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0xF7000003EFLL;
              goto LABEL_3176;
            }
            if (v31 > 0xF40000001BLL)
            {
              if (v31 != 0xF40000001CLL)
              {
                if (v31 == 0xF500000008) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xF50000006DLL;
                goto LABEL_3148;
              }
              goto LABEL_3085;
            }
            if (v31 == 0xF30000001FLL) {
              goto LABEL_3149;
            }
            unint64_t v69 = 0xF400000013;
            goto LABEL_3084;
          }
          if (v31 > 0xED0000002BLL)
          {
            if (v31 > 0xF000000023)
            {
              if (v31 == 0xF000000024 || v31 == 0xF10000028BLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xF200000259;
              goto LABEL_3148;
            }
            if (((unint64_t)(v31 - 0xEF000004C9) > 0xA || ((1 << (v31 + 55)) & 0x6DB) == 0)
              && v31 != 0xED0000002CLL)
            {
              unint64_t v99 = 0xEE00000027;
              goto LABEL_3129;
            }
            goto LABEL_3149;
          }
          if (v31 > 0xEA0000012CLL)
          {
            if (v31 <= 0xEB00000261)
            {
              if ((unint64_t)(v31 - 0xEA0000012DLL) > 4 || v31 == 0xEA00000130) {
                goto LABEL_3151;
              }
              goto LABEL_3109;
            }
            if (v31 != 0xEB00000262)
            {
              if (v31 == 0xEC0000025ELL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xEC00000262;
              goto LABEL_3148;
            }
            goto LABEL_3142;
          }
          if (v31 <= 0xE800000027)
          {
            if (v31 == 0xE500000027) {
              goto LABEL_3130;
            }
            if (v31 == 0xE600000024) {
              goto LABEL_3149;
            }
            if (v31 != 0xE70000002CLL) {
              goto LABEL_3151;
            }
            goto LABEL_2883;
          }
          if (v31 != 0xE800000028)
          {
            if (v31 != 0xE800000103)
            {
              unint64_t v41 = 0xE90000002DLL;
              goto LABEL_3148;
            }
            goto LABEL_2983;
          }
LABEL_2759:
          [a1 captureRapSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 > 0xC500000015)
        {
          if (v31 > 0xD600000007)
          {
            if (v31 > 0xDE00000026)
            {
              if (v31 > 0xE000000026)
              {
                if (v31 <= 0xE300000261)
                {
                  if (v31 == 0xE000000027) {
                    goto LABEL_3130;
                  }
                  if (v31 != 0xE200000008)
                  {
                    unint64_t v41 = 0xE30000025ELL;
                    goto LABEL_3148;
                  }
                  goto LABEL_3149;
                }
                if (v31 == 0xE300000262) {
                  goto LABEL_3149;
                }
                if (v31 != 0xE40000001FLL)
                {
                  unint64_t v99 = 0xE500000008;
                  goto LABEL_3129;
                }
                goto LABEL_2983;
              }
              if (v31 > 0xDE000000C8)
              {
                if (v31 == 0xDE000000C9) {
                  goto LABEL_2983;
                }
                if (v31 != 0xDF00000008)
                {
                  unint64_t v99 = 0xE000000008;
                  goto LABEL_3129;
                }
                goto LABEL_2759;
              }
              if ((unint64_t)(v31 - 0xDE00000065) < 2) {
                goto LABEL_2983;
              }
              uint64_t v87 = 39;
            }
            else
            {
              if (v31 <= 0xDA00000261)
              {
                if (v31 > 0xD700000258)
                {
                  if (v31 == 0xD700000259 || v31 == 0xD80000002DLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xD900000008;
                }
                else
                {
                  if (v31 == 0xD600000008 || v31 == 0xD60000006DLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0xD6000004B1;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0xDD00000102)
              {
                if (v31 == 0xDA00000262) {
                  goto LABEL_3149;
                }
                if (v31 != 0xDB0000002CLL)
                {
                  unint64_t v41 = 0xDC0000002CLL;
                  goto LABEL_3148;
                }
LABEL_2883:
                [a1 captureNearbyTransitShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                goto LABEL_3150;
              }
              if (v31 > 0xDE0000000ALL)
              {
                if (v31 == 0xDE0000000BLL) {
                  goto LABEL_2983;
                }
                uint64_t v87 = 30;
              }
              else
              {
                if (v31 == 0xDD00000103) {
                  goto LABEL_2983;
                }
                uint64_t v87 = 8;
              }
            }
            unint64_t v99 = v87 & 0xFFFF0000FFFFFFFFLL | 0xDE00000000;
            goto LABEL_3129;
          }
          if (v31 > 0xCC0000001BLL)
          {
            if (v31 <= 0xD1000000C8)
            {
              if (v31 > 0xCF00000262)
              {
                if (v31 == 0xCF00000263 || v31 == 0xD000000263) {
                  goto LABEL_3149;
                }
                uint64_t v61 = 0xD100000091;
                goto LABEL_2959;
              }
              if (v31 != 0xCC0000001CLL)
              {
                if (v31 == 0xCD00000016) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xCE00000263;
                goto LABEL_3148;
              }
            }
            else
            {
              if (v31 > 0xD3000000FDLL)
              {
                if (v31 == 0xD3000000FELL || v31 == 0xD40000002DLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0xD500000008;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0xD20000000DLL) > 0xF
                || ((1 << (v31 - 13)) & 0x8041) == 0)
              {
                uint64_t v101 = 0xD1000000C9;
LABEL_2793:
                if (v31 != v101) {
                  goto LABEL_3151;
                }
                goto LABEL_2794;
              }
            }
            goto LABEL_3085;
          }
          if (v31 <= 0xC80000000ALL)
          {
            if (v31 <= 0xC600000064)
            {
              if ((unint64_t)(v31 - 0xC500000016) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xC60000000BLL;
              goto LABEL_3148;
            }
            if (v31 == 0xC600000065) {
              goto LABEL_3149;
            }
            uint64_t v52 = 0xC70000001DLL;
            goto LABEL_3080;
          }
          if (v31 <= 0xCA00000015)
          {
            if ((unint64_t)(v31 - 0xC80000000BLL) <= 0x2F
              && ((1 << (v31 - 11)) & 0x800000000401) != 0)
            {
              goto LABEL_3149;
            }
            uint64_t v52 = 0xC900000008;
            goto LABEL_3080;
          }
          if ((unint64_t)(v31 - 0xCA00000016) < 2) {
            goto LABEL_3149;
          }
          if (v31 != 0xCB0000001DLL)
          {
            unint64_t v69 = 0xCC00000013;
            goto LABEL_3084;
          }
LABEL_3081:
          [a1 captureAccountSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 <= 0xB700000013)
        {
          if (v31 > 0xB000000015)
          {
            if (v31 <= 0xB20000001CLL)
            {
              if ((unint64_t)(v31 - 0xB10000000DLL) > 0xF
                || ((1 << (v31 - 13)) & 0xC041) == 0)
              {
                unint64_t v88 = 0xFFFFFF4FFFFFFFEALL;
                goto LABEL_3102;
              }
              goto LABEL_3085;
            }
            if (v31 <= 0xB40000000CLL)
            {
              if (v31 == 0xB20000001DLL || v31 == 0xB30000001DLL) {
                goto LABEL_3081;
              }
              uint64_t v68 = 8;
            }
            else
            {
              if (v31 > 0xB500000012)
              {
                if (v31 != 0xB500000013)
                {
                  unint64_t v41 = 0xB600000017;
                  goto LABEL_3148;
                }
                goto LABEL_3085;
              }
              if (v31 == 0xB40000000DLL) {
                goto LABEL_3085;
              }
              uint64_t v68 = 201;
            }
            unint64_t v69 = v68 & 0xFFFF0000FFFFFFFFLL | 0xB400000000;
            goto LABEL_3084;
          }
          if (v31 > 0xAC00000007)
          {
            if (v31 > 0xAF00000007)
            {
              if (v31 != 0xAF00000008 && v31 != 0xAF0000006DLL && v31 != 0xAF00000078) {
                goto LABEL_3151;
              }
              [a1 captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            if (v31 == 0xAC00000008 || v31 == 0xAC0000006DLL) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0xAE00000017;
            goto LABEL_3148;
          }
          if (v31 > 0xA800000016)
          {
            if (v31 == 0xA800000017 || v31 == 0xA900000017) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0xAA00000017;
            goto LABEL_3148;
          }
          if (v31 == 0xA500000014) {
            goto LABEL_3149;
          }
          if (v31 != 0xA60000001DLL)
          {
            unint64_t v41 = 0xA700000016;
            goto LABEL_3148;
          }
          goto LABEL_3081;
        }
        if (v31 <= 0xC100000016)
        {
          if (v31 > 0xBC00000012)
          {
            if (v31 <= 0xBE00000014)
            {
              if (v31 != 0xBC00000013 && v31 != 0xBC0000001CLL)
              {
                unint64_t v41 = 0xBD00000014;
                goto LABEL_3148;
              }
              goto LABEL_3085;
            }
            if (v31 <= 0xBF00000018)
            {
              if (v31 == 0xBE00000015) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xBE0000003ALL;
              goto LABEL_3148;
            }
            if (v31 == 0xBF00000019) {
              goto LABEL_3174;
            }
            uint64_t v52 = 0xC00000001DLL;
            goto LABEL_3080;
          }
          if (v31 > 0xBA00000016)
          {
            if (v31 == 0xBA00000017) {
              goto LABEL_3149;
            }
            if (v31 == 0xBB00000013) {
              goto LABEL_3085;
            }
            unint64_t v69 = 0xBB0000001CLL;
            goto LABEL_3084;
          }
          if (v31 == 0xB700000014) {
            goto LABEL_3149;
          }
          if (v31 != 0xB80000001DLL)
          {
            uint64_t v52 = 0xB90000001DLL;
            goto LABEL_3080;
          }
          goto LABEL_3081;
        }
        if (v31 > 0xC300000013)
        {
          if ((unint64_t)(v31 - 0xC40000000DLL) > 0xF || ((1 << (v31 - 13)) & 0x8041) == 0)
          {
            unint64_t v41 = 0xC300000014;
            goto LABEL_3148;
          }
          goto LABEL_3085;
        }
        char v103 = v31 + 11;
        if ((unint64_t)(v31 - 0xC2000001F5) > 5)
        {
          if (v31 == 0xC100000017) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0xC200000000;
          goto LABEL_3148;
        }
LABEL_1221:
        if (((1 << v103) & 0x3A) != 0) {
          goto LABEL_3149;
        }
        goto LABEL_3126;
      }
      if (v31 <= 0x80000005CLL)
      {
        if (v31 <= 0x400000258)
        {
          if (v31 <= 0x20000012CLL)
          {
            if (v31 > 0x100000190)
            {
              if (v31 <= 0x1FFFFFFFFLL)
              {
                if ((unint64_t)(v31 - 0x10000025CLL) <= 0x2F
                  && ((1 << (v31 - 92)) & 0x800400000849) != 0
                  || (unint64_t)(v31 - 0x100000191) < 4)
                {
                  goto LABEL_3149;
                }
                unint64_t v48 = 0x1000006A5;
                goto LABEL_2951;
              }
              if ((unint64_t)(v31 - 0x200000065) > 0x2C) {
                goto LABEL_825;
              }
              if (((1 << (v31 - 101)) & 0x3B) != 0) {
                goto LABEL_3149;
              }
              if (v31 != 0x200000091)
              {
LABEL_825:
                if ((unint64_t)(v31 - 0x200000000) <= 0x3A && ((1 << v31) & 0x400000000002901) != 0) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x2000000C9;
                goto LABEL_3148;
              }
              goto LABEL_2960;
            }
            if (v31 <= 0x100000064)
            {
              if (v31 > 700)
              {
                if (((unint64_t)(v31 - 0x100000000) > 0x3A || ((1 << v31) & 0x400000000002901) == 0)
                  && v31 != 701
                  && v31 != 705)
                {
                  goto LABEL_3151;
                }
              }
              else if (v31 <= 300)
              {
                if (v31 && v31 != 30) {
                  goto LABEL_3151;
                }
              }
              else if ((unint64_t)(v31 - 301) >= 4 && v31 != 601)
              {
                goto LABEL_3151;
              }
              goto LABEL_3149;
            }
            if (v31 <= 0x100000102)
            {
              if ((unint64_t)(v31 - 0x100000065) > 0x2C) {
                goto LABEL_1016;
              }
              if (((1 << (v31 - 101)) & 0x3B) != 0) {
                goto LABEL_3149;
              }
              if (v31 != 0x100000091)
              {
LABEL_1016:
                unint64_t v41 = 0x1000000C9;
                goto LABEL_3148;
              }
              goto LABEL_2960;
            }
            if ((unint64_t)(v31 - 0x10000012DLL) < 5) {
              goto LABEL_3149;
            }
            unint64_t v69 = 0x100000103;
            goto LABEL_3084;
          }
          if (v31 <= 0x3FFFFFFFFLL)
          {
            if (v31 > 0x30000012CLL)
            {
              if ((unint64_t)(v31 - 0x30000012DLL) < 5
                || (unint64_t)(v31 - 0x300000267) <= 0x2A
                && ((1 << (v31 - 103)) & 0x40400000007) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v42 = 0xFFFFFFFCFFFFFE6FLL;
            }
            else
            {
              if (v31 > 0x200000261)
              {
                if ((unint64_t)(v31 - 0x200000262) <= 0x29
                  && ((1 << (v31 - 98)) & 0x20010000021) != 0)
                {
                  goto LABEL_3149;
                }
                if (v31 != 0x2000006A5)
                {
                  unint64_t v41 = 0x300000000;
                  goto LABEL_3148;
                }
                goto LABEL_2952;
              }
              if ((unint64_t)(v31 - 0x20000012DLL) < 5) {
                goto LABEL_3149;
              }
              unint64_t v42 = 0xFFFFFFFDFFFFFE6FLL;
            }
            goto LABEL_1349;
          }
          if (v31 <= 0x4000000C8)
          {
            if ((unint64_t)(v31 - 0x400000042) <= 0x3F)
            {
              if (((1 << (v31 - 66)) & 0xC00001D800000000) != 0) {
                goto LABEL_3149;
              }
              if (v31 == 0x400000042) {
                goto LABEL_3174;
              }
            }
            if ((unint64_t)(v31 - 0x400000000) > 0x3B) {
              goto LABEL_546;
            }
            if (((1 << v31) & 0xC00100000000001) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v31) & 0x18080000) == 0)
            {
LABEL_546:
              uint64_t v61 = 0x400000091;
              goto LABEL_2959;
            }
            goto LABEL_3085;
          }
          if ((unint64_t)(v31 - 0x40000012DLL) < 5) {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0x400000103) < 3) {
            goto LABEL_3085;
          }
          uint64_t v53 = 201;
LABEL_2211:
          unint64_t v41 = v53 & 0xFFFF0000FFFFFFFFLL | 0x400000000;
          goto LABEL_3148;
        }
        if (v31 <= 0x7000000C8)
        {
          if (v31 > 0x4000004B8)
          {
            if (v31 > 0x70000005CLL)
            {
              if ((unint64_t)(v31 - 0x70000005DLL) > 0x34) {
                goto LABEL_3151;
              }
              if (((1 << (v31 - 93)) & 0x152B51) != 0) {
                goto LABEL_3149;
              }
              if (v31 != 0x700000091) {
                goto LABEL_3151;
              }
              goto LABEL_2960;
            }
            if (v31 > 0x600000268)
            {
              if ((unint64_t)(v31 - 0x700000000) > 0x3A) {
                goto LABEL_632;
              }
              if (((1 << v31) & 0x400000000002901) != 0) {
                goto LABEL_3149;
              }
              if (((1 << v31) & 0x18080000) == 0)
              {
LABEL_632:
                unint64_t v88 = 0xFFFFFFF9FFFFFD97;
                goto LABEL_3102;
              }
              goto LABEL_3085;
            }
            if ((unint64_t)(v31 - 0x500000269) < 2 || v31 == 0x4000004B9) {
              goto LABEL_3149;
            }
            uint64_t v53 = 1402;
          }
          else if (v31 > 0x40000029ELL)
          {
            if (v31 > 0x4000003E9)
            {
              char v118 = v31 + 22;
              if ((unint64_t)(v31 - 0x4000003EALL) > 0x17) {
                goto LABEL_3151;
              }
              if (((1 << v118) & 0x60001) != 0) {
                goto LABEL_3149;
              }
              if (((1 << v118) & 0x900200) == 0) {
                goto LABEL_3151;
              }
              goto LABEL_3177;
            }
            if (v31 == 0x40000029FLL || v31 == 0x4000002DFLL) {
              goto LABEL_3149;
            }
            uint64_t v53 = 740;
          }
          else
          {
            if ((unint64_t)(v31 - 0x400000259) <= 0x37
              && ((1 << (v31 - 89)) & 0xE3802008A05A21) != 0)
            {
              goto LABEL_3149;
            }
            uint64_t v53 = 667;
          }
          goto LABEL_2211;
        }
        if (v31 > 0x70000044DLL)
        {
          if ((unint64_t)(v31 - 0x7000004B1) <= 0x24
            && ((1 << (v31 + 79)) & 0x1449380765) != 0)
          {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0x800000000) <= 0x3A)
          {
            if (((1 << v31) & 0x400000000002901) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v31) & 0x18080000) != 0) {
              goto LABEL_3085;
            }
          }
          uint64_t v94 = 1102;
        }
        else
        {
          if (v31 > 0x70000025BLL)
          {
            char v70 = v31 + 23;
            if ((unint64_t)(v31 - 0x7000003E9) <= 0x18)
            {
              if (((1 << v70) & 0x400571) != 0) {
                goto LABEL_3149;
              }
              if (((1 << v70) & 0x1000200) != 0) {
                goto LABEL_3177;
              }
            }
            unint64_t v55 = 0xFFFFFFF8FFFFFDA4;
LABEL_467:
            unint64_t v71 = v31 + v55;
            if (v71 > 0xA) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << v71;
            uint64_t v39 = 1143;
            goto LABEL_2868;
          }
          if ((unint64_t)(v31 - 0x70000012DLL) < 5) {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0x700000103) < 3) {
            goto LABEL_3085;
          }
          uint64_t v94 = 201;
        }
        unint64_t v41 = v94 & 0xFFFF0000FFFFFFFFLL | 0x700000000;
        goto LABEL_3148;
      }
      if (v31 > 0x150000000CLL)
      {
        if (v31 <= 0x19000002B8)
        {
          if (v31 <= 0x1500000102)
          {
            if (v31 <= 0x1500000081)
            {
              switch(v31)
              {
                case 0x150000000DLL:
                case 0x150000000ELL:
                case 0x150000000FLL:
                case 0x1500000012:
                case 0x1500000018:
                case 0x150000001DLL:
                  goto LABEL_3149;
                case 0x1500000010:
                case 0x1500000011:
                case 0x1500000014:
                case 0x1500000015:
                case 0x1500000016:
                case 0x1500000017:
                case 0x1500000019:
                case 0x150000001ALL:
                case 0x150000001ELL:
                case 0x150000001FLL:
                case 0x1500000021:
                case 0x1500000024:
                case 0x1500000025:
                case 0x1500000026:
                case 0x1500000027:
                case 0x1500000028:
                case 0x150000002ALL:
                  goto LABEL_3151;
                case 0x1500000013:
                case 0x150000001BLL:
                case 0x150000001CLL:
                  goto LABEL_3085;
                case 0x1500000020:
                case 0x1500000022:
                case 0x1500000023:
                case 0x150000002BLL:
                  goto LABEL_3130;
                case 0x1500000029:
                  goto LABEL_2759;
                case 0x150000002CLL:
                  goto LABEL_2883;
                default:
                  unint64_t v98 = 0x1500000042;
                  goto LABEL_3173;
              }
              goto LABEL_3151;
            }
            char v117 = v31 + 126;
            if ((unint64_t)(v31 - 0x1500000082) <= 0xF)
            {
              if (((1 << v117) & 7) != 0) {
                goto LABEL_3149;
              }
              if (((1 << v117) & 0x4A0) != 0) {
                goto LABEL_3109;
              }
              if (((1 << v117) & 0xC000) != 0) {
                goto LABEL_2960;
              }
            }
            if (v31 == 0x15000000C9)
            {
LABEL_2884:
              [a1 capturePlaceCardRevealWithAction:v184 target:v181 value:v188 moduleType:v37 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
              goto LABEL_3150;
            }
            unint64_t v60 = 0x15000000FELL;
            goto LABEL_3108;
          }
          if (v31 > 0x150000045FLL)
          {
            if (v31 <= 0x15000004B8)
            {
              if (v31 == 0x1500000460 || v31 == 0x150000047ALL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1500000483;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x1900000048) <= 0x29
              && ((1 << (v31 - 72)) & 0x28002200001) != 0)
            {
              goto LABEL_3149;
            }
            if (v31 != 0x15000004B9)
            {
              unint64_t v41 = 0x1900000000;
              goto LABEL_3148;
            }
            goto LABEL_2884;
          }
          if (v31 > 0x15000003E8)
          {
            if ((unint64_t)(v31 - 0x15000003E9) > 0x16) {
              goto LABEL_3151;
            }
            if (((1 << (v31 + 23)) & 0x480771) != 0) {
              goto LABEL_3149;
            }
            if (v31 != 0x15000003FELL) {
              goto LABEL_3151;
            }
            goto LABEL_3177;
          }
          if (v31 > 0x1500000289)
          {
            unint64_t v88 = 0xFFFFFFEAFFFFFD76;
            goto LABEL_3102;
          }
          if (v31 != 0x1500000103 && v31 != 0x1500000105)
          {
            unint64_t v69 = 0x150000010ALL;
            goto LABEL_3084;
          }
          goto LABEL_3085;
        }
        if (v31 > 0x1900000514)
        {
          if (v31 <= 0x2000000283)
          {
            if (v31 > 0x1C00000280)
            {
              if (v31 <= 0x1F0000012CLL)
              {
                if (v31 == 0x1C00000281) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1D00000281;
              }
              else
              {
                if (v31 == 0x1F0000012DLL || v31 == 0x1F0000025FLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1F00000284;
              }
            }
            else
            {
              if ((unint64_t)(v31 - 0x1A000002C5) < 2 || (unint64_t)(v31 - 0x1B000002C5) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1900000515;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x2500000640)
          {
            if (v31 > 0x2200000285)
            {
              if ((unint64_t)(v31 - 0x2200000286) > 0xE) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 + 122);
              uint64_t v39 = 16417;
              goto LABEL_2868;
            }
            if (v31 == 0x2000000284 || v31 == 0x2100000286) {
              goto LABEL_3149;
            }
            unint64_t v98 = 0x2200000019;
            goto LABEL_3173;
          }
          if (v31 <= 0x280000027FLL)
          {
            if (v31 == 0x2500000641) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x2600000641;
            goto LABEL_3148;
          }
          if (v31 == 0x2800000280 || v31 == 0x290000002ELL) {
            goto LABEL_3149;
          }
          uint64_t v40 = 0x2900000040;
          goto LABEL_2043;
        }
        if (v31 > 0x19000004B0)
        {
          if ((unint64_t)(v31 - 0x19000004B1) > 0x24) {
            goto LABEL_3151;
          }
          uint64_t v38 = 1 << (v31 + 79);
          uint64_t v39 = 0x16DB3905E5;
          goto LABEL_2868;
        }
        if ((unint64_t)(v31 - 0x19000003E9) <= 0x16 && ((1 << (v31 + 23)) & 0x400373) != 0) {
          goto LABEL_3149;
        }
        if (v31 == 0x19000002B9) {
          goto LABEL_3174;
        }
        uint64_t v120 = 0x19000002BALL;
        goto LABEL_1926;
      }
      if (v31 > 0xA00000048)
      {
        if (v31 <= 0x1100000516)
        {
          if (v31 > 0x1000000268)
          {
            if (v31 <= 0x1100000265)
            {
              if ((unint64_t)(v31 - 0x1000000269) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1000000487;
            }
            else
            {
              if ((unint64_t)(v31 - 0x1100000266) <= 0x14
                && ((1 << (v31 - 102)) & 0x130741) != 0
                || v31 == 0x11000004C2)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x11000004D6;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0xC00000278)
          {
            if (v31 > 0xB000002C0)
            {
              if ((unint64_t)(v31 - 0xB000002C1) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xC0000026BLL;
            }
            else
            {
              if ((unint64_t)(v31 - 0xA000002C1) < 2) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0xA00000049;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0xF00000268)
          {
            if (v31 == 0xC00000279 || v31 == 0xD0000026BLL) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0xD00000279;
            goto LABEL_3148;
          }
          unint64_t v88 = 0xFFFFFFF0FFFFFD97;
          goto LABEL_3102;
        }
        if (v31 <= 0x120000025ELL)
        {
          if (v31 <= 0x1200000058)
          {
            if (v31 <= 0x1200000007)
            {
              if (v31 == 0x1100000517) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1200000000;
              goto LABEL_3148;
            }
            if (v31 == 0x1200000008) {
              goto LABEL_2918;
            }
            if (v31 == 0x1200000048) {
              goto LABEL_3149;
            }
            unint64_t v98 = 0x120000004DLL;
            goto LABEL_3173;
          }
          if ((unint64_t)(v31 - 0x1200000191) < 4 || v31 == 0x1200000059) {
            goto LABEL_3149;
          }
          uint64_t v73 = 104;
        }
        else if (v31 > 0x12000004B3)
        {
          if (v31 > 0x12FFFFFFFFLL)
          {
            if (v31 != 0x1300000000)
            {
              if (v31 != 0x1400000000)
              {
                unint64_t v41 = 0x1500000000;
                goto LABEL_3148;
              }
              goto LABEL_3126;
            }
            goto LABEL_3143;
          }
          if ((unint64_t)(v31 - 0x120000057BLL) < 2 || v31 == 0x12000004B4) {
            goto LABEL_3149;
          }
          uint64_t v73 = 1218;
        }
        else
        {
          if ((unint64_t)(v31 - 0x120000025FLL) <= 0x1E
            && ((1 << (v31 - 95)) & 0x4001E001) != 0)
          {
            goto LABEL_3149;
          }
          uint64_t v73 = 1013;
        }
        unint64_t v41 = v73 & 0xFFFF0000FFFFFFFFLL | 0x1200000000;
        goto LABEL_3148;
      }
      if (v31 > 0x8000003E8)
      {
        if ((unint64_t)(v31 - 0x8000004B1) <= 0x24
          && ((1 << (v31 + 79)) & 0x1449380765) != 0)
        {
          goto LABEL_3149;
        }
        char v92 = v31 + 23;
        if ((unint64_t)(v31 - 0x8000003E9) <= 0x18)
        {
          if (((1 << v92) & 0x571) != 0) {
            goto LABEL_3149;
          }
          if (((1 << v92) & 0x1000200) != 0) {
            goto LABEL_3177;
          }
        }
        uint64_t v93 = 1102;
      }
      else
      {
        if (v31 > 0x800000102)
        {
          char v54 = v31 - 3;
          if ((unint64_t)(v31 - 0x800000103) <= 0x2E)
          {
            if (((1 << v54) & 0x5C0000000000) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v54) & 7) != 0) {
              goto LABEL_3085;
            }
          }
          unint64_t v55 = 0xFFFFFFF7FFFFFDA4;
          goto LABEL_467;
        }
        if ((unint64_t)(v31 - 0x80000005DLL) <= 0x34)
        {
          if (((1 << (v31 - 93)) & 0x152B51) != 0) {
            goto LABEL_3149;
          }
          if (v31 == 0x800000091) {
            goto LABEL_2960;
          }
        }
        uint64_t v93 = 201;
      }
      unint64_t v41 = v93 & 0xFFFF0000FFFFFFFFLL | 0x800000000;
      goto LABEL_3148;
    }
    if (v31 <= 0x3E9000001F4)
    {
      if (v31 <= 0x19700000051)
      {
        if (v31 > 0x1520000004CLL)
        {
          if (v31 > 0x17B00000053)
          {
            if (v31 <= 0x1880000012CLL)
            {
              if (v31 <= 0x18000000054)
              {
                if (v31 > 0x17D000000C8)
                {
                  if (v31 > 0x17E00000050)
                  {
                    if (v31 == 0x17E00000051) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x17F00000058;
                  }
                  else
                  {
                    if (v31 == 0x17D000000C9) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x17D000002BELL;
                  }
                  goto LABEL_3148;
                }
                if (v31 <= 0x17D0000001DLL)
                {
                  if (v31 == 0x17B00000054 || v31 == 0x17C0000001DLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x17C0000008DLL;
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x17D0000001ELL) > 0x3C) {
                  goto LABEL_3151;
                }
                uint64_t v38 = 1 << (v31 - 30);
                uint64_t v39 = 0x1140000000010001;
                goto LABEL_2868;
              }
              if (v31 <= 0x18400000056)
              {
                if (v31 > 0x18200000058)
                {
                  if (v31 == 0x18200000059) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x18400000052;
                }
                else
                {
                  if ((unint64_t)(v31 - 0x18100000052) <= 0x1E
                    && ((1 << (v31 - 82)) & 0x40000041) != 0)
                  {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x18000000055;
                }
                goto LABEL_3148;
              }
              if (v31 <= 0x18600000052)
              {
                if (v31 == 0x18400000057 || v31 == 0x18500000052) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x18500000057;
                goto LABEL_3148;
              }
              if (v31 == 0x18600000053 || v31 == 0x18700000058) {
                goto LABEL_3149;
              }
              unint64_t v60 = 0x18800000008;
              goto LABEL_3108;
            }
            if (v31 > 0x191000000C8)
            {
              if (v31 <= 0x1960000005DLL)
              {
                if (v31 > 0x193000000C8)
                {
                  if (v31 == 0x193000000C9 || v31 == 0x194000001F6) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x195000000C9;
                }
                else
                {
                  if (v31 == 0x191000000C9 || v31 == 0x1920000005BLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x1920000007ELL;
                }
              }
              else
              {
                if ((unint64_t)(v31 - 0x196000004B8) <= 0x1A
                  && ((1 << (v31 + 72)) & 0x5240001) != 0
                  || v31 == 0x1960000005ELL)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1960000006BLL;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x18B00000053)
            {
              if (v31 > 0x18F0000005ALL)
              {
                if (v31 > 0x1900000005ALL)
                {
                  if (v31 == 0x1900000005BLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x1900000007ELL;
                }
                else
                {
                  if (v31 == 0x18F0000005BLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x18F0000007ELL;
                }
                goto LABEL_3148;
              }
              if (v31 != 0x18B00000054)
              {
                if (v31 == 0x18D00000058) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x18E00000055;
                goto LABEL_3148;
              }
              goto LABEL_3109;
            }
            if (v31 <= 0x18900000050)
            {
              unint64_t v59 = 0xFFFFFE77FFFFFED3;
              goto LABEL_2155;
            }
            if (v31 == 0x18900000051) {
              goto LABEL_3149;
            }
            if (v31 != 0x18900000054)
            {
              unint64_t v60 = 0x18A000000C9;
              goto LABEL_3108;
            }
            goto LABEL_3109;
          }
          if (v31 <= 0x16C000000C8)
          {
            if (v31 > 0x15800000190)
            {
              if (v31 > 0x1660000004ELL)
              {
                if (v31 > 0x168000004B7)
                {
                  if (v31 > 0x16A000004B7)
                  {
                    if (v31 == 0x16A000004B8) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x16B000000C9;
                  }
                  else
                  {
                    if (v31 == 0x168000004B8) {
                      goto LABEL_3149;
                    }
                    unint64_t v41 = 0x169000004B8;
                  }
                  goto LABEL_3148;
                }
                if (v31 == 0x1660000004FLL) {
                  goto LABEL_3130;
                }
                if (v31 == 0x16700000008) {
                  goto LABEL_3109;
                }
                unint64_t v60 = 0x1670000006DLL;
                goto LABEL_3108;
              }
              if (v31 <= 0x15900000130)
              {
                unint64_t v42 = 0xFFFFFEA7FFFFFE6FLL;
                goto LABEL_1349;
              }
              if (v31 <= 0x16500000026)
              {
                if (v31 == 0x15900000131) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x164000001F9;
                goto LABEL_3148;
              }
              if (v31 == 0x16500000027) {
                goto LABEL_3130;
              }
              unint64_t v99 = 0x16600000027;
LABEL_3129:
              if (v31 != v99) {
                goto LABEL_3151;
              }
              goto LABEL_3130;
            }
            if (v31 <= 0x1550000004CLL)
            {
              if (v31 <= 0x15300000007)
              {
                if (v31 == 0x1520000004DLL) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x1520000025ALL;
              }
              else
              {
                if (v31 == 0x15300000008 || v31 == 0x153000000C9) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x1540000029ALL;
              }
            }
            else if (v31 > 0x15600000259)
            {
              if (v31 == 0x1560000025ALL || v31 == 0x157000000C9) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x1570000029ALL;
            }
            else
            {
              if (v31 == 0x1550000004DLL || v31 == 0x1550000025ALL) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x1560000004DLL;
            }
            goto LABEL_3173;
          }
          if (v31 > 0x1730000012CLL)
          {
            if (v31 <= 0x17700000053)
            {
              if (v31 <= 0x17400000058)
              {
                unint64_t v59 = 0xFFFFFE8CFFFFFED3;
                goto LABEL_2155;
              }
              if (v31 == 0x17400000059)
              {
                [a1 captureOfflineShortUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
                goto LABEL_3150;
              }
              if (v31 != 0x17500000000)
              {
                unint64_t v41 = 0x17600000058;
                goto LABEL_3148;
              }
              goto LABEL_3109;
            }
            if (v31 > 0x17A00000051)
            {
              if ((unint64_t)(v31 - 0x17A00000052) > 0x1E) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 - 82);
              uint64_t v39 = 1073741889;
              goto LABEL_2868;
            }
            if (v31 == 0x17700000054) {
              goto LABEL_3149;
            }
            if (v31 != 0x17800000054)
            {
              unint64_t v41 = 0x17900000059;
              goto LABEL_3148;
            }
          }
          else
          {
            if (v31 <= 0x17000000058)
            {
              if (v31 > 0x16D000004B8)
              {
                if (v31 == 0x16D000004B9 || v31 == 0x16E000000C9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x16F000000C9;
              }
              else
              {
                if (v31 == 0x16C000000C9 || v31 == 0x16D00000080) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x16D000000C9;
              }
              goto LABEL_3148;
            }
            if (v31 <= 0x17200000057)
            {
              if (v31 != 0x17000000059)
              {
                if (v31 == 0x17100000000) {
                  goto LABEL_3149;
                }
                uint64_t v81 = 0x17200000000;
                goto LABEL_2320;
              }
            }
            else
            {
              if (v31 > 0x17300000007)
              {
                if (v31 != 0x17300000008)
                {
                  unint64_t v41 = 0x173000000C9;
                  goto LABEL_3148;
                }
                goto LABEL_3109;
              }
              if (v31 != 0x17200000058)
              {
                uint64_t v81 = 0x172000000C9;
LABEL_2320:
                if (v31 != v81) {
                  goto LABEL_3151;
                }
              }
            }
          }
          [a1 captureOfflineSessionlessUserActionTargetPairWithAction:v184 target:v181 value:v188 moduleType:v186 moduleMetadata:v16 richProviderId:v185 additionalStates:v25 providedDropRate:v18 completionQueue:v180 completionBlock:v179];
          goto LABEL_3150;
        }
        if (v31 > 0x12F00000077)
        {
          if (v31 > 0x13B0000012ELL)
          {
            if (v31 > 0x14600000299)
            {
              if (v31 <= 0x14B0000004BLL)
              {
                if (v31 <= 0x14800000049)
                {
                  if (v31 == 0x1460000029ALL) {
                    goto LABEL_3174;
                  }
                  unint64_t v98 = 0x1470000029ALL;
                }
                else
                {
                  if (v31 == 0x1480000004ALL || v31 == 0x149000000C9) {
                    goto LABEL_3174;
                  }
                  unint64_t v98 = 0x14A0000025ALL;
                }
              }
              else if (v31 > 0x14E00000049)
              {
                if (v31 == 0x14E0000004ALL || v31 == 0x14F000000C9) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x1500000029ALL;
              }
              else
              {
                if (v31 == 0x14B0000004CLL || v31 == 0x14C0000004ALL) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x14D0000029ALL;
              }
            }
            else
            {
              if (v31 <= 0x1400000001CLL)
              {
                if (v31 <= 0x13E00000037)
                {
                  if (v31 == 0x13B0000012FLL || v31 == 0x13C0000012FLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x13D0000012FLL;
                  goto LABEL_3148;
                }
                if ((unint64_t)(v31 - 0x13E00000038) < 2) {
                  goto LABEL_2794;
                }
                unint64_t v60 = 0x13F0000001DLL;
                goto LABEL_3108;
              }
              if (v31 > 0x143000000C8)
              {
                if (v31 == 0x143000000C9 || v31 == 0x1440000025ALL) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x1450000029ALL;
              }
              else
              {
                if (v31 == 0x1400000001DLL) {
                  goto LABEL_3109;
                }
                if (v31 == 0x1410000025ALL) {
                  goto LABEL_3174;
                }
                unint64_t v98 = 0x1420000025ALL;
              }
            }
            goto LABEL_3173;
          }
          if (v31 > 0x1360000012ELL)
          {
            if (v31 <= 0x1390000012CLL)
            {
              if (v31 <= 0x138000001F4)
              {
                if (v31 == 0x1360000012FLL || v31 == 0x1370000012FLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x13800000000;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x138000001F5) > 4) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 + 11);
              uint64_t v39 = 25;
            }
            else
            {
              if ((unint64_t)(v31 - 0x13A0000012DLL) < 5) {
                goto LABEL_3149;
              }
              if ((unint64_t)(v31 - 0x1390000012DLL) > 4) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 - 45);
              uint64_t v39 = 19;
            }
            goto LABEL_2868;
          }
          if (v31 > 0x13200000007)
          {
            if (v31 <= 0x1330000012ELL)
            {
              if (v31 == 0x13200000008 || v31 == 0x1320000012FLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x13300000008;
            }
            else if (v31 > 0x1340000012ELL)
            {
              if (v31 == 0x1340000012FLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1350000012DLL;
            }
            else
            {
              if (v31 == 0x1330000012FLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x13400000008;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x13000000007)
          {
            if (v31 <= 0x13100000007)
            {
              if (v31 == 0x13000000008) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1300000000DLL;
              goto LABEL_3148;
            }
            if (v31 == 0x13100000008) {
              goto LABEL_3109;
            }
            unint64_t v60 = 0x131000004B1;
            goto LABEL_3108;
          }
          if (v31 == 0x12F00000078 || v31 == 0x12F00000101) {
            goto LABEL_3109;
          }
          uint64_t v149 = 1201;
        }
        else
        {
          if (v31 <= 0x12600000190)
          {
            if (v31 <= 0x120000000C8)
            {
              if (v31 <= 0x11B00000090)
              {
                if (v31 > 0x11A000000C8)
                {
                  if ((unint64_t)(v31 - 0x11B00000038) >= 2)
                  {
                    unint64_t v41 = 0x11A000000C9;
                    goto LABEL_3148;
                  }
                  goto LABEL_2794;
                }
                if ((unint64_t)(v31 - 0x11900000038) < 2) {
                  goto LABEL_2794;
                }
                if (v31 == 0x1180000025FLL) {
                  goto LABEL_3149;
                }
                uint64_t v47 = 0x11800000401;
                goto LABEL_3176;
              }
              if (v31 <= 0x11E000000C8)
              {
                if (v31 != 0x11B00000091 && v31 != 0x11C00000091)
                {
                  unint64_t v41 = 0x11C000000C9;
                  goto LABEL_3148;
                }
                goto LABEL_2960;
              }
              if (v31 != 0x11E000000C9 && v31 != 0x11F000000C9)
              {
                unint64_t v60 = 0x1200000001ELL;
                goto LABEL_3108;
              }
              goto LABEL_2983;
            }
            if (v31 > 0x124000003E8)
            {
              if (v31 > 0x12500000063)
              {
                if ((unint64_t)(v31 - 0x125000004C9) < 2 || v31 == 0x12500000064) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x12500000191;
                goto LABEL_3148;
              }
              if ((unint64_t)(v31 - 0x124000004C9) < 2) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x124000003E9;
              goto LABEL_3176;
            }
            if (v31 > 0x122000000C8)
            {
              if (v31 != 0x122000000C9)
              {
                if (v31 == 0x12300000001) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x12400000191;
                goto LABEL_3148;
              }
              goto LABEL_2759;
            }
            if (v31 == 0x120000000C9) {
              goto LABEL_3109;
            }
            if (v31 == 0x12100000041) {
              goto LABEL_2983;
            }
            uint64_t v40 = 0x12200000027;
            goto LABEL_2043;
          }
          if (v31 <= 0x12A000000C8)
          {
            if (v31 > 0x128000004C8)
            {
              if (v31 > 0x12900000190)
              {
                if ((unint64_t)(v31 - 0x129000004C9) < 2) {
                  goto LABEL_3149;
                }
                uint64_t v139 = 401;
              }
              else
              {
                if ((unint64_t)(v31 - 0x128000004C9) < 2) {
                  goto LABEL_3149;
                }
                uint64_t v139 = 100;
              }
              unint64_t v41 = v139 & 0xFFFF0000FFFFFFFFLL | 0x12900000000;
              goto LABEL_3148;
            }
            if (v31 > 0x127000004C8)
            {
              if (v31 == 0x127000004C9 || v31 == 0x12800000191) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x128000003E9;
            }
            else
            {
              if (v31 == 0x12600000191 || v31 == 0x12700000191) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x127000003E9;
            }
            goto LABEL_3176;
          }
          if (v31 <= 0x12E00000007)
          {
            if (v31 > 0x12D00000007)
            {
              if (v31 == 0x12D00000008 || v31 == 0x12D000000C9) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x12D0000029ALL;
            }
            else
            {
              if (v31 == 0x12A000000C9 || v31 == 0x12B000000C9) {
                goto LABEL_3174;
              }
              unint64_t v98 = 0x12C000000C9;
            }
            goto LABEL_3173;
          }
          if (v31 <= 0x12E00000100)
          {
            if (v31 == 0x12E00000008 || v31 == 0x12E0000006DLL) {
              goto LABEL_3109;
            }
            uint64_t v85 = 120;
LABEL_2347:
            unint64_t v60 = v85 & 0xFFFF0000FFFFFFFFLL | 0x12E00000000;
            goto LABEL_3108;
          }
          if (v31 <= 0x12F00000007)
          {
            if (v31 == 0x12E00000101) {
              goto LABEL_3109;
            }
            uint64_t v85 = 1201;
            goto LABEL_2347;
          }
          if (v31 == 0x12F00000008) {
            goto LABEL_3109;
          }
          uint64_t v149 = 109;
        }
        unint64_t v60 = v149 & 0xFFFF0000FFFFFFFFLL | 0x12F00000000;
        goto LABEL_3108;
      }
      if (v31 > 0x1B00000005ELL)
      {
        if (v31 > 0x1D400000007)
        {
          if (v31 > 0x1DF00000086)
          {
            if (v31 > 0x1E60000006FLL)
            {
              if (v31 > 0x1EA0000008FLL)
              {
                if ((unint64_t)(v31 - 0x3E90000005ELL) <= 0x18
                  && ((1 << (v31 - 94)) & 0x1702001) != 0)
                {
                  goto LABEL_3149;
                }
                if (v31 != 0x1EA00000090)
                {
                  unint64_t v41 = 0x3E900000000;
                  goto LABEL_3148;
                }
                goto LABEL_2960;
              }
              if (v31 <= 0x1E80000008ELL)
              {
                if (v31 == 0x1E600000070) {
                  goto LABEL_3149;
                }
                uint64_t v61 = 0x1E700000090;
              }
              else
              {
                if ((unint64_t)(v31 - 0x1E80000008FLL) < 2) {
                  goto LABEL_2960;
                }
                uint64_t v61 = 0x1E900000091;
              }
              goto LABEL_2959;
            }
            if (v31 <= 0x1E0000000FDLL)
            {
              if ((unint64_t)(v31 - 0x1DF00000087) <= 5 && ((1 << (v31 + 121)) & 0x25) != 0
                || (unint64_t)(v31 - 0x1E000000087) <= 5 && ((1 << (v31 + 121)) & 0x25) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1DF000000FELL;
              goto LABEL_3148;
            }
            if (v31 > 0x1E30000006FLL)
            {
              if (v31 == 0x1E300000070 || v31 == 0x1E400000070) {
                goto LABEL_3149;
              }
              unint64_t v60 = 0x1E500000008;
            }
            else
            {
              if (v31 == 0x1E0000000FELL || v31 == 0x1E10000008ELL) {
                goto LABEL_3149;
              }
              unint64_t v60 = 0x1E200000008;
            }
            goto LABEL_3108;
          }
          if (v31 > 0x1DA0000008BLL)
          {
            if (v31 <= 0x1DD00000088)
            {
              if (v31 <= 0x1DB0000008BLL)
              {
                if (v31 == 0x1DA0000008CLL || v31 == 0x1DA000000FELL) {
                  goto LABEL_3149;
                }
                unint64_t v60 = 0x1DB00000089;
                goto LABEL_3108;
              }
              if (v31 == 0x1DB0000008CLL || v31 == 0x1DC0000008CLL) {
                goto LABEL_3109;
              }
              uint64_t v150 = 30;
            }
            else
            {
              if (v31 > 0x1DD00000102)
              {
                if (v31 > 0x1DE0000008BLL)
                {
                  if (v31 == 0x1DE0000008CLL) {
                    goto LABEL_3109;
                  }
                  uint64_t v91 = 254;
                }
                else
                {
                  if (v31 == 0x1DD00000103) {
                    goto LABEL_3109;
                  }
                  uint64_t v91 = 137;
                }
                unint64_t v60 = v91 & 0xFFFF0000FFFFFFFFLL | 0x1DE00000000;
                goto LABEL_3108;
              }
              if (v31 == 0x1DD00000089 || v31 == 0x1DD0000008CLL) {
                goto LABEL_3109;
              }
              uint64_t v150 = 201;
            }
            unint64_t v60 = v150 & 0xFFFF0000FFFFFFFFLL | 0x1DD00000000;
            goto LABEL_3108;
          }
          if (v31 > 0x1D500000102)
          {
            if (v31 > 0x1D80000008ALL)
            {
              if (v31 == 0x1D80000008BLL || v31 == 0x1D900000089) {
                goto LABEL_3109;
              }
              unint64_t v60 = 0x1D90000008CLL;
            }
            else
            {
              if (v31 == 0x1D500000103) {
                goto LABEL_3109;
              }
              if (v31 == 0x1D600000088) {
                goto LABEL_3149;
              }
              unint64_t v60 = 0x1D70000008ALL;
            }
          }
          else
          {
            if (v31 > 0x1D500000083)
            {
              if (v31 == 0x1D500000084) {
                goto LABEL_3149;
              }
              if (v31 == 0x1D50000008CLL) {
                goto LABEL_3109;
              }
              uint64_t v113 = 201;
            }
            else
            {
              if (v31 == 0x1D400000008 || v31 == 0x1D400000101) {
                goto LABEL_3109;
              }
              uint64_t v113 = 30;
            }
            unint64_t v60 = v113 & 0xFFFF0000FFFFFFFFLL | 0x1D500000000;
          }
        }
        else
        {
          if (v31 <= 0x1C100000007)
          {
            if (v31 > 0x1B400000293)
            {
              if (v31 <= 0x1BA00000295)
              {
                if (v31 > 0x1B700000079)
                {
                  if (v31 == 0x1B70000007ALL || v31 == 0x1B80000007BLL) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x1B900000294;
                }
                else
                {
                  if (v31 == 0x1B400000294 || v31 == 0x1B500000294) {
                    goto LABEL_3149;
                  }
                  unint64_t v41 = 0x1B600000296;
                }
              }
              else if (v31 <= 0x1BD00000295)
              {
                if (v31 == 0x1BA00000296 || v31 == 0x1BB0000007ALL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1BC0000012DLL;
              }
              else if (v31 > 0x1BF00000293)
              {
                if (v31 == 0x1BF00000294) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1C00000007ALL;
              }
              else
              {
                if (v31 == 0x1BD00000296) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1BE00000294;
              }
              goto LABEL_3148;
            }
            if (v31 > 0x1B200000063)
            {
              if ((unint64_t)(v31 - 0x1B3000004C9) <= 0xA
                && ((1 << (v31 + 55)) & 0x449) != 0)
              {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1B200000064;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x1B00000005FLL) <= 5 && ((1 << (v31 - 95)) & 0x2B) != 0) {
              goto LABEL_3149;
            }
            if ((unint64_t)(v31 - 0x1B10000005FLL) > 5) {
              goto LABEL_3151;
            }
            uint64_t v38 = 1 << (v31 - 95);
            uint64_t v39 = 43;
            goto LABEL_2868;
          }
          if (v31 <= 0x1CC000001F6)
          {
            if (v31 > 0x1C700000079)
            {
              if (v31 > 0x1CA0000007ELL)
              {
                if (v31 == 0x1CA0000007FLL || v31 == 0x1CB00000065) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1CB000000C9;
              }
              else
              {
                if (v31 == 0x1C70000007ALL || v31 == 0x1C80000007CLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x1C90000007DLL;
              }
            }
            else if (v31 > 0x1C40000007ALL)
            {
              if (v31 == 0x1C40000007BLL || v31 == 0x1C500000296) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1C60000012DLL;
            }
            else
            {
              if (v31 == 0x1C100000008 || v31 == 0x1C20000012DLL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1C300000008;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x1D10000001DLL)
          {
            if (v31 <= 0x1D10000012DLL)
            {
              if (v31 == 0x1D10000001ELL || v31 == 0x1D100000087) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1D1000000C9;
            }
            else if (v31 > 0x1D300000084)
            {
              if (v31 == 0x1D300000085) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1D3000000C9;
            }
            else
            {
              if (v31 == 0x1D10000012ELL) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1D200000086;
            }
            goto LABEL_3148;
          }
          if (v31 > 0x1CE00000100)
          {
            if (v31 != 0x1CE00000101)
            {
              if (v31 == 0x1CF00000083) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x1D0000000C9;
              goto LABEL_3148;
            }
            goto LABEL_3109;
          }
          if (v31 == 0x1CC000001F7 || v31 == 0x1CD000001F7) {
            goto LABEL_3149;
          }
          unint64_t v60 = 0x1CE00000008;
        }
LABEL_3108:
        if (v31 != v60) {
          goto LABEL_3151;
        }
        goto LABEL_3109;
      }
      if (v31 <= 0x1A400000062)
      {
        if (v31 > 0x19F0000006CLL)
        {
          if (v31 <= 0x1A200000039)
          {
            if (v31 <= 0x1A10000006DLL)
            {
              if (v31 == 0x19F0000006DLL || v31 == 0x1A00000006DLL) {
                goto LABEL_3149;
              }
              uint64_t v111 = 108;
            }
            else
            {
              if ((unint64_t)(v31 - 0x1A1000004C9) <= 0xA
                && ((1 << (v31 + 55)) & 0x6DB) != 0)
              {
                goto LABEL_3149;
              }
              uint64_t v111 = 110;
            }
            unint64_t v41 = v111 & 0xFFFF0000FFFFFFFFLL | 0x1A100000000;
            goto LABEL_3148;
          }
          if (v31 > 0x1A2000003E8)
          {
            if ((unint64_t)(v31 - 0x1A2000003E9) <= 0x16
              && ((1 << (v31 + 23)) & 0x400701) != 0
              || v31 == 0x1A2000004B7)
            {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1A3000004B7;
            goto LABEL_3148;
          }
          if ((unint64_t)(v31 - 0x1A20000003ALL) > 0x2F) {
            goto LABEL_3151;
          }
          uint64_t v38 = 1 << (v31 - 58);
          uint64_t v39 = 0xDA0000000001;
          goto LABEL_2868;
        }
        if (v31 > 0x19A000000C8)
        {
          if (v31 > 0x19D000004CBLL)
          {
            if ((unint64_t)(v31 - 0x19D000004CCLL) <= 7 && ((1 << (v31 + 52)) & 0xC3) != 0) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x19E00000050;
          }
          else
          {
            if (v31 > 0x19C000000C8)
            {
              if ((unint64_t)(v31 - 0x19D0000005FLL) < 2 || v31 == 0x19C000000C9) {
                goto LABEL_3149;
              }
              uint64_t v106 = 1209;
            }
            else
            {
              if (v31 == 0x19A000000C9 || v31 == 0x19B00000000) {
                goto LABEL_3149;
              }
              uint64_t v106 = 129;
            }
            unint64_t v41 = v106 & 0xFFFF0000FFFFFFFFLL | 0x19C00000000;
          }
          goto LABEL_3148;
        }
        if (v31 <= 0x1990000005ELL)
        {
          if (v31 == 0x19700000052 || v31 == 0x19700000070) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x19800000070;
          goto LABEL_3148;
        }
        if ((unint64_t)(v31 - 0x1990000005FLL) <= 0xF && ((1 << (v31 - 95)) & 0xA02B) != 0) {
          goto LABEL_3149;
        }
        unint64_t v72 = 0xFFFFFE66FFFFFB36;
LABEL_2132:
        unint64_t v145 = v31 + v72;
        if (v145 > 8) {
          goto LABEL_3151;
        }
        uint64_t v38 = 1 << v145;
        uint64_t v39 = 329;
        goto LABEL_2868;
      }
      if (v31 > 0x1AA000004C9)
      {
        if (v31 > 0x1AD000004C3)
        {
          if ((unint64_t)(v31 - 0x1AD000004C4) <= 0x11
            && ((1 << (v31 + 60)) & 0x20007) != 0
            || (unint64_t)(v31 - 0x1AE00000072) <= 4 && v31 != 0x1AE00000075)
          {
            goto LABEL_3149;
          }
          unint64_t v72 = 0xFFFFFE50FFFFFB36;
        }
        else
        {
          if (v31 > 0x1AC000000C8)
          {
            if ((unint64_t)(v31 - 0x1AD0000005DLL) <= 0x14
              && ((1 << (v31 - 93)) & 0x140011) != 0)
            {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x1AC000000C9;
            goto LABEL_3148;
          }
          if ((unint64_t)(v31 - 0x1AB0000005DLL) <= 0x14
            && ((1 << (v31 - 93)) & 0x140051) != 0)
          {
            goto LABEL_3149;
          }
          unint64_t v72 = 0xFFFFFE55FFFFFB36;
        }
        goto LABEL_2132;
      }
      if (v31 <= 0x1A6000000C8)
      {
        if ((unint64_t)(v31 - 0x1A50000005FLL) <= 0xF && ((1 << (v31 - 95)) & 0xA02B) != 0
          || (unint64_t)(v31 - 0x1A5000004C9) <= 0xA && ((1 << (v31 + 55)) & 0x449) != 0)
        {
          goto LABEL_3149;
        }
        unint64_t v41 = 0x1A400000063;
        goto LABEL_3148;
      }
      if (v31 <= 0x1A8000004B7)
      {
        if (v31 > 0x1A80000005DLL)
        {
          if (v31 == 0x1A80000005ELL) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x1A80000006BLL;
        }
        else
        {
          if (v31 == 0x1A6000000C9) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x1A700000000;
        }
        goto LABEL_3148;
      }
      if (v31 > 0x1A90000004FLL)
      {
        if (v31 == 0x1A900000050 || v31 == 0x1AA0000005ELL) {
          goto LABEL_3149;
        }
        unint64_t v41 = 0x1AA0000006BLL;
        goto LABEL_3148;
      }
      unint64_t v96 = 0xFFFFFE57FFFFFB48;
LABEL_2088:
      unint64_t v144 = v31 + v96;
      if (v144 > 0x1A) {
        goto LABEL_3151;
      }
      uint64_t v38 = 1 << v144;
      unsigned __int16 v100 = 1;
      goto LABEL_2090;
    }
    if (v31 > 0x415000004B7)
    {
      if (v31 > 0x422000006A3)
      {
        if (v31 <= 0x7D6FFFFFFFFLL)
        {
          if (v31 > 0x7D1000004B2)
          {
            if (v31 > 0x7D3000003EELL)
            {
              if (v31 > 0x7D4000003EELL)
              {
                if (v31 <= 0x7D4000004B2)
                {
                  switch(v31)
                  {
                    case 0x7D4000003EFLL:
                    case 0x7D4000003F1:
                    case 0x7D4000003F3:
                      goto LABEL_3149;
                    case 0x7D4000003F2:
                      goto LABEL_3177;
                    default:
                      goto LABEL_3151;
                  }
                  goto LABEL_3151;
                }
                if (v31 == 0x7D4000004B3 || v31 == 0x7D5000004B6) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7D6000003EFLL;
                goto LABEL_3148;
              }
              if (v31 <= 0x7D3000003FELL)
              {
                if (v31 == 0x7D3000003EFLL) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7D3000003F3;
                goto LABEL_3148;
              }
              if (v31 != 0x7D3000003FFLL)
              {
                unint64_t v41 = 0x7D4000000C9;
                goto LABEL_3148;
              }
              goto LABEL_3177;
            }
            if (v31 > 0x7D2000003F2)
            {
              char v128 = v31 - 8;
              if ((unint64_t)(v31 - 0x7D300000008) <= 0x1B)
              {
                if (((1 << v128) & 0x29) != 0) {
                  goto LABEL_3149;
                }
                if (((1 << v128) & 0x9000000) != 0) {
                  goto LABEL_3130;
                }
              }
              if (v31 == 0x7D2000003F3) {
                goto LABEL_3149;
              }
              uint64_t v47 = 0x7D2000003FFLL;
              goto LABEL_3176;
            }
            if (v31 > 0x7D200000064)
            {
              if (v31 == 0x7D200000065) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x7D2000003EFLL;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x7D200000008) <= 0x33
              && ((1 << (v31 - 8)) & 0x8000000000029) != 0)
            {
              goto LABEL_3149;
            }
            uint64_t v86 = 1203;
          }
          else
          {
            if (v31 <= 0x425FFFFFFFFLL)
            {
              if (v31 > 0x424000006A5)
              {
                switch(v31)
                {
                  case 0x425000006A4:
                  case 0x425000006ABLL:
                    goto LABEL_3149;
                  case 0x425000006A5:
                  case 0x425000006A7:
                  case 0x425000006A8:
                  case 0x425000006A9:
                    goto LABEL_3151;
                  case 0x425000006A6:
                  case 0x425000006AALL:
                    goto LABEL_1420;
                  default:
                    if (v31 == 0x424000006A6) {
                      goto LABEL_1420;
                    }
                    uint64_t v116 = 0x424000006AALL;
                    goto LABEL_3054;
                }
              }
              if ((unint64_t)(v31 - 0x422000006A4) <= 7 && ((1 << (v31 + 92)) & 0xC5) != 0) {
                goto LABEL_1420;
              }
              if ((unint64_t)(v31 - 0x423000006A4) > 7) {
                goto LABEL_3151;
              }
              uint64_t v49 = 1 << (v31 + 92);
              uint64_t v50 = 197;
LABEL_1419:
              if ((v49 & v50) == 0) {
                goto LABEL_3151;
              }
              goto LABEL_1420;
            }
            if (v31 <= 0x7D100000007)
            {
              if ((unint64_t)(v31 - 0x426000001F5) < 4) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x42600000000;
              goto LABEL_3148;
            }
            if (v31 <= 0x7D100000064)
            {
              if ((unint64_t)(v31 - 0x7D100000008) > 0x33) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 - 8);
              uint64_t v39 = 0x8000000000029;
              goto LABEL_2868;
            }
            if (v31 == 0x7D100000065 || v31 == 0x7D10000006DLL) {
              goto LABEL_3149;
            }
            uint64_t v86 = 1201;
          }
          unint64_t v41 = v86 & 0xFFFF0000FFFFFFFFLL | 0x7D100000000;
          goto LABEL_3148;
        }
        if (v31 > 0x7D7000004B0)
        {
          if (v31 <= 0x7DE00000007)
          {
            if (v31 > 0x7D8FFFFFFFFLL)
            {
              if (v31 <= 0x7DA00000007)
              {
                if (v31 == 0x7D900000000 || v31 == 0x7D900000008) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7DA00000000;
              }
              else
              {
                if ((unint64_t)(v31 - 0x7DB0000003ALL) <= 0x2C
                  && ((1 << (v31 - 58)) & 0x180000000001) != 0)
                {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x7DA00000008;
              }
            }
            else if (v31 <= 0x7D800000007)
            {
              if (v31 == 0x7D7000004B1 || v31 == 0x7D7000004B7) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x7D800000000;
            }
            else
            {
              if ((unint64_t)(v31 - 0x7D800000065) <= 4 && ((1 << (v31 - 101)) & 0x13) != 0) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x7D800000008;
            }
            goto LABEL_3148;
          }
          if (v31 <= 0x7DE000003F2)
          {
            if ((unint64_t)(v31 - 0x7DE00000008) <= 0x33
              && ((1 << (v31 - 8)) & 0x8000000000029) != 0
              || v31 == 0x7DE0000025FLL)
            {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x7DE000003EFLL;
            goto LABEL_3148;
          }
          if (v31 <= 0x7DEFFFFFFFFLL)
          {
            if (v31 == 0x7DE000003F3) {
              goto LABEL_3149;
            }
            uint64_t v47 = 0x7DE000003FFLL;
            goto LABEL_3176;
          }
          if (v31 == 0x7DF00000000) {
            goto LABEL_3149;
          }
          if (v31 == 0x7DF0000000BLL) {
            goto LABEL_3126;
          }
          uint64_t v45 = 58;
LABEL_2095:
          unint64_t v41 = v45 & 0xFFFF0000FFFFFFFFLL | 0x7DF00000000;
          goto LABEL_3148;
        }
        if (v31 > 0x7D70000026ALL)
        {
          if (v31 <= 0x7D700000323)
          {
            if ((unint64_t)(v31 - 0x7D7000002BDLL) < 2 || v31 == 0x7D70000026BLL) {
              goto LABEL_3149;
            }
            uint64_t v123 = 0x7D700000323;
            goto LABEL_3125;
          }
          char v105 = v31 + 23;
          if ((unint64_t)(v31 - 0x7D7000003E9) <= 0x16)
          {
            if (((1 << v105) & 0x171) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v105) & 0x400400) != 0) {
              goto LABEL_3177;
            }
          }
          uint64_t v65 = 804;
        }
        else
        {
          char v64 = v31 - 72;
          if ((unint64_t)(v31 - 0x7D700000048) <= 0x25)
          {
            if (((1 << v64) & 0x2508000001) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v64) & 0x260000000) != 0) {
              goto LABEL_3126;
            }
          }
          if ((unint64_t)(v31 - 0x7D700000000) <= 0x3B)
          {
            if (((1 << v31) & 0xC00000000000001) != 0) {
              goto LABEL_3149;
            }
            if (((1 << v31) & 0x900) != 0) {
              goto LABEL_3126;
            }
          }
          uint64_t v65 = 607;
        }
        unint64_t v41 = v65 & 0xFFFF0000FFFFFFFFLL | 0x7D700000000;
        goto LABEL_3148;
      }
      if (v31 <= 0x418000003E8)
      {
        if (v31 > 0x416000006A3)
        {
          if (v31 > 0x417000006A3)
          {
            if ((unint64_t)(v31 - 0x418000001F5) < 5) {
              goto LABEL_3149;
            }
            if ((unint64_t)(v31 - 0x417000006A4) > 7 || ((1 << (v31 + 92)) & 0xB1) == 0)
            {
              unint64_t v41 = 0x41800000000;
              goto LABEL_3148;
            }
          }
          else
          {
            if (v31 > 0x417000003E8)
            {
              if ((unint64_t)(v31 - 0x417000003E9) > 0x12) {
                goto LABEL_3151;
              }
              uint64_t v38 = 1 << (v31 + 23);
              uint64_t v39 = 263539;
              goto LABEL_2868;
            }
            if ((unint64_t)(v31 - 0x417000001F5) < 5) {
              goto LABEL_3149;
            }
            if ((unint64_t)(v31 - 0x416000006A4) > 5 || ((1 << (v31 + 92)) & 0x31) == 0)
            {
              unint64_t v41 = 0x41700000000;
              goto LABEL_3148;
            }
          }
          goto LABEL_1420;
        }
        if (v31 > 0x416000001F4)
        {
          if ((unint64_t)(v31 - 0x416000001F5) < 5
            || (unint64_t)(v31 - 0x416000004B8) <= 0x1A
            && ((1 << (v31 + 72)) & 0x5240001) != 0)
          {
            goto LABEL_3149;
          }
          if ((unint64_t)(v31 - 0x416000003E9) > 6) {
            goto LABEL_3151;
          }
          uint64_t v38 = 1 << (v31 + 23);
          uint64_t v39 = 83;
          goto LABEL_2868;
        }
        if (v31 > 0x415000006A3)
        {
          if (v31 > 0x415FFFFFFFFLL)
          {
            if (v31 == 0x41600000000 || v31 == 0x4160000005ELL) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x4160000006BLL;
            goto LABEL_3148;
          }
          if ((unint64_t)(v31 - 0x415000006A4) > 5) {
            goto LABEL_3151;
          }
          uint64_t v49 = 1 << (v31 + 92);
          uint64_t v50 = 49;
          goto LABEL_1419;
        }
        unint64_t v96 = 0xFFFFFBEAFFFFFB48;
        goto LABEL_2088;
      }
      if (v31 > 0x41CFFFFFFFFLL)
      {
        if (v31 <= 0x41E0000012CLL)
        {
          if (v31 <= 0x41DFFFFFFFFLL)
          {
            if ((unint64_t)(v31 - 0x41D000001F5) < 4) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x41D00000000;
          }
          else
          {
            if ((unint64_t)(v31 - 0x41E00000000) <= 0xD && ((1 << v31) & 0x2901) != 0
              || (unint64_t)(v31 - 0x41E00000065) < 2)
            {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x41E000000C9;
          }
        }
        else
        {
          if (v31 <= 0x41F00000064)
          {
            if (((unint64_t)(v31 - 0x41F00000000) > 0xD || ((1 << v31) & 0x2901) == 0)
              && (unint64_t)(v31 - 0x41E0000012DLL) >= 3)
            {
              goto LABEL_3151;
            }
            goto LABEL_3149;
          }
          if (v31 > 0x41F0000012CLL)
          {
            if (v31 == 0x41F0000012DLL || v31 == 0x42000000000) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x42100000000;
          }
          else
          {
            if ((unint64_t)(v31 - 0x41F00000065) < 2) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x41F000000C9;
          }
        }
        goto LABEL_3148;
      }
      if (v31 > 0x419000003E8)
      {
        if ((unint64_t)(v31 - 0x419000003E9) <= 0xA && ((1 << (v31 + 23)) & 0x573) != 0
          || (unint64_t)(v31 - 0x41A000003E9) <= 6 && ((1 << (v31 + 23)) & 0x73) != 0)
        {
          goto LABEL_3149;
        }
        unint64_t v41 = 0x41B000001F9;
        goto LABEL_3148;
      }
      if ((unint64_t)(v31 - 0x418000003E9) <= 0x12 && ((1 << (v31 + 23)) & 0x40573) != 0) {
        goto LABEL_3149;
      }
      unint64_t v107 = 0xFFFFFBE7FFFFF95CLL;
LABEL_1417:
      unint64_t v122 = v31 + v107;
      if (v122 > 7) {
        goto LABEL_3151;
      }
      uint64_t v49 = 1 << v122;
      uint64_t v50 = 177;
      goto LABEL_1419;
    }
    if (v31 > 0x407000001F4)
    {
      if (v31 <= 0x410FFFFFFFFLL)
      {
        if (v31 > 0x40DFFFFFFFFLL)
        {
          if (v31 > 0x40F00000067)
          {
            if (v31 > 0x410000001F6)
            {
              if (v31 == 0x410000001F7 || v31 == 0x410000001F9) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x410000004B8;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x40F000003E9) > 0x16) {
              goto LABEL_1232;
            }
            if (((1 << (v31 + 23)) & 0x400371) != 0) {
              goto LABEL_3149;
            }
            if (v31 != 0x40F000003FDLL)
            {
LABEL_1232:
              unint64_t v41 = 0x40F00000068;
              goto LABEL_3148;
            }
          }
          else
          {
            if (v31 <= 0x40E000003E8)
            {
              if (v31 == 0x40E00000000 || v31 == 0x40E00000068) {
                goto LABEL_3149;
              }
              unint64_t v41 = 0x40E000001FALL;
              goto LABEL_3148;
            }
            if ((unint64_t)(v31 - 0x40E000003E9) > 0x16) {
              goto LABEL_746;
            }
            if (((1 << (v31 + 23)) & 0x400371) != 0) {
              goto LABEL_3149;
            }
            if (v31 != 0x40E000003FDLL)
            {
LABEL_746:
              unint64_t v41 = 0x40F00000000;
              goto LABEL_3148;
            }
          }
          goto LABEL_3177;
        }
        if (v31 <= 0x40A000004B7)
        {
          if (v31 > 0x4080000027CLL)
          {
            if ((unint64_t)(v31 - 0x40A000001F5) < 4 || (unint64_t)(v31 - 0x4080000027DLL) < 2) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x40A00000000;
          }
          else
          {
            if ((unint64_t)(v31 - 0x407000001F5) <= 0xA && ((1 << (v31 + 11)) & 0x41F) != 0) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x408000000C9;
          }
          goto LABEL_3148;
        }
        if (v31 > 0x40CFFFFFFFFLL)
        {
          if ((unint64_t)(v31 - 0x40D000001F5) < 5) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x40D00000000;
          goto LABEL_3148;
        }
        if (v31 <= 0x40B000001F4)
        {
          if (v31 == 0x40A000004B8 || v31 == 0x40A000004C1) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x40B00000000;
          goto LABEL_3148;
        }
        unint64_t v42 = 0xFFFFFBF4FFFFFE0BLL;
        goto LABEL_1349;
      }
      if (v31 <= 0x414000001F4)
      {
        if (v31 <= 0x413000001F4)
        {
          if (v31 <= 0x411FFFFFFFFLL)
          {
            if ((unint64_t)(v31 - 0x411000001F5) < 5) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x41100000000;
          }
          else
          {
            if ((unint64_t)(v31 - 0x412000001F5) < 5 || v31 == 0x41200000000) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x41300000000;
          }
          goto LABEL_3148;
        }
        char v114 = v31 + 92;
        if ((unint64_t)(v31 - 0x413000006A4) <= 7)
        {
          if (((1 << v114) & 0xB1) != 0) {
            goto LABEL_1420;
          }
          if (((1 << v114) & 0x44) != 0) {
            goto LABEL_3149;
          }
        }
        if ((unint64_t)(v31 - 0x413000001F5) < 5) {
          goto LABEL_3149;
        }
        unint64_t v41 = 0x41400000000;
        goto LABEL_3148;
      }
      if (v31 > 0x4150000006ALL)
      {
        if ((unint64_t)(v31 - 0x415000003E9) <= 0x12 && ((1 << (v31 + 23)) & 0x40353) != 0
          || (unint64_t)(v31 - 0x415000001F5) < 5)
        {
          goto LABEL_3149;
        }
        uint64_t v63 = 107;
      }
      else
      {
        if (v31 <= 0x414000006A3)
        {
          unint64_t v74 = 0xFFFFFBEBFFFFFE0BLL;
          goto LABEL_2034;
        }
        char v62 = v31 + 92;
        if ((unint64_t)(v31 - 0x414000006A4) <= 7)
        {
          if (((1 << v62) & 0xB1) != 0) {
            goto LABEL_1420;
          }
          if (((1 << v62) & 0x44) != 0) {
            goto LABEL_3149;
          }
        }
        if (v31 == 0x41500000000) {
          goto LABEL_3149;
        }
        uint64_t v63 = 94;
      }
      unint64_t v41 = v63 & 0xFFFF0000FFFFFFFFLL | 0x41500000000;
      goto LABEL_3148;
    }
    if (v31 <= 0x3F2000001F4)
    {
      if (v31 <= 0x3E9FFFFFFFFLL)
      {
        if (v31 <= 0x3E9000004B7)
        {
          if ((unint64_t)(v31 - 0x3E9000003E9) <= 0x16
            && ((1 << (v31 + 23)) & 0x4C0773) != 0)
          {
            goto LABEL_3149;
          }
          unint64_t v74 = 0xFFFFFC16FFFFFE0BLL;
          goto LABEL_2034;
        }
        if ((unint64_t)(v31 - 0x3E9000004B8) <= 0x1A
          && ((1 << (v31 + 72)) & 0x5240001) != 0)
        {
          goto LABEL_3149;
        }
        unint64_t v107 = 0xFFFFFC16FFFFF95CLL;
        goto LABEL_1417;
      }
      if (v31 <= 0x3EBFFFFFFFFLL)
      {
        if (v31 > 0x3EAFFFFFFFFLL)
        {
          if ((unint64_t)(v31 - 0x3EB000001F5) < 4 || v31 == 0x3EB00000000) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x3EB00000322;
        }
        else
        {
          if ((unint64_t)(v31 - 0x3EA000001F5) < 4 || v31 == 0x3EA00000000) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x3EA00000322;
        }
        goto LABEL_3148;
      }
      if (v31 <= 0x3EC000006A3)
      {
        if ((unint64_t)(v31 - 0x3EC000001F5) < 5) {
          goto LABEL_3149;
        }
        unint64_t v41 = 0x3EC00000000;
        goto LABEL_3148;
      }
      if ((unint64_t)(v31 - 0x3EC000006A4) <= 7 && ((1 << (v31 + 92)) & 0xB1) != 0) {
        goto LABEL_1420;
      }
      if (v31 == 0x3F200000000) {
        goto LABEL_3149;
      }
      uint64_t v95 = 94;
    }
    else
    {
      if (v31 > 0x3F9000001F4)
      {
        if (v31 > 0x3FBFFFFFFFFLL)
        {
          if (v31 > 0x405FFFFFFFFLL)
          {
            if (v31 <= 0x406000001F6)
            {
              if (v31 == 0x40600000000 || v31 == 0x40600000050) {
                goto LABEL_3149;
              }
              uint64_t v127 = 201;
            }
            else
            {
              if (v31 > 0x406000004B8)
              {
                if (v31 == 0x406000004B9) {
                  goto LABEL_3149;
                }
                unint64_t v41 = 0x40700000000;
                goto LABEL_3148;
              }
              if (v31 == 0x406000001F7) {
                goto LABEL_3149;
              }
              uint64_t v127 = 623;
            }
            unint64_t v41 = v127 & 0xFFFF0000FFFFFFFFLL | 0x40600000000;
          }
          else
          {
            if ((unint64_t)(v31 - 0x3FC000001F5) < 5 || v31 == 0x3FC00000000) {
              goto LABEL_3149;
            }
            unint64_t v41 = 0x3FC000004B8;
          }
          goto LABEL_3148;
        }
        char v103 = v31 + 11;
        if ((unint64_t)(v31 - 0x3F9000001F5) > 5)
        {
          if ((unint64_t)(v31 - 0x3FA000001F5) > 5)
          {
            unint64_t v41 = 0x3FA00000000;
            goto LABEL_3148;
          }
          if (v31 != 0x3FA000001F7) {
            goto LABEL_3149;
          }
          goto LABEL_3126;
        }
        goto LABEL_1221;
      }
      if (v31 > 0x3F2FFFFFFFFLL)
      {
        if (v31 <= 0x3F3000004B7)
        {
          if ((unint64_t)(v31 - 0x3F3000001F5) < 5) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x3F300000000;
          goto LABEL_3148;
        }
        if (v31 <= 0x3F900000030)
        {
          if (v31 == 0x3F3000004B8) {
            goto LABEL_3149;
          }
          unint64_t v41 = 0x3F900000000;
          goto LABEL_3148;
        }
        if (v31 == 0x3F900000031) {
          goto LABEL_3126;
        }
        uint64_t v123 = 0x3F900000103;
        goto LABEL_3125;
      }
      if (v31 > 0x3F2000006A3)
      {
        char v134 = v31 + 92;
        if ((unint64_t)(v31 - 0x3F2000006A4) > 7) {
          goto LABEL_3151;
        }
        if (((1 << v134) & 0xB1) == 0)
        {
          uint64_t v77 = 1 << v134;
          uint64_t v78 = 68;
LABEL_1748:
          if ((v77 & v78) == 0) {
            goto LABEL_3151;
          }
          goto LABEL_2952;
        }
        goto LABEL_1420;
      }
      if ((unint64_t)(v31 - 0x3F2000001F5) < 5 || v31 == 0x3F2000004B8) {
        goto LABEL_3149;
      }
      uint64_t v95 = 1217;
    }
    unint64_t v41 = v95 & 0xFFFF0000FFFFFFFFLL | 0x3F200000000;
    goto LABEL_3148;
  }
  id v21 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    GEOApplicationIdentifierOrProcessName();
    int v22 = (char *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    double v198 = v22;
    _os_log_impl(&dword_24FE56000, v21, OS_LOG_TYPE_DEBUG, "collection not enabled for this process (%@)", buf, 0xCu);
  }
  int v24 = v187;
  uint64_t v23 = v188;
  v25 = v17;
  int v26 = v186;
  if (v187)
  {
    if (v19)
    {
      uint64_t v27 = v19;
    }
    else
    {
      uint64_t v27 = dispatch_get_global_queue(21, 0);
    }
    double v43 = v27;
    dispatch_async(v27, v187);
LABEL_3169:
  }
}

+ (void)captureStandardShortWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v1519 = *MEMORY[0x263EF8340];
  id v15 = a5;
  unint64_t v16 = (unint64_t)a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v1518 = "+[GEOAPPortal(UserActionCodeGen) captureStandardShortWithAction:target:value:moduleType:moduleMetadata:richP"
            "roviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      v1469 = v21;
      id v1470 = v20;
      id v1498 = v18;
      id v1475 = v15;
      unint64_t v1501 = (unint64_t)v17;
      id v1471 = v19;
      if ([v19 count])
      {
        unint64_t v25 = v16;
        int v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v1512 = 0u;
        long long v1513 = 0u;
        long long v1514 = 0u;
        long long v1515 = 0u;
        id v27 = v19;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v1512 objects:v1516 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v1513;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v1513 != v30) {
                objc_enumerationMutation(v27);
              }
              uint64_t v32 = *(void **)(*((void *)&v1512 + 1) + 8 * i);
              uint64_t v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v1512 objects:v1516 count:16];
          }
          while (v29);
        }

        int v34 = (void *)[v26 copy];
        id v15 = v1475;
        unint64_t v16 = v25;
      }
      else
      {
        int v34 = 0;
      }
      id v35 = NSNumber;
      int v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      uint64_t v38 = [v34 objectForKeyedSubscript:v37];
      uint64_t v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        unint64_t v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      unint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      char v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v46 = v45;

      uint64_t v47 = NSNumber;
      unint64_t v48 = +[GEOAPStateFactory sharedFactory];
      uint64_t v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 5));

      uint64_t v50 = [v34 objectForKeyedSubscript:v49];
      uint64_t v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:5];
      }
      char v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v34 objectForKeyedSubscript:v54];
      char v56 = (void *)v55;
      if (v55) {
        uint64_t v57 = (void *)v55;
      }
      else {
        uint64_t v57 = v52;
      }
      id v1497 = v57;

      uint64_t v58 = NSNumber;
      unint64_t v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      uint64_t v61 = [v34 objectForKeyedSubscript:v60];
      char v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        char v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:16];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v34 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        uint64_t v68 = (void *)v66;
      }
      else {
        uint64_t v68 = v63;
      }
      id v1496 = v68;

      unint64_t v69 = NSNumber;
      char v70 = +[GEOAPStateFactory sharedFactory];
      unint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 35));

      unint64_t v72 = [v34 objectForKeyedSubscript:v71];
      uint64_t v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        char v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:35];
      }
      char v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v34 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        uint64_t v79 = (void *)v77;
      }
      else {
        uint64_t v79 = v74;
      }
      id v1495 = v79;

      char v80 = NSNumber;
      uint64_t v81 = +[GEOAPStateFactory sharedFactory];
      uint64_t v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 30));

      uint64_t v83 = [v34 objectForKeyedSubscript:v82];
      uint64_t v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        uint64_t v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:30];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v34 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        uint64_t v90 = (void *)v88;
      }
      else {
        uint64_t v90 = v85;
      }
      id v1494 = v90;

      uint64_t v91 = NSNumber;
      char v92 = +[GEOAPStateFactory sharedFactory];
      uint64_t v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 0));

      uint64_t v94 = [v34 objectForKeyedSubscript:v93];
      uint64_t v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        char v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:0];
      }
      unint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v34 objectForKeyedSubscript:v98];
      unsigned __int16 v100 = (void *)v99;
      if (v99) {
        uint64_t v101 = (void *)v99;
      }
      else {
        uint64_t v101 = v96;
      }
      id v1493 = v101;

      uint64_t v102 = NSNumber;
      char v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 3));

      char v105 = [v34 objectForKeyedSubscript:v104];
      uint64_t v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        uint64_t v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:3];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v34 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        uint64_t v112 = (void *)v110;
      }
      else {
        uint64_t v112 = v107;
      }
      id v1492 = v112;

      uint64_t v113 = NSNumber;
      char v114 = +[GEOAPStateFactory sharedFactory];
      unint64_t v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 64));

      uint64_t v116 = [v34 objectForKeyedSubscript:v115];
      char v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        char v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:64];
      }
      uint64_t v120 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v121 = [v34 objectForKeyedSubscript:v120];
      unint64_t v122 = (void *)v121;
      if (v121) {
        uint64_t v123 = (void *)v121;
      }
      else {
        uint64_t v123 = v118;
      }
      id v1491 = v123;

      uint64_t v124 = NSNumber;
      uint64_t v125 = +[GEOAPStateFactory sharedFactory];
      uint64_t v126 = objc_msgSend(v124, "numberWithInt:", objc_msgSend(v125, "logMsgStateTypeForType:", 13));

      uint64_t v127 = [v34 objectForKeyedSubscript:v126];
      char v128 = v127;
      if (v127)
      {
        id v129 = v127;
      }
      else
      {
        uint64_t v130 = +[GEOAPStateFactory sharedFactory];
        id v129 = [v130 stateForType:13];
      }
      uint64_t v131 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v129, "stateType"));
      uint64_t v132 = [v34 objectForKeyedSubscript:v131];
      uint64_t v133 = (void *)v132;
      if (v132) {
        char v134 = (void *)v132;
      }
      else {
        char v134 = v129;
      }
      id v1490 = v134;

      uint64_t v135 = NSNumber;
      uint64_t v136 = +[GEOAPStateFactory sharedFactory];
      uint64_t v137 = objc_msgSend(v135, "numberWithInt:", objc_msgSend(v136, "logMsgStateTypeForType:", 14));

      uint64_t v138 = [v34 objectForKeyedSubscript:v137];
      uint64_t v139 = v138;
      if (v138)
      {
        id v140 = v138;
      }
      else
      {
        uint64_t v141 = +[GEOAPStateFactory sharedFactory];
        id v140 = [v141 stateForType:14];
      }
      uint64_t v142 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v140, "stateType"));
      uint64_t v143 = [v34 objectForKeyedSubscript:v142];
      unint64_t v144 = (void *)v143;
      if (v143) {
        unint64_t v145 = (void *)v143;
      }
      else {
        unint64_t v145 = v140;
      }
      id v1489 = v145;

      uint64_t v146 = NSNumber;
      unint64_t v147 = +[GEOAPStateFactory sharedFactory];
      uint64_t v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 9));

      uint64_t v149 = [v34 objectForKeyedSubscript:v148];
      uint64_t v150 = v149;
      if (v149)
      {
        id v151 = v149;
      }
      else
      {
        uint64_t v152 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v152 stateForType:9];
      }
      unint64_t v153 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v151, "stateType"));
      uint64_t v154 = [v34 objectForKeyedSubscript:v153];
      unint64_t v155 = (void *)v154;
      if (v154) {
        uint64_t v156 = (void *)v154;
      }
      else {
        uint64_t v156 = v151;
      }
      id v1488 = v156;

      int v157 = NSNumber;
      double v158 = +[GEOAPStateFactory sharedFactory];
      uint64_t v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 10));

      uint64_t v160 = [v34 objectForKeyedSubscript:v159];
      uint64_t v161 = v160;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        double v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:10];
      }
      double v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v34 objectForKeyedSubscript:v164];
      double v166 = (void *)v165;
      if (v165) {
        double v167 = (void *)v165;
      }
      else {
        double v167 = v162;
      }
      id v1487 = v167;

      double v168 = NSNumber;
      double v169 = +[GEOAPStateFactory sharedFactory];
      uint64_t v170 = objc_msgSend(v168, "numberWithInt:", objc_msgSend(v169, "logMsgStateTypeForType:", 20));

      double v171 = [v34 objectForKeyedSubscript:v170];
      double v172 = v171;
      if (v171)
      {
        id v173 = v171;
      }
      else
      {
        int v174 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v174 stateForType:20];
      }
      double v175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v173, "stateType"));
      uint64_t v176 = [v34 objectForKeyedSubscript:v175];
      id v177 = (void *)v176;
      if (v176) {
        double v178 = (void *)v176;
      }
      else {
        double v178 = v173;
      }
      id v1486 = v178;

      double v179 = NSNumber;
      double v180 = +[GEOAPStateFactory sharedFactory];
      uint64_t v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 42));

      double v182 = [v34 objectForKeyedSubscript:v181];
      double v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        id v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:42];
      }
      id v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v34 objectForKeyedSubscript:v186];
      id v188 = (void *)v187;
      if (v187) {
        double v189 = (void *)v187;
      }
      else {
        double v189 = v184;
      }
      id v1485 = v189;

      int v190 = NSNumber;
      int v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      long long v193 = [v34 objectForKeyedSubscript:v192];
      long long v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        double v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      double v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      __int16 v199 = (void *)v198;
      if (v198) {
        double v200 = (void *)v198;
      }
      else {
        double v200 = v195;
      }
      id v1484 = v200;

      uint64_t v201 = NSNumber;
      double v202 = +[GEOAPStateFactory sharedFactory];
      double v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      double v204 = [v34 objectForKeyedSubscript:v203];
      double v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        double v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      double v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      double v210 = (void *)v209;
      if (v209) {
        double v211 = (void *)v209;
      }
      else {
        double v211 = v206;
      }
      id v1483 = v211;

      double v212 = NSNumber;
      double v213 = +[GEOAPStateFactory sharedFactory];
      double v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      double v215 = [v34 objectForKeyedSubscript:v214];
      double v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        double v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      double v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      double v221 = (void *)v220;
      if (v220) {
        double v222 = (void *)v220;
      }
      else {
        double v222 = v217;
      }
      id v1482 = v222;

      double v223 = NSNumber;
      double v224 = +[GEOAPStateFactory sharedFactory];
      double v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 19));

      double v226 = [v34 objectForKeyedSubscript:v225];
      double v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        double v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:19];
      }
      double v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      double v232 = (void *)v231;
      if (v231) {
        double v233 = (void *)v231;
      }
      else {
        double v233 = v228;
      }
      id v1481 = v233;

      double v234 = NSNumber;
      double v235 = +[GEOAPStateFactory sharedFactory];
      double v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 63));

      double v237 = [v34 objectForKeyedSubscript:v236];
      double v238 = v237;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        double v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:63];
      }
      double v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v34 objectForKeyedSubscript:v241];
      double v243 = (void *)v242;
      if (v242) {
        double v244 = (void *)v242;
      }
      else {
        double v244 = v239;
      }
      id v1480 = v244;

      double v245 = NSNumber;
      double v246 = +[GEOAPStateFactory sharedFactory];
      double v247 = objc_msgSend(v245, "numberWithInt:", objc_msgSend(v246, "logMsgStateTypeForType:", 27));

      double v248 = [v34 objectForKeyedSubscript:v247];
      double v249 = v248;
      if (v248)
      {
        id v250 = v248;
      }
      else
      {
        double v251 = +[GEOAPStateFactory sharedFactory];
        id v250 = [v251 stateForType:27];
      }
      double v252 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v250, "stateType"));
      uint64_t v253 = [v34 objectForKeyedSubscript:v252];
      double v254 = (void *)v253;
      if (v253) {
        double v255 = (void *)v253;
      }
      else {
        double v255 = v250;
      }
      id v1479 = v255;

      id v256 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v256 setEventType:1];
      id v257 = objc_alloc_init(MEMORY[0x263F41958]);
      [v256 setUserActionEvent:v257];

      double v258 = [v256 userActionEvent];
      [v258 setUserActionEventAction:a3];

      double v259 = [v256 userActionEvent];
      [v259 setUserActionEventTarget:a4];

      double v260 = [v256 userActionEvent];
      [v260 setUserActionEventValue:v15];

      double v261 = [v256 userActionEvent];
      [v261 setActionRichProviderId:v1498];

      v1507 = v256;
      if (v16 | v1501)
      {
        id v262 = objc_alloc_init(MEMORY[0x263F41960]);
        double v263 = [v256 userActionEvent];
        [v263 setModuleInfo:v262];

        if (v16)
        {
          uint64_t v264 = [(id)v16 intValue];
          uint64_t v265 = [v256 userActionEvent];
          int v266 = [v265 moduleInfo];
          [v266 setType:v264];
        }
        if (v1501)
        {
          v267 = [v256 userActionEvent];
          uint64_t v268 = [v267 moduleInfo];
          [v268 setModuleMetadata:v1501];
        }
      }
      if (v46) {
        [v256 addLogMsgState:v46];
      }
      if (v1497) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1496) {
        [v256 addLogMsgState:v1496];
      }
      if (v1495) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1494) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1493) {
        [v256 addLogMsgState:v1493];
      }
      if (v1492) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1491) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1490) {
        [v256 addLogMsgState:v1490];
      }
      if (v1489) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1488) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1487) {
        [v256 addLogMsgState:v1487];
      }
      if (v1486) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1485) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1483) {
        [v256 addLogMsgState:v1483];
      }
      if (v1482) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1481) {
        objc_msgSend(v256, "addLogMsgState:");
      }
      if (v1479) {
        [v256 addLogMsgState:v1479];
      }
      if (v1480) {
        [v256 addLogMsgState:v1480];
      }
      if (v1484) {
        [v256 addLogMsgState:v1484];
      }
      v1468 = v46;
      unint64_t v1472 = v16;
      if (a3 == 6016 && a4 == 201)
      {
        id v269 = NSNumber;
        id v270 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v269, "numberWithInt:", objc_msgSend(v270, "logMsgStateTypeForType:", 68));

        v272 = [v34 objectForKeyedSubscript:v271];
        v273 = v272;
        if (v272)
        {
          id v274 = v272;
        }
        else
        {
          v280 = +[GEOAPStateFactory sharedFactory];
          id v274 = [v280 stateForType:68];
        }
        v281 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v274, "stateType"));
        uint64_t v282 = [v34 objectForKeyedSubscript:v281];
        id v283 = (void *)v282;
        if (v282) {
          v284 = (void *)v282;
        }
        else {
          v284 = v274;
        }
        id v285 = v284;

        BOOL v286 = 0;
        BOOL v287 = 0;
        if (v285)
        {
          BOOL v1478 = 0;
          BOOL v1504 = 0;
          LODWORD(v1465) = 0;
          BOOL v1466 = 0;
          BOOL v1502 = 0;
LABEL_204:
          HIDWORD(v1465) = 0;
LABEL_205:
          int v293 = a3;
          [v256 addLogMsgState:v285];
LABEL_209:

          double v247 = (void *)v271;
          goto LABEL_210;
        }
        BOOL v1478 = 0;
        BOOL v1504 = 0;
        LODWORD(v1465) = 0;
        BOOL v1466 = 0;
        BOOL v1502 = 0;
LABEL_207:
        HIDWORD(v1465) = 0;
        goto LABEL_208;
      }
      BOOL v1502 = a4 == 30;
      if (a3 == 6016 && a4 == 30 || a3 == 6009 && a4 == 30)
      {
        id v275 = NSNumber;
        v276 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v275, "numberWithInt:", objc_msgSend(v276, "logMsgStateTypeForType:", 68));

        uint64_t v277 = [v34 objectForKeyedSubscript:v271];
        v278 = v277;
        if (v277)
        {
          id v279 = v277;
        }
        else
        {
          v288 = +[GEOAPStateFactory sharedFactory];
          id v279 = [v288 stateForType:68];
        }
        id v289 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v279, "stateType"));
        uint64_t v290 = [v34 objectForKeyedSubscript:v289];
        unint64_t v291 = (void *)v290;
        if (v290) {
          id v292 = (void *)v290;
        }
        else {
          id v292 = v279;
        }
        id v285 = v292;

        BOOL v286 = 0;
        BOOL v1502 = 1;
        BOOL v287 = 0;
        if (v285)
        {
          BOOL v1478 = 0;
          BOOL v1504 = 0;
          LODWORD(v1465) = 0;
          BOOL v1466 = 0;
          goto LABEL_204;
        }
        BOOL v1478 = 0;
        BOOL v1504 = 0;
        LODWORD(v1465) = 0;
        BOOL v1466 = 0;
        goto LABEL_207;
      }
      if (a3 == 6045 && a4 == 201)
      {
        id v316 = NSNumber;
        id v317 = +[GEOAPStateFactory sharedFactory];
        uint64_t v297 = objc_msgSend(v316, "numberWithInt:", objc_msgSend(v317, "logMsgStateTypeForType:", 68));

        long long v318 = [v34 objectForKeyedSubscript:v297];
        long long v319 = v318;
        if (v318)
        {
          id v320 = v318;
        }
        else
        {
          v450 = +[GEOAPStateFactory sharedFactory];
          id v320 = [v450 stateForType:68];
        }
        v451 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v320, "stateType"));
        uint64_t v452 = [v34 objectForKeyedSubscript:v451];
        v453 = (void *)v452;
        if (v452) {
          v454 = (void *)v452;
        }
        else {
          v454 = v320;
        }
        id v306 = v454;

        uint64_t v1465 = 0;
        BOOL v1466 = 0;
        BOOL v1504 = 0;
        BOOL v1478 = 0;
        BOOL v286 = 0;
        int v307 = 0;
        BOOL v294 = 0;
        goto LABEL_219;
      }
      if (a3 == 6045 && a4 == 30)
      {
        v424 = NSNumber;
        v425 = +[GEOAPStateFactory sharedFactory];
        uint64_t v297 = objc_msgSend(v424, "numberWithInt:", objc_msgSend(v425, "logMsgStateTypeForType:", 68));

        v426 = [v34 objectForKeyedSubscript:v297];
        v427 = v426;
        if (v426)
        {
          id v428 = v426;
        }
        else
        {
          v460 = +[GEOAPStateFactory sharedFactory];
          id v428 = [v460 stateForType:68];
        }
        v461 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v428, "stateType"));
        uint64_t v462 = [v34 objectForKeyedSubscript:v461];
        v463 = (void *)v462;
        if (v462) {
          v464 = (void *)v462;
        }
        else {
          v464 = v428;
        }
        id v306 = v464;

        uint64_t v1465 = 0;
        BOOL v1466 = 0;
        BOOL v1504 = 0;
        BOOL v1478 = 0;
        BOOL v286 = 0;
        int v307 = 0;
        BOOL v294 = 0;
        BOOL v1502 = 1;
        goto LABEL_219;
      }
      if (a3 == 6003 && a4 == 650)
      {
        v440 = NSNumber;
        v441 = +[GEOAPStateFactory sharedFactory];
        uint64_t v396 = objc_msgSend(v440, "numberWithInt:", objc_msgSend(v441, "logMsgStateTypeForType:", 68));

        v442 = [v34 objectForKeyedSubscript:v396];
        v443 = v442;
        if (v442)
        {
          id v444 = v442;
        }
        else
        {
          v475 = +[GEOAPStateFactory sharedFactory];
          id v444 = [v475 stateForType:68];
        }
        v476 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v444, "stateType"));
        uint64_t v477 = [v34 objectForKeyedSubscript:v476];
        v478 = (void *)v477;
        if (v477) {
          v479 = (void *)v477;
        }
        else {
          v479 = v444;
        }
        id v439 = v479;

        BOOL v1504 = 0;
        if (v439)
        {
          HIDWORD(v1465) = 0;
          BOOL v1466 = 0;
LABEL_408:
          LODWORD(v1465) = 0;
LABEL_409:
          BOOL v1478 = 0;
          BOOL v1503 = 0;
          goto LABEL_410;
        }
        HIDWORD(v1465) = 0;
        BOOL v1466 = 0;
        goto LABEL_411;
      }
      if (a3 == 6003 && a4 == 607)
      {
        v455 = NSNumber;
        v456 = +[GEOAPStateFactory sharedFactory];
        uint64_t v396 = objc_msgSend(v455, "numberWithInt:", objc_msgSend(v456, "logMsgStateTypeForType:", 68));

        v457 = [v34 objectForKeyedSubscript:v396];
        v458 = v457;
        if (v457)
        {
          id v459 = v457;
        }
        else
        {
          v485 = +[GEOAPStateFactory sharedFactory];
          id v459 = [v485 stateForType:68];
        }
        v486 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v459, "stateType"));
        uint64_t v487 = [v34 objectForKeyedSubscript:v486];
        v488 = (void *)v487;
        if (v487) {
          v489 = (void *)v487;
        }
        else {
          v489 = v459;
        }
        id v439 = v489;

        BOOL v1466 = 1;
        BOOL v1504 = 0;
        if (v439)
        {
          HIDWORD(v1465) = 0;
          goto LABEL_408;
        }
        HIDWORD(v1465) = 0;
        goto LABEL_411;
      }
      BOOL v1466 = a4 == 607;
      if (a3 == 6003 && a4 == 701)
      {
        v470 = NSNumber;
        v471 = +[GEOAPStateFactory sharedFactory];
        uint64_t v396 = objc_msgSend(v470, "numberWithInt:", objc_msgSend(v471, "logMsgStateTypeForType:", 68));

        v472 = [v34 objectForKeyedSubscript:v396];
        v473 = v472;
        if (v472)
        {
          id v474 = v472;
        }
        else
        {
          v495 = +[GEOAPStateFactory sharedFactory];
          id v474 = [v495 stateForType:68];
        }
        v496 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v474, "stateType"));
        uint64_t v497 = [v34 objectForKeyedSubscript:v496];
        v498 = (void *)v497;
        if (v497) {
          v499 = (void *)v497;
        }
        else {
          v499 = v474;
        }
        id v439 = v499;

        HIDWORD(v1465) = 1;
        BOOL v1504 = 0;
        if (v439) {
          goto LABEL_408;
        }
LABEL_411:
        LODWORD(v1465) = 0;
        goto LABEL_412;
      }
      HIDWORD(v1465) = a4 == 701;
      if (a3 == 6003 && a4 == 802)
      {
        v480 = NSNumber;
        v481 = +[GEOAPStateFactory sharedFactory];
        uint64_t v396 = objc_msgSend(v480, "numberWithInt:", objc_msgSend(v481, "logMsgStateTypeForType:", 68));

        v482 = [v34 objectForKeyedSubscript:v396];
        v483 = v482;
        if (v482)
        {
          id v484 = v482;
        }
        else
        {
          v1376 = +[GEOAPStateFactory sharedFactory];
          id v484 = [v1376 stateForType:68];
        }
        v1377 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v484, "stateType"));
        uint64_t v1378 = [v34 objectForKeyedSubscript:v1377];
        v1379 = (void *)v1378;
        if (v1378) {
          v1380 = (void *)v1378;
        }
        else {
          v1380 = v484;
        }
        id v439 = v1380;

        LODWORD(v1465) = 1;
        BOOL v1504 = 0;
        if (v439) {
          goto LABEL_409;
        }
LABEL_412:
        BOOL v1478 = 0;
        BOOL v1503 = 0;
        goto LABEL_413;
      }
      LODWORD(v1465) = a4 == 802;
      if (a3 == 6003 && a4 == 803)
      {
        v490 = NSNumber;
        v491 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v490, "numberWithInt:", objc_msgSend(v491, "logMsgStateTypeForType:", 68));

        v492 = [v34 objectForKeyedSubscript:v271];
        v493 = v492;
        if (v492)
        {
          id v494 = v492;
        }
        else
        {
          v1401 = +[GEOAPStateFactory sharedFactory];
          id v494 = [v1401 stateForType:68];
        }
        v1402 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v494, "stateType"));
        uint64_t v1403 = [v34 objectForKeyedSubscript:v1402];
        v1404 = (void *)v1403;
        if (v1403) {
          v1405 = (void *)v1403;
        }
        else {
          v1405 = v494;
        }
        id v285 = v1405;

        BOOL v286 = 0;
        BOOL v287 = 0;
        if (v285)
        {
          BOOL v1478 = 0;
LABEL_1265:
          BOOL v1504 = 0;
          goto LABEL_205;
        }
        BOOL v1478 = 0;
      }
      else
      {
        BOOL v1478 = a4 == 702;
        if (a3 != 6003 || a4 != 702)
        {
          BOOL v1504 = a4 == 0;
          if (a3 != 6003 || a4)
          {
            BOOL v287 = a4 == 1;
            if (a3 == 291 && a4 == 1)
            {
              v1421 = NSNumber;
              v1422 = +[GEOAPStateFactory sharedFactory];
              uint64_t v271 = objc_msgSend(v1421, "numberWithInt:", objc_msgSend(v1422, "logMsgStateTypeForType:", 68));

              v1423 = [v34 objectForKeyedSubscript:v271];
              v1424 = v1423;
              if (v1423)
              {
                id v1425 = v1423;
              }
              else
              {
                v1443 = +[GEOAPStateFactory sharedFactory];
                id v1425 = [v1443 stateForType:68];
              }
              v1444 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1425, "stateType"));
              uint64_t v1445 = [v34 objectForKeyedSubscript:v1444];
              v1446 = (void *)v1445;
              if (v1445) {
                v1447 = (void *)v1445;
              }
              else {
                v1447 = v1425;
              }
              id v285 = v1447;

              BOOL v286 = 0;
              BOOL v287 = 1;
              if (v285) {
                goto LABEL_1265;
              }
              goto LABEL_1281;
            }
            BOOL v1431 = a3 == 17073;
            if (a3 == 17073 && a4 == 1)
            {
              v1432 = NSNumber;
              v1433 = +[GEOAPStateFactory sharedFactory];
              uint64_t v1434 = objc_msgSend(v1432, "numberWithInt:", objc_msgSend(v1433, "logMsgStateTypeForType:", 68));

              v1435 = [v34 objectForKeyedSubscript:v1434];
              v1436 = v1435;
              if (v1435)
              {
                id v1437 = v1435;
              }
              else
              {
                v1448 = +[GEOAPStateFactory sharedFactory];
                id v1437 = [v1448 stateForType:68];
              }
              v1449 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1437, "stateType"));
              uint64_t v1450 = [v34 objectForKeyedSubscript:v1449];
              v1451 = (void *)v1450;
              if (v1450) {
                v1452 = (void *)v1450;
              }
              else {
                v1452 = v1437;
              }
              id v1453 = v1452;

              if (v1453) {
                [v256 addLogMsgState:v1453];
              }

              BOOL v1504 = 0;
              BOOL v1431 = 1;
              BOOL v287 = 1;
              double v247 = (void *)v1434;
            }
            BOOL v286 = a4 == 2;
            if (a4 != 2 || !v1431)
            {
              int v293 = a3;
LABEL_210:
              BOOL v294 = v293 == 17074;
              if (v293 != 17074 || !v287)
              {
LABEL_222:
                if (v286 && v294) {
                  goto LABEL_242;
                }
                BOOL v308 = v293 == 17076;
                if (v293 == 17076 && v287)
                {
                  unint64_t v310 = NSNumber;
                  v311 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v312 = objc_msgSend(v310, "numberWithInt:", objc_msgSend(v311, "logMsgStateTypeForType:", 68));

                  id v313 = [v34 objectForKeyedSubscript:v312];
                  v314 = v313;
                  if (v313)
                  {
                    id v315 = v313;
                  }
                  else
                  {
                    long long v321 = +[GEOAPStateFactory sharedFactory];
                    id v315 = [v321 stateForType:68];
                  }
                  v322 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v315, "stateType"));
                  uint64_t v323 = [v34 objectForKeyedSubscript:v322];
                  v324 = (void *)v323;
                  if (v323) {
                    uint64_t v325 = (void *)v323;
                  }
                  else {
                    uint64_t v325 = v315;
                  }
                  id v326 = v325;

                  if (v326) {
                    [v1507 addLogMsgState:v326];
                  }

                  BOOL v308 = 1;
                  double v247 = (void *)v312;
                  int v293 = a3;
                }
                if (v286 && v308)
                {
LABEL_242:
                  v327 = NSNumber;
                  v328 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v329 = objc_msgSend(v327, "numberWithInt:", objc_msgSend(v328, "logMsgStateTypeForType:", 68));

                  v330 = [v34 objectForKeyedSubscript:v329];
                  v331 = v330;
                  if (v330)
                  {
                    id v332 = v330;
                  }
                  else
                  {
                    v333 = +[GEOAPStateFactory sharedFactory];
                    id v332 = [v333 stateForType:68];
                  }
                  v334 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v332, "stateType"));
                  uint64_t v335 = [v34 objectForKeyedSubscript:v334];
                  v336 = (void *)v335;
                  if (v335) {
                    v337 = (void *)v335;
                  }
                  else {
                    v337 = v332;
                  }
                  id v338 = v337;

                  int v293 = a3;
                  if (v338) {
                    [v1507 addLogMsgState:v338];
                  }

                  double v247 = (void *)v329;
                }
                char v339 = !v287;
                if (v293 != 17079) {
                  char v339 = 1;
                }
                if (v339)
                {
                  unint64_t v341 = 0x265344000;
                }
                else
                {
                  v340 = NSNumber;
                  unint64_t v341 = 0x265344000uLL;
                  v342 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v343 = objc_msgSend(v340, "numberWithInt:", objc_msgSend(v342, "logMsgStateTypeForType:", 68));

                  v344 = [v34 objectForKeyedSubscript:v343];
                  v345 = v344;
                  if (v344)
                  {
                    id v346 = v344;
                  }
                  else
                  {
                    v347 = +[GEOAPStateFactory sharedFactory];
                    id v346 = [v347 stateForType:68];
                  }
                  v348 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v346, "stateType"));
                  uint64_t v349 = [v34 objectForKeyedSubscript:v348];
                  v350 = (void *)v349;
                  if (v349) {
                    v351 = (void *)v349;
                  }
                  else {
                    v351 = v346;
                  }
                  id v352 = v351;

                  if (v352) {
                    [v1507 addLogMsgState:v352];
                  }

                  double v247 = (void *)v343;
                  int v293 = a3;
                }
                char v353 = !v286;
                if (v293 != 17079) {
                  char v353 = 1;
                }
                if ((v353 & 1) == 0 || v293 == 6023 && a4 == 201 || v293 == 6020 && a4 == 201)
                {
                  v354 = NSNumber;
                  v355 = [*(id *)(v341 + 3384) sharedFactory];
                  uint64_t v356 = objc_msgSend(v354, "numberWithInt:", objc_msgSend(v355, "logMsgStateTypeForType:", 68));

                  v357 = [v34 objectForKeyedSubscript:v356];
                  v358 = v357;
                  if (v357)
                  {
                    id v359 = v357;
                  }
                  else
                  {
                    v360 = [*(id *)(v341 + 3384) sharedFactory];
                    id v359 = [v360 stateForType:68];
                  }
                  int v361 = a4;

                  v362 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v359, "stateType"));
                  uint64_t v363 = [v34 objectForKeyedSubscript:v362];
                  v364 = (void *)v363;
                  if (v363) {
                    v365 = (void *)v363;
                  }
                  else {
                    v365 = v359;
                  }
                  id v366 = v365;

                  if (!v366)
                  {
                    int v293 = a3;
                    goto LABEL_281;
                  }
                  int v293 = a3;
LABEL_279:
                  [v1507 addLogMsgState:v366];
LABEL_281:

                  BOOL v1503 = v361 == 101;
                  double v247 = (void *)v356;
LABEL_282:
                  BOOL v367 = v293 == 6048;
                  if (v293 == 6048 && a4 == 201)
                  {
                    v368 = NSNumber;
                    v369 = +[GEOAPStateFactory sharedFactory];
                    uint64_t v370 = objc_msgSend(v368, "numberWithInt:", objc_msgSend(v369, "logMsgStateTypeForType:", 68));

                    v371 = [v34 objectForKeyedSubscript:v370];
                    v372 = v371;
                    if (v371)
                    {
                      id v373 = v371;
                    }
                    else
                    {
                      v374 = +[GEOAPStateFactory sharedFactory];
                      id v373 = [v374 stateForType:68];
                    }
                    v375 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v373, "stateType"));
                    uint64_t v376 = [v34 objectForKeyedSubscript:v375];
                    v377 = (void *)v376;
                    if (v376) {
                      v378 = (void *)v376;
                    }
                    else {
                      v378 = v373;
                    }
                    id v379 = v378;

                    if (v379) {
                      [v1507 addLogMsgState:v379];
                    }

                    BOOL v367 = 1;
                    double v247 = (void *)v370;
                    int v293 = a3;
                  }
                  if (v1503 && v367)
                  {
                    v380 = NSNumber;
                    v381 = +[GEOAPStateFactory sharedFactory];
                    uint64_t v382 = objc_msgSend(v380, "numberWithInt:", objc_msgSend(v381, "logMsgStateTypeForType:", 68));

                    v383 = [v34 objectForKeyedSubscript:v382];
                    v384 = v383;
                    if (v383)
                    {
                      id v385 = v383;
                    }
                    else
                    {
                      v386 = +[GEOAPStateFactory sharedFactory];
                      id v385 = [v386 stateForType:68];
                    }
                    v387 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v385, "stateType"));
                    uint64_t v388 = [v34 objectForKeyedSubscript:v387];
                    v389 = (void *)v388;
                    if (v388) {
                      v390 = (void *)v388;
                    }
                    else {
                      v390 = v385;
                    }
                    id v391 = v390;

                    if (v391) {
                      [v1507 addLogMsgState:v391];
                    }

                    double v247 = (void *)v382;
                    int v293 = a3;
                  }
                  BOOL v392 = a4 == 1209;
                  if (a4 != 1209 || !v367)
                  {
                    BOOL v400 = v293 == 6049;
                    if (v293 == 6049 && a4 == 201)
                    {
                      v401 = NSNumber;
                      v402 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v403 = objc_msgSend(v401, "numberWithInt:", objc_msgSend(v402, "logMsgStateTypeForType:", 68));

                      v404 = [v34 objectForKeyedSubscript:v403];
                      v405 = v404;
                      if (v404)
                      {
                        id v406 = v404;
                      }
                      else
                      {
                        v418 = +[GEOAPStateFactory sharedFactory];
                        id v406 = [v418 stateForType:68];
                      }
                      v419 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v406, "stateType"));
                      uint64_t v420 = [v34 objectForKeyedSubscript:v419];
                      v421 = (void *)v420;
                      if (v420) {
                        v422 = (void *)v420;
                      }
                      else {
                        v422 = v406;
                      }
                      id v423 = v422;

                      if (v423) {
                        [v1507 addLogMsgState:v423];
                      }

                      BOOL v400 = 1;
                      double v247 = (void *)v403;
                      int v293 = a3;
                    }
LABEL_416:
                    if (v1503 && v400)
                    {
                      v500 = NSNumber;
                      v501 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v502 = objc_msgSend(v500, "numberWithInt:", objc_msgSend(v501, "logMsgStateTypeForType:", 68));

                      v503 = [v34 objectForKeyedSubscript:v502];
                      v504 = v503;
                      if (v503)
                      {
                        id v505 = v503;
                      }
                      else
                      {
                        v506 = +[GEOAPStateFactory sharedFactory];
                        id v505 = [v506 stateForType:68];
                      }
                      v507 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v505, "stateType"));
                      uint64_t v508 = [v34 objectForKeyedSubscript:v507];
                      v509 = (void *)v508;
                      if (v508) {
                        v510 = (void *)v508;
                      }
                      else {
                        v510 = v505;
                      }
                      id v511 = v510;

                      if (v511) {
                        [v1507 addLogMsgState:v511];
                      }

                      double v247 = (void *)v502;
                      int v293 = a3;
                    }
                    if (v392 && v400)
                    {
                      v512 = NSNumber;
                      v513 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v514 = objc_msgSend(v512, "numberWithInt:", objc_msgSend(v513, "logMsgStateTypeForType:", 68));

                      v515 = [v34 objectForKeyedSubscript:v514];
                      v516 = v515;
                      int v517 = a4;
                      if (v515)
                      {
                        id v518 = v515;
                      }
                      else
                      {
                        v526 = +[GEOAPStateFactory sharedFactory];
                        id v518 = [v526 stateForType:68];
                      }
                      v527 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v518, "stateType"));
                      uint64_t v528 = [v34 objectForKeyedSubscript:v527];
                      v529 = (void *)v528;
                      if (v528) {
                        v530 = (void *)v528;
                      }
                      else {
                        v530 = v518;
                      }
                      id v531 = v530;

                      if (v531) {
                        [v1507 addLogMsgState:v531];
                      }

                      int v293 = a3;
                      BOOL v519 = a3 == 6013;
                      double v247 = (void *)v514;
                    }
                    else
                    {
                      BOOL v519 = v293 == 6013;
                      int v517 = a4;
                      if (v293 == 6013 && a4 == 201)
                      {
                        v520 = NSNumber;
                        v521 = +[GEOAPStateFactory sharedFactory];
                        uint64_t v522 = objc_msgSend(v520, "numberWithInt:", objc_msgSend(v521, "logMsgStateTypeForType:", 68));

                        v523 = [v34 objectForKeyedSubscript:v522];
                        v524 = v523;
                        if (v523)
                        {
                          id v525 = v523;
                        }
                        else
                        {
                          v532 = +[GEOAPStateFactory sharedFactory];
                          id v525 = [v532 stateForType:68];
                        }
                        v533 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v525, "stateType"));
                        uint64_t v534 = [v34 objectForKeyedSubscript:v533];
                        v535 = (void *)v534;
                        if (v534) {
                          v536 = (void *)v534;
                        }
                        else {
                          v536 = v525;
                        }
                        id v537 = v536;

                        if (v537) {
                          [v1507 addLogMsgState:v537];
                        }

                        BOOL v519 = 1;
                        double v247 = (void *)v522;
                        int v293 = a3;
                      }
                    }
                    if (v1502 && v519)
                    {
                      v538 = NSNumber;
                      v539 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v540 = objc_msgSend(v538, "numberWithInt:", objc_msgSend(v539, "logMsgStateTypeForType:", 68));

                      v541 = [v34 objectForKeyedSubscript:v540];
                      v542 = v541;
                      if (v541)
                      {
                        id v543 = v541;
                      }
                      else
                      {
                        v544 = +[GEOAPStateFactory sharedFactory];
                        id v543 = [v544 stateForType:68];
                      }
                      v545 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v543, "stateType"));
                      uint64_t v546 = [v34 objectForKeyedSubscript:v545];
                      v547 = (void *)v546;
                      if (v546) {
                        v548 = (void *)v546;
                      }
                      else {
                        v548 = v543;
                      }
                      id v549 = v548;

                      if (v549) {
                        [v1507 addLogMsgState:v549];
                      }

                      double v247 = (void *)v540;
                      int v293 = a3;
                    }
                    if (v293 == 2037 && v517 == 8) {
                      goto LABEL_463;
                    }
                    char v550 = !v1503;
                    if (v293 != 2008) {
                      char v550 = 1;
                    }
                    if ((v550 & 1) == 0)
                    {
LABEL_463:
                      v551 = NSNumber;
                      v552 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v553 = objc_msgSend(v551, "numberWithInt:", objc_msgSend(v552, "logMsgStateTypeForType:", 68));

                      v554 = [v34 objectForKeyedSubscript:v553];
                      v555 = v554;
                      if (v554)
                      {
                        id v556 = v554;
                      }
                      else
                      {
                        v557 = +[GEOAPStateFactory sharedFactory];
                        id v556 = [v557 stateForType:68];
                      }
                      v558 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v556, "stateType"));
                      uint64_t v559 = [v34 objectForKeyedSubscript:v558];
                      v560 = (void *)v559;
                      if (v559) {
                        v561 = (void *)v559;
                      }
                      else {
                        v561 = v556;
                      }
                      id v562 = v561;

                      int v293 = a3;
                      if (v562) {
                        [v1507 addLogMsgState:v562];
                      }

                      BOOL v563 = 0;
                      int v564 = a4;
                      BOOL v1464 = a4 == 1005;
                      BOOL v1467 = a4 == 1001;
                      BOOL v1473 = a4 == 1007;
                      goto LABEL_472;
                    }
                    if (v293 == 6012 && v517 == 201)
                    {
                      v578 = NSNumber;
                      v579 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v580 = objc_msgSend(v578, "numberWithInt:", objc_msgSend(v579, "logMsgStateTypeForType:", 68));

                      v581 = [v34 objectForKeyedSubscript:v580];
                      v582 = v581;
                      if (v581)
                      {
                        id v583 = v581;
                      }
                      else
                      {
                        v642 = +[GEOAPStateFactory sharedFactory];
                        id v583 = [v642 stateForType:68];
                      }
                      v643 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v583, "stateType"));
                      uint64_t v644 = [v34 objectForKeyedSubscript:v643];
                      v645 = (void *)v644;
                      if (v644) {
                        v646 = (void *)v644;
                      }
                      else {
                        v646 = v583;
                      }
                      id v647 = v646;

                      BOOL v1476 = 0;
                      BOOL v648 = 0;
                      if (v647)
                      {
                        BOOL v1473 = 0;
                        BOOL v1474 = 0;
                        BOOL v1464 = 0;
                        BOOL v1467 = 0;
                        int v293 = a3;
LABEL_674:
                        [v1507 addLogMsgState:v647];
                        goto LABEL_675;
                      }
                      BOOL v1473 = 0;
                      BOOL v1474 = 0;
                      BOOL v1464 = 0;
                      BOOL v1467 = 0;
                      int v293 = a3;
LABEL_675:

                      BOOL v1499 = v648;
                      double v247 = (void *)v580;
                      goto LABEL_676;
                    }
                    BOOL v563 = v293 == 2015;
                    if (v293 == 2015 && v517 == 1005)
                    {
                      v608 = NSNumber;
                      v609 = +[GEOAPStateFactory sharedFactory];
                      v610 = objc_msgSend(v608, "numberWithInt:", objc_msgSend(v609, "logMsgStateTypeForType:", 59));

                      v611 = [v34 objectForKeyedSubscript:v610];
                      v612 = v611;
                      if (v611)
                      {
                        id v613 = v611;
                      }
                      else
                      {
                        v670 = +[GEOAPStateFactory sharedFactory];
                        id v613 = [v670 stateForType:59];
                      }
                      v671 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v613, "stateType"));
                      uint64_t v672 = [v34 objectForKeyedSubscript:v671];
                      v673 = (void *)v672;
                      if (v672) {
                        v674 = (void *)v672;
                      }
                      else {
                        v674 = v613;
                      }
                      id v596 = v674;

                      if (v596) {
                        [v1507 addLogMsgState:v596];
                      }
                      v675 = NSNumber;
                      v676 = +[GEOAPStateFactory sharedFactory];
                      double v247 = objc_msgSend(v675, "numberWithInt:", objc_msgSend(v676, "logMsgStateTypeForType:", 54));

                      v677 = [v34 objectForKeyedSubscript:v247];
                      v678 = v677;
                      if (v677)
                      {
                        id v679 = v677;
                      }
                      else
                      {
                        v680 = +[GEOAPStateFactory sharedFactory];
                        id v679 = [v680 stateForType:54];
                      }
                      v681 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v679, "stateType"));
                      uint64_t v682 = [v34 objectForKeyedSubscript:v681];
                      v683 = (void *)v682;
                      if (v682) {
                        v684 = (void *)v682;
                      }
                      else {
                        v684 = v679;
                      }
                      id v607 = v684;

                      BOOL v1464 = 1;
                      BOOL v1476 = 0;
                      if (v607)
                      {
                        BOOL v1499 = 0;
                        BOOL v1473 = 0;
                        BOOL v1467 = 0;
LABEL_573:
                        BOOL v1474 = 0;
                        goto LABEL_589;
                      }
                      BOOL v1499 = 0;
                      BOOL v1473 = 0;
                      BOOL v1467 = 0;
                      goto LABEL_575;
                    }
                    BOOL v1464 = v517 == 1005;
                    if (v293 == 2015 && a4 == 1002)
                    {
                      v636 = NSNumber;
                      v637 = +[GEOAPStateFactory sharedFactory];
                      v638 = objc_msgSend(v636, "numberWithInt:", objc_msgSend(v637, "logMsgStateTypeForType:", 59));

                      v639 = [v34 objectForKeyedSubscript:v638];
                      v640 = v639;
                      if (v639)
                      {
                        id v641 = v639;
                      }
                      else
                      {
                        v706 = +[GEOAPStateFactory sharedFactory];
                        id v641 = [v706 stateForType:59];
                      }
                      v707 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v641, "stateType"));
                      uint64_t v708 = [v34 objectForKeyedSubscript:v707];
                      v709 = (void *)v708;
                      if (v708) {
                        v710 = (void *)v708;
                      }
                      else {
                        v710 = v641;
                      }
                      id v596 = v710;

                      if (v596) {
                        [v1507 addLogMsgState:v596];
                      }
                      v711 = NSNumber;
                      v712 = +[GEOAPStateFactory sharedFactory];
                      double v247 = objc_msgSend(v711, "numberWithInt:", objc_msgSend(v712, "logMsgStateTypeForType:", 54));

                      v713 = [v34 objectForKeyedSubscript:v247];
                      v714 = v713;
                      if (v713)
                      {
                        id v715 = v713;
                      }
                      else
                      {
                        v716 = +[GEOAPStateFactory sharedFactory];
                        id v715 = [v716 stateForType:54];
                      }
                      v717 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v715, "stateType"));
                      uint64_t v718 = [v34 objectForKeyedSubscript:v717];
                      v719 = (void *)v718;
                      if (v718) {
                        v720 = (void *)v718;
                      }
                      else {
                        v720 = v715;
                      }
                      id v607 = v720;

                      BOOL v1476 = 0;
                      if (!v607)
                      {
                        BOOL v1499 = 0;
                        BOOL v1473 = 0;
                        BOOL v1467 = 0;
                        goto LABEL_609;
                      }
                      BOOL v1499 = 0;
                      BOOL v1473 = 0;
                      BOOL v1467 = 0;
                      goto LABEL_506;
                    }
                    if (v293 == 2015 && a4 == 1023)
                    {
                      v664 = NSNumber;
                      v665 = +[GEOAPStateFactory sharedFactory];
                      v666 = objc_msgSend(v664, "numberWithInt:", objc_msgSend(v665, "logMsgStateTypeForType:", 59));

                      v667 = [v34 objectForKeyedSubscript:v666];
                      v668 = v667;
                      if (v667)
                      {
                        id v669 = v667;
                      }
                      else
                      {
                        v1293 = +[GEOAPStateFactory sharedFactory];
                        id v669 = [v1293 stateForType:59];
                      }
                      v1294 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v669, "stateType"));
                      uint64_t v1295 = [v34 objectForKeyedSubscript:v1294];
                      v1296 = (void *)v1295;
                      if (v1295) {
                        v1297 = (void *)v1295;
                      }
                      else {
                        v1297 = v669;
                      }
                      id v1298 = v1297;

                      if (v1298) {
                        [v1507 addLogMsgState:v1298];
                      }
                      v1299 = NSNumber;
                      v1300 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v553 = objc_msgSend(v1299, "numberWithInt:", objc_msgSend(v1300, "logMsgStateTypeForType:", 54));

                      v1301 = [v34 objectForKeyedSubscript:v553];
                      v1302 = v1301;
                      if (v1301)
                      {
                        id v1303 = v1301;
                      }
                      else
                      {
                        v1310 = +[GEOAPStateFactory sharedFactory];
                        id v1303 = [v1310 stateForType:54];
                      }
                      v1311 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1303, "stateType"));
                      uint64_t v1312 = [v34 objectForKeyedSubscript:v1311];
                      v1313 = (void *)v1312;
                      if (v1312) {
                        v1314 = (void *)v1312;
                      }
                      else {
                        v1314 = v1303;
                      }
                      id v1315 = v1314;

                      if (v1315) {
                        [v1507 addLogMsgState:v1315];
                      }

                      BOOL v1467 = 0;
                      BOOL v1473 = 0;
                    }
                    else
                    {
                      if (v293 != 2015 || a4 != 1001)
                      {
                        BOOL v1467 = a4 == 1001;
                        BOOL v1473 = a4 == 1007;
                        if (v293 == 2015 && a4 == 1007)
                        {
                          v1287 = NSNumber;
                          v1288 = +[GEOAPStateFactory sharedFactory];
                          v1289 = objc_msgSend(v1287, "numberWithInt:", objc_msgSend(v1288, "logMsgStateTypeForType:", 59));

                          v1290 = [v34 objectForKeyedSubscript:v1289];
                          v1291 = v1290;
                          if (v1290)
                          {
                            id v1292 = v1290;
                          }
                          else
                          {
                            v1351 = +[GEOAPStateFactory sharedFactory];
                            id v1292 = [v1351 stateForType:59];
                          }
                          v1352 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1292, "stateType"));
                          uint64_t v1353 = [v34 objectForKeyedSubscript:v1352];
                          v1354 = (void *)v1353;
                          if (v1353) {
                            v1355 = (void *)v1353;
                          }
                          else {
                            v1355 = v1292;
                          }
                          id v596 = v1355;

                          if (v596) {
                            [v1507 addLogMsgState:v596];
                          }
                          v1356 = NSNumber;
                          v1357 = +[GEOAPStateFactory sharedFactory];
                          double v247 = objc_msgSend(v1356, "numberWithInt:", objc_msgSend(v1357, "logMsgStateTypeForType:", 54));

                          v1358 = [v34 objectForKeyedSubscript:v247];
                          v1359 = v1358;
                          if (v1358)
                          {
                            id v1360 = v1358;
                          }
                          else
                          {
                            v1361 = +[GEOAPStateFactory sharedFactory];
                            id v1360 = [v1361 stateForType:54];
                          }
                          v1362 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1360, "stateType"));
                          uint64_t v1363 = [v34 objectForKeyedSubscript:v1362];
                          v1364 = (void *)v1363;
                          if (v1363) {
                            v1365 = (void *)v1363;
                          }
                          else {
                            v1365 = v1360;
                          }
                          id v607 = v1365;

                          BOOL v1473 = 1;
                          BOOL v1476 = 0;
                          if (v607)
                          {
                            BOOL v1499 = 0;
                            goto LABEL_573;
                          }
                          BOOL v1499 = 0;
LABEL_575:
                          BOOL v1474 = 0;
                          goto LABEL_610;
                        }
                        if (v293 != 2015 || a4 != 1010)
                        {
                          int v564 = a4;
                          BOOL v1499 = a4 == 1009;
                          if (v293 == 2015)
                          {
                            if (a4 == 1009)
                            {
                              v1345 = NSNumber;
                              v1346 = +[GEOAPStateFactory sharedFactory];
                              v1347 = objc_msgSend(v1345, "numberWithInt:", objc_msgSend(v1346, "logMsgStateTypeForType:", 59));

                              v1348 = [v34 objectForKeyedSubscript:v1347];
                              v1349 = v1348;
                              if (v1348)
                              {
                                id v1350 = v1348;
                              }
                              else
                              {
                                v1406 = +[GEOAPStateFactory sharedFactory];
                                id v1350 = [v1406 stateForType:59];
                              }
                              v1407 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1350, "stateType"));
                              uint64_t v1408 = [v34 objectForKeyedSubscript:v1407];
                              v1409 = (void *)v1408;
                              if (v1408) {
                                v1410 = (void *)v1408;
                              }
                              else {
                                v1410 = v1350;
                              }
                              id v596 = v1410;

                              if (v596) {
                                [v1507 addLogMsgState:v596];
                              }
                              v1411 = NSNumber;
                              v1412 = +[GEOAPStateFactory sharedFactory];
                              double v247 = objc_msgSend(v1411, "numberWithInt:", objc_msgSend(v1412, "logMsgStateTypeForType:", 54));

                              v1413 = [v34 objectForKeyedSubscript:v247];
                              v1414 = v1413;
                              if (v1413)
                              {
                                id v1415 = v1413;
                              }
                              else
                              {
                                v1416 = +[GEOAPStateFactory sharedFactory];
                                id v1415 = [v1416 stateForType:54];
                              }
                              v1417 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1415, "stateType"));
                              uint64_t v1418 = [v34 objectForKeyedSubscript:v1417];
                              v1419 = (void *)v1418;
                              if (v1418) {
                                v1420 = (void *)v1418;
                              }
                              else {
                                v1420 = v1415;
                              }
                              id v607 = v1420;

                              BOOL v1499 = 1;
                              BOOL v1476 = 0;
                              if (v607) {
                                goto LABEL_573;
                              }
                              goto LABEL_575;
                            }
                            int v564 = a4;
                          }
LABEL_473:
                          if (v564 == 1019 && v563)
                          {
                            v565 = NSNumber;
                            v566 = +[GEOAPStateFactory sharedFactory];
                            v567 = objc_msgSend(v565, "numberWithInt:", objc_msgSend(v566, "logMsgStateTypeForType:", 59));

                            v568 = [v34 objectForKeyedSubscript:v567];
                            v569 = v568;
                            if (v568)
                            {
                              id v570 = v568;
                            }
                            else
                            {
                              v591 = +[GEOAPStateFactory sharedFactory];
                              id v570 = [v591 stateForType:59];
                            }
                            v592 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v570, "stateType"));
                            uint64_t v593 = [v34 objectForKeyedSubscript:v592];
                            v594 = (void *)v593;
                            if (v593) {
                              v595 = (void *)v593;
                            }
                            else {
                              v595 = v570;
                            }
                            id v596 = v595;

                            if (v596) {
                              [v1507 addLogMsgState:v596];
                            }
                            v597 = NSNumber;
                            v598 = +[GEOAPStateFactory sharedFactory];
                            double v247 = objc_msgSend(v597, "numberWithInt:", objc_msgSend(v598, "logMsgStateTypeForType:", 54));

                            v599 = [v34 objectForKeyedSubscript:v247];
                            v600 = v599;
                            if (v599)
                            {
                              id v601 = v599;
                            }
                            else
                            {
                              v602 = +[GEOAPStateFactory sharedFactory];
                              id v601 = [v602 stateForType:54];
                            }
                            v603 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v601, "stateType"));
                            uint64_t v604 = [v34 objectForKeyedSubscript:v603];
                            v605 = (void *)v604;
                            if (v604) {
                              v606 = (void *)v604;
                            }
                            else {
                              v606 = v601;
                            }
                            id v607 = v606;

                            BOOL v1476 = 0;
                            if (v607) {
                              goto LABEL_506;
                            }
LABEL_609:
                            BOOL v1474 = 0;
                            goto LABEL_610;
                          }
                          BOOL v1476 = a4 == 104;
                          if (a4 == 104 && v563)
                          {
                            v572 = NSNumber;
                            v573 = +[GEOAPStateFactory sharedFactory];
                            v574 = objc_msgSend(v572, "numberWithInt:", objc_msgSend(v573, "logMsgStateTypeForType:", 59));

                            v575 = [v34 objectForKeyedSubscript:v574];
                            v576 = v575;
                            if (v575)
                            {
                              id v577 = v575;
                            }
                            else
                            {
                              v621 = +[GEOAPStateFactory sharedFactory];
                              id v577 = [v621 stateForType:59];
                            }
                            v622 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v577, "stateType"));
                            uint64_t v623 = [v34 objectForKeyedSubscript:v622];
                            v624 = (void *)v623;
                            if (v623) {
                              v625 = (void *)v623;
                            }
                            else {
                              v625 = v577;
                            }
                            id v596 = v625;

                            if (v596) {
                              [v1507 addLogMsgState:v596];
                            }
                            v626 = NSNumber;
                            v627 = +[GEOAPStateFactory sharedFactory];
                            double v247 = objc_msgSend(v626, "numberWithInt:", objc_msgSend(v627, "logMsgStateTypeForType:", 54));

                            v628 = [v34 objectForKeyedSubscript:v247];
                            v629 = v628;
                            if (v628)
                            {
                              id v630 = v628;
                            }
                            else
                            {
                              v631 = +[GEOAPStateFactory sharedFactory];
                              id v630 = [v631 stateForType:54];
                            }
                            v632 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v630, "stateType"));
                            uint64_t v633 = [v34 objectForKeyedSubscript:v632];
                            v634 = (void *)v633;
                            if (v633) {
                              v635 = (void *)v633;
                            }
                            else {
                              v635 = v630;
                            }
                            id v607 = v635;

                            BOOL v1474 = 0;
                            BOOL v1476 = 1;
                            if (!v607) {
                              goto LABEL_610;
                            }
                            goto LABEL_589;
                          }
                          BOOL v1474 = a4 == 58;
                          if (a4 == 58 && v563)
                          {
                            v585 = NSNumber;
                            v586 = +[GEOAPStateFactory sharedFactory];
                            v587 = objc_msgSend(v585, "numberWithInt:", objc_msgSend(v586, "logMsgStateTypeForType:", 59));

                            v588 = [v34 objectForKeyedSubscript:v587];
                            v589 = v588;
                            if (v588)
                            {
                              id v590 = v588;
                            }
                            else
                            {
                              v649 = +[GEOAPStateFactory sharedFactory];
                              id v590 = [v649 stateForType:59];
                            }
                            v650 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v590, "stateType"));
                            uint64_t v651 = [v34 objectForKeyedSubscript:v650];
                            v652 = (void *)v651;
                            if (v651) {
                              v653 = (void *)v651;
                            }
                            else {
                              v653 = v590;
                            }
                            id v596 = v653;

                            if (v596) {
                              [v1507 addLogMsgState:v596];
                            }
                            v654 = NSNumber;
                            v655 = +[GEOAPStateFactory sharedFactory];
                            double v247 = objc_msgSend(v654, "numberWithInt:", objc_msgSend(v655, "logMsgStateTypeForType:", 54));

                            v656 = [v34 objectForKeyedSubscript:v247];
                            v657 = v656;
                            if (v656)
                            {
                              id v658 = v656;
                            }
                            else
                            {
                              v659 = +[GEOAPStateFactory sharedFactory];
                              id v658 = [v659 stateForType:54];
                            }
                            v660 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v658, "stateType"));
                            uint64_t v661 = [v34 objectForKeyedSubscript:v660];
                            v662 = (void *)v661;
                            if (v661) {
                              v663 = (void *)v661;
                            }
                            else {
                              v663 = v658;
                            }
                            id v607 = v663;

                            BOOL v1474 = 1;
                            if (!v607) {
                              goto LABEL_610;
                            }
                            goto LABEL_589;
                          }
                          char v614 = !v563;
                          if (a4 != 72) {
                            char v614 = 1;
                          }
                          if (v614)
                          {
LABEL_611:
                            if (v1478 && v563)
                            {
                              v721 = NSNumber;
                              v722 = +[GEOAPStateFactory sharedFactory];
                              v723 = objc_msgSend(v721, "numberWithInt:", objc_msgSend(v722, "logMsgStateTypeForType:", 59));

                              v724 = [v34 objectForKeyedSubscript:v723];
                              v725 = v724;
                              if (v724)
                              {
                                id v726 = v724;
                              }
                              else
                              {
                                v727 = +[GEOAPStateFactory sharedFactory];
                                id v726 = [v727 stateForType:59];
                              }
                              v728 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v726, "stateType"));
                              uint64_t v729 = [v34 objectForKeyedSubscript:v728];
                              v730 = (void *)v729;
                              if (v729) {
                                v731 = (void *)v729;
                              }
                              else {
                                v731 = v726;
                              }
                              id v732 = v731;

                              if (v732) {
                                [v1507 addLogMsgState:v732];
                              }
                              v733 = NSNumber;
                              v734 = +[GEOAPStateFactory sharedFactory];
                              double v247 = objc_msgSend(v733, "numberWithInt:", objc_msgSend(v734, "logMsgStateTypeForType:", 54));

                              v735 = [v34 objectForKeyedSubscript:v247];
                              v736 = v735;
                              if (v735)
                              {
                                id v737 = v735;
                              }
                              else
                              {
                                v738 = +[GEOAPStateFactory sharedFactory];
                                id v737 = [v738 stateForType:54];
                              }
                              v739 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v737, "stateType"));
                              uint64_t v740 = [v34 objectForKeyedSubscript:v739];
                              v741 = (void *)v740;
                              if (v740) {
                                v742 = (void *)v740;
                              }
                              else {
                                v742 = v737;
                              }
                              id v743 = v742;

                              if (v743) {
                                [v1507 addLogMsgState:v743];
                              }

                              int v293 = a3;
                            }
                            if (v1504 && v563)
                            {
                              v744 = NSNumber;
                              v745 = +[GEOAPStateFactory sharedFactory];
                              v746 = objc_msgSend(v744, "numberWithInt:", objc_msgSend(v745, "logMsgStateTypeForType:", 59));

                              v747 = [v34 objectForKeyedSubscript:v746];
                              v748 = v747;
                              if (v747)
                              {
                                id v749 = v747;
                              }
                              else
                              {
                                v750 = +[GEOAPStateFactory sharedFactory];
                                id v749 = [v750 stateForType:59];
                              }
                              v751 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v749, "stateType"));
                              uint64_t v752 = [v34 objectForKeyedSubscript:v751];
                              v753 = (void *)v752;
                              if (v752) {
                                v754 = (void *)v752;
                              }
                              else {
                                v754 = v749;
                              }
                              id v755 = v754;

                              if (v755) {
                                [v1507 addLogMsgState:v755];
                              }
                              v756 = NSNumber;
                              v757 = +[GEOAPStateFactory sharedFactory];
                              double v247 = objc_msgSend(v756, "numberWithInt:", objc_msgSend(v757, "logMsgStateTypeForType:", 54));

                              v758 = [v34 objectForKeyedSubscript:v247];
                              v759 = v758;
                              if (v758)
                              {
                                id v760 = v758;
                              }
                              else
                              {
                                v761 = +[GEOAPStateFactory sharedFactory];
                                id v760 = [v761 stateForType:54];
                              }
                              v762 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v760, "stateType"));
                              uint64_t v763 = [v34 objectForKeyedSubscript:v762];
                              v764 = (void *)v763;
                              if (v763) {
                                v765 = (void *)v763;
                              }
                              else {
                                v765 = v760;
                              }
                              id v766 = v765;

                              if (v766) {
                                [v1507 addLogMsgState:v766];
                              }

                              int v293 = a3;
                            }
                            char v767 = !v563;
                            char v768 = a4 != 99 || !v563;
                            if ((v768 & 1) == 0) {
                              goto LABEL_654;
                            }
                            if (a4 != 1207) {
                              char v767 = 1;
                            }
                            if ((v767 & 1) == 0)
                            {
LABEL_654:
                              v769 = NSNumber;
                              v770 = +[GEOAPStateFactory sharedFactory];
                              uint64_t v771 = objc_msgSend(v769, "numberWithInt:", objc_msgSend(v770, "logMsgStateTypeForType:", 54));

                              v772 = [v34 objectForKeyedSubscript:v771];
                              v773 = v772;
                              if (v772)
                              {
                                id v774 = v772;
                              }
                              else
                              {
                                v775 = +[GEOAPStateFactory sharedFactory];
                                id v774 = [v775 stateForType:54];
                              }
                              v776 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v774, "stateType"));
                              uint64_t v777 = [v34 objectForKeyedSubscript:v776];
                              v778 = (void *)v777;
                              if (v777) {
                                v779 = (void *)v777;
                              }
                              else {
                                v779 = v774;
                              }
                              id v780 = v779;

                              if (v780) {
                                [v1507 addLogMsgState:v780];
                              }

                              double v247 = (void *)v771;
                            }
                            BOOL v648 = v293 == 3001;
                            if (v293 != 3001 || !v1499)
                            {
LABEL_676:
                              if (a4 == 201 && v648)
                              {
                                v792 = NSNumber;
                                v793 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v794 = objc_msgSend(v792, "numberWithInt:", objc_msgSend(v793, "logMsgStateTypeForType:", 68));

                                v795 = [v34 objectForKeyedSubscript:v794];
                                v796 = v795;
                                if (v795)
                                {
                                  id v797 = v795;
                                }
                                else
                                {
                                  v798 = +[GEOAPStateFactory sharedFactory];
                                  id v797 = [v798 stateForType:68];
                                }
                                v799 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v797, "stateType"));
                                uint64_t v800 = [v34 objectForKeyedSubscript:v799];
                                v801 = (void *)v800;
                                if (v800) {
                                  v802 = (void *)v800;
                                }
                                else {
                                  v802 = v797;
                                }
                                id v803 = v802;

                                if (v803) {
                                  [v1507 addLogMsgState:v803];
                                }

                                double v247 = (void *)v794;
                              }
                              if ((v1465 & v648) == 1) {
                                goto LABEL_710;
                              }
                              BOOL v804 = v293 == 6097;
                              if (v293 == 6097 && a4 == 201)
                              {
                                v805 = NSNumber;
                                v806 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v807 = objc_msgSend(v805, "numberWithInt:", objc_msgSend(v806, "logMsgStateTypeForType:", 68));

                                v808 = [v34 objectForKeyedSubscript:v807];
                                v809 = v808;
                                if (v808)
                                {
                                  id v810 = v808;
                                }
                                else
                                {
                                  v811 = +[GEOAPStateFactory sharedFactory];
                                  id v810 = [v811 stateForType:68];
                                }
                                v812 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v810, "stateType"));
                                uint64_t v813 = [v34 objectForKeyedSubscript:v812];
                                v814 = (void *)v813;
                                if (v813) {
                                  v815 = (void *)v813;
                                }
                                else {
                                  v815 = v810;
                                }
                                id v816 = v815;

                                if (v816) {
                                  [v1507 addLogMsgState:v816];
                                }

                                BOOL v804 = 1;
                                double v247 = (void *)v807;
                              }
                              if (v1476 && v804)
                              {
                                v817 = NSNumber;
                                v818 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v819 = objc_msgSend(v817, "numberWithInt:", objc_msgSend(v818, "logMsgStateTypeForType:", 68));

                                v820 = [v34 objectForKeyedSubscript:v819];
                                v821 = v820;
                                if (v820)
                                {
                                  id v822 = v820;
                                }
                                else
                                {
                                  v823 = +[GEOAPStateFactory sharedFactory];
                                  id v822 = [v823 stateForType:68];
                                }
                                v824 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v822, "stateType"));
                                uint64_t v825 = [v34 objectForKeyedSubscript:v824];
                                v826 = (void *)v825;
                                if (v825) {
                                  v827 = (void *)v825;
                                }
                                else {
                                  v827 = v822;
                                }
                                id v828 = v827;

                                if (v828) {
                                  [v1507 addLogMsgState:v828];
                                }

                                double v247 = (void *)v819;
                              }
                              if (v1474 && v804)
                              {
LABEL_710:
                                v829 = NSNumber;
                                v830 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v831 = objc_msgSend(v829, "numberWithInt:", objc_msgSend(v830, "logMsgStateTypeForType:", 68));

                                v832 = [v34 objectForKeyedSubscript:v831];
                                v833 = v832;
                                if (v832)
                                {
                                  id v834 = v832;
                                }
                                else
                                {
                                  v835 = +[GEOAPStateFactory sharedFactory];
                                  id v834 = [v835 stateForType:68];
                                }
                                v836 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v834, "stateType"));
                                uint64_t v837 = [v34 objectForKeyedSubscript:v836];
                                v838 = (void *)v837;
                                if (v837) {
                                  v839 = (void *)v837;
                                }
                                else {
                                  v839 = v834;
                                }
                                id v840 = v839;

                                if (v840) {
                                  [v1507 addLogMsgState:v840];
                                }

                                double v247 = (void *)v831;
                              }
                              BOOL v841 = v293 == 198 && v1503;
                              if (v841)
                              {
                                v842 = NSNumber;
                                v843 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v844 = objc_msgSend(v842, "numberWithInt:", objc_msgSend(v843, "logMsgStateTypeForType:", 68));

                                v845 = [v34 objectForKeyedSubscript:v844];
                                v846 = v845;
                                if (v845)
                                {
                                  id v847 = v845;
                                }
                                else
                                {
                                  v855 = +[GEOAPStateFactory sharedFactory];
                                  id v847 = [v855 stateForType:68];
                                }
                                v856 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v847, "stateType"));
                                uint64_t v857 = [v34 objectForKeyedSubscript:v856];
                                v858 = (void *)v857;
                                if (v857) {
                                  v859 = (void *)v857;
                                }
                                else {
                                  v859 = v847;
                                }
                                id v860 = v859;

                                if (!v860)
                                {
                                  int v861 = 0;
LABEL_764:

                                  double v247 = (void *)v844;
                                  goto LABEL_765;
                                }
                              }
                              else
                              {
                                BOOL v848 = v293 == 6004;
                                if (v293 == 6004 && a4 == 201)
                                {
                                  v849 = NSNumber;
                                  v850 = +[GEOAPStateFactory sharedFactory];
                                  uint64_t v851 = objc_msgSend(v849, "numberWithInt:", objc_msgSend(v850, "logMsgStateTypeForType:", 68));

                                  v852 = [v34 objectForKeyedSubscript:v851];
                                  v853 = v852;
                                  if (v852)
                                  {
                                    id v854 = v852;
                                  }
                                  else
                                  {
                                    v862 = +[GEOAPStateFactory sharedFactory];
                                    id v854 = [v862 stateForType:68];
                                  }
                                  v863 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v854, "stateType"));
                                  uint64_t v864 = [v34 objectForKeyedSubscript:v863];
                                  v865 = (void *)v864;
                                  if (v864) {
                                    v866 = (void *)v864;
                                  }
                                  else {
                                    v866 = v854;
                                  }
                                  id v867 = v866;

                                  if (v867) {
                                    [v1507 addLogMsgState:v867];
                                  }

                                  BOOL v848 = 1;
                                  double v247 = (void *)v851;
                                }
                                if (v1502 && v848)
                                {
                                  v868 = NSNumber;
                                  v869 = +[GEOAPStateFactory sharedFactory];
                                  uint64_t v870 = objc_msgSend(v868, "numberWithInt:", objc_msgSend(v869, "logMsgStateTypeForType:", 68));

                                  v871 = [v34 objectForKeyedSubscript:v870];
                                  v872 = v871;
                                  if (v871)
                                  {
                                    id v873 = v871;
                                  }
                                  else
                                  {
                                    v874 = +[GEOAPStateFactory sharedFactory];
                                    id v873 = [v874 stateForType:68];
                                  }
                                  v875 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v873, "stateType"));
                                  uint64_t v876 = [v34 objectForKeyedSubscript:v875];
                                  v877 = (void *)v876;
                                  if (v876) {
                                    v878 = (void *)v876;
                                  }
                                  else {
                                    v878 = v873;
                                  }
                                  id v879 = v878;

                                  if (v879) {
                                    [v1507 addLogMsgState:v879];
                                  }

                                  double v247 = (void *)v870;
                                }
                                BOOL v880 = v293 == 2007;
                                int v861 = v293 == 2007;
                                if (!v880 || !v1464)
                                {
LABEL_765:
                                  if ((v1467 & v861) == 1)
                                  {
                                    v892 = NSNumber;
                                    v893 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v894 = objc_msgSend(v892, "numberWithInt:", objc_msgSend(v893, "logMsgStateTypeForType:", 68));

                                    v895 = [v34 objectForKeyedSubscript:v894];
                                    v896 = v895;
                                    if (v895)
                                    {
                                      id v897 = v895;
                                    }
                                    else
                                    {
                                      v898 = +[GEOAPStateFactory sharedFactory];
                                      id v897 = [v898 stateForType:68];
                                    }
                                    v899 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v897, "stateType"));
                                    uint64_t v900 = [v34 objectForKeyedSubscript:v899];
                                    v901 = (void *)v900;
                                    if (v900) {
                                      v902 = (void *)v900;
                                    }
                                    else {
                                      v902 = v897;
                                    }
                                    id v903 = v902;

                                    if (v903) {
                                      [v1507 addLogMsgState:v903];
                                    }

                                    double v247 = (void *)v894;
                                  }
                                  char v904 = v861 ^ 1;
                                  if (a4 != 1006) {
                                    char v904 = 1;
                                  }
                                  if ((v904 & 1) == 0)
                                  {
                                    v905 = NSNumber;
                                    v906 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v907 = objc_msgSend(v905, "numberWithInt:", objc_msgSend(v906, "logMsgStateTypeForType:", 68));

                                    v908 = [v34 objectForKeyedSubscript:v907];
                                    v909 = v908;
                                    if (v908)
                                    {
                                      id v910 = v908;
                                    }
                                    else
                                    {
                                      v911 = +[GEOAPStateFactory sharedFactory];
                                      id v910 = [v911 stateForType:68];
                                    }
                                    v912 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v910, "stateType"));
                                    uint64_t v913 = [v34 objectForKeyedSubscript:v912];
                                    v914 = (void *)v913;
                                    if (v913) {
                                      v915 = (void *)v913;
                                    }
                                    else {
                                      v915 = v910;
                                    }
                                    id v916 = v915;

                                    if (v916) {
                                      [v1507 addLogMsgState:v916];
                                    }

                                    double v247 = (void *)v907;
                                  }
                                  if ((v1473 & v861) == 1)
                                  {
                                    v917 = NSNumber;
                                    v918 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v919 = objc_msgSend(v917, "numberWithInt:", objc_msgSend(v918, "logMsgStateTypeForType:", 68));

                                    v920 = [v34 objectForKeyedSubscript:v919];
                                    v921 = v920;
                                    if (v920)
                                    {
                                      id v922 = v920;
                                    }
                                    else
                                    {
                                      v923 = +[GEOAPStateFactory sharedFactory];
                                      id v922 = [v923 stateForType:68];
                                    }
                                    v924 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v922, "stateType"));
                                    uint64_t v925 = [v34 objectForKeyedSubscript:v924];
                                    v926 = (void *)v925;
                                    if (v925) {
                                      v927 = (void *)v925;
                                    }
                                    else {
                                      v927 = v922;
                                    }
                                    id v928 = v927;

                                    if (v928) {
                                      [v1507 addLogMsgState:v928];
                                    }

                                    double v247 = (void *)v919;
                                  }
                                  if ((v1499 & v861) == 1)
                                  {
                                    v929 = NSNumber;
                                    v930 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v931 = objc_msgSend(v929, "numberWithInt:", objc_msgSend(v930, "logMsgStateTypeForType:", 68));

                                    v932 = [v34 objectForKeyedSubscript:v931];
                                    v933 = v932;
                                    if (v932)
                                    {
                                      id v934 = v932;
                                    }
                                    else
                                    {
                                      v935 = +[GEOAPStateFactory sharedFactory];
                                      id v934 = [v935 stateForType:68];
                                    }
                                    v936 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v934, "stateType"));
                                    uint64_t v937 = [v34 objectForKeyedSubscript:v936];
                                    v938 = (void *)v937;
                                    if (v937) {
                                      v939 = (void *)v937;
                                    }
                                    else {
                                      v939 = v934;
                                    }
                                    id v940 = v939;

                                    if (v940) {
                                      [v1507 addLogMsgState:v940];
                                    }

                                    double v247 = (void *)v931;
                                  }
                                  char v941 = v861 ^ 1;
                                  if (a4 != 619) {
                                    char v941 = 1;
                                  }
                                  if ((v941 & 1) == 0)
                                  {
                                    v942 = NSNumber;
                                    v943 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v944 = objc_msgSend(v942, "numberWithInt:", objc_msgSend(v943, "logMsgStateTypeForType:", 68));

                                    v945 = [v34 objectForKeyedSubscript:v944];
                                    v946 = v945;
                                    if (v945)
                                    {
                                      id v947 = v945;
                                    }
                                    else
                                    {
                                      v948 = +[GEOAPStateFactory sharedFactory];
                                      id v947 = [v948 stateForType:68];
                                    }
                                    v949 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v947, "stateType"));
                                    uint64_t v950 = [v34 objectForKeyedSubscript:v949];
                                    v951 = (void *)v950;
                                    if (v950) {
                                      v952 = (void *)v950;
                                    }
                                    else {
                                      v952 = v947;
                                    }
                                    id v953 = v952;

                                    if (v953) {
                                      [v1507 addLogMsgState:v953];
                                    }

                                    double v247 = (void *)v944;
                                  }
                                  if ((v1476 & v861) == 1)
                                  {
                                    v954 = NSNumber;
                                    v955 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v956 = objc_msgSend(v954, "numberWithInt:", objc_msgSend(v955, "logMsgStateTypeForType:", 68));

                                    v957 = [v34 objectForKeyedSubscript:v956];
                                    v958 = v957;
                                    if (v957)
                                    {
                                      id v959 = v957;
                                    }
                                    else
                                    {
                                      v960 = +[GEOAPStateFactory sharedFactory];
                                      id v959 = [v960 stateForType:68];
                                    }
                                    v961 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v959, "stateType"));
                                    uint64_t v962 = [v34 objectForKeyedSubscript:v961];
                                    v963 = (void *)v962;
                                    if (v962) {
                                      v964 = (void *)v962;
                                    }
                                    else {
                                      v964 = v959;
                                    }
                                    id v965 = v964;

                                    if (v965) {
                                      [v1507 addLogMsgState:v965];
                                    }

                                    double v247 = (void *)v956;
                                  }
                                  if ((v1474 & v861) == 1)
                                  {
                                    v966 = NSNumber;
                                    v967 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v968 = objc_msgSend(v966, "numberWithInt:", objc_msgSend(v967, "logMsgStateTypeForType:", 68));

                                    v969 = [v34 objectForKeyedSubscript:v968];
                                    v970 = v969;
                                    if (v969)
                                    {
                                      id v971 = v969;
                                    }
                                    else
                                    {
                                      v972 = +[GEOAPStateFactory sharedFactory];
                                      id v971 = [v972 stateForType:68];
                                    }
                                    v973 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v971, "stateType"));
                                    uint64_t v974 = [v34 objectForKeyedSubscript:v973];
                                    v975 = (void *)v974;
                                    if (v974) {
                                      v976 = (void *)v974;
                                    }
                                    else {
                                      v976 = v971;
                                    }
                                    id v977 = v976;

                                    if (v977) {
                                      [v1507 addLogMsgState:v977];
                                    }

                                    double v247 = (void *)v968;
                                  }
                                  char v978 = v861 ^ 1;
                                  if (a4 != 106) {
                                    char v978 = 1;
                                  }
                                  if ((v978 & 1) == 0)
                                  {
                                    v979 = NSNumber;
                                    v980 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v981 = objc_msgSend(v979, "numberWithInt:", objc_msgSend(v980, "logMsgStateTypeForType:", 68));

                                    v982 = [v34 objectForKeyedSubscript:v981];
                                    v983 = v982;
                                    if (v982)
                                    {
                                      id v984 = v982;
                                    }
                                    else
                                    {
                                      v985 = +[GEOAPStateFactory sharedFactory];
                                      id v984 = [v985 stateForType:68];
                                    }
                                    v986 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v984, "stateType"));
                                    uint64_t v987 = [v34 objectForKeyedSubscript:v986];
                                    v988 = (void *)v987;
                                    if (v987) {
                                      v989 = (void *)v987;
                                    }
                                    else {
                                      v989 = v984;
                                    }
                                    id v990 = v989;

                                    if (v990) {
                                      [v1507 addLogMsgState:v990];
                                    }

                                    double v247 = (void *)v981;
                                  }
                                  if ((v1466 & v861) == 1)
                                  {
                                    v991 = NSNumber;
                                    v992 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v993 = objc_msgSend(v991, "numberWithInt:", objc_msgSend(v992, "logMsgStateTypeForType:", 68));

                                    v994 = [v34 objectForKeyedSubscript:v993];
                                    v995 = v994;
                                    if (v994)
                                    {
                                      id v996 = v994;
                                    }
                                    else
                                    {
                                      v997 = +[GEOAPStateFactory sharedFactory];
                                      id v996 = [v997 stateForType:68];
                                    }
                                    v998 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v996, "stateType"));
                                    uint64_t v999 = [v34 objectForKeyedSubscript:v998];
                                    v1000 = (void *)v999;
                                    if (v999) {
                                      v1001 = (void *)v999;
                                    }
                                    else {
                                      v1001 = v996;
                                    }
                                    id v1002 = v1001;

                                    if (v1002) {
                                      [v1507 addLogMsgState:v1002];
                                    }

                                    double v247 = (void *)v993;
                                  }
                                  if ((HIDWORD(v1465) & v861) == 1)
                                  {
                                    v1003 = NSNumber;
                                    v1004 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v1005 = objc_msgSend(v1003, "numberWithInt:", objc_msgSend(v1004, "logMsgStateTypeForType:", 68));

                                    v1006 = [v34 objectForKeyedSubscript:v1005];
                                    v1007 = v1006;
                                    if (v1006)
                                    {
                                      id v1008 = v1006;
                                    }
                                    else
                                    {
                                      v1009 = +[GEOAPStateFactory sharedFactory];
                                      id v1008 = [v1009 stateForType:68];
                                    }
                                    v1010 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1008, "stateType"));
                                    uint64_t v1011 = [v34 objectForKeyedSubscript:v1010];
                                    v1012 = (void *)v1011;
                                    if (v1011) {
                                      v1013 = (void *)v1011;
                                    }
                                    else {
                                      v1013 = v1008;
                                    }
                                    id v1014 = v1013;

                                    if (v1014) {
                                      [v1507 addLogMsgState:v1014];
                                    }

                                    double v247 = (void *)v1005;
                                  }
                                  char v1015 = v861 ^ 1;
                                  if (a4 != 59) {
                                    char v1015 = 1;
                                  }
                                  if ((v1015 & 1) == 0)
                                  {
                                    v1016 = NSNumber;
                                    v1017 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v1018 = objc_msgSend(v1016, "numberWithInt:", objc_msgSend(v1017, "logMsgStateTypeForType:", 68));

                                    v1019 = [v34 objectForKeyedSubscript:v1018];
                                    v1020 = v1019;
                                    if (v1019)
                                    {
                                      id v1021 = v1019;
                                    }
                                    else
                                    {
                                      v1022 = +[GEOAPStateFactory sharedFactory];
                                      id v1021 = [v1022 stateForType:68];
                                    }
                                    v1023 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1021, "stateType"));
                                    uint64_t v1024 = [v34 objectForKeyedSubscript:v1023];
                                    v1025 = (void *)v1024;
                                    if (v1024) {
                                      v1026 = (void *)v1024;
                                    }
                                    else {
                                      v1026 = v1021;
                                    }
                                    id v1027 = v1026;

                                    if (v1027) {
                                      [v1507 addLogMsgState:v1027];
                                    }

                                    double v247 = (void *)v1018;
                                  }
                                  if ((v1478 & v861) == 1)
                                  {
                                    v1028 = NSNumber;
                                    v1029 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v1030 = objc_msgSend(v1028, "numberWithInt:", objc_msgSend(v1029, "logMsgStateTypeForType:", 68));

                                    v1031 = [v34 objectForKeyedSubscript:v1030];
                                    v1032 = v1031;
                                    if (v1031)
                                    {
                                      id v1033 = v1031;
                                    }
                                    else
                                    {
                                      v1034 = +[GEOAPStateFactory sharedFactory];
                                      id v1033 = [v1034 stateForType:68];
                                    }
                                    v1035 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1033, "stateType"));
                                    uint64_t v1036 = [v34 objectForKeyedSubscript:v1035];
                                    v1037 = (void *)v1036;
                                    if (v1036) {
                                      v1038 = (void *)v1036;
                                    }
                                    else {
                                      v1038 = v1033;
                                    }
                                    id v1039 = v1038;

                                    if (v1039) {
                                      [v1507 addLogMsgState:v1039];
                                    }

                                    double v247 = (void *)v1030;
                                  }
                                  if ((v1504 & v861) == 1)
                                  {
                                    v1040 = NSNumber;
                                    v1041 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v1042 = objc_msgSend(v1040, "numberWithInt:", objc_msgSend(v1041, "logMsgStateTypeForType:", 68));

                                    v1043 = [v34 objectForKeyedSubscript:v1042];
                                    int v1044 = a3;
                                    if (v1043)
                                    {
LABEL_895:
                                      id v1045 = v1043;
LABEL_900:

                                      v1049 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1045, "stateType"));
                                      uint64_t v1050 = [v34 objectForKeyedSubscript:v1049];
                                      v1051 = (void *)v1050;
                                      if (v1050) {
                                        v1052 = (void *)v1050;
                                      }
                                      else {
                                        v1052 = v1045;
                                      }
                                      id v1053 = v1052;

                                      if (v1053) {
                                        [v1507 addLogMsgState:v1053];
                                      }

                                      BOOL v1054 = 0;
                                      BOOL v1500 = a4 == 505;
                                      HIDWORD(v1477) = a4 == 504;
                                      goto LABEL_906;
                                    }
                                  }
                                  else
                                  {
                                    int v1044 = a3;
                                    if (a3 != 6006 || a4 != 201)
                                    {
                                      BOOL v1500 = a4 == 505;
                                      BOOL v1054 = a3 == 1010;
                                      if (a3 == 1010 && a4 == 505)
                                      {
                                        v1061 = NSNumber;
                                        v1062 = +[GEOAPStateFactory sharedFactory];
                                        uint64_t v1042 = objc_msgSend(v1061, "numberWithInt:", objc_msgSend(v1062, "logMsgStateTypeForType:", 68));

                                        v1063 = [v34 objectForKeyedSubscript:v1042];
                                        v1064 = v1063;
                                        if (v1063)
                                        {
                                          id v1065 = v1063;
                                        }
                                        else
                                        {
                                          v1219 = +[GEOAPStateFactory sharedFactory];
                                          id v1065 = [v1219 stateForType:68];
                                        }
                                        v1220 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1065, "stateType"));
                                        uint64_t v1221 = [v34 objectForKeyedSubscript:v1220];
                                        v1222 = (void *)v1221;
                                        if (v1221) {
                                          v1223 = (void *)v1221;
                                        }
                                        else {
                                          v1223 = v1065;
                                        }
                                        id v1224 = v1223;

                                        if (v1224) {
                                          [v1507 addLogMsgState:v1224];
                                        }

                                        HIDWORD(v1477) = 0;
                                        BOOL v1054 = 1;
                                        BOOL v1500 = 1;
                                      }
                                      else
                                      {
                                        if (a3 != 1010 || a4 != 501)
                                        {
                                          if (a3 == 1010 && a4 == 503)
                                          {
                                            v1214 = NSNumber;
                                            v1215 = +[GEOAPStateFactory sharedFactory];
                                            uint64_t v1042 = objc_msgSend(v1214, "numberWithInt:", objc_msgSend(v1215, "logMsgStateTypeForType:", 68));

                                            v1216 = [v34 objectForKeyedSubscript:v1042];
                                            v1217 = v1216;
                                            if (v1216)
                                            {
                                              id v1218 = v1216;
                                            }
                                            else
                                            {
                                              v1281 = +[GEOAPStateFactory sharedFactory];
                                              id v1218 = [v1281 stateForType:68];
                                            }
                                            v1282 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1218, "stateType"));
                                            uint64_t v1283 = [v34 objectForKeyedSubscript:v1282];
                                            v1284 = (void *)v1283;
                                            if (v1283) {
                                              v1285 = (void *)v1283;
                                            }
                                            else {
                                              v1285 = v1218;
                                            }
                                            id v1286 = v1285;

                                            if (v1286) {
                                              [v1507 addLogMsgState:v1286];
                                            }

                                            uint64_t v1477 = 0;
                                            BOOL v1054 = 1;
                                          }
                                          else
                                          {
                                            HIDWORD(v1477) = a4 == 504;
                                            if (a3 == 1010 && a4 == 504)
                                            {
                                              v1265 = NSNumber;
                                              v1266 = +[GEOAPStateFactory sharedFactory];
                                              uint64_t v1042 = objc_msgSend(v1265, "numberWithInt:", objc_msgSend(v1266, "logMsgStateTypeForType:", 68));

                                              v1267 = [v34 objectForKeyedSubscript:v1042];
                                              v1268 = v1267;
                                              if (v1267)
                                              {
                                                id v1269 = v1267;
                                              }
                                              else
                                              {
                                                v1304 = +[GEOAPStateFactory sharedFactory];
                                                id v1269 = [v1304 stateForType:68];
                                              }
                                              v1305 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1269, "stateType"));
                                              uint64_t v1306 = [v34 objectForKeyedSubscript:v1305];
                                              v1307 = (void *)v1306;
                                              if (v1306) {
                                                v1308 = (void *)v1306;
                                              }
                                              else {
                                                v1308 = v1269;
                                              }
                                              id v1309 = v1308;

                                              if (v1309) {
                                                [v1507 addLogMsgState:v1309];
                                              }

                                              BOOL v1054 = 1;
                                              uint64_t v1477 = 0x100000000;
                                            }
                                            else
                                            {
                                              LODWORD(v1477) = a4 == 502;
                                              if (a3 != 1010 || a4 != 502)
                                              {
LABEL_908:
                                                if (v1504 && v1054)
                                                {
                                                  v1055 = NSNumber;
                                                  v1056 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1057 = objc_msgSend(v1055, "numberWithInt:", objc_msgSend(v1056, "logMsgStateTypeForType:", 68));

                                                  v1058 = [v34 objectForKeyedSubscript:v1057];
                                                  v1059 = v1058;
                                                  if (v1058)
                                                  {
                                                    id v1060 = v1058;
                                                  }
                                                  else
                                                  {
                                                    v1066 = +[GEOAPStateFactory sharedFactory];
                                                    id v1060 = [v1066 stateForType:68];
                                                  }
                                                  v1067 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1060, "stateType"));
                                                  uint64_t v1068 = [v34 objectForKeyedSubscript:v1067];
                                                  v1069 = (void *)v1068;
                                                  if (v1068) {
                                                    v1070 = (void *)v1068;
                                                  }
                                                  else {
                                                    v1070 = v1060;
                                                  }
                                                  id v1071 = v1070;

                                                  if (v1071) {
                                                    [v1507 addLogMsgState:v1071];
                                                  }

                                                  double v247 = (void *)v1057;
                                                }
                                                char v1072 = !v1500;
                                                if (v1044 != 1017) {
                                                  char v1072 = 1;
                                                }
                                                if ((v1072 & 1) == 0)
                                                {
                                                  v1073 = NSNumber;
                                                  v1074 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1075 = objc_msgSend(v1073, "numberWithInt:", objc_msgSend(v1074, "logMsgStateTypeForType:", 68));

                                                  v1076 = [v34 objectForKeyedSubscript:v1075];
                                                  v1077 = v1076;
                                                  if (v1076)
                                                  {
                                                    id v1078 = v1076;
                                                  }
                                                  else
                                                  {
                                                    v1079 = +[GEOAPStateFactory sharedFactory];
                                                    id v1078 = [v1079 stateForType:68];
                                                  }
                                                  v1080 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1078, "stateType"));
                                                  uint64_t v1081 = [v34 objectForKeyedSubscript:v1080];
                                                  v1082 = (void *)v1081;
                                                  if (v1081) {
                                                    v1083 = (void *)v1081;
                                                  }
                                                  else {
                                                    v1083 = v1078;
                                                  }
                                                  id v1084 = v1083;

                                                  if (v1084) {
                                                    [v1507 addLogMsgState:v1084];
                                                  }

                                                  double v247 = (void *)v1075;
                                                }
                                                if (v1044 == 1017 && a4 == 506)
                                                {
                                                  v1085 = NSNumber;
                                                  v1086 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1087 = objc_msgSend(v1085, "numberWithInt:", objc_msgSend(v1086, "logMsgStateTypeForType:", 68));

                                                  v1088 = [v34 objectForKeyedSubscript:v1087];
                                                  v1089 = v1088;
                                                  if (v1088)
                                                  {
                                                    id v1090 = v1088;
                                                  }
                                                  else
                                                  {
                                                    v1091 = +[GEOAPStateFactory sharedFactory];
                                                    id v1090 = [v1091 stateForType:68];
                                                  }
                                                  v1092 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1090, "stateType"));
                                                  uint64_t v1093 = [v34 objectForKeyedSubscript:v1092];
                                                  v1094 = (void *)v1093;
                                                  if (v1093) {
                                                    v1095 = (void *)v1093;
                                                  }
                                                  else {
                                                    v1095 = v1090;
                                                  }
                                                  id v1096 = v1095;

                                                  if (v1096) {
                                                    [v1507 addLogMsgState:v1096];
                                                  }

                                                  double v247 = (void *)v1087;
                                                }
                                                char v1097 = BYTE4(v1477) ^ 1;
                                                if (v1044 != 1017) {
                                                  char v1097 = 1;
                                                }
                                                if ((v1097 & 1) == 0)
                                                {
                                                  v1098 = NSNumber;
                                                  v1099 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1100 = objc_msgSend(v1098, "numberWithInt:", objc_msgSend(v1099, "logMsgStateTypeForType:", 68));

                                                  v1101 = [v34 objectForKeyedSubscript:v1100];
                                                  v1102 = v1101;
                                                  if (v1101)
                                                  {
                                                    id v1103 = v1101;
                                                  }
                                                  else
                                                  {
                                                    v1104 = +[GEOAPStateFactory sharedFactory];
                                                    id v1103 = [v1104 stateForType:68];
                                                  }
                                                  v1105 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1103, "stateType"));
                                                  uint64_t v1106 = [v34 objectForKeyedSubscript:v1105];
                                                  v1107 = (void *)v1106;
                                                  if (v1106) {
                                                    v1108 = (void *)v1106;
                                                  }
                                                  else {
                                                    v1108 = v1103;
                                                  }
                                                  id v1109 = v1108;

                                                  if (v1109) {
                                                    [v1507 addLogMsgState:v1109];
                                                  }

                                                  double v247 = (void *)v1100;
                                                }
                                                char v1110 = v1477 ^ 1;
                                                if (v1044 != 1017) {
                                                  char v1110 = 1;
                                                }
                                                if ((v1110 & 1) == 0)
                                                {
                                                  v1111 = NSNumber;
                                                  v1112 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1113 = objc_msgSend(v1111, "numberWithInt:", objc_msgSend(v1112, "logMsgStateTypeForType:", 68));

                                                  v1114 = [v34 objectForKeyedSubscript:v1113];
                                                  v1115 = v1114;
                                                  if (v1114)
                                                  {
                                                    id v1116 = v1114;
                                                  }
                                                  else
                                                  {
                                                    v1117 = +[GEOAPStateFactory sharedFactory];
                                                    id v1116 = [v1117 stateForType:68];
                                                  }
                                                  v1118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1116, "stateType"));
                                                  uint64_t v1119 = [v34 objectForKeyedSubscript:v1118];
                                                  v1120 = (void *)v1119;
                                                  if (v1119) {
                                                    v1121 = (void *)v1119;
                                                  }
                                                  else {
                                                    v1121 = v1116;
                                                  }
                                                  id v1122 = v1121;

                                                  if (v1122) {
                                                    [v1507 addLogMsgState:v1122];
                                                  }

                                                  double v247 = (void *)v1113;
                                                }
                                                BOOL v1123 = v1044 == 1017 && v1504;
                                                if (v1123)
                                                {
                                                  v1124 = NSNumber;
                                                  v1125 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1126 = objc_msgSend(v1124, "numberWithInt:", objc_msgSend(v1125, "logMsgStateTypeForType:", 68));

                                                  v1127 = [v34 objectForKeyedSubscript:v1126];
                                                  v1128 = v1127;
                                                  id v15 = v1475;
                                                  if (v1127)
                                                  {
                                                    id v1129 = v1127;
                                                  }
                                                  else
                                                  {
                                                    v1138 = +[GEOAPStateFactory sharedFactory];
                                                    id v1129 = [v1138 stateForType:68];
                                                  }
                                                  v1139 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1129, "stateType"));
                                                  uint64_t v1140 = [v34 objectForKeyedSubscript:v1139];
                                                  v1141 = (void *)v1140;
                                                  if (v1140) {
                                                    v1142 = (void *)v1140;
                                                  }
                                                  else {
                                                    v1142 = v1129;
                                                  }
                                                  id v1143 = v1142;

                                                  if (!v1143)
                                                  {
                                                    int v1144 = 0;
                                                    goto LABEL_1069;
                                                  }
                                                }
                                                else
                                                {
                                                  BOOL v880 = v1044 == 194;
                                                  BOOL v1130 = v1044 == 194;
                                                  if (v880 && v1500)
                                                  {
                                                    v1132 = NSNumber;
                                                    v1133 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1134 = objc_msgSend(v1132, "numberWithInt:", objc_msgSend(v1133, "logMsgStateTypeForType:", 68));

                                                    v1135 = [v34 objectForKeyedSubscript:v1134];
                                                    v1136 = v1135;
                                                    if (v1135)
                                                    {
                                                      id v1137 = v1135;
                                                    }
                                                    else
                                                    {
                                                      v1150 = +[GEOAPStateFactory sharedFactory];
                                                      id v1137 = [v1150 stateForType:68];
                                                    }
                                                    v1151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1137, "stateType"));
                                                    uint64_t v1152 = [v34 objectForKeyedSubscript:v1151];
                                                    v1153 = (void *)v1152;
                                                    if (v1152) {
                                                      v1154 = (void *)v1152;
                                                    }
                                                    else {
                                                      v1154 = v1137;
                                                    }
                                                    id v1155 = v1154;

                                                    if (v1155) {
                                                      [v1507 addLogMsgState:v1155];
                                                    }

                                                    BOOL v1130 = 1;
                                                    double v247 = (void *)v1134;
                                                  }
                                                  if (a4 == 506 && v1130)
                                                  {
                                                    v1156 = NSNumber;
                                                    v1157 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1158 = objc_msgSend(v1156, "numberWithInt:", objc_msgSend(v1157, "logMsgStateTypeForType:", 68));

                                                    v1159 = [v34 objectForKeyedSubscript:v1158];
                                                    v1160 = v1159;
                                                    if (v1159)
                                                    {
                                                      id v1161 = v1159;
                                                    }
                                                    else
                                                    {
                                                      v1162 = +[GEOAPStateFactory sharedFactory];
                                                      id v1161 = [v1162 stateForType:68];
                                                    }
                                                    v1163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1161, "stateType"));
                                                    uint64_t v1164 = [v34 objectForKeyedSubscript:v1163];
                                                    v1165 = (void *)v1164;
                                                    if (v1164) {
                                                      v1166 = (void *)v1164;
                                                    }
                                                    else {
                                                      v1166 = v1161;
                                                    }
                                                    id v1167 = v1166;

                                                    if (v1167) {
                                                      [v1507 addLogMsgState:v1167];
                                                    }

                                                    double v247 = (void *)v1158;
                                                  }
                                                  if ((HIDWORD(v1477) & v1130) == 1)
                                                  {
                                                    v1168 = NSNumber;
                                                    v1169 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1170 = objc_msgSend(v1168, "numberWithInt:", objc_msgSend(v1169, "logMsgStateTypeForType:", 68));

                                                    v1171 = [v34 objectForKeyedSubscript:v1170];
                                                    v1172 = v1171;
                                                    if (v1171)
                                                    {
                                                      id v1173 = v1171;
                                                    }
                                                    else
                                                    {
                                                      v1174 = +[GEOAPStateFactory sharedFactory];
                                                      id v1173 = [v1174 stateForType:68];
                                                    }
                                                    v1175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1173, "stateType"));
                                                    uint64_t v1176 = [v34 objectForKeyedSubscript:v1175];
                                                    v1177 = (void *)v1176;
                                                    if (v1176) {
                                                      v1178 = (void *)v1176;
                                                    }
                                                    else {
                                                      v1178 = v1173;
                                                    }
                                                    id v1179 = v1178;

                                                    if (v1179) {
                                                      [v1507 addLogMsgState:v1179];
                                                    }

                                                    double v247 = (void *)v1170;
                                                  }
                                                  if ((v1477 & v1130) == 1)
                                                  {
                                                    v1180 = NSNumber;
                                                    v1181 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1182 = objc_msgSend(v1180, "numberWithInt:", objc_msgSend(v1181, "logMsgStateTypeForType:", 68));

                                                    v1183 = [v34 objectForKeyedSubscript:v1182];
                                                    v1184 = v1183;
                                                    if (v1183)
                                                    {
                                                      id v1185 = v1183;
                                                    }
                                                    else
                                                    {
                                                      v1186 = +[GEOAPStateFactory sharedFactory];
                                                      id v1185 = [v1186 stateForType:68];
                                                    }
                                                    v1187 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1185, "stateType"));
                                                    uint64_t v1188 = [v34 objectForKeyedSubscript:v1187];
                                                    v1189 = (void *)v1188;
                                                    if (v1188) {
                                                      v1190 = (void *)v1188;
                                                    }
                                                    else {
                                                      v1190 = v1185;
                                                    }
                                                    id v1191 = v1190;

                                                    if (v1191) {
                                                      [v1507 addLogMsgState:v1191];
                                                    }

                                                    double v247 = (void *)v1182;
                                                  }
                                                  if (v1504 && v1130)
                                                  {
                                                    v1192 = NSNumber;
                                                    v1193 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1194 = objc_msgSend(v1192, "numberWithInt:", objc_msgSend(v1193, "logMsgStateTypeForType:", 68));

                                                    v1195 = [v34 objectForKeyedSubscript:v1194];
                                                    v1196 = v1195;
                                                    id v15 = v1475;
                                                    if (v1195)
                                                    {
                                                      id v1197 = v1195;
                                                    }
                                                    else
                                                    {
                                                      v1198 = +[GEOAPStateFactory sharedFactory];
                                                      id v1197 = [v1198 stateForType:68];
                                                    }
                                                    v1199 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1197, "stateType"));
                                                    uint64_t v1200 = [v34 objectForKeyedSubscript:v1199];
                                                    v1201 = (void *)v1200;
                                                    if (v1200) {
                                                      v1202 = (void *)v1200;
                                                    }
                                                    else {
                                                      v1202 = v1197;
                                                    }
                                                    id v1203 = v1202;

                                                    if (v1203) {
                                                      [v1507 addLogMsgState:v1203];
                                                    }

                                                    double v247 = (void *)v1194;
                                                  }
                                                  else
                                                  {
                                                    id v15 = v1475;
                                                  }
                                                  if (a3 == 6079 && a4 == 201)
                                                  {
                                                    v1204 = NSNumber;
                                                    v1205 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1206 = objc_msgSend(v1204, "numberWithInt:", objc_msgSend(v1205, "logMsgStateTypeForType:", 68));

                                                    v1207 = [v34 objectForKeyedSubscript:v1206];
                                                    if (v1207)
                                                    {
LABEL_1073:
                                                      id v1232 = v1207;
LABEL_1079:

                                                      v1240 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1232, "stateType"));
                                                      uint64_t v1241 = [v34 objectForKeyedSubscript:v1240];
                                                      v1242 = (void *)v1241;
                                                      if (v1241) {
                                                        v1243 = (void *)v1241;
                                                      }
                                                      else {
                                                        v1243 = v1232;
                                                      }
                                                      id v1244 = v1243;

                                                      if (v1244) {
                                                        [v1507 addLogMsgState:v1244];
                                                      }

                                                      BOOL v1233 = a3 == 6010;
                                                      goto LABEL_1092;
                                                    }
LABEL_1078:
                                                    v1239 = +[GEOAPStateFactory sharedFactory];
                                                    id v1232 = [v1239 stateForType:68];

                                                    goto LABEL_1079;
                                                  }
                                                  int v1144 = a3 == 2031;
                                                  if (a3 != 2031 || !v1503)
                                                  {
LABEL_1070:
                                                    if (a4 != 11 || !v1144)
                                                    {
                                                      BOOL v1233 = a3 == 6010;
                                                      if (a3 != 6010 || a4 != 201) {
                                                        goto LABEL_1093;
                                                      }
                                                      v1234 = NSNumber;
                                                      v1235 = +[GEOAPStateFactory sharedFactory];
                                                      uint64_t v1206 = objc_msgSend(v1234, "numberWithInt:", objc_msgSend(v1235, "logMsgStateTypeForType:", 68));

                                                      v1236 = [v34 objectForKeyedSubscript:v1206];
                                                      v1237 = v1236;
                                                      if (v1236)
                                                      {
                                                        id v1238 = v1236;
                                                      }
                                                      else
                                                      {
                                                        v1245 = +[GEOAPStateFactory sharedFactory];
                                                        id v1238 = [v1245 stateForType:68];
                                                      }
                                                      v1246 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1238, "stateType"));
                                                      uint64_t v1247 = [v34 objectForKeyedSubscript:v1246];
                                                      v1248 = (void *)v1247;
                                                      if (v1247) {
                                                        v1249 = (void *)v1247;
                                                      }
                                                      else {
                                                        v1249 = v1238;
                                                      }
                                                      id v1250 = v1249;

                                                      if (v1250) {
                                                        [v1507 addLogMsgState:v1250];
                                                      }

                                                      BOOL v1233 = 1;
LABEL_1092:
                                                      double v247 = (void *)v1206;
LABEL_1093:
                                                      if (v1502 && v1233)
                                                      {
                                                        v1251 = NSNumber;
                                                        v1252 = +[GEOAPStateFactory sharedFactory];
                                                        uint64_t v1253 = objc_msgSend(v1251, "numberWithInt:", objc_msgSend(v1252, "logMsgStateTypeForType:", 68));

                                                        v1254 = [v34 objectForKeyedSubscript:v1253];
                                                        v1255 = v1254;
                                                        if (v1254)
                                                        {
                                                          id v1256 = v1254;
                                                        }
                                                        else
                                                        {
                                                          v1257 = +[GEOAPStateFactory sharedFactory];
                                                          id v1256 = [v1257 stateForType:68];
                                                        }
                                                        v1258 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1256, "stateType"));
                                                        uint64_t v1259 = [v34 objectForKeyedSubscript:v1258];
                                                        v1260 = (void *)v1259;
                                                        if (v1259) {
                                                          v1261 = (void *)v1259;
                                                        }
                                                        else {
                                                          v1261 = v1256;
                                                        }
                                                        id v1262 = v1261;

                                                        if (v1262) {
                                                          [v1507 addLogMsgState:v1262];
                                                        }

                                                        double v247 = (void *)v1253;
                                                      }
                                                      id v19 = v1471;
                                                      unint64_t v16 = v1472;
                                                      id v21 = v1469;
                                                      id v20 = v1470;
                                                      v1263 = +[GEOAPStateFactory sharedFactory];
                                                      v1508[0] = MEMORY[0x263EF8330];
                                                      v1508[1] = 3221225472;
                                                      v1508[2] = __185__GEOAPPortal_UserActionCodeGen__captureStandardShortWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
                                                      v1508[3] = &unk_2653457B8;
                                                      id v1264 = v1507;
                                                      id v1509 = v1264;
                                                      id v1511 = v22;
                                                      id v1510 = v1469;
                                                      [v1263 sessionStateForType:6 callback:v1508];

                                                      id v17 = (id)v1501;
                                                      id v18 = v1498;
                                                      goto LABEL_1104;
                                                    }
                                                    v1230 = NSNumber;
                                                    v1231 = +[GEOAPStateFactory sharedFactory];
                                                    uint64_t v1206 = objc_msgSend(v1230, "numberWithInt:", objc_msgSend(v1231, "logMsgStateTypeForType:", 68));

                                                    v1207 = [v34 objectForKeyedSubscript:v1206];
                                                    if (v1207) {
                                                      goto LABEL_1073;
                                                    }
                                                    goto LABEL_1078;
                                                  }
                                                  v1209 = NSNumber;
                                                  v1210 = +[GEOAPStateFactory sharedFactory];
                                                  uint64_t v1126 = objc_msgSend(v1209, "numberWithInt:", objc_msgSend(v1210, "logMsgStateTypeForType:", 68));

                                                  v1211 = [v34 objectForKeyedSubscript:v1126];
                                                  v1212 = v1211;
                                                  if (v1211)
                                                  {
                                                    id v1213 = v1211;
                                                  }
                                                  else
                                                  {
                                                    v1225 = +[GEOAPStateFactory sharedFactory];
                                                    id v1213 = [v1225 stateForType:68];
                                                  }
                                                  v1226 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1213, "stateType"));
                                                  uint64_t v1227 = [v34 objectForKeyedSubscript:v1226];
                                                  v1228 = (void *)v1227;
                                                  if (v1227) {
                                                    v1229 = (void *)v1227;
                                                  }
                                                  else {
                                                    v1229 = v1213;
                                                  }
                                                  id v1143 = v1229;

                                                  if (!v1143)
                                                  {
                                                    int v1144 = 1;
                                                    goto LABEL_1069;
                                                  }
                                                }
                                                int v1144 = !v1123;
                                                [v1507 addLogMsgState:v1143];
LABEL_1069:

                                                double v247 = (void *)v1126;
                                                goto LABEL_1070;
                                              }
                                              v1276 = NSNumber;
                                              v1277 = +[GEOAPStateFactory sharedFactory];
                                              uint64_t v1042 = objc_msgSend(v1276, "numberWithInt:", objc_msgSend(v1277, "logMsgStateTypeForType:", 68));

                                              v1278 = [v34 objectForKeyedSubscript:v1042];
                                              v1279 = v1278;
                                              if (v1278)
                                              {
                                                id v1280 = v1278;
                                              }
                                              else
                                              {
                                                v1333 = +[GEOAPStateFactory sharedFactory];
                                                id v1280 = [v1333 stateForType:68];
                                              }
                                              v1334 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1280, "stateType"));
                                              uint64_t v1335 = [v34 objectForKeyedSubscript:v1334];
                                              v1336 = (void *)v1335;
                                              if (v1335) {
                                                v1337 = (void *)v1335;
                                              }
                                              else {
                                                v1337 = v1280;
                                              }
                                              id v1338 = v1337;

                                              if (v1338) {
                                                [v1507 addLogMsgState:v1338];
                                              }

                                              BOOL v1054 = 1;
                                              LODWORD(v1477) = 1;
                                            }
                                          }
LABEL_907:
                                          double v247 = (void *)v1042;
                                          goto LABEL_908;
                                        }
                                        v1145 = NSNumber;
                                        v1146 = +[GEOAPStateFactory sharedFactory];
                                        uint64_t v1042 = objc_msgSend(v1145, "numberWithInt:", objc_msgSend(v1146, "logMsgStateTypeForType:", 68));

                                        v1147 = [v34 objectForKeyedSubscript:v1042];
                                        v1148 = v1147;
                                        if (v1147)
                                        {
                                          id v1149 = v1147;
                                        }
                                        else
                                        {
                                          v1270 = +[GEOAPStateFactory sharedFactory];
                                          id v1149 = [v1270 stateForType:68];
                                        }
                                        v1271 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1149, "stateType"));
                                        uint64_t v1272 = [v34 objectForKeyedSubscript:v1271];
                                        v1273 = (void *)v1272;
                                        if (v1272) {
                                          v1274 = (void *)v1272;
                                        }
                                        else {
                                          v1274 = v1149;
                                        }
                                        id v1275 = v1274;

                                        if (v1275) {
                                          [v1507 addLogMsgState:v1275];
                                        }

                                        HIDWORD(v1477) = 0;
                                        BOOL v1054 = 1;
                                      }
LABEL_906:
                                      LODWORD(v1477) = a4 == 502;
                                      goto LABEL_907;
                                    }
                                    v1046 = NSNumber;
                                    v1047 = +[GEOAPStateFactory sharedFactory];
                                    uint64_t v1042 = objc_msgSend(v1046, "numberWithInt:", objc_msgSend(v1047, "logMsgStateTypeForType:", 68));

                                    v1043 = [v34 objectForKeyedSubscript:v1042];
                                    if (v1043) {
                                      goto LABEL_895;
                                    }
                                  }
                                  v1048 = +[GEOAPStateFactory sharedFactory];
                                  id v1045 = [v1048 stateForType:68];

                                  goto LABEL_900;
                                }
                                v882 = NSNumber;
                                v883 = +[GEOAPStateFactory sharedFactory];
                                uint64_t v844 = objc_msgSend(v882, "numberWithInt:", objc_msgSend(v883, "logMsgStateTypeForType:", 68));

                                v884 = [v34 objectForKeyedSubscript:v844];
                                v885 = v884;
                                if (v884)
                                {
                                  id v886 = v884;
                                }
                                else
                                {
                                  v887 = +[GEOAPStateFactory sharedFactory];
                                  id v886 = [v887 stateForType:68];
                                }
                                v888 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v886, "stateType"));
                                uint64_t v889 = [v34 objectForKeyedSubscript:v888];
                                v890 = (void *)v889;
                                if (v889) {
                                  v891 = (void *)v889;
                                }
                                else {
                                  v891 = v886;
                                }
                                id v860 = v891;

                                if (!v860)
                                {
                                  int v861 = 1;
                                  goto LABEL_764;
                                }
                              }
                              int v861 = !v841;
                              [v1507 addLogMsgState:v860];
                              goto LABEL_764;
                            }
                            v782 = NSNumber;
                            v783 = +[GEOAPStateFactory sharedFactory];
                            uint64_t v580 = objc_msgSend(v782, "numberWithInt:", objc_msgSend(v783, "logMsgStateTypeForType:", 68));

                            v784 = [v34 objectForKeyedSubscript:v580];
                            v785 = v784;
                            if (v784)
                            {
                              id v786 = v784;
                            }
                            else
                            {
                              v787 = +[GEOAPStateFactory sharedFactory];
                              id v786 = [v787 stateForType:68];
                            }
                            v788 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v786, "stateType"));
                            uint64_t v789 = [v34 objectForKeyedSubscript:v788];
                            v790 = (void *)v789;
                            if (v789) {
                              v791 = (void *)v789;
                            }
                            else {
                              v791 = v786;
                            }
                            id v647 = v791;

                            BOOL v648 = 1;
                            if (v647) {
                              goto LABEL_674;
                            }
                            goto LABEL_675;
                          }
                          v615 = NSNumber;
                          v616 = +[GEOAPStateFactory sharedFactory];
                          v617 = objc_msgSend(v615, "numberWithInt:", objc_msgSend(v616, "logMsgStateTypeForType:", 59));

                          v618 = [v34 objectForKeyedSubscript:v617];
                          v619 = v618;
                          if (v618)
                          {
                            id v620 = v618;
                          }
                          else
                          {
                            v685 = +[GEOAPStateFactory sharedFactory];
                            id v620 = [v685 stateForType:59];
                          }
                          v686 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v620, "stateType"));
                          uint64_t v687 = [v34 objectForKeyedSubscript:v686];
                          v688 = (void *)v687;
                          if (v687) {
                            v689 = (void *)v687;
                          }
                          else {
                            v689 = v620;
                          }
                          id v596 = v689;

                          if (v596) {
                            [v1507 addLogMsgState:v596];
                          }
                          v690 = NSNumber;
                          v691 = +[GEOAPStateFactory sharedFactory];
                          double v247 = objc_msgSend(v690, "numberWithInt:", objc_msgSend(v691, "logMsgStateTypeForType:", 54));

                          v692 = [v34 objectForKeyedSubscript:v247];
                          v693 = v692;
                          if (v692)
                          {
                            id v694 = v692;
                          }
                          else
                          {
                            v695 = +[GEOAPStateFactory sharedFactory];
                            id v694 = [v695 stateForType:54];
                          }
                          v696 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v694, "stateType"));
                          uint64_t v697 = [v34 objectForKeyedSubscript:v696];
                          v698 = (void *)v697;
                          if (v697) {
                            v699 = (void *)v697;
                          }
                          else {
                            v699 = v694;
                          }
                          id v607 = v699;

                          if (v607) {
LABEL_589:
                          }
                            [v1507 addLogMsgState:v607];
LABEL_610:

                          BOOL v563 = 1;
                          int v293 = a3;
                          goto LABEL_611;
                        }
                        v1316 = NSNumber;
                        v1317 = +[GEOAPStateFactory sharedFactory];
                        v1318 = objc_msgSend(v1316, "numberWithInt:", objc_msgSend(v1317, "logMsgStateTypeForType:", 59));

                        v1319 = [v34 objectForKeyedSubscript:v1318];
                        v1320 = v1319;
                        if (v1319)
                        {
                          id v1321 = v1319;
                        }
                        else
                        {
                          v1381 = +[GEOAPStateFactory sharedFactory];
                          id v1321 = [v1381 stateForType:59];
                        }
                        v1382 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1321, "stateType"));
                        uint64_t v1383 = [v34 objectForKeyedSubscript:v1382];
                        v1384 = (void *)v1383;
                        if (v1383) {
                          v1385 = (void *)v1383;
                        }
                        else {
                          v1385 = v1321;
                        }
                        id v596 = v1385;

                        if (v596) {
                          [v1507 addLogMsgState:v596];
                        }
                        v1386 = NSNumber;
                        v1387 = +[GEOAPStateFactory sharedFactory];
                        double v247 = objc_msgSend(v1386, "numberWithInt:", objc_msgSend(v1387, "logMsgStateTypeForType:", 54));

                        v1388 = [v34 objectForKeyedSubscript:v247];
                        v1389 = v1388;
                        if (v1388)
                        {
                          id v1390 = v1388;
                        }
                        else
                        {
                          v1391 = +[GEOAPStateFactory sharedFactory];
                          id v1390 = [v1391 stateForType:54];
                        }
                        v1392 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1390, "stateType"));
                        uint64_t v1393 = [v34 objectForKeyedSubscript:v1392];
                        v1394 = (void *)v1393;
                        if (v1393) {
                          v1395 = (void *)v1393;
                        }
                        else {
                          v1395 = v1390;
                        }
                        id v607 = v1395;

                        BOOL v1476 = 0;
                        if (!v607)
                        {
                          BOOL v1499 = 0;
                          goto LABEL_609;
                        }
                        BOOL v1499 = 0;
LABEL_506:
                        BOOL v1474 = 0;
                        goto LABEL_589;
                      }
                      v700 = NSNumber;
                      v701 = +[GEOAPStateFactory sharedFactory];
                      v702 = objc_msgSend(v700, "numberWithInt:", objc_msgSend(v701, "logMsgStateTypeForType:", 59));

                      v703 = [v34 objectForKeyedSubscript:v702];
                      v704 = v703;
                      if (v703)
                      {
                        id v705 = v703;
                      }
                      else
                      {
                        v1322 = +[GEOAPStateFactory sharedFactory];
                        id v705 = [v1322 stateForType:59];
                      }
                      v1323 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v705, "stateType"));
                      uint64_t v1324 = [v34 objectForKeyedSubscript:v1323];
                      v1325 = (void *)v1324;
                      if (v1324) {
                        v1326 = (void *)v1324;
                      }
                      else {
                        v1326 = v705;
                      }
                      id v1327 = v1326;

                      if (v1327) {
                        [v1507 addLogMsgState:v1327];
                      }
                      v1328 = NSNumber;
                      v1329 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v553 = objc_msgSend(v1328, "numberWithInt:", objc_msgSend(v1329, "logMsgStateTypeForType:", 54));

                      v1330 = [v34 objectForKeyedSubscript:v553];
                      v1331 = v1330;
                      if (v1330)
                      {
                        id v1332 = v1330;
                      }
                      else
                      {
                        v1339 = +[GEOAPStateFactory sharedFactory];
                        id v1332 = [v1339 stateForType:54];
                      }
                      v1340 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1332, "stateType"));
                      uint64_t v1341 = [v34 objectForKeyedSubscript:v1340];
                      v1342 = (void *)v1341;
                      if (v1341) {
                        v1343 = (void *)v1341;
                      }
                      else {
                        v1343 = v1332;
                      }
                      id v1344 = v1343;

                      if (v1344) {
                        [v1507 addLogMsgState:v1344];
                      }

                      BOOL v1473 = 0;
                      BOOL v1467 = 1;
                    }
                    BOOL v563 = 1;
                    int v293 = a3;
                    int v564 = a4;
LABEL_472:
                    BOOL v1499 = v564 == 1009;
                    double v247 = (void *)v553;
                    goto LABEL_473;
                  }
                  v394 = NSNumber;
                  v395 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v396 = objc_msgSend(v394, "numberWithInt:", objc_msgSend(v395, "logMsgStateTypeForType:", 68));

                  v397 = [v34 objectForKeyedSubscript:v396];
                  v398 = v397;
                  if (v397)
                  {
                    id v399 = v397;
                  }
                  else
                  {
                    v407 = +[GEOAPStateFactory sharedFactory];
                    id v399 = [v407 stateForType:68];
                  }
                  v408 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v399, "stateType"));
                  uint64_t v409 = [v34 objectForKeyedSubscript:v408];
                  v410 = (void *)v409;
                  if (v409) {
                    v411 = (void *)v409;
                  }
                  else {
                    v411 = v399;
                  }
                  id v412 = v411;

                  if (v412) {
                    [v1507 addLogMsgState:v412];
                  }

                  int v293 = a3;
                  BOOL v400 = a3 == 6049;
                  BOOL v392 = 1;
LABEL_415:
                  double v247 = (void *)v396;
                  goto LABEL_416;
                }
                if (v293 != 6018 || a4 != 612)
                {
                  if (v293 == 6018 && a4 == 201)
                  {
                    v429 = NSNumber;
                    v430 = [*(id *)(v341 + 3384) sharedFactory];
                    uint64_t v356 = objc_msgSend(v429, "numberWithInt:", objc_msgSend(v430, "logMsgStateTypeForType:", 68));

                    v431 = [v34 objectForKeyedSubscript:v356];
                    v432 = v431;
                    if (v431)
                    {
                      id v433 = v431;
                    }
                    else
                    {
                      v465 = [*(id *)(v341 + 3384) sharedFactory];
                      id v433 = [v465 stateForType:68];
                    }
                    int v361 = 201;

                    v466 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v433, "stateType"));
                    uint64_t v467 = [v34 objectForKeyedSubscript:v466];
                    v468 = (void *)v467;
                    if (v467) {
                      v469 = (void *)v467;
                    }
                    else {
                      v469 = v433;
                    }
                    id v366 = v469;

                    int v293 = a3;
                    if (!v366) {
                      goto LABEL_281;
                    }
                    goto LABEL_279;
                  }
                  if ((v293 != 6040 || a4 != 201) && (v293 != 459 || a4 != 201))
                  {
                    BOOL v1503 = a4 == 101;
                    if (v293 != 459 || a4 != 101) {
                      goto LABEL_282;
                    }
                    v445 = NSNumber;
                    v446 = [*(id *)(v341 + 3384) sharedFactory];
                    uint64_t v396 = objc_msgSend(v445, "numberWithInt:", objc_msgSend(v446, "logMsgStateTypeForType:", 68));

                    v447 = [v34 objectForKeyedSubscript:v396];
                    v448 = v447;
                    if (v447)
                    {
                      id v449 = v447;
                    }
                    else
                    {
                      v1366 = [*(id *)(v341 + 3384) sharedFactory];
                      id v449 = [v1366 stateForType:68];
                    }
                    v1367 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v449, "stateType"));
                    uint64_t v1368 = [v34 objectForKeyedSubscript:v1367];
                    v1369 = (void *)v1368;
                    if (v1368) {
                      v1370 = (void *)v1368;
                    }
                    else {
                      v1370 = v449;
                    }
                    id v439 = v1370;

                    BOOL v1503 = 1;
                    if (!v439) {
                      goto LABEL_413;
                    }
LABEL_410:
                    int v293 = a3;
                    [v1507 addLogMsgState:v439];
LABEL_414:

                    BOOL v392 = 0;
                    BOOL v400 = 0;
                    goto LABEL_415;
                  }
                }
                v413 = NSNumber;
                v414 = [*(id *)(v341 + 3384) sharedFactory];
                uint64_t v396 = objc_msgSend(v413, "numberWithInt:", objc_msgSend(v414, "logMsgStateTypeForType:", 68));

                v415 = [v34 objectForKeyedSubscript:v396];
                v416 = v415;
                if (v415)
                {
                  id v417 = v415;
                }
                else
                {
                  v434 = [*(id *)(v341 + 3384) sharedFactory];
                  id v417 = [v434 stateForType:68];
                }
                v435 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v417, "stateType"));
                uint64_t v436 = [v34 objectForKeyedSubscript:v435];
                v437 = (void *)v436;
                if (v436) {
                  v438 = (void *)v436;
                }
                else {
                  v438 = v417;
                }
                id v439 = v438;

                BOOL v1503 = 0;
                if (v439) {
                  goto LABEL_410;
                }
LABEL_413:
                int v293 = a3;
                goto LABEL_414;
              }
              id v295 = NSNumber;
              id v296 = +[GEOAPStateFactory sharedFactory];
              uint64_t v297 = objc_msgSend(v295, "numberWithInt:", objc_msgSend(v296, "logMsgStateTypeForType:", 68));

              id v298 = [v34 objectForKeyedSubscript:v297];
              id v299 = v298;
              if (v298)
              {
                id v300 = v298;
              }
              else
              {
                id v301 = +[GEOAPStateFactory sharedFactory];
                id v300 = [v301 stateForType:68];
              }
              id v302 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v300, "stateType"));
              uint64_t v303 = [v34 objectForKeyedSubscript:v302];
              id v304 = (void *)v303;
              if (v303) {
                id v305 = (void *)v303;
              }
              else {
                id v305 = v300;
              }
              id v306 = v305;

              int v307 = 1;
              BOOL v294 = 1;
LABEL_219:
              double v247 = (void *)v297;
              if (v306)
              {
                [v1507 addLogMsgState:v306];
                BOOL v294 = v307;
                double v247 = (void *)v297;
              }

              BOOL v287 = v294;
              int v293 = a3;
              goto LABEL_222;
            }
            v1454 = NSNumber;
            v1455 = +[GEOAPStateFactory sharedFactory];
            uint64_t v271 = objc_msgSend(v1454, "numberWithInt:", objc_msgSend(v1455, "logMsgStateTypeForType:", 68));

            v1456 = [v34 objectForKeyedSubscript:v271];
            v1457 = v1456;
            if (v1456)
            {
              id v1458 = v1456;
            }
            else
            {
              v1459 = +[GEOAPStateFactory sharedFactory];
              id v1458 = [v1459 stateForType:68];
            }
            v1460 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1458, "stateType"));
            uint64_t v1461 = [v34 objectForKeyedSubscript:v1460];
            v1462 = (void *)v1461;
            if (v1461) {
              v1463 = (void *)v1461;
            }
            else {
              v1463 = v1458;
            }
            id v285 = v1463;

            BOOL v286 = 1;
            if (v285) {
              goto LABEL_205;
            }
          }
          else
          {
            v1396 = NSNumber;
            v1397 = +[GEOAPStateFactory sharedFactory];
            uint64_t v271 = objc_msgSend(v1396, "numberWithInt:", objc_msgSend(v1397, "logMsgStateTypeForType:", 68));

            v1398 = [v34 objectForKeyedSubscript:v271];
            v1399 = v1398;
            if (v1398)
            {
              id v1400 = v1398;
            }
            else
            {
              v1438 = +[GEOAPStateFactory sharedFactory];
              id v1400 = [v1438 stateForType:68];
            }
            v1439 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1400, "stateType"));
            uint64_t v1440 = [v34 objectForKeyedSubscript:v1439];
            v1441 = (void *)v1440;
            if (v1440) {
              v1442 = (void *)v1440;
            }
            else {
              v1442 = v1400;
            }
            id v285 = v1442;

            BOOL v286 = 0;
            BOOL v1504 = 1;
            BOOL v287 = 0;
            if (v285) {
              goto LABEL_205;
            }
          }
LABEL_208:
          int v293 = a3;
          goto LABEL_209;
        }
        v1371 = NSNumber;
        v1372 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v1371, "numberWithInt:", objc_msgSend(v1372, "logMsgStateTypeForType:", 68));

        v1373 = [v34 objectForKeyedSubscript:v271];
        v1374 = v1373;
        if (v1373)
        {
          id v1375 = v1373;
        }
        else
        {
          v1426 = +[GEOAPStateFactory sharedFactory];
          id v1375 = [v1426 stateForType:68];
        }
        v1427 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v1375, "stateType"));
        uint64_t v1428 = [v34 objectForKeyedSubscript:v1427];
        v1429 = (void *)v1428;
        if (v1428) {
          v1430 = (void *)v1428;
        }
        else {
          v1430 = v1375;
        }
        id v285 = v1430;

        BOOL v286 = 0;
        BOOL v1478 = 1;
        BOOL v287 = 0;
        if (v285) {
          goto LABEL_1265;
        }
      }
LABEL_1281:
      BOOL v1504 = 0;
      goto LABEL_208;
    }
  }
LABEL_1104:
}

+ (BOOL)isDisabledState:(id)a3 inCountry:(id)a4
{
  uint64_t v5 = qword_26B201AE8;
  id v6 = a4;
  id v7 = a3;
  if (v5 != -1) {
    dispatch_once(&qword_26B201AE8, &__block_literal_global_550);
  }
  id v8 = [(id)qword_26B201AE0 objectForKeyedSubscript:v7];

  char v9 = [v8 containsObject:v6];
  return v9;
}

void __41__GEOAPPortal_populateCommonEventValues___block_invoke()
{
  GEOConfigGetBytes();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    uint64_t v0 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];
    v1 = (void *)qword_26B201948;
    qword_26B201948 = v0;
  }
  else
  {
    id v2 = objc_alloc_init(MEMORY[0x263F08C38]);
    id v3 = (void *)qword_26B201948;
    qword_26B201948 = (uint64_t)v2;

    id v4 = [MEMORY[0x263F08910] archivedDataWithRootObject:qword_26B201948 requiringSecureCoding:1 error:0];
    GEOConfigSetBytes();
  }
}

void __127__GEOAPPortal_captureMapsEngagementWithUser_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_18()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  _MergedGlobals_4 = [v6 containsObject:v8];
}

+ (void)captureServiceMetadataWithServiceMetadataType:(int)a3 directionsMetadata:(id)a4 placesMetadata:(id)a5
{
}

+ (void)captureServiceMetadataWithServiceMetadataType:(int)a3 directionsMetadata:(id)a4 placesMetadata:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v182 = *MEMORY[0x263EF8340];
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  v176[0] = MEMORY[0x263EF8330];
  v176[1] = 3221225472;
  v176[2] = __161__GEOAPPortal_captureServiceMetadataWithServiceMetadataType_directionsMetadata_placesMetadata_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v176[3] = &unk_265345530;
  id v20 = v19;
  id v178 = v20;
  id v21 = v18;
  id v177 = v21;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v176);
  uint64_t v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201960 != -1) {
      dispatch_once(&qword_26B201960, &__block_literal_global_37);
    }
    if (byte_26B2018F9) {
      goto LABEL_8;
    }
    id v166 = v21;
    id v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    int v29 = [a1 isDisabledEvent:@"serviceMetadata" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_15;
      }
    }
    else if (v29)
    {
      goto LABEL_15;
    }
    if (v17) {
      [v17 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v30 == 0.0 || v30 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v165 = v28;
      id v156 = v15;
      id v148 = v16;
      if ([v16 count])
      {
        id v163 = v20;
        id v167 = v14;
        uint64_t v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v16, "count"));
        long long v172 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        id v32 = v16;
        uint64_t v33 = [v32 countByEnumeratingWithState:&v172 objects:v179 count:16];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)v173;
          do
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              if (*(void *)v173 != v35) {
                objc_enumerationMutation(v32);
              }
              id v37 = *(void **)(*((void *)&v172 + 1) + 8 * i);
              uint64_t v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
              [v31 setObject:v37 forKeyedSubscript:v38];
            }
            uint64_t v34 = [v32 countByEnumeratingWithState:&v172 objects:v179 count:16];
          }
          while (v34);
        }

        uint64_t v39 = (void *)[v31 copy];
        id v14 = v167;
        id v20 = v163;
      }
      else
      {
        uint64_t v39 = 0;
      }
      double v168 = v39;
      id v40 = NSNumber;
      unint64_t v41 = +[GEOAPStateFactory sharedFactory];
      unint64_t v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 65));

      uint64_t v43 = [v39 objectForKeyedSubscript:v42];
      char v44 = v43;
      if (v43)
      {
        id v164 = v43;
      }
      else
      {
        uint64_t v45 = +[GEOAPStateFactory sharedFactory];
        id v164 = [v45 stateForType:65];
      }
      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      unint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      uint64_t v49 = [v39 objectForKeyedSubscript:v48];
      uint64_t v50 = v49;
      if (v49)
      {
        id v162 = v49;
      }
      else
      {
        uint64_t v51 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v51 stateForType:5];
      }
      id v52 = NSNumber;
      uint64_t v53 = +[GEOAPStateFactory sharedFactory];
      char v54 = objc_msgSend(v52, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 16));

      uint64_t v55 = [v39 objectForKeyedSubscript:v54];
      char v56 = v55;
      if (v55)
      {
        id v57 = v55;
      }
      else
      {
        uint64_t v58 = +[GEOAPStateFactory sharedFactory];
        id v57 = [v58 stateForType:16];
      }
      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v165] & 1) != 0
        || GEOConfigGetBOOL())
      {

        uint64_t v161 = 0;
      }
      else
      {
        uint64_t v161 = v57;
      }
      unint64_t v59 = NSNumber;
      unint64_t v60 = +[GEOAPStateFactory sharedFactory];
      uint64_t v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 35));

      char v62 = [v168 objectForKeyedSubscript:v61];
      id v63 = v62;
      if (v62)
      {
        id v160 = v62;
      }
      else
      {
        char v64 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v64 stateForType:35];
      }
      uint64_t v65 = NSNumber;
      uint64_t v66 = +[GEOAPStateFactory sharedFactory];
      uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 30));

      uint64_t v68 = [v168 objectForKeyedSubscript:v67];
      unint64_t v69 = v68;
      if (v68)
      {
        id v159 = v68;
      }
      else
      {
        char v70 = +[GEOAPStateFactory sharedFactory];
        id v159 = [v70 stateForType:30];
      }
      unint64_t v71 = NSNumber;
      unint64_t v72 = +[GEOAPStateFactory sharedFactory];
      uint64_t v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 0));

      id v74 = [v168 objectForKeyedSubscript:v73];
      char v75 = v74;
      if (v74)
      {
        id v76 = v74;
      }
      else
      {
        uint64_t v77 = +[GEOAPStateFactory sharedFactory];
        id v76 = [v77 stateForType:0];
      }
      uint64_t v78 = NSNumber;
      uint64_t v79 = +[GEOAPStateFactory sharedFactory];
      char v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 3));

      uint64_t v81 = [v168 objectForKeyedSubscript:v80];
      uint64_t v82 = v81;
      double v158 = v76;
      if (v81)
      {
        id v147 = v81;
      }
      else
      {
        uint64_t v83 = +[GEOAPStateFactory sharedFactory];
        id v147 = [v83 stateForType:3];
      }
      id v15 = v156;

      uint64_t v84 = NSNumber;
      id v85 = +[GEOAPStateFactory sharedFactory];
      uint64_t v86 = objc_msgSend(v84, "numberWithInt:", objc_msgSend(v85, "logMsgStateTypeForType:", 64));

      uint64_t v87 = [v168 objectForKeyedSubscript:v86];
      uint64_t v88 = v87;
      if (v87)
      {
        id v157 = v87;
      }
      else
      {
        uint64_t v89 = +[GEOAPStateFactory sharedFactory];
        id v157 = [v89 stateForType:64];
      }
      uint64_t v90 = NSNumber;
      uint64_t v91 = +[GEOAPStateFactory sharedFactory];
      char v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 10));

      uint64_t v93 = [v168 objectForKeyedSubscript:v92];
      uint64_t v94 = v93;
      if (v93)
      {
        id v155 = v93;
      }
      else
      {
        uint64_t v95 = +[GEOAPStateFactory sharedFactory];
        id v155 = [v95 stateForType:10];
      }
      id v96 = NSNumber;
      char v97 = +[GEOAPStateFactory sharedFactory];
      unint64_t v98 = objc_msgSend(v96, "numberWithInt:", objc_msgSend(v97, "logMsgStateTypeForType:", 20));

      uint64_t v99 = [v168 objectForKeyedSubscript:v98];
      unsigned __int16 v100 = v99;
      if (v99)
      {
        id v154 = v99;
      }
      else
      {
        uint64_t v101 = +[GEOAPStateFactory sharedFactory];
        id v154 = [v101 stateForType:20];
      }
      uint64_t v102 = NSNumber;
      char v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 42));

      char v105 = [v168 objectForKeyedSubscript:v104];
      uint64_t v106 = v105;
      if (v105)
      {
        id v153 = v105;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v153 = [v107 stateForType:42];
      }
      uint64_t v108 = NSNumber;
      uint64_t v109 = +[GEOAPStateFactory sharedFactory];
      uint64_t v110 = objc_msgSend(v108, "numberWithInt:", objc_msgSend(v109, "logMsgStateTypeForType:", 70));

      uint64_t v111 = [v168 objectForKeyedSubscript:v110];
      uint64_t v112 = v111;
      if (v111)
      {
        id v152 = v111;
      }
      else
      {
        uint64_t v113 = +[GEOAPStateFactory sharedFactory];
        id v152 = [v113 stateForType:70];
      }
      char v114 = NSNumber;
      unint64_t v115 = +[GEOAPStateFactory sharedFactory];
      uint64_t v116 = objc_msgSend(v114, "numberWithInt:", objc_msgSend(v115, "logMsgStateTypeForType:", 7));

      char v117 = [v168 objectForKeyedSubscript:v116];
      id v118 = v117;
      if (v117)
      {
        id v151 = v117;
      }
      else
      {
        char v119 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v119 stateForType:7];
      }
      uint64_t v120 = NSNumber;
      uint64_t v121 = +[GEOAPStateFactory sharedFactory];
      unint64_t v122 = objc_msgSend(v120, "numberWithInt:", objc_msgSend(v121, "logMsgStateTypeForType:", 17));

      uint64_t v123 = [v168 objectForKeyedSubscript:v122];
      uint64_t v124 = v123;
      if (v123)
      {
        id v150 = v123;
      }
      else
      {
        uint64_t v125 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v125 stateForType:17];
      }
      uint64_t v126 = NSNumber;
      uint64_t v127 = +[GEOAPStateFactory sharedFactory];
      char v128 = objc_msgSend(v126, "numberWithInt:", objc_msgSend(v127, "logMsgStateTypeForType:", 19));

      id v129 = [v168 objectForKeyedSubscript:v128];
      uint64_t v130 = v129;
      if (v129)
      {
        id v149 = v129;
      }
      else
      {
        uint64_t v131 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v131 stateForType:19];
      }
      uint64_t v28 = v165;

      uint64_t v132 = NSNumber;
      uint64_t v133 = +[GEOAPStateFactory sharedFactory];
      uint64_t v134 = objc_msgSend(v132, "numberWithInt:", objc_msgSend(v133, "logMsgStateTypeForType:", 27));

      uint64_t v146 = (void *)v134;
      uint64_t v135 = [v168 objectForKeyedSubscript:v134];
      uint64_t v136 = v135;
      if (v135)
      {
        id v137 = v135;
      }
      else
      {
        uint64_t v138 = +[GEOAPStateFactory sharedFactory];
        id v137 = [v138 stateForType:27];
      }
      id v21 = v166;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v139 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v139 setEventType:63];
        id v140 = objc_alloc_init(MEMORY[0x263F418F8]);
        [v139 setServiceMetadata:v140];

        uint64_t v141 = [v139 serviceMetadata];
        [v141 setServiceMetadataType:a3];

        uint64_t v142 = [v139 serviceMetadata];
        [v142 setDirectionsMetadata:v14];

        uint64_t v143 = [v139 serviceMetadata];
        [v143 setPlacesMetadata:v15];

        if (v151) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v160) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v162) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v158) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v147) {
          [v139 addLogMsgState:v147];
        }
        if (v159) {
          [v139 addLogMsgState:v159];
        }
        if (v164) {
          [v139 addLogMsgState:v164];
        }
        if (v154) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v155) {
          [v139 addLogMsgState:v155];
        }
        if (v157) {
          [v139 addLogMsgState:v157];
        }
        if (v161) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v150) {
          [v139 addLogMsgState:v150];
        }
        if (v149) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        if (v137) {
          [v139 addLogMsgState:v137];
        }
        if (v153) {
          [v139 addLogMsgState:v153];
        }
        if (v152) {
          objc_msgSend(v139, "addLogMsgState:");
        }
        unint64_t v144 = +[GEOAPStateFactory sharedFactory];
        v170[0] = MEMORY[0x263EF8330];
        v170[1] = 3221225472;
        v170[2] = __161__GEOAPPortal_captureServiceMetadataWithServiceMetadataType_directionsMetadata_placesMetadata_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v170[3] = &unk_265345680;
        id v145 = v139;
        id v171 = v145;
        [v144 sessionStateForType:6 callback:v170];

        uint64_t v28 = v165;
        id v21 = v166;
      }
      v22[2](v22);

      id v16 = v148;
      goto LABEL_117;
    }
LABEL_15:
    v22[2](v22);
LABEL_117:

    goto LABEL_9;
  }
  unint64_t v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    int v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v181 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v22[2](v22);
LABEL_9:
}

void __161__GEOAPPortal_captureServiceMetadataWithServiceMetadataType_directionsMetadata_placesMetadata_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      uint64_t v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __161__GEOAPPortal_captureServiceMetadataWithServiceMetadataType_directionsMetadata_placesMetadata_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_35()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018F9 = [v6 containsObject:v8];
}

void __161__GEOAPPortal_captureServiceMetadataWithServiceMetadataType_directionsMetadata_placesMetadata_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureNetEventSummaryWithGroups:(id)a3
{
}

+ (void)captureNetEventSummaryWithGroups:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v97[0] = MEMORY[0x263EF8330];
  v97[1] = 3221225472;
  v97[2] = __114__GEOAPPortal_captureNetEventSummaryWithGroups_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v97[3] = &unk_265345530;
  id v17 = v16;
  id v99 = v17;
  id v18 = v15;
  id v98 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v97);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B201968 != -1) {
      dispatch_once(&qword_26B201968, &__block_literal_global_47);
    }
    if (byte_26B2018FA) {
      goto LABEL_8;
    }
    int v24 = [MEMORY[0x263F41770] sharedConfiguration];
    unint64_t v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"netEventSummary" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v83 = v25;
      id v84 = v14;
      id v79 = v17;
      id v80 = v12;
      id v85 = v13;
      if ([v13 count])
      {
        uint64_t v28 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        id v29 = v13;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v93 objects:v101 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v94;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v94 != v32) {
                objc_enumerationMutation(v29);
              }
              uint64_t v34 = *(void **)(*((void *)&v93 + 1) + 8 * i);
              uint64_t v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v34, "stateType"));
              [v28 setObject:v34 forKeyedSubscript:v35];
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v93 objects:v101 count:16];
          }
          while (v31);
        }

        int v36 = (void *)[v28 copy];
        id v17 = v79;
        id v12 = v80;
      }
      else
      {
        int v36 = 0;
      }
      id v37 = NSNumber;
      uint64_t v38 = +[GEOAPStateFactory sharedFactory];
      uint64_t v39 = objc_msgSend(v37, "numberWithInt:", objc_msgSend(v38, "logMsgStateTypeForType:", 35));

      uint64_t v86 = v36;
      id v40 = [v36 objectForKeyedSubscript:v39];
      unint64_t v41 = v40;
      id v14 = v84;
      if (v40)
      {
        id v82 = v40;
        unint64_t v42 = 0x265344000;
      }
      else
      {
        unint64_t v42 = 0x265344000uLL;
        uint64_t v43 = +[GEOAPStateFactory sharedFactory];
        id v82 = [v43 stateForType:35];
      }
      char v44 = NSNumber;
      [*(id *)(v42 + 3384) sharedFactory];
      v46 = unint64_t v45 = v42;
      uint64_t v47 = objc_msgSend(v44, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 0));

      uint64_t v77 = (void *)v47;
      unint64_t v48 = [v86 objectForKeyedSubscript:v47];
      uint64_t v49 = v48;
      if (v48)
      {
        id v81 = v48;
      }
      else
      {
        uint64_t v50 = [*(id *)(v45 + 3384) sharedFactory];
        id v81 = [v50 stateForType:0];
      }
      uint64_t v51 = NSNumber;
      id v52 = [*(id *)(v45 + 3384) sharedFactory];
      uint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 3));

      char v54 = [v86 objectForKeyedSubscript:v53];
      uint64_t v55 = v54;
      if (v54)
      {
        id v56 = v54;
      }
      else
      {
        [*(id *)(v45 + 3384) sharedFactory];
        v58 = id v57 = v53;
        id v56 = [v58 stateForType:3];

        uint64_t v53 = v57;
      }
      id v13 = v85;
      unint64_t v25 = v83;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v76 = v56;
        uint64_t v78 = v53;
        id v59 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v59 setEventType:62];
        id v60 = objc_alloc_init(MEMORY[0x263F418A0]);
        [v59 setNetworkEventSummary:v60];

        uint64_t v61 = [v59 networkEventSummary];
        char v62 = [v61 groups];

        if (!v62)
        {
          id v63 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v12, "count"));
          char v64 = [v59 networkEventSummary];
          [v64 setGroups:v63];
        }
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        id v65 = v12;
        uint64_t v66 = [v65 countByEnumeratingWithState:&v89 objects:v100 count:16];
        if (v66)
        {
          uint64_t v67 = v66;
          uint64_t v68 = *(void *)v90;
          do
          {
            for (uint64_t j = 0; j != v67; ++j)
            {
              if (*(void *)v90 != v68) {
                objc_enumerationMutation(v65);
              }
              char v70 = *(void **)(*((void *)&v89 + 1) + 8 * j);
              unint64_t v71 = [v59 networkEventSummary];
              unint64_t v72 = [v71 groups];
              uint64_t v73 = (void *)[v70 copy];
              [v72 addObject:v73];
            }
            uint64_t v67 = [v65 countByEnumeratingWithState:&v89 objects:v100 count:16];
          }
          while (v67);
        }

        if (v82) {
          objc_msgSend(v59, "addLogMsgState:");
        }
        id v17 = v79;
        id v12 = v80;
        unint64_t v25 = v83;
        id v14 = v84;
        if (v81) {
          objc_msgSend(v59, "addLogMsgState:");
        }
        if (v76) {
          [v59 addLogMsgState:v76];
        }
        id v74 = +[GEOAPStateFactory sharedFactory];
        v87[0] = MEMORY[0x263EF8330];
        v87[1] = 3221225472;
        v87[2] = __114__GEOAPPortal_captureNetEventSummaryWithGroups_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v87[3] = &unk_265345680;
        id v88 = v59;
        id v75 = v59;
        [v74 sessionStateForType:7 callback:v87];

        id v13 = v85;
        uint64_t v53 = v78;
        id v56 = v76;
      }
      v19[2](v19);

      goto LABEL_57;
    }
LABEL_28:
    v19[2](v19);
LABEL_57:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    char v103 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __114__GEOAPPortal_captureNetEventSummaryWithGroups_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __114__GEOAPPortal_captureNetEventSummaryWithGroups_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_45()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FA = [v6 containsObject:v8];
}

void __114__GEOAPPortal_captureNetEventSummaryWithGroups_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureMapsInteractionWithInteractionType:(int)a3
{
}

+ (void)captureMapsInteractionWithInteractionType:(int)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id v15 = a7;
  v69[0] = MEMORY[0x263EF8330];
  v69[1] = 3221225472;
  v69[2] = __123__GEOAPPortal_captureMapsInteractionWithInteractionType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v69[3] = &unk_265345530;
  id v16 = v15;
  id v71 = v16;
  id v17 = v14;
  id v70 = v17;
  id v18 = (void (**)(void))MEMORY[0x25337B980](v69);
  id v19 = +[GEOAPServiceManager sharedManager];
  int v20 = [v19 eventCollectionIsDisabledForCurrentProcess];

  if (!v20)
  {
    if (qword_26B201970 != -1) {
      dispatch_once(&qword_26B201970, &__block_literal_global_55);
    }
    if (byte_26B2018FB) {
      goto LABEL_8;
    }
    uint64_t v23 = [MEMORY[0x263F41770] sharedConfiguration];
    int v24 = [v23 countryCode];

    int v25 = [a1 isDisabledEvent:@"mapsInteraction" inCountry:v24];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v25)
    {
      goto LABEL_28;
    }
    if (v13) {
      [v13 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v26 == 0.0 || v26 < (double)arc4random() / 4294967300.0)
    {
      char v62 = v24;
      unsigned int v56 = a3;
      id v59 = v12;
      if ([v12 count])
      {
        id v57 = v16;
        id v60 = v13;
        double v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v12, "count"));
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id v28 = v12;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v65 objects:v72 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v66;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v66 != v31) {
                objc_enumerationMutation(v28);
              }
              uint64_t v33 = *(void **)(*((void *)&v65 + 1) + 8 * i);
              uint64_t v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v65 objects:v72 count:16];
          }
          while (v30);
        }

        uint64_t v35 = (void *)[v27 copy];
        id v13 = v60;
        id v16 = v57;
      }
      else
      {
        uint64_t v35 = 0;
      }
      int v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      uint64_t v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 35));

      uint64_t v58 = v35;
      uint64_t v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v61 = v39;
        unint64_t v41 = 0x265344000;
      }
      else
      {
        unint64_t v41 = 0x265344000uLL;
        unint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v42 stateForType:35];
      }
      uint64_t v43 = NSNumber;
      [*(id *)(v41 + 3384) sharedFactory];
      unint64_t v45 = v44 = v41;
      id v46 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v45, "logMsgStateTypeForType:", 0));

      uint64_t v47 = [v58 objectForKeyedSubscript:v46];
      unint64_t v48 = v47;
      if (v47)
      {
        id v49 = v47;
      }
      else
      {
        uint64_t v50 = [*(id *)(v44 + 3384) sharedFactory];
        id v49 = [v50 stateForType:0];
      }
      int v24 = v62;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v51 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v51 setEventType:61];
        id v52 = objc_alloc_init(MEMORY[0x263F41880]);
        [v51 setMapsInteraction:v52];

        uint64_t v53 = [v51 mapsInteraction];
        [v53 setInteractionType:v56];

        if (v61) {
          objc_msgSend(v51, "addLogMsgState:");
        }
        if (v49) {
          [v51 addLogMsgState:v49];
        }
        char v54 = +[GEOAPStateFactory sharedFactory];
        v63[0] = MEMORY[0x263EF8330];
        v63[1] = 3221225472;
        v63[2] = __123__GEOAPPortal_captureMapsInteractionWithInteractionType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v63[3] = &unk_265345680;
        id v64 = v51;
        id v55 = v51;
        [v54 sessionStateForType:6 callback:v63];

        int v24 = v62;
      }
      v18[2](v18);

      id v12 = v59;
      goto LABEL_43;
    }
LABEL_28:
    v18[2](v18);
LABEL_43:

    goto LABEL_9;
  }
  int v21 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    id v22 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v74 = v22;
    _os_log_impl(&dword_24FE56000, v21, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v18[2](v18);
LABEL_9:
}

void __123__GEOAPPortal_captureMapsInteractionWithInteractionType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __123__GEOAPPortal_captureMapsInteractionWithInteractionType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_53()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FB = [v6 containsObject:v8];
}

void __123__GEOAPPortal_captureMapsInteractionWithInteractionType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureShowcaseSuppressionWithBusinessId:(id)a3 localSearchProviderID:(id)a4 showcaseId:(id)a5 suppressionReason:(int)a6 adamId:(id)a7
{
}

+ (void)captureShowcaseSuppressionWithBusinessId:(id)a3 localSearchProviderID:(id)a4 showcaseId:(id)a5 suppressionReason:(int)a6 adamId:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v89 = a7;
  id v90 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  v97[0] = MEMORY[0x263EF8330];
  v97[1] = 3221225472;
  v97[2] = __180__GEOAPPortal_captureShowcaseSuppressionWithBusinessId_localSearchProviderID_showcaseId_suppressionReason_adamId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v97[3] = &unk_265345530;
  id v22 = v21;
  id v99 = v22;
  id v87 = v20;
  id v98 = v87;
  uint64_t v23 = (void (**)(void))MEMORY[0x25337B980](v97);
  int v24 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v24 eventCollectionIsDisabledForCurrentProcess];

  id v88 = v19;
  if (a7)
  {
    int v25 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      double v26 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      uint64_t v102 = v26;
      _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    v23[2](v23);
    double v27 = v16;
    goto LABEL_9;
  }
  if (qword_26B201978 != -1) {
    dispatch_once(&qword_26B201978, &__block_literal_global_62);
  }
  double v27 = v16;
  if (!byte_26B2018FC)
  {
    id v85 = v17;
    uint64_t v29 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v30 = [v29 countryCode];

    int v31 = [a1 isDisabledEvent:@"showcaseSuppression" inCountry:v30];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v31)
    {
      goto LABEL_16;
    }
    if (v19) {
      [v19 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v32 == 0.0 || v32 < (double)arc4random() / 4294967300.0)
    {
      id v84 = v18;
      id v79 = v30;
      if ([v90 count])
      {
        uint64_t v33 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v90, "count"));
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        id v34 = v90;
        uint64_t v35 = [v34 countByEnumeratingWithState:&v93 objects:v100 count:16];
        if (v35)
        {
          uint64_t v36 = v35;
          uint64_t v37 = *(void *)v94;
          do
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              if (*(void *)v94 != v37) {
                objc_enumerationMutation(v34);
              }
              uint64_t v39 = *(void **)(*((void *)&v93 + 1) + 8 * i);
              id v40 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
              [v33 setObject:v39 forKeyedSubscript:v40];
            }
            uint64_t v36 = [v34 countByEnumeratingWithState:&v93 objects:v100 count:16];
          }
          while (v36);
        }

        uint64_t v41 = [v33 copy];
        double v27 = v16;
        unint64_t v42 = (void *)v41;
      }
      else
      {
        unint64_t v42 = 0;
      }
      uint64_t v43 = NSNumber;
      unint64_t v44 = +[GEOAPStateFactory sharedFactory];
      unint64_t v45 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v44, "logMsgStateTypeForType:", 65));

      id v46 = [v42 objectForKeyedSubscript:v45];
      uint64_t v47 = v46;
      id v28 = v89;
      if (v46)
      {
        id v83 = v46;
      }
      else
      {
        unint64_t v48 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v48 stateForType:65];
      }
      id v49 = NSNumber;
      uint64_t v50 = +[GEOAPStateFactory sharedFactory];
      id v51 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v50, "logMsgStateTypeForType:", 30));

      id v52 = [v42 objectForKeyedSubscript:v51];
      uint64_t v53 = v52;
      if (v52)
      {
        id v82 = v52;
      }
      else
      {
        char v54 = +[GEOAPStateFactory sharedFactory];
        id v82 = [v54 stateForType:30];
      }
      id v55 = NSNumber;
      unsigned int v56 = +[GEOAPStateFactory sharedFactory];
      id v57 = objc_msgSend(v55, "numberWithInt:", objc_msgSend(v56, "logMsgStateTypeForType:", 0));

      uint64_t v58 = [v42 objectForKeyedSubscript:v57];
      id v59 = v58;
      if (v58)
      {
        id v81 = v58;
      }
      else
      {
        id v60 = +[GEOAPStateFactory sharedFactory];
        id v81 = [v60 stateForType:0];
      }
      uint64_t v30 = v79;

      id v61 = NSNumber;
      char v62 = +[GEOAPStateFactory sharedFactory];
      uint64_t v63 = objc_msgSend(v61, "numberWithInt:", objc_msgSend(v62, "logMsgStateTypeForType:", 3));

      id v80 = (void *)v63;
      id v64 = [v42 objectForKeyedSubscript:v63];
      long long v65 = v64;
      if (v64)
      {
        id v66 = v64;
      }
      else
      {
        long long v67 = +[GEOAPStateFactory sharedFactory];
        id v66 = [v67 stateForType:3];
      }
      id v17 = v85;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v68 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v68 setEventType:58];
        id v69 = objc_alloc_init(MEMORY[0x263F41900]);
        [v68 setShowcaseSuppression:v69];

        if (v27)
        {
          uint64_t v70 = [v27 unsignedLongLongValue];
          id v71 = [v68 showcaseSuppression];
          [v71 setBusinessId:v70];

          id v17 = v85;
        }
        if (v17)
        {
          uint64_t v72 = [v17 integerValue];
          uint64_t v73 = [v68 showcaseSuppression];
          [v73 setLocalSearchProviderID:v72];
        }
        id v74 = [v68 showcaseSuppression];
        [v74 setShowcaseId:v84];

        uint64_t v75 = [v68 showcaseSuppression];
        [v75 setSuppressionReason:a6];

        id v76 = [v68 showcaseSuppression];
        [v76 setAdamId:v89];

        if (v83) {
          objc_msgSend(v68, "addLogMsgState:");
        }
        if (v82) {
          objc_msgSend(v68, "addLogMsgState:");
        }
        if (v81) {
          [v68 addLogMsgState:v81];
        }
        if (v66) {
          [v68 addLogMsgState:v66];
        }
        uint64_t v77 = +[GEOAPStateFactory sharedFactory];
        v91[0] = MEMORY[0x263EF8330];
        v91[1] = 3221225472;
        v91[2] = __180__GEOAPPortal_captureShowcaseSuppressionWithBusinessId_localSearchProviderID_showcaseId_suppressionReason_adamId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v91[3] = &unk_265345680;
        id v92 = v68;
        id v78 = v68;
        [v77 sessionStateForType:5 callback:v91];

        id v17 = v85;
      }
      v23[2](v23);

      id v18 = v84;
      goto LABEL_58;
    }
LABEL_16:
    v23[2](v23);
    id v28 = v89;
LABEL_58:

    goto LABEL_10;
  }
  v23[2](v23);
LABEL_9:
  id v28 = v89;
LABEL_10:
}

void __180__GEOAPPortal_captureShowcaseSuppressionWithBusinessId_localSearchProviderID_showcaseId_suppressionReason_adamId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __180__GEOAPPortal_captureShowcaseSuppressionWithBusinessId_localSearchProviderID_showcaseId_suppressionReason_adamId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_60()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FC = [v6 containsObject:v8];
}

void __180__GEOAPPortal_captureShowcaseSuppressionWithBusinessId_localSearchProviderID_showcaseId_suppressionReason_adamId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureImpressionEvent
{
}

+ (void)captureImpressionEventWithAdditionalStates:(id)a3 providedDropRate:(id)a4 completionQueue:(id)a5 completionBlock:(id)a6
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  v76[0] = MEMORY[0x263EF8330];
  v76[1] = 3221225472;
  v76[2] = __107__GEOAPPortal_captureImpressionEventWithAdditionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v76[3] = &unk_265345530;
  id v14 = v13;
  id v78 = v14;
  id v15 = v12;
  id v77 = v15;
  id v16 = (void (**)(void))MEMORY[0x25337B980](v76);
  id v17 = +[GEOAPServiceManager sharedManager];
  int v18 = [v17 eventCollectionIsDisabledForCurrentProcess];

  if (!v18)
  {
    if (qword_26B201980 != -1) {
      dispatch_once(&qword_26B201980, &__block_literal_global_69);
    }
    if (byte_26B2018FD) {
      goto LABEL_8;
    }
    id v21 = [MEMORY[0x263F41770] sharedConfiguration];
    id v22 = [v21 countryCode];

    int v23 = [a1 isDisabledEvent:@"impressionEvent" inCountry:v22];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v23)
    {
      goto LABEL_28;
    }
    if (v11) {
      [v11 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v64 = v22;
      id v65 = v10;
      if ([v10 count])
      {
        id v67 = v14;
        id v69 = v11;
        int v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v10, "count"));
        long long v72 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        id v26 = v10;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v72 objects:v79 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v73;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v73 != v29) {
                objc_enumerationMutation(v26);
              }
              int v31 = *(void **)(*((void *)&v72 + 1) + 8 * i);
              double v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v72 objects:v79 count:16];
          }
          while (v28);
        }

        uint64_t v33 = (void *)[v25 copy];
        id v14 = v67;
        id v11 = v69;
      }
      else
      {
        uint64_t v33 = 0;
      }
      id v34 = NSNumber;
      uint64_t v35 = +[GEOAPStateFactory sharedFactory];
      uint64_t v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 2));

      uint64_t v37 = [v33 objectForKeyedSubscript:v36];
      uint64_t v38 = v37;
      if (v37)
      {
        id v63 = v37;
      }
      else
      {
        uint64_t v39 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v39 stateForType:2];
      }
      id v40 = NSNumber;
      uint64_t v41 = +[GEOAPStateFactory sharedFactory];
      unint64_t v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 0));

      uint64_t v43 = [v33 objectForKeyedSubscript:v42];
      unint64_t v44 = v43;
      if (v43)
      {
        id v68 = v43;
      }
      else
      {
        unint64_t v45 = +[GEOAPStateFactory sharedFactory];
        id v68 = [v45 stateForType:0];
      }
      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      unint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 55));

      id v49 = [v33 objectForKeyedSubscript:v48];
      uint64_t v50 = v49;
      if (v49)
      {
        id v66 = v49;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v66 = [v51 stateForType:55];
      }
      id v52 = NSNumber;
      uint64_t v53 = +[GEOAPStateFactory sharedFactory];
      char v54 = objc_msgSend(v52, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 70));

      id v55 = [v33 objectForKeyedSubscript:v54];
      unsigned int v56 = v55;
      if (v55)
      {
        id v57 = v55;
      }
      else
      {
        uint64_t v58 = +[GEOAPStateFactory sharedFactory];
        id v57 = [v58 stateForType:70];
      }
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v59 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v59 setEventType:57];
        id v60 = objc_alloc_init(MEMORY[0x263F41860]);
        [v59 setImpressionEvent:v60];

        if (v68) {
          objc_msgSend(v59, "addLogMsgState:");
        }
        if (v63) {
          [v59 addLogMsgState:v63];
        }
        if (v66) {
          [v59 addLogMsgState:v66];
        }
        if (v57) {
          [v59 addLogMsgState:v57];
        }
        id v61 = +[GEOAPStateFactory sharedFactory];
        v70[0] = MEMORY[0x263EF8330];
        v70[1] = 3221225472;
        v70[2] = __107__GEOAPPortal_captureImpressionEventWithAdditionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v70[3] = &unk_265345680;
        id v71 = v59;
        id v62 = v59;
        [v61 sessionStateForType:8 callback:v70];
      }
      v16[2](v16);

      id v22 = v64;
      id v10 = v65;
      goto LABEL_53;
    }
LABEL_28:
    v16[2](v16);
LABEL_53:

    goto LABEL_9;
  }
  id v19 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    id v20 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v81 = v20;
    _os_log_impl(&dword_24FE56000, v19, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v16[2](v16);
LABEL_9:
}

void __107__GEOAPPortal_captureImpressionEventWithAdditionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __107__GEOAPPortal_captureImpressionEventWithAdditionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_67()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FD = [v6 containsObject:v8];
}

void __107__GEOAPPortal_captureImpressionEventWithAdditionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureNavThermalPressureWithThermalPressure:(id)a3 disableMapFeatures:(id)a4 navMapType:(int)a5 collectionTrigger:(int)a6
{
}

+ (void)captureNavThermalPressureWithThermalPressure:(id)a3 disableMapFeatures:(id)a4 navMapType:(int)a5 collectionTrigger:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a7;
  id v17 = a8;
  id v18 = a9;
  id v19 = a10;
  v142[0] = MEMORY[0x263EF8330];
  v142[1] = 3221225472;
  v142[2] = __174__GEOAPPortal_captureNavThermalPressureWithThermalPressure_disableMapFeatures_navMapType_collectionTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v142[3] = &unk_265345530;
  id v20 = v19;
  id v144 = v20;
  id v21 = v18;
  id v143 = v21;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v142);
  int v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201988 != -1) {
      dispatch_once(&qword_26B201988, &__block_literal_global_76);
    }
    if (byte_26B2018FE) {
      goto LABEL_8;
    }
    id v128 = v21;
    uint64_t v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    int v29 = [a1 isDisabledEvent:@"navThermalPressure" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_12:
        if (v17) {
          [v17 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v30 != 0.0 && v30 >= (double)arc4random() / 4294967300.0)
        {
          v22[2](v22);
LABEL_92:

          goto LABEL_9;
        }
        uint64_t v127 = v28;
        id v125 = v17;
        id v115 = v20;
        id v116 = v15;
        char v114 = v14;
        id v126 = v16;
        if ([v16 count])
        {
          int v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v16, "count"));
          long long v138 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          long long v141 = 0u;
          id v32 = v16;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v138 objects:v146 count:16];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = *(void *)v139;
            do
            {
              for (uint64_t i = 0; i != v34; ++i)
              {
                if (*(void *)v139 != v35) {
                  objc_enumerationMutation(v32);
                }
                uint64_t v37 = *(void **)(*((void *)&v138 + 1) + 8 * i);
                uint64_t v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
                [v31 setObject:v37 forKeyedSubscript:v38];
              }
              uint64_t v34 = [v32 countByEnumeratingWithState:&v138 objects:v146 count:16];
            }
            while (v34);
          }

          uint64_t v39 = (void *)[v31 copy];
          id v20 = v115;
        }
        else
        {
          uint64_t v39 = 0;
        }
        id v129 = v39;
        id v40 = NSNumber;
        uint64_t v41 = +[GEOAPStateFactory sharedFactory];
        unint64_t v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 65));

        uint64_t v43 = [v39 objectForKeyedSubscript:v42];
        unint64_t v44 = v43;
        if (v43)
        {
          id v124 = v43;
        }
        else
        {
          unint64_t v45 = +[GEOAPStateFactory sharedFactory];
          id v124 = [v45 stateForType:65];
        }
        id v46 = NSNumber;
        uint64_t v47 = +[GEOAPStateFactory sharedFactory];
        unint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 6));

        id v49 = [v129 objectForKeyedSubscript:v48];
        uint64_t v50 = v49;
        if (v49)
        {
          id v123 = v49;
        }
        else
        {
          id v51 = +[GEOAPStateFactory sharedFactory];
          id v123 = [v51 stateForType:6];
        }
        id v16 = v126;

        id v52 = NSNumber;
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        char v54 = objc_msgSend(v52, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 16));

        id v55 = [v129 objectForKeyedSubscript:v54];
        unsigned int v56 = v55;
        if (v55)
        {
          id v57 = v55;
        }
        else
        {
          uint64_t v58 = +[GEOAPStateFactory sharedFactory];
          id v57 = [v58 stateForType:16];
        }
        if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v127] & 1) != 0
          || GEOConfigGetBOOL())
        {

          unint64_t v122 = 0;
        }
        else
        {
          unint64_t v122 = v57;
        }
        id v59 = NSNumber;
        id v60 = +[GEOAPStateFactory sharedFactory];
        id v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 35));

        id v62 = [v129 objectForKeyedSubscript:v61];
        id v63 = v62;
        if (v62)
        {
          id v121 = v62;
        }
        else
        {
          id v64 = +[GEOAPStateFactory sharedFactory];
          id v121 = [v64 stateForType:35];
        }
        id v65 = NSNumber;
        id v66 = +[GEOAPStateFactory sharedFactory];
        id v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 30));

        id v68 = [v129 objectForKeyedSubscript:v67];
        id v69 = v68;
        if (v68)
        {
          id v120 = v68;
        }
        else
        {
          uint64_t v70 = +[GEOAPStateFactory sharedFactory];
          id v120 = [v70 stateForType:30];
        }
        id v71 = NSNumber;
        long long v72 = +[GEOAPStateFactory sharedFactory];
        long long v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 0));

        long long v74 = [v129 objectForKeyedSubscript:v73];
        long long v75 = v74;
        if (v74)
        {
          id v119 = v74;
        }
        else
        {
          id v76 = +[GEOAPStateFactory sharedFactory];
          id v119 = [v76 stateForType:0];
        }
        id v77 = NSNumber;
        id v78 = +[GEOAPStateFactory sharedFactory];
        id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 14));

        id v80 = [v129 objectForKeyedSubscript:v79];
        id v81 = v80;
        if (v80)
        {
          id v118 = v80;
        }
        else
        {
          uint64_t v82 = +[GEOAPStateFactory sharedFactory];
          id v118 = [v82 stateForType:14];
        }
        id v15 = v116;

        id v83 = NSNumber;
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v85 = objc_msgSend(v83, "numberWithInt:", objc_msgSend(v84, "logMsgStateTypeForType:", 9));

        uint64_t v86 = [v129 objectForKeyedSubscript:v85];
        id v87 = v86;
        if (v86)
        {
          id v88 = v86;
        }
        else
        {
          id v89 = +[GEOAPStateFactory sharedFactory];
          id v88 = [v89 stateForType:9];
        }
        id v90 = NSNumber;
        long long v91 = +[GEOAPStateFactory sharedFactory];
        id v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 42));

        long long v93 = [v129 objectForKeyedSubscript:v92];
        long long v94 = v93;
        if (v93)
        {
          id v117 = v93;
        }
        else
        {
          +[GEOAPStateFactory sharedFactory];
          long long v96 = v95 = v92;
          id v117 = [v96 stateForType:42];

          id v92 = v95;
        }
        id v17 = v125;
        uint64_t v28 = v127;
        id v14 = v114;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          uint64_t v112 = v92;
          id v113 = v88;
          id v97 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v97 setEventType:54];
          id v98 = objc_alloc_init(MEMORY[0x263F41920]);
          [v97 setThermalPressure:v98];

          if (v114)
          {
            uint64_t v99 = [v114 unsignedLongLongValue];
            unsigned __int16 v100 = [v97 thermalPressure];
            [v100 setThermalPressure:v99];
          }
          long long v136 = 0u;
          long long v137 = 0u;
          long long v134 = 0u;
          long long v135 = 0u;
          id v101 = v15;
          uint64_t v102 = [v101 countByEnumeratingWithState:&v134 objects:v145 count:16];
          if (v102)
          {
            uint64_t v103 = v102;
            uint64_t v104 = *(void *)v135;
            do
            {
              for (uint64_t j = 0; j != v103; ++j)
              {
                if (*(void *)v135 != v104) {
                  objc_enumerationMutation(v101);
                }
                uint64_t v106 = *(void **)(*((void *)&v134 + 1) + 8 * j);
                id v107 = [v97 thermalPressure];
                objc_msgSend(v107, "addDisableMapFeatures:", objc_msgSend(v106, "integerValue"));
              }
              uint64_t v103 = [v101 countByEnumeratingWithState:&v134 objects:v145 count:16];
            }
            while (v103);
          }

          uint64_t v108 = [v97 thermalPressure];
          [v108 setNavMapType:a5];

          uint64_t v109 = [v97 thermalPressure];
          [v109 setCollectionTrigger:a6];

          if (v124) {
            objc_msgSend(v97, "addLogMsgState:");
          }
          id v16 = v126;
          uint64_t v28 = v127;
          if (v123) {
            objc_msgSend(v97, "addLogMsgState:");
          }
          if (v122) {
            objc_msgSend(v97, "addLogMsgState:");
          }
          id v17 = v125;
          id v20 = v115;
          if (v120) {
            [v97 addLogMsgState:v120];
          }
          if (v119) {
            objc_msgSend(v97, "addLogMsgState:");
          }
          if (v121) {
            [v97 addLogMsgState:v121];
          }
          if (v113) {
            objc_msgSend(v97, "addLogMsgState:");
          }
          if (v117) {
            [v97 addLogMsgState:v117];
          }
          if (v118) {
            [v97 addLogMsgState:v118];
          }
          uint64_t v110 = +[GEOAPStateFactory sharedFactory];
          v132[0] = MEMORY[0x263EF8330];
          v132[1] = 3221225472;
          v132[2] = __174__GEOAPPortal_captureNavThermalPressureWithThermalPressure_disableMapFeatures_navMapType_collectionTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v132[3] = &unk_265345680;
          id v133 = v97;
          id v111 = v97;
          [v110 sessionStateForType:6 callback:v132];

          id v92 = v112;
          id v88 = v113;
        }
        v22[2](v22);

LABEL_91:
        id v21 = v128;
        goto LABEL_92;
      }
    }
    else if (!v29)
    {
      goto LABEL_12;
    }
    v22[2](v22);
    goto LABEL_91;
  }
  int v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    id v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v148 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v22[2](v22);
LABEL_9:
}

void __174__GEOAPPortal_captureNavThermalPressureWithThermalPressure_disableMapFeatures_navMapType_collectionTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __174__GEOAPPortal_captureNavThermalPressureWithThermalPressure_disableMapFeatures_navMapType_collectionTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_74()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FE = [v6 containsObject:v8];
}

void __174__GEOAPPortal_captureNavThermalPressureWithThermalPressure_disableMapFeatures_navMapType_collectionTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)capturePlaceCacheLookupWithRequestAppIdentifier:(id)a3 businessId:(id)a4 localSearchProviderID:(id)a5 bytes:(id)a6 lookupResult:(int)a7
{
}

+ (void)capturePlaceCacheLookupWithRequestAppIdentifier:(id)a3 businessId:(id)a4 localSearchProviderID:(id)a5 bytes:(id)a6 lookupResult:(int)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  id v77 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v79 = a8;
  id v78 = a9;
  id v19 = a10;
  id v20 = a11;
  v86[0] = MEMORY[0x263EF8330];
  v86[1] = 3221225472;
  v86[2] = __181__GEOAPPortal_capturePlaceCacheLookupWithRequestAppIdentifier_businessId_localSearchProviderID_bytes_lookupResult_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v86[3] = &unk_265345530;
  id v76 = v20;
  id v88 = v76;
  id v75 = v19;
  id v87 = v75;
  id v21 = (void (**)(void))MEMORY[0x25337B980](v86);
  id v22 = +[GEOAPServiceManager sharedManager];
  LODWORD(a6) = [v22 eventCollectionIsDisabledForCurrentProcess];

  if (!a6)
  {
    if (qword_26B201990 != -1) {
      dispatch_once(&qword_26B201990, &__block_literal_global_83);
    }
    int v25 = v18;
    id v26 = v78;
    uint64_t v27 = v79;
    if (byte_26B2018FF)
    {
      v21[2](v21);
      goto LABEL_49;
    }
    uint64_t v28 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v29 = [v28 countryCode];

    id v30 = a1;
    int v31 = (void *)v29;
    int v32 = [v30 isDisabledEvent:@"placeCacheLookup" inCountry:v29];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_27;
      }
    }
    else if (v32)
    {
      goto LABEL_27;
    }
    if (v78) {
      [v78 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v33 == 0.0 || v33 < (double)arc4random() / 4294967300.0)
    {
      id v71 = v17;
      long long v73 = v16;
      long long v72 = (void *)v29;
      if ([v79 count])
      {
        uint64_t v34 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v79, "count"));
        long long v82 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        id v35 = v79;
        uint64_t v36 = [v35 countByEnumeratingWithState:&v82 objects:v89 count:16];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v38 = *(void *)v83;
          do
          {
            for (uint64_t i = 0; i != v37; ++i)
            {
              if (*(void *)v83 != v38) {
                objc_enumerationMutation(v35);
              }
              id v40 = *(void **)(*((void *)&v82 + 1) + 8 * i);
              uint64_t v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
              [v34 setObject:v40 forKeyedSubscript:v41];
            }
            uint64_t v37 = [v35 countByEnumeratingWithState:&v82 objects:v89 count:16];
          }
          while (v37);
        }

        unint64_t v42 = (void *)[v34 copy];
        int v25 = v18;
        int v31 = v72;
      }
      else
      {
        unint64_t v42 = 0;
      }
      uint64_t v43 = NSNumber;
      unint64_t v44 = +[GEOAPStateFactory sharedFactory];
      unint64_t v45 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v44, "logMsgStateTypeForType:", 65));

      id v46 = [v42 objectForKeyedSubscript:v45];
      uint64_t v47 = v46;
      if (v46)
      {
        id v48 = v46;
      }
      else
      {
        id v49 = +[GEOAPStateFactory sharedFactory];
        id v48 = [v49 stateForType:65];
      }
      uint64_t v50 = NSNumber;
      id v51 = +[GEOAPStateFactory sharedFactory];
      uint64_t v52 = objc_msgSend(v50, "numberWithInt:", objc_msgSend(v51, "logMsgStateTypeForType:", 0));

      id v69 = v42;
      uint64_t v70 = (void *)v52;
      uint64_t v53 = [v42 objectForKeyedSubscript:v52];
      char v54 = v53;
      uint64_t v27 = v79;
      if (v53)
      {
        id v55 = v53;
      }
      else
      {
        unsigned int v56 = +[GEOAPStateFactory sharedFactory];
        id v55 = [v56 stateForType:0];
      }
      id v17 = v71;
      id v26 = v78;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v57 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v57 setEventType:59];
        id v58 = objc_alloc_init(MEMORY[0x263F418C0]);
        [v57 setPlaceCacheLookup:v58];

        id v59 = [v57 placeCacheLookup];
        [v59 setRequestAppIdentifier:v77];

        if (v73)
        {
          uint64_t v60 = [v73 unsignedLongLongValue];
          id v61 = [v57 placeCacheLookup];
          [v61 setBusinessId:v60];
        }
        if (v71)
        {
          uint64_t v62 = [v71 integerValue];
          id v63 = [v57 placeCacheLookup];
          [v63 setLocalSearchProviderID:v62];
        }
        if (v25)
        {
          uint64_t v64 = [v25 unsignedLongLongValue];
          id v65 = [v57 placeCacheLookup];
          [v65 setBytes:v64];
        }
        id v66 = [v57 placeCacheLookup];
        [v66 setLookupResult:a7];

        if (v48) {
          [v57 addLogMsgState:v48];
        }
        if (v55) {
          [v57 addLogMsgState:v55];
        }
        id v67 = +[GEOAPStateFactory sharedFactory];
        v80[0] = MEMORY[0x263EF8330];
        v80[1] = 3221225472;
        v80[2] = __181__GEOAPPortal_capturePlaceCacheLookupWithRequestAppIdentifier_businessId_localSearchProviderID_bytes_lookupResult_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v80[3] = &unk_265345680;
        id v81 = v57;
        id v68 = v57;
        [v67 sessionStateForType:6 callback:v80];

        int v31 = v72;
      }
      v21[2](v21);

      id v16 = v73;
      goto LABEL_48;
    }
LABEL_27:
    v21[2](v21);
LABEL_48:

    goto LABEL_49;
  }
  int v23 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    int v24 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v91 = v24;
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v21[2](v21);
  int v25 = v18;
  id v26 = v78;
  uint64_t v27 = v79;
LABEL_49:
}

void __181__GEOAPPortal_capturePlaceCacheLookupWithRequestAppIdentifier_businessId_localSearchProviderID_bytes_lookupResult_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __181__GEOAPPortal_capturePlaceCacheLookupWithRequestAppIdentifier_businessId_localSearchProviderID_bytes_lookupResult_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_81()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B2018FF = [v6 containsObject:v8];
}

void __181__GEOAPPortal_capturePlaceCacheLookupWithRequestAppIdentifier_businessId_localSearchProviderID_bytes_lookupResult_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureUgcDeleteLogsWithCertificates:(id)a3 signature:(id)a4 trigger:(int)a5
{
}

+ (void)captureUgcDeleteLogsWithCertificates:(id)a3 signature:(id)a4 trigger:(int)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  id v89 = a3;
  id v14 = a4;
  id v15 = a6;
  id v16 = a7;
  id v17 = a8;
  id v18 = a9;
  v100[0] = MEMORY[0x263EF8330];
  v100[1] = 3221225472;
  v100[2] = __136__GEOAPPortal_captureUgcDeleteLogsWithCertificates_signature_trigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v100[3] = &unk_265345530;
  id v19 = v18;
  id v102 = v19;
  id v20 = v17;
  id v101 = v20;
  id v21 = (void (**)(void))MEMORY[0x25337B980](v100);
  id v22 = +[GEOAPServiceManager sharedManager];
  int v23 = [v22 eventCollectionIsDisabledForCurrentProcess];

  if (!v23)
  {
    if (qword_26B201998 != -1) {
      dispatch_once(&qword_26B201998, &__block_literal_global_90);
    }
    if (byte_26B201900) {
      goto LABEL_8;
    }
    id v26 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v27 = [v26 countryCode];

    int v28 = [a1 isDisabledEvent:@"ugcDeleteLogs" inCountry:v27];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v28)
    {
      goto LABEL_28;
    }
    if (v16) {
      [v16 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v29 == 0.0 || v29 < (double)arc4random() / 4294967300.0)
    {
      long long v84 = v27;
      id v86 = v14;
      id v85 = v15;
      id v80 = v19;
      id v81 = v16;
      if ([v15 count])
      {
        id v30 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v15, "count"));
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v99 = 0u;
        id v31 = v15;
        uint64_t v32 = [v31 countByEnumeratingWithState:&v96 objects:v104 count:16];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = *(void *)v97;
          do
          {
            for (uint64_t i = 0; i != v33; ++i)
            {
              if (*(void *)v97 != v34) {
                objc_enumerationMutation(v31);
              }
              uint64_t v36 = *(void **)(*((void *)&v96 + 1) + 8 * i);
              uint64_t v37 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "stateType"));
              [v30 setObject:v36 forKeyedSubscript:v37];
            }
            uint64_t v33 = [v31 countByEnumeratingWithState:&v96 objects:v104 count:16];
          }
          while (v33);
        }

        uint64_t v38 = (void *)[v30 copy];
        id v19 = v80;
        id v16 = v81;
      }
      else
      {
        uint64_t v38 = 0;
      }
      uint64_t v39 = NSNumber;
      id v40 = +[GEOAPStateFactory sharedFactory];
      uint64_t v41 = objc_msgSend(v39, "numberWithInt:", objc_msgSend(v40, "logMsgStateTypeForType:", 29));

      id v87 = v38;
      unint64_t v42 = [v38 objectForKeyedSubscript:v41];
      uint64_t v43 = v42;
      if (v42)
      {
        id v83 = v42;
      }
      else
      {
        unint64_t v44 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v44 stateForType:29];
      }
      unint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 0));

      id v48 = [v87 objectForKeyedSubscript:v47];
      id v49 = v48;
      if (v48)
      {
        id v82 = v48;
      }
      else
      {
        uint64_t v50 = +[GEOAPStateFactory sharedFactory];
        id v82 = [v50 stateForType:0];
      }
      id v51 = NSNumber;
      uint64_t v52 = +[GEOAPStateFactory sharedFactory];
      uint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 3));

      char v54 = v87;
      id v55 = [v87 objectForKeyedSubscript:v53];
      unsigned int v56 = v55;
      if (v55)
      {
        id v57 = v55;
      }
      else
      {
        id v58 = +[GEOAPStateFactory sharedFactory];
        id v57 = [v58 stateForType:3];

        char v54 = v87;
      }
      uint64_t v27 = v84;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v78 = v53;
        id v79 = v57;
        id v59 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v59 setEventType:49];
        id v60 = objc_alloc_init(MEMORY[0x263F41868]);
        [v59 setLogDiscard:v60];

        id v61 = [v59 logDiscard];
        uint64_t v62 = [v61 certificates];

        if (!v62)
        {
          id v63 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v89, "count"));
          uint64_t v64 = [v59 logDiscard];
          [v64 setCertificates:v63];
        }
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        id v65 = v89;
        uint64_t v66 = [v65 countByEnumeratingWithState:&v92 objects:v103 count:16];
        if (v66)
        {
          uint64_t v67 = v66;
          uint64_t v68 = *(void *)v93;
          do
          {
            for (uint64_t j = 0; j != v67; ++j)
            {
              if (*(void *)v93 != v68) {
                objc_enumerationMutation(v65);
              }
              uint64_t v70 = *(void **)(*((void *)&v92 + 1) + 8 * j);
              id v71 = [v59 logDiscard];
              long long v72 = [v71 certificates];
              long long v73 = (void *)[v70 copy];
              [v72 addObject:v73];
            }
            uint64_t v67 = [v65 countByEnumeratingWithState:&v92 objects:v103 count:16];
          }
          while (v67);
        }

        long long v74 = [v59 logDiscard];
        [v74 setSignature:v86];

        id v75 = [v59 logDiscard];
        [v75 setTrigger:a5];

        if (v83) {
          objc_msgSend(v59, "addLogMsgState:");
        }
        uint64_t v27 = v84;
        id v15 = v85;
        id v19 = v80;
        id v16 = v81;
        if (v82) {
          objc_msgSend(v59, "addLogMsgState:");
        }
        if (v79) {
          [v59 addLogMsgState:v79];
        }
        id v76 = +[GEOAPStateFactory sharedFactory];
        v90[0] = MEMORY[0x263EF8330];
        v90[1] = 3221225472;
        v90[2] = __136__GEOAPPortal_captureUgcDeleteLogsWithCertificates_signature_trigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v90[3] = &unk_265345680;
        id v91 = v59;
        id v77 = v59;
        [v76 sessionStateForType:15 callback:v90];

        uint64_t v53 = v78;
        id v57 = v79;
        char v54 = v87;
      }
      v21[2](v21);

      id v14 = v86;
      goto LABEL_57;
    }
LABEL_28:
    v21[2](v21);
LABEL_57:

    goto LABEL_9;
  }
  int v24 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    int v25 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v106 = v25;
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v21[2](v21);
LABEL_9:
}

void __136__GEOAPPortal_captureUgcDeleteLogsWithCertificates_signature_trigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __136__GEOAPPortal_captureUgcDeleteLogsWithCertificates_signature_trigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_88()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201900 = [v6 containsObject:v8];
}

void __136__GEOAPPortal_captureUgcDeleteLogsWithCertificates_signature_trigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)capturePressureDataWithPressureData:(id)a3
{
}

+ (void)capturePressureDataWithPressureData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v60[0] = MEMORY[0x263EF8330];
  v60[1] = 3221225472;
  v60[2] = __117__GEOAPPortal_capturePressureDataWithPressureData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v60[3] = &unk_265345530;
  id v17 = v16;
  id v62 = v17;
  id v18 = v15;
  id v61 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v60);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B2019A0 != -1) {
      dispatch_once(&qword_26B2019A0, &__block_literal_global_97);
    }
    if (byte_26B201901) {
      goto LABEL_8;
    }
    int v24 = [MEMORY[0x263F41770] sharedConfiguration];
    int v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"pressureData" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v52 = v25;
      id v53 = v12;
      if ([v13 count])
      {
        id v49 = v17;
        id v50 = v14;
        int v28 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id v29 = v13;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v57;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v57 != v32) {
                objc_enumerationMutation(v29);
              }
              uint64_t v34 = *(void **)(*((void *)&v56 + 1) + 8 * i);
              id v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v34, "stateType", v49));
              [v28 setObject:v34 forKeyedSubscript:v35];
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
          }
          while (v31);
        }

        uint64_t v36 = (void *)[v28 copy];
        id v17 = v49;
        id v14 = v50;
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v37 = NSNumber;
      uint64_t v38 = +[GEOAPStateFactory sharedFactory];
      uint64_t v39 = objc_msgSend(v37, "numberWithInt:", objc_msgSend(v38, "logMsgStateTypeForType:", 0));

      id v51 = v36;
      id v40 = [v36 objectForKeyedSubscript:v39];
      uint64_t v41 = v40;
      if (v40)
      {
        id v42 = v40;
      }
      else
      {
        uint64_t v43 = +[GEOAPStateFactory sharedFactory];
        id v42 = [v43 stateForType:0];
      }
      int v25 = v52;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v44 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v44 setEventType:51];
        id v45 = objc_alloc_init(MEMORY[0x263F418D0]);
        [v44 setPressureData:v45];

        id v46 = [v44 pressureData];
        [v46 setPressureData:v53];

        if (v42) {
          [v44 addLogMsgState:v42];
        }
        uint64_t v47 = +[GEOAPStateFactory sharedFactory];
        v54[0] = MEMORY[0x263EF8330];
        v54[1] = 3221225472;
        v54[2] = __117__GEOAPPortal_capturePressureDataWithPressureData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v54[3] = &unk_265345680;
        id v55 = v44;
        id v48 = v44;
        [v47 sessionStateForType:13 callback:v54];

        int v25 = v52;
      }
      v19[2](v19);

      id v12 = v53;
      goto LABEL_38;
    }
LABEL_28:
    v19[2](v19);
LABEL_38:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    int v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v65 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __117__GEOAPPortal_capturePressureDataWithPressureData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __117__GEOAPPortal_capturePressureDataWithPressureData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_95()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201901 = [v6 containsObject:v8];
}

void __117__GEOAPPortal_capturePressureDataWithPressureData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureNetSelectionHarvestWithHarvestData:(id)a3
{
}

+ (void)captureNetSelectionHarvestWithHarvestData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a5;
  id v13 = a6;
  id v14 = a7;
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 3221225472;
  v35[2] = __123__GEOAPPortal_captureNetSelectionHarvestWithHarvestData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v35[3] = &unk_265345530;
  id v15 = v14;
  id v37 = v15;
  id v16 = v13;
  id v36 = v16;
  id v17 = (void (**)(void))MEMORY[0x25337B980](v35);
  id v18 = +[GEOAPServiceManager sharedManager];
  int v19 = [v18 eventCollectionIsDisabledForCurrentProcess];

  if (!v19)
  {
    if (qword_26B2019A8 != -1) {
      dispatch_once(&qword_26B2019A8, &__block_literal_global_104);
    }
    if (byte_26B201902) {
      goto LABEL_8;
    }
    id v22 = [MEMORY[0x263F41770] sharedConfiguration];
    int v23 = [v22 countryCode];

    char v24 = [a1 isDisabledEvent:@"netSelectionHarvest" inCountry:v23];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_22;
      }
    }
    else if (v24)
    {
LABEL_22:
      v17[2](v17);

      goto LABEL_9;
    }
    int v25 = +[GEOAPServiceManager sharedManager];
    int v26 = [v25 platformDiagAndUsage];

    if (v26)
    {
      if (v12) {
        [v12 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if ((v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0) && (GEOConfigGetBOOL() & 1) == 0)
      {
        id v28 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v28 setEventType:56];
        id v29 = objc_alloc_init(MEMORY[0x263F418A8]);
        [v28 setNetworkSelectionHarvest:v29];

        uint64_t v30 = [v28 networkSelectionHarvest];
        [v30 setHarvestData:v11];

        uint64_t v31 = +[GEOAPStateFactory sharedFactory];
        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        v33[2] = __123__GEOAPPortal_captureNetSelectionHarvestWithHarvestData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v33[3] = &unk_265345680;
        id v34 = v28;
        id v32 = v28;
        [v31 sessionStateForType:19 callback:v33];
      }
    }
    goto LABEL_22;
  }
  id v20 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    int v21 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v39 = v21;
    _os_log_impl(&dword_24FE56000, v20, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v17[2](v17);
LABEL_9:
}

void __123__GEOAPPortal_captureNetSelectionHarvestWithHarvestData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __123__GEOAPPortal_captureNetSelectionHarvestWithHarvestData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_102()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201902 = [v6 containsObject:v8];
}

void __123__GEOAPPortal_captureNetSelectionHarvestWithHarvestData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)capturePeriodicSettingsWithMapSettings:(id)a3 mapUiShown:(id)a4 mapsFeatures:(id)a5 mapsUserSettings:(id)a6 routingSettings:(id)a7
{
}

+ (void)capturePeriodicSettingsWithMapSettings:(id)a3 mapUiShown:(id)a4 mapsFeatures:(id)a5 mapsUserSettings:(id)a6 routingSettings:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  id v82 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v81 = a7;
  id v83 = a8;
  id v20 = a9;
  id v21 = a10;
  id v22 = a11;
  v91[0] = MEMORY[0x263EF8330];
  v91[1] = 3221225472;
  v91[2] = __177__GEOAPPortal_capturePeriodicSettingsWithMapSettings_mapUiShown_mapsFeatures_mapsUserSettings_routingSettings_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v91[3] = &unk_265345530;
  id v23 = v22;
  id v93 = v23;
  id v80 = v21;
  id v92 = v80;
  char v24 = (void (**)(void))MEMORY[0x25337B980](v91);
  int v25 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v25 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B2019B0 != -1) {
      dispatch_once(&qword_26B2019B0, &__block_literal_global_111);
    }
    id v28 = v83;
    id v29 = v20;
    if (byte_26B201903)
    {
      v24[2](v24);
      goto LABEL_48;
    }
    id v30 = v18;
    uint64_t v31 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v32 = [v31 countryCode];

    id v79 = (void *)v32;
    int v33 = [a1 isDisabledEvent:@"periodicSettings" inCountry:v32];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if (!v33)
    {
LABEL_11:
      id v18 = v30;
      id v29 = v20;
      if (v20) {
        [v20 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v34 == 0.0 || v34 < (double)arc4random() / 4294967300.0)
      {
        id v78 = v19;
        if ([v83 count])
        {
          id v74 = v23;
          id v76 = v18;
          id v35 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v83, "count"));
          long long v87 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          id v36 = v83;
          uint64_t v37 = [v36 countByEnumeratingWithState:&v87 objects:v94 count:16];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)v88;
            do
            {
              for (uint64_t i = 0; i != v38; ++i)
              {
                if (*(void *)v88 != v39) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v41 = *(void **)(*((void *)&v87 + 1) + 8 * i);
                id v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType", v74));
                [v35 setObject:v41 forKeyedSubscript:v42];
              }
              uint64_t v38 = [v36 countByEnumeratingWithState:&v87 objects:v94 count:16];
            }
            while (v38);
          }

          uint64_t v43 = [v35 copy];
          id v23 = v74;
          id v18 = v76;
          id v29 = v20;
          id v44 = (void *)v43;
        }
        else
        {
          id v44 = 0;
        }
        id v45 = NSNumber;
        id v46 = +[GEOAPStateFactory sharedFactory];
        uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 30));

        id v48 = [v44 objectForKeyedSubscript:v47];
        id v49 = v48;
        if (v48)
        {
          id v77 = v48;
        }
        else
        {
          id v50 = +[GEOAPStateFactory sharedFactory];
          id v77 = [v50 stateForType:30];
        }
        id v51 = NSNumber;
        uint64_t v52 = +[GEOAPStateFactory sharedFactory];
        id v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 0));

        char v54 = [v44 objectForKeyedSubscript:v53];
        id v55 = v54;
        if (v54)
        {
          id v75 = v54;
        }
        else
        {
          long long v56 = +[GEOAPStateFactory sharedFactory];
          id v75 = [v56 stateForType:0];
        }
        long long v57 = NSNumber;
        long long v58 = +[GEOAPStateFactory sharedFactory];
        long long v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 3));

        id v60 = [v44 objectForKeyedSubscript:v59];
        id v61 = v60;
        if (v60)
        {
          id v62 = v60;
        }
        else
        {
          +[GEOAPStateFactory sharedFactory];
          v64 = id v63 = v59;
          id v62 = [v64 stateForType:3];

          long long v59 = v63;
        }
        id v28 = v83;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          long long v84 = v59;
          id v65 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v65 setEventType:53];
          id v66 = objc_alloc_init(MEMORY[0x263F418B8]);
          [v65 setPeriodicSettingsSummary:v66];

          uint64_t v67 = [v65 periodicSettingsSummary];
          [v67 setMapSettings:v82];

          uint64_t v68 = [v65 periodicSettingsSummary];
          [v68 setMapUiShown:v17];

          id v69 = [v65 periodicSettingsSummary];
          [v69 setMapsFeatures:v18];

          uint64_t v70 = [v65 periodicSettingsSummary];
          [v70 setMapsUserSettings:v78];

          id v71 = [v65 periodicSettingsSummary];
          [v71 setRoutingSettings:v81];

          if (v75) {
            objc_msgSend(v65, "addLogMsgState:");
          }
          if (v62) {
            [v65 addLogMsgState:v62];
          }
          if (v77) {
            [v65 addLogMsgState:v77];
          }
          long long v72 = +[GEOAPStateFactory sharedFactory];
          v85[0] = MEMORY[0x263EF8330];
          v85[1] = 3221225472;
          v85[2] = __177__GEOAPPortal_capturePeriodicSettingsWithMapSettings_mapUiShown_mapsFeatures_mapsUserSettings_routingSettings_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v85[3] = &unk_265345680;
          id v86 = v65;
          id v73 = v65;
          [v72 sessionStateForType:7 callback:v85];

          long long v59 = v84;
        }
        v24[2](v24);

        id v19 = v78;
      }
      else
      {
        v24[2](v24);
      }
      goto LABEL_47;
    }
    v24[2](v24);
    id v18 = v30;
    id v29 = v20;
LABEL_47:

    goto LABEL_48;
  }
  int v26 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    double v27 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v96 = v27;
    _os_log_impl(&dword_24FE56000, v26, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v24[2](v24);
  id v28 = v83;
  id v29 = v20;
LABEL_48:
}

void __177__GEOAPPortal_capturePeriodicSettingsWithMapSettings_mapUiShown_mapsFeatures_mapsUserSettings_routingSettings_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __177__GEOAPPortal_capturePeriodicSettingsWithMapSettings_mapUiShown_mapsFeatures_mapsUserSettings_routingSettings_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_109()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201903 = [v6 containsObject:v8];
}

void __177__GEOAPPortal_capturePeriodicSettingsWithMapSettings_mapUiShown_mapsFeatures_mapsUserSettings_routingSettings_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)capturePoiBusynessDataWithTimestamp:(id)a3 GEOLatLng_lat:(id)a4 GEOLatLng_lng:(id)a5 horizontalAccuracy:(id)a6 verticalAccuracy:(id)a7 altitude:(id)a8 poiPredictions:(id)a9
{
}

+ (void)capturePoiBusynessDataWithTimestamp:(id)a3 GEOLatLng_lat:(id)a4 GEOLatLng_lng:(id)a5 horizontalAccuracy:(id)a6 verticalAccuracy:(id)a7 altitude:(id)a8 poiPredictions:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  id v106 = a3;
  id v18 = a4;
  id v105 = a5;
  id v104 = a6;
  id v103 = a7;
  id v102 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = a13;
  v117[0] = MEMORY[0x263EF8330];
  v117[1] = 3221225472;
  v117[2] = __205__GEOAPPortal_capturePoiBusynessDataWithTimestamp_GEOLatLng_lat_GEOLatLng_lng_horizontalAccuracy_verticalAccuracy_altitude_poiPredictions_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v117[3] = &unk_265345530;
  id v24 = v23;
  id v119 = v24;
  id v25 = v22;
  id v118 = v25;
  int v26 = (void (**)(void))MEMORY[0x25337B980](v117);
  double v27 = +[GEOAPServiceManager sharedManager];
  LODWORD(a5) = [v27 eventCollectionIsDisabledForCurrentProcess];

  if (!a5)
  {
    if (qword_26B2019B8 != -1) {
      dispatch_once(&qword_26B2019B8, &__block_literal_global_118);
    }
    uint64_t v31 = v106;
    if (byte_26B201904)
    {
      v26[2](v26);
      goto LABEL_60;
    }
    long long v99 = v19;
    uint64_t v32 = [MEMORY[0x263F41770] sharedConfiguration];
    int v33 = [v32 countryCode];

    int v34 = [a1 isDisabledEvent:@"poiBusynessData" inCountry:v33];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        id v98 = v24;
        if (v21) {
          [v21 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v19 = v99;
        if (v35 != 0.0 && v35 >= (double)arc4random() / 4294967300.0)
        {
          v26[2](v26);
LABEL_59:

          goto LABEL_60;
        }
        id v96 = v18;
        id v97 = v20;
        long long v94 = v33;
        id v95 = v21;
        if ([v20 count])
        {
          id v36 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          id v37 = v20;
          uint64_t v38 = [v37 countByEnumeratingWithState:&v113 objects:v121 count:16];
          if (v38)
          {
            uint64_t v39 = v38;
            uint64_t v40 = *(void *)v114;
            do
            {
              for (uint64_t i = 0; i != v39; ++i)
              {
                if (*(void *)v114 != v40) {
                  objc_enumerationMutation(v37);
                }
                id v42 = *(void **)(*((void *)&v113 + 1) + 8 * i);
                uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v42, "stateType"));
                [v36 setObject:v42 forKeyedSubscript:v43];
              }
              uint64_t v39 = [v37 countByEnumeratingWithState:&v113 objects:v121 count:16];
            }
            while (v39);
          }

          id v44 = (void *)[v36 copy];
          uint64_t v31 = v106;
          id v21 = v95;
          id v18 = v96;
          int v33 = v94;
        }
        else
        {
          id v44 = 0;
        }
        id v45 = NSNumber;
        id v46 = +[GEOAPStateFactory sharedFactory];
        uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 0));

        id v93 = (void *)v47;
        id v48 = [v44 objectForKeyedSubscript:v47];
        id v49 = v48;
        id v101 = v44;
        if (v48)
        {
          id v50 = v48;
        }
        else
        {
          id v51 = +[GEOAPStateFactory sharedFactory];
          uint64_t v52 = [v51 stateForType:0];

          id v50 = (id)v52;
        }
        id v24 = v98;

        id v20 = v97;
        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v92 = v50;
          id v53 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v53 setEventType:52];
          id v54 = objc_alloc_init(MEMORY[0x263F418B0]);
          [v53 setPoiBusynessData:v54];

          if (v31)
          {
            [v31 doubleValue];
            double v56 = v55;
            long long v57 = [v53 poiBusynessData];
            [v57 setTimestamp:v56];
          }
          id v58 = objc_alloc_init(MEMORY[0x263F417B8]);
          long long v59 = [v53 poiBusynessData];
          [v59 setLocation:v58];

          if (v18)
          {
            [v18 doubleValue];
            double v61 = v60;
            id v62 = [v53 poiBusynessData];
            id v63 = [v62 location];
            [v63 setLat:v61];
          }
          if (v105)
          {
            [v105 doubleValue];
            double v65 = v64;
            id v66 = [v53 poiBusynessData];
            uint64_t v67 = [v66 location];
            [v67 setLng:v65];
          }
          if (v104)
          {
            [v104 doubleValue];
            double v69 = v68;
            uint64_t v70 = [v53 poiBusynessData];
            [v70 setHorizontalAccuracy:v69];
          }
          if (v103)
          {
            [v103 doubleValue];
            double v72 = v71;
            id v73 = [v53 poiBusynessData];
            [v73 setVerticalAccuracy:v72];
          }
          if (v102)
          {
            [v102 doubleValue];
            double v75 = v74;
            id v76 = [v53 poiBusynessData];
            [v76 setAltitude:v75];
          }
          id v77 = [v53 poiBusynessData];
          id v78 = [v77 poiPredictions];

          if (!v78)
          {
            id v79 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v99, "count"));
            id v80 = [v53 poiBusynessData];
            [v80 setPoiPredictions:v79];
          }
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          id v81 = v99;
          uint64_t v82 = [v81 countByEnumeratingWithState:&v109 objects:v120 count:16];
          if (v82)
          {
            uint64_t v83 = v82;
            uint64_t v84 = *(void *)v110;
            do
            {
              for (uint64_t j = 0; j != v83; ++j)
              {
                if (*(void *)v110 != v84) {
                  objc_enumerationMutation(v81);
                }
                id v86 = *(void **)(*((void *)&v109 + 1) + 8 * j);
                long long v87 = [v53 poiBusynessData];
                long long v88 = [v87 poiPredictions];
                long long v89 = (void *)[v86 copy];
                [v88 addObject:v89];
              }
              uint64_t v83 = [v81 countByEnumeratingWithState:&v109 objects:v120 count:16];
            }
            while (v83);
          }

          if (v92) {
            objc_msgSend(v53, "addLogMsgState:");
          }
          long long v90 = +[GEOAPStateFactory sharedFactory];
          v107[0] = MEMORY[0x263EF8330];
          v107[1] = 3221225472;
          v107[2] = __205__GEOAPPortal_capturePoiBusynessDataWithTimestamp_GEOLatLng_lat_GEOLatLng_lng_horizontalAccuracy_verticalAccuracy_altitude_poiPredictions_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v107[3] = &unk_265345680;
          id v108 = v53;
          id v91 = v53;
          [v90 sessionStateForType:16 callback:v107];

          id v50 = v92;
          uint64_t v31 = v106;
          id v18 = v96;
          id v20 = v97;
          int v33 = v94;
          id v21 = v95;
          id v24 = v98;
        }
        v26[2](v26);

LABEL_58:
        id v19 = v99;
        goto LABEL_59;
      }
    }
    else if (!v34)
    {
      goto LABEL_11;
    }
    v26[2](v26);
    goto LABEL_58;
  }
  id v28 = v19;
  id v29 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    id v30 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v123 = v30;
    _os_log_impl(&dword_24FE56000, v29, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v26[2](v26);
  uint64_t v31 = v106;
  id v19 = v28;
LABEL_60:
}

void __205__GEOAPPortal_capturePoiBusynessDataWithTimestamp_GEOLatLng_lat_GEOLatLng_lng_horizontalAccuracy_verticalAccuracy_altitude_poiPredictions_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __205__GEOAPPortal_capturePoiBusynessDataWithTimestamp_GEOLatLng_lat_GEOLatLng_lng_horizontalAccuracy_verticalAccuracy_altitude_poiPredictions_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_116()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201904 = [v6 containsObject:v8];
}

void __205__GEOAPPortal_capturePoiBusynessDataWithTimestamp_GEOLatLng_lat_GEOLatLng_lng_horizontalAccuracy_verticalAccuracy_altitude_poiPredictions_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureRealTrafficWithLocationCollection:(id)a3
{
}

+ (void)captureRealTrafficWithLocationCollection:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v60[0] = MEMORY[0x263EF8330];
  v60[1] = 3221225472;
  v60[2] = __122__GEOAPPortal_captureRealTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v60[3] = &unk_265345530;
  id v17 = v16;
  id v62 = v17;
  id v18 = v15;
  id v61 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v60);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B2019C0 != -1) {
      dispatch_once(&qword_26B2019C0, &__block_literal_global_126);
    }
    if (byte_26B201905) {
      goto LABEL_8;
    }
    id v24 = [MEMORY[0x263F41770] sharedConfiguration];
    id v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"realTraffic" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v52 = v25;
      id v53 = v12;
      if ([v13 count])
      {
        id v49 = v17;
        id v50 = v14;
        id v28 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id v29 = v13;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v57;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v57 != v32) {
                objc_enumerationMutation(v29);
              }
              int v34 = *(void **)(*((void *)&v56 + 1) + 8 * i);
              double v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v34, "stateType", v49));
              [v28 setObject:v34 forKeyedSubscript:v35];
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
          }
          while (v31);
        }

        id v36 = (void *)[v28 copy];
        id v17 = v49;
        id v14 = v50;
      }
      else
      {
        id v36 = 0;
      }
      id v37 = NSNumber;
      uint64_t v38 = +[GEOAPStateFactory sharedFactory];
      uint64_t v39 = objc_msgSend(v37, "numberWithInt:", objc_msgSend(v38, "logMsgStateTypeForType:", 0));

      id v51 = v36;
      uint64_t v40 = [v36 objectForKeyedSubscript:v39];
      uint64_t v41 = v40;
      if (v40)
      {
        id v42 = v40;
      }
      else
      {
        uint64_t v43 = +[GEOAPStateFactory sharedFactory];
        id v42 = [v43 stateForType:0];
      }
      id v25 = v52;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v44 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v44 setEventType:26];
        id v45 = objc_alloc_init(MEMORY[0x263F418E0]);
        [v44 setRealtimeTrafficProbeCollection:v45];

        id v46 = [v44 realtimeTrafficProbeCollection];
        [v46 setLocationCollection:v53];

        if (v42) {
          [v44 addLogMsgState:v42];
        }
        uint64_t v47 = +[GEOAPStateFactory sharedFactory];
        v54[0] = MEMORY[0x263EF8330];
        v54[1] = 3221225472;
        v54[2] = __122__GEOAPPortal_captureRealTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v54[3] = &unk_265345680;
        id v55 = v44;
        id v48 = v44;
        [v47 sessionStateForType:10 callback:v54];

        id v25 = v52;
      }
      v19[2](v19);

      id v12 = v53;
      goto LABEL_38;
    }
LABEL_28:
    v19[2](v19);
LABEL_38:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    double v65 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __122__GEOAPPortal_captureRealTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __122__GEOAPPortal_captureRealTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_124()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201905 = [v6 containsObject:v8];
}

void __122__GEOAPPortal_captureRealTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureBatchTrafficWithLocationCollection:(id)a3
{
}

+ (void)captureBatchTrafficWithLocationCollection:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v60[0] = MEMORY[0x263EF8330];
  v60[1] = 3221225472;
  v60[2] = __123__GEOAPPortal_captureBatchTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v60[3] = &unk_265345530;
  id v17 = v16;
  id v62 = v17;
  id v18 = v15;
  id v61 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v60);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B2019C8 != -1) {
      dispatch_once(&qword_26B2019C8, &__block_literal_global_133);
    }
    if (byte_26B201906) {
      goto LABEL_8;
    }
    id v24 = [MEMORY[0x263F41770] sharedConfiguration];
    id v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"batchTraffic" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v52 = v25;
      id v53 = v12;
      if ([v13 count])
      {
        id v49 = v17;
        id v50 = v14;
        id v28 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id v29 = v13;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v57;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v57 != v32) {
                objc_enumerationMutation(v29);
              }
              int v34 = *(void **)(*((void *)&v56 + 1) + 8 * i);
              double v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v34, "stateType", v49));
              [v28 setObject:v34 forKeyedSubscript:v35];
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v56 objects:v63 count:16];
          }
          while (v31);
        }

        id v36 = (void *)[v28 copy];
        id v17 = v49;
        id v14 = v50;
      }
      else
      {
        id v36 = 0;
      }
      id v37 = NSNumber;
      uint64_t v38 = +[GEOAPStateFactory sharedFactory];
      uint64_t v39 = objc_msgSend(v37, "numberWithInt:", objc_msgSend(v38, "logMsgStateTypeForType:", 0));

      id v51 = v36;
      uint64_t v40 = [v36 objectForKeyedSubscript:v39];
      uint64_t v41 = v40;
      if (v40)
      {
        id v42 = v40;
      }
      else
      {
        uint64_t v43 = +[GEOAPStateFactory sharedFactory];
        id v42 = [v43 stateForType:0];
      }
      id v25 = v52;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v44 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v44 setEventType:27];
        id v45 = objc_alloc_init(MEMORY[0x263F417F0]);
        [v44 setBatchTrafficProbeCollection:v45];

        id v46 = [v44 batchTrafficProbeCollection];
        [v46 setLocationCollection:v53];

        if (v42) {
          [v44 addLogMsgState:v42];
        }
        uint64_t v47 = +[GEOAPStateFactory sharedFactory];
        v54[0] = MEMORY[0x263EF8330];
        v54[1] = 3221225472;
        v54[2] = __123__GEOAPPortal_captureBatchTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v54[3] = &unk_265345680;
        id v55 = v44;
        id v48 = v44;
        [v47 sessionStateForType:11 callback:v54];

        id v25 = v52;
      }
      v19[2](v19);

      id v12 = v53;
      goto LABEL_38;
    }
LABEL_28:
    v19[2](v19);
LABEL_38:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    double v65 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __123__GEOAPPortal_captureBatchTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __123__GEOAPPortal_captureBatchTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_131()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201906 = [v6 containsObject:v8];
}

void __123__GEOAPPortal_captureBatchTrafficWithLocationCollection_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureNetEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 requestAppIdMajorVer:(id)a5 requestAppIdMinorVer:(id)a6 requestErrorDomain:(id)a7 requestErrorCode:(id)a8 requestDataSize:(id)a9 responseDataSize:(id)a10 totalTime:(id)a11 httpResponseCode:(id)a12 serviceIpAddress:(id)a13 taskMetrics:(id)a14 mptcpServiceType:(int)a15 mptcpNegotiated:(id)a16 rnfTriggered:(id)a17 queuedTime:(id)a18 redirectCount:(id)a19 requestStart:(id)a20 requestEnd:(id)a21 wasBackground:(id)a22
{
  LODWORD(v22) = a15;
  objc_msgSend(a1, "captureNetEventWithNetworkService:requestAppIdentifier:requestAppIdMajorVer:requestAppIdMinorVer:requestErrorDomain:requestErrorCode:requestDataSize:responseDataSize:totalTime:httpResponseCode:serviceIpAddress:taskMetrics:mptcpServiceType:mptcpNegotiated:rnfTriggered:queuedTime:redirectCount:requestStart:requestEnd:wasBackground:additionalStates:providedDropRate:completionQueue:completionBlock:", *(void *)&a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, v22, a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    0,
    0,
    0,
    0);
}

+ (void)captureNetEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 requestAppIdMajorVer:(id)a5 requestAppIdMinorVer:(id)a6 requestErrorDomain:(id)a7 requestErrorCode:(id)a8 requestDataSize:(id)a9 responseDataSize:(id)a10 totalTime:(id)a11 httpResponseCode:(id)a12 serviceIpAddress:(id)a13 taskMetrics:(id)a14 mptcpServiceType:(int)a15 mptcpNegotiated:(id)a16 rnfTriggered:(id)a17 queuedTime:(id)a18 redirectCount:(id)a19 requestStart:(id)a20 requestEnd:(id)a21 wasBackground:(id)a22 additionalStates:(id)a23 providedDropRate:(id)a24 completionQueue:(id)a25 completionBlock:(id)a26
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  id v209 = a4;
  id v208 = a5;
  id v207 = a6;
  id v206 = a7;
  id v30 = a8;
  id v31 = a9;
  id v32 = a10;
  id v33 = a11;
  id v34 = a12;
  id v205 = a13;
  id v35 = a14;
  id v204 = a16;
  id v203 = a17;
  id v202 = a18;
  id v201 = a19;
  id v200 = a20;
  id v199 = a21;
  id v198 = a22;
  id v210 = a23;
  id v211 = a24;
  id v36 = a25;
  id v37 = a26;
  v218[0] = MEMORY[0x263EF8330];
  v218[1] = 3221225472;
  v218[2] = __412__GEOAPPortal_captureNetEventWithNetworkService_requestAppIdentifier_requestAppIdMajorVer_requestAppIdMinorVer_requestErrorDomain_requestErrorCode_requestDataSize_responseDataSize_totalTime_httpResponseCode_serviceIpAddress_taskMetrics_mptcpServiceType_mptcpNegotiated_rnfTriggered_queuedTime_redirectCount_requestStart_requestEnd_wasBackground_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v218[3] = &unk_265345530;
  id v197 = v37;
  id v220 = v197;
  id v38 = v36;
  id v219 = v38;
  uint64_t v39 = (void (**)(void))MEMORY[0x25337B980](v218);
  uint64_t v40 = +[GEOAPServiceManager sharedManager];
  int v41 = [v40 eventCollectionIsDisabledForCurrentProcess];

  if (!v41)
  {
    if (qword_26B2019D0 != -1) {
      dispatch_once(&qword_26B2019D0, &__block_literal_global_140);
    }
    if (byte_26B201907)
    {
      v39[2](v39);
      goto LABEL_118;
    }
    id v45 = [MEMORY[0x263F41770] sharedConfiguration];
    id v46 = [v45 countryCode];

    int v47 = [a1 isDisabledEvent:@"netEvent" inCountry:v46];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_14;
      }
    }
    else if (v47)
    {
      goto LABEL_14;
    }
    if (v211) {
      [v211 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    double v49 = v48;
    if (v48 == 0.0 || v48 < (double)arc4random() / 4294967300.0)
    {
      id v190 = v34;
      int v191 = v46;
      double v189 = v31;
      id v187 = v35;
      id v188 = v33;
      if ([v210 count])
      {
        id v192 = v32;
        id v50 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v210, "count"));
        long long v214 = 0u;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        id v51 = v210;
        uint64_t v52 = [v51 countByEnumeratingWithState:&v214 objects:v221 count:16];
        if (v52)
        {
          uint64_t v53 = v52;
          uint64_t v54 = *(void *)v215;
          do
          {
            for (uint64_t i = 0; i != v53; ++i)
            {
              if (*(void *)v215 != v54) {
                objc_enumerationMutation(v51);
              }
              long long v56 = *(void **)(*((void *)&v214 + 1) + 8 * i);
              long long v57 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v56, "stateType"));
              [v50 setObject:v56 forKeyedSubscript:v57];
            }
            uint64_t v53 = [v51 countByEnumeratingWithState:&v214 objects:v221 count:16];
          }
          while (v53);
        }

        long long v58 = (void *)[v50 copy];
        id v32 = v192;
      }
      else
      {
        long long v58 = 0;
      }
      long long v59 = NSNumber;
      double v60 = +[GEOAPStateFactory sharedFactory];
      id v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 2));

      id v62 = [v58 objectForKeyedSubscript:v61];
      id v63 = v62;
      if (v62)
      {
        id v186 = v62;
      }
      else
      {
        double v64 = +[GEOAPStateFactory sharedFactory];
        id v186 = [v64 stateForType:2];
      }
      double v65 = NSNumber;
      uint64_t v66 = +[GEOAPStateFactory sharedFactory];
      uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 6));

      double v68 = [v58 objectForKeyedSubscript:v67];
      double v69 = v68;
      if (v68)
      {
        id v176 = v68;
      }
      else
      {
        uint64_t v70 = +[GEOAPStateFactory sharedFactory];
        id v176 = [v70 stateForType:6];
      }
      double v71 = NSNumber;
      double v72 = +[GEOAPStateFactory sharedFactory];
      id v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 36));

      double v74 = [v58 objectForKeyedSubscript:v73];
      double v75 = v74;
      if (v74)
      {
        id v185 = v74;
      }
      else
      {
        id v76 = +[GEOAPStateFactory sharedFactory];
        id v185 = [v76 stateForType:36];
      }
      id v77 = NSNumber;
      id v78 = +[GEOAPStateFactory sharedFactory];
      id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 29));

      id v80 = [v58 objectForKeyedSubscript:v79];
      id v81 = v80;
      if (v80)
      {
        id v184 = v80;
      }
      else
      {
        uint64_t v82 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v82 stateForType:29];
      }
      uint64_t v83 = NSNumber;
      uint64_t v84 = +[GEOAPStateFactory sharedFactory];
      id v85 = objc_msgSend(v83, "numberWithInt:", objc_msgSend(v84, "logMsgStateTypeForType:", 0));

      id v86 = [v58 objectForKeyedSubscript:v85];
      long long v87 = v86;
      long long v193 = v58;
      if (v86)
      {
        id v183 = v86;
      }
      else
      {
        long long v88 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v88 stateForType:0];
      }
      long long v89 = NSNumber;
      long long v90 = +[GEOAPStateFactory sharedFactory];
      id v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 47));

      id v92 = [v58 objectForKeyedSubscript:v91];
      id v93 = v92;
      if (v92)
      {
        id v182 = v92;
      }
      else
      {
        long long v94 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v94 stateForType:47];
      }
      id v95 = NSNumber;
      id v96 = +[GEOAPStateFactory sharedFactory];
      id v97 = objc_msgSend(v95, "numberWithInt:", objc_msgSend(v96, "logMsgStateTypeForType:", 15));

      id v98 = [v58 objectForKeyedSubscript:v97];
      long long v99 = v98;
      id v33 = v188;
      if (v98)
      {
        id v100 = v98;
      }
      else
      {
        id v101 = +[GEOAPStateFactory sharedFactory];
        id v100 = [v101 stateForType:15];
      }
      id v34 = v190;
      if (([a1 isDisabledState:@"Experiments" inCountry:v191] & 1) != 0
        || GEOConfigGetBOOL())
      {

        double v196 = 0;
      }
      else
      {
        double v196 = v100;
      }
      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      id v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 33));

      id v105 = [v193 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v181 = v105;
      }
      else
      {
        uint64_t v107 = +[GEOAPStateFactory sharedFactory];
        id v181 = [v107 stateForType:33];
      }
      id v108 = NSNumber;
      long long v109 = +[GEOAPStateFactory sharedFactory];
      long long v110 = objc_msgSend(v108, "numberWithInt:", objc_msgSend(v109, "logMsgStateTypeForType:", 66));

      long long v111 = [v193 objectForKeyedSubscript:v110];
      long long v112 = v111;
      if (v111)
      {
        id v180 = v111;
      }
      else
      {
        long long v113 = +[GEOAPStateFactory sharedFactory];
        id v180 = [v113 stateForType:66];
      }
      long long v114 = NSNumber;
      long long v115 = +[GEOAPStateFactory sharedFactory];
      long long v116 = objc_msgSend(v114, "numberWithInt:", objc_msgSend(v115, "logMsgStateTypeForType:", 23));

      id v117 = [v193 objectForKeyedSubscript:v116];
      id v118 = v117;
      if (v117)
      {
        id v179 = v117;
      }
      else
      {
        id v119 = +[GEOAPStateFactory sharedFactory];
        id v179 = [v119 stateForType:23];
      }
      id v120 = NSNumber;
      id v121 = +[GEOAPStateFactory sharedFactory];
      unint64_t v122 = objc_msgSend(v120, "numberWithInt:", objc_msgSend(v121, "logMsgStateTypeForType:", 22));

      id v123 = [v193 objectForKeyedSubscript:v122];
      uint64_t v124 = v123;
      if (v123)
      {
        id v178 = v123;
      }
      else
      {
        +[GEOAPStateFactory sharedFactory];
        v126 = id v125 = v122;
        id v178 = [v126 stateForType:22];

        unint64_t v122 = v125;
      }
      id v46 = v191;
      uint64_t v127 = v176;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v177 = v122;
        id v128 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v128 setEventType:6];
        id v129 = objc_alloc_init(MEMORY[0x263F41898]);
        [v128 setNetworkEvent:v129];

        uint64_t v130 = [v128 networkEvent];
        [v130 setNetworkService:a3];

        uint64_t v131 = [v128 networkEvent];
        [v131 setRequestAppIdentifier:v209];

        uint64_t v132 = [v128 networkEvent];
        [v132 setRequestAppIdMajorVer:v208];

        id v133 = [v128 networkEvent];
        [v133 setRequestAppIdMinorVer:v207];

        long long v134 = [v128 networkEvent];
        [v134 setRequestErrorDomain:v206];

        if (v30)
        {
          uint64_t v135 = [v30 integerValue];
          long long v136 = [v128 networkEvent];
          [v136 setRequestErrorCode:v135];
        }
        if (v189)
        {
          uint64_t v137 = [v189 integerValue];
          long long v138 = [v128 networkEvent];
          [v138 setRequestDataSize:v137];
        }
        if (v32)
        {
          uint64_t v139 = [v32 integerValue];
          long long v140 = [v128 networkEvent];
          [v140 setResponseDataSize:v139];
        }
        if (v188)
        {
          uint64_t v141 = [v188 integerValue];
          uint64_t v142 = [v128 networkEvent];
          [v142 setTotalTime:v141];

          id v34 = v190;
        }
        if (v34)
        {
          uint64_t v143 = [v34 integerValue];
          id v144 = [v128 networkEvent];
          [v144 setHttpResponseCode:v143];
        }
        id v145 = [v128 networkEvent];
        [v145 setServiceIpAddress:v205];

        uint64_t v146 = [v128 networkEvent];
        [v146 setTaskMetrics:v187];

        id v147 = [v128 networkEvent];
        [v147 setMptcpServiceType:a15];

        if (v204)
        {
          uint64_t v148 = [v204 BOOLValue];
          uint64_t v149 = [v128 networkEvent];
          [v149 setMptcpNegotiated:v148];
        }
        if (v203)
        {
          uint64_t v150 = [v203 BOOLValue];
          id v151 = [v128 networkEvent];
          [v151 setRnfTriggered:v150];
        }
        if (v202)
        {
          uint64_t v152 = [v202 integerValue];
          id v153 = [v128 networkEvent];
          [v153 setQueuedTime:v152];
        }
        if (v201)
        {
          uint64_t v154 = [v201 integerValue];
          id v155 = [v128 networkEvent];
          [v155 setRedirectCount:v154];
        }
        if (v200)
        {
          [v200 doubleValue];
          double v157 = v156;
          double v158 = [v128 networkEvent];
          [v158 setRequestStart:v157];
        }
        if (v199)
        {
          [v199 doubleValue];
          double v160 = v159;
          uint64_t v161 = [v128 networkEvent];
          [v161 setRequestEnd:v160];
        }
        if (v198)
        {
          uint64_t v162 = [v198 BOOLValue];
          id v163 = [v128 networkEvent];
          [v163 setWasBackground:v162];
        }
        id v164 = [MEMORY[0x263F41BD0] modernManager];
        uint64_t v165 = [v164 activeTileGroup];
        uint64_t v166 = [v165 identifier];
        id v167 = [v128 networkEvent];
        [v167 setTilesetId:v166];

        if (GEOConfigGetBOOL())
        {
          double v168 = [MEMORY[0x263F41BC8] defaultConfiguration];
          double v169 = [v168 environment];
          uint64_t v170 = [v128 networkEvent];
          [v170 setManifestEnv:v169];
        }
        id v171 = [NSNumber numberWithDouble:round((1.0 - v49) * 10000.0)];
        uint64_t v172 = [v171 unsignedIntValue];
        long long v173 = [v128 networkEvent];
        [v173 setSamplingRate:v172];

        if (v186) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        id v33 = v188;
        id v34 = v190;
        id v46 = v191;
        if (v127) {
          [v128 addLogMsgState:v127];
        }
        if (v185) {
          [v128 addLogMsgState:v185];
        }
        if (v184) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        if (v183) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        if (v182) {
          [v128 addLogMsgState:v182];
        }
        if (v196) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        if (v180) {
          [v128 addLogMsgState:v180];
        }
        if (v179) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        if (v178) {
          objc_msgSend(v128, "addLogMsgState:");
        }
        if (v181) {
          [v128 addLogMsgState:v181];
        }
        long long v174 = +[GEOAPStateFactory sharedFactory];
        v212[0] = MEMORY[0x263EF8330];
        v212[1] = 3221225472;
        v212[2] = __412__GEOAPPortal_captureNetEventWithNetworkService_requestAppIdentifier_requestAppIdMajorVer_requestAppIdMinorVer_requestErrorDomain_requestErrorCode_requestDataSize_responseDataSize_totalTime_httpResponseCode_serviceIpAddress_taskMetrics_mptcpServiceType_mptcpNegotiated_rnfTriggered_queuedTime_redirectCount_requestStart_requestEnd_wasBackground_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v212[3] = &unk_265345680;
        id v175 = v128;
        id v213 = v175;
        [v174 sessionStateForType:7 callback:v212];

        unint64_t v122 = v177;
      }
      v39[2](v39);

      id v31 = v189;
      id v35 = v187;
      goto LABEL_117;
    }
LABEL_14:
    v39[2](v39);
LABEL_117:

    goto LABEL_118;
  }
  id v42 = v35;
  uint64_t v43 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    id v44 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    double v223 = v44;
    _os_log_impl(&dword_24FE56000, v43, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v39[2](v39);
  id v35 = v42;
LABEL_118:
}

void __412__GEOAPPortal_captureNetEventWithNetworkService_requestAppIdentifier_requestAppIdMajorVer_requestAppIdMinorVer_requestErrorDomain_requestErrorCode_requestDataSize_responseDataSize_totalTime_httpResponseCode_serviceIpAddress_taskMetrics_mptcpServiceType_mptcpNegotiated_rnfTriggered_queuedTime_redirectCount_requestStart_requestEnd_wasBackground_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __412__GEOAPPortal_captureNetEventWithNetworkService_requestAppIdentifier_requestAppIdMajorVer_requestAppIdMinorVer_requestErrorDomain_requestErrorCode_requestDataSize_responseDataSize_totalTime_httpResponseCode_serviceIpAddress_taskMetrics_mptcpServiceType_mptcpNegotiated_rnfTriggered_queuedTime_redirectCount_requestStart_requestEnd_wasBackground_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_138()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201907 = [v6 containsObject:v8];
}

void __412__GEOAPPortal_captureNetEventWithNetworkService_requestAppIdentifier_requestAppIdMajorVer_requestAppIdMinorVer_requestErrorDomain_requestErrorCode_requestDataSize_responseDataSize_totalTime_httpResponseCode_serviceIpAddress_taskMetrics_mptcpServiceType_mptcpNegotiated_rnfTriggered_queuedTime_redirectCount_requestStart_requestEnd_wasBackground_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureWifiProbeWithWifiConnectionQuality:(id)a3
{
}

+ (void)captureWifiProbeWithWifiConnectionQuality:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v62[0] = MEMORY[0x263EF8330];
  v62[1] = 3221225472;
  v62[2] = __123__GEOAPPortal_captureWifiProbeWithWifiConnectionQuality_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v62[3] = &unk_265345530;
  id v17 = v16;
  id v64 = v17;
  id v18 = v15;
  id v63 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v62);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B2019D8 != -1) {
      dispatch_once(&qword_26B2019D8, &__block_literal_global_151);
    }
    if (byte_26B201908) {
      goto LABEL_8;
    }
    id v24 = [MEMORY[0x263F41770] sharedConfiguration];
    id v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"wifiProbe" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v26)
    {
      goto LABEL_16;
    }
    double v27 = +[GEOAPServiceManager sharedManager];
    char v28 = [v27 platformDiagAndUsage];

    if (v28)
    {
      if (v14) {
        [v14 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v29 == 0.0 || v29 < (double)arc4random() / 4294967300.0)
      {
        uint64_t v54 = v25;
        id v55 = v12;
        if ([v13 count])
        {
          id v51 = v17;
          id v52 = v14;
          id v30 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          id v31 = v13;
          uint64_t v32 = [v31 countByEnumeratingWithState:&v58 objects:v65 count:16];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = *(void *)v59;
            do
            {
              for (uint64_t i = 0; i != v33; ++i)
              {
                if (*(void *)v59 != v34) {
                  objc_enumerationMutation(v31);
                }
                id v36 = *(void **)(*((void *)&v58 + 1) + 8 * i);
                id v37 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "stateType", v51));
                [v30 setObject:v36 forKeyedSubscript:v37];
              }
              uint64_t v33 = [v31 countByEnumeratingWithState:&v58 objects:v65 count:16];
            }
            while (v33);
          }

          id v38 = (void *)[v30 copy];
          id v17 = v51;
          id v14 = v52;
        }
        else
        {
          id v38 = 0;
        }
        uint64_t v39 = NSNumber;
        uint64_t v40 = +[GEOAPStateFactory sharedFactory];
        int v41 = objc_msgSend(v39, "numberWithInt:", objc_msgSend(v40, "logMsgStateTypeForType:", 0));

        uint64_t v53 = v38;
        id v42 = [v38 objectForKeyedSubscript:v41];
        uint64_t v43 = v42;
        if (v42)
        {
          id v44 = v42;
        }
        else
        {
          id v45 = +[GEOAPStateFactory sharedFactory];
          id v44 = [v45 stateForType:0];
        }
        id v25 = v54;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v46 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v46 setEventType:31];
          id v47 = objc_alloc_init(MEMORY[0x263F41970]);
          [v46 setWifiConnectionQualityProbeEvent:v47];

          double v48 = [v46 wifiConnectionQualityProbeEvent];
          [v48 setWifiConnectionQuality:v55];

          if (v44) {
            [v46 addLogMsgState:v44];
          }
          double v49 = +[GEOAPStateFactory sharedFactory];
          v56[0] = MEMORY[0x263EF8330];
          v56[1] = 3221225472;
          v56[2] = __123__GEOAPPortal_captureWifiProbeWithWifiConnectionQuality_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v56[3] = &unk_265345680;
          id v57 = v46;
          id v50 = v46;
          [v49 sessionStateForType:12 callback:v56];

          id v25 = v54;
        }
        v19[2](v19);

        id v12 = v55;
        goto LABEL_39;
      }
    }
LABEL_16:
    v19[2](v19);
LABEL_39:

    goto LABEL_9;
  }
  uint64_t v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v67 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __123__GEOAPPortal_captureWifiProbeWithWifiConnectionQuality_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __123__GEOAPPortal_captureWifiProbeWithWifiConnectionQuality_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_149()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201908 = [v6 containsObject:v8];
}

void __123__GEOAPPortal_captureWifiProbeWithWifiConnectionQuality_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v10 = v3;
  if (v3) {
    id v3 = (id)[*(id *)(a1 + 32) addLogMsgState:v3];
  }
  uint64_t v5 = (void *)MEMORY[0x25337B790](v3, v4);
  id v6 = [*(id *)(a1 + 32) description];
  id v7 = [v6 dataUsingEncoding:4];

  id v8 = +[GEOAPServiceManager sharedManager];
  [v8 logToDiagAndUsageUnderBugId:@"233" filePrefix:@"WiFiConnectionQuality" logData:v7];

  GEOConfigGetString();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  if (([v9 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v9 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v9 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v9 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v9 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v9 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v9 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v9 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v9 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v9 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v9 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v9 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureDisplayAnalyticWithDisplayActionTrigger:(int)a3 requiredResourcesAvailable:(id)a4 totalTime:(id)a5 requestedImageCount:(id)a6 renderedImageCount:(id)a7 movementDistance:(id)a8 meanImageSpacing:(id)a9 displayEvent:(int)a10
{
  LODWORD(v10) = a10;
  [a1 captureDisplayAnalyticWithDisplayActionTrigger:*(void *)&a3 requiredResourcesAvailable:a4 totalTime:a5 requestedImageCount:a6 renderedImageCount:a7 movementDistance:a8 meanImageSpacing:a9 displayEvent:v10 additionalStates:0 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureDisplayAnalyticWithDisplayActionTrigger:(int)a3 requiredResourcesAvailable:(id)a4 totalTime:(id)a5 requestedImageCount:(id)a6 renderedImageCount:(id)a7 movementDistance:(id)a8 meanImageSpacing:(id)a9 displayEvent:(int)a10 additionalStates:(id)a11 providedDropRate:(id)a12 completionQueue:(id)a13 completionBlock:(id)a14
{
  uint64_t v173 = *MEMORY[0x263EF8340];
  id v153 = a4;
  id v19 = a5;
  id v151 = a6;
  id v157 = a7;
  id v160 = a8;
  id v159 = a9;
  id v156 = a11;
  id v155 = a12;
  id v20 = a13;
  id v21 = a14;
  v167[0] = MEMORY[0x263EF8330];
  v167[1] = 3221225472;
  v167[2] = __251__GEOAPPortal_captureDisplayAnalyticWithDisplayActionTrigger_requiredResourcesAvailable_totalTime_requestedImageCount_renderedImageCount_movementDistance_meanImageSpacing_displayEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v167[3] = &unk_265345530;
  id v150 = v21;
  id v169 = v150;
  id v22 = v20;
  id v168 = v22;
  id v23 = (void (**)(void))MEMORY[0x25337B980](v167);
  id v24 = +[GEOAPServiceManager sharedManager];
  LODWORD(a6) = [v24 eventCollectionIsDisabledForCurrentProcess];

  if (a6)
  {
    id v25 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      int v26 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      uint64_t v172 = v26;
      _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    v23[2](v23);
    char v28 = v151;
    double v27 = v153;
    id v30 = v157;
    double v29 = v159;
    id v31 = v160;
    goto LABEL_9;
  }
  if (qword_26B2019E0 != -1) {
    dispatch_once(&qword_26B2019E0, &__block_literal_global_164);
  }
  char v28 = v151;
  double v27 = v153;
  id v30 = v157;
  double v29 = v159;
  id v31 = v160;
  if (!byte_26B201909)
  {
    uint64_t v33 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v34 = [v33 countryCode];

    uint64_t v148 = (void *)v34;
    int v35 = [a1 isDisabledEvent:@"displayAnalytic" inCountry:v34];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_13:
        uint64_t v32 = v155;
        double v27 = v153;
        if (v155) {
          [v155 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        char v28 = v151;
        if (v36 == 0.0 || v36 < (double)arc4random() / 4294967300.0)
        {
          uint64_t v146 = v19;
          if ([v156 count])
          {
            id v38 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v156, "count"));
            long long v163 = 0u;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            id v39 = v156;
            uint64_t v40 = [v39 countByEnumeratingWithState:&v163 objects:v170 count:16];
            if (v40)
            {
              uint64_t v41 = v40;
              uint64_t v42 = *(void *)v164;
              do
              {
                for (uint64_t i = 0; i != v41; ++i)
                {
                  if (*(void *)v164 != v42) {
                    objc_enumerationMutation(v39);
                  }
                  id v44 = *(void **)(*((void *)&v163 + 1) + 8 * i);
                  id v45 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v44, "stateType"));
                  [v38 setObject:v44 forKeyedSubscript:v45];
                }
                uint64_t v41 = [v39 countByEnumeratingWithState:&v163 objects:v170 count:16];
              }
              while (v41);
            }

            id v46 = (void *)[v38 copy];
            char v28 = v151;
            double v27 = v153;
          }
          else
          {
            id v46 = 0;
          }
          id v47 = NSNumber;
          double v48 = +[GEOAPStateFactory sharedFactory];
          double v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 65));

          id v50 = [v46 objectForKeyedSubscript:v49];
          id v51 = v50;
          if (v50)
          {
            id v139 = v50;
          }
          else
          {
            id v52 = +[GEOAPStateFactory sharedFactory];
            id v139 = [v52 stateForType:65];
          }
          uint64_t v53 = NSNumber;
          uint64_t v54 = +[GEOAPStateFactory sharedFactory];
          id v55 = objc_msgSend(v53, "numberWithInt:", objc_msgSend(v54, "logMsgStateTypeForType:", 35));

          long long v56 = [v46 objectForKeyedSubscript:v55];
          id v57 = v56;
          if (v56)
          {
            id v154 = v56;
          }
          else
          {
            long long v58 = +[GEOAPStateFactory sharedFactory];
            id v154 = [v58 stateForType:35];
          }
          long long v59 = NSNumber;
          long long v60 = +[GEOAPStateFactory sharedFactory];
          long long v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 30));

          id v62 = [v46 objectForKeyedSubscript:v61];
          id v63 = v62;
          uint64_t v137 = v46;
          if (v62)
          {
            id v152 = v62;
          }
          else
          {
            id v64 = +[GEOAPStateFactory sharedFactory];
            id v152 = [v64 stateForType:30];
          }
          double v65 = NSNumber;
          uint64_t v66 = +[GEOAPStateFactory sharedFactory];
          uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 0));

          uint64_t v68 = v137;
          double v69 = [v137 objectForKeyedSubscript:v67];
          uint64_t v70 = v69;
          if (v69)
          {
            id v147 = v69;
          }
          else
          {
            double v71 = +[GEOAPStateFactory sharedFactory];
            id v147 = [v71 stateForType:0];
          }
          double v72 = v139;

          id v73 = NSNumber;
          double v74 = +[GEOAPStateFactory sharedFactory];
          double v75 = objc_msgSend(v73, "numberWithInt:", objc_msgSend(v74, "logMsgStateTypeForType:", 3));

          id v76 = [v137 objectForKeyedSubscript:v75];
          id v77 = v76;
          if (v76)
          {
            id v145 = v76;
          }
          else
          {
            id v78 = +[GEOAPStateFactory sharedFactory];
            id v145 = [v78 stateForType:3];
          }
          id v79 = NSNumber;
          id v80 = +[GEOAPStateFactory sharedFactory];
          id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 64));

          uint64_t v82 = [v137 objectForKeyedSubscript:v81];
          uint64_t v83 = v82;
          if (v82)
          {
            id v144 = v82;
          }
          else
          {
            uint64_t v84 = +[GEOAPStateFactory sharedFactory];
            id v144 = [v84 stateForType:64];
          }
          id v85 = NSNumber;
          id v86 = +[GEOAPStateFactory sharedFactory];
          long long v87 = objc_msgSend(v85, "numberWithInt:", objc_msgSend(v86, "logMsgStateTypeForType:", 13));

          long long v88 = [v137 objectForKeyedSubscript:v87];
          long long v89 = v88;
          if (v88)
          {
            id v143 = v88;
          }
          else
          {
            long long v90 = +[GEOAPStateFactory sharedFactory];
            id v143 = [v90 stateForType:13];
          }
          id v91 = NSNumber;
          id v92 = +[GEOAPStateFactory sharedFactory];
          id v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 14));

          long long v94 = [v137 objectForKeyedSubscript:v93];
          id v95 = v94;
          if (v94)
          {
            id v142 = v94;
          }
          else
          {
            id v96 = +[GEOAPStateFactory sharedFactory];
            id v142 = [v96 stateForType:14];
          }
          id v97 = NSNumber;
          id v98 = +[GEOAPStateFactory sharedFactory];
          long long v99 = objc_msgSend(v97, "numberWithInt:", objc_msgSend(v98, "logMsgStateTypeForType:", 9));

          id v100 = [v137 objectForKeyedSubscript:v99];
          id v101 = v100;
          if (v100)
          {
            id v141 = v100;
          }
          else
          {
            id v102 = +[GEOAPStateFactory sharedFactory];
            id v141 = [v102 stateForType:9];
          }
          id v103 = NSNumber;
          id v104 = +[GEOAPStateFactory sharedFactory];
          id v105 = objc_msgSend(v103, "numberWithInt:", objc_msgSend(v104, "logMsgStateTypeForType:", 10));

          id v106 = [v137 objectForKeyedSubscript:v105];
          uint64_t v107 = v106;
          if (v106)
          {
            id v140 = v106;
          }
          else
          {
            id v108 = +[GEOAPStateFactory sharedFactory];
            id v140 = [v108 stateForType:10];
          }
          long long v109 = NSNumber;
          long long v110 = +[GEOAPStateFactory sharedFactory];
          uint64_t v111 = objc_msgSend(v109, "numberWithInt:", objc_msgSend(v110, "logMsgStateTypeForType:", 42));

          long long v138 = (void *)v111;
          long long v112 = [v137 objectForKeyedSubscript:v111];
          long long v113 = v112;
          if (v112)
          {
            id v114 = v112;
          }
          else
          {
            long long v115 = +[GEOAPStateFactory sharedFactory];
            id v116 = [v115 stateForType:42];

            id v114 = v116;
          }
          id v30 = v157;
          id v117 = v152;

          if ((GEOConfigGetBOOL() & 1) == 0)
          {
            id v158 = v114;
            id v118 = objc_alloc_init(MEMORY[0x263F417E8]);
            [v118 setEventType:35];
            id v119 = objc_alloc_init(MEMORY[0x263F41820]);
            [v118 setDisplayAnalytic:v119];

            id v120 = [v118 displayAnalytic];
            [v120 setDisplayActionTrigger:a3];

            if (v27)
            {
              uint64_t v121 = [v27 unsignedLongLongValue];
              unint64_t v122 = [v118 displayAnalytic];
              [v122 setRequiredResourcesAvailable:v121];
            }
            if (v146)
            {
              uint64_t v123 = [v146 unsignedLongLongValue];
              uint64_t v124 = [v118 displayAnalytic];
              [v124 setTotalTime:v123];
            }
            if (v28)
            {
              uint64_t v125 = [v28 unsignedLongLongValue];
              id v126 = [v118 displayAnalytic];
              [v126 setRequestedImageCount:v125];
            }
            if (v30)
            {
              uint64_t v127 = [v30 unsignedLongLongValue];
              id v128 = [v118 displayAnalytic];
              [v128 setRenderedImageCount:v127];
            }
            if (v160)
            {
              uint64_t v129 = [v160 unsignedLongLongValue];
              uint64_t v130 = [v118 displayAnalytic];
              [v130 setMovementDistance:v129];

              uint64_t v68 = v137;
              double v72 = v139;
            }
            if (v159)
            {
              [v159 doubleValue];
              double v132 = v131;
              id v133 = [v118 displayAnalytic];
              [v133 setMeanImageSpacing:v132];
            }
            long long v134 = objc_msgSend(v118, "displayAnalytic", v137);
            [v134 setDisplayEvent:a10];

            if (v147) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            id v117 = v152;
            if (v145) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            if (v152) {
              [v118 addLogMsgState:v152];
            }
            if (v154) {
              [v118 addLogMsgState:v154];
            }
            if (v72) {
              [v118 addLogMsgState:v72];
            }
            if (v143) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            if (v142) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            if (v141) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            if (v140) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            if (v144) {
              [v118 addLogMsgState:v144];
            }
            if (v158) {
              objc_msgSend(v118, "addLogMsgState:");
            }
            uint64_t v135 = +[GEOAPStateFactory sharedFactory];
            v161[0] = MEMORY[0x263EF8330];
            v161[1] = 3221225472;
            v161[2] = __251__GEOAPPortal_captureDisplayAnalyticWithDisplayActionTrigger_requiredResourcesAvailable_totalTime_requestedImageCount_renderedImageCount_movementDistance_meanImageSpacing_displayEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
            v161[3] = &unk_265345680;
            id v136 = v118;
            id v162 = v136;
            [v135 sessionStateForType:5 callback:v161];

            id v114 = v158;
          }
          v23[2](v23);

          double v29 = v159;
          id v31 = v160;
          uint64_t v32 = v155;
          id v19 = v146;
          goto LABEL_102;
        }
        id v37 = v23;
        v23[2](v23);
        id v30 = v157;
LABEL_30:
        id v23 = v37;
LABEL_102:

        goto LABEL_10;
      }
    }
    else if (!v35)
    {
      goto LABEL_13;
    }
    id v37 = v23;
    v23[2](v23);
    uint64_t v32 = v155;
    double v27 = v153;
    char v28 = v151;
    goto LABEL_30;
  }
  v23[2](v23);
LABEL_9:
  uint64_t v32 = v155;
LABEL_10:
}

void __251__GEOAPPortal_captureDisplayAnalyticWithDisplayActionTrigger_requiredResourcesAvailable_totalTime_requestedImageCount_renderedImageCount_movementDistance_meanImageSpacing_displayEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __251__GEOAPPortal_captureDisplayAnalyticWithDisplayActionTrigger_requiredResourcesAvailable_totalTime_requestedImageCount_renderedImageCount_movementDistance_meanImageSpacing_displayEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_162()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201909 = [v6 containsObject:v8];
}

void __251__GEOAPPortal_captureDisplayAnalyticWithDisplayActionTrigger_requiredResourcesAvailable_totalTime_requestedImageCount_renderedImageCount_movementDistance_meanImageSpacing_displayEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureClientACSuggestionWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 selectedIndex:(id)a6 selectedSectionIndex:(id)a7 withinSectionSelectedIndex:(id)a8 isRetainedQuery:(id)a9 isRerankerTriggered:(id)a10 shouldDifferentiateClientAndServerResults:(id)a11
{
}

+ (void)captureClientACSuggestionWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 selectedIndex:(id)a6 selectedSectionIndex:(id)a7 withinSectionSelectedIndex:(id)a8 isRetainedQuery:(id)a9 isRerankerTriggered:(id)a10 shouldDifferentiateClientAndServerResults:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  id v238 = a3;
  id v240 = a4;
  id v239 = a5;
  id v243 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v241 = a10;
  id v23 = a11;
  id v24 = a12;
  id v242 = a13;
  id v25 = a14;
  id v26 = a15;
  v258[0] = MEMORY[0x263EF8330];
  v258[1] = 3221225472;
  v258[2] = __276__GEOAPPortal_captureClientACSuggestionWithQuery_queryTokens_entries_selectedIndex_selectedSectionIndex_withinSectionSelectedIndex_isRetainedQuery_isRerankerTriggered_shouldDifferentiateClientAndServerResults_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v258[3] = &unk_265345530;
  id v236 = v26;
  id v260 = v236;
  id v27 = v25;
  id v259 = v27;
  char v28 = (void (**)(void))MEMORY[0x25337B980](v258);
  double v29 = +[GEOAPServiceManager sharedManager];
  int v30 = [v29 eventCollectionIsDisabledForCurrentProcess];

  double v237 = v20;
  if (!v30)
  {
    if (qword_26B2019E8 != -1) {
      dispatch_once(&qword_26B2019E8, &__block_literal_global_171);
    }
    uint64_t v34 = v243;
    int v35 = v241;
    if (byte_26B20190A)
    {
      v28[2](v28);
      goto LABEL_161;
    }
    double v232 = v21;
    double v36 = [MEMORY[0x263F41770] sharedConfiguration];
    id v37 = [v36 countryCode];

    int v38 = [a1 isDisabledEvent:@"clientACSuggestion" inCountry:v37];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_27;
      }
    }
    else if (v38)
    {
      goto LABEL_27;
    }
    if (v242) {
      [v242 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v39 == 0.0 || v39 < (double)arc4random() / 4294967300.0)
    {
      double v229 = v22;
      double v230 = v37;
      id v228 = v23;
      id v211 = v24;
      if ([v24 count])
      {
        uint64_t v40 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v24, "count"));
        long long v254 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v257 = 0u;
        id v41 = v24;
        uint64_t v42 = [v41 countByEnumeratingWithState:&v254 objects:v263 count:16];
        if (v42)
        {
          uint64_t v43 = v42;
          uint64_t v44 = *(void *)v255;
          do
          {
            for (uint64_t i = 0; i != v43; ++i)
            {
              if (*(void *)v255 != v44) {
                objc_enumerationMutation(v41);
              }
              id v46 = *(void **)(*((void *)&v254 + 1) + 8 * i);
              id v47 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v46, "stateType"));
              [v40 setObject:v46 forKeyedSubscript:v47];
            }
            uint64_t v43 = [v41 countByEnumeratingWithState:&v254 objects:v263 count:16];
          }
          while (v43);
        }

        double v48 = (void *)[v40 copy];
        int v35 = v241;
        id v24 = v211;
      }
      else
      {
        double v48 = 0;
      }
      double v49 = NSNumber;
      id v50 = +[GEOAPStateFactory sharedFactory];
      id v51 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v50, "logMsgStateTypeForType:", 65));

      double v235 = v48;
      id v52 = [v48 objectForKeyedSubscript:v51];
      uint64_t v53 = v52;
      if (v52)
      {
        id v227 = v52;
      }
      else
      {
        uint64_t v54 = +[GEOAPStateFactory sharedFactory];
        id v227 = [v54 stateForType:65];
      }
      id v55 = NSNumber;
      long long v56 = +[GEOAPStateFactory sharedFactory];
      id v57 = objc_msgSend(v55, "numberWithInt:", objc_msgSend(v56, "logMsgStateTypeForType:", 5));

      long long v58 = [v235 objectForKeyedSubscript:v57];
      long long v59 = v58;
      if (v58)
      {
        id v226 = v58;
      }
      else
      {
        long long v60 = +[GEOAPStateFactory sharedFactory];
        id v226 = [v60 stateForType:5];
      }
      long long v61 = NSNumber;
      id v62 = +[GEOAPStateFactory sharedFactory];
      id v63 = objc_msgSend(v61, "numberWithInt:", objc_msgSend(v62, "logMsgStateTypeForType:", 16));

      id v64 = v235;
      double v65 = [v235 objectForKeyedSubscript:v63];
      uint64_t v66 = v65;
      if (v65)
      {
        id v231 = v65;
      }
      else
      {
        uint64_t v67 = +[GEOAPStateFactory sharedFactory];
        id v231 = [v67 stateForType:16];

        id v64 = v235;
      }

      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v230] & 1) != 0
        || GEOConfigGetBOOL())
      {

        id v231 = 0;
      }
      uint64_t v68 = NSNumber;
      double v69 = +[GEOAPStateFactory sharedFactory];
      uint64_t v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 35));

      double v71 = [v64 objectForKeyedSubscript:v70];
      double v72 = v71;
      if (v71)
      {
        id v234 = v71;
      }
      else
      {
        id v73 = +[GEOAPStateFactory sharedFactory];
        id v234 = [v73 stateForType:35];
      }
      double v74 = NSNumber;
      double v75 = +[GEOAPStateFactory sharedFactory];
      id v76 = objc_msgSend(v74, "numberWithInt:", objc_msgSend(v75, "logMsgStateTypeForType:", 30));

      id v77 = [v64 objectForKeyedSubscript:v76];
      id v78 = v77;
      if (v77)
      {
        id v225 = v77;
      }
      else
      {
        id v79 = +[GEOAPStateFactory sharedFactory];
        id v225 = [v79 stateForType:30];
      }
      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      uint64_t v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 0));

      uint64_t v83 = [v235 objectForKeyedSubscript:v82];
      uint64_t v84 = v83;
      if (v83)
      {
        id v224 = v83;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v224 = [v85 stateForType:0];
      }
      id v22 = v229;

      id v86 = NSNumber;
      long long v87 = +[GEOAPStateFactory sharedFactory];
      long long v88 = objc_msgSend(v86, "numberWithInt:", objc_msgSend(v87, "logMsgStateTypeForType:", 3));

      long long v89 = [v235 objectForKeyedSubscript:v88];
      long long v90 = v89;
      if (v89)
      {
        id v223 = v89;
      }
      else
      {
        id v91 = +[GEOAPStateFactory sharedFactory];
        id v223 = [v91 stateForType:3];
      }
      id v92 = NSNumber;
      id v93 = +[GEOAPStateFactory sharedFactory];
      long long v94 = objc_msgSend(v92, "numberWithInt:", objc_msgSend(v93, "logMsgStateTypeForType:", 64));

      id v95 = [v235 objectForKeyedSubscript:v94];
      id v96 = v95;
      if (v95)
      {
        id v222 = v95;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v222 = [v97 stateForType:64];
      }
      id v98 = NSNumber;
      long long v99 = +[GEOAPStateFactory sharedFactory];
      id v100 = objc_msgSend(v98, "numberWithInt:", objc_msgSend(v99, "logMsgStateTypeForType:", 13));

      id v101 = [v235 objectForKeyedSubscript:v100];
      id v102 = v101;
      if (v101)
      {
        id v221 = v101;
      }
      else
      {
        id v103 = +[GEOAPStateFactory sharedFactory];
        id v221 = [v103 stateForType:13];
      }
      id v104 = NSNumber;
      id v105 = +[GEOAPStateFactory sharedFactory];
      id v106 = objc_msgSend(v104, "numberWithInt:", objc_msgSend(v105, "logMsgStateTypeForType:", 14));

      uint64_t v107 = [v235 objectForKeyedSubscript:v106];
      id v108 = v107;
      if (v107)
      {
        id v220 = v107;
      }
      else
      {
        long long v109 = +[GEOAPStateFactory sharedFactory];
        id v220 = [v109 stateForType:14];
      }
      long long v110 = NSNumber;
      uint64_t v111 = +[GEOAPStateFactory sharedFactory];
      long long v112 = objc_msgSend(v110, "numberWithInt:", objc_msgSend(v111, "logMsgStateTypeForType:", 9));

      long long v113 = [v235 objectForKeyedSubscript:v112];
      id v114 = v113;
      if (v113)
      {
        id v219 = v113;
      }
      else
      {
        long long v115 = +[GEOAPStateFactory sharedFactory];
        id v219 = [v115 stateForType:9];
      }
      id v116 = NSNumber;
      id v117 = +[GEOAPStateFactory sharedFactory];
      id v118 = objc_msgSend(v116, "numberWithInt:", objc_msgSend(v117, "logMsgStateTypeForType:", 10));

      id v119 = [v235 objectForKeyedSubscript:v118];
      id v120 = v119;
      if (v119)
      {
        id v218 = v119;
      }
      else
      {
        uint64_t v121 = +[GEOAPStateFactory sharedFactory];
        id v218 = [v121 stateForType:10];
      }
      unint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 20));

      uint64_t v125 = [v235 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v217 = v125;
      }
      else
      {
        uint64_t v127 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v127 stateForType:20];
      }
      id v128 = NSNumber;
      uint64_t v129 = +[GEOAPStateFactory sharedFactory];
      uint64_t v130 = objc_msgSend(v128, "numberWithInt:", objc_msgSend(v129, "logMsgStateTypeForType:", 42));

      double v131 = [v235 objectForKeyedSubscript:v130];
      double v132 = v131;
      if (v131)
      {
        id v216 = v131;
      }
      else
      {
        id v133 = +[GEOAPStateFactory sharedFactory];
        id v216 = [v133 stateForType:42];
      }
      long long v134 = NSNumber;
      uint64_t v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 70));

      uint64_t v137 = [v235 objectForKeyedSubscript:v136];
      long long v138 = v137;
      if (v137)
      {
        id v215 = v137;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v215 = [v139 stateForType:70];
      }
      id v140 = NSNumber;
      id v141 = +[GEOAPStateFactory sharedFactory];
      id v142 = objc_msgSend(v140, "numberWithInt:", objc_msgSend(v141, "logMsgStateTypeForType:", 7));

      id v143 = [v235 objectForKeyedSubscript:v142];
      id v144 = v143;
      if (v143)
      {
        id v214 = v143;
      }
      else
      {
        id v145 = +[GEOAPStateFactory sharedFactory];
        id v214 = [v145 stateForType:7];
      }
      uint64_t v146 = NSNumber;
      id v147 = +[GEOAPStateFactory sharedFactory];
      uint64_t v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 17));

      uint64_t v149 = [v235 objectForKeyedSubscript:v148];
      id v150 = v149;
      if (v149)
      {
        id v213 = v149;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v213 = [v151 stateForType:17];
      }
      id v152 = NSNumber;
      id v153 = +[GEOAPStateFactory sharedFactory];
      id v154 = objc_msgSend(v152, "numberWithInt:", objc_msgSend(v153, "logMsgStateTypeForType:", 19));

      id v155 = [v235 objectForKeyedSubscript:v154];
      id v156 = v155;
      if (v155)
      {
        id v212 = v155;
      }
      else
      {
        id v157 = +[GEOAPStateFactory sharedFactory];
        id v212 = [v157 stateForType:19];
      }
      id v158 = NSNumber;
      id v159 = +[GEOAPStateFactory sharedFactory];
      uint64_t v160 = objc_msgSend(v158, "numberWithInt:", objc_msgSend(v159, "logMsgStateTypeForType:", 27));

      id v210 = (void *)v160;
      uint64_t v161 = [v235 objectForKeyedSubscript:v160];
      id v162 = v161;
      if (v161)
      {
        id v163 = v161;
      }
      else
      {
        long long v164 = +[GEOAPStateFactory sharedFactory];
        id v165 = [v164 stateForType:27];

        id v163 = v165;
      }
      id v21 = v232;
      id v37 = v230;
      uint64_t v34 = v243;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v209 = v163;
        id v166 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v166 setEventType:25];
        id v167 = objc_alloc_init(MEMORY[0x263F417F8]);
        [v166 setClientAcSuggestions:v167];

        id v168 = [v166 clientAcSuggestions];
        [v168 setQuery:v238];

        id v169 = [v166 clientAcSuggestions];
        uint64_t v170 = [v169 queryTokens];

        if (!v170)
        {
          id v171 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v240, "count"));
          uint64_t v172 = [v166 clientAcSuggestions];
          [v172 setQueryTokens:v171];
        }
        long long v252 = 0u;
        long long v253 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        id v173 = v240;
        uint64_t v174 = [v173 countByEnumeratingWithState:&v250 objects:v262 count:16];
        if (v174)
        {
          uint64_t v175 = v174;
          uint64_t v176 = *(void *)v251;
          do
          {
            for (uint64_t j = 0; j != v175; ++j)
            {
              if (*(void *)v251 != v176) {
                objc_enumerationMutation(v173);
              }
              id v178 = *(void **)(*((void *)&v250 + 1) + 8 * j);
              id v179 = [v166 clientAcSuggestions];
              id v180 = [v179 queryTokens];
              id v181 = (void *)[v178 copy];
              [v180 addObject:v181];
            }
            uint64_t v175 = [v173 countByEnumeratingWithState:&v250 objects:v262 count:16];
          }
          while (v175);
        }

        id v182 = [v166 clientAcSuggestions];
        id v183 = [v182 entries];

        if (!v183)
        {
          id v184 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v239, "count"));
          id v185 = [v166 clientAcSuggestions];
          [v185 setEntries:v184];
        }
        long long v248 = 0u;
        long long v249 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        id v186 = v239;
        uint64_t v187 = [v186 countByEnumeratingWithState:&v246 objects:v261 count:16];
        if (v187)
        {
          uint64_t v188 = v187;
          uint64_t v189 = *(void *)v247;
          do
          {
            for (uint64_t k = 0; k != v188; ++k)
            {
              if (*(void *)v247 != v189) {
                objc_enumerationMutation(v186);
              }
              int v191 = *(void **)(*((void *)&v246 + 1) + 8 * k);
              id v192 = [v166 clientAcSuggestions];
              long long v193 = [v192 entries];
              long long v194 = (void *)[v191 copy];
              [v193 addObject:v194];
            }
            uint64_t v188 = [v186 countByEnumeratingWithState:&v246 objects:v261 count:16];
          }
          while (v188);
        }

        uint64_t v34 = v243;
        if (v243)
        {
          uint64_t v195 = [v243 integerValue];
          double v196 = [v166 clientAcSuggestions];
          [v196 setSelectedIndex:v195];
        }
        id v21 = v232;
        id v22 = v229;
        int v35 = v241;
        id v24 = v211;
        if (v237)
        {
          uint64_t v197 = [v237 integerValue];
          id v198 = [v166 clientAcSuggestions];
          [v198 setSelectedSectionIndex:v197];
        }
        if (v232)
        {
          uint64_t v199 = [v232 integerValue];
          id v200 = [v166 clientAcSuggestions];
          [v200 setWithinSectionSelectedIndex:v199];
        }
        if (v229)
        {
          uint64_t v201 = [v229 BOOLValue];
          id v202 = [v166 clientAcSuggestions];
          [v202 setIsRetainedQuery:v201];
        }
        if (v241)
        {
          uint64_t v203 = [v241 BOOLValue];
          id v204 = [v166 clientAcSuggestions];
          [v204 setIsRerankerTriggered:v203];
        }
        if (v228)
        {
          uint64_t v205 = [v228 BOOLValue];
          id v206 = [v166 clientAcSuggestions];
          [v206 setShouldDifferentiateClientAndServerResults:v205];
        }
        if (v214) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        id v37 = v230;
        if (v234) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v226) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v224) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v223) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v225) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v227) {
          [v166 addLogMsgState:v227];
        }
        if (v217) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v221) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v220) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v219) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v218) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v222) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v231) {
          [v166 addLogMsgState:v231];
        }
        if (v213) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v212) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v209) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        if (v216) {
          [v166 addLogMsgState:v216];
        }
        if (v215) {
          objc_msgSend(v166, "addLogMsgState:");
        }
        id v207 = +[GEOAPStateFactory sharedFactory];
        v244[0] = MEMORY[0x263EF8330];
        v244[1] = 3221225472;
        v244[2] = __276__GEOAPPortal_captureClientACSuggestionWithQuery_queryTokens_entries_selectedIndex_selectedSectionIndex_withinSectionSelectedIndex_isRetainedQuery_isRerankerTriggered_shouldDifferentiateClientAndServerResults_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v244[3] = &unk_265345680;
        id v208 = v166;
        id v245 = v208;
        [v207 sessionStateForType:5 callback:v244];

        id v163 = v209;
      }
      v28[2](v28);

      id v23 = v228;
      goto LABEL_160;
    }
LABEL_27:
    v28[2](v28);
LABEL_160:

    goto LABEL_161;
  }
  id v31 = v23;
  uint64_t v32 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v265 = v33;
    _os_log_impl(&dword_24FE56000, v32, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v28[2](v28);
  uint64_t v34 = v243;
  int v35 = v241;
  id v23 = v31;
LABEL_161:
}

void __276__GEOAPPortal_captureClientACSuggestionWithQuery_queryTokens_entries_selectedIndex_selectedSectionIndex_withinSectionSelectedIndex_isRetainedQuery_isRerankerTriggered_shouldDifferentiateClientAndServerResults_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __276__GEOAPPortal_captureClientACSuggestionWithQuery_queryTokens_entries_selectedIndex_selectedSectionIndex_withinSectionSelectedIndex_isRetainedQuery_isRerankerTriggered_shouldDifferentiateClientAndServerResults_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_169()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190A = [v6 containsObject:v8];
}

void __276__GEOAPPortal_captureClientACSuggestionWithQuery_queryTokens_entries_selectedIndex_selectedSectionIndex_withinSectionSelectedIndex_isRetainedQuery_isRerankerTriggered_shouldDifferentiateClientAndServerResults_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureClientACResponseWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 shouldDifferentiateClientAndServerResults:(id)a6 overallLatencyInMs:(id)a7 isRerankerTriggered:(id)a8 isRetainedQuery:(id)a9
{
}

+ (void)captureClientACResponseWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 shouldDifferentiateClientAndServerResults:(id)a6 overallLatencyInMs:(id)a7 isRerankerTriggered:(id)a8 isRetainedQuery:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13
{
  uint64_t v261 = *MEMORY[0x263EF8340];
  id v235 = a3;
  id v18 = a4;
  id v236 = a5;
  id v234 = a6;
  id v238 = a7;
  id v237 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = a13;
  v253[0] = MEMORY[0x263EF8330];
  v253[1] = 3221225472;
  v253[2] = __231__GEOAPPortal_captureClientACResponseWithQuery_queryTokens_entries_shouldDifferentiateClientAndServerResults_overallLatencyInMs_isRerankerTriggered_isRetainedQuery_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v253[3] = &unk_265345530;
  id v233 = v23;
  id v255 = v233;
  id v24 = v22;
  id v254 = v24;
  id v25 = (void (**)(void))MEMORY[0x25337B980](v253);
  id v26 = +[GEOAPServiceManager sharedManager];
  LODWORD(a5) = [v26 eventCollectionIsDisabledForCurrentProcess];

  if (!a5)
  {
    if (qword_26B2019F0 != -1) {
      dispatch_once(&qword_26B2019F0, &__block_literal_global_178);
    }
    uint64_t v32 = v237;
    id v31 = v238;
    if (byte_26B20190B)
    {
      v25[2](v25);
      goto LABEL_157;
    }
    id v229 = v24;
    uint64_t v33 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v34 = [v33 countryCode];

    int v35 = [a1 isDisabledEvent:@"clientACResponse" inCountry:v34];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_14;
      }
    }
    else if (v35)
    {
      goto LABEL_14;
    }
    if (v21) {
      [v21 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v36 == 0.0 || v36 < (double)arc4random() / 4294967300.0)
    {
      id v225 = v18;
      id v226 = v34;
      id v223 = v21;
      id v207 = v20;
      if ([v20 count])
      {
        id v37 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v249 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        id v38 = v20;
        uint64_t v39 = [v38 countByEnumeratingWithState:&v249 objects:v258 count:16];
        if (v39)
        {
          uint64_t v40 = v39;
          uint64_t v41 = *(void *)v250;
          do
          {
            for (uint64_t i = 0; i != v40; ++i)
            {
              if (*(void *)v250 != v41) {
                objc_enumerationMutation(v38);
              }
              uint64_t v43 = *(void **)(*((void *)&v249 + 1) + 8 * i);
              uint64_t v44 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v43, "stateType"));
              [v37 setObject:v43 forKeyedSubscript:v44];
            }
            uint64_t v40 = [v38 countByEnumeratingWithState:&v249 objects:v258 count:16];
          }
          while (v40);
        }

        id v45 = (void *)[v37 copy];
        uint64_t v32 = v237;
        id v31 = v238;
        id v24 = v229;
      }
      else
      {
        id v45 = 0;
      }
      id v46 = NSNumber;
      id v47 = +[GEOAPStateFactory sharedFactory];
      double v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 65));

      double v230 = v45;
      double v49 = [v45 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v222 = v49;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v222 = [v51 stateForType:65];
      }
      id v52 = NSNumber;
      uint64_t v53 = +[GEOAPStateFactory sharedFactory];
      uint64_t v54 = objc_msgSend(v52, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 5));

      id v55 = [v230 objectForKeyedSubscript:v54];
      long long v56 = v55;
      if (v55)
      {
        id v228 = v55;
      }
      else
      {
        id v57 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v57 stateForType:5];
      }
      long long v58 = NSNumber;
      long long v59 = +[GEOAPStateFactory sharedFactory];
      long long v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      long long v61 = v230;
      id v62 = [v230 objectForKeyedSubscript:v60];
      id v63 = v62;
      if (v62)
      {
        id v227 = v62;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v227 = [v64 stateForType:16];

        long long v61 = v230;
      }

      id v224 = v19;
      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v226] & 1) != 0
        || GEOConfigGetBOOL())
      {

        id v227 = 0;
      }
      double v65 = NSNumber;
      uint64_t v66 = +[GEOAPStateFactory sharedFactory];
      uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 35));

      uint64_t v68 = [v61 objectForKeyedSubscript:v67];
      double v69 = v68;
      if (v68)
      {
        id v232 = v68;
      }
      else
      {
        uint64_t v70 = +[GEOAPStateFactory sharedFactory];
        id v232 = [v70 stateForType:35];
      }
      double v71 = NSNumber;
      double v72 = +[GEOAPStateFactory sharedFactory];
      id v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 30));

      double v74 = [v61 objectForKeyedSubscript:v73];
      double v75 = v74;
      if (v74)
      {
        id v221 = v74;
      }
      else
      {
        id v76 = +[GEOAPStateFactory sharedFactory];
        id v221 = [v76 stateForType:30];
      }
      id v77 = NSNumber;
      id v78 = +[GEOAPStateFactory sharedFactory];
      id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 0));

      id v80 = [v230 objectForKeyedSubscript:v79];
      id v81 = v80;
      if (v80)
      {
        id v220 = v80;
      }
      else
      {
        uint64_t v82 = +[GEOAPStateFactory sharedFactory];
        id v220 = [v82 stateForType:0];
      }
      id v18 = v225;

      uint64_t v83 = NSNumber;
      uint64_t v84 = +[GEOAPStateFactory sharedFactory];
      id v85 = objc_msgSend(v83, "numberWithInt:", objc_msgSend(v84, "logMsgStateTypeForType:", 3));

      id v86 = [v230 objectForKeyedSubscript:v85];
      long long v87 = v86;
      if (v86)
      {
        id v219 = v86;
      }
      else
      {
        long long v88 = +[GEOAPStateFactory sharedFactory];
        id v219 = [v88 stateForType:3];
      }
      long long v89 = NSNumber;
      long long v90 = +[GEOAPStateFactory sharedFactory];
      id v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 64));

      id v92 = [v230 objectForKeyedSubscript:v91];
      id v93 = v92;
      if (v92)
      {
        id v218 = v92;
      }
      else
      {
        long long v94 = +[GEOAPStateFactory sharedFactory];
        id v218 = [v94 stateForType:64];
      }
      id v95 = NSNumber;
      id v96 = +[GEOAPStateFactory sharedFactory];
      id v97 = objc_msgSend(v95, "numberWithInt:", objc_msgSend(v96, "logMsgStateTypeForType:", 13));

      id v98 = [v230 objectForKeyedSubscript:v97];
      long long v99 = v98;
      if (v98)
      {
        id v217 = v98;
      }
      else
      {
        id v100 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v100 stateForType:13];
      }
      id v101 = NSNumber;
      id v102 = +[GEOAPStateFactory sharedFactory];
      id v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 14));

      id v104 = [v230 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v216 = v104;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v216 = [v106 stateForType:14];
      }
      uint64_t v107 = NSNumber;
      id v108 = +[GEOAPStateFactory sharedFactory];
      long long v109 = objc_msgSend(v107, "numberWithInt:", objc_msgSend(v108, "logMsgStateTypeForType:", 9));

      long long v110 = [v230 objectForKeyedSubscript:v109];
      uint64_t v111 = v110;
      if (v110)
      {
        id v215 = v110;
      }
      else
      {
        long long v112 = +[GEOAPStateFactory sharedFactory];
        id v215 = [v112 stateForType:9];
      }
      long long v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      long long v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 10));

      id v116 = [v230 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v214 = v116;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v214 = [v118 stateForType:10];
      }
      id v119 = NSNumber;
      id v120 = +[GEOAPStateFactory sharedFactory];
      uint64_t v121 = objc_msgSend(v119, "numberWithInt:", objc_msgSend(v120, "logMsgStateTypeForType:", 20));

      unint64_t v122 = [v230 objectForKeyedSubscript:v121];
      uint64_t v123 = v122;
      if (v122)
      {
        id v213 = v122;
      }
      else
      {
        uint64_t v124 = +[GEOAPStateFactory sharedFactory];
        id v213 = [v124 stateForType:20];
      }
      uint64_t v125 = NSNumber;
      id v126 = +[GEOAPStateFactory sharedFactory];
      uint64_t v127 = objc_msgSend(v125, "numberWithInt:", objc_msgSend(v126, "logMsgStateTypeForType:", 42));

      id v128 = [v230 objectForKeyedSubscript:v127];
      uint64_t v129 = v128;
      if (v128)
      {
        id v212 = v128;
      }
      else
      {
        uint64_t v130 = +[GEOAPStateFactory sharedFactory];
        id v212 = [v130 stateForType:42];
      }
      double v131 = NSNumber;
      double v132 = +[GEOAPStateFactory sharedFactory];
      id v133 = objc_msgSend(v131, "numberWithInt:", objc_msgSend(v132, "logMsgStateTypeForType:", 70));

      long long v134 = [v230 objectForKeyedSubscript:v133];
      uint64_t v135 = v134;
      if (v134)
      {
        id v211 = v134;
      }
      else
      {
        id v136 = +[GEOAPStateFactory sharedFactory];
        id v211 = [v136 stateForType:70];
      }
      uint64_t v137 = NSNumber;
      long long v138 = +[GEOAPStateFactory sharedFactory];
      id v139 = objc_msgSend(v137, "numberWithInt:", objc_msgSend(v138, "logMsgStateTypeForType:", 7));

      id v140 = [v230 objectForKeyedSubscript:v139];
      id v141 = v140;
      if (v140)
      {
        id v210 = v140;
      }
      else
      {
        id v142 = +[GEOAPStateFactory sharedFactory];
        id v210 = [v142 stateForType:7];
      }
      id v143 = NSNumber;
      id v144 = +[GEOAPStateFactory sharedFactory];
      id v145 = objc_msgSend(v143, "numberWithInt:", objc_msgSend(v144, "logMsgStateTypeForType:", 17));

      uint64_t v146 = [v230 objectForKeyedSubscript:v145];
      id v147 = v146;
      if (v146)
      {
        id v209 = v146;
      }
      else
      {
        uint64_t v148 = +[GEOAPStateFactory sharedFactory];
        id v209 = [v148 stateForType:17];
      }
      uint64_t v149 = NSNumber;
      id v150 = +[GEOAPStateFactory sharedFactory];
      id v151 = objc_msgSend(v149, "numberWithInt:", objc_msgSend(v150, "logMsgStateTypeForType:", 19));

      id v152 = [v230 objectForKeyedSubscript:v151];
      id v153 = v152;
      if (v152)
      {
        id v208 = v152;
      }
      else
      {
        id v154 = +[GEOAPStateFactory sharedFactory];
        id v208 = [v154 stateForType:19];
      }
      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      uint64_t v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 27));

      id v206 = (void *)v157;
      id v158 = [v230 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        uint64_t v161 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v161 stateForType:27];

        id v160 = v162;
      }
      uint64_t v34 = v226;
      id v163 = v228;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v204 = v160;
        id v164 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v164 setEventType:25];
        id v165 = objc_alloc_init(MEMORY[0x263F417F8]);
        [v164 setClientAcSuggestions:v165];

        id v166 = [v164 clientAcSuggestions];
        [v166 setQuery:v235];

        id v167 = [v164 clientAcSuggestions];
        id v168 = [v167 queryTokens];

        if (!v168)
        {
          id v169 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v225, "count"));
          uint64_t v170 = [v164 clientAcSuggestions];
          [v170 setQueryTokens:v169];
        }
        long long v247 = 0u;
        long long v248 = 0u;
        long long v245 = 0u;
        long long v246 = 0u;
        id v171 = v225;
        uint64_t v172 = [v171 countByEnumeratingWithState:&v245 objects:v257 count:16];
        if (v172)
        {
          uint64_t v173 = v172;
          uint64_t v174 = *(void *)v246;
          do
          {
            for (uint64_t j = 0; j != v173; ++j)
            {
              if (*(void *)v246 != v174) {
                objc_enumerationMutation(v171);
              }
              uint64_t v176 = *(void **)(*((void *)&v245 + 1) + 8 * j);
              id v177 = objc_msgSend(v164, "clientAcSuggestions", v204);
              id v178 = [v177 queryTokens];
              id v179 = (void *)[v176 copy];
              [v178 addObject:v179];
            }
            uint64_t v173 = [v171 countByEnumeratingWithState:&v245 objects:v257 count:16];
          }
          while (v173);
        }

        id v180 = [v164 clientAcSuggestions];
        id v181 = [v180 entries];

        if (!v181)
        {
          id v182 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v236, "count"));
          id v183 = [v164 clientAcSuggestions];
          [v183 setEntries:v182];
        }
        long long v243 = 0u;
        long long v244 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        id v184 = v236;
        uint64_t v185 = [v184 countByEnumeratingWithState:&v241 objects:v256 count:16];
        if (v185)
        {
          uint64_t v186 = v185;
          uint64_t v187 = *(void *)v242;
          do
          {
            for (uint64_t k = 0; k != v186; ++k)
            {
              if (*(void *)v242 != v187) {
                objc_enumerationMutation(v184);
              }
              uint64_t v189 = *(void **)(*((void *)&v241 + 1) + 8 * k);
              id v190 = objc_msgSend(v164, "clientAcSuggestions", v204);
              int v191 = [v190 entries];
              id v192 = (void *)[v189 copy];
              [v191 addObject:v192];
            }
            uint64_t v186 = [v184 countByEnumeratingWithState:&v241 objects:v256 count:16];
          }
          while (v186);
        }

        if (v234)
        {
          uint64_t v193 = [v234 BOOLValue];
          long long v194 = [v164 clientAcSuggestions];
          [v194 setShouldDifferentiateClientAndServerResults:v193];
        }
        id v18 = v225;
        uint64_t v32 = v237;
        id v31 = v238;
        id v21 = v223;
        id v163 = v228;
        if (v238)
        {
          uint64_t v195 = [v238 integerValue];
          double v196 = [v164 clientAcSuggestions];
          [v196 setOverallLatencyInMs:v195];
        }
        id v24 = v229;
        if (v237)
        {
          uint64_t v197 = [v237 BOOLValue];
          id v198 = [v164 clientAcSuggestions];
          [v198 setIsRerankerTriggered:v197];
        }
        if (v224)
        {
          uint64_t v199 = [v224 BOOLValue];
          id v200 = [v164 clientAcSuggestions];
          [v200 setIsRetainedQuery:v199];
        }
        uint64_t v201 = objc_msgSend(v164, "clientAcSuggestions", v204);
        [v201 setTrigger:2];

        if (v210) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        uint64_t v34 = v226;
        if (v232) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v228) {
          [v164 addLogMsgState:v228];
        }
        if (v220) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v219) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v221) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v222) {
          [v164 addLogMsgState:v222];
        }
        if (v213) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v217) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v216) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v215) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v214) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v218) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v227) {
          [v164 addLogMsgState:v227];
        }
        if (v209) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v208) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v205) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v212) {
          [v164 addLogMsgState:v212];
        }
        if (v211) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        id v202 = +[GEOAPStateFactory sharedFactory];
        v239[0] = MEMORY[0x263EF8330];
        v239[1] = 3221225472;
        v239[2] = __231__GEOAPPortal_captureClientACResponseWithQuery_queryTokens_entries_shouldDifferentiateClientAndServerResults_overallLatencyInMs_isRerankerTriggered_isRetainedQuery_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v239[3] = &unk_265345680;
        id v203 = v164;
        id v240 = v203;
        [v202 sessionStateForType:5 callback:v239];

        id v160 = v205;
      }
      v25[2](v25);

      id v19 = v224;
      id v20 = v207;
      goto LABEL_156;
    }
LABEL_14:
    v25[2](v25);
LABEL_156:

    goto LABEL_157;
  }
  id v27 = v24;
  id v28 = v19;
  double v29 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    int v30 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v260 = v30;
    _os_log_impl(&dword_24FE56000, v29, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v25[2](v25);
  uint64_t v32 = v237;
  id v31 = v238;
  id v19 = v28;
  id v24 = v27;
LABEL_157:
}

void __231__GEOAPPortal_captureClientACResponseWithQuery_queryTokens_entries_shouldDifferentiateClientAndServerResults_overallLatencyInMs_isRerankerTriggered_isRetainedQuery_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __231__GEOAPPortal_captureClientACResponseWithQuery_queryTokens_entries_shouldDifferentiateClientAndServerResults_overallLatencyInMs_isRerankerTriggered_isRetainedQuery_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_176()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190B = [v6 containsObject:v8];
}

void __231__GEOAPPortal_captureClientACResponseWithQuery_queryTokens_entries_shouldDifferentiateClientAndServerResults_overallLatencyInMs_isRerankerTriggered_isRetainedQuery_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureClientACKeypressWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 keypressStatus:(int)a6
{
}

+ (void)captureClientACKeypressWithQuery:(id)a3 queryTokens:(id)a4 entries:(id)a5 keypressStatus:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v245 = *MEMORY[0x263EF8340];
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a7;
  id v222 = a8;
  id v19 = a9;
  id v20 = a10;
  v237[0] = MEMORY[0x263EF8330];
  v237[1] = 3221225472;
  v237[2] = __149__GEOAPPortal_captureClientACKeypressWithQuery_queryTokens_entries_keypressStatus_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v237[3] = &unk_265345530;
  id v21 = v20;
  id v239 = v21;
  id v221 = v19;
  id v238 = v221;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v237);
  id v23 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B2019F8 != -1) {
      dispatch_once(&qword_26B2019F8, &__block_literal_global_184);
    }
    id v26 = v222;
    if (byte_26B20190C)
    {
      v22[2](v22);
      goto LABEL_150;
    }
    id v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    id v219 = (void *)v28;
    int v29 = [a1 isDisabledEvent:@"clientACKeypress" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_14;
      }
    }
    else if (v29)
    {
      goto LABEL_14;
    }
    id v217 = v21;
    if (v222) {
      [v222 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v30 == 0.0 || v30 < (double)arc4random() / 4294967300.0)
    {
      id v216 = v17;
      id v195 = v15;
      id v196 = v16;
      id v215 = v18;
      if ([v18 count])
      {
        uint64_t v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v18, "count"));
        uint64_t v32 = v18;
        uint64_t v33 = (void *)v31;
        long long v233 = 0u;
        long long v234 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        id v34 = v32;
        uint64_t v35 = [v34 countByEnumeratingWithState:&v233 objects:v242 count:16];
        if (v35)
        {
          uint64_t v36 = v35;
          uint64_t v37 = *(void *)v234;
          do
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              if (*(void *)v234 != v37) {
                objc_enumerationMutation(v34);
              }
              uint64_t v39 = *(void **)(*((void *)&v233 + 1) + 8 * i);
              uint64_t v40 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
              [v33 setObject:v39 forKeyedSubscript:v40];
            }
            uint64_t v36 = [v34 countByEnumeratingWithState:&v233 objects:v242 count:16];
          }
          while (v36);
        }

        uint64_t v41 = (void *)[v33 copy];
        id v16 = v196;
        id v26 = v222;
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v42 = NSNumber;
      uint64_t v43 = +[GEOAPStateFactory sharedFactory];
      uint64_t v44 = objc_msgSend(v42, "numberWithInt:", objc_msgSend(v43, "logMsgStateTypeForType:", 65));

      id v218 = v41;
      id v45 = [v41 objectForKeyedSubscript:v44];
      id v46 = v45;
      if (v45)
      {
        id v214 = v45;
      }
      else
      {
        id v47 = +[GEOAPStateFactory sharedFactory];
        id v214 = [v47 stateForType:65];
      }
      double v48 = NSNumber;
      double v49 = +[GEOAPStateFactory sharedFactory];
      id v50 = objc_msgSend(v48, "numberWithInt:", objc_msgSend(v49, "logMsgStateTypeForType:", 5));

      id v51 = [v41 objectForKeyedSubscript:v50];
      id v52 = v51;
      if (v51)
      {
        id v213 = v51;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v213 = [v53 stateForType:5];
      }
      uint64_t v54 = NSNumber;
      id v55 = +[GEOAPStateFactory sharedFactory];
      long long v56 = objc_msgSend(v54, "numberWithInt:", objc_msgSend(v55, "logMsgStateTypeForType:", 16));

      id v57 = [v218 objectForKeyedSubscript:v56];
      long long v58 = v57;
      if (v57)
      {
        id v59 = v57;
      }
      else
      {
        long long v60 = +[GEOAPStateFactory sharedFactory];
        id v59 = [v60 stateForType:16];
      }
      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v219] & 1) != 0
        || GEOConfigGetBOOL())
      {

        id v212 = 0;
      }
      else
      {
        id v212 = v59;
      }
      long long v61 = NSNumber;
      id v62 = +[GEOAPStateFactory sharedFactory];
      id v63 = objc_msgSend(v61, "numberWithInt:", objc_msgSend(v62, "logMsgStateTypeForType:", 35));

      id v64 = [v218 objectForKeyedSubscript:v63];
      double v65 = v64;
      if (v64)
      {
        id v211 = v64;
      }
      else
      {
        uint64_t v66 = +[GEOAPStateFactory sharedFactory];
        id v211 = [v66 stateForType:35];
      }
      uint64_t v67 = NSNumber;
      uint64_t v68 = +[GEOAPStateFactory sharedFactory];
      double v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 30));

      uint64_t v70 = [v218 objectForKeyedSubscript:v69];
      double v71 = v70;
      if (v70)
      {
        id v210 = v70;
      }
      else
      {
        double v72 = +[GEOAPStateFactory sharedFactory];
        id v210 = [v72 stateForType:30];
      }
      id v73 = NSNumber;
      double v74 = +[GEOAPStateFactory sharedFactory];
      double v75 = objc_msgSend(v73, "numberWithInt:", objc_msgSend(v74, "logMsgStateTypeForType:", 0));

      id v76 = [v218 objectForKeyedSubscript:v75];
      id v77 = v76;
      if (v76)
      {
        id v209 = v76;
      }
      else
      {
        id v78 = +[GEOAPStateFactory sharedFactory];
        id v209 = [v78 stateForType:0];
      }
      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 3));

      uint64_t v82 = v218;
      uint64_t v83 = [v218 objectForKeyedSubscript:v81];
      uint64_t v84 = v83;
      if (v83)
      {
        id v208 = v83;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v208 = [v85 stateForType:3];
      }
      id v86 = NSNumber;
      long long v87 = +[GEOAPStateFactory sharedFactory];
      long long v88 = objc_msgSend(v86, "numberWithInt:", objc_msgSend(v87, "logMsgStateTypeForType:", 64));

      long long v89 = [v218 objectForKeyedSubscript:v88];
      long long v90 = v89;
      if (v89)
      {
        id v207 = v89;
      }
      else
      {
        id v91 = +[GEOAPStateFactory sharedFactory];
        id v207 = [v91 stateForType:64];
      }
      id v92 = NSNumber;
      id v93 = +[GEOAPStateFactory sharedFactory];
      long long v94 = objc_msgSend(v92, "numberWithInt:", objc_msgSend(v93, "logMsgStateTypeForType:", 13));

      id v95 = [v218 objectForKeyedSubscript:v94];
      id v96 = v95;
      if (v95)
      {
        id v206 = v95;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v97 stateForType:13];
      }
      id v98 = NSNumber;
      long long v99 = +[GEOAPStateFactory sharedFactory];
      id v100 = objc_msgSend(v98, "numberWithInt:", objc_msgSend(v99, "logMsgStateTypeForType:", 14));

      id v101 = [v218 objectForKeyedSubscript:v100];
      id v102 = v101;
      if (v101)
      {
        id v205 = v101;
      }
      else
      {
        id v103 = +[GEOAPStateFactory sharedFactory];
        id v205 = [v103 stateForType:14];
      }
      id v104 = NSNumber;
      id v105 = +[GEOAPStateFactory sharedFactory];
      id v106 = objc_msgSend(v104, "numberWithInt:", objc_msgSend(v105, "logMsgStateTypeForType:", 9));

      uint64_t v107 = [v218 objectForKeyedSubscript:v106];
      id v108 = v107;
      if (v107)
      {
        id v204 = v107;
      }
      else
      {
        long long v109 = +[GEOAPStateFactory sharedFactory];
        id v204 = [v109 stateForType:9];
      }
      long long v110 = NSNumber;
      uint64_t v111 = +[GEOAPStateFactory sharedFactory];
      long long v112 = objc_msgSend(v110, "numberWithInt:", objc_msgSend(v111, "logMsgStateTypeForType:", 10));

      long long v113 = [v218 objectForKeyedSubscript:v112];
      id v114 = v113;
      if (v113)
      {
        id v203 = v113;
      }
      else
      {
        long long v115 = +[GEOAPStateFactory sharedFactory];
        id v203 = [v115 stateForType:10];
      }
      id v116 = NSNumber;
      id v117 = +[GEOAPStateFactory sharedFactory];
      id v118 = objc_msgSend(v116, "numberWithInt:", objc_msgSend(v117, "logMsgStateTypeForType:", 20));

      id v119 = [v218 objectForKeyedSubscript:v118];
      id v120 = v119;
      if (v119)
      {
        id v202 = v119;
      }
      else
      {
        uint64_t v121 = +[GEOAPStateFactory sharedFactory];
        id v202 = [v121 stateForType:20];
      }
      unint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 42));

      uint64_t v125 = [v218 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v201 = v125;
      }
      else
      {
        uint64_t v127 = +[GEOAPStateFactory sharedFactory];
        id v201 = [v127 stateForType:42];
      }
      id v128 = NSNumber;
      uint64_t v129 = +[GEOAPStateFactory sharedFactory];
      uint64_t v130 = objc_msgSend(v128, "numberWithInt:", objc_msgSend(v129, "logMsgStateTypeForType:", 70));

      double v131 = [v218 objectForKeyedSubscript:v130];
      double v132 = v131;
      if (v131)
      {
        id v200 = v131;
      }
      else
      {
        id v133 = +[GEOAPStateFactory sharedFactory];
        id v200 = [v133 stateForType:70];
      }
      long long v134 = NSNumber;
      uint64_t v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 7));

      uint64_t v137 = [v218 objectForKeyedSubscript:v136];
      long long v138 = v137;
      if (v137)
      {
        id v199 = v137;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v199 = [v139 stateForType:7];
      }
      id v140 = NSNumber;
      id v141 = +[GEOAPStateFactory sharedFactory];
      id v142 = objc_msgSend(v140, "numberWithInt:", objc_msgSend(v141, "logMsgStateTypeForType:", 17));

      id v143 = [v218 objectForKeyedSubscript:v142];
      id v144 = v143;
      if (v143)
      {
        id v198 = v143;
      }
      else
      {
        id v145 = +[GEOAPStateFactory sharedFactory];
        id v198 = [v145 stateForType:17];
      }
      uint64_t v146 = NSNumber;
      id v147 = +[GEOAPStateFactory sharedFactory];
      uint64_t v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 19));

      uint64_t v149 = [v218 objectForKeyedSubscript:v148];
      id v150 = v149;
      if (v149)
      {
        id v197 = v149;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v197 = [v151 stateForType:19];
      }
      id v152 = NSNumber;
      id v153 = +[GEOAPStateFactory sharedFactory];
      uint64_t v154 = objc_msgSend(v152, "numberWithInt:", objc_msgSend(v153, "logMsgStateTypeForType:", 27));

      long long v194 = (void *)v154;
      id v155 = [v218 objectForKeyedSubscript:v154];
      id v156 = v155;
      if (v155)
      {
        id v157 = v155;
      }
      else
      {
        id v158 = +[GEOAPStateFactory sharedFactory];
        id v159 = [v158 stateForType:27];

        id v157 = v159;
      }
      id v18 = v215;
      id v17 = v216;
      id v15 = v195;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v193 = v157;
        id v160 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v160 setEventType:25];
        id v161 = objc_alloc_init(MEMORY[0x263F417F8]);
        [v160 setClientAcSuggestions:v161];

        id v162 = [v160 clientAcSuggestions];
        [v162 setQuery:v195];

        id v163 = [v160 clientAcSuggestions];
        id v164 = [v163 queryTokens];

        if (!v164)
        {
          id v165 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v16, "count"));
          id v166 = [v160 clientAcSuggestions];
          [v166 setQueryTokens:v165];
        }
        long long v231 = 0u;
        long long v232 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        id v167 = v16;
        uint64_t v168 = [v167 countByEnumeratingWithState:&v229 objects:v241 count:16];
        if (v168)
        {
          uint64_t v169 = v168;
          uint64_t v170 = *(void *)v230;
          do
          {
            for (uint64_t j = 0; j != v169; ++j)
            {
              if (*(void *)v230 != v170) {
                objc_enumerationMutation(v167);
              }
              uint64_t v172 = *(void **)(*((void *)&v229 + 1) + 8 * j);
              uint64_t v173 = [v160 clientAcSuggestions];
              uint64_t v174 = [v173 queryTokens];
              uint64_t v175 = (void *)[v172 copy];
              [v174 addObject:v175];
            }
            uint64_t v169 = [v167 countByEnumeratingWithState:&v229 objects:v241 count:16];
          }
          while (v169);
        }

        uint64_t v176 = [v160 clientAcSuggestions];
        id v177 = [v176 entries];

        if (!v177)
        {
          id v178 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v216, "count"));
          id v179 = [v160 clientAcSuggestions];
          [v179 setEntries:v178];
        }
        long long v227 = 0u;
        long long v228 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        id v180 = v216;
        uint64_t v181 = [v180 countByEnumeratingWithState:&v225 objects:v240 count:16];
        if (v181)
        {
          uint64_t v182 = v181;
          uint64_t v183 = *(void *)v226;
          do
          {
            for (uint64_t k = 0; k != v182; ++k)
            {
              if (*(void *)v226 != v183) {
                objc_enumerationMutation(v180);
              }
              uint64_t v185 = *(void **)(*((void *)&v225 + 1) + 8 * k);
              uint64_t v186 = [v160 clientAcSuggestions];
              uint64_t v187 = [v186 entries];
              uint64_t v188 = (void *)[v185 copy];
              [v187 addObject:v188];
            }
            uint64_t v182 = [v180 countByEnumeratingWithState:&v225 objects:v240 count:16];
          }
          while (v182);
        }

        uint64_t v189 = [v160 clientAcSuggestions];
        [v189 setKeypressStatus:a6];

        id v190 = [v160 clientAcSuggestions];
        [v190 setTrigger:1];

        if (v199) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        id v16 = v196;
        id v18 = v215;
        id v17 = v216;
        id v26 = v222;
        id v21 = v217;
        if (v211) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v213) {
          [v160 addLogMsgState:v213];
        }
        if (v209) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v208) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v210) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v214) {
          [v160 addLogMsgState:v214];
        }
        if (v202) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v206) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v205) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v204) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v203) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v207) {
          [v160 addLogMsgState:v207];
        }
        if (v212) {
          [v160 addLogMsgState:v212];
        }
        if (v198) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v197) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        if (v193) {
          [v160 addLogMsgState:v193];
        }
        if (v201) {
          [v160 addLogMsgState:v201];
        }
        if (v200) {
          objc_msgSend(v160, "addLogMsgState:");
        }
        int v191 = +[GEOAPStateFactory sharedFactory];
        v223[0] = MEMORY[0x263EF8330];
        v223[1] = 3221225472;
        v223[2] = __149__GEOAPPortal_captureClientACKeypressWithQuery_queryTokens_entries_keypressStatus_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v223[3] = &unk_265345680;
        id v192 = v160;
        id v224 = v192;
        [v191 sessionStateForType:5 callback:v223];

        uint64_t v82 = v218;
        id v157 = v193;
      }
      v22[2](v22);

      goto LABEL_149;
    }
LABEL_14:
    v22[2](v22);
LABEL_149:

    goto LABEL_150;
  }
  id v24 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    id v25 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v244 = v25;
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v22[2](v22);
  id v26 = v222;
LABEL_150:
}

void __149__GEOAPPortal_captureClientACKeypressWithQuery_queryTokens_entries_keypressStatus_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __149__GEOAPPortal_captureClientACKeypressWithQuery_queryTokens_entries_keypressStatus_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_182()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190C = [v6 containsObject:v8];
}

void __149__GEOAPPortal_captureClientACKeypressWithQuery_queryTokens_entries_keypressStatus_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureGridDurationWithDurationMs:(id)a3 previousState:(int)a4 endState:(int)a5 endStateErrorReasons:(id)a6 displayType:(int)a7
{
}

+ (void)captureGridDurationWithDurationMs:(id)a3 previousState:(int)a4 endState:(int)a5 endStateErrorReasons:(id)a6 displayType:(int)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a6;
  id v16 = a8;
  id v17 = a9;
  id v18 = a10;
  id v19 = a11;
  v139[0] = MEMORY[0x263EF8330];
  v139[1] = 3221225472;
  v139[2] = __171__GEOAPPortal_captureGridDurationWithDurationMs_previousState_endState_endStateErrorReasons_displayType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v139[3] = &unk_265345530;
  id v20 = v19;
  id v141 = v20;
  id v21 = v18;
  id v140 = v21;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v139);
  id v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201A00 != -1) {
      dispatch_once(&qword_26B201A00, &__block_literal_global_190);
    }
    if (byte_26B20190D) {
      goto LABEL_8;
    }
    id v124 = v16;
    id v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    int v29 = [a1 isDisabledEvent:@"gridDuration" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_12:
        id v122 = v21;
        if (v17) {
          [v17 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v30 != 0.0 && v30 >= (double)arc4random() / 4294967300.0)
        {
          v22[2](v22);
LABEL_84:

          goto LABEL_9;
        }
        uint64_t v123 = v28;
        uint64_t v121 = v15;
        uint64_t v111 = v14;
        id v112 = v20;
        id v113 = v17;
        if ([v16 count])
        {
          uint64_t v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v16, "count"));
          long long v135 = 0u;
          long long v136 = 0u;
          long long v137 = 0u;
          long long v138 = 0u;
          id v32 = v16;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v135 objects:v143 count:16];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = *(void *)v136;
            do
            {
              for (uint64_t i = 0; i != v34; ++i)
              {
                if (*(void *)v136 != v35) {
                  objc_enumerationMutation(v32);
                }
                uint64_t v37 = *(void **)(*((void *)&v135 + 1) + 8 * i);
                id v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
                [v31 setObject:v37 forKeyedSubscript:v38];
              }
              uint64_t v34 = [v32 countByEnumeratingWithState:&v135 objects:v143 count:16];
            }
            while (v34);
          }

          uint64_t v39 = (void *)[v31 copy];
          id v20 = v112;
          id v17 = v113;
        }
        else
        {
          uint64_t v39 = 0;
        }
        uint64_t v40 = NSNumber;
        uint64_t v41 = +[GEOAPStateFactory sharedFactory];
        uint64_t v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 65));

        uint64_t v125 = v39;
        uint64_t v43 = [v39 objectForKeyedSubscript:v42];
        uint64_t v44 = v43;
        if (v43)
        {
          id v120 = v43;
        }
        else
        {
          id v45 = +[GEOAPStateFactory sharedFactory];
          id v120 = [v45 stateForType:65];
        }
        id v46 = NSNumber;
        id v47 = +[GEOAPStateFactory sharedFactory];
        double v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 16));

        double v49 = [v39 objectForKeyedSubscript:v48];
        id v50 = v49;
        if (v49)
        {
          id v51 = v49;
        }
        else
        {
          id v52 = +[GEOAPStateFactory sharedFactory];
          id v51 = [v52 stateForType:16];
        }
        if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v123] & 1) != 0
          || GEOConfigGetBOOL())
        {

          id v119 = 0;
        }
        else
        {
          id v119 = v51;
        }
        uint64_t v53 = NSNumber;
        uint64_t v54 = +[GEOAPStateFactory sharedFactory];
        id v55 = objc_msgSend(v53, "numberWithInt:", objc_msgSend(v54, "logMsgStateTypeForType:", 30));

        long long v56 = [v125 objectForKeyedSubscript:v55];
        id v57 = v56;
        if (v56)
        {
          id v118 = v56;
        }
        else
        {
          long long v58 = +[GEOAPStateFactory sharedFactory];
          id v118 = [v58 stateForType:30];
        }
        id v15 = v121;
        id v14 = v111;

        id v59 = NSNumber;
        long long v60 = +[GEOAPStateFactory sharedFactory];
        uint64_t v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 0));

        long long v115 = (void *)v61;
        id v62 = [v125 objectForKeyedSubscript:v61];
        id v63 = v62;
        if (v62)
        {
          id v117 = v62;
        }
        else
        {
          id v64 = +[GEOAPStateFactory sharedFactory];
          id v117 = [v64 stateForType:0];
        }
        double v65 = NSNumber;
        uint64_t v66 = +[GEOAPStateFactory sharedFactory];
        uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 3));

        uint64_t v68 = [v125 objectForKeyedSubscript:v67];
        double v69 = v68;
        if (v68)
        {
          id v116 = v68;
        }
        else
        {
          uint64_t v70 = +[GEOAPStateFactory sharedFactory];
          id v116 = [v70 stateForType:3];
        }
        double v71 = NSNumber;
        double v72 = +[GEOAPStateFactory sharedFactory];
        uint64_t v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 64));

        long long v109 = (void *)v73;
        double v74 = [v125 objectForKeyedSubscript:v73];
        double v75 = v74;
        if (v74)
        {
          id v114 = v74;
        }
        else
        {
          id v76 = +[GEOAPStateFactory sharedFactory];
          id v114 = [v76 stateForType:64];
        }
        uint64_t v28 = v123;

        id v77 = NSNumber;
        id v78 = +[GEOAPStateFactory sharedFactory];
        uint64_t v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 9));

        id v80 = v125;
        long long v110 = (void *)v79;
        id v81 = [v125 objectForKeyedSubscript:v79];
        uint64_t v82 = v81;
        if (v81)
        {
          id v83 = v81;
        }
        else
        {
          uint64_t v84 = +[GEOAPStateFactory sharedFactory];
          uint64_t v85 = [v84 stateForType:9];

          id v83 = (id)v85;
        }
        id v21 = v122;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v108 = v83;
          id v86 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v86 setEventType:34];
          id v87 = objc_alloc_init(MEMORY[0x263F41840]);
          [v86 setGridDuration:v87];

          if (v111)
          {
            uint64_t v88 = [v111 unsignedLongLongValue];
            long long v89 = [v86 gridDuration];
            [v89 setDurationMs:v88];
          }
          long long v90 = [v86 gridDuration];
          [v90 setPreviousState:a4];

          id v91 = [v86 gridDuration];
          [v91 setEndState:a5];

          id v92 = [v86 gridDuration];
          id v93 = [v92 endStateErrorReasons];

          if (!v93)
          {
            long long v94 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v121, "count"));
            id v95 = [v86 gridDuration];
            [v95 setEndStateErrorReasons:v94];
          }
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          id v96 = v121;
          uint64_t v97 = [v96 countByEnumeratingWithState:&v131 objects:v142 count:16];
          if (v97)
          {
            uint64_t v98 = v97;
            uint64_t v99 = *(void *)v132;
            do
            {
              for (uint64_t j = 0; j != v98; ++j)
              {
                if (*(void *)v132 != v99) {
                  objc_enumerationMutation(v96);
                }
                id v101 = *(void **)(*((void *)&v131 + 1) + 8 * j);
                id v102 = [v86 gridDuration];
                id v103 = [v102 endStateErrorReasons];
                id v104 = (void *)[v101 copy];
                [v103 addObject:v104];
              }
              uint64_t v98 = [v96 countByEnumeratingWithState:&v131 objects:v142 count:16];
            }
            while (v98);
          }

          id v105 = [v86 gridDuration];
          [v105 setDisplayType:a7];

          if (v117) {
            objc_msgSend(v86, "addLogMsgState:");
          }
          id v15 = v121;
          id v20 = v112;
          uint64_t v28 = v123;
          if (v116) {
            objc_msgSend(v86, "addLogMsgState:");
          }
          if (v118) {
            [v86 addLogMsgState:v118];
          }
          id v17 = v113;
          id v21 = v122;
          if (v120) {
            [v86 addLogMsgState:v120];
          }
          if (v108) {
            objc_msgSend(v86, "addLogMsgState:");
          }
          if (v114) {
            objc_msgSend(v86, "addLogMsgState:");
          }
          if (v119) {
            objc_msgSend(v86, "addLogMsgState:");
          }
          id v106 = +[GEOAPStateFactory sharedFactory];
          v129[0] = MEMORY[0x263EF8330];
          v129[1] = 3221225472;
          v129[2] = __171__GEOAPPortal_captureGridDurationWithDurationMs_previousState_endState_endStateErrorReasons_displayType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v129[3] = &unk_265345680;
          id v130 = v86;
          id v107 = v86;
          [v106 sessionStateForType:5 callback:v129];

          id v80 = v125;
          id v83 = v108;
        }
        v22[2](v22);

LABEL_83:
        id v16 = v124;
        goto LABEL_84;
      }
    }
    else if (!v29)
    {
      goto LABEL_12;
    }
    v22[2](v22);
    goto LABEL_83;
  }
  id v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    id v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v145 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v22[2](v22);
LABEL_9:
}

void __171__GEOAPPortal_captureGridDurationWithDurationMs_previousState_endState_endStateErrorReasons_displayType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __171__GEOAPPortal_captureGridDurationWithDurationMs_previousState_endState_endStateErrorReasons_displayType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_188()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190D = [v6 containsObject:v8];
}

void __171__GEOAPPortal_captureGridDurationWithDurationMs_previousState_endState_endStateErrorReasons_displayType_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 isBadEvExperience:(id)a19 isEvSampleTrip:(id)a20 stateOfChargeAtOrigin:(id)a21 stateOfChargeAtDestPredicted:(id)a22 stateOfChargeAtDestActual:(id)a23 stateOfChargeDiffAtDest:(id)a24 waypoints:(id)a25 evConsumptionModel:(id)a26 evChargingMode:(id)a27 activeNavMode:(int)a28 arWalkingUsedInRoutePlanning:(id)a29 arWalkingUsedInNavigation:(id)a30 voiceGuidanceLevel:(int)a31 hFPEnabled:(id)a32 isEndRouteTermination:(id)a33 isParkedCarTermination:(id)a34 isTransitionToWalkingTermination:(id)a35 isTransitionToFindmyTermination:(id)a36 parkingDetectionLocation:(id)a37 timeBetweenParkedAndArrival:(id)a38 arrivedAtDestinationCount:(id)a39 inParkingModeCount:(id)a40 isInParkingMode:(id)a41 isSuggestToWalkingTriggered:(id)a42 isTransitedToWalking:(id)a43 isSuggestToFindmyTriggered:(id)a44 isTransitedToFindmy:(id)a45
{
  long long v45 = *(_OWORD *)&a7->var9;
  long long v48 = *(_OWORD *)&a7->var0;
  v49[0] = v45;
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)&a7->var12;
  LODWORD(v47) = a31;
  LODWORD(v46) = a28;
  objc_msgSend(a1, "captureDirectionsWithDirectionsFeedbacks:finalLocation:arrivalLocation:arrivedAtDestination:navigationAudioFeedback:durationOfTrip:durationInNavigationModes:preArrival:originalEta:isVlfImprovementUsed:isCoarseLocationUsed:acceptedCyclingWorkout:batteryDied:chargingStopAdded:isSiriEngaged:tripOrigin:isBadEvExperience:isEvSampleTrip:stateOfChargeAtOrigin:stateOfChargeAtDestPredicted:stateOfChargeAtDestActual:stateOfChargeDiffAtDest:waypoints:evConsumptionModel:evChargingMode:activeNavMode:arWalkingUsedInRoutePlanning:arWalkingUsedInNavigation:voiceGuidanceLevel:hFPEnabled:isEndRouteTermination:isParkedCarTermination:isTransitionToWalkingTermination:isTransitionToFindmyTermination:parkingDetectionLocation:timeBetweenParkedAndArrival:arrivedAtDestinationCount:inParkingModeCount:isInParkingMode:isSuggestToWalkingTriggered:isTransitedToWalking:isSuggestToFindmyTriggered:isTransitedToFindmy:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, a4, a5, a6, &v48, a8, a9, a10, a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    v46,
    a29,
    a30,
    v47,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    0,
    0,
    0,
    0);
}

+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 isBadEvExperience:(id)a19 isEvSampleTrip:(id)a20 stateOfChargeAtOrigin:(id)a21 stateOfChargeAtDestPredicted:(id)a22 stateOfChargeAtDestActual:(id)a23 stateOfChargeDiffAtDest:(id)a24 waypoints:(id)a25 evConsumptionModel:(id)a26 evChargingMode:(id)a27 activeNavMode:(int)a28 arWalkingUsedInRoutePlanning:(id)a29 arWalkingUsedInNavigation:(id)a30 voiceGuidanceLevel:(int)a31 hFPEnabled:(id)a32 isEndRouteTermination:(id)a33 isParkedCarTermination:(id)a34 isTransitionToWalkingTermination:(id)a35 isTransitionToFindmyTermination:(id)a36 parkingDetectionLocation:(id)a37 timeBetweenParkedAndArrival:(id)a38 arrivedAtDestinationCount:(id)a39 inParkingModeCount:(id)a40 isInParkingMode:(id)a41 isSuggestToWalkingTriggered:(id)a42 isTransitedToWalking:(id)a43 isSuggestToFindmyTriggered:(id)a44 isTransitedToFindmy:(id)a45 additionalStates:(id)a46 providedDropRate:(id)a47 completionQueue:(id)a48 completionBlock:(id)a49
{
  uint64_t v302 = *MEMORY[0x263EF8340];
  id v273 = a3;
  id v52 = a4;
  id v53 = a5;
  id v54 = a6;
  id v271 = a8;
  id v269 = a9;
  id v268 = a10;
  id v267 = a11;
  id v55 = a12;
  id v56 = a13;
  id v57 = a14;
  id v266 = a15;
  id v265 = a16;
  id v264 = a17;
  id v263 = a18;
  id v262 = a19;
  id v261 = a20;
  id v260 = a21;
  id v259 = a22;
  id v258 = a23;
  id v257 = a24;
  id v272 = a25;
  id v256 = a26;
  id v255 = a27;
  id v254 = a29;
  id v253 = a30;
  id v252 = a32;
  id v251 = a33;
  id v250 = a34;
  id v249 = a35;
  id v248 = a36;
  id v247 = a37;
  id v246 = a38;
  id v245 = a39;
  id v244 = a40;
  id v243 = a41;
  id v242 = a42;
  id v241 = a43;
  id v240 = a44;
  id v239 = a45;
  id v274 = a46;
  id v275 = a47;
  id v58 = a48;
  id v59 = a49;
  v294[0] = MEMORY[0x263EF8330];
  v294[1] = 3221225472;
  v294[2] = __978__GEOAPPortal_captureDirectionsWithDirectionsFeedbacks_finalLocation_arrivalLocation_arrivedAtDestination_navigationAudioFeedback_durationOfTrip_durationInNavigationModes_preArrival_originalEta_isVlfImprovementUsed_isCoarseLocationUsed_acceptedCyclingWorkout_batteryDied_chargingStopAdded_isSiriEngaged_tripOrigin_isBadEvExperience_isEvSampleTrip_stateOfChargeAtOrigin_stateOfChargeAtDestPredicted_stateOfChargeAtDestActual_stateOfChargeDiffAtDest_waypoints_evConsumptionModel_evChargingMode_activeNavMode_arWalkingUsedInRoutePlanning_arWalkingUsedInNavigation_voiceGuidanceLevel_hFPEnabled_isEndRouteTermination_isParkedCarTermination_isTransitionToWalkingTermination_isTransitionToFindmyTermination_parkingDetectionLocation_timeBetweenParkedAndArrival_arrivedAtDestinationCount_inParkingModeCount_isInParkingMode_isSuggestToWalkingTriggered_isTransitedToWalking_isSuggestToFindmyTriggered_isTransitedToFindmy_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v294[3] = &unk_265345530;
  id v238 = v59;
  id v296 = v238;
  id v60 = v58;
  id v295 = v60;
  uint64_t v61 = (void (**)(void))MEMORY[0x25337B980](v294);
  id v62 = +[GEOAPServiceManager sharedManager];
  int v63 = [v62 eventCollectionIsDisabledForCurrentProcess];

  if (!v63)
  {
    if (qword_26B201A08 != -1) {
      dispatch_once(&qword_26B201A08, &__block_literal_global_197);
    }
    if (byte_26B20190E)
    {
      v61[2](v61);
      goto LABEL_139;
    }
    long long v233 = v55;
    id v237 = v54;
    uint64_t v67 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v68 = [v67 countryCode];

    int v69 = [a1 isDisabledEvent:@"directions" inCountry:v68];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        long long v232 = v56;
        if (v275) {
          [v275 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v55 = v233;
        if (v70 != 0.0 && v70 >= (double)arc4random() / 4294967300.0)
        {
          v61[2](v61);
LABEL_138:

          goto LABEL_139;
        }
        id v230 = v53;
        id v231 = v52;
        long long v228 = v68;
        long long v229 = v57;
        if ([v274 count])
        {
          double v71 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v274, "count"));
          long long v290 = 0u;
          long long v291 = 0u;
          long long v292 = 0u;
          long long v293 = 0u;
          id v72 = v274;
          uint64_t v73 = [v72 countByEnumeratingWithState:&v290 objects:v299 count:16];
          if (v73)
          {
            uint64_t v74 = v73;
            uint64_t v75 = *(void *)v291;
            do
            {
              for (uint64_t i = 0; i != v74; ++i)
              {
                if (*(void *)v291 != v75) {
                  objc_enumerationMutation(v72);
                }
                id v77 = *(void **)(*((void *)&v290 + 1) + 8 * i);
                id v78 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v77, "stateType"));
                [v71 setObject:v77 forKeyedSubscript:v78];
              }
              uint64_t v74 = [v72 countByEnumeratingWithState:&v290 objects:v299 count:16];
            }
            while (v74);
          }

          uint64_t v79 = (void *)[v71 copy];
          id v57 = v229;
          id v53 = v230;
        }
        else
        {
          uint64_t v79 = 0;
        }
        long long v236 = v79;
        id v80 = NSNumber;
        id v81 = +[GEOAPStateFactory sharedFactory];
        uint64_t v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 2));

        id v83 = [v79 objectForKeyedSubscript:v82];
        uint64_t v84 = v83;
        if (v83)
        {
          id v227 = v83;
        }
        else
        {
          uint64_t v85 = +[GEOAPStateFactory sharedFactory];
          id v227 = [v85 stateForType:2];
        }
        id v86 = NSNumber;
        id v87 = +[GEOAPStateFactory sharedFactory];
        uint64_t v88 = objc_msgSend(v86, "numberWithInt:", objc_msgSend(v87, "logMsgStateTypeForType:", 30));

        long long v89 = [v236 objectForKeyedSubscript:v88];
        long long v90 = v89;
        if (v89)
        {
          id v226 = v89;
        }
        else
        {
          id v91 = +[GEOAPStateFactory sharedFactory];
          id v226 = [v91 stateForType:30];
        }
        id v92 = NSNumber;
        id v93 = +[GEOAPStateFactory sharedFactory];
        long long v94 = objc_msgSend(v92, "numberWithInt:", objc_msgSend(v93, "logMsgStateTypeForType:", 0));

        id v95 = [v236 objectForKeyedSubscript:v94];
        id v96 = v95;
        if (v95)
        {
          id v225 = v95;
        }
        else
        {
          uint64_t v97 = +[GEOAPStateFactory sharedFactory];
          id v225 = [v97 stateForType:0];
        }
        uint64_t v98 = NSNumber;
        uint64_t v99 = +[GEOAPStateFactory sharedFactory];
        id v100 = objc_msgSend(v98, "numberWithInt:", objc_msgSend(v99, "logMsgStateTypeForType:", 3));

        id v101 = [v236 objectForKeyedSubscript:v100];
        id v102 = v101;
        if (v101)
        {
          id v224 = v101;
        }
        else
        {
          id v103 = +[GEOAPStateFactory sharedFactory];
          id v224 = [v103 stateForType:3];
        }
        uint64_t v68 = v228;

        id v104 = NSNumber;
        id v105 = +[GEOAPStateFactory sharedFactory];
        id v106 = objc_msgSend(v104, "numberWithInt:", objc_msgSend(v105, "logMsgStateTypeForType:", 70));

        id v107 = [v236 objectForKeyedSubscript:v106];
        id v108 = v107;
        if (v107)
        {
          id v223 = v107;
        }
        else
        {
          +[GEOAPStateFactory sharedFactory];
          long long v110 = v109 = v106;
          id v223 = [v110 stateForType:70];

          id v106 = v109;
        }
        id v52 = v231;
        uint64_t v111 = v225;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v222 = v106;
          id v112 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v112 setEventType:8];
          id v113 = objc_alloc_init(MEMORY[0x263F41810]);
          [v112 setDirectionsEvent:v113];

          id v114 = [v112 directionsEvent];
          long long v115 = [v114 directionsFeedbacks];

          if (!v115)
          {
            id v116 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v273, "count"));
            id v117 = [v112 directionsEvent];
            [v117 setDirectionsFeedbacks:v116];
          }
          long long v288 = 0u;
          long long v289 = 0u;
          long long v286 = 0u;
          long long v287 = 0u;
          id v118 = v273;
          uint64_t v119 = [v118 countByEnumeratingWithState:&v286 objects:v298 count:16];
          if (v119)
          {
            uint64_t v120 = v119;
            uint64_t v121 = *(void *)v287;
            do
            {
              for (uint64_t j = 0; j != v120; ++j)
              {
                if (*(void *)v287 != v121) {
                  objc_enumerationMutation(v118);
                }
                uint64_t v123 = *(void **)(*((void *)&v286 + 1) + 8 * j);
                id v124 = [v112 directionsEvent];
                uint64_t v125 = [v124 directionsFeedbacks];
                id v126 = (void *)[v123 copy];
                [v125 addObject:v126];
              }
              uint64_t v120 = [v118 countByEnumeratingWithState:&v286 objects:v298 count:16];
            }
            while (v120);
          }

          uint64_t v127 = [v112 directionsEvent];
          [v127 setFinalLocation:v231];

          id v128 = [v112 directionsEvent];
          [v128 setArrivalLocation:v230];

          if (v237)
          {
            uint64_t v129 = [v237 BOOLValue];
            id v130 = [v112 directionsEvent];
            [v130 setArrivedAtDestination:v129];
          }
          long long v131 = *(_OWORD *)&a7->var9;
          long long v284 = *(_OWORD *)&a7->var0;
          v285[0] = v131;
          *(_OWORD *)((char *)v285 + 12) = *(_OWORD *)&a7->var12;
          long long v132 = [v112 directionsEvent];
          long long v282 = v284;
          v283[0] = v285[0];
          *(_OWORD *)((char *)v283 + 12) = *(_OWORD *)((char *)v285 + 12);
          [v132 setNavigationAudioFeedback:&v282];

          if (v271)
          {
            [v271 doubleValue];
            double v134 = v133;
            long long v135 = [v112 directionsEvent];
            [v135 setDurationOfTrip:v134];
          }
          long long v136 = [v112 directionsEvent];
          [v136 setDurationInNavigationModes:v269];

          if (v268)
          {
            uint64_t v137 = [v268 BOOLValue];
            long long v138 = [v112 directionsEvent];
            [v138 setPreArrival:v137];
          }
          if (v267)
          {
            uint64_t v139 = [v267 unsignedLongLongValue];
            id v140 = [v112 directionsEvent];
            [v140 setOriginalEta:v139];
          }
          if (v233)
          {
            uint64_t v141 = [v233 BOOLValue];
            id v142 = [v112 directionsEvent];
            [v142 setIsVlfImprovementUsed:v141];
          }
          if (v232)
          {
            uint64_t v143 = [v232 BOOLValue];
            id v144 = [v112 directionsEvent];
            [v144 setIsCoarseLocationUsed:v143];
          }
          if (v229)
          {
            uint64_t v145 = [v229 BOOLValue];
            uint64_t v146 = [v112 directionsEvent];
            [v146 setAcceptedCyclingWorkout:v145];
          }
          if (v266)
          {
            uint64_t v147 = [v266 BOOLValue];
            uint64_t v148 = [v112 directionsEvent];
            [v148 setBatteryDied:v147];
          }
          if (v265)
          {
            uint64_t v149 = [v265 BOOLValue];
            id v150 = [v112 directionsEvent];
            [v150 setChargingStopAdded:v149];
          }
          if (v264)
          {
            uint64_t v151 = [v264 BOOLValue];
            id v152 = [v112 directionsEvent];
            [v152 setIsSiriEngaged:v151];
          }
          id v153 = [v112 directionsEvent];
          [v153 setTripOrigin:v263];

          if (v262)
          {
            uint64_t v154 = [v262 BOOLValue];
            id v155 = [v112 directionsEvent];
            [v155 setIsBadEvExperience:v154];
          }
          if (v261)
          {
            uint64_t v156 = [v261 BOOLValue];
            id v157 = [v112 directionsEvent];
            [v157 setIsEvSampleTrip:v156];
          }
          if (v260)
          {
            uint64_t v158 = [v260 unsignedLongLongValue];
            id v159 = [v112 directionsEvent];
            [v159 setStateOfChargeAtOrigin:v158];
          }
          if (v259)
          {
            uint64_t v160 = [v259 unsignedLongLongValue];
            id v161 = [v112 directionsEvent];
            [v161 setStateOfChargeAtDestPredicted:v160];
          }
          if (v258)
          {
            uint64_t v162 = [v258 unsignedLongLongValue];
            id v163 = [v112 directionsEvent];
            [v163 setStateOfChargeAtDestActual:v162];
          }
          if (v257)
          {
            uint64_t v164 = [v257 unsignedLongLongValue];
            id v165 = [v112 directionsEvent];
            [v165 setStateOfChargeDiffAtDest:v164];
          }
          id v166 = [v112 directionsEvent];
          id v167 = [v166 waypoints];

          if (!v167)
          {
            uint64_t v168 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v272, "count"));
            uint64_t v169 = [v112 directionsEvent];
            [v169 setWaypoints:v168];
          }
          long long v280 = 0u;
          long long v281 = 0u;
          long long v278 = 0u;
          long long v279 = 0u;
          id v170 = v272;
          uint64_t v171 = [v170 countByEnumeratingWithState:&v278 objects:v297 count:16];
          if (v171)
          {
            uint64_t v172 = v171;
            uint64_t v173 = *(void *)v279;
            do
            {
              for (uint64_t k = 0; k != v172; ++k)
              {
                if (*(void *)v279 != v173) {
                  objc_enumerationMutation(v170);
                }
                uint64_t v175 = *(void **)(*((void *)&v278 + 1) + 8 * k);
                uint64_t v176 = [v112 directionsEvent];
                id v177 = [v176 waypoints];
                id v178 = (void *)[v175 copy];
                [v177 addObject:v178];
              }
              uint64_t v172 = [v170 countByEnumeratingWithState:&v278 objects:v297 count:16];
            }
            while (v172);
          }

          id v179 = [v112 directionsEvent];
          [v179 setEvConsumptionModel:v256];

          id v180 = [v112 directionsEvent];
          [v180 setEvChargingMode:v255];

          uint64_t v181 = [v112 directionsEvent];
          [v181 setActiveNavMode:a28];

          if (v254)
          {
            uint64_t v182 = [v254 BOOLValue];
            uint64_t v183 = [v112 directionsEvent];
            [v183 setArWalkingUsedInRoutePlanning:v182];
          }
          id v56 = v232;
          if (v253)
          {
            uint64_t v184 = [v253 BOOLValue];
            uint64_t v185 = [v112 directionsEvent];
            [v185 setArWalkingUsedInNavigation:v184];
          }
          uint64_t v186 = [v112 directionsEvent];
          [v186 setVoiceGuidanceLevel:a31];

          if (v252)
          {
            uint64_t v187 = [v252 BOOLValue];
            uint64_t v188 = [v112 directionsEvent];
            [v188 setHFPEnabled:v187];
          }
          id v53 = v230;
          id v52 = v231;
          if (v251)
          {
            uint64_t v189 = [v251 BOOLValue];
            id v190 = [v112 directionsEvent];
            [v190 setIsEndRouteTermination:v189];
          }
          if (v250)
          {
            uint64_t v191 = [v250 BOOLValue];
            id v192 = [v112 directionsEvent];
            [v192 setIsParkedCarTermination:v191];
          }
          if (v249)
          {
            uint64_t v193 = [v249 BOOLValue];
            long long v194 = [v112 directionsEvent];
            [v194 setIsTransitionToWalkingTermination:v193];
          }
          if (v248)
          {
            uint64_t v195 = [v248 BOOLValue];
            id v196 = [v112 directionsEvent];
            [v196 setIsTransitionToFindmyTermination:v195];
          }
          id v197 = [v112 directionsEvent];
          [v197 setParkingDetectionLocation:v247];

          if (v246)
          {
            [v246 doubleValue];
            double v199 = v198;
            id v200 = [v112 directionsEvent];
            [v200 setTimeBetweenParkedAndArrival:v199];
          }
          if (v245)
          {
            uint64_t v201 = [v245 unsignedLongLongValue];
            id v202 = [v112 directionsEvent];
            [v202 setArrivedAtDestinationCount:v201];
          }
          if (v244)
          {
            uint64_t v203 = [v244 unsignedLongLongValue];
            id v204 = [v112 directionsEvent];
            [v204 setInParkingModeCount:v203];
          }
          if (v243)
          {
            uint64_t v205 = [v243 BOOLValue];
            id v206 = [v112 directionsEvent];
            [v206 setIsInParkingMode:v205];
          }
          if (v242)
          {
            uint64_t v207 = [v242 BOOLValue];
            id v208 = [v112 directionsEvent];
            [v208 setIsSuggestToWalkingTriggered:v207];
          }
          if (v241)
          {
            uint64_t v209 = [v241 BOOLValue];
            id v210 = [v112 directionsEvent];
            [v210 setIsTransitedToWalking:v209];
          }
          if (v240)
          {
            uint64_t v211 = [v240 BOOLValue];
            id v212 = [v112 directionsEvent];
            [v212 setIsSuggestToFindmyTriggered:v211];
          }
          if (v239)
          {
            uint64_t v213 = [v239 BOOLValue];
            id v214 = [v112 directionsEvent];
            [v214 setIsTransitedToFindmy:v213];
          }
          id v215 = [MEMORY[0x263F41C70] sharedInstance];
          uint64_t v216 = [v215 navSessionID];
          uint64_t v218 = v217;
          id v219 = [v112 directionsEvent];
          objc_msgSend(v219, "setNavSessionId:", v216, v218);

          if (v226) {
            objc_msgSend(v112, "addLogMsgState:");
          }
          uint64_t v68 = v228;
          id v57 = v229;
          uint64_t v111 = v225;
          if (v225) {
            [v112 addLogMsgState:v225];
          }
          if (v227) {
            [v112 addLogMsgState:v227];
          }
          if (v224) {
            objc_msgSend(v112, "addLogMsgState:");
          }
          if (v223) {
            objc_msgSend(v112, "addLogMsgState:");
          }
          id v220 = +[GEOAPStateFactory sharedFactory];
          v276[0] = MEMORY[0x263EF8330];
          v276[1] = 3221225472;
          v276[2] = __978__GEOAPPortal_captureDirectionsWithDirectionsFeedbacks_finalLocation_arrivalLocation_arrivedAtDestination_navigationAudioFeedback_durationOfTrip_durationInNavigationModes_preArrival_originalEta_isVlfImprovementUsed_isCoarseLocationUsed_acceptedCyclingWorkout_batteryDied_chargingStopAdded_isSiriEngaged_tripOrigin_isBadEvExperience_isEvSampleTrip_stateOfChargeAtOrigin_stateOfChargeAtDestPredicted_stateOfChargeAtDestActual_stateOfChargeDiffAtDest_waypoints_evConsumptionModel_evChargingMode_activeNavMode_arWalkingUsedInRoutePlanning_arWalkingUsedInNavigation_voiceGuidanceLevel_hFPEnabled_isEndRouteTermination_isParkedCarTermination_isTransitionToWalkingTermination_isTransitionToFindmyTermination_parkingDetectionLocation_timeBetweenParkedAndArrival_arrivedAtDestinationCount_inParkingModeCount_isInParkingMode_isSuggestToWalkingTriggered_isTransitedToWalking_isSuggestToFindmyTriggered_isTransitedToFindmy_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v276[3] = &unk_265345680;
          id v221 = v112;
          id v277 = v221;
          [v220 sessionStateForType:7 callback:v276];

          id v106 = v222;
        }
        v61[2](v61);

LABEL_137:
        id v54 = v237;
        id v55 = v233;
        goto LABEL_138;
      }
    }
    else if (!v69)
    {
      goto LABEL_11;
    }
    v61[2](v61);
    goto LABEL_137;
  }
  id v64 = v55;
  double v65 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v66 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v301 = v66;
    _os_log_impl(&dword_24FE56000, v65, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v61[2](v61);
  id v55 = v64;
LABEL_139:
}

void __978__GEOAPPortal_captureDirectionsWithDirectionsFeedbacks_finalLocation_arrivalLocation_arrivedAtDestination_navigationAudioFeedback_durationOfTrip_durationInNavigationModes_preArrival_originalEta_isVlfImprovementUsed_isCoarseLocationUsed_acceptedCyclingWorkout_batteryDied_chargingStopAdded_isSiriEngaged_tripOrigin_isBadEvExperience_isEvSampleTrip_stateOfChargeAtOrigin_stateOfChargeAtDestPredicted_stateOfChargeAtDestActual_stateOfChargeDiffAtDest_waypoints_evConsumptionModel_evChargingMode_activeNavMode_arWalkingUsedInRoutePlanning_arWalkingUsedInNavigation_voiceGuidanceLevel_hFPEnabled_isEndRouteTermination_isParkedCarTermination_isTransitionToWalkingTermination_isTransitionToFindmyTermination_parkingDetectionLocation_timeBetweenParkedAndArrival_arrivedAtDestinationCount_inParkingModeCount_isInParkingMode_isSuggestToWalkingTriggered_isTransitedToWalking_isSuggestToFindmyTriggered_isTransitedToFindmy_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __978__GEOAPPortal_captureDirectionsWithDirectionsFeedbacks_finalLocation_arrivalLocation_arrivedAtDestination_navigationAudioFeedback_durationOfTrip_durationInNavigationModes_preArrival_originalEta_isVlfImprovementUsed_isCoarseLocationUsed_acceptedCyclingWorkout_batteryDied_chargingStopAdded_isSiriEngaged_tripOrigin_isBadEvExperience_isEvSampleTrip_stateOfChargeAtOrigin_stateOfChargeAtDestPredicted_stateOfChargeAtDestActual_stateOfChargeDiffAtDest_waypoints_evConsumptionModel_evChargingMode_activeNavMode_arWalkingUsedInRoutePlanning_arWalkingUsedInNavigation_voiceGuidanceLevel_hFPEnabled_isEndRouteTermination_isParkedCarTermination_isTransitionToWalkingTermination_isTransitionToFindmyTermination_parkingDetectionLocation_timeBetweenParkedAndArrival_arrivedAtDestinationCount_inParkingModeCount_isInParkingMode_isSuggestToWalkingTriggered_isTransitedToWalking_isSuggestToFindmyTriggered_isTransitedToFindmy_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_195()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190E = [v6 containsObject:v8];
}

void __978__GEOAPPortal_captureDirectionsWithDirectionsFeedbacks_finalLocation_arrivalLocation_arrivedAtDestination_navigationAudioFeedback_durationOfTrip_durationInNavigationModes_preArrival_originalEta_isVlfImprovementUsed_isCoarseLocationUsed_acceptedCyclingWorkout_batteryDied_chargingStopAdded_isSiriEngaged_tripOrigin_isBadEvExperience_isEvSampleTrip_stateOfChargeAtOrigin_stateOfChargeAtDestPredicted_stateOfChargeAtDestActual_stateOfChargeDiffAtDest_waypoints_evConsumptionModel_evChargingMode_activeNavMode_arWalkingUsedInRoutePlanning_arWalkingUsedInNavigation_voiceGuidanceLevel_hFPEnabled_isEndRouteTermination_isParkedCarTermination_isTransitionToWalkingTermination_isTransitionToFindmyTermination_parkingDetectionLocation_timeBetweenParkedAndArrival_arrivedAtDestinationCount_inParkingModeCount_isInParkingMode_isSuggestToWalkingTriggered_isTransitedToWalking_isSuggestToFindmyTriggered_isTransitedToFindmy_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureNavTraceWithNavTraceData:(id)a3
{
}

+ (void)captureNavTraceWithNavTraceData:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v80[0] = MEMORY[0x263EF8330];
  v80[1] = 3221225472;
  v80[2] = __113__GEOAPPortal_captureNavTraceWithNavTraceData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v80[3] = &unk_265345530;
  id v17 = v16;
  id v82 = v17;
  id v18 = v15;
  id v81 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v80);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B201A10 != -1) {
      dispatch_once(&qword_26B201A10, &__block_literal_global_205);
    }
    if (byte_26B20190F) {
      goto LABEL_8;
    }
    int v24 = [MEMORY[0x263F41770] sharedConfiguration];
    id v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"navTrace" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v26)
    {
      goto LABEL_28;
    }
    if (v14) {
      [v14 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v27 == 0.0 || v27 < (double)arc4random() / 4294967300.0)
    {
      id v72 = v12;
      if (objc_msgSend(v13, "count", v25))
      {
        id v70 = v17;
        id v73 = v14;
        uint64_t v28 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        id v29 = v13;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v76 objects:v83 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v77;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v77 != v32) {
                objc_enumerationMutation(v29);
              }
              uint64_t v34 = *(void **)(*((void *)&v76 + 1) + 8 * i);
              uint64_t v35 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v34, "stateType"));
              [v28 setObject:v34 forKeyedSubscript:v35];
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v76 objects:v83 count:16];
          }
          while (v31);
        }

        uint64_t v36 = (void *)[v28 copy];
        id v14 = v73;
        id v17 = v70;
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v37 = NSNumber;
      id v38 = +[GEOAPStateFactory sharedFactory];
      uint64_t v39 = objc_msgSend(v37, "numberWithInt:", objc_msgSend(v38, "logMsgStateTypeForType:", 2));

      uint64_t v40 = [v36 objectForKeyedSubscript:v39];
      uint64_t v41 = v40;
      if (v40)
      {
        id v71 = v40;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v71 = [v42 stateForType:2];
      }
      uint64_t v43 = NSNumber;
      uint64_t v44 = +[GEOAPStateFactory sharedFactory];
      long long v45 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v44, "logMsgStateTypeForType:", 29));

      uint64_t v46 = [v36 objectForKeyedSubscript:v45];
      uint64_t v47 = v46;
      if (v46)
      {
        id v69 = v46;
      }
      else
      {
        long long v48 = +[GEOAPStateFactory sharedFactory];
        id v69 = [v48 stateForType:29];
      }
      double v49 = NSNumber;
      id v50 = +[GEOAPStateFactory sharedFactory];
      id v51 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v50, "logMsgStateTypeForType:", 0));

      id v52 = [v36 objectForKeyedSubscript:v51];
      id v53 = v52;
      if (v52)
      {
        id v68 = v52;
      }
      else
      {
        id v54 = +[GEOAPStateFactory sharedFactory];
        id v68 = [v54 stateForType:0];
      }
      id v55 = NSNumber;
      id v56 = +[GEOAPStateFactory sharedFactory];
      id v57 = objc_msgSend(v55, "numberWithInt:", objc_msgSend(v56, "logMsgStateTypeForType:", 3));

      id v58 = [v36 objectForKeyedSubscript:v57];
      id v59 = v58;
      if (v58)
      {
        id v60 = v58;
      }
      else
      {
        uint64_t v61 = +[GEOAPStateFactory sharedFactory];
        id v60 = [v61 stateForType:3];
      }
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v62 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v62 setEventType:23];
        id v63 = objc_alloc_init(MEMORY[0x263F41838]);
        [v62 setFullNavTrace:v63];

        id v64 = [v62 fullNavTrace];
        [v64 setNavTraceData:v72];

        if (v69) {
          objc_msgSend(v62, "addLogMsgState:");
        }
        if (v68) {
          objc_msgSend(v62, "addLogMsgState:");
        }
        if (v71) {
          [v62 addLogMsgState:v71];
        }
        if (v60) {
          [v62 addLogMsgState:v60];
        }
        double v65 = +[GEOAPStateFactory sharedFactory];
        v74[0] = MEMORY[0x263EF8330];
        v74[1] = 3221225472;
        v74[2] = __113__GEOAPPortal_captureNavTraceWithNavTraceData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v74[3] = &unk_265345680;
        id v75 = v62;
        id v66 = v62;
        [v65 sessionStateForType:9 callback:v74];
      }
      v19[2](v19);

      id v12 = v72;
      id v25 = v67;
      goto LABEL_53;
    }
LABEL_28:
    v19[2](v19);
LABEL_53:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v85 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __113__GEOAPPortal_captureNavTraceWithNavTraceData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __113__GEOAPPortal_captureNavTraceWithNavTraceData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_203()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20190F = [v6 containsObject:v8];
}

void __113__GEOAPPortal_captureNavTraceWithNavTraceData_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureThrottleEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 throttleType:(int)a5 throttleMode:(int)a6 throttleReqType:(id)a7 throttleTriggerCount:(id)a8 throttleTriggerDuration:(id)a9 throttleCount:(id)a10 throttleDuration:(id)a11
{
}

+ (void)captureThrottleEventWithNetworkService:(int)a3 requestAppIdentifier:(id)a4 throttleType:(int)a5 throttleMode:(int)a6 throttleReqType:(id)a7 throttleTriggerCount:(id)a8 throttleTriggerDuration:(id)a9 throttleCount:(id)a10 throttleDuration:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  id v121 = a4;
  id v120 = a7;
  id v17 = a8;
  id v18 = a9;
  id v119 = a10;
  id v19 = a11;
  id v20 = a12;
  id v21 = a13;
  id v22 = a14;
  id v23 = a15;
  v128[0] = MEMORY[0x263EF8330];
  v128[1] = 3221225472;
  v128[2] = __259__GEOAPPortal_captureThrottleEventWithNetworkService_requestAppIdentifier_throttleType_throttleMode_throttleReqType_throttleTriggerCount_throttleTriggerDuration_throttleCount_throttleDuration_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v128[3] = &unk_265345530;
  id v24 = v23;
  id v130 = v24;
  id v118 = v22;
  id v129 = v118;
  id v25 = (void (**)(void))MEMORY[0x25337B980](v128);
  int v26 = +[GEOAPServiceManager sharedManager];
  int v27 = [v26 eventCollectionIsDisabledForCurrentProcess];

  if (v27)
  {
    uint64_t v28 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      id v29 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      double v133 = v29;
      _os_log_impl(&dword_24FE56000, v28, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    v25[2](v25);
    uint64_t v30 = v17;
    goto LABEL_9;
  }
  if (qword_26B201A18 != -1) {
    dispatch_once(&qword_26B201A18, &__block_literal_global_212);
  }
  uint64_t v30 = v17;
  if (!byte_26B201910)
  {
    uint64_t v32 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v33 = [v32 countryCode];

    id v113 = (void *)v33;
    int v34 = [a1 isDisabledEvent:@"throttleEvent" inCountry:v33];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v34)
    {
      goto LABEL_16;
    }
    if (v21) {
      [v21 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v35 == 0.0 || v35 < (double)arc4random() / 4294967300.0)
    {
      id v111 = v24;
      id v105 = v20;
      id v106 = v18;
      id v107 = v21;
      if ([v20 count])
      {
        uint64_t v36 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v124 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        id v37 = v20;
        uint64_t v38 = [v37 countByEnumeratingWithState:&v124 objects:v131 count:16];
        if (v38)
        {
          uint64_t v39 = v38;
          uint64_t v40 = *(void *)v125;
          do
          {
            for (uint64_t i = 0; i != v39; ++i)
            {
              if (*(void *)v125 != v40) {
                objc_enumerationMutation(v37);
              }
              uint64_t v42 = *(void **)(*((void *)&v124 + 1) + 8 * i);
              uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v42, "stateType"));
              [v36 setObject:v42 forKeyedSubscript:v43];
            }
            uint64_t v39 = [v37 countByEnumeratingWithState:&v124 objects:v131 count:16];
          }
          while (v39);
        }

        uint64_t v44 = (void *)[v36 copy];
        uint64_t v30 = v17;
        id v21 = v107;
      }
      else
      {
        uint64_t v44 = 0;
      }
      long long v45 = NSNumber;
      uint64_t v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 2));

      id v112 = v44;
      long long v48 = [v44 objectForKeyedSubscript:v47];
      double v49 = v48;
      uint64_t v31 = v119;
      if (v48)
      {
        id v110 = v48;
      }
      else
      {
        id v50 = +[GEOAPStateFactory sharedFactory];
        id v110 = [v50 stateForType:2];
      }
      id v18 = v106;

      id v51 = NSNumber;
      id v52 = +[GEOAPStateFactory sharedFactory];
      id v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 29));

      id v54 = [v112 objectForKeyedSubscript:v53];
      id v55 = v54;
      if (v54)
      {
        id v109 = v54;
      }
      else
      {
        id v56 = +[GEOAPStateFactory sharedFactory];
        id v109 = [v56 stateForType:29];
      }
      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 0));

      id v60 = [v112 objectForKeyedSubscript:v59];
      uint64_t v61 = v60;
      if (v60)
      {
        id v108 = v60;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v108 = [v62 stateForType:0];
      }
      id v63 = NSNumber;
      id v64 = +[GEOAPStateFactory sharedFactory];
      uint64_t v65 = objc_msgSend(v63, "numberWithInt:", objc_msgSend(v64, "logMsgStateTypeForType:", 15));

      id v104 = (void *)v65;
      id v66 = [v112 objectForKeyedSubscript:v65];
      uint64_t v67 = v66;
      if (v66)
      {
        id v68 = v66;
      }
      else
      {
        id v69 = +[GEOAPStateFactory sharedFactory];
        uint64_t v70 = [v69 stateForType:15];

        id v68 = (id)v70;
      }
      id v24 = v111;

      id v71 = v112;
      if (([a1 isDisabledState:@"Experiments" inCountry:v113] & 1) != 0
        || GEOConfigGetBOOL())
      {

        id v68 = 0;
      }
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v102 = v68;
        id v72 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v72 setEventType:36];
        id v73 = objc_alloc_init(MEMORY[0x263F41928]);
        [v72 setThrottleEvent:v73];

        uint64_t v74 = [v72 throttleEvent];
        [v74 setNetworkService:a3];

        id v75 = [v72 throttleEvent];
        [v75 setRequestAppIdentifier:v121];

        long long v76 = [v72 throttleEvent];
        [v76 setThrottleType:a5];

        long long v77 = [v72 throttleEvent];
        [v77 setThrottleMode:a6];

        long long v78 = [v72 throttleEvent];
        [v78 setThrottleReqType:v120];

        if (v30)
        {
          uint64_t v79 = (unsigned __int16)[v30 unsignedLongLongValue];
          id v80 = [v72 throttleEvent];
          [v80 setThrottleTriggerCount:v79];
        }
        if (v106)
        {
          uint64_t v81 = (unsigned __int16)[v106 unsignedLongLongValue];
          id v82 = [v72 throttleEvent];
          [v82 setThrottleTriggerDuration:v81];
        }
        if (v119)
        {
          uint64_t v83 = (unsigned __int16)[v119 unsignedLongLongValue];
          uint64_t v84 = [v72 throttleEvent];
          [v84 setThrottleCount:v83];
        }
        if (v19)
        {
          [v19 doubleValue];
          double v86 = v85;
          id v87 = [v72 throttleEvent];
          [v87 setThrottleDuration:v86];
        }
        uint64_t v88 = objc_msgSend(MEMORY[0x263F41BD0], "modernManager", v102);
        long long v89 = [v88 activeTileGroup];
        uint64_t v90 = [v89 identifier];
        id v91 = v72;
        uint64_t v92 = v90;
        id v93 = v91;
        long long v94 = [v91 throttleEvent];
        [v94 setTilesetId:v92];

        if (GEOConfigGetBOOL())
        {
          id v95 = [MEMORY[0x263F41BC8] defaultConfiguration];
          id v96 = [v95 environment];
          uint64_t v97 = [v93 throttleEvent];
          [v97 setManifestEnv:v96];
        }
        id v21 = v107;
        uint64_t v98 = v93;
        if (v108) {
          objc_msgSend(v93, "addLogMsgState:");
        }
        id v71 = v112;
        if (v110) {
          objc_msgSend(v98, "addLogMsgState:");
        }
        if (v109) {
          [v98 addLogMsgState:v109];
        }
        if (v103) {
          [v98 addLogMsgState:v103];
        }
        uint64_t v99 = +[GEOAPStateFactory sharedFactory];
        id v100 = [a1 captureQueue];
        v122[0] = MEMORY[0x263EF8330];
        v122[1] = 3221225472;
        v122[2] = __259__GEOAPPortal_captureThrottleEventWithNetworkService_requestAppIdentifier_throttleType_throttleMode_throttleReqType_throttleTriggerCount_throttleTriggerDuration_throttleCount_throttleDuration_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v122[3] = &unk_265345680;
        id v123 = v98;
        id v101 = v98;
        [v99 sessionStateForType:3 onQueue:v100 callback:v122];

        id v68 = v103;
        id v24 = v111;
      }
      v25[2](v25);

      id v20 = v105;
      goto LABEL_67;
    }
LABEL_16:
    v25[2](v25);
    uint64_t v31 = v119;
LABEL_67:

    goto LABEL_10;
  }
  v25[2](v25);
LABEL_9:
  uint64_t v31 = v119;
LABEL_10:
}

void __259__GEOAPPortal_captureThrottleEventWithNetworkService_requestAppIdentifier_throttleType_throttleMode_throttleReqType_throttleTriggerCount_throttleTriggerDuration_throttleCount_throttleDuration_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __259__GEOAPPortal_captureThrottleEventWithNetworkService_requestAppIdentifier_throttleType_throttleMode_throttleReqType_throttleTriggerCount_throttleTriggerDuration_throttleCount_throttleDuration_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_210()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201910 = [v6 containsObject:v8];
}

void __259__GEOAPPortal_captureThrottleEventWithNetworkService_requestAppIdentifier_throttleType_throttleMode_throttleReqType_throttleTriggerCount_throttleTriggerDuration_throttleCount_throttleDuration_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isCarplayConnected:(id)a27 isTourist:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocationGeohash4:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33
{
  LODWORD(v34) = a25;
  LODWORD(v33) = a13;
  objc_msgSend(a1, "capturePredExTrainingWithChanceOfPrecipitation:chanceOfRain:chanceOfSnow:endTime:durationUntilEventEnd:durationUntilEventStart:startTime:temperature:timeOfDay:timeSinceBackgrounded:actualTransportMode:dayOfWeek:distanceFromHereToHome:distanceFromHereToOrigin:distanceFromHereToParkedCar:distanceFromHereToWork:distanceFromHere:distanceFromOriginToDestination:entryType:weatherType:mapType:predictedTransportMode:preferredTransportMode:isInBasemode:isCarplayConnected:isTourist:isTransitPossible:routePlanningScreenPresented:userLocationGeohash4:isVehicleBluetoothConnected:weatherAqi:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v33, a14,
    *(void *)&a15,
    *(void *)&a17,
    *(void *)&a19,
    *(void *)&a21,
    *(void *)&a23,
    v34,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    0,
    0,
    0,
    0);
}

+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isCarplayConnected:(id)a27 isTourist:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocationGeohash4:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33 additionalStates:(id)a34 providedDropRate:(id)a35 completionQueue:(id)a36 completionBlock:(id)a37
{
  uint64_t v201 = *MEMORY[0x263EF8340];
  id v184 = a3;
  id v182 = a4;
  id v186 = a5;
  id v181 = a6;
  id v180 = a7;
  id v179 = a8;
  id v178 = a9;
  id v177 = a10;
  id v42 = a11;
  id v43 = a12;
  id v44 = a14;
  id v45 = a26;
  id v46 = a27;
  id v176 = a28;
  id v187 = a29;
  id v175 = a30;
  id v174 = a31;
  id v188 = a32;
  id v173 = a33;
  id v183 = a34;
  id v185 = a35;
  id v47 = a36;
  id v48 = a37;
  v195[0] = MEMORY[0x263EF8330];
  v195[1] = 3221225472;
  v195[2] = __665__GEOAPPortal_capturePredExTrainingWithChanceOfPrecipitation_chanceOfRain_chanceOfSnow_endTime_durationUntilEventEnd_durationUntilEventStart_startTime_temperature_timeOfDay_timeSinceBackgrounded_actualTransportMode_dayOfWeek_distanceFromHereToHome_distanceFromHereToOrigin_distanceFromHereToParkedCar_distanceFromHereToWork_distanceFromHere_distanceFromOriginToDestination_entryType_weatherType_mapType_predictedTransportMode_preferredTransportMode_isInBasemode_isCarplayConnected_isTourist_isTransitPossible_routePlanningScreenPresented_userLocationGeohash4_isVehicleBluetoothConnected_weatherAqi_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v195[3] = &unk_265345530;
  id v172 = v48;
  id v197 = v172;
  id v171 = v47;
  id v196 = v171;
  double v49 = (void (**)(void))MEMORY[0x25337B980](v195);
  id v50 = +[GEOAPServiceManager sharedManager];
  int v51 = [v50 eventCollectionIsDisabledForCurrentProcess];

  if (!v51)
  {
    uint64_t v169 = v46;
    id v170 = v44;
    id v54 = v43;
    if (qword_26B201A20 != -1) {
      dispatch_once(&qword_26B201A20, &__block_literal_global_219);
    }
    id v58 = v186;
    id v59 = v187;
    uint64_t v61 = v188;
    if (byte_26B201911)
    {
      v49[2](v49);
      id v60 = v175;
      id v52 = v45;
      id v53 = v170;
      goto LABEL_85;
    }
    uint64_t v164 = v45;
    id v165 = v42;
    id v62 = [MEMORY[0x263F41770] sharedConfiguration];
    id v63 = [v62 countryCode];

    int v64 = [a1 isDisabledEvent:@"predExTraining" inCountry:v63];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        uint64_t v61 = v188;
        if (v185) {
          [v185 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v42 = v165;
        if (v65 == 0.0 || v65 < (double)arc4random() / 4294967300.0)
        {
          if ([v183 count])
          {
            id v167 = v54;
            id v66 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v183, "count"));
            long long v191 = 0u;
            long long v192 = 0u;
            long long v193 = 0u;
            long long v194 = 0u;
            id v67 = v183;
            uint64_t v68 = [v67 countByEnumeratingWithState:&v191 objects:v198 count:16];
            if (v68)
            {
              uint64_t v69 = v68;
              uint64_t v70 = *(void *)v192;
              do
              {
                for (uint64_t i = 0; i != v69; ++i)
                {
                  if (*(void *)v192 != v70) {
                    objc_enumerationMutation(v67);
                  }
                  id v72 = *(void **)(*((void *)&v191 + 1) + 8 * i);
                  id v73 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
                  [v66 setObject:v72 forKeyedSubscript:v73];
                }
                uint64_t v69 = [v67 countByEnumeratingWithState:&v191 objects:v198 count:16];
              }
              while (v69);
            }

            uint64_t v74 = (void *)[v66 copy];
            id v54 = v167;
          }
          else
          {
            uint64_t v74 = 0;
          }
          id v75 = NSNumber;
          long long v76 = +[GEOAPStateFactory sharedFactory];
          long long v77 = objc_msgSend(v75, "numberWithInt:", objc_msgSend(v76, "logMsgStateTypeForType:", 0));

          uint64_t v168 = v74;
          long long v78 = [v74 objectForKeyedSubscript:v77];
          uint64_t v79 = v78;
          if (v78)
          {
            id v80 = v78;
          }
          else
          {
            uint64_t v81 = +[GEOAPStateFactory sharedFactory];
            id v80 = [v81 stateForType:0];
          }
          id v82 = NSNumber;
          uint64_t v83 = +[GEOAPStateFactory sharedFactory];
          uint64_t v84 = objc_msgSend(v82, "numberWithInt:", objc_msgSend(v83, "logMsgStateTypeForType:", 3));

          double v85 = [v168 objectForKeyedSubscript:v84];
          double v86 = v85;
          if (v85)
          {
            id v163 = v85;
          }
          else
          {
            id v87 = +[GEOAPStateFactory sharedFactory];
            id v163 = [v87 stateForType:3];
          }
          uint64_t v88 = NSNumber;
          long long v89 = +[GEOAPStateFactory sharedFactory];
          uint64_t v90 = objc_msgSend(v88, "numberWithInt:", objc_msgSend(v89, "logMsgStateTypeForType:", 8));

          id v91 = v168;
          uint64_t v92 = [v168 objectForKeyedSubscript:v90];
          id v93 = v92;
          if (v92)
          {
            id v162 = v92;
          }
          else
          {
            +[GEOAPStateFactory sharedFactory];
            v95 = long long v94 = v90;
            id v162 = [v95 stateForType:8];

            uint64_t v90 = v94;
          }

          if ((GEOConfigGetBOOL() & 1) == 0)
          {
            id v161 = v90;
            id v96 = objc_alloc_init(MEMORY[0x263F417E8]);
            [v96 setEventType:38];
            id v97 = objc_alloc_init(MEMORY[0x263F418C8]);
            [v96 setPredExTrainingData:v97];

            if (v184)
            {
              [v184 doubleValue];
              double v99 = v98;
              id v100 = [v96 predExTrainingData];
              [v100 setChanceOfPrecipitation:v99];
            }
            if (v182)
            {
              [v182 doubleValue];
              double v102 = v101;
              id v103 = [v96 predExTrainingData];
              [v103 setChanceOfRain:v102];
            }
            if (v186)
            {
              [v186 doubleValue];
              double v105 = v104;
              id v106 = [v96 predExTrainingData];
              [v106 setChanceOfSnow:v105];
            }
            if (v181)
            {
              [v181 doubleValue];
              double v108 = v107;
              id v109 = [v96 predExTrainingData];
              [v109 setEndTime:v108];
            }
            if (v180)
            {
              [v180 doubleValue];
              double v111 = v110;
              id v112 = [v96 predExTrainingData];
              [v112 setDurationUntilEventEnd:v111];
            }
            if (v179)
            {
              [v179 doubleValue];
              double v114 = v113;
              long long v115 = [v96 predExTrainingData];
              [v115 setDurationUntilEventStart:v114];
            }
            if (v178)
            {
              [v178 doubleValue];
              double v117 = v116;
              id v118 = [v96 predExTrainingData];
              [v118 setStartTime:v117];
            }
            if (v177)
            {
              [v177 doubleValue];
              double v120 = v119;
              id v121 = [v96 predExTrainingData];
              [v121 setTemperature:v120];
            }
            if (v165)
            {
              [v165 doubleValue];
              double v123 = v122;
              long long v124 = [v96 predExTrainingData];
              [v124 setTimeOfDay:v123];
            }
            if (v54)
            {
              [v54 doubleValue];
              double v126 = v125;
              long long v127 = [v96 predExTrainingData];
              [v127 setTimeSinceBackgrounded:v126];
            }
            id v128 = [v96 predExTrainingData];
            [v128 setActualTransportMode:a13];

            if (v170)
            {
              [v170 doubleValue];
              double v130 = v129;
              long long v131 = [v96 predExTrainingData];
              [v131 setDayOfWeek:v130];
            }
            long long v132 = [v96 predExTrainingData];
            [v132 setDistanceFromHereToHome:a15];

            double v133 = [v96 predExTrainingData];
            [v133 setDistanceFromHereToOrigin:a16];

            uint64_t v134 = [v96 predExTrainingData];
            [v134 setDistanceFromHereToParkedCar:a17];

            long long v135 = [v96 predExTrainingData];
            [v135 setDistanceFromHereToWork:a18];

            long long v136 = [v96 predExTrainingData];
            [v136 setDistanceFromHere:a19];

            uint64_t v137 = [v96 predExTrainingData];
            [v137 setDistanceFromOriginToDestination:a20];

            long long v138 = [v96 predExTrainingData];
            [v138 setEntryType:a21];

            uint64_t v139 = [v96 predExTrainingData];
            [v139 setWeatherType:a22];

            id v140 = [v96 predExTrainingData];
            [v140 setMapType:a23];

            uint64_t v141 = [v96 predExTrainingData];
            [v141 setPredictedTransportMode:a24];

            id v142 = [v96 predExTrainingData];
            [v142 setPreferredTransportMode:a25];

            if (v164)
            {
              uint64_t v143 = [v164 BOOLValue];
              id v144 = [v96 predExTrainingData];
              [v144 setIsInBasemode:v143];
            }
            if (v169)
            {
              uint64_t v145 = [v169 BOOLValue];
              uint64_t v146 = [v96 predExTrainingData];
              [v146 setIsCarplayConnected:v145];
            }
            if (v176)
            {
              [v176 doubleValue];
              double v148 = v147;
              uint64_t v149 = [v96 predExTrainingData];
              [v149 setIsTourist:v148];
            }
            if (v187)
            {
              uint64_t v150 = [v187 BOOLValue];
              uint64_t v151 = [v96 predExTrainingData];
              [v151 setIsTransitPossible:v150];
            }
            if (v175)
            {
              uint64_t v152 = [v175 BOOLValue];
              id v153 = [v96 predExTrainingData];
              [v153 setRoutePlanningScreenPresented:v152];
            }
            uint64_t v154 = [v96 predExTrainingData];
            [v154 setUserLocationGeohash4:v174];

            if (v188)
            {
              uint64_t v155 = [v188 BOOLValue];
              uint64_t v156 = [v96 predExTrainingData];
              [v156 setIsVehicleBluetoothConnected:v155];
            }
            if (v173)
            {
              uint64_t v157 = [v173 unsignedLongLongValue];
              uint64_t v158 = [v96 predExTrainingData];
              [v158 setWeatherAqi:v157];
            }
            if (v162) {
              objc_msgSend(v96, "addLogMsgState:");
            }
            id v91 = v168;
            if (v80) {
              [v96 addLogMsgState:v80];
            }
            if (v163) {
              [v96 addLogMsgState:v163];
            }
            id v159 = +[GEOAPStateFactory sharedFactory];
            v189[0] = MEMORY[0x263EF8330];
            v189[1] = 3221225472;
            v189[2] = __665__GEOAPPortal_capturePredExTrainingWithChanceOfPrecipitation_chanceOfRain_chanceOfSnow_endTime_durationUntilEventEnd_durationUntilEventStart_startTime_temperature_timeOfDay_timeSinceBackgrounded_actualTransportMode_dayOfWeek_distanceFromHereToHome_distanceFromHereToOrigin_distanceFromHereToParkedCar_distanceFromHereToWork_distanceFromHere_distanceFromOriginToDestination_entryType_weatherType_mapType_predictedTransportMode_preferredTransportMode_isInBasemode_isCarplayConnected_isTourist_isTransitPossible_routePlanningScreenPresented_userLocationGeohash4_isVehicleBluetoothConnected_weatherAqi_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
            v189[3] = &unk_265345680;
            id v190 = v96;
            id v160 = v96;
            [v159 sessionStateForType:7 callback:v189];

            uint64_t v90 = v161;
          }
          id v52 = v164;
          v49[2](v49);

          id v42 = v165;
          uint64_t v61 = v188;
        }
        else
        {
          id v52 = v45;
          v49[2](v49);
        }
        id v58 = v186;
        goto LABEL_84;
      }
    }
    else if (!v64)
    {
      goto LABEL_11;
    }
    v49[2](v49);
    id v52 = v45;
    id v42 = v165;
    uint64_t v61 = v188;
LABEL_84:

    id v46 = v169;
    id v53 = v170;
    id v59 = v187;
    id v60 = v175;
    goto LABEL_85;
  }
  id v52 = v45;
  id v53 = v44;
  id v54 = v43;
  id v55 = v42;
  id v56 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    id v57 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v200 = v57;
    _os_log_impl(&dword_24FE56000, v56, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v49[2](v49);
  id v58 = v186;
  id v59 = v187;
  id v42 = v55;
  id v60 = v175;
  uint64_t v61 = v188;
LABEL_85:
}

void __665__GEOAPPortal_capturePredExTrainingWithChanceOfPrecipitation_chanceOfRain_chanceOfSnow_endTime_durationUntilEventEnd_durationUntilEventStart_startTime_temperature_timeOfDay_timeSinceBackgrounded_actualTransportMode_dayOfWeek_distanceFromHereToHome_distanceFromHereToOrigin_distanceFromHereToParkedCar_distanceFromHereToWork_distanceFromHere_distanceFromOriginToDestination_entryType_weatherType_mapType_predictedTransportMode_preferredTransportMode_isInBasemode_isCarplayConnected_isTourist_isTransitPossible_routePlanningScreenPresented_userLocationGeohash4_isVehicleBluetoothConnected_weatherAqi_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __665__GEOAPPortal_capturePredExTrainingWithChanceOfPrecipitation_chanceOfRain_chanceOfSnow_endTime_durationUntilEventEnd_durationUntilEventStart_startTime_temperature_timeOfDay_timeSinceBackgrounded_actualTransportMode_dayOfWeek_distanceFromHereToHome_distanceFromHereToOrigin_distanceFromHereToParkedCar_distanceFromHereToWork_distanceFromHere_distanceFromOriginToDestination_entryType_weatherType_mapType_predictedTransportMode_preferredTransportMode_isInBasemode_isCarplayConnected_isTourist_isTransitPossible_routePlanningScreenPresented_userLocationGeohash4_isVehicleBluetoothConnected_weatherAqi_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_217()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201911 = [v6 containsObject:v8];
}

void __665__GEOAPPortal_capturePredExTrainingWithChanceOfPrecipitation_chanceOfRain_chanceOfSnow_endTime_durationUntilEventEnd_durationUntilEventStart_startTime_temperature_timeOfDay_timeSinceBackgrounded_actualTransportMode_dayOfWeek_distanceFromHereToHome_distanceFromHereToOrigin_distanceFromHereToParkedCar_distanceFromHereToWork_distanceFromHere_distanceFromOriginToDestination_entryType_weatherType_mapType_predictedTransportMode_preferredTransportMode_isInBasemode_isCarplayConnected_isTourist_isTransitPossible_routePlanningScreenPresented_userLocationGeohash4_isVehicleBluetoothConnected_weatherAqi_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureMarcoLiteWithTotalNavTime:(id)a3 usageStates:(id)a4 vioTrigger:(int)a5
{
}

+ (void)captureMarcoLiteWithTotalNavTime:(id)a3 usageStates:(id)a4 vioTrigger:(int)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  id v91 = a3;
  id v14 = a4;
  id v15 = a6;
  id v90 = a7;
  id v16 = a8;
  id v17 = a9;
  v102[0] = MEMORY[0x263EF8330];
  v102[1] = 3221225472;
  v102[2] = __137__GEOAPPortal_captureMarcoLiteWithTotalNavTime_usageStates_vioTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v102[3] = &unk_265345530;
  id v18 = v17;
  id v104 = v18;
  id v19 = v16;
  id v103 = v19;
  id v20 = (void (**)(void))MEMORY[0x25337B980](v102);
  id v21 = +[GEOAPServiceManager sharedManager];
  int v22 = [v21 eventCollectionIsDisabledForCurrentProcess];

  if (!v22)
  {
    if (qword_26B201A28 != -1) {
      dispatch_once(&qword_26B201A28, &__block_literal_global_226);
    }
    int v26 = v91;
    if (byte_26B201912)
    {
      v20[2](v20);
      id v25 = v90;
      goto LABEL_57;
    }
    uint64_t v88 = v14;
    int v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    id v29 = a1;
    uint64_t v30 = (void *)v28;
    int v31 = [v29 isDisabledEvent:@"marcoLite" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if (!v31)
    {
LABEL_11:
      uint64_t v32 = +[GEOAPServiceManager sharedManager];
      char v33 = [v32 platformDiagAndUsageOrAppleInternal];

      id v14 = v88;
      if (v33)
      {
        id v25 = v90;
        if (v90) {
          [v90 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v34 != 0.0 && v34 >= (double)arc4random() / 4294967300.0)
        {
          v20[2](v20);
LABEL_56:

          goto LABEL_57;
        }
        id v87 = v15;
        id v82 = v30;
        id v83 = v18;
        if ([v15 count])
        {
          double v35 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v15, "count"));
          long long v98 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          id v36 = v15;
          uint64_t v37 = [v36 countByEnumeratingWithState:&v98 objects:v106 count:16];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)v99;
            do
            {
              for (uint64_t i = 0; i != v38; ++i)
              {
                if (*(void *)v99 != v39) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v41 = *(void **)(*((void *)&v98 + 1) + 8 * i);
                id v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
                [v35 setObject:v41 forKeyedSubscript:v42];
              }
              uint64_t v38 = [v36 countByEnumeratingWithState:&v98 objects:v106 count:16];
            }
            while (v38);
          }

          id v43 = (void *)[v35 copy];
          int v26 = v91;
          uint64_t v30 = v82;
          id v18 = v83;
        }
        else
        {
          id v43 = 0;
        }
        id v44 = NSNumber;
        id v45 = +[GEOAPStateFactory sharedFactory];
        id v46 = objc_msgSend(v44, "numberWithInt:", objc_msgSend(v45, "logMsgStateTypeForType:", 0));

        double v86 = v43;
        id v47 = [v43 objectForKeyedSubscript:v46];
        id v48 = v47;
        if (v47)
        {
          id v85 = v47;
          unint64_t v49 = 0x265344000;
        }
        else
        {
          unint64_t v49 = 0x265344000uLL;
          id v50 = +[GEOAPStateFactory sharedFactory];
          id v85 = [v50 stateForType:0];
        }
        int v51 = NSNumber;
        [*(id *)(v49 + 3384) sharedFactory];
        v53 = unint64_t v52 = v49;
        id v54 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 3));

        id v55 = v86;
        id v56 = [v86 objectForKeyedSubscript:v54];
        id v57 = v56;
        if (v56)
        {
          id v84 = v56;
        }
        else
        {
          [*(id *)(v52 + 3384) sharedFactory];
          v59 = id v58 = v54;
          id v84 = [v59 stateForType:3];

          id v54 = v58;
        }
        id v15 = v87;
        id v14 = v88;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v80 = v54;
          id v60 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v60 setEventType:39];
          id v61 = objc_alloc_init(MEMORY[0x263F41890]);
          [v60 setMarcoLiteUsage:v61];

          if (v26)
          {
            uint64_t v62 = [v26 unsignedLongLongValue];
            id v63 = [v60 marcoLiteUsage];
            [v63 setTotalNavTime:v62];
          }
          int v64 = objc_msgSend(v60, "marcoLiteUsage", v80);
          double v65 = [v64 usageStates];

          if (!v65)
          {
            id v66 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v88, "count"));
            id v67 = [v60 marcoLiteUsage];
            [v67 setUsageStates:v66];
          }
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          id v68 = v88;
          uint64_t v69 = [v68 countByEnumeratingWithState:&v94 objects:v105 count:16];
          if (v69)
          {
            uint64_t v70 = v69;
            uint64_t v71 = *(void *)v95;
            do
            {
              for (uint64_t j = 0; j != v70; ++j)
              {
                if (*(void *)v95 != v71) {
                  objc_enumerationMutation(v68);
                }
                id v73 = *(void **)(*((void *)&v94 + 1) + 8 * j);
                uint64_t v74 = [v60 marcoLiteUsage];
                id v75 = [v74 usageStates];
                long long v76 = (void *)[v73 copy];
                [v75 addObject:v76];
              }
              uint64_t v70 = [v68 countByEnumeratingWithState:&v94 objects:v105 count:16];
            }
            while (v70);
          }

          long long v77 = [v60 marcoLiteUsage];
          [v77 setVioTrigger:a5];

          if (v85) {
            objc_msgSend(v60, "addLogMsgState:");
          }
          int v26 = v91;
          id v55 = v86;
          id v15 = v87;
          id v18 = v83;
          if (v84) {
            objc_msgSend(v60, "addLogMsgState:");
          }
          long long v78 = +[GEOAPStateFactory sharedFactory];
          v92[0] = MEMORY[0x263EF8330];
          v92[1] = 3221225472;
          v92[2] = __137__GEOAPPortal_captureMarcoLiteWithTotalNavTime_usageStates_vioTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v92[3] = &unk_265345680;
          id v93 = v60;
          id v79 = v60;
          [v78 sessionStateForType:7 callback:v92];

          id v14 = v88;
          id v54 = v81;
          uint64_t v30 = v82;
        }
        v20[2](v20);
      }
      else
      {
        v20[2](v20);
      }
LABEL_55:
      id v25 = v90;
      goto LABEL_56;
    }
    v20[2](v20);
    id v14 = v88;
    goto LABEL_55;
  }
  id v23 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    id v24 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    double v108 = v24;
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v20[2](v20);
  id v25 = v90;
  int v26 = v91;
LABEL_57:
}

void __137__GEOAPPortal_captureMarcoLiteWithTotalNavTime_usageStates_vioTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __137__GEOAPPortal_captureMarcoLiteWithTotalNavTime_usageStates_vioTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_224()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201912 = [v6 containsObject:v8];
}

void __137__GEOAPPortal_captureMarcoLiteWithTotalNavTime_usageStates_vioTrigger_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureProactiveSuggestionWithListType:(int)a3 interactedItemIndex:(id)a4 duration:(id)a5 proactiveItems:(id)a6
{
}

+ (void)captureProactiveSuggestionWithListType:(int)a3 interactedItemIndex:(id)a4 duration:(id)a5 proactiveItems:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  id v89 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v88 = a8;
  id v18 = a9;
  id v19 = a10;
  v100[0] = MEMORY[0x263EF8330];
  v100[1] = 3221225472;
  v100[2] = __164__GEOAPPortal_captureProactiveSuggestionWithListType_interactedItemIndex_duration_proactiveItems_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v100[3] = &unk_265345530;
  id v20 = v19;
  id v102 = v20;
  id v21 = v18;
  id v101 = v21;
  int v22 = (void (**)(void))MEMORY[0x25337B980](v100);
  id v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201A30 != -1) {
      dispatch_once(&qword_26B201A30, &__block_literal_global_233);
    }
    uint64_t v28 = v88;
    int v27 = v89;
    if (byte_26B201913)
    {
      v22[2](v22);
      goto LABEL_56;
    }
    id v86 = v15;
    id v29 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v30 = [v29 countryCode];

    id v85 = (void *)v30;
    int v31 = [a1 isDisabledEvent:@"proactiveSuggestion" inCountry:v30];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if (!v31)
    {
LABEL_11:
      id v15 = v86;
      id v84 = v20;
      if (v88) {
        [v88 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v32 == 0.0 || v32 < (double)arc4random() / 4294967300.0)
      {
        id v81 = v17;
        id v82 = v16;
        if ([v17 count])
        {
          char v33 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v17, "count"));
          long long v96 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          id v34 = v17;
          uint64_t v35 = [v34 countByEnumeratingWithState:&v96 objects:v104 count:16];
          if (v35)
          {
            uint64_t v36 = v35;
            uint64_t v37 = *(void *)v97;
            do
            {
              for (uint64_t i = 0; i != v36; ++i)
              {
                if (*(void *)v97 != v37) {
                  objc_enumerationMutation(v34);
                }
                uint64_t v39 = *(void **)(*((void *)&v96 + 1) + 8 * i);
                uint64_t v40 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
                [v33 setObject:v39 forKeyedSubscript:v40];
              }
              uint64_t v36 = [v34 countByEnumeratingWithState:&v96 objects:v104 count:16];
            }
            while (v36);
          }

          uint64_t v41 = (void *)[v33 copy];
          uint64_t v28 = v88;
          int v27 = v89;
        }
        else
        {
          uint64_t v41 = 0;
        }
        id v42 = NSNumber;
        id v43 = +[GEOAPStateFactory sharedFactory];
        id v44 = objc_msgSend(v42, "numberWithInt:", objc_msgSend(v43, "logMsgStateTypeForType:", 0));

        id v45 = [v41 objectForKeyedSubscript:v44];
        id v46 = v45;
        id v20 = v84;
        id v83 = v41;
        if (v45)
        {
          id v80 = v45;
          unint64_t v47 = 0x265344000;
        }
        else
        {
          unint64_t v47 = 0x265344000uLL;
          id v48 = +[GEOAPStateFactory sharedFactory];
          id v80 = [v48 stateForType:0];
        }
        unint64_t v49 = NSNumber;
        [*(id *)(v47 + 3384) sharedFactory];
        int v51 = v50 = v47;
        unint64_t v52 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v51, "logMsgStateTypeForType:", 3));

        id v53 = [v83 objectForKeyedSubscript:v52];
        id v54 = v53;
        if (v53)
        {
          id v79 = v53;
        }
        else
        {
          id v55 = [*(id *)(v50 + 3384) sharedFactory];
          id v79 = [v55 stateForType:3];
        }
        id v17 = v81;
        id v16 = v82;

        id v15 = v86;
        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          long long v78 = v52;
          id v56 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v56 setEventType:16];
          id v57 = objc_alloc_init(MEMORY[0x263F418D8]);
          [v56 setProactiveSuggestionInteractionSessionEvent:v57];

          id v58 = [v56 proactiveSuggestionInteractionSessionEvent];
          [v58 setListType:a3];

          if (v27)
          {
            uint64_t v59 = [v27 integerValue];
            id v60 = [v56 proactiveSuggestionInteractionSessionEvent];
            [v60 setInteractedItemIndex:v59];

            id v15 = v86;
          }
          if (v15)
          {
            uint64_t v61 = [v15 integerValue];
            uint64_t v62 = [v56 proactiveSuggestionInteractionSessionEvent];
            [v62 setDuration:v61];
          }
          id v63 = [v56 proactiveSuggestionInteractionSessionEvent];
          int v64 = [v63 proactiveItems];

          if (!v64)
          {
            double v65 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v82, "count"));
            id v66 = [v56 proactiveSuggestionInteractionSessionEvent];
            [v66 setProactiveItems:v65];
          }
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          id v67 = v82;
          uint64_t v68 = [v67 countByEnumeratingWithState:&v92 objects:v103 count:16];
          if (v68)
          {
            uint64_t v69 = v68;
            uint64_t v70 = *(void *)v93;
            do
            {
              for (uint64_t j = 0; j != v69; ++j)
              {
                if (*(void *)v93 != v70) {
                  objc_enumerationMutation(v67);
                }
                id v72 = *(void **)(*((void *)&v92 + 1) + 8 * j);
                id v73 = [v56 proactiveSuggestionInteractionSessionEvent];
                uint64_t v74 = [v73 proactiveItems];
                id v75 = (void *)[v72 copy];
                [v74 addObject:v75];
              }
              uint64_t v69 = [v67 countByEnumeratingWithState:&v92 objects:v103 count:16];
            }
            while (v69);
          }

          if (v80) {
            objc_msgSend(v56, "addLogMsgState:");
          }
          uint64_t v28 = v88;
          int v27 = v89;
          id v17 = v81;
          id v16 = v82;
          id v20 = v84;
          if (v79) {
            objc_msgSend(v56, "addLogMsgState:");
          }
          long long v76 = +[GEOAPStateFactory sharedFactory];
          v90[0] = MEMORY[0x263EF8330];
          v90[1] = 3221225472;
          v90[2] = __164__GEOAPPortal_captureProactiveSuggestionWithListType_interactedItemIndex_duration_proactiveItems_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v90[3] = &unk_265345680;
          id v91 = v56;
          id v77 = v56;
          [v76 sessionStateForType:7 callback:v90];

          id v15 = v86;
          unint64_t v52 = v78;
        }
        v22[2](v22);
      }
      else
      {
        v22[2](v22);
      }
      goto LABEL_55;
    }
    v22[2](v22);
    id v15 = v86;
LABEL_55:

    goto LABEL_56;
  }
  id v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    int v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v106 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v22[2](v22);
  uint64_t v28 = v88;
  int v27 = v89;
LABEL_56:
}

void __164__GEOAPPortal_captureProactiveSuggestionWithListType_interactedItemIndex_duration_proactiveItems_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __164__GEOAPPortal_captureProactiveSuggestionWithListType_interactedItemIndex_duration_proactiveItems_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_231()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201913 = [v6 containsObject:v8];
}

void __164__GEOAPPortal_captureProactiveSuggestionWithListType_interactedItemIndex_duration_proactiveItems_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureMapLaunchWithLaunchUri:(id)a3 sourceAppId:(id)a4 GEOTimeToLeaveMapLaunch_minutesUntilEvent:(id)a5
{
}

+ (void)captureMapLaunchWithLaunchUri:(id)a3 sourceAppId:(id)a4 GEOTimeToLeaveMapLaunch_minutesUntilEvent:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  v212[0] = MEMORY[0x263EF8330];
  v212[1] = 3221225472;
  v212[2] = __165__GEOAPPortal_captureMapLaunchWithLaunchUri_sourceAppId_GEOTimeToLeaveMapLaunch_minutesUntilEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v212[3] = &unk_265345530;
  id v22 = v21;
  id v214 = v22;
  id v205 = v20;
  id v213 = v205;
  id v23 = (void (**)(void))MEMORY[0x25337B980](v212);
  int v24 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v24 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B201A38 != -1) {
      dispatch_once(&qword_26B201A38, &__block_literal_global_240);
    }
    if (byte_26B201914) {
      goto LABEL_8;
    }
    int v27 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v28 = [v27 countryCode];

    id v202 = (void *)v28;
    int v29 = [a1 isDisabledEvent:@"mapLaunch" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_15;
      }
    }
    else if (v29)
    {
      goto LABEL_15;
    }
    id v197 = v17;
    if (v19) {
      [v19 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v30 == 0.0 || v30 < (double)arc4random() / 4294967300.0)
    {
      id v198 = v16;
      id v179 = v18;
      if (objc_msgSend(v18, "count", v19))
      {
        id v200 = v22;
        id v203 = v15;
        int v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v18, "count"));
        long long v208 = 0u;
        long long v209 = 0u;
        long long v210 = 0u;
        long long v211 = 0u;
        id v32 = v18;
        uint64_t v33 = [v32 countByEnumeratingWithState:&v208 objects:v215 count:16];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)v209;
          do
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              if (*(void *)v209 != v35) {
                objc_enumerationMutation(v32);
              }
              uint64_t v37 = *(void **)(*((void *)&v208 + 1) + 8 * i);
              uint64_t v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
              [v31 setObject:v37 forKeyedSubscript:v38];
            }
            uint64_t v34 = [v32 countByEnumeratingWithState:&v208 objects:v215 count:16];
          }
          while (v34);
        }

        uint64_t v39 = (void *)[v31 copy];
        id v15 = v203;
        id v22 = v200;
      }
      else
      {
        uint64_t v39 = 0;
      }
      uint64_t v40 = NSNumber;
      uint64_t v41 = +[GEOAPStateFactory sharedFactory];
      id v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 65));

      id v43 = [v39 objectForKeyedSubscript:v42];
      id v44 = v43;
      if (v43)
      {
        id v196 = v43;
      }
      else
      {
        id v45 = +[GEOAPStateFactory sharedFactory];
        id v196 = [v45 stateForType:65];
      }
      id v46 = NSNumber;
      unint64_t v47 = +[GEOAPStateFactory sharedFactory];
      id v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      id v204 = v39;
      unint64_t v49 = [v39 objectForKeyedSubscript:v48];
      unint64_t v50 = v49;
      if (v49)
      {
        id v195 = v49;
      }
      else
      {
        int v51 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v51 stateForType:5];
      }
      unint64_t v52 = NSNumber;
      id v53 = +[GEOAPStateFactory sharedFactory];
      id v54 = objc_msgSend(v52, "numberWithInt:", objc_msgSend(v53, "logMsgStateTypeForType:", 16));

      id v55 = [v204 objectForKeyedSubscript:v54];
      id v56 = v55;
      if (v55)
      {
        id v57 = v55;
      }
      else
      {
        id v58 = +[GEOAPStateFactory sharedFactory];
        id v57 = [v58 stateForType:16];
      }
      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v202] & 1) != 0
        || GEOConfigGetBOOL())
      {

        long long v194 = 0;
      }
      else
      {
        long long v194 = v57;
      }
      uint64_t v59 = NSNumber;
      id v60 = +[GEOAPStateFactory sharedFactory];
      uint64_t v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 35));

      uint64_t v62 = [v204 objectForKeyedSubscript:v61];
      id v63 = v62;
      if (v62)
      {
        id v193 = v62;
      }
      else
      {
        int v64 = +[GEOAPStateFactory sharedFactory];
        id v193 = [v64 stateForType:35];
      }
      double v65 = NSNumber;
      id v66 = +[GEOAPStateFactory sharedFactory];
      id v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 30));

      uint64_t v68 = [v204 objectForKeyedSubscript:v67];
      uint64_t v69 = v68;
      if (v68)
      {
        id v201 = v68;
      }
      else
      {
        uint64_t v70 = +[GEOAPStateFactory sharedFactory];
        id v201 = [v70 stateForType:30];
      }
      uint64_t v71 = NSNumber;
      id v72 = +[GEOAPStateFactory sharedFactory];
      id v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 0));

      uint64_t v74 = [v204 objectForKeyedSubscript:v73];
      id v75 = v74;
      if (v74)
      {
        id v192 = v74;
      }
      else
      {
        long long v76 = +[GEOAPStateFactory sharedFactory];
        id v192 = [v76 stateForType:0];
      }
      id v77 = NSNumber;
      long long v78 = +[GEOAPStateFactory sharedFactory];
      id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 3));

      id v80 = [v204 objectForKeyedSubscript:v79];
      id v81 = v80;
      if (v80)
      {
        id v191 = v80;
      }
      else
      {
        id v82 = +[GEOAPStateFactory sharedFactory];
        id v191 = [v82 stateForType:3];
      }
      id v16 = v198;

      id v83 = NSNumber;
      id v84 = +[GEOAPStateFactory sharedFactory];
      id v85 = objc_msgSend(v83, "numberWithInt:", objc_msgSend(v84, "logMsgStateTypeForType:", 26));

      id v86 = [v204 objectForKeyedSubscript:v85];
      id v87 = v86;
      if (v86)
      {
        id v190 = v86;
      }
      else
      {
        id v88 = +[GEOAPStateFactory sharedFactory];
        id v190 = [v88 stateForType:26];
      }
      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      id v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 64));

      long long v92 = [v204 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v189 = v92;
      }
      else
      {
        long long v94 = +[GEOAPStateFactory sharedFactory];
        id v189 = [v94 stateForType:64];
      }
      long long v95 = NSNumber;
      long long v96 = +[GEOAPStateFactory sharedFactory];
      long long v97 = objc_msgSend(v95, "numberWithInt:", objc_msgSend(v96, "logMsgStateTypeForType:", 13));

      long long v98 = [v204 objectForKeyedSubscript:v97];
      long long v99 = v98;
      if (v98)
      {
        id v188 = v98;
      }
      else
      {
        long long v100 = +[GEOAPStateFactory sharedFactory];
        id v188 = [v100 stateForType:13];
      }
      id v101 = NSNumber;
      id v102 = +[GEOAPStateFactory sharedFactory];
      id v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 14));

      id v104 = [v204 objectForKeyedSubscript:v103];
      double v105 = v104;
      if (v104)
      {
        id v187 = v104;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v187 = [v106 stateForType:14];
      }
      uint64_t v107 = NSNumber;
      double v108 = +[GEOAPStateFactory sharedFactory];
      uint64_t v109 = objc_msgSend(v107, "numberWithInt:", objc_msgSend(v108, "logMsgStateTypeForType:", 9));

      double v110 = [v204 objectForKeyedSubscript:v109];
      double v111 = v110;
      if (v110)
      {
        id v186 = v110;
      }
      else
      {
        id v112 = +[GEOAPStateFactory sharedFactory];
        id v186 = [v112 stateForType:9];
      }
      double v113 = NSNumber;
      double v114 = +[GEOAPStateFactory sharedFactory];
      long long v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 10));

      double v116 = [v204 objectForKeyedSubscript:v115];
      double v117 = v116;
      if (v116)
      {
        id v185 = v116;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v185 = [v118 stateForType:10];
      }
      double v119 = NSNumber;
      double v120 = +[GEOAPStateFactory sharedFactory];
      id v121 = objc_msgSend(v119, "numberWithInt:", objc_msgSend(v120, "logMsgStateTypeForType:", 20));

      double v122 = [v204 objectForKeyedSubscript:v121];
      double v123 = v122;
      if (v122)
      {
        id v184 = v122;
      }
      else
      {
        long long v124 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v124 stateForType:20];
      }
      double v125 = NSNumber;
      double v126 = +[GEOAPStateFactory sharedFactory];
      long long v127 = objc_msgSend(v125, "numberWithInt:", objc_msgSend(v126, "logMsgStateTypeForType:", 42));

      id v128 = [v204 objectForKeyedSubscript:v127];
      double v129 = v128;
      if (v128)
      {
        id v183 = v128;
      }
      else
      {
        double v130 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v130 stateForType:42];
      }
      long long v131 = NSNumber;
      long long v132 = +[GEOAPStateFactory sharedFactory];
      double v133 = objc_msgSend(v131, "numberWithInt:", objc_msgSend(v132, "logMsgStateTypeForType:", 70));

      uint64_t v134 = [v204 objectForKeyedSubscript:v133];
      long long v135 = v134;
      if (v134)
      {
        id v182 = v134;
      }
      else
      {
        long long v136 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v136 stateForType:70];
      }
      uint64_t v137 = NSNumber;
      long long v138 = +[GEOAPStateFactory sharedFactory];
      uint64_t v139 = objc_msgSend(v137, "numberWithInt:", objc_msgSend(v138, "logMsgStateTypeForType:", 7));

      id v140 = [v204 objectForKeyedSubscript:v139];
      uint64_t v141 = v140;
      if (v140)
      {
        id v199 = v140;
      }
      else
      {
        id v142 = +[GEOAPStateFactory sharedFactory];
        id v199 = [v142 stateForType:7];
      }
      uint64_t v143 = NSNumber;
      id v144 = +[GEOAPStateFactory sharedFactory];
      uint64_t v145 = objc_msgSend(v143, "numberWithInt:", objc_msgSend(v144, "logMsgStateTypeForType:", 17));

      uint64_t v146 = [v204 objectForKeyedSubscript:v145];
      double v147 = v146;
      if (v146)
      {
        id v181 = v146;
      }
      else
      {
        double v148 = +[GEOAPStateFactory sharedFactory];
        id v181 = [v148 stateForType:17];
      }
      uint64_t v149 = NSNumber;
      uint64_t v150 = +[GEOAPStateFactory sharedFactory];
      uint64_t v151 = objc_msgSend(v149, "numberWithInt:", objc_msgSend(v150, "logMsgStateTypeForType:", 19));

      uint64_t v152 = [v204 objectForKeyedSubscript:v151];
      id v153 = v152;
      if (v152)
      {
        id v180 = v152;
      }
      else
      {
        uint64_t v154 = +[GEOAPStateFactory sharedFactory];
        id v180 = [v154 stateForType:19];
      }
      uint64_t v155 = v201;

      uint64_t v156 = NSNumber;
      uint64_t v157 = +[GEOAPStateFactory sharedFactory];
      uint64_t v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 27));

      id v159 = [v204 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        +[GEOAPStateFactory sharedFactory];
        v163 = id v162 = v158;
        id v161 = [v163 stateForType:27];

        uint64_t v158 = v162;
      }
      id v17 = v197;
      id v19 = v176;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v177 = v158;
        id v164 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v164 setEventType:17];
        id v165 = objc_alloc_init(MEMORY[0x263F41870]);
        [v164 setMapLaunchEvent:v165];

        id v166 = [v164 mapLaunchEvent];
        [v166 setLaunchUri:v15];

        id v167 = [v164 mapLaunchEvent];
        [v167 setSourceAppId:v16];

        id v168 = objc_alloc_init(MEMORY[0x263F41C48]);
        uint64_t v169 = [v164 mapLaunchEvent];
        [v169 setTimeToLeave:v168];

        if (v197)
        {
          [v197 doubleValue];
          double v171 = v170;
          id v172 = [v164 mapLaunchEvent];
          id v173 = [v172 timeToLeave];
          [v173 setMinutesUntilEvent:v171];
        }
        if (v199) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v195) {
          [v164 addLogMsgState:v195];
        }
        if (v192) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v191) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v201) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v196) {
          [v164 addLogMsgState:v196];
        }
        if (v184) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v188) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v187) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v186) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v185) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v189) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v194) {
          [v164 addLogMsgState:v194];
        }
        if (v181) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v180) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v161) {
          [v164 addLogMsgState:v161];
        }
        if (v183) {
          [v164 addLogMsgState:v183];
        }
        if (v193) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v199) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        if (v190) {
          [v164 addLogMsgState:v190];
        }
        if (v182) {
          objc_msgSend(v164, "addLogMsgState:");
        }
        id v174 = +[GEOAPStateFactory sharedFactory];
        v206[0] = MEMORY[0x263EF8330];
        v206[1] = 3221225472;
        v206[2] = __165__GEOAPPortal_captureMapLaunchWithLaunchUri_sourceAppId_GEOTimeToLeaveMapLaunch_minutesUntilEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v206[3] = &unk_265345680;
        id v175 = v164;
        id v207 = v175;
        [v174 sessionStateForType:5 callback:v206];

        uint64_t v155 = v201;
        uint64_t v158 = v178;
      }
      v23[2](v23);

      id v18 = v179;
      goto LABEL_141;
    }
LABEL_15:
    v23[2](v23);
LABEL_141:

    goto LABEL_9;
  }
  id v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    int v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v217 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v23[2](v23);
LABEL_9:
}

void __165__GEOAPPortal_captureMapLaunchWithLaunchUri_sourceAppId_GEOTimeToLeaveMapLaunch_minutesUntilEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __165__GEOAPPortal_captureMapLaunchWithLaunchUri_sourceAppId_GEOTimeToLeaveMapLaunch_minutesUntilEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_238()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201914 = [v6 containsObject:v8];
}

void __165__GEOAPPortal_captureMapLaunchWithLaunchUri_sourceAppId_GEOTimeToLeaveMapLaunch_minutesUntilEvent_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTileSetStateWithTileSetStateType:(int)a3 newCoverage:(id)a4 oldCoverage:(id)a5 durationInOldState:(id)a6
{
}

+ (void)captureTileSetStateWithTileSetStateType:(int)a3 newCoverage:(id)a4 oldCoverage:(id)a5 durationInOldState:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v205 = *MEMORY[0x263EF8340];
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  v199[0] = MEMORY[0x263EF8330];
  v199[1] = 3221225472;
  v199[2] = __164__GEOAPPortal_captureTileSetStateWithTileSetStateType_newCoverage_oldCoverage_durationInOldState_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v199[3] = &unk_265345530;
  id v22 = v21;
  id v201 = v22;
  id v191 = v20;
  id v200 = v191;
  uint64_t v192 = MEMORY[0x25337B980](v199);
  id v23 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B201A40 != -1) {
      dispatch_once(&qword_26B201A40, &__block_literal_global_248);
    }
    int v27 = v19;
    if (byte_26B201915)
    {
      int v26 = (void (**)(void))v192;
      (*(void (**)(uint64_t))(v192 + 16))(v192);
      goto LABEL_133;
    }
    uint64_t v28 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v29 = [v28 countryCode];

    id v187 = (void *)v29;
    int v30 = [a1 isDisabledEvent:@"tileSetState" inCountry:v29];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_14;
      }
    }
    else if (v30)
    {
      goto LABEL_14;
    }
    if (v19) {
      [v19 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v31 == 0.0 || v31 < (double)arc4random() / 4294967300.0)
    {
      id v179 = v16;
      id v167 = v18;
      id v168 = v17;
      if ([v18 count])
      {
        id v188 = v15;
        id v32 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v18, "count"));
        long long v195 = 0u;
        long long v196 = 0u;
        long long v197 = 0u;
        long long v198 = 0u;
        id v33 = v18;
        uint64_t v34 = [v33 countByEnumeratingWithState:&v195 objects:v202 count:16];
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)v196;
          do
          {
            for (uint64_t i = 0; i != v35; ++i)
            {
              if (*(void *)v196 != v36) {
                objc_enumerationMutation(v33);
              }
              uint64_t v38 = *(void **)(*((void *)&v195 + 1) + 8 * i);
              uint64_t v39 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v38, "stateType"));
              [v32 setObject:v38 forKeyedSubscript:v39];
            }
            uint64_t v35 = [v33 countByEnumeratingWithState:&v195 objects:v202 count:16];
          }
          while (v35);
        }

        uint64_t v40 = (void *)[v32 copy];
        id v15 = v188;
        int v27 = v19;
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v41 = NSNumber;
      id v42 = +[GEOAPStateFactory sharedFactory];
      id v43 = objc_msgSend(v41, "numberWithInt:", objc_msgSend(v42, "logMsgStateTypeForType:", 65));

      id v44 = [v40 objectForKeyedSubscript:v43];
      id v45 = v44;
      if (v44)
      {
        id v186 = v44;
      }
      else
      {
        id v46 = +[GEOAPStateFactory sharedFactory];
        id v186 = [v46 stateForType:65];
      }
      unint64_t v47 = NSNumber;
      id v48 = +[GEOAPStateFactory sharedFactory];
      unint64_t v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 5));

      id v189 = v40;
      unint64_t v50 = [v40 objectForKeyedSubscript:v49];
      int v51 = v50;
      if (v50)
      {
        id v185 = v50;
      }
      else
      {
        unint64_t v52 = +[GEOAPStateFactory sharedFactory];
        id v185 = [v52 stateForType:5];
      }
      id v53 = NSNumber;
      id v54 = +[GEOAPStateFactory sharedFactory];
      id v55 = objc_msgSend(v53, "numberWithInt:", objc_msgSend(v54, "logMsgStateTypeForType:", 16));

      id v56 = [v189 objectForKeyedSubscript:v55];
      id v57 = v56;
      if (v56)
      {
        id v58 = v56;
      }
      else
      {
        uint64_t v59 = +[GEOAPStateFactory sharedFactory];
        id v58 = [v59 stateForType:16];
      }
      if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v187] & 1) != 0
        || GEOConfigGetBOOL())
      {

        id v184 = 0;
      }
      else
      {
        id v184 = v58;
      }
      id v60 = NSNumber;
      uint64_t v61 = +[GEOAPStateFactory sharedFactory];
      uint64_t v62 = objc_msgSend(v60, "numberWithInt:", objc_msgSend(v61, "logMsgStateTypeForType:", 35));

      id v63 = [v189 objectForKeyedSubscript:v62];
      int v64 = v63;
      if (v63)
      {
        id v65 = v63;
      }
      else
      {
        id v66 = +[GEOAPStateFactory sharedFactory];
        id v65 = [v66 stateForType:35];
      }
      id v67 = NSNumber;
      uint64_t v68 = +[GEOAPStateFactory sharedFactory];
      uint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 30));

      uint64_t v70 = [v189 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v183 = v70;
      }
      else
      {
        id v72 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v72 stateForType:30];
      }
      id v73 = NSNumber;
      uint64_t v74 = +[GEOAPStateFactory sharedFactory];
      id v75 = objc_msgSend(v73, "numberWithInt:", objc_msgSend(v74, "logMsgStateTypeForType:", 0));

      long long v76 = [v189 objectForKeyedSubscript:v75];
      id v77 = v76;
      if (v76)
      {
        id v182 = v76;
      }
      else
      {
        long long v78 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v78 stateForType:0];
      }
      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 3));

      id v82 = [v189 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v181 = v82;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v181 = [v84 stateForType:3];
      }
      id v16 = v179;

      id v85 = NSNumber;
      id v86 = +[GEOAPStateFactory sharedFactory];
      id v87 = objc_msgSend(v85, "numberWithInt:", objc_msgSend(v86, "logMsgStateTypeForType:", 64));

      id v88 = [v189 objectForKeyedSubscript:v87];
      id v89 = v88;
      if (v88)
      {
        id v180 = v88;
      }
      else
      {
        id v90 = +[GEOAPStateFactory sharedFactory];
        id v180 = [v90 stateForType:64];
      }
      id v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 13));

      long long v94 = [v189 objectForKeyedSubscript:v93];
      long long v95 = v94;
      if (v94)
      {
        id v178 = v94;
      }
      else
      {
        long long v96 = +[GEOAPStateFactory sharedFactory];
        id v178 = [v96 stateForType:13];
      }
      long long v97 = NSNumber;
      long long v98 = +[GEOAPStateFactory sharedFactory];
      long long v99 = objc_msgSend(v97, "numberWithInt:", objc_msgSend(v98, "logMsgStateTypeForType:", 14));

      long long v100 = [v189 objectForKeyedSubscript:v99];
      id v101 = v100;
      if (v100)
      {
        id v177 = v100;
      }
      else
      {
        id v102 = +[GEOAPStateFactory sharedFactory];
        id v177 = [v102 stateForType:14];
      }
      id v103 = NSNumber;
      id v104 = +[GEOAPStateFactory sharedFactory];
      double v105 = objc_msgSend(v103, "numberWithInt:", objc_msgSend(v104, "logMsgStateTypeForType:", 9));

      id v106 = [v189 objectForKeyedSubscript:v105];
      uint64_t v107 = v106;
      if (v106)
      {
        id v176 = v106;
      }
      else
      {
        double v108 = +[GEOAPStateFactory sharedFactory];
        id v176 = [v108 stateForType:9];
      }
      uint64_t v109 = NSNumber;
      double v110 = +[GEOAPStateFactory sharedFactory];
      double v111 = objc_msgSend(v109, "numberWithInt:", objc_msgSend(v110, "logMsgStateTypeForType:", 10));

      id v112 = [v189 objectForKeyedSubscript:v111];
      double v113 = v112;
      if (v112)
      {
        id v175 = v112;
      }
      else
      {
        double v114 = +[GEOAPStateFactory sharedFactory];
        id v175 = [v114 stateForType:10];
      }
      long long v115 = NSNumber;
      double v116 = +[GEOAPStateFactory sharedFactory];
      double v117 = objc_msgSend(v115, "numberWithInt:", objc_msgSend(v116, "logMsgStateTypeForType:", 20));

      id v118 = [v189 objectForKeyedSubscript:v117];
      double v119 = v118;
      if (v118)
      {
        id v174 = v118;
      }
      else
      {
        double v120 = +[GEOAPStateFactory sharedFactory];
        id v174 = [v120 stateForType:20];
      }
      id v121 = NSNumber;
      double v122 = +[GEOAPStateFactory sharedFactory];
      double v123 = objc_msgSend(v121, "numberWithInt:", objc_msgSend(v122, "logMsgStateTypeForType:", 42));

      long long v124 = [v189 objectForKeyedSubscript:v123];
      double v125 = v124;
      if (v124)
      {
        id v173 = v124;
      }
      else
      {
        double v126 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v126 stateForType:42];
      }
      long long v127 = NSNumber;
      id v128 = +[GEOAPStateFactory sharedFactory];
      double v129 = objc_msgSend(v127, "numberWithInt:", objc_msgSend(v128, "logMsgStateTypeForType:", 7));

      double v130 = [v189 objectForKeyedSubscript:v129];
      long long v131 = v130;
      if (v130)
      {
        id v172 = v130;
      }
      else
      {
        long long v132 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v132 stateForType:7];
      }
      double v133 = NSNumber;
      uint64_t v134 = +[GEOAPStateFactory sharedFactory];
      long long v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 17));

      long long v136 = [v189 objectForKeyedSubscript:v135];
      uint64_t v137 = v136;
      if (v136)
      {
        id v171 = v136;
      }
      else
      {
        long long v138 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v138 stateForType:17];
      }
      uint64_t v139 = NSNumber;
      id v140 = +[GEOAPStateFactory sharedFactory];
      uint64_t v141 = objc_msgSend(v139, "numberWithInt:", objc_msgSend(v140, "logMsgStateTypeForType:", 19));

      id v142 = [v189 objectForKeyedSubscript:v141];
      uint64_t v143 = v142;
      if (v142)
      {
        id v170 = v142;
      }
      else
      {
        id v144 = +[GEOAPStateFactory sharedFactory];
        id v170 = [v144 stateForType:19];
      }
      int v26 = (void (**)(void))v192;

      uint64_t v145 = NSNumber;
      uint64_t v146 = +[GEOAPStateFactory sharedFactory];
      uint64_t v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 27));

      id v166 = (void *)v147;
      double v148 = [v189 objectForKeyedSubscript:v147];
      uint64_t v149 = v148;
      if (v148)
      {
        id v169 = v148;
      }
      else
      {
        uint64_t v150 = +[GEOAPStateFactory sharedFactory];
        id v169 = [v150 stateForType:27];
      }
      id v17 = v168;

      uint64_t v151 = v185;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v152 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v152 setEventType:4];
        id v153 = objc_alloc_init(MEMORY[0x263F41930]);
        [v152 setTileSetStateEvent:v153];

        uint64_t v154 = [v152 tileSetStateEvent];
        [v154 setTileSetStateType:a3];

        if (v15)
        {
          [v15 doubleValue];
          double v156 = v155;
          uint64_t v157 = [v152 tileSetStateEvent];
          [v157 setNewCoverage:v156];
        }
        if (v16)
        {
          [v16 doubleValue];
          double v159 = v158;
          id v160 = [v152 tileSetStateEvent];
          [v160 setOldCoverage:v159];
        }
        if (v168)
        {
          [v168 doubleValue];
          double v162 = v161;
          id v163 = [v152 tileSetStateEvent];
          [v163 setDurationInOldState:v162];
        }
        if (v172) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v65) {
          [v152 addLogMsgState:v65];
        }
        if (v185) {
          [v152 addLogMsgState:v185];
        }
        if (v182) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v181) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v183) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v186) {
          [v152 addLogMsgState:v186];
        }
        if (v174) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v178) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v177) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v176) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v175) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v180) {
          [v152 addLogMsgState:v180];
        }
        if (v184) {
          [v152 addLogMsgState:v184];
        }
        if (v171) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v170) {
          objc_msgSend(v152, "addLogMsgState:");
        }
        if (v169) {
          [v152 addLogMsgState:v169];
        }
        if (v173) {
          [v152 addLogMsgState:v173];
        }
        id v164 = +[GEOAPStateFactory sharedFactory];
        v193[0] = MEMORY[0x263EF8330];
        v193[1] = 3221225472;
        v193[2] = __164__GEOAPPortal_captureTileSetStateWithTileSetStateType_newCoverage_oldCoverage_durationInOldState_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v193[3] = &unk_265345680;
        id v165 = v152;
        id v194 = v165;
        [v164 sessionStateForType:5 callback:v193];

        int v26 = (void (**)(void))v192;
        uint64_t v151 = v185;
      }
      v26[2](v26);

      id v18 = v167;
      goto LABEL_132;
    }
LABEL_14:
    int v26 = (void (**)(void))v192;
    (*(void (**)(uint64_t))(v192 + 16))(v192);
LABEL_132:

    goto LABEL_133;
  }
  int v24 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    id v25 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v204 = v25;
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  int v26 = (void (**)(void))v192;
  (*(void (**)(uint64_t))(v192 + 16))(v192);
  int v27 = v19;
LABEL_133:
}

void __164__GEOAPPortal_captureTileSetStateWithTileSetStateType_newCoverage_oldCoverage_durationInOldState_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __164__GEOAPPortal_captureTileSetStateWithTileSetStateType_newCoverage_oldCoverage_durationInOldState_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_246()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201915 = [v6 containsObject:v8];
}

void __164__GEOAPPortal_captureTileSetStateWithTileSetStateType_newCoverage_oldCoverage_durationInOldState_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTransitAppLaunchWithBundleIdentifier:(id)a3 source:(id)a4 destination:(id)a5 timestamp:(id)a6
{
}

+ (void)captureTransitAppLaunchWithBundleIdentifier:(id)a3 source:(id)a4 destination:(id)a5 timestamp:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  id v77 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v78 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  v85[0] = MEMORY[0x263EF8330];
  v85[1] = 3221225472;
  v85[2] = __154__GEOAPPortal_captureTransitAppLaunchWithBundleIdentifier_source_destination_timestamp_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v85[3] = &unk_265345530;
  id v76 = v21;
  id v87 = v76;
  id v75 = v20;
  id v86 = v75;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v85);
  id v23 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B201A48 != -1) {
      dispatch_once(&qword_26B201A48, &__block_literal_global_255);
    }
    int v26 = v78;
    int v27 = v19;
    if (byte_26B201916)
    {
      v22[2](v22);
      goto LABEL_45;
    }
    uint64_t v28 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v29 = [v28 countryCode];

    id v30 = a1;
    double v31 = (void *)v29;
    int v32 = [v30 isDisabledEvent:@"transitAppLaunch" inCountry:v29];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_27;
      }
    }
    else if (v32)
    {
      goto LABEL_27;
    }
    if (v19) {
      [v19 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v33 == 0.0 || v33 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v74 = v18;
      id v71 = v17;
      id v72 = v16;
      id v73 = (void *)v29;
      if ([v78 count])
      {
        uint64_t v34 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v78, "count"));
        long long v81 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        id v35 = v78;
        uint64_t v36 = [v35 countByEnumeratingWithState:&v81 objects:v88 count:16];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v38 = *(void *)v82;
          do
          {
            for (uint64_t i = 0; i != v37; ++i)
            {
              if (*(void *)v82 != v38) {
                objc_enumerationMutation(v35);
              }
              uint64_t v40 = *(void **)(*((void *)&v81 + 1) + 8 * i);
              uint64_t v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
              [v34 setObject:v40 forKeyedSubscript:v41];
            }
            uint64_t v37 = [v35 countByEnumeratingWithState:&v81 objects:v88 count:16];
          }
          while (v37);
        }

        id v42 = (void *)[v34 copy];
        int v27 = v19;
        double v31 = v73;
      }
      else
      {
        id v42 = 0;
      }
      id v43 = NSNumber;
      id v44 = +[GEOAPStateFactory sharedFactory];
      id v45 = objc_msgSend(v43, "numberWithInt:", objc_msgSend(v44, "logMsgStateTypeForType:", 0));

      id v46 = [v42 objectForKeyedSubscript:v45];
      unint64_t v47 = v46;
      if (v46)
      {
        id v48 = v46;
      }
      else
      {
        unint64_t v49 = +[GEOAPStateFactory sharedFactory];
        id v48 = [v49 stateForType:0];
      }
      unint64_t v50 = NSNumber;
      int v51 = +[GEOAPStateFactory sharedFactory];
      uint64_t v52 = objc_msgSend(v50, "numberWithInt:", objc_msgSend(v51, "logMsgStateTypeForType:", 3));

      uint64_t v69 = (void *)v52;
      uint64_t v70 = v42;
      id v53 = [v42 objectForKeyedSubscript:v52];
      id v54 = v53;
      int v26 = v78;
      if (v53)
      {
        id v55 = v53;
      }
      else
      {
        id v56 = +[GEOAPStateFactory sharedFactory];
        uint64_t v57 = [v56 stateForType:3];

        id v55 = (id)v57;
      }
      id v17 = v71;
      id v16 = v72;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v58 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v58 setEventType:9];
        id v59 = objc_alloc_init(MEMORY[0x263F41948]);
        [v58 setTransitAppLaunchEvent:v59];

        id v60 = [v58 transitAppLaunchEvent];
        [v60 setBundleIdentifier:v77];

        uint64_t v61 = [v58 transitAppLaunchEvent];
        [v61 setSource:v72];

        uint64_t v62 = [v58 transitAppLaunchEvent];
        [v62 setDestination:v71];

        if (v74)
        {
          [v74 doubleValue];
          double v64 = v63;
          id v65 = [v58 transitAppLaunchEvent];
          [v65 setTimestamp:v64];
        }
        if (v48) {
          [v58 addLogMsgState:v48];
        }
        if (v55) {
          [v58 addLogMsgState:v55];
        }
        id v66 = +[GEOAPStateFactory sharedFactory];
        v79[0] = MEMORY[0x263EF8330];
        v79[1] = 3221225472;
        v79[2] = __154__GEOAPPortal_captureTransitAppLaunchWithBundleIdentifier_source_destination_timestamp_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v79[3] = &unk_265345680;
        id v80 = v58;
        id v67 = v55;
        id v68 = v58;
        [v66 sessionStateForType:7 callback:v79];

        id v55 = v67;
        double v31 = v73;
      }
      v22[2](v22);

      id v18 = v74;
      goto LABEL_44;
    }
LABEL_27:
    v22[2](v22);
LABEL_44:

    goto LABEL_45;
  }
  int v24 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    id v25 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v90 = v25;
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v22[2](v22);
  int v26 = v78;
  int v27 = v19;
LABEL_45:
}

void __154__GEOAPPortal_captureTransitAppLaunchWithBundleIdentifier_source_destination_timestamp_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __154__GEOAPPortal_captureTransitAppLaunchWithBundleIdentifier_source_destination_timestamp_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_253()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201916 = [v6 containsObject:v8];
}

void __154__GEOAPPortal_captureTransitAppLaunchWithBundleIdentifier_source_destination_timestamp_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTtlHypothesisWithArrival:(int)a3 departure:(int)a4 ttlUiNotificationShown:(int)a5 earliestArrivalOffset:(id)a6 earliestDepartureOffset:(id)a7 latestArrivalOffset:(id)a8 latestDepartureOffset:(id)a9 numberOfReroutes:(id)a10
{
}

+ (void)captureTtlHypothesisWithArrival:(int)a3 departure:(int)a4 ttlUiNotificationShown:(int)a5 earliestArrivalOffset:(id)a6 earliestDepartureOffset:(id)a7 latestArrivalOffset:(id)a8 latestDepartureOffset:(id)a9 numberOfReroutes:(id)a10 additionalStates:(id)a11 providedDropRate:(id)a12 completionQueue:(id)a13 completionBlock:(id)a14
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  id v96 = a6;
  id v94 = a7;
  id v99 = a8;
  id v17 = a9;
  id v93 = a10;
  id v98 = a11;
  id v18 = a12;
  id v19 = a13;
  id v20 = a14;
  v106[0] = MEMORY[0x263EF8330];
  v106[1] = 3221225472;
  v106[2] = __251__GEOAPPortal_captureTtlHypothesisWithArrival_departure_ttlUiNotificationShown_earliestArrivalOffset_earliestDepartureOffset_latestArrivalOffset_latestDepartureOffset_numberOfReroutes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v106[3] = &unk_265345530;
  id v91 = v20;
  id v108 = v91;
  id v90 = v19;
  id v107 = v90;
  id v21 = (void (**)(void))MEMORY[0x25337B980](v106);
  id v22 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v22 eventCollectionIsDisabledForCurrentProcess];

  long long v92 = v18;
  if (a7)
  {
    id v23 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      double v111 = v24;
      _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    v21[2](v21);
    int v26 = v94;
    id v25 = v96;
    int v27 = v99;
    uint64_t v28 = v17;
    goto LABEL_9;
  }
  if (qword_26B201A50 != -1) {
    dispatch_once(&qword_26B201A50, &__block_literal_global_262);
  }
  int v26 = v94;
  id v25 = v96;
  int v27 = v99;
  uint64_t v28 = v17;
  if (!byte_26B201917)
  {
    id v30 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v31 = [v30 countryCode];

    id v86 = (void *)v31;
    int v32 = [a1 isDisabledEvent:@"ttlHypothesis" inCountry:v31];
    if (_GEOConfigHasValue())
    {
      id v25 = v96;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_13:
        double v33 = +[GEOAPServiceManager sharedManager];
        char v34 = [v33 platformDiagAndUsage];

        int v26 = v94;
        if (v34)
        {
          int v27 = v99;
          if (v18) {
            [v18 doubleValue];
          }
          else {
            GEOConfigGetDouble();
          }
          if (v35 == 0.0 || v35 < (double)arc4random() / 4294967300.0)
          {
            if ([v98 count])
            {
              uint64_t v36 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v98, "count"));
              long long v102 = 0u;
              long long v103 = 0u;
              long long v104 = 0u;
              long long v105 = 0u;
              id v37 = v98;
              uint64_t v38 = [v37 countByEnumeratingWithState:&v102 objects:v109 count:16];
              if (v38)
              {
                uint64_t v39 = v38;
                uint64_t v40 = *(void *)v103;
                do
                {
                  for (uint64_t i = 0; i != v39; ++i)
                  {
                    if (*(void *)v103 != v40) {
                      objc_enumerationMutation(v37);
                    }
                    id v42 = *(void **)(*((void *)&v102 + 1) + 8 * i);
                    id v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v42, "stateType"));
                    [v36 setObject:v42 forKeyedSubscript:v43];
                  }
                  uint64_t v39 = [v37 countByEnumeratingWithState:&v102 objects:v109 count:16];
                }
                while (v39);
              }

              id v44 = (void *)[v36 copy];
              int v26 = v94;
              id v25 = v96;
              int v27 = v99;
            }
            else
            {
              id v44 = 0;
            }
            id v45 = NSNumber;
            id v46 = +[GEOAPStateFactory sharedFactory];
            unint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 0));

            long long v97 = v44;
            id v48 = [v44 objectForKeyedSubscript:v47];
            unint64_t v49 = v48;
            if (v48)
            {
              id v95 = v48;
            }
            else
            {
              unint64_t v50 = +[GEOAPStateFactory sharedFactory];
              id v95 = [v50 stateForType:0];
            }
            int v51 = NSNumber;
            uint64_t v52 = +[GEOAPStateFactory sharedFactory];
            uint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 3));

            id v85 = (void *)v53;
            id v54 = [v97 objectForKeyedSubscript:v53];
            id v55 = v54;
            if (v54)
            {
              id v56 = v54;
            }
            else
            {
              uint64_t v57 = +[GEOAPStateFactory sharedFactory];
              uint64_t v58 = [v57 stateForType:3];

              id v56 = (id)v58;
            }
            uint64_t v28 = v17;

            uint64_t v29 = v93;
            id v59 = v95;
            if ((GEOConfigGetBOOL() & 1) == 0)
            {
              id v60 = objc_alloc_init(MEMORY[0x263F417E8]);
              [v60 setEventType:10];
              id v61 = objc_alloc_init(MEMORY[0x263F41938]);
              [v60 setTimeToLeaveHypothesisEvent:v61];

              uint64_t v62 = [v60 timeToLeaveHypothesisEvent];
              [v62 setArrival:a3];

              double v63 = [v60 timeToLeaveHypothesisEvent];
              [v63 setDeparture:a4];

              double v64 = [v60 timeToLeaveHypothesisEvent];
              [v64 setTtlUiNotificationShown:a5];

              if (v25)
              {
                [v25 doubleValue];
                double v66 = v65;
                id v67 = [v60 timeToLeaveHypothesisEvent];
                [v67 setEarliestArrivalOffset:v66];
              }
              id v68 = v60;
              if (v26)
              {
                [v26 doubleValue];
                double v70 = v69;
                id v71 = [v60 timeToLeaveHypothesisEvent];
                [v71 setEarliestDepartureOffset:v70];
              }
              if (v27)
              {
                [v27 doubleValue];
                double v73 = v72;
                uint64_t v74 = [v60 timeToLeaveHypothesisEvent];
                [v74 setLatestArrivalOffset:v73];
              }
              if (v28)
              {
                [v28 doubleValue];
                double v76 = v75;
                id v77 = [v60 timeToLeaveHypothesisEvent];
                [v77 setLatestDepartureOffset:v76];
              }
              if (v93)
              {
                uint64_t v78 = [v93 unsignedLongLongValue];
                [v60 timeToLeaveHypothesisEvent];
                v80 = id v79 = v56;
                [v80 setNumberOfReroutes:v78];

                id v56 = v79;
                id v68 = v60;
              }
              id v59 = v95;
              if (v95) {
                [v68 addLogMsgState:v95];
              }
              if (v56) {
                [v68 addLogMsgState:v56];
              }
              long long v81 = +[GEOAPStateFactory sharedFactory];
              v100[0] = MEMORY[0x263EF8330];
              v100[1] = 3221225472;
              v100[2] = __251__GEOAPPortal_captureTtlHypothesisWithArrival_departure_ttlUiNotificationShown_earliestArrivalOffset_earliestDepartureOffset_latestArrivalOffset_latestDepartureOffset_numberOfReroutes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
              v100[3] = &unk_265345680;
              id v101 = v68;
              id v82 = v68;
              id v83 = v56;
              id v84 = v82;
              [v81 sessionStateForType:7 callback:v100];

              id v56 = v83;
            }
            v21[2](v21);
          }
          else
          {
            v21[2](v21);
            uint64_t v29 = v93;
          }
          goto LABEL_20;
        }
        v21[2](v21);
        uint64_t v29 = v93;
LABEL_19:
        int v27 = v99;
LABEL_20:

        goto LABEL_10;
      }
    }
    else
    {
      id v25 = v96;
      if (!v32) {
        goto LABEL_13;
      }
    }
    v21[2](v21);
    uint64_t v29 = v93;
    int v26 = v94;
    goto LABEL_19;
  }
  v21[2](v21);
LABEL_9:
  uint64_t v29 = v93;
LABEL_10:
}

void __251__GEOAPPortal_captureTtlHypothesisWithArrival_departure_ttlUiNotificationShown_earliestArrivalOffset_earliestDepartureOffset_latestArrivalOffset_latestDepartureOffset_numberOfReroutes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __251__GEOAPPortal_captureTtlHypothesisWithArrival_departure_ttlUiNotificationShown_earliestArrivalOffset_earliestDepartureOffset_latestArrivalOffset_latestDepartureOffset_numberOfReroutes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_260()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201917 = [v6 containsObject:v8];
}

void __251__GEOAPPortal_captureTtlHypothesisWithArrival_departure_ttlUiNotificationShown_earliestArrivalOffset_earliestDepartureOffset_latestArrivalOffset_latestDepartureOffset_numberOfReroutes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTtlInitialTimeWithTravelTime:(id)a3
{
}

+ (void)captureTtlInitialTimeWithTravelTime:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v74[0] = MEMORY[0x263EF8330];
  v74[1] = 3221225472;
  v74[2] = __117__GEOAPPortal_captureTtlInitialTimeWithTravelTime_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v74[3] = &unk_265345530;
  id v17 = v16;
  id v76 = v17;
  id v18 = v15;
  id v75 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v74);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B201A58 != -1) {
      dispatch_once(&qword_26B201A58, &__block_literal_global_269);
    }
    if (byte_26B201918) {
      goto LABEL_8;
    }
    id v67 = v13;
    int v24 = [MEMORY[0x263F41770] sharedConfiguration];
    id v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"ttlInitialTime" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v26)
    {
      goto LABEL_16;
    }
    int v27 = +[GEOAPServiceManager sharedManager];
    char v28 = [v27 platformDiagAndUsage];

    if (v28)
    {
      if (v14) {
        [v14 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v29 == 0.0 || v29 < (double)arc4random() / 4294967300.0)
      {
        double v63 = v25;
        double v64 = v12;
        if ([v13 count])
        {
          id v61 = v17;
          id v65 = v14;
          id v30 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          id v31 = v13;
          uint64_t v32 = [v31 countByEnumeratingWithState:&v70 objects:v77 count:16];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = *(void *)v71;
            do
            {
              for (uint64_t i = 0; i != v33; ++i)
              {
                if (*(void *)v71 != v34) {
                  objc_enumerationMutation(v31);
                }
                uint64_t v36 = *(void **)(*((void *)&v70 + 1) + 8 * i);
                id v37 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "stateType", v61));
                [v30 setObject:v36 forKeyedSubscript:v37];
              }
              uint64_t v33 = [v31 countByEnumeratingWithState:&v70 objects:v77 count:16];
            }
            while (v33);
          }

          uint64_t v38 = (void *)[v30 copy];
          id v14 = v65;
          id v17 = v61;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = NSNumber;
        uint64_t v40 = +[GEOAPStateFactory sharedFactory];
        uint64_t v41 = objc_msgSend(v39, "numberWithInt:", objc_msgSend(v40, "logMsgStateTypeForType:", 0));

        id v42 = [v38 objectForKeyedSubscript:v41];
        id v43 = v42;
        double v66 = v38;
        if (v42)
        {
          id v62 = v42;
          unint64_t v44 = 0x265344000;
        }
        else
        {
          unint64_t v44 = 0x265344000uLL;
          id v45 = +[GEOAPStateFactory sharedFactory];
          id v62 = [v45 stateForType:0];
        }
        id v46 = NSNumber;
        [*(id *)(v44 + 3384) sharedFactory];
        id v48 = v47 = v44;
        unint64_t v49 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 3));

        unint64_t v50 = [v66 objectForKeyedSubscript:v49];
        int v51 = v50;
        if (v50)
        {
          id v52 = v50;
        }
        else
        {
          uint64_t v53 = [*(id *)(v47 + 3384) sharedFactory];
          id v52 = [v53 stateForType:3];
        }
        id v13 = v67;
        id v25 = v63;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v54 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v54 setEventType:11];
          id v55 = objc_alloc_init(MEMORY[0x263F41940]);
          [v54 setTimeToLeaveInitialTravelTimeEvent:v55];

          if (v64)
          {
            [v64 doubleValue];
            uint64_t v57 = (int)v56;
            uint64_t v58 = [v54 timeToLeaveInitialTravelTimeEvent];
            [v58 setTravelTime:v57];
          }
          if (v62) {
            objc_msgSend(v54, "addLogMsgState:");
          }
          if (v52) {
            [v54 addLogMsgState:v52];
          }
          id v59 = +[GEOAPStateFactory sharedFactory];
          v68[0] = MEMORY[0x263EF8330];
          v68[1] = 3221225472;
          v68[2] = __117__GEOAPPortal_captureTtlInitialTimeWithTravelTime_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v68[3] = &unk_265345680;
          id v69 = v54;
          id v60 = v54;
          [v59 sessionStateForType:7 callback:v68];

          id v25 = v63;
        }
        v19[2](v19);

        id v12 = v64;
        goto LABEL_46;
      }
    }
LABEL_16:
    v19[2](v19);
LABEL_46:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v79 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __117__GEOAPPortal_captureTtlInitialTimeWithTravelTime_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __117__GEOAPPortal_captureTtlInitialTimeWithTravelTime_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_267()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201918 = [v6 containsObject:v8];
}

void __117__GEOAPPortal_captureTtlInitialTimeWithTravelTime_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureWidgetInteractionWithMapsWidgetType:(int)a3 endState:(int)a4 lockedMode:(id)a5 localHour:(id)a6 localDayOfWeek:(id)a7 duration:(id)a8 mapsNearbyWidget:(id)a9 mapsTransitWidget:(id)a10 mapsDestinationsWidget:(id)a11
{
}

+ (void)captureWidgetInteractionWithMapsWidgetType:(int)a3 endState:(int)a4 lockedMode:(id)a5 localHour:(id)a6 localDayOfWeek:(id)a7 duration:(id)a8 mapsNearbyWidget:(id)a9 mapsTransitWidget:(id)a10 mapsDestinationsWidget:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  id v211 = a5;
  id v206 = a6;
  id v208 = a7;
  id v204 = a8;
  id v18 = a9;
  id v205 = a10;
  id v19 = a11;
  id v210 = a12;
  id v20 = a13;
  id v21 = a14;
  id v22 = a15;
  v218[0] = MEMORY[0x263EF8330];
  v218[1] = 3221225472;
  v218[2] = __236__GEOAPPortal_captureWidgetInteractionWithMapsWidgetType_endState_lockedMode_localHour_localDayOfWeek_duration_mapsNearbyWidget_mapsTransitWidget_mapsDestinationsWidget_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v218[3] = &unk_265345530;
  id v203 = v22;
  id v220 = v203;
  id v202 = v21;
  id v219 = v202;
  uint64_t v23 = MEMORY[0x25337B980](v218);
  int v24 = +[GEOAPServiceManager sharedManager];
  int v25 = [v24 eventCollectionIsDisabledForCurrentProcess];

  if (v25)
  {
    id v26 = v18;
    int v27 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      char v28 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      id v223 = v28;
      _os_log_impl(&dword_24FE56000, v27, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    (*(void (**)(uint64_t))(v23 + 16))(v23);
    double v29 = v210;
    id v31 = v206;
    id v30 = v208;
    uint64_t v32 = (void *)v23;
    uint64_t v33 = v204;
    id v18 = v26;
    uint64_t v34 = v211;
    goto LABEL_9;
  }
  if (qword_26B201A60 != -1) {
    dispatch_once(&qword_26B201A60, &__block_literal_global_276);
  }
  double v29 = v210;
  uint64_t v34 = v211;
  id v31 = v206;
  if (!byte_26B201919)
  {
    uint64_t v36 = [MEMORY[0x263F41770] sharedConfiguration];
    id v37 = [v36 countryCode];

    int v38 = [a1 isDisabledEvent:@"widgetInteraction" inCountry:v37];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if (!v38)
    {
LABEL_13:
      long long v197 = v37;
      uint64_t v39 = +[GEOAPServiceManager sharedManager];
      char v40 = [v39 platformDiagAndUsage];

      if (v40)
      {
        id v30 = v208;
        double v35 = v20;
        if (v20) {
          [v20 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v37 = v197;
        if (v41 == 0.0 || v41 < (double)arc4random() / 4294967300.0)
        {
          id v180 = (void (**)(void))v23;
          if ([v210 count])
          {
            id v42 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v210, "count"));
            long long v214 = 0u;
            long long v215 = 0u;
            long long v216 = 0u;
            long long v217 = 0u;
            id v43 = v210;
            uint64_t v44 = [v43 countByEnumeratingWithState:&v214 objects:v221 count:16];
            if (v44)
            {
              uint64_t v45 = v44;
              uint64_t v46 = *(void *)v215;
              do
              {
                for (uint64_t i = 0; i != v45; ++i)
                {
                  if (*(void *)v215 != v46) {
                    objc_enumerationMutation(v43);
                  }
                  id v48 = *(void **)(*((void *)&v214 + 1) + 8 * i);
                  unint64_t v49 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v48, "stateType"));
                  [v42 setObject:v48 forKeyedSubscript:v49];
                }
                uint64_t v45 = [v43 countByEnumeratingWithState:&v214 objects:v221 count:16];
              }
              while (v45);
            }

            unint64_t v50 = (void *)[v42 copy];
            id v31 = v206;
          }
          else
          {
            unint64_t v50 = 0;
          }
          int v51 = NSNumber;
          id v52 = +[GEOAPStateFactory sharedFactory];
          uint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 65));

          id v207 = v50;
          id v54 = [v50 objectForKeyedSubscript:v53];
          id v55 = v54;
          if (v54)
          {
            id v194 = v54;
          }
          else
          {
            double v56 = +[GEOAPStateFactory sharedFactory];
            id v194 = [v56 stateForType:65];
          }
          uint64_t v57 = NSNumber;
          uint64_t v58 = +[GEOAPStateFactory sharedFactory];
          id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 5));

          id v60 = [v50 objectForKeyedSubscript:v59];
          id v61 = v60;
          if (v60)
          {
            id v196 = v60;
          }
          else
          {
            id v62 = +[GEOAPStateFactory sharedFactory];
            id v196 = [v62 stateForType:5];
          }
          double v63 = NSNumber;
          double v64 = +[GEOAPStateFactory sharedFactory];
          id v65 = objc_msgSend(v63, "numberWithInt:", objc_msgSend(v64, "logMsgStateTypeForType:", 16));

          double v66 = [v50 objectForKeyedSubscript:v65];
          id v67 = v66;
          if (v66)
          {
            id v68 = v66;
          }
          else
          {
            +[GEOAPStateFactory sharedFactory];
            v70 = id v69 = v65;
            id v68 = [v70 stateForType:16];

            id v65 = v69;
          }

          id v195 = v18;
          if (([a1 isDisabledState:@"DetailedExperiments" inCountry:v197] & 1) != 0
            || GEOConfigGetBOOL())
          {

            id v68 = 0;
          }
          long long v71 = NSNumber;
          long long v72 = +[GEOAPStateFactory sharedFactory];
          long long v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 35));

          uint64_t v74 = [v207 objectForKeyedSubscript:v73];
          id v75 = v74;
          if (v74)
          {
            id v193 = v74;
          }
          else
          {
            id v76 = +[GEOAPStateFactory sharedFactory];
            id v193 = [v76 stateForType:35];
          }
          id v77 = NSNumber;
          uint64_t v78 = +[GEOAPStateFactory sharedFactory];
          id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 30));

          uint64_t v80 = [v207 objectForKeyedSubscript:v79];
          long long v81 = v80;
          if (v80)
          {
            id v192 = v80;
          }
          else
          {
            id v82 = +[GEOAPStateFactory sharedFactory];
            id v192 = [v82 stateForType:30];
          }
          id v201 = v68;

          id v83 = NSNumber;
          id v84 = +[GEOAPStateFactory sharedFactory];
          id v85 = objc_msgSend(v83, "numberWithInt:", objc_msgSend(v84, "logMsgStateTypeForType:", 0));

          id v86 = [v207 objectForKeyedSubscript:v85];
          id v87 = v86;
          if (v86)
          {
            id v191 = v86;
          }
          else
          {
            id v88 = +[GEOAPStateFactory sharedFactory];
            id v191 = [v88 stateForType:0];
          }
          id v30 = v208;
          double v35 = v20;

          id v89 = NSNumber;
          id v90 = +[GEOAPStateFactory sharedFactory];
          id v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 3));

          long long v92 = [v207 objectForKeyedSubscript:v91];
          id v93 = v92;
          uint64_t v33 = v204;
          if (v92)
          {
            id v209 = v92;
          }
          else
          {
            id v94 = +[GEOAPStateFactory sharedFactory];
            id v209 = [v94 stateForType:3];
          }
          id v95 = NSNumber;
          id v96 = +[GEOAPStateFactory sharedFactory];
          long long v97 = objc_msgSend(v95, "numberWithInt:", objc_msgSend(v96, "logMsgStateTypeForType:", 64));

          id v98 = [v207 objectForKeyedSubscript:v97];
          id v99 = v98;
          if (v98)
          {
            id v190 = v98;
          }
          else
          {
            long long v100 = +[GEOAPStateFactory sharedFactory];
            id v190 = [v100 stateForType:64];
          }
          id v101 = NSNumber;
          long long v102 = +[GEOAPStateFactory sharedFactory];
          long long v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 13));

          long long v104 = [v207 objectForKeyedSubscript:v103];
          long long v105 = v104;
          if (v104)
          {
            id v189 = v104;
          }
          else
          {
            id v106 = +[GEOAPStateFactory sharedFactory];
            id v189 = [v106 stateForType:13];
          }
          id v107 = NSNumber;
          id v108 = +[GEOAPStateFactory sharedFactory];
          uint64_t v109 = objc_msgSend(v107, "numberWithInt:", objc_msgSend(v108, "logMsgStateTypeForType:", 14));

          double v110 = [v207 objectForKeyedSubscript:v109];
          double v111 = v110;
          if (v110)
          {
            id v188 = v110;
          }
          else
          {
            uint64_t v112 = +[GEOAPStateFactory sharedFactory];
            id v188 = [v112 stateForType:14];
          }
          double v113 = NSNumber;
          double v114 = +[GEOAPStateFactory sharedFactory];
          long long v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 9));

          double v116 = [v207 objectForKeyedSubscript:v115];
          double v117 = v116;
          if (v116)
          {
            id v187 = v116;
          }
          else
          {
            id v118 = +[GEOAPStateFactory sharedFactory];
            id v187 = [v118 stateForType:9];
          }
          double v119 = NSNumber;
          double v120 = +[GEOAPStateFactory sharedFactory];
          id v121 = objc_msgSend(v119, "numberWithInt:", objc_msgSend(v120, "logMsgStateTypeForType:", 10));

          double v122 = [v207 objectForKeyedSubscript:v121];
          double v123 = v122;
          if (v122)
          {
            id v186 = v122;
          }
          else
          {
            long long v124 = +[GEOAPStateFactory sharedFactory];
            id v186 = [v124 stateForType:10];
          }
          double v125 = NSNumber;
          double v126 = +[GEOAPStateFactory sharedFactory];
          long long v127 = objc_msgSend(v125, "numberWithInt:", objc_msgSend(v126, "logMsgStateTypeForType:", 20));

          id v128 = [v207 objectForKeyedSubscript:v127];
          double v129 = v128;
          if (v128)
          {
            id v185 = v128;
          }
          else
          {
            double v130 = +[GEOAPStateFactory sharedFactory];
            id v185 = [v130 stateForType:20];
          }
          long long v131 = NSNumber;
          long long v132 = +[GEOAPStateFactory sharedFactory];
          double v133 = objc_msgSend(v131, "numberWithInt:", objc_msgSend(v132, "logMsgStateTypeForType:", 42));

          uint64_t v134 = [v207 objectForKeyedSubscript:v133];
          long long v135 = v134;
          if (v134)
          {
            id v184 = v134;
          }
          else
          {
            long long v136 = +[GEOAPStateFactory sharedFactory];
            id v184 = [v136 stateForType:42];
          }
          uint64_t v137 = NSNumber;
          long long v138 = +[GEOAPStateFactory sharedFactory];
          uint64_t v139 = objc_msgSend(v137, "numberWithInt:", objc_msgSend(v138, "logMsgStateTypeForType:", 7));

          id v140 = [v207 objectForKeyedSubscript:v139];
          uint64_t v141 = v140;
          if (v140)
          {
            id v183 = v140;
          }
          else
          {
            id v142 = +[GEOAPStateFactory sharedFactory];
            id v183 = [v142 stateForType:7];
          }
          uint64_t v143 = NSNumber;
          id v144 = +[GEOAPStateFactory sharedFactory];
          uint64_t v145 = objc_msgSend(v143, "numberWithInt:", objc_msgSend(v144, "logMsgStateTypeForType:", 17));

          uint64_t v146 = [v207 objectForKeyedSubscript:v145];
          uint64_t v147 = v146;
          if (v146)
          {
            id v182 = v146;
          }
          else
          {
            double v148 = +[GEOAPStateFactory sharedFactory];
            id v182 = [v148 stateForType:17];
          }
          uint64_t v149 = NSNumber;
          uint64_t v150 = +[GEOAPStateFactory sharedFactory];
          uint64_t v151 = objc_msgSend(v149, "numberWithInt:", objc_msgSend(v150, "logMsgStateTypeForType:", 19));

          id v152 = [v207 objectForKeyedSubscript:v151];
          id v153 = v152;
          if (v152)
          {
            id v181 = v152;
          }
          else
          {
            uint64_t v154 = +[GEOAPStateFactory sharedFactory];
            id v181 = [v154 stateForType:19];
          }
          double v155 = NSNumber;
          double v156 = +[GEOAPStateFactory sharedFactory];
          uint64_t v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 27));

          id v179 = (void *)v157;
          double v158 = [v207 objectForKeyedSubscript:v157];
          double v159 = v158;
          if (v158)
          {
            id v160 = v158;
          }
          else
          {
            double v161 = +[GEOAPStateFactory sharedFactory];
            id v160 = [v161 stateForType:27];
          }
          id v37 = v197;

          if ((GEOConfigGetBOOL() & 1) == 0)
          {
            id v162 = objc_alloc_init(MEMORY[0x263F417E8]);
            [v162 setEventType:13];
            id v163 = objc_alloc_init(MEMORY[0x263F41888]);
            [v162 setMapsWidgetsInteractionSession:v163];

            id v164 = [v162 mapsWidgetsInteractionSession];
            [v164 setMapsWidgetType:a3];

            id v165 = [v162 mapsWidgetsInteractionSession];
            [v165 setEndState:a4];

            if (v211)
            {
              uint64_t v166 = [v211 BOOLValue];
              id v167 = [v162 mapsWidgetsInteractionSession];
              [v167 setLockedMode:v166];

              id v37 = v197;
            }
            if (v31)
            {
              uint64_t v168 = [v31 integerValue];
              id v169 = [v162 mapsWidgetsInteractionSession];
              [v169 setLocalHour:v168];

              id v37 = v197;
            }
            if (v30)
            {
              uint64_t v170 = [v30 integerValue];
              id v171 = [v162 mapsWidgetsInteractionSession];
              [v171 setLocalDayOfWeek:v170];

              id v37 = v197;
            }
            if (v204)
            {
              uint64_t v172 = [v204 integerValue];
              id v173 = [v162 mapsWidgetsInteractionSession];
              [v173 setDuration:v172];

              id v37 = v197;
            }
            id v174 = [v162 mapsWidgetsInteractionSession];
            [v174 setMapsNearbyWidget:v195];

            id v175 = [v162 mapsWidgetsInteractionSession];
            [v175 setMapsTransitWidget:v205];

            id v176 = [v162 mapsWidgetsInteractionSession];
            [v176 setMapsDestinationsWidget:v19];

            if (v183) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v193) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v196) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v191) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v209) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v192) {
              [v162 addLogMsgState:v192];
            }
            if (v194) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v185) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v189) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v188) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v187) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v186) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v190) {
              [v162 addLogMsgState:v190];
            }
            if (v201) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v182) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v181) {
              objc_msgSend(v162, "addLogMsgState:");
            }
            if (v160) {
              [v162 addLogMsgState:v160];
            }
            if (v184) {
              [v162 addLogMsgState:v184];
            }
            id v177 = +[GEOAPStateFactory sharedFactory];
            v212[0] = MEMORY[0x263EF8330];
            v212[1] = 3221225472;
            v212[2] = __236__GEOAPPortal_captureWidgetInteractionWithMapsWidgetType_endState_lockedMode_localHour_localDayOfWeek_duration_mapsNearbyWidget_mapsTransitWidget_mapsDestinationsWidget_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
            v212[3] = &unk_265345680;
            id v178 = v162;
            id v213 = v178;
            [v177 sessionStateForType:5 callback:v212];
          }
          uint64_t v32 = v180;
          v180[2]();

          id v18 = v195;
          double v29 = v210;
        }
        else
        {
          uint64_t v32 = (void *)v23;
          (*(void (**)(uint64_t))(v23 + 16))(v23);
          uint64_t v33 = v204;
        }
      }
      else
      {
        uint64_t v32 = (void *)v23;
        (*(void (**)(uint64_t))(v23 + 16))(v23);
        id v30 = v208;
        uint64_t v33 = v204;
        double v35 = v20;
        id v37 = v197;
      }
      goto LABEL_137;
    }
    uint64_t v32 = (void *)v23;
    (*(void (**)(uint64_t))(v23 + 16))(v23);
    id v30 = v208;
    uint64_t v33 = v204;
    double v35 = v20;
LABEL_137:

    uint64_t v34 = v211;
    goto LABEL_10;
  }
  (*(void (**)(uint64_t))(v23 + 16))(v23);
  id v30 = v208;
  uint64_t v32 = (void *)v23;
  uint64_t v33 = v204;
LABEL_9:
  double v35 = v20;
LABEL_10:
}

void __236__GEOAPPortal_captureWidgetInteractionWithMapsWidgetType_endState_lockedMode_localHour_localDayOfWeek_duration_mapsNearbyWidget_mapsTransitWidget_mapsDestinationsWidget_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __236__GEOAPPortal_captureWidgetInteractionWithMapsWidgetType_endState_lockedMode_localHour_localDayOfWeek_duration_mapsNearbyWidget_mapsTransitWidget_mapsDestinationsWidget_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_274()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201919 = [v6 containsObject:v8];
}

void __236__GEOAPPortal_captureWidgetInteractionWithMapsWidgetType_endState_lockedMode_localHour_localDayOfWeek_duration_mapsNearbyWidget_mapsTransitWidget_mapsDestinationsWidget_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureCommuteWindowWithStartTime:(id)a3 duration:(id)a4 predictedExitTime:(id)a5 endReason:(int)a6 numberOfAlertingResponses:(id)a7 numberOfDoomRoutingRequests:(id)a8 predictedDestinations:(id)a9
{
}

+ (void)captureCommuteWindowWithStartTime:(id)a3 duration:(id)a4 predictedExitTime:(id)a5 endReason:(int)a6 numberOfAlertingResponses:(id)a7 numberOfDoomRoutingRequests:(id)a8 predictedDestinations:(id)a9 additionalStates:(id)a10 providedDropRate:(id)a11 completionQueue:(id)a12 completionBlock:(id)a13
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  id v101 = a3;
  id v99 = a4;
  id v98 = a5;
  id v97 = a7;
  id v96 = a8;
  id v100 = a9;
  id v18 = a10;
  id v19 = a11;
  id v20 = a12;
  id v21 = a13;
  v112[0] = MEMORY[0x263EF8330];
  v112[1] = 3221225472;
  v112[2] = __228__GEOAPPortal_captureCommuteWindowWithStartTime_duration_predictedExitTime_endReason_numberOfAlertingResponses_numberOfDoomRoutingRequests_predictedDestinations_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v112[3] = &unk_265345530;
  id v22 = v21;
  id v114 = v22;
  id v23 = v20;
  id v113 = v23;
  int v24 = (void (**)(void))MEMORY[0x25337B980](v112);
  int v25 = +[GEOAPServiceManager sharedManager];
  LODWORD(a5) = [v25 eventCollectionIsDisabledForCurrentProcess];

  if (!a5)
  {
    if (qword_26B201A68 != -1) {
      dispatch_once(&qword_26B201A68, &__block_literal_global_283);
    }
    char v28 = v101;
    if (byte_26B20191A)
    {
      v24[2](v24);
      goto LABEL_18;
    }
    double v29 = [MEMORY[0x263F41770] sharedConfiguration];
    id v30 = [v29 countryCode];

    int v31 = [a1 isDisabledEvent:@"commuteWindow" inCountry:v30];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v31)
    {
      goto LABEL_16;
    }
    uint64_t v32 = +[GEOAPServiceManager sharedManager];
    char v33 = [v32 platformDiagAndUsage];

    if (v33)
    {
      id v94 = v22;
      if (v19) {
        [v19 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v34 == 0.0 || v34 < (double)arc4random() / 4294967300.0)
      {
        long long v92 = v30;
        id v93 = v18;
        id v89 = v19;
        if ([v18 count])
        {
          double v35 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v18, "count"));
          long long v108 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          id v36 = v18;
          uint64_t v37 = [v36 countByEnumeratingWithState:&v108 objects:v116 count:16];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = *(void *)v109;
            do
            {
              for (uint64_t i = 0; i != v38; ++i)
              {
                if (*(void *)v109 != v39) {
                  objc_enumerationMutation(v36);
                }
                double v41 = *(void **)(*((void *)&v108 + 1) + 8 * i);
                id v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
                [v35 setObject:v41 forKeyedSubscript:v42];
              }
              uint64_t v38 = [v36 countByEnumeratingWithState:&v108 objects:v116 count:16];
            }
            while (v38);
          }

          id v43 = (void *)[v35 copy];
          char v28 = v101;
          id v19 = v89;
        }
        else
        {
          id v43 = 0;
        }
        uint64_t v44 = NSNumber;
        uint64_t v45 = +[GEOAPStateFactory sharedFactory];
        uint64_t v46 = objc_msgSend(v44, "numberWithInt:", objc_msgSend(v45, "logMsgStateTypeForType:", 0));

        unint64_t v47 = [v43 objectForKeyedSubscript:v46];
        id v48 = v47;
        if (v47)
        {
          id v91 = v47;
        }
        else
        {
          unint64_t v49 = +[GEOAPStateFactory sharedFactory];
          id v91 = [v49 stateForType:0];
        }
        unint64_t v50 = NSNumber;
        int v51 = +[GEOAPStateFactory sharedFactory];
        id v52 = objc_msgSend(v50, "numberWithInt:", objc_msgSend(v51, "logMsgStateTypeForType:", 3));

        uint64_t v53 = [v43 objectForKeyedSubscript:v52];
        id v54 = v53;
        id v18 = v93;
        if (v53)
        {
          id v90 = v53;
        }
        else
        {
          +[GEOAPStateFactory sharedFactory];
          double v56 = v55 = v52;
          id v90 = [v56 stateForType:3];

          id v52 = v55;
        }
        id v30 = v92;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v86 = v52;
          id v57 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v57 setEventType:29];
          id v58 = objc_alloc_init(MEMORY[0x263F41800]);
          [v57 setCommuteWindow:v58];

          if (v28)
          {
            [v28 doubleValue];
            double v60 = v59;
            id v61 = [v57 commuteWindow];
            [v61 setStartTime:v60];
          }
          id v88 = v43;
          if (v99)
          {
            uint64_t v62 = [v99 unsignedLongLongValue];
            double v63 = [v57 commuteWindow];
            [v63 setDuration:v62];
          }
          if (v98)
          {
            uint64_t v64 = [v98 unsignedLongLongValue];
            id v65 = [v57 commuteWindow];
            [v65 setPredictedExitTime:v64];
          }
          double v66 = objc_msgSend(v57, "commuteWindow", v86);
          [v66 setEndReason:a6];

          if (v97)
          {
            uint64_t v67 = [v97 unsignedLongLongValue];
            id v68 = [v57 commuteWindow];
            [v68 setNumberOfAlertingResponses:v67];
          }
          if (v96)
          {
            uint64_t v69 = [v96 unsignedLongLongValue];
            long long v70 = [v57 commuteWindow];
            [v70 setNumberOfDoomRoutingRequests:v69];
          }
          long long v71 = [v57 commuteWindow];
          long long v72 = [v71 predictedDestinations];

          if (!v72)
          {
            long long v73 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v100, "count"));
            uint64_t v74 = [v57 commuteWindow];
            [v74 setPredictedDestinations:v73];
          }
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          id v75 = v100;
          uint64_t v76 = [v75 countByEnumeratingWithState:&v104 objects:v115 count:16];
          if (v76)
          {
            uint64_t v77 = v76;
            uint64_t v78 = *(void *)v105;
            do
            {
              for (uint64_t j = 0; j != v77; ++j)
              {
                if (*(void *)v105 != v78) {
                  objc_enumerationMutation(v75);
                }
                uint64_t v80 = *(void **)(*((void *)&v104 + 1) + 8 * j);
                long long v81 = [v57 commuteWindow];
                id v82 = [v81 predictedDestinations];
                id v83 = (void *)[v80 copy];
                [v82 addObject:v83];
              }
              uint64_t v77 = [v75 countByEnumeratingWithState:&v104 objects:v115 count:16];
            }
            while (v77);
          }

          if (v91) {
            objc_msgSend(v57, "addLogMsgState:");
          }
          char v28 = v101;
          id v18 = v93;
          id v22 = v94;
          id v43 = v88;
          id v19 = v89;
          id v30 = v92;
          if (v90) {
            objc_msgSend(v57, "addLogMsgState:");
          }
          id v84 = +[GEOAPStateFactory sharedFactory];
          v102[0] = MEMORY[0x263EF8330];
          v102[1] = 3221225472;
          v102[2] = __228__GEOAPPortal_captureCommuteWindowWithStartTime_duration_predictedExitTime_endReason_numberOfAlertingResponses_numberOfDoomRoutingRequests_predictedDestinations_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v102[3] = &unk_265345680;
          id v103 = v57;
          id v85 = v57;
          [v84 sessionStateForType:7 callback:v102];

          id v52 = v87;
        }
        v24[2](v24);

        goto LABEL_17;
      }
    }
LABEL_16:
    v24[2](v24);
LABEL_17:

    goto LABEL_18;
  }
  id v26 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    int v27 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v118 = v27;
    _os_log_impl(&dword_24FE56000, v26, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v24[2](v24);
  char v28 = v101;
LABEL_18:
}

void __228__GEOAPPortal_captureCommuteWindowWithStartTime_duration_predictedExitTime_endReason_numberOfAlertingResponses_numberOfDoomRoutingRequests_predictedDestinations_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __228__GEOAPPortal_captureCommuteWindowWithStartTime_duration_predictedExitTime_endReason_numberOfAlertingResponses_numberOfDoomRoutingRequests_predictedDestinations_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_281()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191A = [v6 containsObject:v8];
}

void __228__GEOAPPortal_captureCommuteWindowWithStartTime_duration_predictedExitTime_endReason_numberOfAlertingResponses_numberOfDoomRoutingRequests_predictedDestinations_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureDailyUseSummaryWithUseEvents:(id)a3 summaryPeriod:(int)a4 summaryDate:(id)a5 firstEventDate:(id)a6 user_mapsUseLastDate:(id)a7
{
}

+ (void)captureDailyUseSummaryWithUseEvents:(id)a3 summaryPeriod:(int)a4 summaryDate:(id)a5 firstEventDate:(id)a6 user_mapsUseLastDate:(id)a7 additionalStates:(id)a8 providedDropRate:(id)a9 completionQueue:(id)a10 completionBlock:(id)a11
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  id v86 = a3;
  id v16 = a5;
  id v17 = a6;
  id v89 = a7;
  id v88 = a8;
  id v87 = a9;
  id v18 = a10;
  id v19 = a11;
  v100[0] = MEMORY[0x263EF8330];
  v100[1] = 3221225472;
  v100[2] = __179__GEOAPPortal_captureDailyUseSummaryWithUseEvents_summaryPeriod_summaryDate_firstEventDate_user_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v100[3] = &unk_265345530;
  id v20 = v19;
  id v102 = v20;
  id v21 = v18;
  id v101 = v21;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v100);
  id v23 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (a7)
  {
    int v24 = GEOGetGEOAPPortalAnalyticsLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      int v25 = GEOApplicationIdentifierOrProcessName();
      *(_DWORD *)buf = 138412290;
      long long v106 = v25;
      _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
    }
    v22[2](v22);
    id v26 = v89;
    goto LABEL_9;
  }
  if (qword_26B201A70 != -1) {
    dispatch_once(&qword_26B201A70, &__block_literal_global_290);
  }
  id v26 = v89;
  if (!byte_26B20191B)
  {
    double v29 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v30 = [v29 countryCode];

    id v84 = (void *)v30;
    int v31 = [a1 isDisabledEvent:@"dailyUseSummary" inCountry:v30];
    if (_GEOConfigHasValue())
    {
      char v28 = v87;
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      char v28 = v87;
      if (!v31)
      {
LABEL_13:
        int v27 = v88;
        if (v28) {
          [v28 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v32 == 0.0 || v32 < (double)arc4random() / 4294967300.0)
        {
          id v81 = v20;
          char v33 = +[GEOAPStateFactory sharedFactory];
          double v34 = [v33 stateForType:48];
          double v35 = (void *)[v34 copy];

          if (v89)
          {
            [v89 doubleValue];
            double v37 = v36;
            uint64_t v38 = [v35 user];
            [v38 setMapsUseLastDate:v37];
          }
          uint64_t v80 = v35;
          uint64_t v77 = v17;
          id v78 = v16;
          if ([v88 count])
          {
            uint64_t v39 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v88, "count"));
            long long v96 = 0u;
            long long v97 = 0u;
            long long v98 = 0u;
            long long v99 = 0u;
            id v40 = v88;
            uint64_t v41 = [v40 countByEnumeratingWithState:&v96 objects:v104 count:16];
            if (v41)
            {
              uint64_t v42 = v41;
              uint64_t v43 = *(void *)v97;
              do
              {
                for (uint64_t i = 0; i != v42; ++i)
                {
                  if (*(void *)v97 != v43) {
                    objc_enumerationMutation(v40);
                  }
                  uint64_t v45 = *(void **)(*((void *)&v96 + 1) + 8 * i);
                  uint64_t v46 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v45, "stateType"));
                  [v39 setObject:v45 forKeyedSubscript:v46];
                }
                uint64_t v42 = [v40 countByEnumeratingWithState:&v96 objects:v104 count:16];
              }
              while (v42);
            }

            id v82 = (void *)[v39 copy];
            id v17 = v77;
            id v16 = v78;
            int v27 = v88;
            id v26 = v89;
            char v28 = v87;
          }
          else
          {
            id v82 = 0;
          }
          unint64_t v47 = NSNumber;
          id v48 = +[GEOAPStateFactory sharedFactory];
          uint64_t v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 49));

          unint64_t v50 = v82;
          uint64_t v76 = (void *)v49;
          int v51 = [v82 objectForKeyedSubscript:v49];
          id v52 = v51;
          if (v51)
          {
            id v79 = v51;
          }
          else
          {
            uint64_t v53 = +[GEOAPStateFactory sharedFactory];
            id v79 = [v53 stateForType:49];

            unint64_t v50 = v82;
          }
          id v20 = v81;

          if ((GEOConfigGetBOOL() & 1) == 0)
          {
            id v83 = v50;
            id v54 = objc_alloc_init(MEMORY[0x263F417E8]);
            [v54 setEventType:50];
            id v55 = objc_alloc_init(MEMORY[0x263F41808]);
            [v54 setDailyUseSummary:v55];

            double v56 = [v54 dailyUseSummary];
            id v57 = [v56 useEvents];

            if (!v57)
            {
              id v58 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v86, "count"));
              double v59 = [v54 dailyUseSummary];
              [v59 setUseEvents:v58];
            }
            long long v94 = 0u;
            long long v95 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            id v60 = v86;
            uint64_t v61 = [v60 countByEnumeratingWithState:&v92 objects:v103 count:16];
            if (v61)
            {
              uint64_t v62 = v61;
              uint64_t v63 = *(void *)v93;
              do
              {
                for (uint64_t j = 0; j != v62; ++j)
                {
                  if (*(void *)v93 != v63) {
                    objc_enumerationMutation(v60);
                  }
                  id v65 = *(void **)(*((void *)&v92 + 1) + 8 * j);
                  double v66 = [v54 dailyUseSummary];
                  uint64_t v67 = [v66 useEvents];
                  id v68 = (void *)[v65 copy];
                  [v67 addObject:v68];
                }
                uint64_t v62 = [v60 countByEnumeratingWithState:&v92 objects:v103 count:16];
              }
              while (v62);
            }

            uint64_t v69 = [v54 dailyUseSummary];
            [v69 setSummaryPeriod:a4];

            long long v70 = [v54 dailyUseSummary];
            id v16 = v78;
            [v70 setSummaryDate:v78];

            id v17 = v77;
            if (v77)
            {
              [v77 doubleValue];
              +[GEOAPFuzzers dayResolution:](GEOAPFuzzers, "dayResolution:");
              double v72 = v71;
              long long v73 = [v54 dailyUseSummary];
              [v73 setFirstEventDate:v72];
            }
            id v26 = v89;
            id v20 = v81;
            if (v79) {
              objc_msgSend(v54, "addLogMsgState:");
            }
            if (v80) {
              objc_msgSend(v54, "addLogMsgState:");
            }
            uint64_t v74 = +[GEOAPStateFactory sharedFactory];
            v90[0] = MEMORY[0x263EF8330];
            v90[1] = 3221225472;
            v90[2] = __179__GEOAPPortal_captureDailyUseSummaryWithUseEvents_summaryPeriod_summaryDate_firstEventDate_user_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
            v90[3] = &unk_265345680;
            id v91 = v54;
            id v75 = v54;
            [v74 sessionStateForType:2 callback:v90];

            char v28 = v87;
            int v27 = v88;
            unint64_t v50 = v83;
          }
          v22[2](v22);
        }
        else
        {
          v22[2](v22);
        }
        goto LABEL_54;
      }
    }
    v22[2](v22);
    int v27 = v88;
LABEL_54:

    goto LABEL_10;
  }
  v22[2](v22);
LABEL_9:
  char v28 = v87;
  int v27 = v88;
LABEL_10:
}

void __179__GEOAPPortal_captureDailyUseSummaryWithUseEvents_summaryPeriod_summaryDate_firstEventDate_user_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __179__GEOAPPortal_captureDailyUseSummaryWithUseEvents_summaryPeriod_summaryDate_firstEventDate_user_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_288()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191B = [v6 containsObject:v8];
}

void __179__GEOAPPortal_captureDailyUseSummaryWithUseEvents_summaryPeriod_summaryDate_firstEventDate_user_mapsUseLastDate_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTelemetricWithTelemetricEntitys:(id)a3
{
}

+ (void)captureTelemetricWithTelemetricEntitys:(id)a3 additionalStates:(id)a4 providedDropRate:(id)a5 completionQueue:(id)a6 completionBlock:(id)a7
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  v99[0] = MEMORY[0x263EF8330];
  v99[1] = 3221225472;
  v99[2] = __120__GEOAPPortal_captureTelemetricWithTelemetricEntitys_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v99[3] = &unk_265345530;
  id v17 = v16;
  id v101 = v17;
  id v18 = v15;
  id v100 = v18;
  id v19 = (void (**)(void))MEMORY[0x25337B980](v99);
  id v20 = +[GEOAPServiceManager sharedManager];
  int v21 = [v20 eventCollectionIsDisabledForCurrentProcess];

  if (!v21)
  {
    if (qword_26B201A78 != -1) {
      dispatch_once(&qword_26B201A78, &__block_literal_global_298);
    }
    if (byte_26B20191C) {
      goto LABEL_8;
    }
    id v88 = v13;
    int v24 = [MEMORY[0x263F41770] sharedConfiguration];
    int v25 = [v24 countryCode];

    int v26 = [a1 isDisabledEvent:@"telemetric" inCountry:v25];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_16;
      }
    }
    else if (v26)
    {
      goto LABEL_16;
    }
    int v27 = +[GEOAPServiceManager sharedManager];
    char v28 = [v27 platformDiagAndUsage];

    if (v28)
    {
      if (v14) {
        [v14 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      if (v29 == 0.0 || v29 < (double)arc4random() / 4294967300.0)
      {
        id v85 = v25;
        id v86 = v14;
        id v81 = v17;
        id v82 = v12;
        if ([v13 count])
        {
          uint64_t v30 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v13, "count"));
          long long v95 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          id v31 = v13;
          uint64_t v32 = [v31 countByEnumeratingWithState:&v95 objects:v103 count:16];
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = *(void *)v96;
            do
            {
              for (uint64_t i = 0; i != v33; ++i)
              {
                if (*(void *)v96 != v34) {
                  objc_enumerationMutation(v31);
                }
                double v36 = *(void **)(*((void *)&v95 + 1) + 8 * i);
                double v37 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v36, "stateType"));
                [v30 setObject:v36 forKeyedSubscript:v37];
              }
              uint64_t v33 = [v31 countByEnumeratingWithState:&v95 objects:v103 count:16];
            }
            while (v33);
          }

          uint64_t v38 = (void *)[v30 copy];
          id v17 = v81;
          id v12 = v82;
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v39 = NSNumber;
        id v40 = +[GEOAPStateFactory sharedFactory];
        uint64_t v41 = objc_msgSend(v39, "numberWithInt:", objc_msgSend(v40, "logMsgStateTypeForType:", 30));

        id v87 = v38;
        uint64_t v42 = [v38 objectForKeyedSubscript:v41];
        uint64_t v43 = v42;
        id v14 = v86;
        if (v42)
        {
          id v84 = v42;
          unint64_t v44 = 0x265344000;
        }
        else
        {
          unint64_t v44 = 0x265344000uLL;
          uint64_t v45 = +[GEOAPStateFactory sharedFactory];
          id v84 = [v45 stateForType:30];
        }
        uint64_t v46 = NSNumber;
        [*(id *)(v44 + 3384) sharedFactory];
        id v48 = v47 = v44;
        uint64_t v49 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 0));

        id v79 = (void *)v49;
        unint64_t v50 = [v87 objectForKeyedSubscript:v49];
        int v51 = v50;
        if (v50)
        {
          id v83 = v50;
        }
        else
        {
          id v52 = [*(id *)(v47 + 3384) sharedFactory];
          id v83 = [v52 stateForType:0];
        }
        uint64_t v53 = NSNumber;
        id v54 = [*(id *)(v47 + 3384) sharedFactory];
        id v55 = objc_msgSend(v53, "numberWithInt:", objc_msgSend(v54, "logMsgStateTypeForType:", 3));

        double v56 = [v87 objectForKeyedSubscript:v55];
        id v57 = v56;
        if (v56)
        {
          id v58 = v56;
        }
        else
        {
          [*(id *)(v47 + 3384) sharedFactory];
          id v60 = v59 = v55;
          id v58 = [v60 stateForType:3];

          id v55 = v59;
        }
        id v13 = v88;
        int v25 = v85;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v78 = v55;
          id v80 = v58;
          id v61 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v61 setEventType:24];
          id v62 = objc_alloc_init(MEMORY[0x263F41918]);
          [v61 setTelemetric:v62];

          uint64_t v63 = [v61 telemetric];
          uint64_t v64 = [v63 telemetricEntitys];

          if (!v64)
          {
            id v65 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v12, "count"));
            double v66 = [v61 telemetric];
            [v66 setTelemetricEntitys:v65];
          }
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          id v67 = v12;
          uint64_t v68 = [v67 countByEnumeratingWithState:&v91 objects:v102 count:16];
          if (v68)
          {
            uint64_t v69 = v68;
            uint64_t v70 = *(void *)v92;
            do
            {
              for (uint64_t j = 0; j != v69; ++j)
              {
                if (*(void *)v92 != v70) {
                  objc_enumerationMutation(v67);
                }
                double v72 = *(void **)(*((void *)&v91 + 1) + 8 * j);
                long long v73 = [v61 telemetric];
                uint64_t v74 = [v73 telemetricEntitys];
                id v75 = (void *)[v72 copy];
                [v74 addObject:v75];
              }
              uint64_t v69 = [v67 countByEnumeratingWithState:&v91 objects:v102 count:16];
            }
            while (v69);
          }

          if (v83) {
            objc_msgSend(v61, "addLogMsgState:");
          }
          id v17 = v81;
          id v12 = v82;
          int v25 = v85;
          id v14 = v86;
          if (v80) {
            objc_msgSend(v61, "addLogMsgState:");
          }
          if (v84) {
            [v61 addLogMsgState:v84];
          }
          uint64_t v76 = +[GEOAPStateFactory sharedFactory];
          v89[0] = MEMORY[0x263EF8330];
          v89[1] = 3221225472;
          v89[2] = __120__GEOAPPortal_captureTelemetricWithTelemetricEntitys_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v89[3] = &unk_265345680;
          id v90 = v61;
          id v77 = v61;
          [v76 sessionStateForType:7 callback:v89];

          id v13 = v88;
          id v55 = v78;
          id v58 = v80;
        }
        v19[2](v19);

        goto LABEL_58;
      }
    }
LABEL_16:
    v19[2](v19);
LABEL_58:

    goto LABEL_9;
  }
  id v22 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    id v23 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v105 = v23;
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v19[2](v19);
LABEL_9:
}

void __120__GEOAPPortal_captureTelemetricWithTelemetricEntitys_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __120__GEOAPPortal_captureTelemetricWithTelemetricEntitys_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_296()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191C = [v6 containsObject:v8];
}

void __120__GEOAPPortal_captureTelemetricWithTelemetricEntitys_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTripDepartureWithTransportMode:(int)a3 distanceFromOrigin:(id)a4 timeFromOrigin:(id)a5
{
}

+ (void)captureTripDepartureWithTransportMode:(int)a3 distanceFromOrigin:(id)a4 timeFromOrigin:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  id v77 = a4;
  id v14 = a5;
  id v15 = a6;
  id v75 = a7;
  id v16 = a8;
  id v17 = a9;
  v85[0] = MEMORY[0x263EF8330];
  v85[1] = 3221225472;
  v85[2] = __153__GEOAPPortal_captureTripDepartureWithTransportMode_distanceFromOrigin_timeFromOrigin_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v85[3] = &unk_265345530;
  id v18 = v17;
  id v87 = v18;
  id v19 = v16;
  id v86 = v19;
  id v20 = (void (**)(void))MEMORY[0x25337B980](v85);
  int v21 = +[GEOAPServiceManager sharedManager];
  int v22 = [v21 eventCollectionIsDisabledForCurrentProcess];

  if (!v22)
  {
    if (qword_26B201A80 != -1) {
      dispatch_once(&qword_26B201A80, &__block_literal_global_305);
    }
    int v26 = v75;
    int v25 = v77;
    if (byte_26B20191D)
    {
      v20[2](v20);
      goto LABEL_48;
    }
    id v73 = v18;
    int v27 = [MEMORY[0x263F41770] sharedConfiguration];
    char v28 = [v27 countryCode];

    int v29 = [a1 isDisabledEvent:@"tripDeparture" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        if (v75) {
          [v75 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v30 != 0.0 && v30 >= (double)arc4random() / 4294967300.0)
        {
          v20[2](v20);
LABEL_47:

          goto LABEL_48;
        }
        double v72 = v14;
        id v71 = v15;
        if (objc_msgSend(v15, "count", v28))
        {
          id v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v15, "count"));
          long long v81 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          id v32 = v15;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v81 objects:v88 count:16];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = *(void *)v82;
            do
            {
              for (uint64_t i = 0; i != v34; ++i)
              {
                if (*(void *)v82 != v35) {
                  objc_enumerationMutation(v32);
                }
                double v37 = *(void **)(*((void *)&v81 + 1) + 8 * i);
                uint64_t v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
                [v31 setObject:v37 forKeyedSubscript:v38];
              }
              uint64_t v34 = [v32 countByEnumeratingWithState:&v81 objects:v88 count:16];
            }
            while (v34);
          }

          uint64_t v39 = [v31 copy];
          id v40 = (void *)v39;
          int v26 = v75;
          int v25 = v77;
        }
        else
        {
          id v40 = 0;
        }
        uint64_t v41 = NSNumber;
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        uint64_t v43 = objc_msgSend(v41, "numberWithInt:", objc_msgSend(v42, "logMsgStateTypeForType:", 0));

        unint64_t v44 = [v40 objectForKeyedSubscript:v43];
        uint64_t v45 = v44;
        if (v44)
        {
          id v78 = v44;
          unint64_t v46 = 0x265344000;
        }
        else
        {
          unint64_t v46 = 0x265344000uLL;
          unint64_t v47 = +[GEOAPStateFactory sharedFactory];
          id v78 = [v47 stateForType:0];
        }
        id v48 = NSNumber;
        [*(id *)(v46 + 3384) sharedFactory];
        unint64_t v50 = v49 = v46;
        int v51 = objc_msgSend(v48, "numberWithInt:", objc_msgSend(v50, "logMsgStateTypeForType:", 3));

        id v52 = [v40 objectForKeyedSubscript:v51];
        uint64_t v53 = v52;
        if (v52)
        {
          id v76 = v52;
        }
        else
        {
          [*(id *)(v49 + 3384) sharedFactory];
          v55 = id v54 = v51;
          id v76 = [v55 stateForType:3];

          int v51 = v54;
        }
        id v15 = v71;
        id v14 = v72;
        char v28 = v68;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          uint64_t v69 = v51;
          double v56 = v40;
          id v57 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v57 setEventType:40];
          id v58 = objc_alloc_init(MEMORY[0x263F41950]);
          [v57 setTripDepartureFeedback:v58];

          double v59 = [v57 tripDepartureFeedback];
          [v59 setTransportMode:a3];

          if (v25)
          {
            [v25 doubleValue];
            double v61 = v60;
            id v62 = [v57 tripDepartureFeedback];
            [v62 setDistanceFromOrigin:v61];
          }
          if (v72)
          {
            [v72 doubleValue];
            double v64 = v63;
            id v65 = [v57 tripDepartureFeedback];
            [v65 setTimeFromOrigin:v64];
          }
          if (v78) {
            objc_msgSend(v57, "addLogMsgState:");
          }
          if (v76) {
            objc_msgSend(v57, "addLogMsgState:");
          }
          double v66 = +[GEOAPStateFactory sharedFactory];
          v79[0] = MEMORY[0x263EF8330];
          v79[1] = 3221225472;
          v79[2] = __153__GEOAPPortal_captureTripDepartureWithTransportMode_distanceFromOrigin_timeFromOrigin_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v79[3] = &unk_265345680;
          id v80 = v57;
          id v67 = v57;
          [v66 sessionStateForType:7 callback:v79];

          id v14 = v72;
          id v40 = v56;
          int v51 = v70;
        }
        v20[2](v20);

LABEL_46:
        id v18 = v73;
        goto LABEL_47;
      }
    }
    else if (!v29)
    {
      goto LABEL_11;
    }
    v20[2](v20);
    goto LABEL_46;
  }
  id v23 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    int v24 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v90 = v24;
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v20[2](v20);
  int v26 = v75;
  int v25 = v77;
LABEL_48:
}

void __153__GEOAPPortal_captureTripDepartureWithTransportMode_distanceFromOrigin_timeFromOrigin_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __153__GEOAPPortal_captureTripDepartureWithTransportMode_distanceFromOrigin_timeFromOrigin_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_303()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191D = [v6 containsObject:v8];
}

void __153__GEOAPPortal_captureTripDepartureWithTransportMode_distanceFromOrigin_timeFromOrigin_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureRideBookingWithRideBookingSessionId:(id)a3 statusIssue:(int)a4 endState:(int)a5 endView:(int)a6 rideAppId:(id)a7 rideAppVersion:(id)a8 originBlurred:(id)a9 destinationBlurred:(id)a10 exploredOtherOptions:(id)a11 distanceToPickupInMeters:(id)a12 paymentIsApplePay:(id)a13 numberOfAvailableExtensions:(id)a14 switchedApp:(id)a15 comparedRideOptions:(id)a16 showedSurgePricingAlert:(id)a17 durationOfSessionInSeconds:(id)a18 installedApp:(id)a19 timestamp:(id)a20 unavailable:(id)a21 movedPickupLocation:(id)a22 errorMessages:(id)a23 intentResponseFailures:(id)a24
{
  objc_msgSend(a1, "captureRideBookingWithRideBookingSessionId:statusIssue:endState:endView:rideAppId:rideAppVersion:originBlurred:destinationBlurred:exploredOtherOptions:distanceToPickupInMeters:paymentIsApplePay:numberOfAvailableExtensions:switchedApp:comparedRideOptions:showedSurgePricingAlert:durationOfSessionInSeconds:installedApp:timestamp:unavailable:movedPickupLocation:errorMessages:intentResponseFailures:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, *(void *)&a4, *(void *)&a5, *(void *)&a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    0,
    0,
    0,
    0);
}

+ (void)captureRideBookingWithRideBookingSessionId:(id)a3 statusIssue:(int)a4 endState:(int)a5 endView:(int)a6 rideAppId:(id)a7 rideAppVersion:(id)a8 originBlurred:(id)a9 destinationBlurred:(id)a10 exploredOtherOptions:(id)a11 distanceToPickupInMeters:(id)a12 paymentIsApplePay:(id)a13 numberOfAvailableExtensions:(id)a14 switchedApp:(id)a15 comparedRideOptions:(id)a16 showedSurgePricingAlert:(id)a17 durationOfSessionInSeconds:(id)a18 installedApp:(id)a19 timestamp:(id)a20 unavailable:(id)a21 movedPickupLocation:(id)a22 errorMessages:(id)a23 intentResponseFailures:(id)a24 additionalStates:(id)a25 providedDropRate:(id)a26 completionQueue:(id)a27 completionBlock:(id)a28
{
  uint64_t v211 = *MEMORY[0x263EF8340];
  id v184 = a3;
  id v30 = a7;
  id v31 = a8;
  id v183 = a9;
  id v182 = a10;
  id v181 = a11;
  id v180 = a12;
  id v32 = a13;
  id v33 = a14;
  id v34 = a15;
  id v35 = a16;
  id v179 = a17;
  id v178 = a18;
  id v177 = a19;
  id v176 = a20;
  id v175 = a21;
  id v174 = a22;
  id v186 = a23;
  id v185 = a24;
  id v188 = a25;
  id v187 = a26;
  id v36 = a27;
  id v37 = a28;
  v203[0] = MEMORY[0x263EF8330];
  v203[1] = 3221225472;
  v203[2] = __478__GEOAPPortal_captureRideBookingWithRideBookingSessionId_statusIssue_endState_endView_rideAppId_rideAppVersion_originBlurred_destinationBlurred_exploredOtherOptions_distanceToPickupInMeters_paymentIsApplePay_numberOfAvailableExtensions_switchedApp_comparedRideOptions_showedSurgePricingAlert_durationOfSessionInSeconds_installedApp_timestamp_unavailable_movedPickupLocation_errorMessages_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v203[3] = &unk_265345530;
  id v173 = v37;
  id v205 = v173;
  id v38 = v36;
  id v204 = v38;
  uint64_t v39 = (void (**)(void))MEMORY[0x25337B980](v203);
  id v40 = +[GEOAPServiceManager sharedManager];
  int v41 = [v40 eventCollectionIsDisabledForCurrentProcess];

  if (!v41)
  {
    if (qword_26B201A88 != -1) {
      dispatch_once(&qword_26B201A88, &__block_literal_global_312);
    }
    uint64_t v45 = v188;
    if (byte_26B20191E)
    {
      v39[2](v39);
      goto LABEL_100;
    }
    uint64_t v172 = v32;
    id v166 = v31;
    unint64_t v46 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v47 = [v46 countryCode];

    id v48 = (void *)v47;
    int v49 = [a1 isDisabledEvent:@"rideBooking" inCountry:v47];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if (!v49)
    {
LABEL_11:
      id v31 = v166;
      id v165 = v33;
      if (v187) {
        [v187 doubleValue];
      }
      else {
        GEOConfigGetDouble();
      }
      id v32 = v172;
      if (v50 == 0.0 || v50 < (double)arc4random() / 4294967300.0)
      {
        double v156 = v48;
        id v164 = v30;
        id v157 = v35;
        id v158 = v34;
        if ([v188 count])
        {
          int v51 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v188, "count"));
          long long v199 = 0u;
          long long v200 = 0u;
          long long v201 = 0u;
          long long v202 = 0u;
          id v52 = v188;
          uint64_t v53 = [v52 countByEnumeratingWithState:&v199 objects:v208 count:16];
          if (v53)
          {
            uint64_t v54 = v53;
            uint64_t v55 = *(void *)v200;
            do
            {
              for (uint64_t i = 0; i != v54; ++i)
              {
                if (*(void *)v200 != v55) {
                  objc_enumerationMutation(v52);
                }
                id v57 = *(void **)(*((void *)&v199 + 1) + 8 * i);
                id v58 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v57, "stateType"));
                [v51 setObject:v57 forKeyedSubscript:v58];
              }
              uint64_t v54 = [v52 countByEnumeratingWithState:&v199 objects:v208 count:16];
            }
            while (v54);
          }

          double v59 = (void *)[v51 copy];
          id v31 = v166;
          id v35 = v157;
          id v34 = v158;
        }
        else
        {
          double v59 = 0;
        }
        double v60 = NSNumber;
        double v61 = +[GEOAPStateFactory sharedFactory];
        id v62 = objc_msgSend(v60, "numberWithInt:", objc_msgSend(v61, "logMsgStateTypeForType:", 2));

        id v171 = v59;
        double v63 = [v59 objectForKeyedSubscript:v62];
        double v64 = v63;
        if (v63)
        {
          id v163 = v63;
        }
        else
        {
          id v65 = +[GEOAPStateFactory sharedFactory];
          id v163 = [v65 stateForType:2];
        }
        double v66 = NSNumber;
        id v67 = +[GEOAPStateFactory sharedFactory];
        uint64_t v68 = objc_msgSend(v66, "numberWithInt:", objc_msgSend(v67, "logMsgStateTypeForType:", 30));

        uint64_t v69 = [v59 objectForKeyedSubscript:v68];
        uint64_t v70 = v69;
        if (v69)
        {
          id v162 = v69;
        }
        else
        {
          id v71 = +[GEOAPStateFactory sharedFactory];
          id v162 = [v71 stateForType:30];
        }
        double v72 = NSNumber;
        id v73 = +[GEOAPStateFactory sharedFactory];
        uint64_t v74 = objc_msgSend(v72, "numberWithInt:", objc_msgSend(v73, "logMsgStateTypeForType:", 0));

        id v75 = [v59 objectForKeyedSubscript:v74];
        id v76 = v75;
        if (v75)
        {
          id v161 = v75;
        }
        else
        {
          id v77 = +[GEOAPStateFactory sharedFactory];
          id v161 = [v77 stateForType:0];
        }
        id v78 = NSNumber;
        id v79 = +[GEOAPStateFactory sharedFactory];
        id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 3));

        long long v81 = [v59 objectForKeyedSubscript:v80];
        long long v82 = v81;
        if (v81)
        {
          id v160 = v81;
        }
        else
        {
          long long v83 = +[GEOAPStateFactory sharedFactory];
          id v160 = [v83 stateForType:3];
        }
        long long v84 = NSNumber;
        id v85 = +[GEOAPStateFactory sharedFactory];
        uint64_t v86 = objc_msgSend(v84, "numberWithInt:", objc_msgSend(v85, "logMsgStateTypeForType:", 8));

        id v87 = v59;
        double v155 = (void *)v86;
        id v88 = [v59 objectForKeyedSubscript:v86];
        id v89 = v88;
        if (v88)
        {
          id v159 = v88;
        }
        else
        {
          id v90 = +[GEOAPStateFactory sharedFactory];
          id v159 = [v90 stateForType:8];

          id v87 = v59;
        }
        id v30 = v164;
        id v33 = v165;
        uint64_t v45 = v188;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v91 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v91 setEventType:18];
          id v92 = objc_alloc_init(MEMORY[0x263F418F0]);
          [v91 setRideBookingSession:v92];

          long long v93 = [v91 rideBookingSession];
          [v93 setRideBookingSessionId:v184];

          long long v94 = [v91 rideBookingSession];
          [v94 setStatusIssue:a4];

          long long v95 = [v91 rideBookingSession];
          [v95 setEndState:a5];

          long long v96 = [v91 rideBookingSession];
          [v96 setEndView:a6];

          long long v97 = [v91 rideBookingSession];
          [v97 setRideAppId:v164];

          long long v98 = [v91 rideBookingSession];
          [v98 setRideAppVersion:v31];

          long long v99 = [v91 rideBookingSession];
          [v99 setOriginBlurred:v183];

          id v100 = [v91 rideBookingSession];
          [v100 setDestinationBlurred:v182];

          if (v181)
          {
            uint64_t v101 = [v181 BOOLValue];
            id v102 = [v91 rideBookingSession];
            [v102 setExploredOtherOptions:v101];
          }
          if (v180)
          {
            [v180 doubleValue];
            double v104 = v103;
            long long v105 = [v91 rideBookingSession];
            [v105 setDistanceToPickupInMeters:v104];
          }
          if (v172)
          {
            uint64_t v106 = [v172 BOOLValue];
            uint64_t v107 = [v91 rideBookingSession];
            [v107 setPaymentIsApplePay:v106];
          }
          if (v165)
          {
            uint64_t v108 = [v165 unsignedLongLongValue];
            long long v109 = [v91 rideBookingSession];
            [v109 setNumberOfAvailableExtensions:v108];
          }
          if (v34)
          {
            uint64_t v110 = [v34 BOOLValue];
            long long v111 = [v91 rideBookingSession];
            [v111 setSwitchedApp:v110];
          }
          if (v35)
          {
            uint64_t v112 = [v35 BOOLValue];
            id v113 = [v91 rideBookingSession];
            [v113 setComparedRideOptions:v112];
          }
          if (v179)
          {
            uint64_t v114 = [v179 BOOLValue];
            long long v115 = [v91 rideBookingSession];
            [v115 setShowedSurgePricingAlert:v114];
          }
          if (v178)
          {
            [v178 doubleValue];
            double v117 = v116;
            id v118 = [v91 rideBookingSession];
            [v118 setDurationOfSessionInSeconds:v117];
          }
          if (v177)
          {
            uint64_t v119 = [v177 BOOLValue];
            double v120 = [v91 rideBookingSession];
            [v120 setInstalledApp:v119];
          }
          if (v176)
          {
            uint64_t v121 = [v176 integerValue];
            double v122 = [v91 rideBookingSession];
            [v122 setTimestamp:v121];
          }
          if (v175)
          {
            uint64_t v123 = [v175 BOOLValue];
            long long v124 = [v91 rideBookingSession];
            [v124 setUnavailable:v123];
          }
          if (v174)
          {
            uint64_t v125 = [v174 BOOLValue];
            double v126 = [v91 rideBookingSession];
            [v126 setMovedPickupLocation:v125];
          }
          long long v127 = [v91 rideBookingSession];
          id v128 = [v127 errorMessages];

          if (!v128)
          {
            double v129 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v186, "count"));
            double v130 = [v91 rideBookingSession];
            [v130 setErrorMessages:v129];
          }
          long long v197 = 0u;
          long long v198 = 0u;
          long long v195 = 0u;
          long long v196 = 0u;
          id v131 = v186;
          uint64_t v132 = [v131 countByEnumeratingWithState:&v195 objects:v207 count:16];
          if (v132)
          {
            uint64_t v133 = v132;
            uint64_t v134 = *(void *)v196;
            do
            {
              for (uint64_t j = 0; j != v133; ++j)
              {
                if (*(void *)v196 != v134) {
                  objc_enumerationMutation(v131);
                }
                long long v136 = *(void **)(*((void *)&v195 + 1) + 8 * j);
                uint64_t v137 = [v91 rideBookingSession];
                long long v138 = [v137 errorMessages];
                uint64_t v139 = (void *)[v136 copy];
                [v138 addObject:v139];
              }
              uint64_t v133 = [v131 countByEnumeratingWithState:&v195 objects:v207 count:16];
            }
            while (v133);
          }

          id v140 = [v91 rideBookingSession];
          uint64_t v141 = [v140 intentResponseFailures];

          if (!v141)
          {
            id v142 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v185, "count"));
            uint64_t v143 = [v91 rideBookingSession];
            [v143 setIntentResponseFailures:v142];
          }
          long long v193 = 0u;
          long long v194 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          id v144 = v185;
          uint64_t v145 = [v144 countByEnumeratingWithState:&v191 objects:v206 count:16];
          if (v145)
          {
            uint64_t v146 = v145;
            uint64_t v147 = *(void *)v192;
            do
            {
              for (uint64_t k = 0; k != v146; ++k)
              {
                if (*(void *)v192 != v147) {
                  objc_enumerationMutation(v144);
                }
                uint64_t v149 = *(void **)(*((void *)&v191 + 1) + 8 * k);
                uint64_t v150 = [v91 rideBookingSession];
                uint64_t v151 = [v150 intentResponseFailures];
                id v152 = (void *)[v149 copy];
                [v151 addObject:v152];
              }
              uint64_t v146 = [v144 countByEnumeratingWithState:&v191 objects:v206 count:16];
            }
            while (v146);
          }

          if (v163) {
            objc_msgSend(v91, "addLogMsgState:");
          }
          id v30 = v164;
          id v33 = v165;
          id v31 = v166;
          id v35 = v157;
          id v34 = v158;
          uint64_t v45 = v188;
          if (v161) {
            objc_msgSend(v91, "addLogMsgState:");
          }
          if (v160) {
            objc_msgSend(v91, "addLogMsgState:");
          }
          if (v162) {
            [v91 addLogMsgState:v162];
          }
          if (v159) {
            objc_msgSend(v91, "addLogMsgState:");
          }
          id v153 = +[GEOAPStateFactory sharedFactory];
          v189[0] = MEMORY[0x263EF8330];
          v189[1] = 3221225472;
          v189[2] = __478__GEOAPPortal_captureRideBookingWithRideBookingSessionId_statusIssue_endState_endView_rideAppId_rideAppVersion_originBlurred_destinationBlurred_exploredOtherOptions_distanceToPickupInMeters_paymentIsApplePay_numberOfAvailableExtensions_switchedApp_comparedRideOptions_showedSurgePricingAlert_durationOfSessionInSeconds_installedApp_timestamp_unavailable_movedPickupLocation_errorMessages_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v189[3] = &unk_265345680;
          id v154 = v91;
          id v190 = v154;
          [v153 sessionStateForType:7 callback:v189];

          id v87 = v171;
        }
        v39[2](v39);

        id v32 = v172;
        id v48 = v156;
      }
      else
      {
        v39[2](v39);
      }
      goto LABEL_99;
    }
    v39[2](v39);
    id v31 = v166;
    id v32 = v172;
LABEL_99:

    goto LABEL_100;
  }
  id v42 = v32;
  uint64_t v43 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v44 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v210 = v44;
    _os_log_impl(&dword_24FE56000, v43, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v39[2](v39);
  id v32 = v42;
  uint64_t v45 = v188;
LABEL_100:
}

void __478__GEOAPPortal_captureRideBookingWithRideBookingSessionId_statusIssue_endState_endView_rideAppId_rideAppVersion_originBlurred_destinationBlurred_exploredOtherOptions_distanceToPickupInMeters_paymentIsApplePay_numberOfAvailableExtensions_switchedApp_comparedRideOptions_showedSurgePricingAlert_durationOfSessionInSeconds_installedApp_timestamp_unavailable_movedPickupLocation_errorMessages_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __478__GEOAPPortal_captureRideBookingWithRideBookingSessionId_statusIssue_endState_endView_rideAppId_rideAppVersion_originBlurred_destinationBlurred_exploredOtherOptions_distanceToPickupInMeters_paymentIsApplePay_numberOfAvailableExtensions_switchedApp_comparedRideOptions_showedSurgePricingAlert_durationOfSessionInSeconds_installedApp_timestamp_unavailable_movedPickupLocation_errorMessages_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_310()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191E = [v6 containsObject:v8];
}

void __478__GEOAPPortal_captureRideBookingWithRideBookingSessionId_statusIssue_endState_endView_rideAppId_rideAppVersion_originBlurred_destinationBlurred_exploredOtherOptions_distanceToPickupInMeters_paymentIsApplePay_numberOfAvailableExtensions_switchedApp_comparedRideOptions_showedSurgePricingAlert_durationOfSessionInSeconds_installedApp_timestamp_unavailable_movedPickupLocation_errorMessages_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureRideBookedWithRideBookedSessionId:(id)a3 bookedUsingMaps:(id)a4 cancelled:(id)a5 contactedDriver:(id)a6 viewedInProactiveTray:(id)a7 tappedProactiveTrayItem:(id)a8 viewedDetails:(id)a9 invalidVehicleLocation:(id)a10 missingVehicleLocation:(id)a11 rideAppId:(id)a12 rideAppVersion:(id)a13 intentResponseFailures:(id)a14
{
  objc_msgSend(a1, "captureRideBookedWithRideBookedSessionId:bookedUsingMaps:cancelled:contactedDriver:viewedInProactiveTray:tappedProactiveTrayItem:viewedDetails:invalidVehicleLocation:missingVehicleLocation:rideAppId:rideAppVersion:intentResponseFailures:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, 0, 0, 0,
    0);
}

+ (void)captureRideBookedWithRideBookedSessionId:(id)a3 bookedUsingMaps:(id)a4 cancelled:(id)a5 contactedDriver:(id)a6 viewedInProactiveTray:(id)a7 tappedProactiveTrayItem:(id)a8 viewedDetails:(id)a9 invalidVehicleLocation:(id)a10 missingVehicleLocation:(id)a11 rideAppId:(id)a12 rideAppVersion:(id)a13 intentResponseFailures:(id)a14 additionalStates:(id)a15 providedDropRate:(id)a16 completionQueue:(id)a17 completionBlock:(id)a18
{
  uint64_t v170 = *MEMORY[0x263EF8340];
  id v148 = a3;
  id v23 = a4;
  id v24 = a5;
  id v25 = a6;
  id v26 = a7;
  id v27 = a8;
  id v28 = a9;
  id v152 = a10;
  id v147 = a11;
  id v146 = a12;
  id v145 = a13;
  id v149 = a14;
  id v150 = a15;
  id v151 = a16;
  id v29 = a17;
  id v30 = a18;
  v163[0] = MEMORY[0x263EF8330];
  v163[1] = 3221225472;
  v163[2] = __318__GEOAPPortal_captureRideBookedWithRideBookedSessionId_bookedUsingMaps_cancelled_contactedDriver_viewedInProactiveTray_tappedProactiveTrayItem_viewedDetails_invalidVehicleLocation_missingVehicleLocation_rideAppId_rideAppVersion_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v163[3] = &unk_265345530;
  id v144 = v30;
  id v165 = v144;
  id v31 = v29;
  id v164 = v31;
  id v32 = (void (**)(void))MEMORY[0x25337B980](v163);
  id v33 = +[GEOAPServiceManager sharedManager];
  int v34 = [v33 eventCollectionIsDisabledForCurrentProcess];

  if (!v34)
  {
    if (qword_26B201A90 != -1) {
      dispatch_once(&qword_26B201A90, &__block_literal_global_319);
    }
    id v38 = v152;
    if (byte_26B20191F)
    {
      v32[2](v32);
      goto LABEL_84;
    }
    id v140 = v28;
    uint64_t v143 = v27;
    uint64_t v39 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v40 = [v39 countryCode];

    id v41 = a1;
    id v142 = (void *)v40;
    int v42 = [v41 isDisabledEvent:@"rideBooked" inCountry:v40];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        id v27 = v143;
        long long v138 = v25;
        if (v151) {
          [v151 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v28 = v140;
        if (v43 != 0.0 && v43 >= (double)arc4random() / 4294967300.0)
        {
          v32[2](v32);
LABEL_83:

          goto LABEL_84;
        }
        uint64_t v137 = v26;
        long long v136 = v23;
        id v128 = v24;
        if ([v150 count])
        {
          unint64_t v44 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v150, "count"));
          long long v159 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          id v45 = v150;
          uint64_t v46 = [v45 countByEnumeratingWithState:&v159 objects:v167 count:16];
          if (v46)
          {
            uint64_t v47 = v46;
            uint64_t v48 = *(void *)v160;
            do
            {
              for (uint64_t i = 0; i != v47; ++i)
              {
                if (*(void *)v160 != v48) {
                  objc_enumerationMutation(v45);
                }
                double v50 = *(void **)(*((void *)&v159 + 1) + 8 * i);
                int v51 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
                [v44 setObject:v50 forKeyedSubscript:v51];
              }
              uint64_t v47 = [v45 countByEnumeratingWithState:&v159 objects:v167 count:16];
            }
            while (v47);
          }

          id v52 = (void *)[v44 copy];
          id v24 = v128;
        }
        else
        {
          id v52 = 0;
        }
        uint64_t v53 = NSNumber;
        uint64_t v54 = +[GEOAPStateFactory sharedFactory];
        uint64_t v55 = objc_msgSend(v53, "numberWithInt:", objc_msgSend(v54, "logMsgStateTypeForType:", 2));

        double v56 = [v52 objectForKeyedSubscript:v55];
        id v57 = v56;
        if (v56)
        {
          id v135 = v56;
          unint64_t v58 = 0x265344000;
        }
        else
        {
          unint64_t v58 = 0x265344000uLL;
          double v59 = +[GEOAPStateFactory sharedFactory];
          id v135 = [v59 stateForType:2];
        }
        double v60 = NSNumber;
        [*(id *)(v58 + 3384) sharedFactory];
        v62 = unint64_t v61 = v58;
        uint64_t v63 = objc_msgSend(v60, "numberWithInt:", objc_msgSend(v62, "logMsgStateTypeForType:", 30));

        uint64_t v139 = v52;
        uint64_t v132 = (void *)v63;
        double v64 = [v52 objectForKeyedSubscript:v63];
        id v65 = v64;
        if (v64)
        {
          id v134 = v64;
          unint64_t v66 = v61;
        }
        else
        {
          unint64_t v66 = v61;
          id v67 = [*(id *)(v61 + 3384) sharedFactory];
          id v134 = [v67 stateForType:30];
        }
        uint64_t v68 = NSNumber;
        uint64_t v69 = [*(id *)(v66 + 3384) sharedFactory];
        uint64_t v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 0));

        double v130 = (void *)v70;
        id v71 = [v139 objectForKeyedSubscript:v70];
        double v72 = v71;
        if (v71)
        {
          id v133 = v71;
        }
        else
        {
          id v73 = [*(id *)(v66 + 3384) sharedFactory];
          id v133 = [v73 stateForType:0];
        }
        uint64_t v74 = NSNumber;
        [*(id *)(v66 + 3384) sharedFactory];
        v76 = unint64_t v75 = v66;
        id v77 = objc_msgSend(v74, "numberWithInt:", objc_msgSend(v76, "logMsgStateTypeForType:", 3));

        id v78 = [v139 objectForKeyedSubscript:v77];
        id v79 = v78;
        if (v78)
        {
          id v131 = v78;
        }
        else
        {
          id v80 = [*(id *)(v66 + 3384) sharedFactory];
          id v131 = [v80 stateForType:3];
        }
        id v38 = v152;

        long long v81 = NSNumber;
        [*(id *)(v75 + 3384) sharedFactory];
        long long v83 = v82 = v75;
        long long v84 = objc_msgSend(v81, "numberWithInt:", objc_msgSend(v83, "logMsgStateTypeForType:", 8));

        id v85 = v139;
        uint64_t v86 = [v139 objectForKeyedSubscript:v84];
        id v87 = v86;
        id v23 = v136;
        if (v86)
        {
          id v129 = v86;
        }
        else
        {
          [*(id *)(v82 + 3384) sharedFactory];
          v89 = id v88 = v84;
          id v129 = [v89 stateForType:8];

          long long v84 = v88;
        }
        id v26 = v137;
        id v25 = v138;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          double v126 = v84;
          id v90 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v90 setEventType:19];
          id v91 = objc_alloc_init(MEMORY[0x263F418E8]);
          [v90 setRideBookedSession:v91];

          id v92 = [v90 rideBookedSession];
          [v92 setRideBookedSessionId:v148];

          if (v136)
          {
            uint64_t v93 = [v136 BOOLValue];
            long long v94 = [v90 rideBookedSession];
            [v94 setBookedUsingMaps:v93];
          }
          if (v24)
          {
            uint64_t v95 = [v24 BOOLValue];
            long long v96 = [v90 rideBookedSession];
            [v96 setCancelled:v95];
          }
          if (v138)
          {
            uint64_t v97 = [v138 BOOLValue];
            long long v98 = [v90 rideBookedSession];
            [v98 setContactedDriver:v97];
          }
          if (v137)
          {
            uint64_t v99 = [v137 BOOLValue];
            id v100 = [v90 rideBookedSession];
            [v100 setViewedInProactiveTray:v99];
          }
          if (v143)
          {
            uint64_t v101 = [v143 BOOLValue];
            id v102 = [v90 rideBookedSession];
            [v102 setTappedProactiveTrayItem:v101];
          }
          if (v140)
          {
            uint64_t v103 = [v140 BOOLValue];
            double v104 = [v90 rideBookedSession];
            [v104 setViewedDetails:v103];
          }
          if (v152)
          {
            uint64_t v105 = [v152 BOOLValue];
            uint64_t v106 = [v90 rideBookedSession];
            [v106 setInvalidVehicleLocation:v105];
          }
          if (v147)
          {
            uint64_t v107 = [v147 BOOLValue];
            uint64_t v108 = [v90 rideBookedSession];
            [v108 setMissingVehicleLocation:v107];
          }
          long long v109 = objc_msgSend(v90, "rideBookedSession", v126);
          [v109 setRideAppId:v146];

          uint64_t v110 = [v90 rideBookedSession];
          [v110 setRideAppVersion:v145];

          long long v111 = [v90 rideBookedSession];
          uint64_t v112 = [v111 intentResponseFailures];

          if (!v112)
          {
            id v113 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v149, "count"));
            uint64_t v114 = [v90 rideBookedSession];
            [v114 setIntentResponseFailures:v113];
          }
          long long v157 = 0u;
          long long v158 = 0u;
          long long v155 = 0u;
          long long v156 = 0u;
          id v115 = v149;
          uint64_t v116 = [v115 countByEnumeratingWithState:&v155 objects:v166 count:16];
          if (v116)
          {
            uint64_t v117 = v116;
            uint64_t v118 = *(void *)v156;
            do
            {
              for (uint64_t j = 0; j != v117; ++j)
              {
                if (*(void *)v156 != v118) {
                  objc_enumerationMutation(v115);
                }
                double v120 = *(void **)(*((void *)&v155 + 1) + 8 * j);
                uint64_t v121 = [v90 rideBookedSession];
                double v122 = [v121 intentResponseFailures];
                uint64_t v123 = (void *)[v120 copy];
                [v122 addObject:v123];
              }
              uint64_t v117 = [v115 countByEnumeratingWithState:&v155 objects:v166 count:16];
            }
            while (v117);
          }

          if (v135) {
            objc_msgSend(v90, "addLogMsgState:");
          }
          id v23 = v136;
          id v24 = v128;
          id v25 = v138;
          id v85 = v139;
          id v38 = v152;
          if (v133) {
            objc_msgSend(v90, "addLogMsgState:");
          }
          if (v131) {
            objc_msgSend(v90, "addLogMsgState:");
          }
          if (v134) {
            [v90 addLogMsgState:v134];
          }
          if (v129) {
            objc_msgSend(v90, "addLogMsgState:");
          }
          long long v124 = +[GEOAPStateFactory sharedFactory];
          v153[0] = MEMORY[0x263EF8330];
          v153[1] = 3221225472;
          v153[2] = __318__GEOAPPortal_captureRideBookedWithRideBookedSessionId_bookedUsingMaps_cancelled_contactedDriver_viewedInProactiveTray_tappedProactiveTrayItem_viewedDetails_invalidVehicleLocation_missingVehicleLocation_rideAppId_rideAppVersion_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v153[3] = &unk_265345680;
          id v154 = v90;
          id v125 = v90;
          [v124 sessionStateForType:7 callback:v153];

          id v26 = v137;
          long long v84 = v127;
        }
        v32[2](v32);

LABEL_82:
        id v27 = v143;
        id v28 = v140;
        goto LABEL_83;
      }
    }
    else if (!v42)
    {
      goto LABEL_11;
    }
    v32[2](v32);
    goto LABEL_82;
  }
  id v35 = v28;
  id v36 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    id v37 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v169 = v37;
    _os_log_impl(&dword_24FE56000, v36, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v32[2](v32);
  id v28 = v35;
  id v38 = v152;
LABEL_84:
}

void __318__GEOAPPortal_captureRideBookedWithRideBookedSessionId_bookedUsingMaps_cancelled_contactedDriver_viewedInProactiveTray_tappedProactiveTrayItem_viewedDetails_invalidVehicleLocation_missingVehicleLocation_rideAppId_rideAppVersion_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __318__GEOAPPortal_captureRideBookedWithRideBookedSessionId_bookedUsingMaps_cancelled_contactedDriver_viewedInProactiveTray_tappedProactiveTrayItem_viewedDetails_invalidVehicleLocation_missingVehicleLocation_rideAppId_rideAppVersion_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_317()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B20191F = [v6 containsObject:v8];
}

void __318__GEOAPPortal_captureRideBookedWithRideBookedSessionId_bookedUsingMaps_cancelled_contactedDriver_viewedInProactiveTray_tappedProactiveTrayItem_viewedDetails_invalidVehicleLocation_missingVehicleLocation_rideAppId_rideAppVersion_intentResponseFailures_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTableBookingWithBookTableSessionId:(id)a3 endState:(int)a4 endView:(int)a5 bookTableAppId:(id)a6 muid:(id)a7 blurredReservationTimestamp:(id)a8 blurredBookingTimestamp:(id)a9 durationOfSessionInSeconds:(id)a10 installNeeded:(id)a11 installNeededTappedAppId:(id)a12 installCompleted:(id)a13 tableSize:(id)a14 addedSpecialRequest:(id)a15 swipedAvailableTimes:(id)a16 tappedDatePicker:(id)a17 errorMessages:(id)a18
{
  objc_msgSend(a1, "captureTableBookingWithBookTableSessionId:endState:endView:bookTableAppId:muid:blurredReservationTimestamp:blurredBookingTimestamp:durationOfSessionInSeconds:installNeeded:installNeededTappedAppId:installCompleted:tableSize:addedSpecialRequest:swipedAvailableTimes:tappedDatePicker:errorMessages:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, *(void *)&a4, *(void *)&a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
    a18,
    0,
    0,
    0,
    0);
}

+ (void)captureTableBookingWithBookTableSessionId:(id)a3 endState:(int)a4 endView:(int)a5 bookTableAppId:(id)a6 muid:(id)a7 blurredReservationTimestamp:(id)a8 blurredBookingTimestamp:(id)a9 durationOfSessionInSeconds:(id)a10 installNeeded:(id)a11 installNeededTappedAppId:(id)a12 installCompleted:(id)a13 tableSize:(id)a14 addedSpecialRequest:(id)a15 swipedAvailableTimes:(id)a16 tappedDatePicker:(id)a17 errorMessages:(id)a18 additionalStates:(id)a19 providedDropRate:(id)a20 completionQueue:(id)a21 completionBlock:(id)a22
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  id v151 = a3;
  id v25 = a6;
  id v150 = a7;
  id v149 = a8;
  id v26 = a9;
  id v148 = a10;
  id v27 = a11;
  id v147 = a12;
  id v28 = a13;
  id v29 = a14;
  id v30 = a15;
  id v146 = a16;
  id v145 = a17;
  id v152 = a18;
  id v153 = a19;
  id v154 = a20;
  id v31 = a21;
  id v32 = a22;
  v165[0] = MEMORY[0x263EF8330];
  v165[1] = 3221225472;
  v165[2] = __377__GEOAPPortal_captureTableBookingWithBookTableSessionId_endState_endView_bookTableAppId_muid_blurredReservationTimestamp_blurredBookingTimestamp_durationOfSessionInSeconds_installNeeded_installNeededTappedAppId_installCompleted_tableSize_addedSpecialRequest_swipedAvailableTimes_tappedDatePicker_errorMessages_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v165[3] = &unk_265345530;
  id v144 = v32;
  id v167 = v144;
  id v33 = v31;
  id v166 = v33;
  int v34 = (void (**)(void))MEMORY[0x25337B980](v165);
  id v35 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v35 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B201A98 != -1) {
      dispatch_once(&qword_26B201A98, &__block_literal_global_326);
    }
    if (byte_26B201920) {
      goto LABEL_8;
    }
    id v38 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v39 = [v38 countryCode];

    uint64_t v143 = (void *)v39;
    int v40 = [a1 isDisabledEvent:@"tableBooking" inCountry:v39];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_15;
      }
    }
    else if (v40)
    {
      goto LABEL_15;
    }
    id v138 = v29;
    if (v154) {
      [v154 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v41 == 0.0 || v41 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v137 = v26;
      id v136 = v25;
      id v129 = v28;
      id v130 = v27;
      id v128 = v30;
      if ([v153 count])
      {
        int v42 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v153, "count"));
        long long v161 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        id v43 = v153;
        uint64_t v44 = [v43 countByEnumeratingWithState:&v161 objects:v169 count:16];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = *(void *)v162;
          do
          {
            for (uint64_t i = 0; i != v45; ++i)
            {
              if (*(void *)v162 != v46) {
                objc_enumerationMutation(v43);
              }
              uint64_t v48 = *(void **)(*((void *)&v161 + 1) + 8 * i);
              int v49 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v48, "stateType"));
              [v42 setObject:v48 forKeyedSubscript:v49];
            }
            uint64_t v45 = [v43 countByEnumeratingWithState:&v161 objects:v169 count:16];
          }
          while (v45);
        }

        double v50 = (void *)[v42 copy];
        id v28 = v129;
        id v27 = v130;
        id v30 = v128;
      }
      else
      {
        double v50 = 0;
      }
      int v51 = NSNumber;
      id v52 = +[GEOAPStateFactory sharedFactory];
      uint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 2));

      uint64_t v54 = [v50 objectForKeyedSubscript:v53];
      uint64_t v55 = v54;
      if (v54)
      {
        id v135 = v54;
      }
      else
      {
        double v56 = +[GEOAPStateFactory sharedFactory];
        id v135 = [v56 stateForType:2];
      }
      id v57 = NSNumber;
      unint64_t v58 = +[GEOAPStateFactory sharedFactory];
      double v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 30));

      id v142 = v50;
      double v60 = [v50 objectForKeyedSubscript:v59];
      unint64_t v61 = v60;
      if (v60)
      {
        id v134 = v60;
        unint64_t v62 = 0x265344000;
      }
      else
      {
        unint64_t v62 = 0x265344000uLL;
        uint64_t v63 = +[GEOAPStateFactory sharedFactory];
        id v134 = [v63 stateForType:30];
      }
      double v64 = NSNumber;
      id v65 = [*(id *)(v62 + 3384) sharedFactory];
      objc_msgSend(v64, "numberWithInt:", objc_msgSend(v65, "logMsgStateTypeForType:", 0));
      v67 = unint64_t v66 = v62;

      uint64_t v68 = [v142 objectForKeyedSubscript:v67];
      uint64_t v69 = v68;
      if (v68)
      {
        id v133 = v68;
      }
      else
      {
        uint64_t v70 = [*(id *)(v66 + 3384) sharedFactory];
        id v133 = [v70 stateForType:0];

        unint64_t v66 = 0x265344000uLL;
      }

      id v71 = NSNumber;
      double v72 = [*(id *)(v66 + 3384) sharedFactory];
      id v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 3));

      uint64_t v74 = [v142 objectForKeyedSubscript:v73];
      unint64_t v75 = v74;
      if (v74)
      {
        id v132 = v74;
      }
      else
      {
        id v76 = +[GEOAPStateFactory sharedFactory];
        id v132 = [v76 stateForType:3];
      }
      id v26 = v137;

      id v77 = NSNumber;
      id v78 = +[GEOAPStateFactory sharedFactory];
      id v79 = objc_msgSend(v77, "numberWithInt:", objc_msgSend(v78, "logMsgStateTypeForType:", 8));

      id v80 = [v142 objectForKeyedSubscript:v79];
      long long v81 = v80;
      if (v80)
      {
        id v131 = v80;
      }
      else
      {
        +[GEOAPStateFactory sharedFactory];
        long long v83 = v82 = v79;
        id v131 = [v83 stateForType:8];

        id v79 = v82;
      }
      id v25 = v136;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        long long v127 = v79;
        id v84 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v84 setEventType:20];
        id v85 = objc_alloc_init(MEMORY[0x263F41910]);
        [v84 setTableBookingSession:v85];

        uint64_t v86 = [v84 tableBookingSession];
        [v86 setBookTableSessionId:v151];

        id v87 = [v84 tableBookingSession];
        [v87 setEndState:a4];

        id v88 = [v84 tableBookingSession];
        [v88 setEndView:a5];

        id v89 = [v84 tableBookingSession];
        [v89 setBookTableAppId:v136];

        if (v150)
        {
          uint64_t v90 = [v150 unsignedLongLongValue];
          id v91 = [v84 tableBookingSession];
          [v91 setMuid:v90];
        }
        if (v149)
        {
          uint64_t v92 = [v149 integerValue];
          uint64_t v93 = [v84 tableBookingSession];
          [v93 setBlurredReservationTimestamp:v92];
        }
        if (v137)
        {
          uint64_t v94 = [v137 integerValue];
          uint64_t v95 = [v84 tableBookingSession];
          [v95 setBlurredBookingTimestamp:v94];
        }
        if (v148)
        {
          [v148 doubleValue];
          double v97 = v96;
          long long v98 = [v84 tableBookingSession];
          [v98 setDurationOfSessionInSeconds:v97];
        }
        if (v27)
        {
          uint64_t v99 = [v27 BOOLValue];
          id v100 = [v84 tableBookingSession];
          [v100 setInstallNeeded:v99];
        }
        uint64_t v101 = [v84 tableBookingSession];
        [v101 setInstallNeededTappedAppId:v147];

        if (v28)
        {
          uint64_t v102 = [v28 BOOLValue];
          uint64_t v103 = [v84 tableBookingSession];
          [v103 setInstallCompleted:v102];
        }
        if (v29)
        {
          uint64_t v104 = [v29 unsignedLongLongValue];
          uint64_t v105 = [v84 tableBookingSession];
          [v105 setTableSize:v104];
        }
        if (v30)
        {
          uint64_t v106 = [v30 BOOLValue];
          uint64_t v107 = [v84 tableBookingSession];
          [v107 setAddedSpecialRequest:v106];
        }
        if (v146)
        {
          uint64_t v108 = [v146 BOOLValue];
          long long v109 = [v84 tableBookingSession];
          [v109 setSwipedAvailableTimes:v108];
        }
        if (v145)
        {
          uint64_t v110 = [v145 BOOLValue];
          long long v111 = [v84 tableBookingSession];
          [v111 setTappedDatePicker:v110];
        }
        uint64_t v112 = [v84 tableBookingSession];
        id v113 = [v112 errorMessages];

        if (!v113)
        {
          uint64_t v114 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v152, "count"));
          id v115 = [v84 tableBookingSession];
          [v115 setErrorMessages:v114];
        }
        long long v159 = 0u;
        long long v160 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        id v116 = v152;
        uint64_t v117 = [v116 countByEnumeratingWithState:&v157 objects:v168 count:16];
        if (v117)
        {
          uint64_t v118 = v117;
          uint64_t v119 = *(void *)v158;
          do
          {
            for (uint64_t j = 0; j != v118; ++j)
            {
              if (*(void *)v158 != v119) {
                objc_enumerationMutation(v116);
              }
              uint64_t v121 = *(void **)(*((void *)&v157 + 1) + 8 * j);
              double v122 = [v84 tableBookingSession];
              uint64_t v123 = [v122 errorMessages];
              long long v124 = (void *)[v121 copy];
              [v123 addObject:v124];
            }
            uint64_t v118 = [v116 countByEnumeratingWithState:&v157 objects:v168 count:16];
          }
          while (v118);
        }

        if (v135) {
          objc_msgSend(v84, "addLogMsgState:");
        }
        id v25 = v136;
        id v28 = v129;
        id v27 = v130;
        id v29 = v138;
        id v30 = v128;
        if (v133) {
          objc_msgSend(v84, "addLogMsgState:");
        }
        if (v132) {
          [v84 addLogMsgState:v132];
        }
        if (v134) {
          [v84 addLogMsgState:v134];
        }
        if (v131) {
          objc_msgSend(v84, "addLogMsgState:");
        }
        id v125 = +[GEOAPStateFactory sharedFactory];
        v155[0] = MEMORY[0x263EF8330];
        v155[1] = 3221225472;
        v155[2] = __377__GEOAPPortal_captureTableBookingWithBookTableSessionId_endState_endView_bookTableAppId_muid_blurredReservationTimestamp_blurredBookingTimestamp_durationOfSessionInSeconds_installNeeded_installNeededTappedAppId_installCompleted_tableSize_addedSpecialRequest_swipedAvailableTimes_tappedDatePicker_errorMessages_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v155[3] = &unk_265345680;
        id v156 = v84;
        id v126 = v84;
        [v125 sessionStateForType:7 callback:v155];

        id v26 = v137;
        id v79 = v127;
      }
      v34[2](v34);

      goto LABEL_87;
    }
LABEL_15:
    v34[2](v34);
LABEL_87:

    goto LABEL_9;
  }
  id v36 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    id v37 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v171 = v37;
    _os_log_impl(&dword_24FE56000, v36, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v34[2](v34);
LABEL_9:
}

void __377__GEOAPPortal_captureTableBookingWithBookTableSessionId_endState_endView_bookTableAppId_muid_blurredReservationTimestamp_blurredBookingTimestamp_durationOfSessionInSeconds_installNeeded_installNeededTappedAppId_installCompleted_tableSize_addedSpecialRequest_swipedAvailableTimes_tappedDatePicker_errorMessages_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __377__GEOAPPortal_captureTableBookingWithBookTableSessionId_endState_endView_bookTableAppId_muid_blurredReservationTimestamp_blurredBookingTimestamp_durationOfSessionInSeconds_installNeeded_installNeededTappedAppId_installCompleted_tableSize_addedSpecialRequest_swipedAvailableTimes_tappedDatePicker_errorMessages_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_324()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201920 = [v6 containsObject:v8];
}

void __377__GEOAPPortal_captureTableBookingWithBookTableSessionId_endState_endView_bookTableAppId_muid_blurredReservationTimestamp_blurredBookingTimestamp_durationOfSessionInSeconds_installNeeded_installNeededTappedAppId_installCompleted_tableSize_addedSpecialRequest_swipedAvailableTimes_tappedDatePicker_errorMessages_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureTableBookedWithBookedTableSessionId:(id)a3 bookedTables:(id)a4
{
}

+ (void)captureTableBookedWithBookedTableSessionId:(id)a3 bookedTables:(id)a4 additionalStates:(id)a5 providedDropRate:(id)a6 completionQueue:(id)a7 completionBlock:(id)a8
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  v124[0] = MEMORY[0x263EF8330];
  v124[1] = 3221225472;
  v124[2] = __137__GEOAPPortal_captureTableBookedWithBookedTableSessionId_bookedTables_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v124[3] = &unk_265345530;
  id v20 = v19;
  id v126 = v20;
  id v21 = v18;
  id v125 = v21;
  int v22 = (void (**)(void))MEMORY[0x25337B980](v124);
  id v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201AA0 != -1) {
      dispatch_once(&qword_26B201AA0, &__block_literal_global_333);
    }
    if (byte_26B201921) {
      goto LABEL_8;
    }
    id v113 = v14;
    id v27 = [MEMORY[0x263F41770] sharedConfiguration];
    id v28 = [v27 countryCode];

    int v29 = [a1 isDisabledEvent:@"tableBooked" inCountry:v28];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_15;
      }
    }
    else if (v29)
    {
      goto LABEL_15;
    }
    if (v17) {
      [v17 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v30 == 0.0 || v30 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v106 = v28;
      uint64_t v108 = v15;
      id v107 = v16;
      id v101 = v20;
      id v102 = v17;
      if ([v16 count])
      {
        id v31 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v16, "count"));
        long long v120 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        id v32 = v16;
        uint64_t v33 = [v32 countByEnumeratingWithState:&v120 objects:v128 count:16];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)v121;
          do
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              if (*(void *)v121 != v35) {
                objc_enumerationMutation(v32);
              }
              id v37 = *(void **)(*((void *)&v120 + 1) + 8 * i);
              id v38 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v37, "stateType"));
              [v31 setObject:v37 forKeyedSubscript:v38];
            }
            uint64_t v34 = [v32 countByEnumeratingWithState:&v120 objects:v128 count:16];
          }
          while (v34);
        }

        uint64_t v39 = (void *)[v31 copy];
        id v20 = v101;
        id v17 = v102;
      }
      else
      {
        uint64_t v39 = 0;
      }
      int v40 = NSNumber;
      double v41 = +[GEOAPStateFactory sharedFactory];
      int v42 = objc_msgSend(v40, "numberWithInt:", objc_msgSend(v41, "logMsgStateTypeForType:", 2));

      id v43 = [v39 objectForKeyedSubscript:v42];
      uint64_t v44 = v43;
      if (v43)
      {
        id v105 = v43;
        unint64_t v45 = 0x265344000;
      }
      else
      {
        unint64_t v45 = 0x265344000uLL;
        uint64_t v46 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v46 stateForType:2];
      }
      uint64_t v47 = NSNumber;
      [*(id *)(v45 + 3384) sharedFactory];
      v49 = unint64_t v48 = v45;
      uint64_t v50 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v49, "logMsgStateTypeForType:", 30));

      long long v109 = (void *)v50;
      uint64_t v112 = v39;
      int v51 = [v39 objectForKeyedSubscript:v50];
      id v52 = v51;
      if (v51)
      {
        id v104 = v51;
        unint64_t v53 = v48;
      }
      else
      {
        unint64_t v53 = v48;
        uint64_t v54 = [*(id *)(v48 + 3384) sharedFactory];
        id v104 = [v54 stateForType:30];
      }
      uint64_t v55 = NSNumber;
      double v56 = [*(id *)(v53 + 3384) sharedFactory];
      uint64_t v57 = objc_msgSend(v55, "numberWithInt:", objc_msgSend(v56, "logMsgStateTypeForType:", 0));

      uint64_t v110 = (void *)v57;
      unint64_t v58 = [v112 objectForKeyedSubscript:v57];
      double v59 = v58;
      if (v58)
      {
        id v103 = v58;
      }
      else
      {
        double v60 = [*(id *)(v53 + 3384) sharedFactory];
        id v103 = [v60 stateForType:0];
      }
      unint64_t v61 = NSNumber;
      [*(id *)(v53 + 3384) sharedFactory];
      uint64_t v63 = v62 = v53;
      uint64_t v64 = objc_msgSend(v61, "numberWithInt:", objc_msgSend(v63, "logMsgStateTypeForType:", 3));

      uint64_t v99 = (void *)v64;
      id v65 = [v112 objectForKeyedSubscript:v64];
      unint64_t v66 = v65;
      if (v65)
      {
        id v111 = v65;
      }
      else
      {
        id v67 = [*(id *)(v53 + 3384) sharedFactory];
        id v111 = [v67 stateForType:3];
      }
      id v28 = v106;

      uint64_t v68 = NSNumber;
      [*(id *)(v62 + 3384) sharedFactory];
      v70 = unint64_t v69 = v62;
      uint64_t v71 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 8));

      double v72 = v112;
      id v100 = (void *)v71;
      id v73 = [v112 objectForKeyedSubscript:v71];
      uint64_t v74 = v73;
      if (v73)
      {
        id v75 = v73;
      }
      else
      {
        id v76 = [*(id *)(v69 + 3384) sharedFactory];
        id v75 = [v76 stateForType:8];
      }
      id v16 = v107;
      id v77 = v111;

      id v78 = v104;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v97 = v75;
        id v79 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v79 setEventType:21];
        id v80 = objc_alloc_init(MEMORY[0x263F41908]);
        [v79 setTableBookedSession:v80];

        long long v81 = [v79 tableBookedSession];
        [v81 setBookedTableSessionId:v113];

        unint64_t v82 = [v79 tableBookedSession];
        long long v83 = [v82 bookedTables];

        if (!v83)
        {
          id v84 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v108, "count"));
          id v85 = [v79 tableBookedSession];
          [v85 setBookedTables:v84];
        }
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        id v86 = v108;
        uint64_t v87 = [v86 countByEnumeratingWithState:&v116 objects:v127 count:16];
        if (v87)
        {
          uint64_t v88 = v87;
          uint64_t v89 = *(void *)v117;
          do
          {
            for (uint64_t j = 0; j != v88; ++j)
            {
              if (*(void *)v117 != v89) {
                objc_enumerationMutation(v86);
              }
              id v91 = *(void **)(*((void *)&v116 + 1) + 8 * j);
              uint64_t v92 = objc_msgSend(v79, "tableBookedSession", v97);
              uint64_t v93 = [v92 bookedTables];
              uint64_t v94 = (void *)[v91 copy];
              [v93 addObject:v94];
            }
            uint64_t v88 = [v86 countByEnumeratingWithState:&v116 objects:v127 count:16];
          }
          while (v88);
        }

        if (v105) {
          objc_msgSend(v79, "addLogMsgState:");
        }
        id v16 = v107;
        double v72 = v112;
        id v78 = v104;
        if (v103) {
          objc_msgSend(v79, "addLogMsgState:");
        }
        id v20 = v101;
        id v17 = v102;
        if (v111) {
          [v79 addLogMsgState:v111];
        }
        if (v104) {
          [v79 addLogMsgState:v104];
        }
        if (v97) {
          objc_msgSend(v79, "addLogMsgState:");
        }
        uint64_t v95 = +[GEOAPStateFactory sharedFactory];
        v114[0] = MEMORY[0x263EF8330];
        v114[1] = 3221225472;
        v114[2] = __137__GEOAPPortal_captureTableBookedWithBookedTableSessionId_bookedTables_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v114[3] = &unk_265345680;
        id v115 = v79;
        id v96 = v79;
        [v95 sessionStateForType:7 callback:v114];

        id v75 = v98;
        id v28 = v106;
        id v77 = v111;
      }
      v22[2](v22);

      id v14 = v113;
      id v15 = v108;
      goto LABEL_67;
    }
LABEL_15:
    v22[2](v22);
LABEL_67:

    goto LABEL_9;
  }
  id v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    id v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v130 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v22[2](v22);
LABEL_9:
}

void __137__GEOAPPortal_captureTableBookedWithBookedTableSessionId_bookedTables_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __137__GEOAPPortal_captureTableBookedWithBookedTableSessionId_bookedTables_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_331()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201921 = [v6 containsObject:v8];
}

void __137__GEOAPPortal_captureTableBookedWithBookedTableSessionId_bookedTables_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureDirectionsRequestDetailsWithNavStarted:(id)a3 purpose:(int)a4 origin:(int)a5 destination:(int)a6
{
}

+ (void)captureDirectionsRequestDetailsWithNavStarted:(id)a3 purpose:(int)a4 origin:(int)a5 destination:(int)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  id v13 = a3;
  id v14 = a7;
  id v15 = a8;
  id v16 = a9;
  id v17 = a10;
  v95[0] = MEMORY[0x263EF8330];
  v95[1] = 3221225472;
  v95[2] = __154__GEOAPPortal_captureDirectionsRequestDetailsWithNavStarted_purpose_origin_destination_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v95[3] = &unk_265345530;
  id v18 = v17;
  id v97 = v18;
  id v19 = v16;
  id v96 = v19;
  id v20 = (void (**)(void))MEMORY[0x25337B980](v95);
  id v21 = +[GEOAPServiceManager sharedManager];
  int v22 = [v21 eventCollectionIsDisabledForCurrentProcess];

  if (!v22)
  {
    if (qword_26B201AA8 != -1) {
      dispatch_once(&qword_26B201AA8, &__block_literal_global_340);
    }
    if (byte_26B201922) {
      goto LABEL_8;
    }
    id v25 = [MEMORY[0x263F41770] sharedConfiguration];
    id v26 = [v25 countryCode];

    int v27 = [a1 isDisabledEvent:@"directionsRequestDetails" inCountry:v26];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_28;
      }
    }
    else if (v27)
    {
      goto LABEL_28;
    }
    if (v15) {
      [v15 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v28 == 0.0 || v28 < (double)arc4random() / 4294967300.0)
    {
      long long v83 = v13;
      id v79 = v26;
      id v77 = v14;
      if ([v14 count])
      {
        id v81 = v18;
        id v84 = v15;
        int v29 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v14, "count"));
        long long v91 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        id v30 = v14;
        uint64_t v31 = [v30 countByEnumeratingWithState:&v91 objects:v98 count:16];
        if (v31)
        {
          uint64_t v32 = v31;
          uint64_t v33 = *(void *)v92;
          do
          {
            for (uint64_t i = 0; i != v32; ++i)
            {
              if (*(void *)v92 != v33) {
                objc_enumerationMutation(v30);
              }
              uint64_t v35 = *(void **)(*((void *)&v91 + 1) + 8 * i);
              id v36 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v35, "stateType"));
              [v29 setObject:v35 forKeyedSubscript:v36];
            }
            uint64_t v32 = [v30 countByEnumeratingWithState:&v91 objects:v98 count:16];
          }
          while (v32);
        }

        id v37 = (void *)[v29 copy];
        id v15 = v84;
        id v18 = v81;
      }
      else
      {
        id v37 = 0;
      }
      id v85 = v37;
      id v38 = NSNumber;
      uint64_t v39 = +[GEOAPStateFactory sharedFactory];
      int v40 = objc_msgSend(v38, "numberWithInt:", objc_msgSend(v39, "logMsgStateTypeForType:", 2));

      double v41 = [v37 objectForKeyedSubscript:v40];
      int v42 = v41;
      if (v41)
      {
        id v78 = v41;
      }
      else
      {
        id v43 = +[GEOAPStateFactory sharedFactory];
        id v78 = [v43 stateForType:2];
      }
      uint64_t v44 = NSNumber;
      unint64_t v45 = +[GEOAPStateFactory sharedFactory];
      uint64_t v46 = objc_msgSend(v44, "numberWithInt:", objc_msgSend(v45, "logMsgStateTypeForType:", 30));

      uint64_t v47 = [v85 objectForKeyedSubscript:v46];
      unint64_t v48 = v47;
      if (v47)
      {
        id v74 = v47;
      }
      else
      {
        int v49 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v49 stateForType:30];
      }
      uint64_t v50 = NSNumber;
      int v51 = +[GEOAPStateFactory sharedFactory];
      id v52 = objc_msgSend(v50, "numberWithInt:", objc_msgSend(v51, "logMsgStateTypeForType:", 0));

      unint64_t v53 = [v85 objectForKeyedSubscript:v52];
      uint64_t v54 = v53;
      if (v53)
      {
        id v82 = v53;
      }
      else
      {
        uint64_t v55 = +[GEOAPStateFactory sharedFactory];
        id v82 = [v55 stateForType:0];
      }
      id v26 = v79;

      double v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      unint64_t v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 3));

      double v59 = [v85 objectForKeyedSubscript:v58];
      double v60 = v59;
      if (v59)
      {
        id v80 = v59;
      }
      else
      {
        +[GEOAPStateFactory sharedFactory];
        v62 = unint64_t v61 = v58;
        id v80 = [v62 stateForType:3];

        unint64_t v58 = v61;
      }
      id v14 = v77;
      uint64_t v63 = v78;
      uint64_t v64 = v74;

      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v75 = v58;
        id v65 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v65 setEventType:41];
        id v66 = objc_alloc_init(MEMORY[0x263F41818]);
        [v65 setDirectionsRequestDetails:v66];

        if (v83)
        {
          uint64_t v67 = [v83 BOOLValue];
          uint64_t v68 = [v65 directionsRequestDetails];
          [v68 setNavStarted:v67];

          uint64_t v63 = v78;
        }
        unint64_t v69 = objc_msgSend(v65, "directionsRequestDetails", v75);
        [v69 setPurpose:a4];

        uint64_t v70 = [v65 directionsRequestDetails];
        [v70 setOrigin:a5];

        uint64_t v71 = [v65 directionsRequestDetails];
        [v71 setDestination:a6];

        if (v63) {
          [v65 addLogMsgState:v63];
        }
        if (v82) {
          objc_msgSend(v65, "addLogMsgState:");
        }
        if (v80) {
          [v65 addLogMsgState:v80];
        }
        if (v64) {
          [v65 addLogMsgState:v64];
        }
        double v72 = +[GEOAPStateFactory sharedFactory];
        v89[0] = MEMORY[0x263EF8330];
        v89[1] = 3221225472;
        v89[2] = __154__GEOAPPortal_captureDirectionsRequestDetailsWithNavStarted_purpose_origin_destination_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v89[3] = &unk_265345680;
        id v90 = v65;
        id v73 = v65;
        [v72 sessionStateForType:7 callback:v89];

        unint64_t v58 = v76;
      }
      v20[2](v20);

      id v13 = v83;
      goto LABEL_55;
    }
LABEL_28:
    v20[2](v20);
LABEL_55:

    goto LABEL_9;
  }
  id v23 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    int v24 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v100 = v24;
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
LABEL_8:
  v20[2](v20);
LABEL_9:
}

void __154__GEOAPPortal_captureDirectionsRequestDetailsWithNavStarted_purpose_origin_destination_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __154__GEOAPPortal_captureDirectionsRequestDetailsWithNavStarted_purpose_origin_destination_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_338()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201922 = [v6 containsObject:v8];
}

void __154__GEOAPPortal_captureDirectionsRequestDetailsWithNavStarted_purpose_origin_destination_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureEvRoutingVehicleDetailsWithMake:(id)a3 model:(id)a4 towingNotSupported:(id)a5 batteryCapacity:(id)a6
{
}

+ (void)captureEvRoutingVehicleDetailsWithMake:(id)a3 model:(id)a4 towingNotSupported:(id)a5 batteryCapacity:(id)a6 additionalStates:(id)a7 providedDropRate:(id)a8 completionQueue:(id)a9 completionBlock:(id)a10
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  id v88 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v89 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  v96[0] = MEMORY[0x263EF8330];
  v96[1] = 3221225472;
  v96[2] = __161__GEOAPPortal_captureEvRoutingVehicleDetailsWithMake_model_towingNotSupported_batteryCapacity_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v96[3] = &unk_265345530;
  id v87 = v21;
  id v98 = v87;
  id v86 = v20;
  id v97 = v86;
  int v22 = (void (**)(void))MEMORY[0x25337B980](v96);
  id v23 = +[GEOAPServiceManager sharedManager];
  LODWORD(a7) = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!a7)
  {
    if (qword_26B201AB0 != -1) {
      dispatch_once(&qword_26B201AB0, &__block_literal_global_347);
    }
    id v26 = v89;
    int v27 = v19;
    if (byte_26B201923)
    {
      v22[2](v22);
      goto LABEL_57;
    }
    double v28 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v29 = [v28 countryCode];

    id v85 = (void *)v29;
    int v30 = [a1 isDisabledEvent:@"evRoutingVehicleDetails" inCountry:v29];
    if (_GEOConfigHasValue())
    {
      if (GEOConfigGetBOOL()) {
        goto LABEL_14;
      }
    }
    else if (v30)
    {
      goto LABEL_14;
    }
    if (v19) {
      [v19 doubleValue];
    }
    else {
      GEOConfigGetDouble();
    }
    if (v31 == 0.0 || v31 < (double)arc4random() / 4294967300.0)
    {
      long long v83 = v18;
      id v78 = v17;
      if ([v89 count])
      {
        uint64_t v32 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v89, "count"));
        long long v92 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        id v33 = v89;
        uint64_t v34 = [v33 countByEnumeratingWithState:&v92 objects:v99 count:16];
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)v93;
          do
          {
            for (uint64_t i = 0; i != v35; ++i)
            {
              if (*(void *)v93 != v36) {
                objc_enumerationMutation(v33);
              }
              id v38 = *(void **)(*((void *)&v92 + 1) + 8 * i);
              uint64_t v39 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v38, "stateType", v78));
              [v32 setObject:v38 forKeyedSubscript:v39];
            }
            uint64_t v35 = [v33 countByEnumeratingWithState:&v92 objects:v99 count:16];
          }
          while (v35);
        }

        uint64_t v40 = [v32 copy];
        int v27 = v19;
        double v41 = (void *)v40;
      }
      else
      {
        double v41 = 0;
      }
      int v42 = NSNumber;
      id v43 = +[GEOAPStateFactory sharedFactory];
      uint64_t v44 = objc_msgSend(v42, "numberWithInt:", objc_msgSend(v43, "logMsgStateTypeForType:", 2));

      unint64_t v45 = [v41 objectForKeyedSubscript:v44];
      uint64_t v46 = v45;
      if (v45)
      {
        id v82 = v45;
      }
      else
      {
        uint64_t v47 = +[GEOAPStateFactory sharedFactory];
        id v82 = [v47 stateForType:2];
      }
      unint64_t v48 = NSNumber;
      int v49 = +[GEOAPStateFactory sharedFactory];
      uint64_t v50 = objc_msgSend(v48, "numberWithInt:", objc_msgSend(v49, "logMsgStateTypeForType:", 30));

      int v51 = [v41 objectForKeyedSubscript:v50];
      id v52 = v51;
      id v26 = v89;
      if (v51)
      {
        id v81 = v51;
      }
      else
      {
        unint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v81 = [v53 stateForType:30];
      }
      uint64_t v54 = NSNumber;
      uint64_t v55 = +[GEOAPStateFactory sharedFactory];
      double v56 = objc_msgSend(v54, "numberWithInt:", objc_msgSend(v55, "logMsgStateTypeForType:", 0));

      uint64_t v57 = [v41 objectForKeyedSubscript:v56];
      unint64_t v58 = v57;
      if (v57)
      {
        id v84 = v57;
      }
      else
      {
        double v59 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v59 stateForType:0];
      }
      id v17 = v79;

      double v60 = NSNumber;
      unint64_t v61 = +[GEOAPStateFactory sharedFactory];
      uint64_t v62 = objc_msgSend(v60, "numberWithInt:", objc_msgSend(v61, "logMsgStateTypeForType:", 3));

      id v80 = (void *)v62;
      uint64_t v63 = [v41 objectForKeyedSubscript:v62];
      uint64_t v64 = v63;
      if (v63)
      {
        id v65 = v63;
      }
      else
      {
        id v66 = +[GEOAPStateFactory sharedFactory];
        id v65 = [v66 stateForType:3];
      }
      uint64_t v67 = v84;
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
        id v68 = objc_alloc_init(MEMORY[0x263F417E8]);
        [v68 setEventType:42];
        id v69 = objc_alloc_init(MEMORY[0x263F41828]);
        [v68 setEvRoutingVehicleDetails:v69];

        uint64_t v70 = [v68 evRoutingVehicleDetails];
        [v70 setMake:v88];

        uint64_t v71 = [v68 evRoutingVehicleDetails];
        [v71 setModel:v16];

        if (v17)
        {
          uint64_t v72 = [v17 BOOLValue];
          id v73 = [v68 evRoutingVehicleDetails];
          [v73 setTowingNotSupported:v72];

          uint64_t v67 = v84;
        }
        if (v83)
        {
          uint64_t v74 = [v83 unsignedLongLongValue];
          id v75 = [v68 evRoutingVehicleDetails];
          [v75 setBatteryCapacity:v74];

          uint64_t v67 = v84;
        }
        if (v82) {
          objc_msgSend(v68, "addLogMsgState:");
        }
        if (v67) {
          [v68 addLogMsgState:v67];
        }
        if (v65) {
          [v68 addLogMsgState:v65];
        }
        if (v81) {
          [v68 addLogMsgState:v81];
        }
        id v76 = +[GEOAPStateFactory sharedFactory];
        v90[0] = MEMORY[0x263EF8330];
        v90[1] = 3221225472;
        v90[2] = __161__GEOAPPortal_captureEvRoutingVehicleDetailsWithMake_model_towingNotSupported_batteryCapacity_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
        v90[3] = &unk_265345680;
        id v91 = v68;
        id v77 = v68;
        [v76 sessionStateForType:7 callback:v90];

        uint64_t v67 = v84;
      }
      v22[2](v22);

      id v18 = v83;
      goto LABEL_56;
    }
LABEL_14:
    v22[2](v22);
LABEL_56:

    goto LABEL_57;
  }
  int v24 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    id v25 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v101 = v25;
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v22[2](v22);
  id v26 = v89;
  int v27 = v19;
LABEL_57:
}

void __161__GEOAPPortal_captureEvRoutingVehicleDetailsWithMake_model_towingNotSupported_batteryCapacity_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __161__GEOAPPortal_captureEvRoutingVehicleDetailsWithMake_model_towingNotSupported_batteryCapacity_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_345()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201923 = [v6 containsObject:v8];
}

void __161__GEOAPPortal_captureEvRoutingVehicleDetailsWithMake_model_towingNotSupported_batteryCapacity_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureEvTripWithOutOfCharge:(id)a3 outOfRangeAlertDisplayed:(id)a4 originalTripIncludedChargingStation:(id)a5 chargingStopAddedThroughSar:(id)a6 tripIncludedPreferredChargingStation:(id)a7 stopRemovedDetails:(id)a8 realtimeDodgeballs:(id)a9 chargeLocationDetails:(id)a10 stopAddedDetails:(id)a11
{
}

+ (void)captureEvTripWithOutOfCharge:(id)a3 outOfRangeAlertDisplayed:(id)a4 originalTripIncludedChargingStation:(id)a5 chargingStopAddedThroughSar:(id)a6 tripIncludedPreferredChargingStation:(id)a7 stopRemovedDetails:(id)a8 realtimeDodgeballs:(id)a9 chargeLocationDetails:(id)a10 stopAddedDetails:(id)a11 additionalStates:(id)a12 providedDropRate:(id)a13 completionQueue:(id)a14 completionBlock:(id)a15
{
  uint64_t v196 = *MEMORY[0x263EF8340];
  id v163 = a3;
  id v161 = a4;
  id v160 = a5;
  id v159 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v162 = a10;
  id v23 = a11;
  id v24 = a12;
  id v25 = a13;
  id v26 = a14;
  id v27 = a15;
  v186[0] = MEMORY[0x263EF8330];
  v186[1] = 3221225472;
  v186[2] = __313__GEOAPPortal_captureEvTripWithOutOfCharge_outOfRangeAlertDisplayed_originalTripIncludedChargingStation_chargingStopAddedThroughSar_tripIncludedPreferredChargingStation_stopRemovedDetails_realtimeDodgeballs_chargeLocationDetails_stopAddedDetails_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v186[3] = &unk_265345530;
  id v157 = v27;
  id v188 = v157;
  id v28 = v26;
  id v187 = v28;
  uint64_t v29 = (void (**)(void))MEMORY[0x25337B980](v186);
  int v30 = +[GEOAPServiceManager sharedManager];
  int v31 = [v30 eventCollectionIsDisabledForCurrentProcess];

  long long v158 = v20;
  if (!v31)
  {
    if (qword_26B201AB8 != -1) {
      dispatch_once(&qword_26B201AB8, &__block_literal_global_354);
    }
    uint64_t v35 = v163;
    if (byte_26B201924)
    {
      v29[2](v29);
      goto LABEL_100;
    }
    id v156 = v23;
    id v153 = v21;
    uint64_t v36 = [MEMORY[0x263F41770] sharedConfiguration];
    id v37 = [v36 countryCode];

    int v38 = [a1 isDisabledEvent:@"evTrip" inCountry:v37];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        if (v25) {
          [v25 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v23 = v156;
        if (v39 != 0.0 && v39 >= (double)arc4random() / 4294967300.0)
        {
          v29[2](v29);
LABEL_99:

          goto LABEL_100;
        }
        id v150 = v37;
        id v151 = v24;
        id v152 = v22;
        id v144 = v28;
        id v145 = v25;
        if ([v24 count])
        {
          uint64_t v40 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v24, "count"));
          long long v182 = 0u;
          long long v183 = 0u;
          long long v184 = 0u;
          long long v185 = 0u;
          id v41 = v24;
          uint64_t v42 = [v41 countByEnumeratingWithState:&v182 objects:v193 count:16];
          if (v42)
          {
            uint64_t v43 = v42;
            uint64_t v44 = *(void *)v183;
            do
            {
              for (uint64_t i = 0; i != v43; ++i)
              {
                if (*(void *)v183 != v44) {
                  objc_enumerationMutation(v41);
                }
                uint64_t v46 = *(void **)(*((void *)&v182 + 1) + 8 * i);
                uint64_t v47 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v46, "stateType"));
                [v40 setObject:v46 forKeyedSubscript:v47];
              }
              uint64_t v43 = [v41 countByEnumeratingWithState:&v182 objects:v193 count:16];
            }
            while (v43);
          }

          unint64_t v48 = (void *)[v40 copy];
          uint64_t v35 = v163;
          id v22 = v152;
          id v21 = v153;
          id v25 = v145;
        }
        else
        {
          unint64_t v48 = 0;
        }
        int v49 = NSNumber;
        uint64_t v50 = +[GEOAPStateFactory sharedFactory];
        int v51 = objc_msgSend(v49, "numberWithInt:", objc_msgSend(v50, "logMsgStateTypeForType:", 30));

        long long v155 = v48;
        id v52 = [v48 objectForKeyedSubscript:v51];
        unint64_t v53 = v52;
        if (v52)
        {
          id v149 = v52;
        }
        else
        {
          uint64_t v54 = +[GEOAPStateFactory sharedFactory];
          id v149 = [v54 stateForType:30];
        }
        id v28 = v144;

        uint64_t v55 = NSNumber;
        double v56 = +[GEOAPStateFactory sharedFactory];
        uint64_t v57 = objc_msgSend(v55, "numberWithInt:", objc_msgSend(v56, "logMsgStateTypeForType:", 0));

        unint64_t v58 = [v155 objectForKeyedSubscript:v57];
        double v59 = v58;
        if (v58)
        {
          id v148 = v58;
        }
        else
        {
          double v60 = +[GEOAPStateFactory sharedFactory];
          id v148 = [v60 stateForType:0];
        }
        unint64_t v61 = NSNumber;
        uint64_t v62 = +[GEOAPStateFactory sharedFactory];
        uint64_t v63 = objc_msgSend(v61, "numberWithInt:", objc_msgSend(v62, "logMsgStateTypeForType:", 3));

        uint64_t v64 = [v155 objectForKeyedSubscript:v63];
        id v65 = v64;
        if (v64)
        {
          id v147 = v64;
        }
        else
        {
          id v66 = +[GEOAPStateFactory sharedFactory];
          id v147 = [v66 stateForType:3];
        }
        uint64_t v67 = NSNumber;
        id v68 = +[GEOAPStateFactory sharedFactory];
        uint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 42));

        uint64_t v70 = v155;
        uint64_t v143 = (void *)v69;
        uint64_t v71 = [v155 objectForKeyedSubscript:v69];
        uint64_t v72 = v71;
        if (v71)
        {
          id v146 = v71;
        }
        else
        {
          id v73 = +[GEOAPStateFactory sharedFactory];
          id v146 = [v73 stateForType:42];

          uint64_t v70 = v155;
        }
        id v37 = v150;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v74 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v74 setEventType:43];
          id v75 = objc_alloc_init(MEMORY[0x263F41830]);
          [v74 setEvTrip:v75];

          if (v35)
          {
            uint64_t v76 = [v35 BOOLValue];
            id v77 = [v74 evTrip];
            [v77 setOutOfCharge:v76];
          }
          if (v161)
          {
            uint64_t v78 = [v161 BOOLValue];
            id v79 = [v74 evTrip];
            [v79 setOutOfRangeAlertDisplayed:v78];
          }
          if (v160)
          {
            uint64_t v80 = [v160 BOOLValue];
            id v81 = [v74 evTrip];
            [v81 setOriginalTripIncludedChargingStation:v80];
          }
          if (v159)
          {
            uint64_t v82 = [v159 BOOLValue];
            long long v83 = [v74 evTrip];
            [v83 setChargingStopAddedThroughSar:v82];
          }
          if (v158)
          {
            uint64_t v84 = [v158 BOOLValue];
            id v85 = [v74 evTrip];
            [v85 setTripIncludedPreferredChargingStation:v84];
          }
          id v86 = [v74 evTrip];
          id v87 = [v86 stopRemovedDetails];

          if (!v87)
          {
            id v88 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v153, "count"));
            id v89 = [v74 evTrip];
            [v89 setStopRemovedDetails:v88];
          }
          long long v180 = 0u;
          long long v181 = 0u;
          long long v178 = 0u;
          long long v179 = 0u;
          id v90 = v153;
          uint64_t v91 = [v90 countByEnumeratingWithState:&v178 objects:v192 count:16];
          if (v91)
          {
            uint64_t v92 = v91;
            uint64_t v93 = *(void *)v179;
            do
            {
              for (uint64_t j = 0; j != v92; ++j)
              {
                if (*(void *)v179 != v93) {
                  objc_enumerationMutation(v90);
                }
                long long v95 = *(void **)(*((void *)&v178 + 1) + 8 * j);
                id v96 = [v74 evTrip];
                id v97 = [v96 stopRemovedDetails];
                id v98 = (void *)[v95 copy];
                [v97 addObject:v98];
              }
              uint64_t v92 = [v90 countByEnumeratingWithState:&v178 objects:v192 count:16];
            }
            while (v92);
          }

          uint64_t v99 = [v74 evTrip];
          id v100 = [v99 realtimeDodgeballs];

          if (!v100)
          {
            uint64_t v101 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v152, "count"));
            uint64_t v102 = [v74 evTrip];
            [v102 setRealtimeDodgeballs:v101];
          }
          long long v176 = 0u;
          long long v177 = 0u;
          long long v174 = 0u;
          long long v175 = 0u;
          id v103 = v152;
          uint64_t v104 = [v103 countByEnumeratingWithState:&v174 objects:v191 count:16];
          if (v104)
          {
            uint64_t v105 = v104;
            uint64_t v106 = *(void *)v175;
            do
            {
              for (uint64_t k = 0; k != v105; ++k)
              {
                if (*(void *)v175 != v106) {
                  objc_enumerationMutation(v103);
                }
                uint64_t v108 = *(void **)(*((void *)&v174 + 1) + 8 * k);
                long long v109 = [v74 evTrip];
                uint64_t v110 = [v109 realtimeDodgeballs];
                id v111 = (void *)[v108 copy];
                [v110 addObject:v111];
              }
              uint64_t v105 = [v103 countByEnumeratingWithState:&v174 objects:v191 count:16];
            }
            while (v105);
          }

          uint64_t v112 = [v74 evTrip];
          id v113 = [v112 chargeLocationDetails];

          if (!v113)
          {
            uint64_t v114 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v162, "count"));
            id v115 = [v74 evTrip];
            [v115 setChargeLocationDetails:v114];
          }
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          id v116 = v162;
          uint64_t v117 = [v116 countByEnumeratingWithState:&v170 objects:v190 count:16];
          if (v117)
          {
            uint64_t v118 = v117;
            uint64_t v119 = *(void *)v171;
            do
            {
              for (uint64_t m = 0; m != v118; ++m)
              {
                if (*(void *)v171 != v119) {
                  objc_enumerationMutation(v116);
                }
                long long v121 = *(void **)(*((void *)&v170 + 1) + 8 * m);
                long long v122 = [v74 evTrip];
                long long v123 = [v122 chargeLocationDetails];
                long long v124 = (void *)[v121 copy];
                [v123 addObject:v124];
              }
              uint64_t v118 = [v116 countByEnumeratingWithState:&v170 objects:v190 count:16];
            }
            while (v118);
          }

          id v125 = [v74 evTrip];
          id v126 = [v125 stopAddedDetails];

          if (!v126)
          {
            long long v127 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v156, "count"));
            id v128 = [v74 evTrip];
            [v128 setStopAddedDetails:v127];
          }
          long long v168 = 0u;
          long long v169 = 0u;
          long long v166 = 0u;
          long long v167 = 0u;
          id v129 = v156;
          uint64_t v130 = [v129 countByEnumeratingWithState:&v166 objects:v189 count:16];
          if (v130)
          {
            uint64_t v131 = v130;
            uint64_t v132 = *(void *)v167;
            do
            {
              for (uint64_t n = 0; n != v131; ++n)
              {
                if (*(void *)v167 != v132) {
                  objc_enumerationMutation(v129);
                }
                id v134 = *(void **)(*((void *)&v166 + 1) + 8 * n);
                id v135 = [v74 evTrip];
                id v136 = [v135 stopAddedDetails];
                uint64_t v137 = (void *)[v134 copy];
                [v136 addObject:v137];
              }
              uint64_t v131 = [v129 countByEnumeratingWithState:&v166 objects:v189 count:16];
            }
            while (v131);
          }

          id v138 = +[GEOAPSharedStateData sharedData];
          uint64_t v139 = [v138 metroRegion];
          id v140 = [v74 evTrip];
          [v140 setMetro:v139];

          if (v148) {
            objc_msgSend(v74, "addLogMsgState:");
          }
          uint64_t v35 = v163;
          id v22 = v152;
          id v21 = v153;
          id v37 = v150;
          id v24 = v151;
          id v25 = v145;
          if (v147) {
            objc_msgSend(v74, "addLogMsgState:");
          }
          if (v149) {
            [v74 addLogMsgState:v149];
          }
          if (v146) {
            objc_msgSend(v74, "addLogMsgState:");
          }
          uint64_t v141 = +[GEOAPStateFactory sharedFactory];
          v164[0] = MEMORY[0x263EF8330];
          v164[1] = 3221225472;
          v164[2] = __313__GEOAPPortal_captureEvTripWithOutOfCharge_outOfRangeAlertDisplayed_originalTripIncludedChargingStation_chargingStopAddedThroughSar_tripIncludedPreferredChargingStation_stopRemovedDetails_realtimeDodgeballs_chargeLocationDetails_stopAddedDetails_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v164[3] = &unk_265345680;
          id v165 = v74;
          id v142 = v74;
          [v141 sessionStateForType:7 callback:v164];

          uint64_t v70 = v155;
        }
        v29[2](v29);

LABEL_98:
        id v23 = v156;
        goto LABEL_99;
      }
    }
    else if (!v38)
    {
      goto LABEL_11;
    }
    v29[2](v29);
    goto LABEL_98;
  }
  id v32 = v23;
  id v33 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    long long v195 = v34;
    _os_log_impl(&dword_24FE56000, v33, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v29[2](v29);
  uint64_t v35 = v163;
  id v23 = v32;
LABEL_100:
}

void __313__GEOAPPortal_captureEvTripWithOutOfCharge_outOfRangeAlertDisplayed_originalTripIncludedChargingStation_chargingStopAddedThroughSar_tripIncludedPreferredChargingStation_stopRemovedDetails_realtimeDodgeballs_chargeLocationDetails_stopAddedDetails_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __313__GEOAPPortal_captureEvTripWithOutOfCharge_outOfRangeAlertDisplayed_originalTripIncludedChargingStation_chargingStopAddedThroughSar_tripIncludedPreferredChargingStation_stopRemovedDetails_realtimeDodgeballs_chargeLocationDetails_stopAddedDetails_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_352()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201924 = [v6 containsObject:v8];
}

void __313__GEOAPPortal_captureEvTripWithOutOfCharge_outOfRangeAlertDisplayed_originalTripIncludedChargingStation_chargingStopAddedThroughSar_tripIncludedPreferredChargingStation_stopRemovedDetails_realtimeDodgeballs_chargeLocationDetails_stopAddedDetails_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureHardStopWithScore:(id)a3 digits:(id)a4 cities:(id)a5
{
}

+ (void)captureHardStopWithScore:(id)a3 digits:(id)a4 cities:(id)a5 additionalStates:(id)a6 providedDropRate:(id)a7 completionQueue:(id)a8 completionBlock:(id)a9
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  id v109 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v110 = a7;
  id v18 = a8;
  id v19 = a9;
  v125[0] = MEMORY[0x263EF8330];
  v125[1] = 3221225472;
  v125[2] = __120__GEOAPPortal_captureHardStopWithScore_digits_cities_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v125[3] = &unk_265345530;
  id v20 = v19;
  id v127 = v20;
  id v21 = v18;
  id v126 = v21;
  id v22 = (void (**)(void))MEMORY[0x25337B980](v125);
  id v23 = +[GEOAPServiceManager sharedManager];
  int v24 = [v23 eventCollectionIsDisabledForCurrentProcess];

  if (!v24)
  {
    if (qword_26B201AC0 != -1) {
      dispatch_once(&qword_26B201AC0, &__block_literal_global_362);
    }
    id v27 = v109;
    if (byte_26B201925)
    {
      v22[2](v22);
      goto LABEL_72;
    }
    id v108 = v20;
    id v28 = [MEMORY[0x263F41770] sharedConfiguration];
    uint64_t v29 = [v28 countryCode];

    int v30 = [a1 isDisabledEvent:@"hardStop" inCountry:v29];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        if (v110) {
          [v110 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        if (v31 != 0.0 && v31 >= (double)arc4random() / 4294967300.0)
        {
          v22[2](v22);
LABEL_71:

          goto LABEL_72;
        }
        uint64_t v104 = v29;
        uint64_t v106 = v16;
        id v99 = v15;
        id v105 = v17;
        if ([v17 count])
        {
          id v32 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v17, "count"));
          long long v121 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          id v33 = v17;
          uint64_t v34 = [v33 countByEnumeratingWithState:&v121 objects:v130 count:16];
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = *(void *)v122;
            do
            {
              for (uint64_t i = 0; i != v35; ++i)
              {
                if (*(void *)v122 != v36) {
                  objc_enumerationMutation(v33);
                }
                int v38 = *(void **)(*((void *)&v121 + 1) + 8 * i);
                double v39 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v38, "stateType"));
                [v32 setObject:v38 forKeyedSubscript:v39];
              }
              uint64_t v35 = [v33 countByEnumeratingWithState:&v121 objects:v130 count:16];
            }
            while (v35);
          }

          uint64_t v40 = (void *)[v32 copy];
          id v27 = v109;
          id v15 = v99;
        }
        else
        {
          uint64_t v40 = 0;
        }
        id v41 = NSNumber;
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        uint64_t v43 = objc_msgSend(v41, "numberWithInt:", objc_msgSend(v42, "logMsgStateTypeForType:", 30));

        id v107 = v40;
        uint64_t v44 = [v40 objectForKeyedSubscript:v43];
        unint64_t v45 = v44;
        if (v44)
        {
          id v103 = v44;
          unint64_t v46 = 0x265344000;
        }
        else
        {
          unint64_t v46 = 0x265344000uLL;
          uint64_t v47 = +[GEOAPStateFactory sharedFactory];
          id v103 = [v47 stateForType:30];
        }
        unint64_t v48 = NSNumber;
        int v49 = [*(id *)(v46 + 3384) sharedFactory];
        uint64_t v50 = objc_msgSend(v48, "numberWithInt:", objc_msgSend(v49, "logMsgStateTypeForType:", 0));

        int v51 = [v107 objectForKeyedSubscript:v50];
        id v52 = v51;
        if (v51)
        {
          id v102 = v51;
        }
        else
        {
          unint64_t v53 = [*(id *)(v46 + 3384) sharedFactory];
          id v102 = [v53 stateForType:0];
        }
        id v16 = v106;

        uint64_t v54 = NSNumber;
        uint64_t v55 = [*(id *)(v46 + 3384) sharedFactory];
        objc_msgSend(v54, "numberWithInt:", objc_msgSend(v55, "logMsgStateTypeForType:", 3));
        uint64_t v57 = v56 = v46;

        unint64_t v58 = [v107 objectForKeyedSubscript:v57];
        double v59 = v58;
        if (v58)
        {
          id v101 = v58;
          unint64_t v60 = v56;
        }
        else
        {
          [*(id *)(v56 + 3384) sharedFactory];
          unint64_t v61 = v60 = v56;
          id v101 = [v61 stateForType:3];
        }
        uint64_t v62 = NSNumber;
        uint64_t v63 = [*(id *)(v60 + 3384) sharedFactory];
        uint64_t v64 = objc_msgSend(v62, "numberWithInt:", objc_msgSend(v63, "logMsgStateTypeForType:", 42));

        id v65 = v107;
        id v66 = [v107 objectForKeyedSubscript:v64];
        uint64_t v67 = v66;
        if (v66)
        {
          id v100 = v66;
        }
        else
        {
          [*(id *)(v60 + 3384) sharedFactory];
          uint64_t v69 = v68 = v64;
          id v100 = [v69 stateForType:42];

          uint64_t v64 = v68;
        }
        uint64_t v29 = v104;
        id v17 = v105;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v97 = v64;
          id v70 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v70 setEventType:47];
          id v71 = objc_alloc_init(MEMORY[0x263F41850]);
          [v70 setHardStop:v71];

          if (v27)
          {
            [v27 doubleValue];
            double v73 = v72;
            id v74 = [v70 hardStop];
            [v74 setScore:v73];
          }
          long long v119 = 0u;
          long long v120 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          id v75 = v15;
          uint64_t v76 = [v75 countByEnumeratingWithState:&v117 objects:v129 count:16];
          if (v76)
          {
            uint64_t v77 = v76;
            uint64_t v78 = *(void *)v118;
            do
            {
              for (uint64_t j = 0; j != v77; ++j)
              {
                if (*(void *)v118 != v78) {
                  objc_enumerationMutation(v75);
                }
                uint64_t v80 = *(void **)(*((void *)&v117 + 1) + 8 * j);
                id v81 = objc_msgSend(v70, "hardStop", v97);
                objc_msgSend(v81, "addDigits:", objc_msgSend(v80, "unsignedLongLongValue"));
              }
              uint64_t v77 = [v75 countByEnumeratingWithState:&v117 objects:v129 count:16];
            }
            while (v77);
          }

          uint64_t v82 = [v70 hardStop];
          long long v83 = [v82 cities];

          if (!v83)
          {
            uint64_t v84 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v106, "count"));
            id v85 = [v70 hardStop];
            [v85 setCities:v84];
          }
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          id v86 = v106;
          uint64_t v87 = [v86 countByEnumeratingWithState:&v113 objects:v128 count:16];
          if (v87)
          {
            uint64_t v88 = v87;
            uint64_t v89 = *(void *)v114;
            do
            {
              for (uint64_t k = 0; k != v88; ++k)
              {
                if (*(void *)v114 != v89) {
                  objc_enumerationMutation(v86);
                }
                uint64_t v91 = *(void **)(*((void *)&v113 + 1) + 8 * k);
                uint64_t v92 = objc_msgSend(v70, "hardStop", v97);
                uint64_t v93 = [v92 cities];
                long long v94 = (void *)[v91 copy];
                [v93 addObject:v94];
              }
              uint64_t v88 = [v86 countByEnumeratingWithState:&v113 objects:v128 count:16];
            }
            while (v88);
          }

          if (v103) {
            objc_msgSend(v70, "addLogMsgState:");
          }
          id v27 = v109;
          id v17 = v105;
          id v16 = v106;
          uint64_t v29 = v104;
          if (v102) {
            objc_msgSend(v70, "addLogMsgState:");
          }
          id v15 = v99;
          if (v101) {
            [v70 addLogMsgState:v101];
          }
          if (v100) {
            objc_msgSend(v70, "addLogMsgState:");
          }
          long long v95 = +[GEOAPStateFactory sharedFactory];
          v111[0] = MEMORY[0x263EF8330];
          v111[1] = 3221225472;
          v111[2] = __120__GEOAPPortal_captureHardStopWithScore_digits_cities_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v111[3] = &unk_265345680;
          id v112 = v70;
          id v96 = v70;
          [v95 sessionStateForType:7 callback:v111];

          id v65 = v107;
          uint64_t v64 = v98;
        }
        v22[2](v22);

LABEL_70:
        id v20 = v108;
        goto LABEL_71;
      }
    }
    else if (!v30)
    {
      goto LABEL_11;
    }
    v22[2](v22);
    goto LABEL_70;
  }
  id v25 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    id v26 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    uint64_t v132 = v26;
    _os_log_impl(&dword_24FE56000, v25, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v22[2](v22);
  id v27 = v109;
LABEL_72:
}

void __120__GEOAPPortal_captureHardStopWithScore_digits_cities_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __120__GEOAPPortal_captureHardStopWithScore_digits_cities_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_360()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201925 = [v6 containsObject:v8];
}

void __120__GEOAPPortal_captureHardStopWithScore_digits_cities_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (void)captureVlfUsageWithEntryPoint:(id)a3 sessionTimeMs:(id)a4 timeRoundedToHour:(id)a5 localizationDetails:(id)a6 finalState:(int)a7 postFusionCorrection:(id)a8 initialPositionContextClassification:(GEOVLFPositionContextClassification *)a9 initialLocation:(id)a10 initializationFailureDetails:(id)a11 arStates:(id)a12 deviceOrientations:(id)a13 crowdsourcingDetails:(id)a14 arFailureTypes:(id)a15
{
  GEOVLFPositionContextClassification v15 = *a9;
  objc_msgSend(a1, "captureVlfUsageWithEntryPoint:sessionTimeMs:timeRoundedToHour:localizationDetails:finalState:postFusionCorrection:initialPositionContextClassification:initialLocation:initializationFailureDetails:arStates:deviceOrientations:crowdsourcingDetails:arFailureTypes:additionalStates:providedDropRate:completionQueue:completionBlock:", a3, a4, a5, a6, *(void *)&a7, a8, &v15, a10, a11, a12, a13, a14, a15, 0, 0,
    0,
    0);
}

+ (void)captureVlfUsageWithEntryPoint:(id)a3 sessionTimeMs:(id)a4 timeRoundedToHour:(id)a5 localizationDetails:(id)a6 finalState:(int)a7 postFusionCorrection:(id)a8 initialPositionContextClassification:(GEOVLFPositionContextClassification *)a9 initialLocation:(id)a10 initializationFailureDetails:(id)a11 arStates:(id)a12 deviceOrientations:(id)a13 crowdsourcingDetails:(id)a14 arFailureTypes:(id)a15 additionalStates:(id)a16 providedDropRate:(id)a17 completionQueue:(id)a18 completionBlock:(id)a19
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  id v154 = a3;
  id v23 = a4;
  id v24 = a5;
  id v25 = a6;
  id v26 = a8;
  id v153 = a10;
  id v152 = a11;
  id v156 = a12;
  id v155 = a13;
  id v27 = a14;
  id v28 = a15;
  id v157 = a16;
  id v158 = a17;
  id v29 = a18;
  id v30 = a19;
  v181[0] = MEMORY[0x263EF8330];
  v181[1] = 3221225472;
  v181[2] = __341__GEOAPPortal_captureVlfUsageWithEntryPoint_sessionTimeMs_timeRoundedToHour_localizationDetails_finalState_postFusionCorrection_initialPositionContextClassification_initialLocation_initializationFailureDetails_arStates_deviceOrientations_crowdsourcingDetails_arFailureTypes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
  v181[3] = &unk_265345530;
  id v151 = v30;
  id v183 = v151;
  id v31 = v29;
  id v182 = v31;
  id v32 = (void (**)(void))MEMORY[0x25337B980](v181);
  id v33 = +[GEOAPServiceManager sharedManager];
  int v34 = [v33 eventCollectionIsDisabledForCurrentProcess];

  if (!v34)
  {
    if (qword_26B201AC8 != -1) {
      dispatch_once(&qword_26B201AC8, &__block_literal_global_369);
    }
    if (byte_26B201926)
    {
      v32[2](v32);
      goto LABEL_85;
    }
    id v146 = v27;
    id v150 = v26;
    int v38 = [MEMORY[0x263F41770] sharedConfiguration];
    double v39 = [v38 countryCode];

    int v40 = [a1 isDisabledEvent:@"vlfUsage" inCountry:v39];
    if (_GEOConfigHasValue())
    {
      if ((GEOConfigGetBOOL() & 1) == 0)
      {
LABEL_11:
        id v145 = v25;
        if (v158) {
          [v158 doubleValue];
        }
        else {
          GEOConfigGetDouble();
        }
        id v27 = v146;
        if (v41 != 0.0 && v41 >= (double)arc4random() / 4294967300.0)
        {
          v32[2](v32);
LABEL_84:

          goto LABEL_85;
        }
        id v144 = v39;
        id v138 = v24;
        id v139 = v23;
        id v137 = v28;
        if ([v157 count])
        {
          uint64_t v42 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v157, "count"));
          long long v177 = 0u;
          long long v178 = 0u;
          long long v179 = 0u;
          long long v180 = 0u;
          id v43 = v157;
          uint64_t v44 = [v43 countByEnumeratingWithState:&v177 objects:v187 count:16];
          if (v44)
          {
            uint64_t v45 = v44;
            uint64_t v46 = *(void *)v178;
            do
            {
              for (uint64_t i = 0; i != v45; ++i)
              {
                if (*(void *)v178 != v46) {
                  objc_enumerationMutation(v43);
                }
                unint64_t v48 = *(void **)(*((void *)&v177 + 1) + 8 * i);
                int v49 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v48, "stateType"));
                [v42 setObject:v48 forKeyedSubscript:v49];
              }
              uint64_t v45 = [v43 countByEnumeratingWithState:&v177 objects:v187 count:16];
            }
            while (v45);
          }

          uint64_t v50 = (void *)[v42 copy];
          id v24 = v138;
          id v23 = v139;
          id v28 = v137;
        }
        else
        {
          uint64_t v50 = 0;
        }
        id v149 = v50;
        int v51 = NSNumber;
        id v52 = +[GEOAPStateFactory sharedFactory];
        unint64_t v53 = objc_msgSend(v51, "numberWithInt:", objc_msgSend(v52, "logMsgStateTypeForType:", 30));

        uint64_t v54 = [v50 objectForKeyedSubscript:v53];
        uint64_t v55 = v54;
        if (v54)
        {
          id v143 = v54;
          unint64_t v56 = 0x265344000;
        }
        else
        {
          unint64_t v56 = 0x265344000uLL;
          uint64_t v57 = +[GEOAPStateFactory sharedFactory];
          id v143 = [v57 stateForType:30];
        }
        unint64_t v58 = NSNumber;
        [*(id *)(v56 + 3384) sharedFactory];
        unint64_t v60 = v59 = v56;
        uint64_t v61 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 0));

        id v140 = (void *)v61;
        uint64_t v62 = [v149 objectForKeyedSubscript:v61];
        uint64_t v63 = v62;
        if (v62)
        {
          id v142 = v62;
        }
        else
        {
          uint64_t v64 = [*(id *)(v59 + 3384) sharedFactory];
          id v142 = [v64 stateForType:0];
        }
        id v65 = NSNumber;
        id v66 = [*(id *)(v59 + 3384) sharedFactory];
        uint64_t v67 = objc_msgSend(v65, "numberWithInt:", objc_msgSend(v66, "logMsgStateTypeForType:", 3));

        id v68 = [v149 objectForKeyedSubscript:v67];
        uint64_t v69 = v68;
        if (v68)
        {
          id v141 = v68;
        }
        else
        {
          id v70 = +[GEOAPStateFactory sharedFactory];
          id v141 = [v70 stateForType:3];
        }
        double v39 = v144;

        id v71 = NSNumber;
        double v72 = +[GEOAPStateFactory sharedFactory];
        double v73 = objc_msgSend(v71, "numberWithInt:", objc_msgSend(v72, "logMsgStateTypeForType:", 42));

        id v74 = [v149 objectForKeyedSubscript:v73];
        id v75 = v74;
        if (v74)
        {
          id v76 = v74;
        }
        else
        {
          +[GEOAPStateFactory sharedFactory];
          v78 = uint64_t v77 = v73;
          id v76 = [v78 stateForType:42];

          double v73 = v77;
        }
        id v25 = v145;

        if ((GEOConfigGetBOOL() & 1) == 0)
        {
          id v135 = v76;
          id v136 = v73;
          id v79 = objc_alloc_init(MEMORY[0x263F417E8]);
          [v79 setEventType:48];
          id v80 = objc_alloc_init(MEMORY[0x263F41968]);
          [v79 setVlfUsage:v80];

          id v81 = [v79 vlfUsage];
          [v81 setEntryPoint:v154];

          if (v23)
          {
            uint64_t v82 = [v23 unsignedLongLongValue];
            long long v83 = [v79 vlfUsage];
            [v83 setSessionTimeMs:v82];
          }
          if (v24)
          {
            uint64_t v84 = [v24 unsignedLongLongValue];
            id v85 = [v79 vlfUsage];
            [v85 setTimeRoundedToHour:v84];
          }
          id v86 = objc_msgSend(v79, "vlfUsage", a9);
          uint64_t v87 = [v86 localizationDetails];

          if (!v87)
          {
            uint64_t v88 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v145, "count"));
            uint64_t v89 = [v79 vlfUsage];
            [v89 setLocalizationDetails:v88];
          }
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          id v90 = v145;
          uint64_t v91 = [v90 countByEnumeratingWithState:&v173 objects:v186 count:16];
          if (v91)
          {
            uint64_t v92 = v91;
            uint64_t v93 = *(void *)v174;
            do
            {
              for (uint64_t j = 0; j != v92; ++j)
              {
                if (*(void *)v174 != v93) {
                  objc_enumerationMutation(v90);
                }
                long long v95 = *(void **)(*((void *)&v173 + 1) + 8 * j);
                id v96 = [v79 vlfUsage];
                id v97 = [v96 localizationDetails];
                id v98 = (void *)[v95 copy];
                [v97 addObject:v98];
              }
              uint64_t v92 = [v90 countByEnumeratingWithState:&v173 objects:v186 count:16];
            }
            while (v92);
          }

          id v99 = [v79 vlfUsage];
          [v99 setFinalState:a7];

          id v100 = [v79 vlfUsage];
          [v100 setPostFusionCorrection:v150];

          long long v171 = *v134;
          uint64_t v172 = *((void *)v134 + 2);
          id v101 = [v79 vlfUsage];
          long long v169 = v171;
          uint64_t v170 = v172;
          [v101 setInitialPositionContextClassification:&v169];

          id v102 = [v79 vlfUsage];
          [v102 setInitialLocation:v153];

          id v103 = [v79 vlfUsage];
          [v103 setInitializationFailureDetails:v152];

          uint64_t v104 = [v79 vlfUsage];
          id v105 = [v104 arStates];

          if (!v105)
          {
            uint64_t v106 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v156, "count"));
            id v107 = [v79 vlfUsage];
            [v107 setArStates:v106];
          }
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          id v108 = v156;
          uint64_t v109 = [v108 countByEnumeratingWithState:&v165 objects:v185 count:16];
          if (v109)
          {
            uint64_t v110 = v109;
            uint64_t v111 = *(void *)v166;
            do
            {
              for (uint64_t k = 0; k != v110; ++k)
              {
                if (*(void *)v166 != v111) {
                  objc_enumerationMutation(v108);
                }
                long long v113 = *(void **)(*((void *)&v165 + 1) + 8 * k);
                long long v114 = [v79 vlfUsage];
                long long v115 = [v114 arStates];
                long long v116 = (void *)[v113 copy];
                [v115 addObject:v116];
              }
              uint64_t v110 = [v108 countByEnumeratingWithState:&v165 objects:v185 count:16];
            }
            while (v110);
          }

          long long v117 = [v79 vlfUsage];
          long long v118 = [v117 deviceOrientations];

          if (!v118)
          {
            long long v119 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v155, "count"));
            long long v120 = [v79 vlfUsage];
            [v120 setDeviceOrientations:v119];
          }
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          id v121 = v155;
          uint64_t v122 = [v121 countByEnumeratingWithState:&v161 objects:v184 count:16];
          if (v122)
          {
            uint64_t v123 = v122;
            uint64_t v124 = *(void *)v162;
            do
            {
              for (uint64_t m = 0; m != v123; ++m)
              {
                if (*(void *)v162 != v124) {
                  objc_enumerationMutation(v121);
                }
                id v126 = *(void **)(*((void *)&v161 + 1) + 8 * m);
                id v127 = [v79 vlfUsage];
                id v128 = [v127 deviceOrientations];
                id v129 = (void *)[v126 copy];
                [v128 addObject:v129];
              }
              uint64_t v123 = [v121 countByEnumeratingWithState:&v161 objects:v184 count:16];
            }
            while (v123);
          }

          uint64_t v130 = [v79 vlfUsage];
          [v130 setCrowdsourcingDetails:v146];

          uint64_t v131 = [v79 vlfUsage];
          id v28 = v137;
          [v131 setArFailureTypes:v137];

          if (v143) {
            objc_msgSend(v79, "addLogMsgState:");
          }
          id v24 = v138;
          id v23 = v139;
          double v39 = v144;
          id v76 = v135;
          if (v142) {
            objc_msgSend(v79, "addLogMsgState:");
          }
          if (v141) {
            [v79 addLogMsgState:v141];
          }
          if (v135) {
            [v79 addLogMsgState:v135];
          }
          uint64_t v132 = +[GEOAPStateFactory sharedFactory];
          v159[0] = MEMORY[0x263EF8330];
          v159[1] = 3221225472;
          v159[2] = __341__GEOAPPortal_captureVlfUsageWithEntryPoint_sessionTimeMs_timeRoundedToHour_localizationDetails_finalState_postFusionCorrection_initialPositionContextClassification_initialLocation_initializationFailureDetails_arStates_deviceOrientations_crowdsourcingDetails_arFailureTypes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
          v159[3] = &unk_265345680;
          id v160 = v79;
          id v133 = v79;
          [v132 sessionStateForType:7 callback:v159];

          id v25 = v145;
          double v73 = v136;
        }
        v32[2](v32);

LABEL_83:
        id v26 = v150;
        id v27 = v146;
        goto LABEL_84;
      }
    }
    else if (!v40)
    {
      goto LABEL_11;
    }
    v32[2](v32);
    goto LABEL_83;
  }
  id v35 = v27;
  uint64_t v36 = GEOGetGEOAPPortalAnalyticsLog();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    id v37 = GEOApplicationIdentifierOrProcessName();
    *(_DWORD *)buf = 138412290;
    id v189 = v37;
    _os_log_impl(&dword_24FE56000, v36, OS_LOG_TYPE_DEBUG, "collection is disabled for current process (%@)", buf, 0xCu);
  }
  v32[2](v32);
  id v27 = v35;
LABEL_85:
}

void __341__GEOAPPortal_captureVlfUsageWithEntryPoint_sessionTimeMs_timeRoundedToHour_localizationDetails_finalState_postFusionCorrection_initialPositionContextClassification_initialLocation_initializationFailureDetails_arStates_deviceOrientations_crowdsourcingDetails_arFailureTypes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      id v4 = v3;
      uint64_t v1 = *(void **)(a1 + 40);
    }
    else
    {
      id v4 = dispatch_get_global_queue(21, 0);
    }
    uint64_t v5 = v4;
    dispatch_async(v4, v1);
  }
}

void __341__GEOAPPortal_captureVlfUsageWithEntryPoint_sessionTimeMs_timeRoundedToHour_localizationDetails_finalState_postFusionCorrection_initialPositionContextClassification_initialLocation_initializationFailureDetails_arStates_deviceOrientations_crowdsourcingDetails_arFailureTypes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_367()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  GEOConfigGetArray();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  id v2 = v0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v0);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          id v2 = (void *)MEMORY[0x263EFFA68];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    id v2 = v0;
  }
LABEL_11:

  id v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", v2, v9);
  id v7 = [MEMORY[0x263F41B90] sharedPlatform];
  id v8 = [v7 hardwareIdentifier];
  byte_26B201926 = [v6 containsObject:v8];
}

void __341__GEOAPPortal_captureVlfUsageWithEntryPoint_sessionTimeMs_timeRoundedToHour_localizationDetails_finalState_postFusionCorrection_initialPositionContextClassification_initialLocation_initializationFailureDetails_arStates_deviceOrientations_crowdsourcingDetails_arFailureTypes_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    [*(id *)(a1 + 32) addLogMsgState:v4];
  }
  GEOConfigGetString();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (([v3 isEqualToString:@"UNSPECIFIED"] & 1) == 0
    && ([v3 isEqualToString:@"LOW_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGH_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"HIGHEST_COST_7D"] & 1) == 0
    && ([v3 isEqualToString:@"MED_COST_90D"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_00"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_01"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_02"] & 1) == 0
    && ([v3 isEqualToString:@"UP_POLICY_03"] & 1) == 0
    && ([v3 isEqualToString:@"POI_BUSYNESS_POLICY"] & 1) == 0)
  {
    [v3 isEqualToString:@"END_SENTINEL"];
  }

  +[GEOAPPortal reportLogMsgEvent:*(void *)(a1 + 32) uploadBatchId:GEOMakeGEOAPBatchID() completion:0 completionQueue:0];
}

+ (BOOL)permittedToCountAC
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)&permittedToCountAC_windowStart + 10.0;
  if (*(double *)&permittedToCountAC_windowStart + 10.0 <= Current) {
    permittedToCountAC_windowStart = *(void *)&Current;
  }
  return v3 <= Current;
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(int)a6 moduleMetadata:(id)a7
{
  uint64_t v7 = *(void *)&a6;
  uint64_t v9 = *(void *)&a4;
  uint64_t v10 = *(void *)&a3;
  long long v12 = NSNumber;
  id v13 = a7;
  id v14 = a5;
  id v15 = [v12 numberWithInt:v7];
  [a1 captureUserAction:v10 target:v9 value:v14 moduleType:v15 moduleMetadata:v13 richProviderId:0 additionalStates:0 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 actionRichProviderId:(id)a6
{
}

+ (id)_netEventHandlingConfig
{
  if (qword_26B201AF8 != -1) {
    dispatch_once(&qword_26B201AF8, &__block_literal_global_4);
  }
  id v2 = (void *)_MergedGlobals_5;
  return v2;
}

void __52__GEOAPPortal_NetworkEvent___netEventHandlingConfig__block_invoke()
{
  v86[3] = *MEMORY[0x263EF8340];
  objc_storeStrong((id *)&qword_26B201B00, (id)*MEMORY[0x263F416F0]);
  uint64_t v0 = GEOConfigGetDictionary();
  uint64_t v1 = (void *)_MergedGlobals_5;
  _MergedGlobals_5 = v0;

  if (!_MergedGlobals_5)
  {
    v85[0] = qword_26B201B00;
    v83[0] = @"TILE";
    id v79 = @"dropRate";
    id v80 = &unk_270161A48;
    v81[0] = @"error";
    id v30 = [NSDictionary dictionaryWithObjects:&v80 forKeys:&v79 count:1];
    v81[1] = @"success";
    v82[0] = v30;
    uint64_t v77 = @"dropRate";
    uint64_t v78 = &unk_270161A48;
    id v29 = [NSDictionary dictionaryWithObjects:&v78 forKeys:&v77 count:1];
    v82[1] = v29;
    id v28 = [NSDictionary dictionaryWithObjects:v82 forKeys:v81 count:2];
    v83[1] = @"any";
    v84[0] = v28;
    v75[0] = @"error";
    double v73 = @"dropRate";
    id v74 = &unk_270161A58;
    id v27 = [NSDictionary dictionaryWithObjects:&v74 forKeys:&v73 count:1];
    v76[0] = v27;
    v75[1] = @"success";
    id v71 = @"dropRate";
    double v72 = &unk_270161A58;
    id v26 = [NSDictionary dictionaryWithObjects:&v72 forKeys:&v71 count:1];
    v76[1] = v26;
    id v25 = [NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:2];
    v84[1] = v25;
    id v24 = [NSDictionary dictionaryWithObjects:v84 forKeys:v83 count:2];
    v86[0] = v24;
    v85[1] = @"com.apple.geod";
    v69[0] = @"RESOURCE_LOADER";
    v67[0] = @"error";
    id v65 = @"dropRate";
    id v66 = &unk_270161A58;
    id v23 = [NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
    v68[0] = v23;
    v67[1] = @"success";
    uint64_t v63 = @"dropRate";
    uint64_t v64 = &unk_270161A58;
    id v22 = [NSDictionary dictionaryWithObjects:&v64 forKeys:&v63 count:1];
    v68[1] = v22;
    id v21 = [NSDictionary dictionaryWithObjects:v68 forKeys:v67 count:2];
    v70[0] = v21;
    v69[1] = @"NETWORK_DEFAULTS";
    unint64_t v60 = &unk_270161A48;
    v61[0] = @"error";
    unint64_t v59 = @"dropRate";
    id v20 = [NSDictionary dictionaryWithObjects:&v60 forKeys:&v59 count:1];
    v61[1] = @"success";
    v62[0] = v20;
    uint64_t v57 = @"dropRate";
    unint64_t v58 = &unk_270161A48;
    id v19 = [NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
    v62[1] = v19;
    id v18 = [NSDictionary dictionaryWithObjects:v62 forKeys:v61 count:2];
    v70[1] = v18;
    v69[2] = @"TILE";
    uint64_t v54 = &unk_270161A48;
    v55[0] = @"error";
    unint64_t v53 = @"dropRate";
    id v17 = [NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1];
    v55[1] = @"success";
    v56[0] = v17;
    int v51 = @"dropRate";
    id v52 = &unk_270161A48;
    id v16 = [NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
    v56[1] = v16;
    id v15 = [NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:2];
    v70[2] = v15;
    v69[3] = @"any";
    unint64_t v48 = &unk_270161A58;
    v49[0] = @"error";
    uint64_t v47 = @"dropRate";
    id v14 = [NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
    v49[1] = @"success";
    v50[0] = v14;
    uint64_t v45 = @"dropRate";
    uint64_t v46 = &unk_270161A58;
    id v13 = [NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    v50[1] = v13;
    long long v12 = [NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:2];
    v70[3] = v12;
    id v2 = [NSDictionary dictionaryWithObjects:v70 forKeys:v69 count:4];
    v86[1] = v2;
    v85[2] = @"default";
    v43[0] = @"TILE";
    int v40 = &unk_270161A48;
    v41[0] = @"error";
    double v39 = @"dropRate";
    double v3 = [NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
    v41[1] = @"success";
    v42[0] = v3;
    id v37 = @"dropRate";
    int v38 = &unk_270161A48;
    id v4 = [NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    v42[1] = v4;
    uint64_t v5 = [NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:2];
    v43[1] = @"any";
    v44[0] = v5;
    int v34 = &unk_270161A58;
    v35[0] = @"error";
    id v33 = @"dropRate";
    id v6 = [NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    v35[1] = @"success";
    v36[0] = v6;
    id v31 = @"dropRate";
    id v32 = &unk_270161A58;
    uint64_t v7 = [NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    v36[1] = v7;
    id v8 = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
    v44[1] = v8;
    uint64_t v9 = [NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:2];
    v86[2] = v9;
    uint64_t v10 = [NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:3];
    long long v11 = (void *)_MergedGlobals_5;
    _MergedGlobals_5 = v10;
  }
}

+ (void)captureNetworkEventForDataRequestKind:(id)a3 networkService:(int)a4 usedBackgroundURL:(id)a5 requestAppIdentifier:(id)a6 appMajorVersion:(id)a7 appMinorVersion:(id)a8 error:(id)a9 clientMetrics:(id)a10 states:(id)a11
{
  uint64_t v14 = *(void *)&a4;
  uint64_t v103 = *MEMORY[0x263EF8340];
  id v97 = a5;
  id v16 = a6;
  id v95 = a7;
  id v94 = a8;
  id v17 = a9;
  id v18 = a10;
  id v93 = a11;
  id v19 = [v18 networkMetrics];
  [v19 requestEnd];
  double v21 = v20;
  id v22 = [v18 networkMetrics];
  [v22 requestStart];
  double v24 = (v21 - v23) * 1000.0;

  id v25 = [(id)objc_opt_class() _netEventHandlingConfig];
  id v96 = v16;
  id v26 = [v25 objectForKeyedSubscript:v16];
  id v79 = v25;
  if (v26
    || ([v25 objectForKeyedSubscript:@"default"],
        (id v26 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    if v14 < 0x1D && ((0x1FFF7FFFu >> v14))
    {
      id v27 = off_2653456A0[(int)v14];
    }
    else
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", v14);
      id v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    id v28 = [v26 objectForKeyedSubscript:v27];
    uint64_t v78 = v26;
    if (v28
      || ([v26 objectForKeyedSubscript:@"any"],
          (id v28 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      if (v17) {
        id v29 = @"error";
      }
      else {
        id v29 = @"success";
      }
      id v30 = [v28 objectForKeyedSubscript:v29];
      id v31 = v30;
      if (v30)
      {
        id v32 = [v30 objectForKeyedSubscript:@"dropRate"];
        [v32 doubleValue];
        double v34 = v33;
      }
      else
      {
        double v34 = 0.0;
      }
    }
    else
    {
      double v34 = 0.0;
    }
  }
  else
  {
    uint64_t v78 = 0;
    double v34 = 0.0;
  }
  uint64_t v35 = (int)v24;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v36 = [v18 networkMetrics];
  id v37 = [v36 transactionMetrics];
  int v38 = [v37 reverseObjectEnumerator];

  uint64_t v39 = [v38 countByEnumeratingWithState:&v98 objects:v102 count:16];
  uint64_t v77 = v14;
  if (v39)
  {
    uint64_t v40 = v39;
    unsigned int v86 = (int)v24;
    double v41 = v18;
    uint64_t v42 = 0;
    uint64_t v43 = *(void *)v99;
    do
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v99 != v43) {
          objc_enumerationMutation(v38);
        }
        uint64_t v45 = *(void **)(*((void *)&v98 + 1) + 8 * i);
        if ([v45 resourceFetchType])
        {
          id v46 = v45;

          uint64_t v42 = v46;
        }
      }
      uint64_t v40 = [v38 countByEnumeratingWithState:&v98 objects:v102 count:16];
    }
    while (v40);

    if (!v42)
    {
      int v76 = 0;
      uint64_t v91 = 0;
      id v92 = 0;
      id v88 = 0;
      id v89 = 0;
      id v90 = 0;
      id v18 = v41;
      uint64_t v35 = v86;
      goto LABEL_48;
    }
    id v18 = v41;
    if (a3.var0 == 256)
    {
      if (HIDWORD(*(unint64_t *)&a3) != 57)
      {
        id v92 = (id)[objc_alloc(MEMORY[0x263F41B48]) initWithClientNetworkTransactionMetrics:v42];
        uint64_t v47 = NSNumber;
        unint64_t v48 = [v41 networkMetrics];
        [v48 requestStart];
        uint64_t v91 = objc_msgSend(v47, "numberWithDouble:");

        int v49 = NSNumber;
        uint64_t v50 = [v41 networkMetrics];
        [v50 requestEnd];
        id v90 = objc_msgSend(v49, "numberWithDouble:");

        goto LABEL_37;
      }
      id v92 = 0;
    }
    else
    {
      id v92 = objc_alloc_init(MEMORY[0x263F41B48]);
      objc_msgSend(v92, "setReusedConnection:", objc_msgSend(v42, "reusedConnection"));
    }
    id v90 = 0;
    uint64_t v91 = 0;
LABEL_37:
    uint64_t v35 = v86;
    int v51 = [v42 isMultipath];
    id v52 = (void *)MEMORY[0x263EFFA88];
    if (v51) {
      unint64_t v53 = (void *)MEMORY[0x263EFFA88];
    }
    else {
      unint64_t v53 = 0;
    }
    id v89 = v53;
    int v54 = [v42 multipathServiceType];
    if ((v54 - 1) >= 3) {
      int v55 = 0;
    }
    else {
      int v55 = v54;
    }
    int v76 = v55;
    int v38 = [v41 networkMetrics];
    if ([v38 rnfTriggered]) {
      unint64_t v56 = v52;
    }
    else {
      unint64_t v56 = 0;
    }
    id v88 = v56;
    goto LABEL_47;
  }
  uint64_t v42 = 0;
  int v76 = 0;
  uint64_t v91 = 0;
  id v92 = 0;
  id v88 = 0;
  id v89 = 0;
  id v90 = 0;
LABEL_47:

LABEL_48:
  uint64_t v87 = [v17 domain];
  id v81 = v17;
  if (v17)
  {
    uint64_t v82 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v17, "code"));
  }
  else
  {
    uint64_t v82 = 0;
  }
  uint64_t v57 = NSNumber;
  id v75 = [v18 networkMetrics];
  id v85 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v75, "requestDataSize"));
  unint64_t v58 = NSNumber;
  id v74 = [v18 networkMetrics];
  uint64_t v84 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v74, "responseDataSize"));
  long long v83 = [NSNumber numberWithInt:v35];
  double v73 = [v18 networkMetrics];
  int v59 = [v73 httpResponseCode];
  if (v59)
  {
    unint64_t v60 = NSNumber;
    double v72 = [v18 networkMetrics];
    uint64_t v61 = objc_msgSend(v60, "numberWithInt:", objc_msgSend(v72, "httpResponseCode"));
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v62 = [v18 networkMetrics];
  uint64_t v63 = [v62 serviceIpAddress];
  int v64 = [v18 hasQueuedTime];
  if (v64)
  {
    id v65 = NSNumber;
    [v18 queuedTime];
    id v66 = objc_msgSend(v65, "numberWithDouble:");
  }
  else
  {
    id v66 = 0;
  }
  uint64_t v67 = NSNumber;
  id v80 = v18;
  id v68 = [v18 networkMetrics];
  uint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "redirectCount"));
  id v70 = [NSNumber numberWithDouble:v34];
  LODWORD(v71) = v76;
  +[GEOAPPortal captureNetEventWithNetworkService:requestAppIdentifier:requestAppIdMajorVer:requestAppIdMinorVer:requestErrorDomain:requestErrorCode:requestDataSize:responseDataSize:totalTime:httpResponseCode:serviceIpAddress:taskMetrics:mptcpServiceType:mptcpNegotiated:rnfTriggered:queuedTime:redirectCount:requestStart:requestEnd:wasBackground:additionalStates:providedDropRate:completionQueue:completionBlock:](GEOAPPortal, "captureNetEventWithNetworkService:requestAppIdentifier:requestAppIdMajorVer:requestAppIdMinorVer:requestErrorDomain:requestErrorCode:requestDataSize:responseDataSize:totalTime:httpResponseCode:serviceIpAddress:taskMetrics:mptcpServiceType:mptcpNegotiated:rnfTriggered:queuedTime:redirectCount:requestStart:requestEnd:wasBackground:additionalStates:providedDropRate:completionQueue:completionBlock:", v77, v96, v95, v94, v87, v82, v85, v84, v83, v61, v63, v92, v71, v89,
    v88,
    v66,
    v69,
    v91,
    v90,
    v97,
    v93,
    v70,
    0,
    0);

  if (v64) {
  if (v59)
  }
  {
  }
  if (v81) {
}
  }

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 mapRegion:(id)a6 zoomLevel:(double)a7 mapType:(int)a8
{
  uint64_t v11 = *(void *)&a4;
  uint64_t v12 = *(void *)&a3;
  id v13 = a6;
  id v14 = a5;
  id v15 = +[GEOAPSharedStateData sharedData];
  uint64_t v18 = MEMORY[0x263EF8330];
  uint64_t v19 = 3221225472;
  double v20 = __86__GEOAPPortal_UserAction__captureUserAction_target_value_mapRegion_zoomLevel_mapType___block_invoke;
  double v21 = &unk_265345790;
  id v22 = v15;
  id v23 = v13;
  double v24 = a7;
  int v25 = a8;
  id v16 = v13;
  id v17 = v15;
  [v17 performMapViewStateUpdate:&v18];
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v12, v11, v14, v18, v19, v20, v21);
}

uint64_t __86__GEOAPPortal_UserAction__captureUserAction_target_value_mapRegion_zoomLevel_mapType___block_invoke(uint64_t a1)
{
  id v2 = (void *)[*(id *)(a1 + 40) copy];
  [*(id *)(a1 + 32) setMapViewMapRegion:v2];

  [*(id *)(a1 + 32) setMapViewZoomLevel:*(double *)(a1 + 48)];
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  id v4 = *(void **)(a1 + 32);
  return [v4 setMapViewMapType:v3];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 placeActionDetails:(id)a6 mapRegion:(id)a7 zoomLevel:(double)a8 mapType:(int)a9
{
  uint64_t v13 = *(void *)&a4;
  uint64_t v14 = *(void *)&a3;
  id v15 = a6;
  id v16 = a7;
  id v17 = a5;
  uint64_t v18 = +[GEOAPSharedStateData sharedData];
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  v31[2] = __105__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails_mapRegion_zoomLevel_mapType___block_invoke;
  v31[3] = &unk_265345350;
  id v19 = v18;
  id v32 = v19;
  id v33 = v15;
  id v20 = v15;
  [v19 performPlaceCardStateUpdate:v31];
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 3221225472;
  int v25 = __105__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails_mapRegion_zoomLevel_mapType___block_invoke_2;
  id v26 = &unk_265345790;
  id v27 = v19;
  id v28 = v16;
  double v29 = a8;
  int v30 = a9;
  id v21 = v16;
  id v22 = v19;
  [v22 performMapViewStateUpdate:&v23];
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v14, v13, v17, v23, v24, v25, v26);
}

uint64_t __105__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails_mapRegion_zoomLevel_mapType___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) populateWithPlaceActionDetails:*(void *)(a1 + 40)];
}

uint64_t __105__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails_mapRegion_zoomLevel_mapType___block_invoke_2(uint64_t a1)
{
  id v2 = (void *)[*(id *)(a1 + 40) copy];
  [*(id *)(a1 + 32) setMapViewMapRegion:v2];

  [*(id *)(a1 + 32) setMapViewZoomLevel:*(double *)(a1 + 48)];
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  id v4 = *(void **)(a1 + 32);
  return [v4 setMapViewMapType:v3];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 placeActionDetails:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  id v9 = a6;
  id v10 = a5;
  uint64_t v11 = +[GEOAPSharedStateData sharedData];
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 3221225472;
  id v16 = __77__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails___block_invoke;
  id v17 = &unk_265345350;
  id v18 = v11;
  id v19 = v9;
  id v12 = v9;
  id v13 = v11;
  [v13 performPlaceCardStateUpdate:&v14];
  +[GEOAPPortal captureUserAction:target:value:](GEOAPPortal, "captureUserAction:target:value:", v8, v7, v10, v14, v15, v16, v17);
}

uint64_t __77__GEOAPPortal_UserAction__captureUserAction_target_value_placeActionDetails___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) populateWithPlaceActionDetails:*(void *)(a1 + 40)];
}

+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 actionURL:(id)a12 photoID:(id)a13 placeCardType:(int)a14 localizedMapItemCategory:(id)a15 availableActions:(id)a16 unactionableUIElements:(id)a17 commingledRichProviderIds:(id)a18
{
  LODWORD(v18) = a14;
  objc_msgSend(a1, "capturePlaceCardUserAction:target:value:mapItem:timestamp:resultIndex:targetID:providerID:animationID:actionURL:photoID:placeCardType:localizedMapItemCategory:availableActions:unactionableUIElements:modules:commingledRichProviderIds:actionRichProviderId:", *(void *)&a3, *(void *)&a4, a5, a6, *(void *)&a8, a9, a7, a10, a11, a12, a13, v18, a15, a16, a17,
    0,
    a18,
    0);
}

+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 actionURL:(id)a12 photoID:(id)a13 placeCardType:(int)a14 localizedMapItemCategory:(id)a15 availableActions:(id)a16 unactionableUIElements:(id)a17 modules:(id)a18 commingledRichProviderIds:(id)a19 actionRichProviderId:(id)a20
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  id v77 = a5;
  id v21 = a10;
  id v22 = a12;
  id v23 = a13;
  id v78 = a15;
  id v24 = a16;
  id v25 = a17;
  id v80 = a18;
  id v26 = a19;
  id v27 = a20;
  id v28 = [MEMORY[0x263F41B70] actionDetailsWithMapItem:a6 timestamp:a8 resultIndex:a9 targetID:a7];
  double v29 = v28;
  uint64_t v82 = v21;
  if (v21) {
    [v28 setRichProviderId:v21];
  }
  if (a11) {
    [v29 setAnimationID:a11];
  }
  if (v22) {
    [v29 setActionUrl:v22];
  }
  id v72 = v27;
  int v76 = v22;
  if (v23) {
    [v29 setPhotoId:v23];
  }
  id v74 = v23;
  id v30 = objc_alloc_init(MEMORY[0x263F41978]);
  [v30 setStateType:702];
  id v31 = objc_alloc_init(MEMORY[0x263F41A88]);
  [v30 setPlaceCard:v31];

  id v32 = [v30 placeCard];
  id v70 = v29;
  [v32 setPlaceActionDetails:v29];

  id v33 = [v30 placeCard];
  [v33 setPlacecardType:a14];

  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  id v34 = v24;
  uint64_t v35 = [v34 countByEnumeratingWithState:&v98 objects:v107 count:16];
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = *(void *)v99;
    do
    {
      for (uint64_t i = 0; i != v36; ++i)
      {
        if (*(void *)v99 != v37) {
          objc_enumerationMutation(v34);
        }
        uint64_t v39 = *(void **)(*((void *)&v98 + 1) + 8 * i);
        uint64_t v40 = [v30 placeCard];
        objc_msgSend(v40, "addPossibleAction:", objc_msgSend(v39, "intValue"));
      }
      uint64_t v36 = [v34 countByEnumeratingWithState:&v98 objects:v107 count:16];
    }
    while (v36);
  }

  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  id v41 = v25;
  uint64_t v42 = [v41 countByEnumeratingWithState:&v94 objects:v106 count:16];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = *(void *)v95;
    do
    {
      for (uint64_t j = 0; j != v43; ++j)
      {
        if (*(void *)v95 != v44) {
          objc_enumerationMutation(v41);
        }
        id v46 = *(void **)(*((void *)&v94 + 1) + 8 * j);
        uint64_t v47 = [v30 placeCard];
        objc_msgSend(v47, "addUnactionableUiElement:", objc_msgSend(v46, "intValue"));
      }
      uint64_t v43 = [v41 countByEnumeratingWithState:&v94 objects:v106 count:16];
    }
    while (v43);
  }

  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id v48 = v26;
  uint64_t v49 = [v48 countByEnumeratingWithState:&v90 objects:v105 count:16];
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = *(void *)v91;
    do
    {
      for (uint64_t k = 0; k != v50; ++k)
      {
        if (*(void *)v91 != v51) {
          objc_enumerationMutation(v48);
        }
        uint64_t v53 = *(void *)(*((void *)&v90 + 1) + 8 * k);
        int v54 = [v30 placeCard];
        [v54 addCommingledRichProviderIds:v53];
      }
      uint64_t v50 = [v48 countByEnumeratingWithState:&v90 objects:v105 count:16];
    }
    while (v50);
  }

  int v55 = [v30 placeCard];
  unint64_t v56 = v78;
  [v55 setPlacecardCategory:v78];

  uint64_t v57 = +[GEOAPSharedStateData sharedData];
  v87[0] = MEMORY[0x263EF8330];
  v87[1] = 3221225472;
  v87[2] = __281__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_actionURL_photoID_placeCardType_localizedMapItemCategory_availableActions_unactionableUIElements_modules_commingledRichProviderIds_actionRichProviderId___block_invoke;
  v87[3] = &unk_265345350;
  id v58 = v57;
  id v88 = v58;
  id v59 = v30;
  id v89 = v59;
  [v58 performPlaceCardStateUpdate:v87];
  if (a3 == 21)
  {
    unint64_t v60 = +[GEOAPSharedStateData sharedData];
    v84[0] = MEMORY[0x263EF8330];
    v84[1] = 3221225472;
    void v84[2] = __281__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_actionURL_photoID_placeCardType_localizedMapItemCategory_availableActions_unactionableUIElements_modules_commingledRichProviderIds_actionRichProviderId___block_invoke_2;
    v84[3] = &unk_265345350;
    uint64_t v61 = v80;
    id v85 = v80;
    id v62 = v59;
    id v86 = v62;
    [v60 performPlaceCardStateUpdate:v84];

    id v104 = v62;
    uint64_t v63 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v104 count:1];
    int v64 = v77;
    +[GEOAPPortal captureUserAction:21 target:a4 value:v77 moduleType:0 moduleMetadata:0 richProviderId:v72 additionalStates:v63 providedDropRate:0 completionQueue:0 completionBlock:0];

    id v65 = v72;
    id v66 = v85;
  }
  else if ([v80 count] == 1)
  {
    id v66 = [v80 firstObject];
    uint64_t v69 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v66, "type"));
    uint64_t v67 = [v66 metadata];
    id v103 = v59;
    id v68 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v103 count:1];
    int v64 = v77;
    id v65 = v72;
    +[GEOAPPortal captureUserAction:a3 target:a4 value:v77 moduleType:v69 moduleMetadata:v67 richProviderId:v72 additionalStates:v68 providedDropRate:0 completionQueue:0 completionBlock:0];

    uint64_t v61 = v80;
    unint64_t v56 = v78;
  }
  else
  {
    int v64 = v77;
    if ((unint64_t)[v80 count] >= 2
      && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_24FE56000, &_os_log_internal, OS_LOG_TYPE_FAULT, "Assertion failed: modules.count <= 1", buf, 2u);
    }
    id v102 = v59;
    id v66 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v102 count:1];
    id v65 = v72;
    +[GEOAPPortal captureUserAction:a3 target:a4 value:v77 moduleType:0 moduleMetadata:0 richProviderId:v72 additionalStates:v66 providedDropRate:0 completionQueue:0 completionBlock:0];
    uint64_t v61 = v80;
  }
}

void __281__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_actionURL_photoID_placeCardType_localizedMapItemCategory_availableActions_unactionableUIElements_modules_commingledRichProviderIds_actionRichProviderId___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasPlaceCardIsPersonPlacecard])
  {
    uint64_t v2 = [*(id *)(a1 + 32) placeCardIsPersonPlacecard];
    uint64_t v3 = [*(id *)(a1 + 40) placeCard];
    [v3 setIsPersonPlacecard:v2];
  }
  if ([*(id *)(a1 + 32) hasPlaceCardIsPersonLocationShared])
  {
    uint64_t v4 = [*(id *)(a1 + 32) placeCardIsPersonLocationShared];
    uint64_t v5 = [*(id *)(a1 + 40) placeCard];
    [v5 setIsPersonLocationShared:v4];
  }
  if ([*(id *)(a1 + 32) hasPlaceCardIsPersonAddressAvailable])
  {
    uint64_t v6 = [*(id *)(a1 + 32) placeCardIsPersonAddressAvailable];
    uint64_t v7 = [*(id *)(a1 + 40) placeCard];
    [v7 setIsPersonAddressAvailable:v6];
  }
  id v8 = [*(id *)(a1 + 40) placeCard];
  [*(id *)(a1 + 32) setPlaceCardState:v8];
}

void __281__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_actionURL_photoID_placeCardType_localizedMapItemCategory_availableActions_unactionableUIElements_modules_commingledRichProviderIds_actionRichProviderId___block_invoke_2(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * v6);
        id v8 = objc_alloc_init(MEMORY[0x263F41B78]);
        objc_msgSend(v8, "setType:", objc_msgSend(v7, "type", (void)v17));
        id v9 = [v7 metadata];
        [v8 setMetadata:v9];

        if ([v7 contentsCount])
        {
          unint64_t v10 = 0;
          do
            objc_msgSend(v8, "addContent:", objc_msgSend(v7, "contentAtIndex:", v10++));
          while (v10 < [v7 contentsCount]);
        }
        uint64_t v11 = [*(id *)(a1 + 40) placeCard];
        [v11 addModules:v8];

        ++v6;
      }
      while (v6 != v4);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v4);
  }

  id v12 = +[GEOAPStateFactory sharedFactory];
  id v13 = [v12 stateForType:18];

  uint64_t v14 = [v13 placeCard];

  if (v14)
  {
    uint64_t v15 = [*(id *)(a1 + 40) placeCard];
    id v16 = [v13 placeCard];
    [v15 mergeFrom:v16];
  }
}

+ (void)capturePlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 placeCardType:(int)a8 categoriesDisplayed:(id)a9 categorySelected:(id)a10
{
  uint64_t v11 = *(void *)&a8;
  uint64_t v56 = *MEMORY[0x263EF8340];
  id v14 = a5;
  id v15 = a6;
  id v16 = a9;
  id v17 = a10;
  if ([v16 containsObject:v17]) {
    uint64_t v18 = [v16 indexOfObject:v17];
  }
  else {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  uint64_t v19 = [MEMORY[0x263F41B70] actionDetailsWithMapItem:v15 timestamp:v18 resultIndex:0 targetID:a7];
  id v20 = objc_alloc_init(MEMORY[0x263F41978]);
  [v20 setStateType:702];
  id v21 = objc_alloc_init(MEMORY[0x263F41A88]);
  [v20 setPlaceCard:v21];

  uint64_t v22 = [v20 placeCard];
  uint64_t v45 = (void *)v19;
  [v22 setPlaceActionDetails:v19];

  id v23 = [v20 placeCard];
  [v23 setPlacecardType:v11];

  id v24 = +[GEOAPSharedStateData sharedData];
  v52[0] = MEMORY[0x263EF8330];
  v52[1] = 3221225472;
  v52[2] = __136__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_placeCardType_categoriesDisplayed_categorySelected___block_invoke;
  v52[3] = &unk_2653454E0;
  id v25 = v20;
  id v53 = v25;
  [v24 performPlaceCardStateUpdate:v52];

  id v26 = objc_alloc_init(MEMORY[0x263F41978]);
  [v26 setStateType:705];
  id v27 = objc_alloc_init(MEMORY[0x263F41A50]);
  [v26 setMapsServer:v27];

  if ([v16 count])
  {
    id v42 = v17;
    id v43 = v15;
    id v44 = v14;
    id v28 = objc_alloc_init(MEMORY[0x263F41B28]);
    double v29 = [v26 mapsServer];
    [v29 setServerMetadata:v28];

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v30 = v16;
    uint64_t v31 = [v30 countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v49;
      do
      {
        uint64_t v34 = 0;
        do
        {
          if (*(void *)v49 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = [*(id *)(*((void *)&v48 + 1) + 8 * v34) _suggestionEntryMetadata];
          if (v35)
          {
            uint64_t v36 = [v26 mapsServer];
            uint64_t v37 = [v36 serverMetadata];
            [v37 addSuggestionEntryMetadataDisplayed:v35];
          }
          ++v34;
        }
        while (v32 != v34);
        uint64_t v32 = [v30 countByEnumeratingWithState:&v48 objects:v55 count:16];
      }
      while (v32);
    }

    id v15 = v43;
    id v14 = v44;
    id v17 = v42;
  }
  int v38 = [v17 _suggestionEntryMetadata];
  uint64_t v39 = [v26 mapsServer];
  uint64_t v40 = [v39 serverMetadata];
  [v40 setSuggestionEntryMetadataTappedOn:v38];

  v54[0] = v25;
  v54[1] = v26;
  id v41 = [MEMORY[0x263EFF8C0] arrayWithObjects:v54 count:2];
  +[GEOAPPortal captureUserAction:a3 target:a4 value:v14 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v41 providedDropRate:0 completionQueue:0 completionBlock:0];
}

void __136__GEOAPPortal_UserAction__capturePlaceCardUserAction_target_value_mapItem_timestamp_placeCardType_categoriesDisplayed_categorySelected___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) placeCard];
  uint64_t v1 = +[GEOAPSharedStateData sharedData];
  [v1 setPlaceCardState:v2];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 routeDetails:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  id v9 = a6;
  id v10 = a5;
  id v11 = +[GEOAPSharedStateData sharedData];
  [v11 setRouteRouteDetails:v9];

  +[GEOAPPortal captureUserAction:v8 target:v7 value:v10];
  [v11 setRouteRouteDetails:0];
}

+ (void)captureTransitPlaceCardUserAction:(int)a3 target:(int)a4 value:(id)a5 mapItem:(id)a6 timestamp:(double)a7 resultIndex:(int)a8 targetID:(unint64_t)a9 providerID:(id)a10 animationID:(unint64_t)a11 transitCardCategory:(int)a12 transitSystem:(id)a13 transitDepartureSequence:(id)a14 transitIncident:(id)a15
{
  uint64_t v16 = *(void *)&a8;
  uint64_t v19 = *(void *)&a3;
  id v20 = (void *)MEMORY[0x263F41B70];
  id v21 = a5;
  uint64_t v22 = [v20 actionDetailsWithMapItem:a6 timestamp:v16 resultIndex:a9 targetID:a12 transitCardCategory:a13 transitSystem:a14 transitDepartureSequence:a7 transitIncident:a15];
  id v23 = +[GEOAPSharedStateData sharedData];
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 3221225472;
  v27[2] = __211__GEOAPPortal_UserAction__captureTransitPlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_transitCardCategory_transitSystem_transitDepartureSequence_transitIncident___block_invoke;
  v27[3] = &unk_265345350;
  id v28 = v23;
  id v29 = v22;
  id v24 = v22;
  id v25 = v23;
  [v25 performPlaceCardStateUpdate:v27];
  +[GEOAPPortal captureUserAction:v19 target:a4 value:v21];
}

uint64_t __211__GEOAPPortal_UserAction__captureTransitPlaceCardUserAction_target_value_mapItem_timestamp_resultIndex_targetID_providerID_animationID_transitCardCategory_transitSystem_transitDepartureSequence_transitIncident___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) setPlaceCardPlaceCardType:0];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 populateWithPlaceActionDetails:v3];
}

+ (void)captureNearbyTransitAction:(int)a3 target:(int)a4 value:(id)a5 pinnedLines:(id)a6 lineGroupReadBlock:(id)a7
{
  uint64_t v9 = *(void *)&a4;
  uint64_t v10 = *(void *)&a3;
  v23[1] = *MEMORY[0x263EF8340];
  id v12 = a5;
  id v13 = a6;
  id v14 = (uint64_t (**)(id, char *, void *))a7;
  id v15 = objc_alloc_init(MEMORY[0x263F41978]);
  [v15 setStateType:7];
  id v16 = objc_alloc_init(MEMORY[0x263F41A70]);
  [v15 setNearbyTransit:v16];

  if (v13)
  {
    uint64_t v17 = [v13 unsignedIntValue];
    uint64_t v18 = [v15 nearbyTransit];
    [v18 setPinnedLines:v17];
  }
  if (v14)
  {
    uint64_t v22 = 0;
    if (v14[2](v14, (char *)&v22 + 4, &v22))
    {
      do
      {
        id v19 = objc_alloc_init(MEMORY[0x263F41B38]);
        [v19 setLinesShown:HIDWORD(v22)];
        [v19 setLines:v22];
        id v20 = [v15 nearbyTransit];
        [v20 addGroups:v19];
      }
      while ((v14[2](v14, (char *)&v22 + 4, &v22) & 1) != 0);
    }
  }
  v23[0] = v15;
  id v21 = [MEMORY[0x263EFF8C0] arrayWithObjects:v23 count:1];
  [a1 captureUserAction:v10 target:v9 value:v12 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v21 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 transitStep:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  v17[1] = *MEMORY[0x263EF8340];
  id v10 = a5;
  id v11 = a6;
  if (!v11) {
    goto LABEL_4;
  }
  id v12 = objc_alloc_init(MEMORY[0x263F41978]);
  [v12 setStateType:6];
  id v13 = objc_alloc_init(MEMORY[0x263F41AE0]);
  [v12 setTransitStep:v13];

  uint64_t v14 = [v11 unsignedIntValue];
  id v15 = [v12 transitStep];
  [v15 setCurrentStep:v14];

  if (v12)
  {
    v17[0] = v12;
    id v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v17 count:1];
    [a1 captureUserAction:v8 target:v7 value:v10 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v16 providedDropRate:0 completionQueue:0 completionBlock:0];
  }
  else
  {
LABEL_4:
    [a1 captureUserAction:v8 target:v7 value:v10 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:MEMORY[0x263EFFA68] providedDropRate:0 completionQueue:0 completionBlock:0];
  }
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 categoriesDisplayed:(id)a6 categorySelected:(id)a7
{
  uint64_t v9 = *(void *)&a3;
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v10 = a5;
  id v11 = a6;
  id v12 = a7;
  if ([v11 containsObject:v12]) {
    uint64_t v13 = [v11 indexOfObject:v12];
  }
  else {
    uint64_t v13 = 0xFFFFFFFFLL;
  }
  uint64_t v14 = [MEMORY[0x263F41B70] actionDetailsWithMapItem:0 timestamp:v13 resultIndex:CFAbsoluteTimeGetCurrent()];
  id v15 = +[GEOAPSharedStateData sharedData];
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  v30[2] = __95__GEOAPPortal_UserAction__captureUserAction_target_value_categoriesDisplayed_categorySelected___block_invoke;
  v30[3] = &unk_265345350;
  id v16 = v15;
  id v31 = v16;
  id v17 = v14;
  id v32 = v17;
  [v16 performPlaceCardStateUpdate:v30];
  uint64_t v18 = [v12 _suggestionEntryMetadata];
  [v16 setMapsServerMetadataSuggestionEntryTappedOn:v18];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v19 = v11;
  uint64_t v20 = [v19 countByEnumeratingWithState:&v26 objects:v33 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        id v24 = [*(id *)(*((void *)&v26 + 1) + 8 * v23) _suggestionEntryMetadata];
        if (v24) {
          [v16 addMapsServerMetadataSuggestionEntryDisplayed:v24];
        }

        ++v23;
      }
      while (v21 != v23);
      uint64_t v21 = [v19 countByEnumeratingWithState:&v26 objects:v33 count:16];
    }
    while (v21);
  }

  +[GEOAPPortal captureUserAction:v9 target:a4 value:v10];
  [v16 setMapsServerMetadataSuggestionEntryTappedOn:0];
  [v16 clearMapsServerMetadataSuggestionEntryDisplayeds];
}

uint64_t __95__GEOAPPortal_UserAction__captureUserAction_target_value_categoriesDisplayed_categorySelected___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) setPlaceCardPlaceCardType:0];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 populateWithPlaceActionDetails:v3];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 categoriesMetadataDisplayed:(id)a6 categoryMetadataSelected:(id)a7
{
  uint64_t v9 = *(void *)&a4;
  uint64_t v10 = *(void *)&a3;
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v11 = a5;
  id v12 = a6;
  id v13 = a7;
  uint64_t v14 = +[GEOAPSharedStateData sharedData];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v15 = v12;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v21;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v15);
        }
        objc_msgSend(v14, "addMapsServerMetadataSuggestionEntryDisplayed:", *(void *)(*((void *)&v20 + 1) + 8 * v19++), (void)v20);
      }
      while (v17 != v19);
      uint64_t v17 = [v15 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v17);
  }

  [v14 setMapsServerMetadataSuggestionEntryTappedOn:v13];
  +[GEOAPPortal captureUserAction:v10 target:v9 value:v11];
  [v14 setMapsServerMetadataSuggestionEntryTappedOn:0];
  [v14 clearMapsServerMetadataSuggestionEntryDisplayeds];
}

+ (void)captureUserAction:(int)a3 target:(int)a4 value:(id)a5 mapsServerMetadata:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  id v9 = a6;
  id v10 = a5;
  id v11 = +[GEOAPSharedStateData sharedData];
  [v11 setMapsServerMetadata:v9];

  +[GEOAPPortal captureUserAction:v8 target:v7 value:v10];
  [v11 setMapsServerMetadata:0];
}

+ (void)captureUGCUserAction:(int)a3 target:(int)a4 value:(id)a5 photoSources:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v9 = a5;
  id v10 = a6;
  id v11 = +[GEOAPSharedStateData sharedData];
  if (v10)
  {
    unsigned int v20 = v7;
    id v12 = objc_alloc_init(MEMORY[0x263F41AE8]);
    [v11 setUgcPhotoState:v12];

    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v13 = v10;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * v17);
          uint64_t v19 = [v11 ugcPhotoState];
          objc_msgSend(v19, "addPhotoSource:", objc_msgSend(v18, "intValue"));

          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v15);
    }

    uint64_t v7 = v20;
  }
  +[GEOAPPortal captureUserAction:v8 target:v7 value:v9];
  [v11 setUgcPhotoState:0];
}

+ (void)captureCuratedCollectionUserAction:(int)a3 target:(int)a4 value:(id)a5 publisherId:(id)a6 following:(id)a7 collectionId:(id)a8 collectionCategory:(id)a9 collectionCurrentlySaved:(id)a10 verticalIndex:(id)a11 horizontalIndex:(id)a12 placeCardType:(id)a13 possibleActions:(id)a14 impossibleActions:(id)a15 modules:(id)a16
{
}

+ (void)captureCuratedCollectionUserAction:(int)a3 target:(int)a4 value:(id)a5 publisherId:(id)a6 following:(id)a7 collectionId:(id)a8 collectionCategory:(id)a9 collectionCurrentlySaved:(id)a10 verticalIndex:(id)a11 horizontalIndex:(id)a12 placeCardType:(id)a13 possibleActions:(id)a14 impossibleActions:(id)a15 providerId:(id)a16 repeatableSectionIndex:(id)a17 modules:(id)a18
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  id v90 = a5;
  id v21 = a6;
  id v80 = a7;
  id v85 = a8;
  id v84 = a9;
  id v83 = a10;
  id v88 = a11;
  id v87 = a12;
  id v86 = a13;
  id v22 = a14;
  id v23 = a15;
  id v82 = a16;
  id v81 = a17;
  id v89 = a18;
  id v24 = objc_alloc_init(MEMORY[0x263F419B8]);
  id v25 = objc_alloc_init(MEMORY[0x263F41BA0]);
  [v24 setPublisherDetails:v25];

  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  id v26 = v21;
  uint64_t v27 = [v26 countByEnumeratingWithState:&v105 objects:v114 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)v106;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v106 != v29) {
          objc_enumerationMutation(v26);
        }
        id v31 = *(void **)(*((void *)&v105 + 1) + 8 * i);
        id v32 = [v24 publisherDetails];
        objc_msgSend(v32, "addPublisherId:", objc_msgSend(v31, "unsignedLongLongValue"));
      }
      uint64_t v28 = [v26 countByEnumeratingWithState:&v105 objects:v114 count:16];
    }
    while (v28);
  }
  id v79 = v26;

  uint64_t v33 = v80;
  uint64_t v34 = [v80 BOOLValue];
  uint64_t v35 = [v24 publisherDetails];
  [v35 setCurrentlyFollowing:v34];

  id v36 = objc_alloc_init(MEMORY[0x263F41748]);
  [v24 setCollectionDetails:v36];

  uint64_t v37 = v85;
  if (v85)
  {
    int v38 = [v24 collectionDetails];
    objc_msgSend(v38, "addCollectionId:", objc_msgSend(v85, "unsignedLongLongValue"));
  }
  uint64_t v39 = v84;
  uint64_t v40 = (void *)[v84 copy];
  id v41 = [v24 collectionDetails];
  [v41 setCollectionCategory:v40];

  id v42 = v83;
  if (v83)
  {
    uint64_t v43 = [v83 BOOLValue];
    id v44 = [v24 collectionDetails];
    [v44 setCurrentlySaved:v43];
  }
  if (v88) {
    objc_msgSend(v24, "setVerticalIndex:", objc_msgSend(v88, "unsignedIntValue"));
  }
  if (v87) {
    objc_msgSend(v24, "setHorizontalIndex:", objc_msgSend(v87, "unsignedIntValue"));
  }
  if (v86) {
    objc_msgSend(v24, "setPlacecardType:", objc_msgSend(v86, "intValue"));
  }
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  obuint64_t j = v22;
  uint64_t v45 = [obj countByEnumeratingWithState:&v101 objects:v113 count:16];
  id v46 = v81;
  if (v45)
  {
    uint64_t v47 = v45;
    uint64_t v48 = *(void *)v102;
    do
    {
      for (uint64_t j = 0; j != v47; ++j)
      {
        if (*(void *)v102 != v48) {
          objc_enumerationMutation(obj);
        }
        objc_msgSend(v24, "addPossibleAction:", objc_msgSend(*(id *)(*((void *)&v101 + 1) + 8 * j), "intValue"));
      }
      uint64_t v47 = [obj countByEnumeratingWithState:&v101 objects:v113 count:16];
    }
    while (v47);
  }

  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v50 = v23;
  uint64_t v51 = [v50 countByEnumeratingWithState:&v97 objects:v112 count:16];
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)v98;
    do
    {
      for (uint64_t k = 0; k != v52; ++k)
      {
        if (*(void *)v98 != v53) {
          objc_enumerationMutation(v50);
        }
        objc_msgSend(v24, "addImpossibleAction:", objc_msgSend(*(id *)(*((void *)&v97 + 1) + 8 * k), "intValue"));
      }
      uint64_t v52 = [v50 countByEnumeratingWithState:&v97 objects:v112 count:16];
    }
    while (v52);
  }

  int v55 = v82;
  if (v82) {
    objc_msgSend(v24, "setLocalSearchProviderID:", objc_msgSend(v82, "intValue"));
  }
  uint64_t v56 = v89;
  uint64_t v57 = v90;
  if (v81) {
    objc_msgSend(v24, "setRepeatableSectionIndex:", objc_msgSend(v81, "intValue"));
  }
  id v78 = +[GEOAPSharedStateData sharedData];
  [v78 setCuratedCollectionState:v24];
  if (v89)
  {
    id v58 = objc_alloc_init(MEMORY[0x263F41978]);
    [v58 setStateType:702];
    id v59 = objc_alloc_init(MEMORY[0x263F41A88]);
    [v58 setPlaceCard:v59];

    long long v91 = v58;
    unint64_t v60 = [v58 placeCard];
    [v60 setPlacecardType:14];

    uint64_t v56 = v89;
    if ((unint64_t)[v89 count] < 2)
    {
      uint64_t v33 = v80;
      uint64_t v37 = v85;
      if ([v89 count] != 1)
      {
LABEL_53:

        uint64_t v57 = v90;
        goto LABEL_54;
      }
      uint64_t v71 = [v89 firstObject];
      id v72 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v71, "type"));
      double v73 = [v71 metadata];
      uint64_t v109 = v91;
      id v74 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v109 count:1];
      +[GEOAPPortal captureUserAction:a3 target:a4 value:v90 moduleType:v72 moduleMetadata:v73 richProviderId:0 additionalStates:v74 providedDropRate:0 completionQueue:0 completionBlock:0];

      id v46 = v81;
      uint64_t v37 = v85;
    }
    else
    {
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      id v61 = v89;
      uint64_t v62 = [v61 countByEnumeratingWithState:&v93 objects:v111 count:16];
      if (v62)
      {
        uint64_t v63 = v62;
        uint64_t v64 = *(void *)v94;
        do
        {
          for (uint64_t m = 0; m != v63; ++m)
          {
            if (*(void *)v94 != v64) {
              objc_enumerationMutation(v61);
            }
            id v66 = *(void **)(*((void *)&v93 + 1) + 8 * m);
            id v67 = objc_alloc_init(MEMORY[0x263F41B78]);
            objc_msgSend(v67, "setType:", objc_msgSend(v66, "type"));
            id v68 = [v66 metadata];
            [v67 setMetadata:v68];

            if ([v66 contentsCount])
            {
              unint64_t v69 = 0;
              do
                objc_msgSend(v67, "addContent:", objc_msgSend(v66, "contentAtIndex:", v69++));
              while (v69 < [v66 contentsCount]);
            }
            id v70 = [v91 placeCard];
            [v70 addModules:v67];
          }
          uint64_t v63 = [v61 countByEnumeratingWithState:&v93 objects:v111 count:16];
        }
        while (v63);
      }

      uint64_t v110 = v91;
      uint64_t v71 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v110 count:1];
      [a1 captureUserAction:a3 target:a4 value:v90 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v71 providedDropRate:0 completionQueue:0 completionBlock:0];
      uint64_t v33 = v80;
      id v46 = v81;
      uint64_t v37 = v85;
    }

    id v42 = v83;
    uint64_t v39 = v84;
    int v55 = v82;
    uint64_t v56 = v89;
    goto LABEL_53;
  }
  [a1 captureUserAction:a3 target:a4 value:v90 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:0 providedDropRate:0 completionQueue:0 completionBlock:0];
LABEL_54:
}

+ (void)capturePlaceSummaryUserAction:(int)a3 target:(int)a4 value:(id)a5 placeSummarySpecifierBlock:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  uint64_t v8 = *(void *)&a3;
  id v10 = a5;
  id v11 = (uint64_t (**)(id, uint64_t *, char *, id *, uint64_t *, id *))a6;
  if (v11)
  {
    id v28 = a1;
    unsigned int v29 = v7;
    id v12 = objc_alloc_init(MEMORY[0x263F41978]);
    [v12 setStateType:5];
    id v13 = objc_alloc_init(MEMORY[0x263F41A90]);
    [v12 setPlaceSummaryLayout:v13];

    id v14 = 0;
    char v15 = 0;
    id v16 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    while (1)
    {
      uint64_t v17 = v16;
      uint64_t v18 = v14;
      id v30 = v14;
      id v31 = v16;
      int v19 = v11[2](v11, &v33, (char *)&v32 + 4, &v31, &v32, &v30);
      id v16 = v31;

      id v14 = v30;
      if (!v19) {
        break;
      }
      id v20 = objc_alloc_init(MEMORY[0x263F41C58]);
      [v20 setTrailingEntityType:HIDWORD(v32)];
      id v21 = (void *)[v16 copy];
      [v20 setDisplayedString:v21];

      id v22 = objc_alloc_init(MEMORY[0x263F41778]);
      [v22 setLayoutType:v32];
      id v23 = (void *)[v14 copy];
      [v22 setDisplayedString:v23];

      id v24 = [v12 placeSummaryLayout];
      [v24 addMuids:v33];

      id v25 = [v12 placeSummaryLayout];
      [v25 addTrailingEntityActionDetails:v20];

      id v26 = [v12 placeSummaryLayout];
      [v26 addDynamicContextHyperlinkDetails:v22];

      char v15 = 1;
    }
    if (v15)
    {
      uint64_t v27 = [MEMORY[0x263EFF8C0] arrayWithObject:v12];
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v8 = v8;

    uint64_t v7 = v29;
    a1 = v28;
  }
  else
  {
    uint64_t v27 = 0;
  }
  [a1 captureUserAction:v8 target:v7 value:v10 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v27 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureRAPUserAction:(int)a3 target:(int)a4 value:(id)a5 entryPoint:(int)a6 feedbackType:(int)a7 feedbackFieldOptionKeys:(id)a8 rapServerManifestVersion:(id)a9 duration:(id)a10 rapABManifestVersion:(id)a11 rapAPBranchId:(id)a12
{
  uint64_t v13 = *(void *)&a7;
  uint64_t v14 = *(void *)&a6;
  uint64_t v15 = *(void *)&a3;
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v32 = a5;
  id v16 = a8;
  id v17 = a9;
  id v18 = a10;
  id v19 = a11;
  id v20 = a12;
  id v21 = objc_alloc_init(MEMORY[0x263F41A98]);
  [v21 setEntryPoint:v14];
  [v21 setFeedbackType:v13];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v22 = v16;
  uint64_t v23 = [v22 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v34 != v25) {
          objc_enumerationMutation(v22);
        }
        [v21 addFeedbackFieldOptionKey:*(void *)(*((void *)&v33 + 1) + 8 * i)];
      }
      uint64_t v24 = [v22 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v24);
  }

  [v21 setRapServerManifestVersion:v17];
  if (v15 == 10112 && v18)
  {
    [v18 floatValue];
    [v21 setDuration:v27];
  }
  [v21 setRapAbManifestVersion:v19];
  [v21 setRapAbBranchId:v20];
  id v28 = objc_alloc_init(MEMORY[0x263F41978]);
  [v28 setStateType:4];
  [v28 setRap:v21];
  id v37 = v28;
  unsigned int v29 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v37 count:1];
  [a1 captureUserAction:v15 target:a4 value:v32 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v29 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureRAPUserAction:(int)a3 target:(int)a4 value:(id)a5 entryPoint:(int)a6 feedbackType:(int)a7 feedbackFieldOptionKeys:(id)a8 rapServerManifestVersion:(id)a9 duration:(id)a10
{
}

+ (void)captureUserAccountUserAction:(int)a3 target:(int)a4 value:(id)a5 signedIntoIcloud:(id)a6 possibleActionsReadBlock:(id)a7
{
  uint64_t v9 = *(void *)&a4;
  uint64_t v10 = *(void *)&a3;
  v22[1] = *MEMORY[0x263EF8340];
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = (uint64_t (**)(id, _DWORD *))a7;
  id v15 = objc_alloc_init(MEMORY[0x263F41978]);
  [v15 setStateType:3];
  id v16 = objc_alloc_init(MEMORY[0x263F41998]);
  [v15 setAccount:v16];

  if (v13)
  {
    uint64_t v17 = [v13 BOOLValue];
    id v18 = [v15 account];
    [v18 setSignedIntoIcloud:v17];
  }
  if (v14)
  {
    unsigned int v21 = 0;
    if (v14[2](v14, &v21))
    {
      do
      {
        id v19 = [v15 account];
        [v19 addPossibleAction:v21];
      }
      while ((v14[2](v14, &v21) & 1) != 0);
    }
  }
  v22[0] = v15;
  id v20 = [MEMORY[0x263EFF8C0] arrayWithObjects:v22 count:1];
  [a1 captureUserAction:v10 target:v9 value:v12 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v20 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureWaypointManipulationUserAction:(int)a3 target:(int)a4 value:(id)a5 originalNumberOfStops:(id)a6 originalWaypointId:(id)a7 finalWaypointId:(id)a8
{
  uint64_t v11 = *(void *)&a4;
  uint64_t v12 = *(void *)&a3;
  v28[1] = *MEMORY[0x263EF8340];
  id v14 = a6;
  id v15 = a7;
  id v16 = a8;
  uint64_t v17 = (objc_class *)MEMORY[0x263F41978];
  id v18 = a5;
  id v19 = objc_alloc_init(v17);
  [v19 setStateType:13];
  id v20 = objc_alloc_init(MEMORY[0x263F41AB0]);
  [v19 setRoutingWaypoints:v20];

  if (v14)
  {
    uint64_t v21 = [v14 unsignedIntValue];
    id v22 = [v19 routingWaypoints];
    [v22 setOriginalNumberOfStops:v21];
  }
  if (v15)
  {
    uint64_t v23 = [v15 unsignedIntValue];
    uint64_t v24 = [v19 routingWaypoints];
    [v24 setOriginalWaypointId:v23];
  }
  if (v16)
  {
    uint64_t v25 = [v16 unsignedIntValue];
    id v26 = [v19 routingWaypoints];
    [v26 setFinalWaypointId:v25];
  }
  v28[0] = v19;
  float v27 = [MEMORY[0x263EFF8C0] arrayWithObjects:v28 count:1];
  [a1 captureUserAction:v12 target:v11 value:v18 moduleType:0 moduleMetadata:0 richProviderId:0 additionalStates:v27 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)capturePlaceCardRevealWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v323 = *MEMORY[0x263EF8340];
  id v15 = a5;
  unint64_t v16 = (unint64_t)a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v322 = "+[GEOAPPortal(UserActionCodeGen) capturePlaceCardRevealWithAction:target:value:moduleType:moduleMetadata:rich"
           "ProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v285 = v20;
      id v308 = v18;
      unint64_t v309 = v16;
      unint64_t v288 = (unint64_t)v17;
      id v286 = v19;
      id v287 = v21;
      if (objc_msgSend(v19, "count", v22))
      {
        uint64_t v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v316 = 0u;
        long long v317 = 0u;
        long long v318 = 0u;
        long long v319 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v316 objects:v320 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v317;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v317 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v316 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v316 objects:v320 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      long long v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        uint64_t v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v307 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 5));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        uint64_t v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:5];
      }
      uint64_t v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      int v54 = (void *)v53;
      if (v53) {
        int v55 = (void *)v53;
      }
      else {
        int v55 = v50;
      }
      id v306 = v55;

      uint64_t v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 16));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        uint64_t v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:16];
      }
      uint64_t v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      id v65 = (void *)v64;
      if (v64) {
        id v66 = (void *)v64;
      }
      else {
        id v66 = v61;
      }
      id v305 = v66;

      id v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 35));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        double v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:35];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      int v76 = (void *)v75;
      if (v75) {
        id v77 = (void *)v75;
      }
      else {
        id v77 = v72;
      }
      id v304 = v77;

      id v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 30));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:30];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      id v87 = (void *)v86;
      if (v86) {
        id v88 = (void *)v86;
      }
      else {
        id v88 = v83;
      }
      id v303 = v88;

      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 0));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        long long v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:0];
      }
      long long v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      long long v98 = (void *)v97;
      if (v97) {
        long long v99 = (void *)v97;
      }
      else {
        long long v99 = v94;
      }
      id v302 = v99;

      long long v100 = NSNumber;
      long long v101 = +[GEOAPStateFactory sharedFactory];
      long long v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 3));

      long long v103 = [v33 objectForKeyedSubscript:v102];
      long long v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        long long v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:3];
      }
      long long v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v301 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      long long v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 56));

      long long v114 = [v33 objectForKeyedSubscript:v113];
      uint64_t v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        long long v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:56];
      }
      long long v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      long long v120 = (void *)v119;
      if (v119) {
        id v121 = (void *)v119;
      }
      else {
        id v121 = v116;
      }
      id v300 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 64));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        id v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:64];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      uint64_t v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v299 = v132;

      id v133 = NSNumber;
      id v134 = +[GEOAPStateFactory sharedFactory];
      id v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 13));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:13];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      id v142 = (void *)v141;
      if (v141) {
        id v143 = (void *)v141;
      }
      else {
        id v143 = v138;
      }
      id v298 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      id v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 14));

      id v147 = [v33 objectForKeyedSubscript:v146];
      id v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        id v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:14];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      id v153 = (void *)v152;
      if (v152) {
        id v154 = (void *)v152;
      }
      else {
        id v154 = v149;
      }
      id v297 = v154;

      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      id v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 9));

      id v158 = [v33 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        long long v161 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v161 stateForType:9];
      }
      long long v162 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v160, "stateType"));
      uint64_t v163 = [v33 objectForKeyedSubscript:v162];
      long long v164 = (void *)v163;
      if (v163) {
        long long v165 = (void *)v163;
      }
      else {
        long long v165 = v160;
      }
      id v296 = v165;

      long long v166 = NSNumber;
      long long v167 = +[GEOAPStateFactory sharedFactory];
      long long v168 = objc_msgSend(v166, "numberWithInt:", objc_msgSend(v167, "logMsgStateTypeForType:", 10));

      long long v169 = [v33 objectForKeyedSubscript:v168];
      uint64_t v170 = v169;
      if (v169)
      {
        id v171 = v169;
      }
      else
      {
        uint64_t v172 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v172 stateForType:10];
      }
      long long v173 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v171, "stateType"));
      uint64_t v174 = [v33 objectForKeyedSubscript:v173];
      long long v175 = (void *)v174;
      if (v174) {
        long long v176 = (void *)v174;
      }
      else {
        long long v176 = v171;
      }
      id v295 = v176;

      long long v177 = NSNumber;
      long long v178 = +[GEOAPStateFactory sharedFactory];
      long long v179 = objc_msgSend(v177, "numberWithInt:", objc_msgSend(v178, "logMsgStateTypeForType:", 20));

      long long v180 = [v33 objectForKeyedSubscript:v179];
      long long v181 = v180;
      if (v180)
      {
        id v182 = v180;
      }
      else
      {
        id v183 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v183 stateForType:20];
      }
      long long v184 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v182, "stateType"));
      uint64_t v185 = [v33 objectForKeyedSubscript:v184];
      id v186 = (void *)v185;
      if (v185) {
        id v187 = (void *)v185;
      }
      else {
        id v187 = v182;
      }
      id v294 = v187;

      id v188 = NSNumber;
      id v189 = +[GEOAPStateFactory sharedFactory];
      uint64_t v190 = objc_msgSend(v188, "numberWithInt:", objc_msgSend(v189, "logMsgStateTypeForType:", 42));

      long long v191 = [v33 objectForKeyedSubscript:v190];
      long long v192 = v191;
      if (v191)
      {
        id v193 = v191;
      }
      else
      {
        long long v194 = +[GEOAPStateFactory sharedFactory];
        id v193 = [v194 stateForType:42];
      }
      long long v195 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v193, "stateType"));
      uint64_t v196 = [v33 objectForKeyedSubscript:v195];
      long long v197 = (void *)v196;
      if (v196) {
        long long v198 = (void *)v196;
      }
      else {
        long long v198 = v193;
      }
      id v293 = v198;

      long long v199 = NSNumber;
      long long v200 = +[GEOAPStateFactory sharedFactory];
      long long v201 = objc_msgSend(v199, "numberWithInt:", objc_msgSend(v200, "logMsgStateTypeForType:", 70));

      long long v202 = [v33 objectForKeyedSubscript:v201];
      id v203 = v202;
      if (v202)
      {
        id v204 = v202;
      }
      else
      {
        id v205 = +[GEOAPStateFactory sharedFactory];
        id v204 = [v205 stateForType:70];
      }
      id v206 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v204, "stateType"));
      uint64_t v207 = [v33 objectForKeyedSubscript:v206];
      id v208 = (void *)v207;
      if (v207) {
        id v209 = (void *)v207;
      }
      else {
        id v209 = v204;
      }
      id v292 = v209;

      id v210 = NSNumber;
      uint64_t v211 = +[GEOAPStateFactory sharedFactory];
      id v212 = objc_msgSend(v210, "numberWithInt:", objc_msgSend(v211, "logMsgStateTypeForType:", 7));

      id v213 = [v33 objectForKeyedSubscript:v212];
      long long v214 = v213;
      if (v213)
      {
        id v215 = v213;
      }
      else
      {
        long long v216 = +[GEOAPStateFactory sharedFactory];
        id v215 = [v216 stateForType:7];
      }
      long long v217 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v215, "stateType"));
      uint64_t v218 = [v33 objectForKeyedSubscript:v217];
      id v219 = (void *)v218;
      if (v218) {
        id v220 = (void *)v218;
      }
      else {
        id v220 = v215;
      }
      id v291 = v220;

      id v221 = NSNumber;
      id v222 = +[GEOAPStateFactory sharedFactory];
      id v223 = objc_msgSend(v221, "numberWithInt:", objc_msgSend(v222, "logMsgStateTypeForType:", 18));

      uint64_t v224 = [v33 objectForKeyedSubscript:v223];
      id v225 = v224;
      if (v224)
      {
        id v226 = v224;
      }
      else
      {
        id v227 = +[GEOAPStateFactory sharedFactory];
        id v226 = [v227 stateForType:18];
      }
      long long v228 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v226, "stateType"));
      uint64_t v229 = [v33 objectForKeyedSubscript:v228];
      id v230 = (void *)v229;
      if (v229) {
        id v231 = (void *)v229;
      }
      else {
        id v231 = v226;
      }
      id v290 = v231;

      long long v232 = NSNumber;
      long long v233 = +[GEOAPStateFactory sharedFactory];
      long long v234 = objc_msgSend(v232, "numberWithInt:", objc_msgSend(v233, "logMsgStateTypeForType:", 19));

      long long v235 = [v33 objectForKeyedSubscript:v234];
      long long v236 = v235;
      if (v235)
      {
        id v237 = v235;
      }
      else
      {
        id v238 = +[GEOAPStateFactory sharedFactory];
        id v237 = [v238 stateForType:19];
      }
      id v239 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v237, "stateType"));
      uint64_t v240 = [v33 objectForKeyedSubscript:v239];
      id v241 = (void *)v240;
      if (v240) {
        id v242 = (void *)v240;
      }
      else {
        id v242 = v237;
      }
      id v289 = v242;

      id v243 = NSNumber;
      id v244 = +[GEOAPStateFactory sharedFactory];
      id v245 = objc_msgSend(v243, "numberWithInt:", objc_msgSend(v244, "logMsgStateTypeForType:", 27));

      id v246 = [v33 objectForKeyedSubscript:v245];
      id v247 = v246;
      if (v246)
      {
        id v248 = v246;
      }
      else
      {
        id v249 = +[GEOAPStateFactory sharedFactory];
        id v248 = [v249 stateForType:27];
      }
      id v17 = (id)v288;

      id v250 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v248, "stateType"));
      uint64_t v251 = [v33 objectForKeyedSubscript:v250];
      id v252 = (void *)v251;
      if (v251) {
        id v253 = (void *)v251;
      }
      else {
        id v253 = v248;
      }
      id v254 = v253;

      id v255 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v255 setEventType:1];
      id v256 = objc_alloc_init(MEMORY[0x263F41958]);
      [v255 setUserActionEvent:v256];

      id v257 = [v255 userActionEvent];
      [v257 setUserActionEventAction:a3];

      id v258 = [v255 userActionEvent];
      [v258 setUserActionEventTarget:a4];

      id v259 = [v255 userActionEvent];
      [v259 setUserActionEventValue:v15];

      id v260 = [v255 userActionEvent];
      [v260 setActionRichProviderId:v308];

      if (v16 | v288)
      {
        id v261 = objc_alloc_init(MEMORY[0x263F41960]);
        id v262 = [v255 userActionEvent];
        [v262 setModuleInfo:v261];

        if (v16)
        {
          uint64_t v263 = [(id)v16 intValue];
          id v264 = [v255 userActionEvent];
          [v264 moduleInfo];
          v266 = id v265 = v15;
          [v266 setType:v263];

          id v15 = v265;
          id v17 = (id)v288;
        }
        if (v17)
        {
          id v267 = [v255 userActionEvent];
          id v268 = [v267 moduleInfo];
          [v268 setModuleMetadata:v17];
        }
      }
      if (v307) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      id v21 = v287;
      if (v306) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v305) {
        [v255 addLogMsgState:v305];
      }
      if (v304) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v303) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v302) {
        [v255 addLogMsgState:v302];
      }
      if (v301) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v300) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v299) {
        [v255 addLogMsgState:v299];
      }
      if (v298) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v297) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v296) {
        [v255 addLogMsgState:v296];
      }
      if (v295) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v294) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v293) {
        [v255 addLogMsgState:v293];
      }
      if (v291) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v290) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v289) {
        objc_msgSend(v255, "addLogMsgState:");
      }
      if (v254) {
        [v255 addLogMsgState:v254];
      }
      if (v292) {
        [v255 addLogMsgState:v292];
      }
      if (a3 == 21 && a4 == 201)
      {
        id v269 = v15;
        id v270 = NSNumber;
        id v271 = +[GEOAPStateFactory sharedFactory];
        uint64_t v272 = objc_msgSend(v270, "numberWithInt:", objc_msgSend(v271, "logMsgStateTypeForType:", 68));

        id v273 = [v33 objectForKeyedSubscript:v272];
        id v274 = v273;
        if (v273)
        {
          id v275 = v273;
        }
        else
        {
          v276 = +[GEOAPStateFactory sharedFactory];
          id v275 = [v276 stateForType:68];
        }
        id v277 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v275, "stateType"));
        uint64_t v278 = [v33 objectForKeyedSubscript:v277];
        long long v279 = (void *)v278;
        if (v278) {
          long long v280 = (void *)v278;
        }
        else {
          long long v280 = v275;
        }
        id v281 = v280;

        if (v281) {
          [v255 addLogMsgState:v281];
        }

        id v245 = (void *)v272;
        id v15 = v269;
        unint64_t v16 = v309;
        id v21 = v287;
        id v17 = (id)v288;
      }
      long long v282 = +[GEOAPStateFactory sharedFactory];
      v312[0] = MEMORY[0x263EF8330];
      v312[1] = 3221225472;
      v312[2] = __187__GEOAPPortal_UserActionCodeGen__capturePlaceCardRevealWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v312[3] = &unk_2653457B8;
      id v283 = v255;
      id v313 = v283;
      id v315 = v284;
      id v314 = v21;
      [v282 sessionStateForType:6 callback:v312];

      id v22 = v284;
      id v18 = v308;
      id v20 = v285;
      id v19 = v286;
    }
  }
}

uint64_t __187__GEOAPPortal_UserActionCodeGen__capturePlaceCardRevealWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)capturePriorityShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v728 = *MEMORY[0x263EF8340];
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  id v715 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v727 = "+[GEOAPPortal(UserActionCodeGen) capturePriorityShortUserActionsWithAction:target:value:moduleType:moduleMeta"
           "data:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v714 = a3;
      v690 = v22;
      id v688 = v21;
      id v712 = v19;
      *(void *)&long long v713 = v17;
      *((void *)&v713 + 1) = v18;
      id v689 = v20;
      if ([v20 count])
      {
        uint64_t v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v721 = 0u;
        long long v722 = 0u;
        long long v723 = 0u;
        long long v724 = 0u;
        id v26 = v20;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v721 objects:v725 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v722;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v722 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v721 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v721 objects:v725 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = 0x265344000uLL;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v33 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v33 objectForKeyedSubscript:v42];
      id v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v46 = v45;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 5));

      id v50 = [v33 objectForKeyedSubscript:v49];
      uint64_t v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:5];
      }
      int v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v33 objectForKeyedSubscript:v54];
      uint64_t v56 = (void *)v55;
      if (v55) {
        uint64_t v57 = (void *)v55;
      }
      else {
        uint64_t v57 = v52;
      }
      id v711 = v57;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      id v61 = [v33 objectForKeyedSubscript:v60];
      uint64_t v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        uint64_t v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:16];
      }
      id v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v33 objectForKeyedSubscript:v65];
      id v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v710 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 35));

      id v72 = [v33 objectForKeyedSubscript:v71];
      double v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        uint64_t v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:35];
      }
      int v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v33 objectForKeyedSubscript:v76];
      id v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v709 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 30));

      id v83 = [v33 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        uint64_t v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:30];
      }
      id v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v33 objectForKeyedSubscript:v87];
      id v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v708 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 0));

      id v94 = [v33 objectForKeyedSubscript:v93];
      long long v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        uint64_t v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:0];
      }
      long long v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v33 objectForKeyedSubscript:v98];
      long long v100 = (void *)v99;
      if (v99) {
        long long v101 = (void *)v99;
      }
      else {
        long long v101 = v96;
      }
      id v707 = v101;

      long long v102 = NSNumber;
      long long v103 = +[GEOAPStateFactory sharedFactory];
      long long v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 3));

      id v105 = [v33 objectForKeyedSubscript:v104];
      long long v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        uint64_t v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:3];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v33 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v706 = v112;

      long long v113 = NSNumber;
      long long v114 = +[GEOAPStateFactory sharedFactory];
      uint64_t v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 64));

      id v116 = [v33 objectForKeyedSubscript:v115];
      long long v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        uint64_t v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:64];
      }
      long long v120 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v121 = [v33 objectForKeyedSubscript:v120];
      uint64_t v122 = (void *)v121;
      if (v121) {
        uint64_t v123 = (void *)v121;
      }
      else {
        uint64_t v123 = v118;
      }
      id v705 = v123;

      uint64_t v124 = NSNumber;
      id v125 = +[GEOAPStateFactory sharedFactory];
      id v126 = objc_msgSend(v124, "numberWithInt:", objc_msgSend(v125, "logMsgStateTypeForType:", 13));

      id v127 = [v33 objectForKeyedSubscript:v126];
      id v128 = v127;
      if (v127)
      {
        id v129 = v127;
      }
      else
      {
        uint64_t v130 = +[GEOAPStateFactory sharedFactory];
        id v129 = [v130 stateForType:13];
      }
      uint64_t v131 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v129, "stateType"));
      uint64_t v132 = [v33 objectForKeyedSubscript:v131];
      id v133 = (void *)v132;
      if (v132) {
        id v134 = (void *)v132;
      }
      else {
        id v134 = v129;
      }
      id v704 = v134;

      id v135 = NSNumber;
      id v136 = +[GEOAPStateFactory sharedFactory];
      id v137 = objc_msgSend(v135, "numberWithInt:", objc_msgSend(v136, "logMsgStateTypeForType:", 14));

      id v138 = [v33 objectForKeyedSubscript:v137];
      id v139 = v138;
      if (v138)
      {
        id v140 = v138;
      }
      else
      {
        uint64_t v141 = +[GEOAPStateFactory sharedFactory];
        id v140 = [v141 stateForType:14];
      }
      id v142 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v140, "stateType"));
      uint64_t v143 = [v33 objectForKeyedSubscript:v142];
      id v144 = (void *)v143;
      if (v143) {
        id v145 = (void *)v143;
      }
      else {
        id v145 = v140;
      }
      id v703 = v145;

      id v146 = NSNumber;
      id v147 = +[GEOAPStateFactory sharedFactory];
      id v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 9));

      id v149 = [v33 objectForKeyedSubscript:v148];
      id v150 = v149;
      if (v149)
      {
        id v151 = v149;
      }
      else
      {
        uint64_t v152 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v152 stateForType:9];
      }
      id v153 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v151, "stateType"));
      uint64_t v154 = [v33 objectForKeyedSubscript:v153];
      id v155 = (void *)v154;
      if (v154) {
        id v156 = (void *)v154;
      }
      else {
        id v156 = v151;
      }
      id v702 = v156;

      id v157 = NSNumber;
      id v158 = +[GEOAPStateFactory sharedFactory];
      id v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 10));

      id v160 = [v33 objectForKeyedSubscript:v159];
      long long v161 = v160;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        uint64_t v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:10];
      }
      long long v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v33 objectForKeyedSubscript:v164];
      long long v166 = (void *)v165;
      if (v165) {
        long long v167 = (void *)v165;
      }
      else {
        long long v167 = v162;
      }
      id v701 = v167;

      long long v168 = NSNumber;
      long long v169 = +[GEOAPStateFactory sharedFactory];
      uint64_t v170 = objc_msgSend(v168, "numberWithInt:", objc_msgSend(v169, "logMsgStateTypeForType:", 20));

      id v171 = [v33 objectForKeyedSubscript:v170];
      uint64_t v172 = v171;
      if (v171)
      {
        id v173 = v171;
      }
      else
      {
        uint64_t v174 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v174 stateForType:20];
      }
      long long v175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v173, "stateType"));
      uint64_t v176 = [v33 objectForKeyedSubscript:v175];
      long long v177 = (void *)v176;
      if (v176) {
        long long v178 = (void *)v176;
      }
      else {
        long long v178 = v173;
      }
      id v700 = v178;

      long long v179 = NSNumber;
      long long v180 = +[GEOAPStateFactory sharedFactory];
      long long v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 42));

      id v182 = [v33 objectForKeyedSubscript:v181];
      id v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        uint64_t v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:42];
      }
      id v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v33 objectForKeyedSubscript:v186];
      id v188 = (void *)v187;
      if (v187) {
        id v189 = (void *)v187;
      }
      else {
        id v189 = v184;
      }
      id v699 = v189;

      uint64_t v190 = NSNumber;
      long long v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v33 objectForKeyedSubscript:v192];
      long long v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      long long v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v33 objectForKeyedSubscript:v197];
      long long v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v698 = v200;

      long long v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      id v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      id v204 = [v33 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      id v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v33 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v697 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      long long v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      id v215 = [v33 objectForKeyedSubscript:v214];
      long long v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      id v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v33 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v696 = v222;

      id v223 = NSNumber;
      uint64_t v224 = +[GEOAPStateFactory sharedFactory];
      id v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 19));

      id v226 = [v33 objectForKeyedSubscript:v225];
      id v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        uint64_t v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:19];
      }
      id v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v33 objectForKeyedSubscript:v230];
      long long v232 = (void *)v231;
      if (v231) {
        long long v233 = (void *)v231;
      }
      else {
        long long v233 = v228;
      }
      id v695 = v233;

      long long v234 = NSNumber;
      long long v235 = +[GEOAPStateFactory sharedFactory];
      long long v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 27));

      id v237 = [v33 objectForKeyedSubscript:v236];
      id v238 = v237;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        uint64_t v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:27];
      }
      id v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v33 objectForKeyedSubscript:v241];
      id v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v694 = v244;

      id v245 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v245 setEventType:1];
      id v246 = objc_alloc_init(MEMORY[0x263F41958]);
      [v245 setUserActionEvent:v246];

      id v247 = [v245 userActionEvent];
      [v247 setUserActionEventAction:v714];

      id v248 = [v245 userActionEvent];
      [v248 setUserActionEventTarget:a4];

      id v249 = [v245 userActionEvent];
      [v249 setUserActionEventValue:v16];

      id v250 = [v245 userActionEvent];
      [v250 setActionRichProviderId:v712];

      if (v713 != 0)
      {
        id v251 = objc_alloc_init(MEMORY[0x263F41960]);
        id v252 = [v245 userActionEvent];
        [v252 setModuleInfo:v251];

        if ((void)v713)
        {
          uint64_t v253 = [(id)v713 intValue];
          id v254 = [v245 userActionEvent];
          id v255 = [v254 moduleInfo];
          [v255 setType:v253];
        }
        if (*((void *)&v713 + 1))
        {
          id v256 = [v245 userActionEvent];
          id v257 = [v256 moduleInfo];
          [v257 setModuleMetadata:*((void *)&v713 + 1)];
        }
      }
      if (v46) {
        [v245 addLogMsgState:v46];
      }
      if (v711) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v710) {
        [v245 addLogMsgState:v710];
      }
      if (v709) {
        [v245 addLogMsgState:v709];
      }
      if (v708) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v707) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v706) {
        [v245 addLogMsgState:v706];
      }
      if (v705) {
        [v245 addLogMsgState:v705];
      }
      if (v704) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v703) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v702) {
        [v245 addLogMsgState:v702];
      }
      if (v701) {
        [v245 addLogMsgState:v701];
      }
      if (v700) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v699) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v697) {
        [v245 addLogMsgState:v697];
      }
      if (v696) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v695) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v694) {
        [v245 addLogMsgState:v694];
      }
      if (v698) {
        [v245 addLogMsgState:v698];
      }
      id v692 = v16;
      id v687 = v46;
      int v258 = a4;
      if (v714 == 6003 && a4 == 201)
      {
        id v259 = NSNumber;
        id v260 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v259, "numberWithInt:", objc_msgSend(v260, "logMsgStateTypeForType:", 68));

        id v262 = [v33 objectForKeyedSubscript:v261];
        uint64_t v263 = v262;
        if (v262)
        {
          id v264 = v262;
        }
        else
        {
          id v277 = +[GEOAPStateFactory sharedFactory];
          id v264 = [v277 stateForType:68];
        }
        uint64_t v278 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v264, "stateType"));
        uint64_t v279 = [v33 objectForKeyedSubscript:v278];
        long long v280 = (void *)v279;
        if (v279) {
          id v281 = (void *)v279;
        }
        else {
          id v281 = v264;
        }
        id v282 = v281;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
LABEL_218:
        uint64_t v691 = 0;
        BOOL v283 = 0;
        BOOL v693 = 0;
        BOOL v318 = 0;
LABEL_219:
        unint64_t v35 = 0x265344000uLL;
LABEL_220:

        long long v236 = (void *)v261;
        goto LABEL_221;
      }
      if (v714 == 2015 && a4 == 102)
      {
        id v265 = NSNumber;
        id v266 = +[GEOAPStateFactory sharedFactory];
        id v267 = objc_msgSend(v265, "numberWithInt:", objc_msgSend(v266, "logMsgStateTypeForType:", 56));

        id v268 = [v33 objectForKeyedSubscript:v267];
        id v269 = v268;
        if (v268)
        {
          id v270 = v268;
        }
        else
        {
          id v290 = +[GEOAPStateFactory sharedFactory];
          id v270 = [v290 stateForType:56];
        }
        id v291 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v270, "stateType"));
        uint64_t v292 = [v33 objectForKeyedSubscript:v291];
        id v293 = (void *)v292;
        if (v292) {
          id v294 = (void *)v292;
        }
        else {
          id v294 = v270;
        }
        id v282 = v294;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
        id v295 = NSNumber;
        id v296 = +[GEOAPStateFactory sharedFactory];
        id v297 = objc_msgSend(v295, "numberWithInt:", objc_msgSend(v296, "logMsgStateTypeForType:", 59));

        id v298 = [v33 objectForKeyedSubscript:v297];
        id v299 = v298;
        if (v298)
        {
          id v300 = v298;
        }
        else
        {
          id v301 = +[GEOAPStateFactory sharedFactory];
          id v300 = [v301 stateForType:59];
        }
        id v302 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v300, "stateType"));
        uint64_t v303 = [v33 objectForKeyedSubscript:v302];
        id v304 = (void *)v303;
        if (v303) {
          id v305 = (void *)v303;
        }
        else {
          id v305 = v300;
        }
        id v306 = v305;

        if (v306) {
          [v245 addLogMsgState:v306];
        }
        id v307 = NSNumber;
        id v308 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v307, "numberWithInt:", objc_msgSend(v308, "logMsgStateTypeForType:", 54));

        unint64_t v309 = [v33 objectForKeyedSubscript:v261];
        unint64_t v310 = v309;
        if (v309)
        {
          id v311 = v309;
        }
        else
        {
          uint64_t v312 = +[GEOAPStateFactory sharedFactory];
          id v311 = [v312 stateForType:54];
        }
        id v313 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v311, "stateType"));
        uint64_t v314 = [v33 objectForKeyedSubscript:v313];
        id v315 = (void *)v314;
        if (v314) {
          long long v316 = (void *)v314;
        }
        else {
          long long v316 = v311;
        }
        id v317 = v316;

        if (v317) {
          [v245 addLogMsgState:v317];
        }

        goto LABEL_218;
      }
      BOOL v693 = a4 == 101;
      if (v714 == 2015 && a4 == 101)
      {
        id v271 = NSNumber;
        uint64_t v272 = +[GEOAPStateFactory sharedFactory];
        id v273 = objc_msgSend(v271, "numberWithInt:", objc_msgSend(v272, "logMsgStateTypeForType:", 56));

        id v274 = [v33 objectForKeyedSubscript:v273];
        id v275 = v274;
        if (v274)
        {
          id v276 = v274;
        }
        else
        {
          v476 = +[GEOAPStateFactory sharedFactory];
          id v276 = [v476 stateForType:56];
        }
        uint64_t v477 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v276, "stateType"));
        uint64_t v478 = [v33 objectForKeyedSubscript:v477];
        v479 = (void *)v478;
        if (v478) {
          v480 = (void *)v478;
        }
        else {
          v480 = v276;
        }
        id v282 = v480;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
        v481 = NSNumber;
        v482 = +[GEOAPStateFactory sharedFactory];
        v483 = objc_msgSend(v481, "numberWithInt:", objc_msgSend(v482, "logMsgStateTypeForType:", 59));

        id v484 = [v33 objectForKeyedSubscript:v483];
        v485 = v484;
        if (v484)
        {
          id v486 = v484;
        }
        else
        {
          uint64_t v487 = +[GEOAPStateFactory sharedFactory];
          id v486 = [v487 stateForType:59];
        }
        v488 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v486, "stateType"));
        uint64_t v489 = [v33 objectForKeyedSubscript:v488];
        v490 = (void *)v489;
        if (v489) {
          v491 = (void *)v489;
        }
        else {
          v491 = v486;
        }
        id v492 = v491;

        if (v492) {
          [v245 addLogMsgState:v492];
        }
        v493 = NSNumber;
        id v494 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v493, "numberWithInt:", objc_msgSend(v494, "logMsgStateTypeForType:", 54));

        v495 = [v33 objectForKeyedSubscript:v261];
        v496 = v495;
        if (v495)
        {
          id v497 = v495;
        }
        else
        {
          v498 = +[GEOAPStateFactory sharedFactory];
          id v497 = [v498 stateForType:54];
        }
        v499 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v497, "stateType"));
        uint64_t v500 = [v33 objectForKeyedSubscript:v499];
        v501 = (void *)v500;
        if (v500) {
          uint64_t v502 = (void *)v500;
        }
        else {
          uint64_t v502 = v497;
        }
        id v503 = v502;

        if (v503) {
          [v245 addLogMsgState:v503];
        }

        uint64_t v691 = 0;
        BOOL v283 = 0;
        BOOL v318 = 0;
        BOOL v693 = 1;
        goto LABEL_219;
      }
      BOOL v283 = a4 == 105;
      if (v714 == 2015 && a4 == 105)
      {
        long long v284 = NSNumber;
        id v285 = +[GEOAPStateFactory sharedFactory];
        id v286 = objc_msgSend(v284, "numberWithInt:", objc_msgSend(v285, "logMsgStateTypeForType:", 56));

        id v287 = [v33 objectForKeyedSubscript:v286];
        unint64_t v288 = v287;
        if (v287)
        {
          id v289 = v287;
        }
        else
        {
          uint64_t v522 = +[GEOAPStateFactory sharedFactory];
          id v289 = [v522 stateForType:56];
        }
        v523 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v289, "stateType"));
        uint64_t v524 = [v33 objectForKeyedSubscript:v523];
        id v525 = (void *)v524;
        if (v524) {
          v526 = (void *)v524;
        }
        else {
          v526 = v289;
        }
        id v282 = v526;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
        v527 = NSNumber;
        uint64_t v528 = +[GEOAPStateFactory sharedFactory];
        v529 = objc_msgSend(v527, "numberWithInt:", objc_msgSend(v528, "logMsgStateTypeForType:", 59));

        v530 = [v33 objectForKeyedSubscript:v529];
        id v531 = v530;
        if (v530)
        {
          id v532 = v530;
        }
        else
        {
          v533 = +[GEOAPStateFactory sharedFactory];
          id v532 = [v533 stateForType:59];
        }
        uint64_t v534 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v532, "stateType"));
        uint64_t v535 = [v33 objectForKeyedSubscript:v534];
        v536 = (void *)v535;
        if (v535) {
          id v537 = (void *)v535;
        }
        else {
          id v537 = v532;
        }
        id v538 = v537;

        if (v538) {
          [v245 addLogMsgState:v538];
        }
        v539 = NSNumber;
        uint64_t v540 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v539, "numberWithInt:", objc_msgSend(v540, "logMsgStateTypeForType:", 54));

        v541 = [v33 objectForKeyedSubscript:v261];
        v542 = v541;
        if (v541)
        {
          id v543 = v541;
        }
        else
        {
          v544 = +[GEOAPStateFactory sharedFactory];
          id v543 = [v544 stateForType:54];
        }
        v545 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v543, "stateType"));
        uint64_t v546 = [v33 objectForKeyedSubscript:v545];
        v547 = (void *)v546;
        if (v546) {
          v548 = (void *)v546;
        }
        else {
          v548 = v543;
        }
        id v549 = v548;

        if (v549) {
          [v245 addLogMsgState:v549];
        }

        uint64_t v691 = 0;
        BOOL v318 = 0;
        BOOL v283 = 1;
        goto LABEL_219;
      }
      if (v714 == 2015 && a4 == 701)
      {
        BOOL v686 = a4 == 105;
        uint64_t v467 = NSNumber;
        v468 = +[GEOAPStateFactory sharedFactory];
        v469 = objc_msgSend(v467, "numberWithInt:", objc_msgSend(v468, "logMsgStateTypeForType:", 59));

        v470 = [v33 objectForKeyedSubscript:v469];
        v471 = v470;
        if (v470)
        {
          id v472 = v470;
        }
        else
        {
          int v564 = +[GEOAPStateFactory sharedFactory];
          id v472 = [v564 stateForType:59];
        }
        v565 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v472, "stateType"));
        uint64_t v566 = [v33 objectForKeyedSubscript:v565];
        v567 = (void *)v566;
        if (v566) {
          v568 = (void *)v566;
        }
        else {
          v568 = v472;
        }
        id v282 = v568;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
        v569 = NSNumber;
        id v570 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v569, "numberWithInt:", objc_msgSend(v570, "logMsgStateTypeForType:", 54));

        v571 = [v33 objectForKeyedSubscript:v261];
        v572 = v571;
        if (v571)
        {
          id v573 = v571;
        }
        else
        {
          v574 = +[GEOAPStateFactory sharedFactory];
          id v573 = [v574 stateForType:54];
        }
        v575 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v573, "stateType"));
        uint64_t v576 = [v33 objectForKeyedSubscript:v575];
        id v577 = (void *)v576;
        if (v576) {
          v578 = (void *)v576;
        }
        else {
          v578 = v573;
        }
        id v579 = v578;

        if (v579) {
          [v245 addLogMsgState:v579];
        }

        uint64_t v691 = 0;
        BOOL v318 = 0;
LABEL_542:
        unint64_t v35 = 0x265344000;
        BOOL v283 = v686;
        goto LABEL_220;
      }
      HIDWORD(v691) = a4 == 11;
      if (v714 == 2015 && a4 == 11)
      {
        BOOL v686 = a4 == 105;
        v510 = NSNumber;
        id v511 = +[GEOAPStateFactory sharedFactory];
        v512 = objc_msgSend(v510, "numberWithInt:", objc_msgSend(v511, "logMsgStateTypeForType:", 59));

        v513 = [v33 objectForKeyedSubscript:v512];
        uint64_t v514 = v513;
        if (v513)
        {
          id v515 = v513;
        }
        else
        {
          id v590 = +[GEOAPStateFactory sharedFactory];
          id v515 = [v590 stateForType:59];
        }
        v591 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v515, "stateType"));
        uint64_t v592 = [v33 objectForKeyedSubscript:v591];
        uint64_t v593 = (void *)v592;
        if (v592) {
          v594 = (void *)v592;
        }
        else {
          v594 = v515;
        }
        id v282 = v594;

        if (v282) {
          [v245 addLogMsgState:v282];
        }
        v595 = NSNumber;
        id v596 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v595, "numberWithInt:", objc_msgSend(v596, "logMsgStateTypeForType:", 54));

        v597 = [v33 objectForKeyedSubscript:v261];
        v598 = v597;
        if (v597)
        {
          id v599 = v597;
        }
        else
        {
          v600 = +[GEOAPStateFactory sharedFactory];
          id v599 = [v600 stateForType:54];
        }
        id v601 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v599, "stateType"));
        uint64_t v602 = [v33 objectForKeyedSubscript:v601];
        v603 = (void *)v602;
        if (v602) {
          uint64_t v604 = (void *)v602;
        }
        else {
          uint64_t v604 = v599;
        }
        id v605 = v604;

        if (v605) {
          [v245 addLogMsgState:v605];
        }

        BOOL v318 = 0;
        uint64_t v691 = 0x100000000;
        goto LABEL_542;
      }
      LODWORD(v691) = a4 == 803;
      if (v714 == 2015 && a4 == 803)
      {
        BOOL v551 = 0;
        v552 = NSNumber;
        uint64_t v553 = +[GEOAPStateFactory sharedFactory];
        v554 = objc_msgSend(v552, "numberWithInt:", objc_msgSend(v553, "logMsgStateTypeForType:", 59));

        v555 = [v33 objectForKeyedSubscript:v554];
        id v556 = v555;
        if (v555)
        {
          id v557 = v555;
        }
        else
        {
          v629 = +[GEOAPStateFactory sharedFactory];
          id v557 = [v629 stateForType:59];
        }
        id v630 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v557, "stateType"));
        uint64_t v631 = [v33 objectForKeyedSubscript:v630];
        v632 = (void *)v631;
        if (v631) {
          uint64_t v633 = (void *)v631;
        }
        else {
          uint64_t v633 = v557;
        }
        id v634 = v633;

        if (v634) {
          [v245 addLogMsgState:v634];
        }
        v635 = NSNumber;
        v636 = +[GEOAPStateFactory sharedFactory];
        uint64_t v625 = objc_msgSend(v635, "numberWithInt:", objc_msgSend(v636, "logMsgStateTypeForType:", 54));

        v637 = [v33 objectForKeyedSubscript:v625];
        v638 = v637;
        if (v637)
        {
          id v639 = v637;
        }
        else
        {
          v640 = +[GEOAPStateFactory sharedFactory];
          id v639 = [v640 stateForType:54];
        }
        id v641 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v639, "stateType"));
        uint64_t v642 = [v33 objectForKeyedSubscript:v641];
        v643 = (void *)v642;
        if (v642) {
          uint64_t v644 = (void *)v642;
        }
        else {
          uint64_t v644 = v639;
        }
        id v645 = v644;

        if (v645) {
          [v245 addLogMsgState:v645];
        }

        LODWORD(v691) = 1;
        unint64_t v35 = 0x265344000;
      }
      else
      {
        if (v714 == 3001 && a4 == 305)
        {
          v585 = NSNumber;
          v586 = +[GEOAPStateFactory sharedFactory];
          uint64_t v392 = objc_msgSend(v585, "numberWithInt:", objc_msgSend(v586, "logMsgStateTypeForType:", 68));

          v587 = [v33 objectForKeyedSubscript:v392];
          v588 = v587;
          if (v587)
          {
            id v589 = v587;
          }
          else
          {
            v652 = +[GEOAPStateFactory sharedFactory];
            id v589 = [v652 stateForType:68];
          }
          v653 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v589, "stateType"));
          uint64_t v654 = [v33 objectForKeyedSubscript:v653];
          v655 = (void *)v654;
          if (v654) {
            v656 = (void *)v654;
          }
          else {
            v656 = v589;
          }
          id v657 = v656;

          if (v657) {
            [v245 addLogMsgState:v657];
          }

          BOOL v403 = 0;
          goto LABEL_318;
        }
        if ((a4 != 301 || v714 != 3001) && (a4 != 303 || v714 != 3001) && (a4 != 302 || v714 != 3001)) {
          goto LABEL_523;
        }
        BOOL v551 = a4 == 105;
        uint64_t v623 = NSNumber;
        v624 = +[GEOAPStateFactory sharedFactory];
        uint64_t v625 = objc_msgSend(v623, "numberWithInt:", objc_msgSend(v624, "logMsgStateTypeForType:", 68));

        v626 = [v33 objectForKeyedSubscript:v625];
        v627 = v626;
        if (v626)
        {
          id v628 = v626;
        }
        else
        {
          id v658 = +[GEOAPStateFactory sharedFactory];
          id v628 = [v658 stateForType:68];
        }
        v659 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v628, "stateType"));
        uint64_t v660 = [v33 objectForKeyedSubscript:v659];
        uint64_t v661 = (void *)v660;
        if (v660) {
          v662 = (void *)v660;
        }
        else {
          v662 = v628;
        }
        id v634 = v662;

        if (v634) {
          [v245 addLogMsgState:v634];
        }
      }
      BOOL v283 = v551;

      long long v236 = (void *)v625;
LABEL_523:
      BOOL v318 = v714 == 2007;
      if (v714 != 2007 || a4 != 102)
      {
LABEL_221:
        if (v283 && v318)
        {
          long long v319 = NSNumber;
          id v320 = [*(id *)(v35 + 3384) sharedFactory];
          long long v321 = objc_msgSend(v319, "numberWithInt:", objc_msgSend(v320, "logMsgStateTypeForType:", 68));

          v322 = [v33 objectForKeyedSubscript:v321];
          uint64_t v323 = v322;
          if (v322)
          {
            id v324 = v322;
          }
          else
          {
            uint64_t v325 = [*(id *)(v35 + 3384) sharedFactory];
            id v324 = [v325 stateForType:68];
          }
          id v326 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v324, "stateType"));
          uint64_t v327 = [v33 objectForKeyedSubscript:v326];
          v328 = (void *)v327;
          if (v327) {
            uint64_t v329 = (void *)v327;
          }
          else {
            uint64_t v329 = v324;
          }
          id v330 = v329;

          if (v330) {
            [v245 addLogMsgState:v330];
          }
          v331 = NSNumber;
          id v332 = [*(id *)(v35 + 3384) sharedFactory];
          long long v236 = objc_msgSend(v331, "numberWithInt:", objc_msgSend(v332, "logMsgStateTypeForType:", 57));

          v333 = [v33 objectForKeyedSubscript:v236];
          v334 = v333;
          if (v333)
          {
            id v335 = v333;
          }
          else
          {
            v336 = [*(id *)(v35 + 3384) sharedFactory];
            id v335 = [v336 stateForType:57];
          }
          v337 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v335, "stateType"));
          uint64_t v338 = [v33 objectForKeyedSubscript:v337];
          char v339 = (void *)v338;
          if (v338) {
            v340 = (void *)v338;
          }
          else {
            v340 = v335;
          }
          id v341 = v340;

          if (v341) {
            [v245 addLogMsgState:v341];
          }

          unint64_t v35 = 0x265344000uLL;
        }
        if (v693 && v318)
        {
          v342 = NSNumber;
          uint64_t v343 = [*(id *)(v35 + 3384) sharedFactory];
          v344 = objc_msgSend(v342, "numberWithInt:", objc_msgSend(v343, "logMsgStateTypeForType:", 68));

          v345 = [v33 objectForKeyedSubscript:v344];
          id v346 = v345;
          if (v345)
          {
            id v347 = v345;
          }
          else
          {
            v348 = [*(id *)(v35 + 3384) sharedFactory];
            id v347 = [v348 stateForType:68];
          }
          uint64_t v349 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v347, "stateType"));
          uint64_t v350 = [v33 objectForKeyedSubscript:v349];
          v351 = (void *)v350;
          if (v350) {
            id v352 = (void *)v350;
          }
          else {
            id v352 = v347;
          }
          id v353 = v352;

          if (v353) {
            [v245 addLogMsgState:v353];
          }
          v354 = NSNumber;
          v355 = [*(id *)(v35 + 3384) sharedFactory];
          long long v236 = objc_msgSend(v354, "numberWithInt:", objc_msgSend(v355, "logMsgStateTypeForType:", 57));

          uint64_t v356 = [v33 objectForKeyedSubscript:v236];
          v357 = v356;
          if (v356)
          {
            id v358 = v356;
          }
          else
          {
            id v359 = [*(id *)(v35 + 3384) sharedFactory];
            id v358 = [v359 stateForType:57];
          }
          v360 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v358, "stateType"));
          uint64_t v361 = [v33 objectForKeyedSubscript:v360];
          v362 = (void *)v361;
          if (v361) {
            uint64_t v363 = (void *)v361;
          }
          else {
            uint64_t v363 = v358;
          }
          id v364 = v363;

          if (v364) {
            [v245 addLogMsgState:v364];
          }

          unint64_t v35 = 0x265344000uLL;
        }
        char v365 = !v318;
        if (a4 != 8) {
          char v365 = 1;
        }
        if ((v365 & 1) == 0)
        {
          id v366 = NSNumber;
          BOOL v367 = [*(id *)(v35 + 3384) sharedFactory];
          uint64_t v368 = objc_msgSend(v366, "numberWithInt:", objc_msgSend(v367, "logMsgStateTypeForType:", 68));

          v369 = [v33 objectForKeyedSubscript:v368];
          uint64_t v370 = v369;
          if (v369)
          {
            id v371 = v369;
          }
          else
          {
            v372 = [*(id *)(v35 + 3384) sharedFactory];
            id v371 = [v372 stateForType:68];
          }
          id v373 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v371, "stateType"));
          uint64_t v374 = [v33 objectForKeyedSubscript:v373];
          v375 = (void *)v374;
          if (v374) {
            uint64_t v376 = (void *)v374;
          }
          else {
            uint64_t v376 = v371;
          }
          id v377 = v376;

          if (v377) {
            [v245 addLogMsgState:v377];
          }

          long long v236 = (void *)v368;
        }
        if ((HIDWORD(v691) & v318) == 1)
        {
          v378 = NSNumber;
          id v379 = [*(id *)(v35 + 3384) sharedFactory];
          uint64_t v380 = objc_msgSend(v378, "numberWithInt:", objc_msgSend(v379, "logMsgStateTypeForType:", 68));

          v381 = [v33 objectForKeyedSubscript:v380];
          uint64_t v382 = v381;
          if (v381)
          {
            id v383 = v381;
          }
          else
          {
            v384 = [*(id *)(v35 + 3384) sharedFactory];
            id v383 = [v384 stateForType:68];
          }
          id v385 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v383, "stateType"));
          uint64_t v386 = [v33 objectForKeyedSubscript:v385];
          v387 = (void *)v386;
          if (v386) {
            uint64_t v388 = (void *)v386;
          }
          else {
            uint64_t v388 = v383;
          }
          id v389 = v388;

          if (v389) {
            [v245 addLogMsgState:v389];
          }

          long long v236 = (void *)v380;
        }
        if ((v691 & v318) == 1)
        {
          v390 = NSNumber;
          id v391 = [*(id *)(v35 + 3384) sharedFactory];
          uint64_t v392 = objc_msgSend(v390, "numberWithInt:", objc_msgSend(v391, "logMsgStateTypeForType:", 68));

          v393 = [v33 objectForKeyedSubscript:v392];
          v394 = v393;
          if (v393)
          {
            id v395 = v393;
          }
          else
          {
            uint64_t v409 = [*(id *)(v35 + 3384) sharedFactory];
            id v395 = [v409 stateForType:68];
          }
          int v258 = a4;

          v410 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v395, "stateType"));
          uint64_t v411 = [v33 objectForKeyedSubscript:v410];
          id v412 = (void *)v411;
          if (v411) {
            v413 = (void *)v411;
          }
          else {
            v413 = v395;
          }
          id v414 = v413;

          if (v414) {
            [v245 addLogMsgState:v414];
          }
        }
        else
        {
          char v396 = !v693;
          if (v714 != 6006) {
            char v396 = 1;
          }
          id v16 = v692;
          if (v396)
          {
            BOOL v403 = a4 == 503;
            if (v714 != 1018 || a4 != 503)
            {
              if (v714 == 1017 && a4 == 259)
              {
                v415 = NSNumber;
                v416 = +[GEOAPStateFactory sharedFactory];
                uint64_t v417 = objc_msgSend(v415, "numberWithInt:", objc_msgSend(v416, "logMsgStateTypeForType:", 68));

                v418 = [v33 objectForKeyedSubscript:v417];
                v419 = v418;
                if (v418)
                {
                  id v420 = v418;
                }
                else
                {
                  char v550 = +[GEOAPStateFactory sharedFactory];
                  id v420 = [v550 stateForType:68];
                }
              }
              else
              {
                BOOL v437 = a4 == 501;
                if (v714 != 1017 || a4 != 501)
                {
                  if (a4 == 503 && v714 == 1017)
                  {
                    v516 = NSNumber;
                    int v517 = +[GEOAPStateFactory sharedFactory];
                    id v518 = objc_msgSend(v516, "numberWithInt:", objc_msgSend(v517, "logMsgStateTypeForType:", 68));

                    BOOL v519 = [v33 objectForKeyedSubscript:v518];
                    v520 = v519;
                    if (v519)
                    {
                      id v521 = v519;
                    }
                    else
                    {
                      v606 = +[GEOAPStateFactory sharedFactory];
                      id v521 = [v606 stateForType:68];
                    }
                    id v607 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v521, "stateType"));
                    uint64_t v608 = [v33 objectForKeyedSubscript:v607];
                    v609 = (void *)v608;
                    if (v608) {
                      v610 = (void *)v608;
                    }
                    else {
                      v610 = v521;
                    }
                    id v611 = v610;

                    if (v611) {
                      [v245 addLogMsgState:v611];
                    }
                    v612 = NSNumber;
                    id v613 = +[GEOAPStateFactory sharedFactory];
                    long long v236 = objc_msgSend(v612, "numberWithInt:", objc_msgSend(v613, "logMsgStateTypeForType:", 57));

                    char v614 = [v33 objectForKeyedSubscript:v236];
                    v615 = v614;
                    if (v614)
                    {
                      id v616 = v614;
                    }
                    else
                    {
                      v617 = +[GEOAPStateFactory sharedFactory];
                      id v616 = [v617 stateForType:57];
                    }
                    v618 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v616, "stateType"));
                    uint64_t v619 = [v33 objectForKeyedSubscript:v618];
                    id v620 = (void *)v619;
                    if (v619) {
                      v621 = (void *)v619;
                    }
                    else {
                      v621 = v616;
                    }
                    id v622 = v621;

                    if (v622) {
                      [v245 addLogMsgState:v622];
                    }

                    BOOL v403 = 1;
                  }
                  else if (a4 == 49 && v714 == 1017)
                  {
                    v558 = NSNumber;
                    uint64_t v559 = +[GEOAPStateFactory sharedFactory];
                    uint64_t v560 = objc_msgSend(v558, "numberWithInt:", objc_msgSend(v559, "logMsgStateTypeForType:", 68));

                    v561 = [v33 objectForKeyedSubscript:v560];
                    id v562 = v561;
                    if (v561)
                    {
                      id v563 = v561;
                    }
                    else
                    {
                      v646 = +[GEOAPStateFactory sharedFactory];
                      id v563 = [v646 stateForType:68];
                    }
                    id v647 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v563, "stateType"));
                    uint64_t v648 = [v33 objectForKeyedSubscript:v647];
                    v649 = (void *)v648;
                    if (v648) {
                      v650 = (void *)v648;
                    }
                    else {
                      v650 = v563;
                    }
                    id v651 = v650;

                    if (v651) {
                      [v245 addLogMsgState:v651];
                    }

                    long long v236 = (void *)v560;
                  }
LABEL_319:
                  if (v714 != 194 || !v437)
                  {
                    id v16 = v692;
                    if (v714 != 194) {
                      goto LABEL_335;
                    }
LABEL_332:
                    if (v403)
                    {
                      v451 = NSNumber;
                      unint64_t v452 = 0x265344000uLL;
                      v453 = +[GEOAPStateFactory sharedFactory];
                      uint64_t v454 = objc_msgSend(v451, "numberWithInt:", objc_msgSend(v453, "logMsgStateTypeForType:", 68));

                      v455 = [v33 objectForKeyedSubscript:v454];
                      v456 = v455;
                      if (v455)
                      {
                        id v457 = v455;
                      }
                      else
                      {
                        id v459 = +[GEOAPStateFactory sharedFactory];
                        id v457 = [v459 stateForType:68];
                      }
                      v460 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v457, "stateType"));
                      uint64_t v461 = [v33 objectForKeyedSubscript:v460];
                      uint64_t v462 = (void *)v461;
                      if (v461) {
                        v463 = (void *)v461;
                      }
                      else {
                        v463 = v457;
                      }
                      id v464 = v463;

                      id v20 = v689;
                      v458 = v687;
                      if (v464) {
                        [v245 addLogMsgState:v464];
                      }

                      long long v236 = (void *)v454;
                      id v21 = v688;
                      goto LABEL_343;
                    }
LABEL_335:
                    id v20 = v689;
                    v458 = v687;
                    unint64_t v452 = 0x265344000;
LABEL_343:
                    v465 = [*(id *)(v452 + 3384) sharedFactory];
                    v717[0] = MEMORY[0x263EF8330];
                    v717[1] = 3221225472;
                    v717[2] = __196__GEOAPPortal_UserActionCodeGen__capturePriorityShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
                    v717[3] = &unk_2653457B8;
                    id v466 = v245;
                    id v718 = v466;
                    id v720 = v690;
                    id v719 = v715;
                    [v465 sessionStateForType:6 callback:v717];

                    id v22 = v690;
                    id v18 = (id)*((void *)&v713 + 1);
                    id v17 = (id)v713;
                    id v19 = v712;
                    goto LABEL_344;
                  }
                  v438 = NSNumber;
                  id v439 = +[GEOAPStateFactory sharedFactory];
                  uint64_t v417 = objc_msgSend(v438, "numberWithInt:", objc_msgSend(v439, "logMsgStateTypeForType:", 68));

                  v440 = [v33 objectForKeyedSubscript:v417];
                  v441 = v440;
                  if (v440)
                  {
                    id v442 = v440;
                  }
                  else
                  {
                    v443 = +[GEOAPStateFactory sharedFactory];
                    id v442 = [v443 stateForType:68];
                  }
                  id v444 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v442, "stateType"));
                  uint64_t v445 = [v33 objectForKeyedSubscript:v444];
                  v446 = (void *)v445;
                  if (v445) {
                    v447 = (void *)v445;
                  }
                  else {
                    v447 = v442;
                  }
                  id v448 = v447;

                  int v449 = 1;
                  int v450 = 1;
                  long long v236 = (void *)v417;
                  id v16 = v692;
                  if (v448) {
                    goto LABEL_330;
                  }
                  goto LABEL_331;
                }
                v473 = NSNumber;
                id v474 = +[GEOAPStateFactory sharedFactory];
                uint64_t v417 = objc_msgSend(v473, "numberWithInt:", objc_msgSend(v474, "logMsgStateTypeForType:", 68));

                v475 = [v33 objectForKeyedSubscript:v417];
                v419 = v475;
                if (v475)
                {
                  id v420 = v475;
                }
                else
                {
                  uint64_t v580 = +[GEOAPStateFactory sharedFactory];
                  id v420 = [v580 stateForType:68];
                }
                id v16 = v692;
              }

              v581 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v420, "stateType"));
              uint64_t v582 = [v33 objectForKeyedSubscript:v581];
              id v583 = (void *)v582;
              if (v582) {
                v584 = (void *)v582;
              }
              else {
                v584 = v420;
              }
              id v448 = v584;

              int v449 = 0;
              int v450 = 0;
              long long v236 = (void *)v417;
              if (v448)
              {
LABEL_330:
                [v245 addLogMsgState:v448];
                int v450 = v449;
                long long v236 = (void *)v417;
              }
LABEL_331:

              if (!v450) {
                goto LABEL_335;
              }
              goto LABEL_332;
            }
            v404 = NSNumber;
            v405 = +[GEOAPStateFactory sharedFactory];
            uint64_t v392 = objc_msgSend(v404, "numberWithInt:", objc_msgSend(v405, "logMsgStateTypeForType:", 57));

            id v406 = [v33 objectForKeyedSubscript:v392];
            v407 = v406;
            if (v406)
            {
              id v408 = v406;
            }
            else
            {
              v504 = +[GEOAPStateFactory sharedFactory];
              id v408 = [v504 stateForType:57];
            }
            int v258 = a4;

            id v505 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v408, "stateType"));
            uint64_t v506 = [v33 objectForKeyedSubscript:v505];
            v507 = (void *)v506;
            if (v506) {
              uint64_t v508 = (void *)v506;
            }
            else {
              uint64_t v508 = v408;
            }
            id v509 = v508;

            if (v509) {
              [v245 addLogMsgState:v509];
            }

            BOOL v403 = 1;
LABEL_318:
            BOOL v437 = v258 == 501;
            long long v236 = (void *)v392;
            goto LABEL_319;
          }
          v397 = NSNumber;
          v398 = [*(id *)(v35 + 3384) sharedFactory];
          id v399 = objc_msgSend(v397, "numberWithInt:", objc_msgSend(v398, "logMsgStateTypeForType:", 68));

          BOOL v400 = [v33 objectForKeyedSubscript:v399];
          v401 = v400;
          if (v400)
          {
            id v402 = v400;
          }
          else
          {
            v421 = [*(id *)(v35 + 3384) sharedFactory];
            id v402 = [v421 stateForType:68];
          }
          int v258 = a4;

          v422 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v402, "stateType"));
          uint64_t v423 = [v33 objectForKeyedSubscript:v422];
          v424 = (void *)v423;
          if (v423) {
            v425 = (void *)v423;
          }
          else {
            v425 = v402;
          }
          id v414 = v425;

          if (v414) {
            [v245 addLogMsgState:v414];
          }
          v426 = NSNumber;
          v427 = [*(id *)(v35 + 3384) sharedFactory];
          uint64_t v392 = objc_msgSend(v426, "numberWithInt:", objc_msgSend(v427, "logMsgStateTypeForType:", 57));

          id v428 = [v33 objectForKeyedSubscript:v392];
          v429 = v428;
          if (v428)
          {
            id v430 = v428;
          }
          else
          {
            v431 = [*(id *)(v35 + 3384) sharedFactory];
            id v430 = [v431 stateForType:57];
          }
          v432 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v430, "stateType"));
          uint64_t v433 = [v33 objectForKeyedSubscript:v432];
          v434 = (void *)v433;
          if (v433) {
            v435 = (void *)v433;
          }
          else {
            v435 = v430;
          }
          id v436 = v435;

          if (v436) {
            [v245 addLogMsgState:v436];
          }
        }
        BOOL v403 = v258 == 503;
        goto LABEL_318;
      }
      BOOL v686 = v283;
      v663 = NSNumber;
      v664 = [*(id *)(v35 + 3384) sharedFactory];
      objc_msgSend(v663, "numberWithInt:", objc_msgSend(v664, "logMsgStateTypeForType:", 68));
      v666 = unint64_t v665 = v35;

      v667 = [v33 objectForKeyedSubscript:v666];
      v668 = v667;
      if (v667)
      {
        id v669 = v667;
      }
      else
      {
        v670 = [*(id *)(v665 + 3384) sharedFactory];
        id v669 = [v670 stateForType:68];
      }
      v671 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v669, "stateType"));
      uint64_t v672 = [v33 objectForKeyedSubscript:v671];
      v673 = (void *)v672;
      if (v672) {
        v674 = (void *)v672;
      }
      else {
        v674 = v669;
      }
      id v282 = v674;

      if (v282) {
        [v245 addLogMsgState:v282];
      }
      v675 = NSNumber;
      v676 = +[GEOAPStateFactory sharedFactory];
      uint64_t v261 = objc_msgSend(v675, "numberWithInt:", objc_msgSend(v676, "logMsgStateTypeForType:", 57));

      v677 = [v33 objectForKeyedSubscript:v261];
      v678 = v677;
      if (v677)
      {
        id v679 = v677;
      }
      else
      {
        v680 = +[GEOAPStateFactory sharedFactory];
        id v679 = [v680 stateForType:57];
      }
      v681 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v679, "stateType"));
      uint64_t v682 = [v33 objectForKeyedSubscript:v681];
      v683 = (void *)v682;
      if (v682) {
        v684 = (void *)v682;
      }
      else {
        v684 = v679;
      }
      id v685 = v684;

      if (v685) {
        [v245 addLogMsgState:v685];
      }

      BOOL v318 = 1;
      goto LABEL_542;
    }
  }
LABEL_344:
}

uint64_t __196__GEOAPPortal_UserActionCodeGen__capturePriorityShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)capturePriorityPlacecardActionShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v380 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v379 = "+[GEOAPPortal(UserActionCodeGen) capturePriorityPlacecardActionShortUserActionsWithAction:target:value:module"
           "Type:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v362 = v18;
      *(void *)&long long v366 = v16;
      *((void *)&v366 + 1) = v17;
      id v364 = v19;
      id v341 = v20;
      if (objc_msgSend(v19, "count", v22))
      {
        uint64_t v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v373 = 0u;
        long long v374 = 0u;
        long long v375 = 0u;
        long long v376 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v373 objects:v377 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v374;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v374 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v373 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v373 objects:v377 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 58));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:58];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v342 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 65));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        uint64_t v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:65];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      int v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v361 = v55;

      uint64_t v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 5));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        uint64_t v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:5];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      id v65 = (void *)v64;
      if (v64) {
        uint64_t v66 = (void *)v64;
      }
      else {
        uint64_t v66 = v61;
      }
      id v360 = v66;

      id v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 16));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        double v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:16];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      int v76 = (void *)v75;
      if (v75) {
        uint64_t v77 = (void *)v75;
      }
      else {
        uint64_t v77 = v72;
      }
      id v359 = v77;

      id v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 35));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:35];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      id v87 = (void *)v86;
      if (v86) {
        uint64_t v88 = (void *)v86;
      }
      else {
        uint64_t v88 = v83;
      }
      id v358 = v88;

      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 30));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        long long v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:30];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      long long v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v357 = v99;

      long long v100 = NSNumber;
      long long v101 = +[GEOAPStateFactory sharedFactory];
      long long v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 0));

      long long v103 = [v33 objectForKeyedSubscript:v102];
      long long v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        long long v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:0];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v356 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      long long v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 3));

      long long v114 = [v33 objectForKeyedSubscript:v113];
      uint64_t v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        long long v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:3];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      long long v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v355 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 64));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        id v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:64];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      uint64_t v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v354 = v132;

      id v133 = NSNumber;
      id v134 = +[GEOAPStateFactory sharedFactory];
      id v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 13));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:13];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      id v142 = (void *)v141;
      if (v141) {
        uint64_t v143 = (void *)v141;
      }
      else {
        uint64_t v143 = v138;
      }
      id v353 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      id v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 14));

      id v147 = [v33 objectForKeyedSubscript:v146];
      id v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        id v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:14];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      id v153 = (void *)v152;
      if (v152) {
        uint64_t v154 = (void *)v152;
      }
      else {
        uint64_t v154 = v149;
      }
      id v352 = v154;

      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      id v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 9));

      id v158 = [v33 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        long long v161 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v161 stateForType:9];
      }
      id v162 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v160, "stateType"));
      uint64_t v163 = [v33 objectForKeyedSubscript:v162];
      long long v164 = (void *)v163;
      if (v163) {
        uint64_t v165 = (void *)v163;
      }
      else {
        uint64_t v165 = v160;
      }
      id v351 = v165;

      long long v166 = NSNumber;
      long long v167 = +[GEOAPStateFactory sharedFactory];
      long long v168 = objc_msgSend(v166, "numberWithInt:", objc_msgSend(v167, "logMsgStateTypeForType:", 10));

      long long v169 = [v33 objectForKeyedSubscript:v168];
      uint64_t v170 = v169;
      if (v169)
      {
        id v171 = v169;
      }
      else
      {
        uint64_t v172 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v172 stateForType:10];
      }
      id v173 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v171, "stateType"));
      uint64_t v174 = [v33 objectForKeyedSubscript:v173];
      long long v175 = (void *)v174;
      if (v174) {
        uint64_t v176 = (void *)v174;
      }
      else {
        uint64_t v176 = v171;
      }
      id v350 = v176;

      long long v177 = NSNumber;
      long long v178 = +[GEOAPStateFactory sharedFactory];
      long long v179 = objc_msgSend(v177, "numberWithInt:", objc_msgSend(v178, "logMsgStateTypeForType:", 20));

      long long v180 = [v33 objectForKeyedSubscript:v179];
      long long v181 = v180;
      if (v180)
      {
        id v182 = v180;
      }
      else
      {
        id v183 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v183 stateForType:20];
      }
      id v184 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v182, "stateType"));
      uint64_t v185 = [v33 objectForKeyedSubscript:v184];
      id v186 = (void *)v185;
      if (v185) {
        uint64_t v187 = (void *)v185;
      }
      else {
        uint64_t v187 = v182;
      }
      id v349 = v187;

      id v188 = NSNumber;
      id v189 = +[GEOAPStateFactory sharedFactory];
      uint64_t v190 = objc_msgSend(v188, "numberWithInt:", objc_msgSend(v189, "logMsgStateTypeForType:", 42));

      long long v191 = [v33 objectForKeyedSubscript:v190];
      long long v192 = v191;
      if (v191)
      {
        id v193 = v191;
      }
      else
      {
        long long v194 = +[GEOAPStateFactory sharedFactory];
        id v193 = [v194 stateForType:42];
      }
      id v195 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v193, "stateType"));
      uint64_t v196 = [v33 objectForKeyedSubscript:v195];
      long long v197 = (void *)v196;
      if (v196) {
        uint64_t v198 = (void *)v196;
      }
      else {
        uint64_t v198 = v193;
      }
      id v348 = v198;

      long long v199 = NSNumber;
      long long v200 = +[GEOAPStateFactory sharedFactory];
      long long v201 = objc_msgSend(v199, "numberWithInt:", objc_msgSend(v200, "logMsgStateTypeForType:", 70));

      long long v202 = [v33 objectForKeyedSubscript:v201];
      id v203 = v202;
      if (v202)
      {
        id v204 = v202;
      }
      else
      {
        id v205 = +[GEOAPStateFactory sharedFactory];
        id v204 = [v205 stateForType:70];
      }
      id v206 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v204, "stateType"));
      uint64_t v207 = [v33 objectForKeyedSubscript:v206];
      id v208 = (void *)v207;
      if (v207) {
        uint64_t v209 = (void *)v207;
      }
      else {
        uint64_t v209 = v204;
      }
      id v347 = v209;

      id v210 = NSNumber;
      uint64_t v211 = +[GEOAPStateFactory sharedFactory];
      id v212 = objc_msgSend(v210, "numberWithInt:", objc_msgSend(v211, "logMsgStateTypeForType:", 7));

      id v213 = [v33 objectForKeyedSubscript:v212];
      long long v214 = v213;
      if (v213)
      {
        id v215 = v213;
      }
      else
      {
        long long v216 = +[GEOAPStateFactory sharedFactory];
        id v215 = [v216 stateForType:7];
      }
      id v217 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v215, "stateType"));
      uint64_t v218 = [v33 objectForKeyedSubscript:v217];
      id v219 = (void *)v218;
      if (v218) {
        uint64_t v220 = (void *)v218;
      }
      else {
        uint64_t v220 = v215;
      }
      id v346 = v220;

      id v221 = NSNumber;
      id v222 = +[GEOAPStateFactory sharedFactory];
      id v223 = objc_msgSend(v221, "numberWithInt:", objc_msgSend(v222, "logMsgStateTypeForType:", 17));

      uint64_t v224 = [v33 objectForKeyedSubscript:v223];
      id v225 = v224;
      if (v224)
      {
        id v226 = v224;
      }
      else
      {
        id v227 = +[GEOAPStateFactory sharedFactory];
        id v226 = [v227 stateForType:17];
      }
      id v363 = v15;

      id v228 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v226, "stateType"));
      uint64_t v229 = [v33 objectForKeyedSubscript:v228];
      id v230 = (void *)v229;
      if (v229) {
        uint64_t v231 = (void *)v229;
      }
      else {
        uint64_t v231 = v226;
      }
      id v345 = v231;

      long long v232 = NSNumber;
      long long v233 = +[GEOAPStateFactory sharedFactory];
      long long v234 = objc_msgSend(v232, "numberWithInt:", objc_msgSend(v233, "logMsgStateTypeForType:", 19));

      long long v235 = [v33 objectForKeyedSubscript:v234];
      long long v236 = v235;
      if (v235)
      {
        id v237 = v235;
      }
      else
      {
        id v238 = +[GEOAPStateFactory sharedFactory];
        id v237 = [v238 stateForType:19];
      }
      id v239 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v237, "stateType"));
      uint64_t v240 = [v33 objectForKeyedSubscript:v239];
      id v241 = (void *)v240;
      if (v240) {
        uint64_t v242 = (void *)v240;
      }
      else {
        uint64_t v242 = v237;
      }
      id v344 = v242;

      id v243 = NSNumber;
      id v244 = +[GEOAPStateFactory sharedFactory];
      id v245 = objc_msgSend(v243, "numberWithInt:", objc_msgSend(v244, "logMsgStateTypeForType:", 27));

      id v246 = [v33 objectForKeyedSubscript:v245];
      id v247 = v246;
      id v365 = v21;
      if (v246)
      {
        id v248 = v246;
      }
      else
      {
        id v249 = +[GEOAPStateFactory sharedFactory];
        id v248 = [v249 stateForType:27];
      }
      id v250 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v248, "stateType"));
      uint64_t v251 = [v33 objectForKeyedSubscript:v250];
      id v252 = (void *)v251;
      if (v251) {
        uint64_t v253 = (void *)v251;
      }
      else {
        uint64_t v253 = v248;
      }
      id v343 = v253;

      id v254 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v254 setEventType:1];
      id v255 = objc_alloc_init(MEMORY[0x263F41958]);
      [v254 setUserActionEvent:v255];

      id v256 = [v254 userActionEvent];
      [v256 setUserActionEventAction:a3];

      id v257 = [v254 userActionEvent];
      [v257 setUserActionEventTarget:a4];

      int v258 = [v254 userActionEvent];
      [v258 setUserActionEventValue:v15];

      id v259 = [v254 userActionEvent];
      [v259 setActionRichProviderId:v362];

      id v260 = v33;
      if (v366 != 0)
      {
        id v261 = objc_alloc_init(MEMORY[0x263F41960]);
        id v262 = [v254 userActionEvent];
        [v262 setModuleInfo:v261];

        if (v16)
        {
          uint64_t v263 = [v16 intValue];
          id v264 = [v254 userActionEvent];
          id v265 = [v264 moduleInfo];
          [v265 setType:v263];

          long long v33 = v260;
        }
        if (*((void *)&v366 + 1))
        {
          id v266 = [v254 userActionEvent];
          id v267 = [v266 moduleInfo];
          [v267 setModuleMetadata:*((void *)&v366 + 1)];

          long long v33 = v260;
        }
      }
      if (v361) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      id v19 = v364;
      id v21 = v365;
      if (v360) {
        [v254 addLogMsgState:v360];
      }
      if (v359) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v358) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v357) {
        [v254 addLogMsgState:v357];
      }
      if (v356) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v355) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v354) {
        [v254 addLogMsgState:v354];
      }
      if (v353) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v352) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v351) {
        [v254 addLogMsgState:v351];
      }
      if (v350) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v349) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v348) {
        [v254 addLogMsgState:v348];
      }
      if (v346) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v345) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v344) {
        [v254 addLogMsgState:v344];
      }
      if (v343) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (v342) {
        [v254 addLogMsgState:v342];
      }
      if (v347) {
        objc_msgSend(v254, "addLogMsgState:");
      }
      if (a3 == 6036 && a4 == 201)
      {
        id v268 = v33;
        id v269 = NSNumber;
        id v270 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v269, "numberWithInt:", objc_msgSend(v270, "logMsgStateTypeForType:", 68));

        uint64_t v272 = [v268 objectForKeyedSubscript:v271];
        id v273 = v272;
        if (v272)
        {
          id v274 = v272;
        }
        else
        {
          unint64_t v288 = +[GEOAPStateFactory sharedFactory];
          id v274 = [v288 stateForType:68];
        }
        id v289 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v274, "stateType"));
        uint64_t v290 = [v260 objectForKeyedSubscript:v289];
        id v291 = (void *)v290;
        if (v290) {
          uint64_t v292 = (void *)v290;
        }
        else {
          uint64_t v292 = v274;
        }
        id v293 = v292;

        BOOL v294 = 0;
        BOOL v275 = 0;
        if (v293)
        {
LABEL_198:
          id v15 = v363;
          id v19 = v364;
LABEL_199:
          [v254 addLogMsgState:v293];
LABEL_210:

          id v245 = (void *)v271;
          id v21 = v365;
LABEL_211:
          if (v294 && v275)
          {
            id v305 = NSNumber;
            id v306 = +[GEOAPStateFactory sharedFactory];
            uint64_t v307 = objc_msgSend(v305, "numberWithInt:", objc_msgSend(v306, "logMsgStateTypeForType:", 68));

            id v308 = [v260 objectForKeyedSubscript:v307];
            unint64_t v309 = v308;
            if (v308)
            {
              id v310 = v308;
            }
            else
            {
              uint64_t v312 = +[GEOAPStateFactory sharedFactory];
              id v310 = [v312 stateForType:68];
            }
            id v313 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v310, "stateType"));
            uint64_t v314 = [v260 objectForKeyedSubscript:v313];
            id v315 = (void *)v314;
            if (v314) {
              long long v316 = (void *)v314;
            }
            else {
              long long v316 = v310;
            }
            id v317 = v316;

            id v311 = v342;
            if (v317) {
              [v254 addLogMsgState:v317];
            }

            id v245 = (void *)v307;
            id v15 = v363;
            id v19 = v364;
            id v21 = v365;
          }
          else
          {
            id v311 = v342;
          }
          BOOL v318 = +[GEOAPStateFactory sharedFactory];
          v369[0] = MEMORY[0x263EF8330];
          v369[1] = 3221225472;
          v369[2] = __211__GEOAPPortal_UserActionCodeGen__capturePriorityPlacecardActionShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
          v369[3] = &unk_2653457B8;
          id v319 = v254;
          id v370 = v319;
          id v22 = v340;
          id v372 = v340;
          id v371 = v21;
          [v318 sessionStateForType:6 callback:v369];

          id v17 = (id)*((void *)&v366 + 1);
          id v18 = v362;
          id v20 = v341;
          goto LABEL_224;
        }
      }
      else
      {
        BOOL v275 = a4 == 30;
        if (a3 != 6036 || a4 != 30)
        {
          if (a3 == 6074 && a4 == 201)
          {
            id v282 = v33;
            BOOL v283 = NSNumber;
            long long v284 = +[GEOAPStateFactory sharedFactory];
            uint64_t v271 = objc_msgSend(v283, "numberWithInt:", objc_msgSend(v284, "logMsgStateTypeForType:", 68));

            id v285 = [v282 objectForKeyedSubscript:v271];
            id v286 = v285;
            if (v285)
            {
              id v287 = v285;
            }
            else
            {
              uint64_t v325 = +[GEOAPStateFactory sharedFactory];
              id v287 = [v325 stateForType:68];
            }
            id v326 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v287, "stateType"));
            uint64_t v327 = [v260 objectForKeyedSubscript:v326];
            v328 = (void *)v327;
            if (v327) {
              uint64_t v329 = (void *)v327;
            }
            else {
              uint64_t v329 = v287;
            }
            id v293 = v329;

            BOOL v294 = 0;
          }
          else
          {
            if (a3 != 6074 || a4 != 30)
            {
              BOOL v294 = a3 == 50;
              if (a3 != 50 || a4 != 201) {
                goto LABEL_211;
              }
              id v320 = NSNumber;
              long long v321 = +[GEOAPStateFactory sharedFactory];
              uint64_t v271 = objc_msgSend(v320, "numberWithInt:", objc_msgSend(v321, "logMsgStateTypeForType:", 68));

              v322 = [v260 objectForKeyedSubscript:v271];
              uint64_t v323 = v322;
              if (v322)
              {
                id v324 = v322;
              }
              else
              {
                id v335 = +[GEOAPStateFactory sharedFactory];
                id v324 = [v335 stateForType:68];
              }
              v336 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v324, "stateType"));
              uint64_t v337 = [v260 objectForKeyedSubscript:v336];
              uint64_t v338 = (void *)v337;
              if (v337) {
                char v339 = (void *)v337;
              }
              else {
                char v339 = v324;
              }
              id v293 = v339;

              BOOL v294 = 1;
              if (v293) {
                goto LABEL_198;
              }
              goto LABEL_209;
            }
            id v295 = NSNumber;
            id v296 = +[GEOAPStateFactory sharedFactory];
            uint64_t v271 = objc_msgSend(v295, "numberWithInt:", objc_msgSend(v296, "logMsgStateTypeForType:", 68));

            id v297 = [v260 objectForKeyedSubscript:v271];
            id v298 = v297;
            if (v297)
            {
              id v299 = v297;
            }
            else
            {
              id v330 = +[GEOAPStateFactory sharedFactory];
              id v299 = [v330 stateForType:68];
            }
            v331 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v299, "stateType"));
            uint64_t v332 = [v260 objectForKeyedSubscript:v331];
            v333 = (void *)v332;
            if (v332) {
              v334 = (void *)v332;
            }
            else {
              v334 = v299;
            }
            id v293 = v334;

            BOOL v294 = 0;
            BOOL v275 = 1;
          }
          id v15 = v363;
          id v19 = v364;
          if (!v293) {
            goto LABEL_210;
          }
          goto LABEL_199;
        }
        id v276 = v33;
        id v277 = NSNumber;
        uint64_t v278 = +[GEOAPStateFactory sharedFactory];
        uint64_t v271 = objc_msgSend(v277, "numberWithInt:", objc_msgSend(v278, "logMsgStateTypeForType:", 68));

        uint64_t v279 = [v276 objectForKeyedSubscript:v271];
        long long v280 = v279;
        if (v279)
        {
          id v281 = v279;
        }
        else
        {
          id v300 = +[GEOAPStateFactory sharedFactory];
          id v281 = [v300 stateForType:68];
        }
        id v301 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v281, "stateType"));
        uint64_t v302 = [v260 objectForKeyedSubscript:v301];
        uint64_t v303 = (void *)v302;
        if (v302) {
          id v304 = (void *)v302;
        }
        else {
          id v304 = v281;
        }
        id v293 = v304;

        BOOL v294 = 0;
        BOOL v275 = 1;
        if (v293) {
          goto LABEL_198;
        }
      }
LABEL_209:
      id v15 = v363;
      id v19 = v364;
      goto LABEL_210;
    }
  }
LABEL_224:
}

uint64_t __211__GEOAPPortal_UserActionCodeGen__capturePriorityPlacecardActionShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureMuninUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v241 = "+[GEOAPPortal(UserActionCodeGen) captureMuninUserActionShortOnlyWithAction:target:value:moduleType:moduleMeta"
           "data:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      *(void *)&long long v228 = v16;
      *((void *)&v228 + 1) = v17;
      id v212 = v22;
      id v213 = v21;
      id v215 = v19;
      if ([v19 count])
      {
        uint64_t v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v235 objects:v239 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v236;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v236 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v235 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v235 objects:v239 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v226 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 16));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        uint64_t v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:16];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      int v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v56 = v55;

      uint64_t v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 35));

      unint64_t v60 = [v33 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:35];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v33 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        id v67 = (void *)v65;
      }
      else {
        id v67 = v62;
      }
      id v225 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 30));

      uint64_t v71 = [v33 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:30];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v33 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        id v78 = (void *)v76;
      }
      else {
        id v78 = v73;
      }
      id v224 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 0));

      id v82 = [v33 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:0];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v33 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        id v89 = (void *)v87;
      }
      else {
        id v89 = v84;
      }
      id v223 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 3));

      long long v93 = [v33 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:3];
      }
      uint64_t v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v33 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        long long v100 = (void *)v98;
      }
      else {
        long long v100 = v95;
      }
      id v222 = v100;

      long long v101 = NSNumber;
      long long v102 = +[GEOAPStateFactory sharedFactory];
      long long v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 32));

      long long v104 = [v33 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:32];
      }
      uint64_t v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v33 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v221 = v111;

      id v112 = NSNumber;
      long long v113 = +[GEOAPStateFactory sharedFactory];
      long long v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 13));

      uint64_t v115 = [v33 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:13];
      }
      uint64_t v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v33 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        uint64_t v122 = (void *)v120;
      }
      else {
        uint64_t v122 = v117;
      }
      id v220 = v122;

      uint64_t v123 = NSNumber;
      uint64_t v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 14));

      id v126 = [v33 objectForKeyedSubscript:v125];
      id v127 = v126;
      id v216 = v56;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        id v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:14];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v33 objectForKeyedSubscript:v130];
      uint64_t v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v219 = v133;

      id v134 = NSNumber;
      id v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 9));

      id v137 = [v33 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:9];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v33 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v218 = v144;

      id v145 = NSNumber;
      id v146 = +[GEOAPStateFactory sharedFactory];
      id v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 10));

      id v148 = [v33 objectForKeyedSubscript:v147];
      id v149 = v148;
      id v227 = v18;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:10];
      }
      uint64_t v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v33 objectForKeyedSubscript:v152];
      uint64_t v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v156 = v155;

      id v157 = NSNumber;
      id v158 = +[GEOAPStateFactory sharedFactory];
      id v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 42));

      id v160 = [v33 objectForKeyedSubscript:v159];
      long long v161 = v160;
      id v214 = v20;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        uint64_t v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:42];
      }
      long long v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v33 objectForKeyedSubscript:v164];
      long long v166 = (void *)v165;
      if (v165) {
        long long v167 = (void *)v165;
      }
      else {
        long long v167 = v162;
      }
      id v168 = v167;

      long long v169 = NSNumber;
      uint64_t v170 = +[GEOAPStateFactory sharedFactory];
      id v171 = objc_msgSend(v169, "numberWithInt:", objc_msgSend(v170, "logMsgStateTypeForType:", 70));

      uint64_t v172 = [v33 objectForKeyedSubscript:v171];
      id v173 = v172;
      if (v172)
      {
        id v174 = v172;
      }
      else
      {
        long long v175 = +[GEOAPStateFactory sharedFactory];
        id v174 = [v175 stateForType:70];
      }
      uint64_t v176 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v174, "stateType"));
      uint64_t v177 = [v33 objectForKeyedSubscript:v176];
      long long v178 = v33;
      long long v179 = (void *)v177;
      if (v177) {
        long long v180 = (void *)v177;
      }
      else {
        long long v180 = v174;
      }
      id v181 = v180;

      id v182 = NSNumber;
      id v183 = +[GEOAPStateFactory sharedFactory];
      uint64_t v184 = objc_msgSend(v182, "numberWithInt:", objc_msgSend(v183, "logMsgStateTypeForType:", 17));

      id v217 = v178;
      uint64_t v211 = (void *)v184;
      uint64_t v185 = [v178 objectForKeyedSubscript:v184];
      id v186 = v185;
      if (v185)
      {
        id v187 = v185;
      }
      else
      {
        id v188 = +[GEOAPStateFactory sharedFactory];
        id v187 = [v188 stateForType:17];
      }
      id v189 = v216;

      uint64_t v190 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v187, "stateType"));
      uint64_t v191 = [v178 objectForKeyedSubscript:v190];
      long long v192 = (void *)v191;
      if (v191) {
        id v193 = (void *)v191;
      }
      else {
        id v193 = v187;
      }
      id v194 = v193;

      id v195 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v195 setEventType:1];
      id v196 = objc_alloc_init(MEMORY[0x263F41958]);
      [v195 setUserActionEvent:v196];

      long long v197 = [v195 userActionEvent];
      [v197 setUserActionEventAction:a3];

      uint64_t v198 = [v195 userActionEvent];
      [v198 setUserActionEventTarget:a4];

      long long v199 = [v195 userActionEvent];
      [v199 setUserActionEventValue:v15];

      long long v200 = [v195 userActionEvent];
      [v200 setActionRichProviderId:v227];

      if (v228 != 0)
      {
        id v201 = objc_alloc_init(MEMORY[0x263F41960]);
        long long v202 = [v195 userActionEvent];
        [v202 setModuleInfo:v201];

        if ((void)v228)
        {
          uint64_t v203 = [(id)v228 intValue];
          id v204 = [v195 userActionEvent];
          id v205 = [v204 moduleInfo];
          [v205 setType:v203];

          id v189 = v216;
        }
        if (*((void *)&v228 + 1))
        {
          id v206 = [v195 userActionEvent];
          uint64_t v207 = [v206 moduleInfo];
          [v207 setModuleMetadata:*((void *)&v228 + 1)];
        }
      }
      if (v226) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      id v21 = v213;
      if (v189) {
        [v195 addLogMsgState:v189];
      }
      if (v225) {
        [v195 addLogMsgState:v225];
      }
      if (v224) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v223) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v222) {
        [v195 addLogMsgState:v222];
      }
      if (v221) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v220) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v219) {
        [v195 addLogMsgState:v219];
      }
      if (v218) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v156) {
        [v195 addLogMsgState:v156];
      }
      if (v168) {
        [v195 addLogMsgState:v168];
      }
      if (v194) {
        [v195 addLogMsgState:v194];
      }
      id v208 = v156;
      if (v181) {
        [v195 addLogMsgState:v181];
      }
      uint64_t v209 = +[GEOAPStateFactory sharedFactory];
      v231[0] = MEMORY[0x263EF8330];
      v231[1] = 3221225472;
      v231[2] = __196__GEOAPPortal_UserActionCodeGen__captureMuninUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v231[3] = &unk_2653457B8;
      id v210 = v195;
      id v232 = v210;
      id v22 = v212;
      id v234 = v212;
      id v233 = v213;
      [v209 sessionStateForType:6 callback:v231];

      id v17 = (id)*((void *)&v228 + 1);
      id v16 = (id)v228;
      id v18 = v227;
      id v20 = v214;
      id v19 = v215;
    }
  }
}

uint64_t __196__GEOAPPortal_UserActionCodeGen__captureMuninUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureMuninCameraUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v241 = "+[GEOAPPortal(UserActionCodeGen) captureMuninCameraUserActionShortOnlyWithAction:target:value:moduleType:modu"
           "leMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      *(void *)&long long v228 = v16;
      *((void *)&v228 + 1) = v17;
      id v212 = v22;
      id v213 = v21;
      id v215 = v19;
      if ([v19 count])
      {
        uint64_t v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v235 objects:v239 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v236;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v236 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v235 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v235 objects:v239 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v226 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 16));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        uint64_t v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:16];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      int v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v56 = v55;

      uint64_t v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 35));

      unint64_t v60 = [v33 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:35];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v33 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        id v67 = (void *)v65;
      }
      else {
        id v67 = v62;
      }
      id v225 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 30));

      uint64_t v71 = [v33 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:30];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v33 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        id v78 = (void *)v76;
      }
      else {
        id v78 = v73;
      }
      id v224 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 0));

      id v82 = [v33 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:0];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v33 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        id v89 = (void *)v87;
      }
      else {
        id v89 = v84;
      }
      id v223 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 3));

      long long v93 = [v33 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:3];
      }
      uint64_t v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v33 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        long long v100 = (void *)v98;
      }
      else {
        long long v100 = v95;
      }
      id v222 = v100;

      long long v101 = NSNumber;
      long long v102 = +[GEOAPStateFactory sharedFactory];
      long long v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 32));

      long long v104 = [v33 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:32];
      }
      uint64_t v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v33 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v221 = v111;

      id v112 = NSNumber;
      long long v113 = +[GEOAPStateFactory sharedFactory];
      long long v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 13));

      uint64_t v115 = [v33 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:13];
      }
      uint64_t v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v33 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        uint64_t v122 = (void *)v120;
      }
      else {
        uint64_t v122 = v117;
      }
      id v220 = v122;

      uint64_t v123 = NSNumber;
      uint64_t v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 14));

      id v126 = [v33 objectForKeyedSubscript:v125];
      id v127 = v126;
      id v216 = v56;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        id v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:14];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v33 objectForKeyedSubscript:v130];
      uint64_t v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v219 = v133;

      id v134 = NSNumber;
      id v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 9));

      id v137 = [v33 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:9];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v33 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v218 = v144;

      id v145 = NSNumber;
      id v146 = +[GEOAPStateFactory sharedFactory];
      id v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 10));

      id v148 = [v33 objectForKeyedSubscript:v147];
      id v149 = v148;
      id v227 = v18;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:10];
      }
      uint64_t v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v33 objectForKeyedSubscript:v152];
      uint64_t v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v156 = v155;

      id v157 = NSNumber;
      id v158 = +[GEOAPStateFactory sharedFactory];
      id v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 42));

      id v160 = [v33 objectForKeyedSubscript:v159];
      long long v161 = v160;
      id v214 = v20;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        uint64_t v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:42];
      }
      long long v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v33 objectForKeyedSubscript:v164];
      long long v166 = (void *)v165;
      if (v165) {
        long long v167 = (void *)v165;
      }
      else {
        long long v167 = v162;
      }
      id v168 = v167;

      long long v169 = NSNumber;
      uint64_t v170 = +[GEOAPStateFactory sharedFactory];
      id v171 = objc_msgSend(v169, "numberWithInt:", objc_msgSend(v170, "logMsgStateTypeForType:", 70));

      uint64_t v172 = [v33 objectForKeyedSubscript:v171];
      id v173 = v172;
      if (v172)
      {
        id v174 = v172;
      }
      else
      {
        long long v175 = +[GEOAPStateFactory sharedFactory];
        id v174 = [v175 stateForType:70];
      }
      uint64_t v176 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v174, "stateType"));
      uint64_t v177 = [v33 objectForKeyedSubscript:v176];
      long long v178 = v33;
      long long v179 = (void *)v177;
      if (v177) {
        long long v180 = (void *)v177;
      }
      else {
        long long v180 = v174;
      }
      id v181 = v180;

      id v182 = NSNumber;
      id v183 = +[GEOAPStateFactory sharedFactory];
      uint64_t v184 = objc_msgSend(v182, "numberWithInt:", objc_msgSend(v183, "logMsgStateTypeForType:", 17));

      id v217 = v178;
      uint64_t v211 = (void *)v184;
      uint64_t v185 = [v178 objectForKeyedSubscript:v184];
      id v186 = v185;
      if (v185)
      {
        id v187 = v185;
      }
      else
      {
        id v188 = +[GEOAPStateFactory sharedFactory];
        id v187 = [v188 stateForType:17];
      }
      id v189 = v216;

      uint64_t v190 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v187, "stateType"));
      uint64_t v191 = [v178 objectForKeyedSubscript:v190];
      long long v192 = (void *)v191;
      if (v191) {
        id v193 = (void *)v191;
      }
      else {
        id v193 = v187;
      }
      id v194 = v193;

      id v195 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v195 setEventType:1];
      id v196 = objc_alloc_init(MEMORY[0x263F41958]);
      [v195 setUserActionEvent:v196];

      long long v197 = [v195 userActionEvent];
      [v197 setUserActionEventAction:a3];

      uint64_t v198 = [v195 userActionEvent];
      [v198 setUserActionEventTarget:a4];

      long long v199 = [v195 userActionEvent];
      [v199 setUserActionEventValue:v15];

      long long v200 = [v195 userActionEvent];
      [v200 setActionRichProviderId:v227];

      if (v228 != 0)
      {
        id v201 = objc_alloc_init(MEMORY[0x263F41960]);
        long long v202 = [v195 userActionEvent];
        [v202 setModuleInfo:v201];

        if ((void)v228)
        {
          uint64_t v203 = [(id)v228 intValue];
          id v204 = [v195 userActionEvent];
          id v205 = [v204 moduleInfo];
          [v205 setType:v203];

          id v189 = v216;
        }
        if (*((void *)&v228 + 1))
        {
          id v206 = [v195 userActionEvent];
          uint64_t v207 = [v206 moduleInfo];
          [v207 setModuleMetadata:*((void *)&v228 + 1)];
        }
      }
      if (v226) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      id v21 = v213;
      if (v189) {
        [v195 addLogMsgState:v189];
      }
      if (v225) {
        [v195 addLogMsgState:v225];
      }
      if (v224) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v223) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v222) {
        [v195 addLogMsgState:v222];
      }
      if (v221) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v220) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v219) {
        [v195 addLogMsgState:v219];
      }
      if (v218) {
        objc_msgSend(v195, "addLogMsgState:");
      }
      if (v156) {
        [v195 addLogMsgState:v156];
      }
      if (v168) {
        [v195 addLogMsgState:v168];
      }
      if (v194) {
        [v195 addLogMsgState:v194];
      }
      id v208 = v156;
      if (v181) {
        [v195 addLogMsgState:v181];
      }
      uint64_t v209 = +[GEOAPStateFactory sharedFactory];
      v231[0] = MEMORY[0x263EF8330];
      v231[1] = 3221225472;
      v231[2] = __202__GEOAPPortal_UserActionCodeGen__captureMuninCameraUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v231[3] = &unk_2653457B8;
      id v210 = v195;
      id v232 = v210;
      id v22 = v212;
      id v234 = v212;
      id v233 = v213;
      [v209 sessionStateForType:6 callback:v231];

      id v17 = (id)*((void *)&v228 + 1);
      id v16 = (id)v228;
      id v18 = v227;
      id v20 = v214;
      id v19 = v215;
    }
  }
}

uint64_t __202__GEOAPPortal_UserActionCodeGen__captureMuninCameraUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureRapUserActionShortOnlyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v311 = "+[GEOAPPortal(UserActionCodeGen) captureRapUserActionShortOnlyWithAction:target:value:moduleType:moduleMetada"
           "ta:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      BOOL v275 = v22;
      id v277 = v20;
      unint64_t v298 = (unint64_t)v17;
      unint64_t v279 = (unint64_t)v16;
      id v276 = v21;
      id v297 = v18;
      id v278 = v19;
      if ([v19 count])
      {
        id v25 = v15;
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        id v27 = v19;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v306;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v306 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v305 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        id v15 = v25;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      id v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v296 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v295 = v56;

      uint64_t v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 16));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:16];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        id v67 = (void *)v65;
      }
      else {
        id v67 = v62;
      }
      id v294 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 35));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:35];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        id v78 = (void *)v76;
      }
      else {
        id v78 = v73;
      }
      id v293 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 30));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:30];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        id v89 = (void *)v87;
      }
      else {
        id v89 = v84;
      }
      id v292 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 0));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:0];
      }
      uint64_t v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        long long v100 = (void *)v98;
      }
      else {
        long long v100 = v95;
      }
      id v291 = v100;

      long long v101 = NSNumber;
      long long v102 = +[GEOAPStateFactory sharedFactory];
      long long v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 3));

      long long v104 = [v34 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:3];
      }
      uint64_t v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v34 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v290 = v111;

      id v112 = NSNumber;
      long long v113 = +[GEOAPStateFactory sharedFactory];
      long long v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 64));

      uint64_t v115 = [v34 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:64];
      }
      uint64_t v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v34 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        uint64_t v122 = (void *)v120;
      }
      else {
        uint64_t v122 = v117;
      }
      id v289 = v122;

      uint64_t v123 = NSNumber;
      uint64_t v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 13));

      id v126 = [v34 objectForKeyedSubscript:v125];
      id v127 = v126;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        id v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:13];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v34 objectForKeyedSubscript:v130];
      uint64_t v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v288 = v133;

      id v134 = NSNumber;
      id v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 14));

      id v137 = [v34 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:14];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v34 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v287 = v144;

      id v145 = NSNumber;
      id v146 = +[GEOAPStateFactory sharedFactory];
      id v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 9));

      id v148 = [v34 objectForKeyedSubscript:v147];
      id v149 = v148;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:9];
      }
      uint64_t v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v34 objectForKeyedSubscript:v152];
      uint64_t v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v286 = v155;

      id v156 = NSNumber;
      id v157 = +[GEOAPStateFactory sharedFactory];
      id v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 10));

      id v159 = [v34 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        id v162 = +[GEOAPStateFactory sharedFactory];
        id v161 = [v162 stateForType:10];
      }
      uint64_t v163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v161, "stateType"));
      uint64_t v164 = [v34 objectForKeyedSubscript:v163];
      uint64_t v165 = (void *)v164;
      if (v164) {
        long long v166 = (void *)v164;
      }
      else {
        long long v166 = v161;
      }
      id v285 = v166;

      long long v167 = NSNumber;
      id v168 = +[GEOAPStateFactory sharedFactory];
      long long v169 = objc_msgSend(v167, "numberWithInt:", objc_msgSend(v168, "logMsgStateTypeForType:", 20));

      uint64_t v170 = [v34 objectForKeyedSubscript:v169];
      id v171 = v170;
      if (v170)
      {
        id v172 = v170;
      }
      else
      {
        id v173 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v173 stateForType:20];
      }
      id v174 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v172, "stateType"));
      uint64_t v175 = [v34 objectForKeyedSubscript:v174];
      uint64_t v176 = (void *)v175;
      if (v175) {
        uint64_t v177 = (void *)v175;
      }
      else {
        uint64_t v177 = v172;
      }
      id v284 = v177;

      long long v178 = NSNumber;
      long long v179 = +[GEOAPStateFactory sharedFactory];
      long long v180 = objc_msgSend(v178, "numberWithInt:", objc_msgSend(v179, "logMsgStateTypeForType:", 42));

      id v181 = [v34 objectForKeyedSubscript:v180];
      id v182 = v181;
      if (v181)
      {
        id v183 = v181;
      }
      else
      {
        uint64_t v184 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v184 stateForType:42];
      }
      uint64_t v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v183, "stateType"));
      uint64_t v186 = [v34 objectForKeyedSubscript:v185];
      id v187 = (void *)v186;
      if (v186) {
        id v188 = (void *)v186;
      }
      else {
        id v188 = v183;
      }
      id v189 = v188;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v34 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        id v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      long long v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      long long v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v274 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      id v204 = [v34 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      id v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v282 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      id v215 = [v34 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        id v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      id v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v281 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      id v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 51));

      id v226 = [v34 objectForKeyedSubscript:v225];
      id v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        uint64_t v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:51];
      }
      id v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      id v232 = (void *)v231;
      if (v231) {
        id v233 = (void *)v231;
      }
      else {
        id v233 = v228;
      }
      id v280 = v233;

      id v234 = NSNumber;
      long long v235 = +[GEOAPStateFactory sharedFactory];
      long long v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 19));

      long long v237 = [v34 objectForKeyedSubscript:v236];
      long long v238 = v237;
      BOOL v283 = v189;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        uint64_t v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:19];
      }
      id v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v34 objectForKeyedSubscript:v241];
      id v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v245 = v244;

      id v246 = NSNumber;
      id v247 = +[GEOAPStateFactory sharedFactory];
      id v248 = objc_msgSend(v246, "numberWithInt:", objc_msgSend(v247, "logMsgStateTypeForType:", 27));

      id v249 = [v34 objectForKeyedSubscript:v248];
      id v250 = v249;
      if (v249)
      {
        id v251 = v249;
      }
      else
      {
        id v252 = +[GEOAPStateFactory sharedFactory];
        id v251 = [v252 stateForType:27];
      }
      id v16 = (id)v279;

      uint64_t v253 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v251, "stateType"));
      uint64_t v254 = [v34 objectForKeyedSubscript:v253];
      id v255 = (void *)v254;
      if (v254) {
        id v256 = (void *)v254;
      }
      else {
        id v256 = v251;
      }
      id v257 = v256;

      id v258 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v258 setEventType:1];
      id v259 = objc_alloc_init(MEMORY[0x263F41958]);
      [v258 setUserActionEvent:v259];

      id v260 = [v258 userActionEvent];
      [v260 setUserActionEventAction:a3];

      id v261 = [v258 userActionEvent];
      [v261 setUserActionEventTarget:a4];

      id v262 = [v258 userActionEvent];
      [v262 setUserActionEventValue:v15];

      uint64_t v263 = [v258 userActionEvent];
      [v263 setActionRichProviderId:v297];

      if (v279 | v298)
      {
        id v264 = objc_alloc_init(MEMORY[0x263F41960]);
        id v265 = [v258 userActionEvent];
        [v265 setModuleInfo:v264];

        if (v279)
        {
          uint64_t v266 = [(id)v279 intValue];
          id v267 = [v258 userActionEvent];
          [v267 moduleInfo];
          v269 = id v268 = v15;
          [v269 setType:v266];

          id v15 = v268;
          id v16 = (id)v279;
        }
        if (v298)
        {
          id v270 = [v258 userActionEvent];
          uint64_t v271 = [v270 moduleInfo];
          [v271 setModuleMetadata:v298];
        }
      }
      if (v296) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v295) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v294) {
        [v258 addLogMsgState:v294];
      }
      if (v293) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v292) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v291) {
        [v258 addLogMsgState:v291];
      }
      if (v290) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v289) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v288) {
        [v258 addLogMsgState:v288];
      }
      if (v287) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v286) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v285) {
        [v258 addLogMsgState:v285];
      }
      if (v284) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v283) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v282) {
        [v258 addLogMsgState:v282];
      }
      if (v281) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v245) {
        [v258 addLogMsgState:v245];
      }
      if (v257) {
        [v258 addLogMsgState:v257];
      }
      if (v280) {
        [v258 addLogMsgState:v280];
      }
      if (v274) {
        [v258 addLogMsgState:v274];
      }
      uint64_t v272 = +[GEOAPStateFactory sharedFactory];
      v301[0] = MEMORY[0x263EF8330];
      v301[1] = 3221225472;
      v301[2] = __194__GEOAPPortal_UserActionCodeGen__captureRapUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v301[3] = &unk_2653457B8;
      id v273 = v258;
      id v302 = v273;
      id v304 = v275;
      id v21 = v276;
      id v303 = v276;
      [v272 sessionStateForType:6 callback:v301];

      id v22 = v275;
      id v18 = v297;
      id v17 = (id)v298;
      id v20 = v277;
      id v19 = v278;
    }
  }
}

uint64_t __194__GEOAPPortal_UserActionCodeGen__captureRapUserActionShortOnlyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureRapShortAndSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v357 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v356 = "+[GEOAPPortal(UserActionCodeGen) captureRapShortAndSessionlessUserActionTargetPairWithAction:target:value:mod"
           "uleType:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      v331 = v22;
      id v312 = v20;
      unint64_t v333 = (unint64_t)v17;
      unint64_t v339 = (unint64_t)v16;
      id v332 = v15;
      id v338 = v18;
      id v313 = v19;
      if ([v19 count])
      {
        id v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v350 = 0u;
        long long v351 = 0u;
        long long v352 = 0u;
        long long v353 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v350 objects:v354 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v351;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v351 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v350 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v350 objects:v354 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
        id v15 = v332;
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 2));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:2];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v330 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 65));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:65];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      uint64_t v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v329 = v55;

      id v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 5));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:5];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      uint64_t v65 = (void *)v64;
      if (v64) {
        uint64_t v66 = (void *)v64;
      }
      else {
        uint64_t v66 = v61;
      }
      id v328 = v66;

      id v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 6));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        id v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:6];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      uint64_t v76 = (void *)v75;
      if (v75) {
        uint64_t v77 = (void *)v75;
      }
      else {
        uint64_t v77 = v72;
      }
      id v327 = v77;

      id v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 16));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:16];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      uint64_t v87 = (void *)v86;
      if (v86) {
        uint64_t v88 = (void *)v86;
      }
      else {
        uint64_t v88 = v83;
      }
      id v326 = v88;

      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 35));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        id v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:35];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      uint64_t v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v325 = v99;

      long long v100 = NSNumber;
      long long v101 = +[GEOAPStateFactory sharedFactory];
      long long v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 30));

      long long v103 = [v33 objectForKeyedSubscript:v102];
      long long v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:30];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v337 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      long long v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 0));

      long long v114 = [v33 objectForKeyedSubscript:v113];
      uint64_t v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        id v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:0];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      uint64_t v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v336 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 3));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        id v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:3];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      uint64_t v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v335 = v132;

      id v133 = NSNumber;
      id v134 = +[GEOAPStateFactory sharedFactory];
      id v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 64));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:64];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      uint64_t v142 = (void *)v141;
      if (v141) {
        uint64_t v143 = (void *)v141;
      }
      else {
        uint64_t v143 = v138;
      }
      id v324 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      id v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 13));

      id v147 = [v33 objectForKeyedSubscript:v146];
      id v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        id v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:13];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      uint64_t v153 = (void *)v152;
      if (v152) {
        uint64_t v154 = (void *)v152;
      }
      else {
        uint64_t v154 = v149;
      }
      id v323 = v154;

      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      id v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 14));

      id v158 = [v33 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        id v161 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v161 stateForType:14];
      }
      id v162 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v160, "stateType"));
      uint64_t v163 = [v33 objectForKeyedSubscript:v162];
      uint64_t v164 = (void *)v163;
      if (v163) {
        uint64_t v165 = (void *)v163;
      }
      else {
        uint64_t v165 = v160;
      }
      id v322 = v165;

      long long v166 = NSNumber;
      long long v167 = +[GEOAPStateFactory sharedFactory];
      id v168 = objc_msgSend(v166, "numberWithInt:", objc_msgSend(v167, "logMsgStateTypeForType:", 9));

      long long v169 = [v33 objectForKeyedSubscript:v168];
      uint64_t v170 = v169;
      if (v169)
      {
        id v171 = v169;
      }
      else
      {
        id v172 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v172 stateForType:9];
      }
      id v173 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v171, "stateType"));
      uint64_t v174 = [v33 objectForKeyedSubscript:v173];
      uint64_t v175 = (void *)v174;
      if (v174) {
        uint64_t v176 = (void *)v174;
      }
      else {
        uint64_t v176 = v171;
      }
      id v321 = v176;

      uint64_t v177 = NSNumber;
      long long v178 = +[GEOAPStateFactory sharedFactory];
      long long v179 = objc_msgSend(v177, "numberWithInt:", objc_msgSend(v178, "logMsgStateTypeForType:", 10));

      long long v180 = [v33 objectForKeyedSubscript:v179];
      id v181 = v180;
      if (v180)
      {
        id v182 = v180;
      }
      else
      {
        id v183 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v183 stateForType:10];
      }
      uint64_t v184 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v182, "stateType"));
      uint64_t v185 = [v33 objectForKeyedSubscript:v184];
      uint64_t v186 = (void *)v185;
      if (v185) {
        id v187 = (void *)v185;
      }
      else {
        id v187 = v182;
      }
      id v320 = v187;

      id v188 = NSNumber;
      id v189 = +[GEOAPStateFactory sharedFactory];
      uint64_t v190 = objc_msgSend(v188, "numberWithInt:", objc_msgSend(v189, "logMsgStateTypeForType:", 20));

      uint64_t v191 = [v33 objectForKeyedSubscript:v190];
      long long v192 = v191;
      if (v191)
      {
        id v193 = v191;
      }
      else
      {
        id v194 = +[GEOAPStateFactory sharedFactory];
        id v193 = [v194 stateForType:20];
      }
      id v195 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v193, "stateType"));
      uint64_t v196 = [v33 objectForKeyedSubscript:v195];
      long long v197 = (void *)v196;
      if (v196) {
        uint64_t v198 = (void *)v196;
      }
      else {
        uint64_t v198 = v193;
      }
      id v319 = v198;

      long long v199 = NSNumber;
      long long v200 = +[GEOAPStateFactory sharedFactory];
      id v201 = objc_msgSend(v199, "numberWithInt:", objc_msgSend(v200, "logMsgStateTypeForType:", 42));

      long long v202 = [v33 objectForKeyedSubscript:v201];
      uint64_t v203 = v202;
      if (v202)
      {
        id v204 = v202;
      }
      else
      {
        id v205 = +[GEOAPStateFactory sharedFactory];
        id v204 = [v205 stateForType:42];
      }
      id v206 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v204, "stateType"));
      uint64_t v207 = [v33 objectForKeyedSubscript:v206];
      id v208 = (void *)v207;
      if (v207) {
        uint64_t v209 = (void *)v207;
      }
      else {
        uint64_t v209 = v204;
      }
      id v334 = v209;

      id v210 = NSNumber;
      uint64_t v211 = +[GEOAPStateFactory sharedFactory];
      id v212 = objc_msgSend(v210, "numberWithInt:", objc_msgSend(v211, "logMsgStateTypeForType:", 70));

      id v213 = [v33 objectForKeyedSubscript:v212];
      id v214 = v213;
      if (v213)
      {
        id v215 = v213;
      }
      else
      {
        id v216 = +[GEOAPStateFactory sharedFactory];
        id v215 = [v216 stateForType:70];
      }
      id v217 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v215, "stateType"));
      uint64_t v218 = [v33 objectForKeyedSubscript:v217];
      id v219 = (void *)v218;
      if (v218) {
        uint64_t v220 = (void *)v218;
      }
      else {
        uint64_t v220 = v215;
      }
      id v221 = v220;

      id v222 = NSNumber;
      id v223 = +[GEOAPStateFactory sharedFactory];
      id v224 = objc_msgSend(v222, "numberWithInt:", objc_msgSend(v223, "logMsgStateTypeForType:", 7));

      id v225 = [v33 objectForKeyedSubscript:v224];
      id v226 = v225;
      if (v225)
      {
        id v227 = v225;
      }
      else
      {
        id v228 = +[GEOAPStateFactory sharedFactory];
        id v227 = [v228 stateForType:7];
      }
      uint64_t v229 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v227, "stateType"));
      uint64_t v230 = [v33 objectForKeyedSubscript:v229];
      uint64_t v231 = (void *)v230;
      if (v230) {
        id v232 = (void *)v230;
      }
      else {
        id v232 = v227;
      }
      id v317 = v232;

      id v233 = NSNumber;
      id v234 = +[GEOAPStateFactory sharedFactory];
      long long v235 = objc_msgSend(v233, "numberWithInt:", objc_msgSend(v234, "logMsgStateTypeForType:", 17));

      long long v236 = [v33 objectForKeyedSubscript:v235];
      long long v237 = v236;
      if (v236)
      {
        id v238 = v236;
      }
      else
      {
        id v239 = +[GEOAPStateFactory sharedFactory];
        id v238 = [v239 stateForType:17];
      }
      uint64_t v240 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v238, "stateType"));
      uint64_t v241 = [v33 objectForKeyedSubscript:v240];
      uint64_t v242 = (void *)v241;
      if (v241) {
        id v243 = (void *)v241;
      }
      else {
        id v243 = v238;
      }
      id v316 = v243;

      id v244 = NSNumber;
      id v245 = +[GEOAPStateFactory sharedFactory];
      id v246 = objc_msgSend(v244, "numberWithInt:", objc_msgSend(v245, "logMsgStateTypeForType:", 51));

      id v247 = [v33 objectForKeyedSubscript:v246];
      id v248 = v247;
      if (v247)
      {
        id v249 = v247;
      }
      else
      {
        id v250 = +[GEOAPStateFactory sharedFactory];
        id v249 = [v250 stateForType:51];
      }
      id v251 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v249, "stateType"));
      uint64_t v252 = [v33 objectForKeyedSubscript:v251];
      uint64_t v253 = (void *)v252;
      if (v252) {
        uint64_t v254 = (void *)v252;
      }
      else {
        uint64_t v254 = v249;
      }
      id v255 = v254;

      id v256 = NSNumber;
      id v257 = +[GEOAPStateFactory sharedFactory];
      id v258 = objc_msgSend(v256, "numberWithInt:", objc_msgSend(v257, "logMsgStateTypeForType:", 19));

      id v259 = [v33 objectForKeyedSubscript:v258];
      id v260 = v259;
      if (v259)
      {
        id v261 = v259;
      }
      else
      {
        id v262 = +[GEOAPStateFactory sharedFactory];
        id v261 = [v262 stateForType:19];
      }
      uint64_t v263 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v261, "stateType"));
      uint64_t v264 = [v33 objectForKeyedSubscript:v263];
      id v265 = (void *)v264;
      if (v264) {
        uint64_t v266 = (void *)v264;
      }
      else {
        uint64_t v266 = v261;
      }
      id v315 = v266;

      id v267 = NSNumber;
      id v268 = +[GEOAPStateFactory sharedFactory];
      uint64_t v269 = objc_msgSend(v267, "numberWithInt:", objc_msgSend(v268, "logMsgStateTypeForType:", 27));

      id v311 = (void *)v269;
      id v270 = [v33 objectForKeyedSubscript:v269];
      uint64_t v271 = v270;
      BOOL v318 = v221;
      if (v270)
      {
        id v272 = v270;
      }
      else
      {
        id v273 = +[GEOAPStateFactory sharedFactory];
        id v272 = [v273 stateForType:27];
      }
      id v274 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v272, "stateType"));
      uint64_t v275 = [v33 objectForKeyedSubscript:v274];
      id v276 = (void *)v275;
      if (v275) {
        id v277 = (void *)v275;
      }
      else {
        id v277 = v272;
      }
      id v278 = v277;

      id v279 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v279 setEventType:1];
      id v280 = objc_alloc_init(MEMORY[0x263F41958]);
      [v279 setUserActionEvent:v280];

      id v281 = [v279 userActionEvent];
      [v281 setUserActionEventAction:a3];

      id v282 = [v279 userActionEvent];
      [v282 setUserActionEventTarget:a4];

      BOOL v283 = [v279 userActionEvent];
      [v283 setUserActionEventValue:v15];

      id v284 = [v279 userActionEvent];
      [v284 setActionRichProviderId:v338];

      uint64_t v314 = v278;
      if (v339 | v333)
      {
        id v285 = objc_alloc_init(MEMORY[0x263F41960]);
        id v286 = [v279 userActionEvent];
        [v286 setModuleInfo:v285];

        if (v339)
        {
          uint64_t v287 = [(id)v339 intValue];
          id v288 = [v279 userActionEvent];
          id v289 = [v288 moduleInfo];
          [v289 setType:v287];

          id v278 = v314;
        }
        if (v333)
        {
          id v290 = [v279 userActionEvent];
          id v291 = [v290 moduleInfo];
          [v291 setModuleMetadata:v333];

          id v278 = v314;
        }
      }
      if (v329) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v328) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v326) {
        [v279 addLogMsgState:v326];
      }
      if (v325) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v337) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v336) {
        [v279 addLogMsgState:v336];
      }
      if (v335) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v324) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v323) {
        [v279 addLogMsgState:v323];
      }
      if (v322) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v321) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v320) {
        [v279 addLogMsgState:v320];
      }
      if (v319) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v334) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v317) {
        [v279 addLogMsgState:v317];
      }
      if (v316) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v315) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      if (v278) {
        [v279 addLogMsgState:v278];
      }
      if (v255) {
        [v279 addLogMsgState:v255];
      }
      if (v221) {
        objc_msgSend(v279, "addLogMsgState:");
      }
      id v292 = +[GEOAPStateFactory sharedFactory];
      v346[0] = MEMORY[0x263EF8330];
      v346[1] = 3221225472;
      v346[2] = __214__GEOAPPortal_UserActionCodeGen__captureRapShortAndSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v346[3] = &unk_2653457B8;
      id v293 = v279;
      id v347 = v293;
      id v294 = v331;
      id v349 = v294;
      id v295 = v21;
      id v348 = v295;
      [v292 sessionStateForType:6 callback:v346];

      id v296 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v296 setEventType:1];
      id v297 = objc_alloc_init(MEMORY[0x263F41958]);
      [v296 setUserActionEvent:v297];

      unint64_t v298 = [v296 userActionEvent];
      [v298 setUserActionEventAction:a3];

      id v299 = [v296 userActionEvent];
      [v299 setUserActionEventTarget:a4];

      id v300 = [v296 userActionEvent];
      id v15 = v332;
      [v300 setUserActionEventValue:v332];

      id v301 = [v296 userActionEvent];
      [v301 setActionRichProviderId:v338];

      if (v339 | v333)
      {
        id v302 = objc_alloc_init(MEMORY[0x263F41960]);
        id v303 = [v296 userActionEvent];
        [v303 setModuleInfo:v302];

        if (v339)
        {
          uint64_t v304 = [(id)v339 intValue];
          long long v305 = [v296 userActionEvent];
          long long v306 = [v305 moduleInfo];
          [v306 setType:v304];
        }
        id v15 = v332;
        if (v333)
        {
          long long v307 = [v296 userActionEvent];
          long long v308 = [v307 moduleInfo];
          [v308 setModuleMetadata:v333];
        }
      }
      if (v330) {
        objc_msgSend(v296, "addLogMsgState:");
      }
      id v20 = v312;
      if (v337) {
        objc_msgSend(v296, "addLogMsgState:");
      }
      if (v336) {
        objc_msgSend(v296, "addLogMsgState:");
      }
      if (v335) {
        objc_msgSend(v296, "addLogMsgState:");
      }
      if (v334) {
        objc_msgSend(v296, "addLogMsgState:");
      }
      if (v327) {
        [v296 addLogMsgState:v327];
      }
      if (v255) {
        [v296 addLogMsgState:v255];
      }
      if (v318) {
        [v296 addLogMsgState:v318];
      }
      unint64_t v309 = +[GEOAPStateFactory sharedFactory];
      v342[0] = MEMORY[0x263EF8330];
      v342[1] = 3221225472;
      v342[2] = __214__GEOAPPortal_UserActionCodeGen__captureRapShortAndSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2;
      v342[3] = &unk_2653457B8;
      id v310 = v296;
      id v343 = v310;
      id v345 = v294;
      id v344 = v295;
      [v309 sessionStateForType:7 callback:v342];

      id v18 = v338;
      id v16 = (id)v339;
      id v17 = (id)v333;
      id v19 = v313;
      id v22 = v331;
    }
  }
}

uint64_t __214__GEOAPPortal_UserActionCodeGen__captureRapShortAndSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

uint64_t __214__GEOAPPortal_UserActionCodeGen__captureRapShortAndSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureExtraStatesUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v286 = "+[GEOAPPortal(UserActionCodeGen) captureExtraStatesUserActionWithAction:target:value:moduleType:moduleMetadat"
           "a:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      uint64_t v253 = v22;
      id v256 = v21;
      id v272 = v18;
      *(void *)&long long v273 = v16;
      *((void *)&v273 + 1) = v17;
      id v254 = v20;
      id v255 = v19;
      if ([v19 count])
      {
        id v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v280 = 0u;
        long long v281 = 0u;
        long long v282 = 0u;
        long long v283 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v280 objects:v284 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v281;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v281 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v280 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v280 objects:v284 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v271 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 5));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:5];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      uint64_t v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v270 = v55;

      id v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 16));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:16];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      uint64_t v65 = (void *)v64;
      if (v64) {
        uint64_t v66 = (void *)v64;
      }
      else {
        uint64_t v66 = v61;
      }
      id v269 = v66;

      id v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 35));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        id v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:35];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      uint64_t v76 = (void *)v75;
      if (v75) {
        uint64_t v77 = (void *)v75;
      }
      else {
        uint64_t v77 = v72;
      }
      id v268 = v77;

      id v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 30));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:30];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      uint64_t v87 = (void *)v86;
      if (v86) {
        uint64_t v88 = (void *)v86;
      }
      else {
        uint64_t v88 = v83;
      }
      id v267 = v88;

      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 0));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        id v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:0];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      uint64_t v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v266 = v99;

      long long v100 = NSNumber;
      long long v101 = +[GEOAPStateFactory sharedFactory];
      long long v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 3));

      long long v103 = [v33 objectForKeyedSubscript:v102];
      long long v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:3];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v265 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      long long v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 64));

      long long v114 = [v33 objectForKeyedSubscript:v113];
      uint64_t v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        id v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:64];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      uint64_t v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v264 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 13));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        id v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:13];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      uint64_t v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v263 = v132;

      id v133 = NSNumber;
      id v134 = +[GEOAPStateFactory sharedFactory];
      id v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 14));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:14];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      uint64_t v142 = (void *)v141;
      if (v141) {
        uint64_t v143 = (void *)v141;
      }
      else {
        uint64_t v143 = v138;
      }
      id v262 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      id v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 9));

      id v147 = [v33 objectForKeyedSubscript:v146];
      id v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        id v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:9];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      uint64_t v153 = (void *)v152;
      if (v152) {
        uint64_t v154 = (void *)v152;
      }
      else {
        uint64_t v154 = v149;
      }
      id v261 = v154;

      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      id v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 10));

      id v158 = [v33 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        id v161 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v161 stateForType:10];
      }
      id v162 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v160, "stateType"));
      uint64_t v163 = [v33 objectForKeyedSubscript:v162];
      uint64_t v164 = (void *)v163;
      if (v163) {
        uint64_t v165 = (void *)v163;
      }
      else {
        uint64_t v165 = v160;
      }
      id v260 = v165;

      long long v166 = NSNumber;
      long long v167 = +[GEOAPStateFactory sharedFactory];
      id v168 = objc_msgSend(v166, "numberWithInt:", objc_msgSend(v167, "logMsgStateTypeForType:", 20));

      long long v169 = [v33 objectForKeyedSubscript:v168];
      uint64_t v170 = v169;
      if (v169)
      {
        id v171 = v169;
      }
      else
      {
        id v172 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v172 stateForType:20];
      }
      id v173 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v171, "stateType"));
      uint64_t v174 = [v33 objectForKeyedSubscript:v173];
      uint64_t v175 = (void *)v174;
      if (v174) {
        uint64_t v176 = (void *)v174;
      }
      else {
        uint64_t v176 = v171;
      }
      id v177 = v176;

      long long v178 = NSNumber;
      long long v179 = +[GEOAPStateFactory sharedFactory];
      long long v180 = objc_msgSend(v178, "numberWithInt:", objc_msgSend(v179, "logMsgStateTypeForType:", 42));

      id v181 = [v33 objectForKeyedSubscript:v180];
      id v182 = v181;
      if (v181)
      {
        id v183 = v181;
      }
      else
      {
        uint64_t v184 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v184 stateForType:42];
      }
      uint64_t v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v183, "stateType"));
      uint64_t v186 = [v33 objectForKeyedSubscript:v185];
      id v187 = (void *)v186;
      if (v186) {
        id v188 = (void *)v186;
      }
      else {
        id v188 = v183;
      }
      id v259 = v188;

      id v189 = NSNumber;
      uint64_t v190 = +[GEOAPStateFactory sharedFactory];
      uint64_t v191 = objc_msgSend(v189, "numberWithInt:", objc_msgSend(v190, "logMsgStateTypeForType:", 70));

      long long v192 = [v33 objectForKeyedSubscript:v191];
      id v193 = v192;
      if (v192)
      {
        id v194 = v192;
      }
      else
      {
        id v195 = +[GEOAPStateFactory sharedFactory];
        id v194 = [v195 stateForType:70];
      }
      uint64_t v196 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v194, "stateType"));
      uint64_t v197 = [v33 objectForKeyedSubscript:v196];
      uint64_t v198 = (void *)v197;
      if (v197) {
        long long v199 = (void *)v197;
      }
      else {
        long long v199 = v194;
      }
      id v252 = v199;

      long long v200 = NSNumber;
      id v201 = +[GEOAPStateFactory sharedFactory];
      long long v202 = objc_msgSend(v200, "numberWithInt:", objc_msgSend(v201, "logMsgStateTypeForType:", 17));

      uint64_t v203 = [v33 objectForKeyedSubscript:v202];
      id v204 = v203;
      if (v203)
      {
        id v205 = v203;
      }
      else
      {
        id v206 = +[GEOAPStateFactory sharedFactory];
        id v205 = [v206 stateForType:17];
      }
      uint64_t v207 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v205, "stateType"));
      uint64_t v208 = [v33 objectForKeyedSubscript:v207];
      uint64_t v209 = (void *)v208;
      if (v208) {
        id v210 = (void *)v208;
      }
      else {
        id v210 = v205;
      }
      id v257 = v210;

      uint64_t v211 = NSNumber;
      id v212 = +[GEOAPStateFactory sharedFactory];
      id v213 = objc_msgSend(v211, "numberWithInt:", objc_msgSend(v212, "logMsgStateTypeForType:", 19));

      id v214 = [v33 objectForKeyedSubscript:v213];
      id v215 = v214;
      id v216 = v15;
      if (v214)
      {
        id v217 = v214;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:19];
      }
      id v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v33 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v223 = v222;

      id v224 = NSNumber;
      id v225 = +[GEOAPStateFactory sharedFactory];
      uint64_t v226 = objc_msgSend(v224, "numberWithInt:", objc_msgSend(v225, "logMsgStateTypeForType:", 27));

      id v251 = (void *)v226;
      id v227 = [v33 objectForKeyedSubscript:v226];
      id v228 = v227;
      id v258 = v177;
      if (v227)
      {
        id v229 = v227;
      }
      else
      {
        uint64_t v230 = +[GEOAPStateFactory sharedFactory];
        id v229 = [v230 stateForType:27];
      }
      uint64_t v231 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v229, "stateType"));
      uint64_t v232 = [v33 objectForKeyedSubscript:v231];
      id v233 = (void *)v232;
      if (v232) {
        id v234 = (void *)v232;
      }
      else {
        id v234 = v229;
      }
      id v235 = v234;

      id v236 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v236 setEventType:1];
      id v237 = objc_alloc_init(MEMORY[0x263F41958]);
      [v236 setUserActionEvent:v237];

      id v238 = [v236 userActionEvent];
      [v238 setUserActionEventAction:a3];

      id v239 = [v236 userActionEvent];
      [v239 setUserActionEventTarget:a4];

      uint64_t v240 = [v236 userActionEvent];
      id v15 = v216;
      [v240 setUserActionEventValue:v216];

      uint64_t v241 = [v236 userActionEvent];
      [v241 setActionRichProviderId:v272];

      if (v273 != 0)
      {
        id v242 = objc_alloc_init(MEMORY[0x263F41960]);
        id v243 = [v236 userActionEvent];
        [v243 setModuleInfo:v242];

        if ((void)v273)
        {
          uint64_t v244 = [(id)v273 intValue];
          id v245 = [v236 userActionEvent];
          id v246 = [v245 moduleInfo];
          [v246 setType:v244];

          id v21 = v256;
        }
        id v15 = v216;
        if (*((void *)&v273 + 1))
        {
          id v247 = [v236 userActionEvent];
          id v248 = [v247 moduleInfo];
          [v248 setModuleMetadata:*((void *)&v273 + 1)];

          id v21 = v256;
        }
      }
      if (v271) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      id v20 = v254;
      if (v270) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v269) {
        [v236 addLogMsgState:v269];
      }
      if (v268) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v267) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v266) {
        [v236 addLogMsgState:v266];
      }
      if (v265) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v264) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v263) {
        [v236 addLogMsgState:v263];
      }
      if (v262) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v261) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v260) {
        [v236 addLogMsgState:v260];
      }
      if (v258) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v259) {
        objc_msgSend(v236, "addLogMsgState:");
      }
      if (v257) {
        [v236 addLogMsgState:v257];
      }
      if (v223) {
        [v236 addLogMsgState:v223];
      }
      if (v235) {
        [v236 addLogMsgState:v235];
      }
      if (v252) {
        [v236 addLogMsgState:v252];
      }
      id v249 = +[GEOAPStateFactory sharedFactory];
      v276[0] = MEMORY[0x263EF8330];
      v276[1] = 3221225472;
      v276[2] = __193__GEOAPPortal_UserActionCodeGen__captureExtraStatesUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v276[3] = &unk_2653457B8;
      id v250 = v236;
      id v277 = v250;
      id v279 = v253;
      id v278 = v21;
      [v249 sessionStateForType:6 callback:v276];

      id v22 = v253;
      id v17 = (id)*((void *)&v273 + 1);
      id v16 = (id)v273;
      id v18 = v272;
      id v19 = v255;
    }
  }
}

uint64_t __193__GEOAPPortal_UserActionCodeGen__captureExtraStatesUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureCarplayUserActionWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  uint64_t v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v311 = "+[GEOAPPortal(UserActionCodeGen) captureCarplayUserActionWithAction:target:value:moduleType:moduleMetadata:ri"
           "chProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      *((void *)&v298 + 1) = v17;
      id v279 = v15;
      id v297 = v18;
      *(void *)&long long v298 = v16;
      id v275 = v22;
      id v277 = v21;
      if ([v19 count])
      {
        id v295 = v20;
        id v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v305 objects:v309 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v306;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v306 != v29) {
                objc_enumerationMutation(v26);
              }
              id v31 = *(void **)(*((void *)&v305 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType", v275));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v305 objects:v309 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
        id v20 = v295;
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        id v44 = (void *)v42;
      }
      else {
        id v44 = v39;
      }
      id v278 = v44;

      uint64_t v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 5));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:5];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      uint64_t v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v296 = v55;

      id v56 = NSNumber;
      uint64_t v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 16));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:16];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      uint64_t v65 = (void *)v64;
      if (v64) {
        uint64_t v66 = (void *)v64;
      }
      else {
        uint64_t v66 = v61;
      }
      id v294 = v66;

      id v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 30));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        id v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:30];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      uint64_t v76 = (void *)v75;
      if (v75) {
        uint64_t v77 = (void *)v75;
      }
      else {
        uint64_t v77 = v72;
      }
      id v293 = v77;

      id v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 0));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:0];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      uint64_t v87 = (void *)v86;
      if (v86) {
        uint64_t v88 = (void *)v86;
      }
      else {
        uint64_t v88 = v83;
      }
      id v292 = v88;

      id v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 3));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        id v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:3];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      uint64_t v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v291 = v99;

      long long v100 = NSNumber;
      long long v101 = +[GEOAPStateFactory sharedFactory];
      long long v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 64));

      long long v103 = [v33 objectForKeyedSubscript:v102];
      long long v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:64];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v290 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      long long v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 13));

      long long v114 = [v33 objectForKeyedSubscript:v113];
      uint64_t v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        id v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:13];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      uint64_t v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v289 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      uint64_t v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 14));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        id v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:14];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      uint64_t v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v288 = v132;

      id v133 = NSNumber;
      id v134 = +[GEOAPStateFactory sharedFactory];
      id v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 9));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:9];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      uint64_t v142 = (void *)v141;
      if (v141) {
        uint64_t v143 = (void *)v141;
      }
      else {
        uint64_t v143 = v138;
      }
      id v287 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      id v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 10));

      id v147 = [v33 objectForKeyedSubscript:v146];
      id v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        id v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:10];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      uint64_t v153 = (void *)v152;
      if (v152) {
        uint64_t v154 = (void *)v152;
      }
      else {
        uint64_t v154 = v149;
      }
      id v286 = v154;

      id v155 = NSNumber;
      id v156 = +[GEOAPStateFactory sharedFactory];
      id v157 = objc_msgSend(v155, "numberWithInt:", objc_msgSend(v156, "logMsgStateTypeForType:", 42));

      id v158 = [v33 objectForKeyedSubscript:v157];
      id v159 = v158;
      if (v158)
      {
        id v160 = v158;
      }
      else
      {
        id v161 = +[GEOAPStateFactory sharedFactory];
        id v160 = [v161 stateForType:42];
      }
      id v162 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v160, "stateType"));
      uint64_t v163 = [v33 objectForKeyedSubscript:v162];
      uint64_t v164 = (void *)v163;
      if (v163) {
        uint64_t v165 = (void *)v163;
      }
      else {
        uint64_t v165 = v160;
      }
      id v285 = v165;

      long long v166 = NSNumber;
      long long v167 = +[GEOAPStateFactory sharedFactory];
      id v168 = objc_msgSend(v166, "numberWithInt:", objc_msgSend(v167, "logMsgStateTypeForType:", 70));

      long long v169 = [v33 objectForKeyedSubscript:v168];
      uint64_t v170 = v169;
      if (v169)
      {
        id v171 = v169;
      }
      else
      {
        id v172 = +[GEOAPStateFactory sharedFactory];
        id v171 = [v172 stateForType:70];
      }
      id v173 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v171, "stateType"));
      uint64_t v174 = [v33 objectForKeyedSubscript:v173];
      uint64_t v175 = (void *)v174;
      if (v174) {
        uint64_t v176 = (void *)v174;
      }
      else {
        uint64_t v176 = v171;
      }
      id v284 = v176;

      id v177 = NSNumber;
      long long v178 = +[GEOAPStateFactory sharedFactory];
      long long v179 = objc_msgSend(v177, "numberWithInt:", objc_msgSend(v178, "logMsgStateTypeForType:", 17));

      long long v180 = [v33 objectForKeyedSubscript:v179];
      id v181 = v180;
      if (v180)
      {
        id v182 = v180;
      }
      else
      {
        id v183 = +[GEOAPStateFactory sharedFactory];
        id v182 = [v183 stateForType:17];
      }
      uint64_t v184 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v182, "stateType"));
      uint64_t v185 = [v33 objectForKeyedSubscript:v184];
      uint64_t v186 = (void *)v185;
      if (v185) {
        id v187 = (void *)v185;
      }
      else {
        id v187 = v182;
      }
      id v283 = v187;

      id v188 = NSNumber;
      id v189 = +[GEOAPStateFactory sharedFactory];
      uint64_t v190 = objc_msgSend(v188, "numberWithInt:", objc_msgSend(v189, "logMsgStateTypeForType:", 19));

      uint64_t v191 = [v33 objectForKeyedSubscript:v190];
      long long v192 = v191;
      if (v191)
      {
        id v193 = v191;
      }
      else
      {
        id v194 = +[GEOAPStateFactory sharedFactory];
        id v193 = [v194 stateForType:19];
      }
      id v195 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v193, "stateType"));
      uint64_t v196 = [v33 objectForKeyedSubscript:v195];
      uint64_t v197 = (void *)v196;
      if (v196) {
        uint64_t v198 = (void *)v196;
      }
      else {
        uint64_t v198 = v193;
      }
      id v199 = v198;

      long long v200 = NSNumber;
      id v201 = +[GEOAPStateFactory sharedFactory];
      long long v202 = objc_msgSend(v200, "numberWithInt:", objc_msgSend(v201, "logMsgStateTypeForType:", 63));

      uint64_t v203 = [v33 objectForKeyedSubscript:v202];
      id v204 = v203;
      if (v203)
      {
        id v205 = v203;
      }
      else
      {
        id v206 = +[GEOAPStateFactory sharedFactory];
        id v205 = [v206 stateForType:63];
      }
      uint64_t v207 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v205, "stateType"));
      uint64_t v208 = [v33 objectForKeyedSubscript:v207];
      uint64_t v209 = (void *)v208;
      if (v208) {
        id v210 = (void *)v208;
      }
      else {
        id v210 = v205;
      }
      id v281 = v210;

      uint64_t v211 = NSNumber;
      id v212 = +[GEOAPStateFactory sharedFactory];
      id v213 = objc_msgSend(v211, "numberWithInt:", objc_msgSend(v212, "logMsgStateTypeForType:", 27));

      id v214 = [v33 objectForKeyedSubscript:v213];
      id v215 = v214;
      long long v282 = v199;
      if (v214)
      {
        id v216 = v214;
      }
      else
      {
        id v217 = +[GEOAPStateFactory sharedFactory];
        id v216 = [v217 stateForType:27];
      }
      uint64_t v218 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v216, "stateType"));
      uint64_t v219 = [v33 objectForKeyedSubscript:v218];
      uint64_t v220 = (void *)v219;
      if (v219) {
        id v221 = (void *)v219;
      }
      else {
        id v221 = v216;
      }
      id v280 = v221;

      id v222 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v222 setEventType:1];
      id v223 = objc_alloc_init(MEMORY[0x263F41958]);
      [v222 setUserActionEvent:v223];

      id v224 = [v222 userActionEvent];
      int v225 = a3;
      [v224 setUserActionEventAction:a3];

      uint64_t v226 = [v222 userActionEvent];
      int v227 = a4;
      [v226 setUserActionEventTarget:a4];

      id v228 = [v222 userActionEvent];
      [v228 setUserActionEventValue:v15];

      id v229 = [v222 userActionEvent];
      [v229 setActionRichProviderId:v297];

      uint64_t v230 = v278;
      if (v298 != 0)
      {
        id v231 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v232 = [v222 userActionEvent];
        [v232 setModuleInfo:v231];

        if ((void)v298)
        {
          uint64_t v233 = [(id)v298 intValue];
          id v234 = [v222 userActionEvent];
          id v235 = [v234 moduleInfo];
          [v235 setType:v233];

          int v227 = a4;
        }
        int v225 = a3;
        if (*((void *)&v298 + 1))
        {
          id v236 = [v222 userActionEvent];
          id v237 = [v236 moduleInfo];
          [v237 setModuleMetadata:*((void *)&v298 + 1)];

          int v225 = a3;
        }
      }
      if (v278) {
        [v222 addLogMsgState:v278];
      }
      if (v296) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v294) {
        [v222 addLogMsgState:v294];
      }
      if (v293) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v292) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v291) {
        [v222 addLogMsgState:v291];
      }
      if (v290) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v289) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v288) {
        [v222 addLogMsgState:v288];
      }
      if (v287) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v286) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v285) {
        [v222 addLogMsgState:v285];
      }
      if (v283) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v282) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v280) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v281) {
        objc_msgSend(v222, "addLogMsgState:");
      }
      if (v284) {
        [v222 addLogMsgState:v284];
      }
      if (v225 == 2015 && v227 == 1011)
      {
        id v238 = NSNumber;
        id v239 = +[GEOAPStateFactory sharedFactory];
        uint64_t v240 = objc_msgSend(v238, "numberWithInt:", objc_msgSend(v239, "logMsgStateTypeForType:", 59));

        uint64_t v241 = [v33 objectForKeyedSubscript:v240];
        id v242 = v241;
        id v243 = v20;
        if (v241)
        {
          id v244 = v241;
        }
        else
        {
          id v251 = +[GEOAPStateFactory sharedFactory];
          id v244 = [v251 stateForType:59];
        }
        id v252 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v244, "stateType"));
        uint64_t v253 = [v33 objectForKeyedSubscript:v252];
        id v254 = (void *)v253;
        if (v253) {
          id v255 = (void *)v253;
        }
        else {
          id v255 = v244;
        }
        id v256 = v255;

        if (v256) {
          [v222 addLogMsgState:v256];
        }
        id v257 = NSNumber;
        id v258 = +[GEOAPStateFactory sharedFactory];
        uint64_t v247 = objc_msgSend(v257, "numberWithInt:", objc_msgSend(v258, "logMsgStateTypeForType:", 54));

        id v259 = [v33 objectForKeyedSubscript:v247];
        id v260 = v259;
        if (v259)
        {
          id v261 = v259;
        }
        else
        {
          id v262 = +[GEOAPStateFactory sharedFactory];
          id v261 = [v262 stateForType:54];
        }
        id v263 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v261, "stateType"));
        uint64_t v264 = [v33 objectForKeyedSubscript:v263];
        id v265 = (void *)v264;
        if (v264) {
          id v266 = (void *)v264;
        }
        else {
          id v266 = v261;
        }
        id v267 = v266;

        if (v267) {
          [v222 addLogMsgState:v267];
        }
      }
      else
      {
        if ((v225 != 6097 || v227 != 1009) && (v225 != 2007 || v227 != 1023) && (v225 != 2007 || v227 != 1011)) {
          goto LABEL_191;
        }
        id v245 = NSNumber;
        id v246 = +[GEOAPStateFactory sharedFactory];
        uint64_t v247 = objc_msgSend(v245, "numberWithInt:", objc_msgSend(v246, "logMsgStateTypeForType:", 68));

        id v248 = [v33 objectForKeyedSubscript:v247];
        id v249 = v248;
        id v243 = v20;
        if (v248)
        {
          id v250 = v248;
        }
        else
        {
          id v268 = +[GEOAPStateFactory sharedFactory];
          id v250 = [v268 stateForType:68];
        }
        id v269 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v250, "stateType"));
        uint64_t v270 = [v33 objectForKeyedSubscript:v269];
        id v271 = (void *)v270;
        if (v270) {
          id v272 = (void *)v270;
        }
        else {
          id v272 = v250;
        }
        id v256 = v272;

        if (v256) {
          [v222 addLogMsgState:v256];
        }
      }
      id v15 = v279;
      id v20 = v243;

      id v213 = (void *)v247;
      uint64_t v230 = v278;
LABEL_191:
      long long v273 = +[GEOAPStateFactory sharedFactory];
      v301[0] = MEMORY[0x263EF8330];
      v301[1] = 3221225472;
      v301[2] = __189__GEOAPPortal_UserActionCodeGen__captureCarplayUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v301[3] = &unk_2653457B8;
      id v274 = v222;
      id v302 = v274;
      id v22 = v276;
      id v304 = v276;
      id v21 = v277;
      id v303 = v277;
      [v273 sessionStateForType:6 callback:v301];

      id v17 = (id)*((void *)&v298 + 1);
      id v16 = (id)v298;
      id v18 = v297;
    }
  }
}

uint64_t __189__GEOAPPortal_UserActionCodeGen__captureCarplayUserActionWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureArpPrivacyWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  unint64_t v19 = (unint64_t)a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v140 = "+[GEOAPPortal(UserActionCodeGen) captureArpPrivacyWithAction:target:value:moduleType:moduleMetadata:richProvi"
           "derId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v119 = a4;
      uint64_t v120 = v23;
      uint64_t v121 = v22;
      id v126 = v20;
      id v127 = v17;
      unint64_t v129 = (unint64_t)v18;
      id v128 = (id)v19;
      if ([v21 count])
      {
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v134 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        id v27 = v21;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v134 objects:v138 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v135;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v135 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v134 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v134 objects:v138 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        unint64_t v19 = (unint64_t)v128;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 2));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:2];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      id v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v125 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 30));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:30];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v124 = v56;

      uint64_t v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 0));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:0];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        id v67 = (void *)v65;
      }
      else {
        id v67 = v62;
      }
      id v123 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 3));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:3];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        id v78 = (void *)v76;
      }
      else {
        id v78 = v73;
      }
      id v122 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 42));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:42];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        id v89 = (void *)v87;
      }
      else {
        id v89 = v84;
      }
      id v90 = v89;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 70));

      id v94 = [v34 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        uint64_t v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:70];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v34 objectForKeyedSubscript:v98];
      long long v100 = (void *)v99;
      if (v99) {
        long long v101 = (void *)v99;
      }
      else {
        long long v101 = v96;
      }
      id v102 = v101;

      id v103 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v103 setEventType:1];
      id v104 = objc_alloc_init(MEMORY[0x263F41958]);
      [v103 setUserActionEvent:v104];

      id v105 = [v103 userActionEvent];
      [v105 setUserActionEventAction:a3];

      id v106 = [v103 userActionEvent];
      [v106 setUserActionEventTarget:v119];

      id v107 = [v103 userActionEvent];
      [v107 setUserActionEventValue:v127];

      uint64_t v108 = [v103 userActionEvent];
      [v108 setActionRichProviderId:v126];

      if (v129 | v19)
      {
        id v109 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v110 = [v103 userActionEvent];
        [v110 setModuleInfo:v109];

        if (v129)
        {
          uint64_t v111 = [(id)v129 intValue];
          id v112 = [v103 userActionEvent];
          long long v113 = [v112 moduleInfo];
          [v113 setType:v111];

          unint64_t v19 = (unint64_t)v128;
        }
        if (v19)
        {
          long long v114 = [v103 userActionEvent];
          uint64_t v115 = [v114 moduleInfo];
          [v115 setModuleMetadata:v128];
        }
      }
      if (v125) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v124) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v123) {
        [v103 addLogMsgState:v123];
      }
      if (v122) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v90) {
        [v103 addLogMsgState:v90];
      }
      if (v102) {
        [v103 addLogMsgState:v102];
      }
      id v116 = +[GEOAPStateFactory sharedFactory];
      v130[0] = MEMORY[0x263EF8330];
      v130[1] = 3221225472;
      v130[2] = __182__GEOAPPortal_UserActionCodeGen__captureArpPrivacyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v130[3] = &unk_2653457B8;
      id v131 = v103;
      id v133 = v120;
      id v132 = v121;
      id v117 = v103;
      id v22 = v121;
      id v118 = v117;
      [v116 sessionStateForType:8 callback:v130];

      id v23 = v120;
      id v17 = v127;
      unint64_t v19 = (unint64_t)v128;
      id v18 = (id)v129;
      id v20 = v126;
    }
  }
}

uint64_t __182__GEOAPPortal_UserActionCodeGen__captureArpPrivacyWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureCuratedCollectionsShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v311 = "+[GEOAPPortal(UserActionCodeGen) captureCuratedCollectionsShortUserActionTargetPairWithAction:target:value:mo"
           "duleType:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v275 = v22;
      id v277 = v20;
      unint64_t v298 = (unint64_t)v17;
      unint64_t v279 = (unint64_t)v16;
      id v276 = v21;
      id v297 = v18;
      id v278 = v19;
      if ([v19 count])
      {
        id v25 = v15;
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        id v27 = v19;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v306;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v306 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v305 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        id v15 = v25;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      id v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v296 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v295 = v56;

      uint64_t v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 38));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:38];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        id v67 = (void *)v65;
      }
      else {
        id v67 = v62;
      }
      id v294 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 16));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:16];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        id v78 = (void *)v76;
      }
      else {
        id v78 = v73;
      }
      id v293 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 35));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:35];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        id v89 = (void *)v87;
      }
      else {
        id v89 = v84;
      }
      id v292 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 30));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:30];
      }
      uint64_t v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        long long v100 = (void *)v98;
      }
      else {
        long long v100 = v95;
      }
      id v291 = v100;

      long long v101 = NSNumber;
      id v102 = +[GEOAPStateFactory sharedFactory];
      id v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 0));

      id v104 = [v34 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:0];
      }
      uint64_t v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v34 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v290 = v111;

      id v112 = NSNumber;
      long long v113 = +[GEOAPStateFactory sharedFactory];
      long long v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 3));

      uint64_t v115 = [v34 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:3];
      }
      unsigned int v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v34 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        id v122 = (void *)v120;
      }
      else {
        id v122 = v117;
      }
      id v289 = v122;

      id v123 = NSNumber;
      id v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 64));

      id v126 = [v34 objectForKeyedSubscript:v125];
      id v127 = v126;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        unint64_t v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:64];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v34 objectForKeyedSubscript:v130];
      id v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v288 = v133;

      long long v134 = NSNumber;
      long long v135 = +[GEOAPStateFactory sharedFactory];
      long long v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 13));

      long long v137 = [v34 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:13];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v34 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v287 = v144;

      id v145 = NSNumber;
      id v146 = +[GEOAPStateFactory sharedFactory];
      id v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 14));

      id v148 = [v34 objectForKeyedSubscript:v147];
      id v149 = v148;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:14];
      }
      uint64_t v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v34 objectForKeyedSubscript:v152];
      uint64_t v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v286 = v155;

      id v156 = NSNumber;
      id v157 = +[GEOAPStateFactory sharedFactory];
      id v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 9));

      id v159 = [v34 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        id v162 = +[GEOAPStateFactory sharedFactory];
        id v161 = [v162 stateForType:9];
      }
      uint64_t v163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v161, "stateType"));
      uint64_t v164 = [v34 objectForKeyedSubscript:v163];
      uint64_t v165 = (void *)v164;
      if (v164) {
        long long v166 = (void *)v164;
      }
      else {
        long long v166 = v161;
      }
      id v285 = v166;

      long long v167 = NSNumber;
      id v168 = +[GEOAPStateFactory sharedFactory];
      long long v169 = objc_msgSend(v167, "numberWithInt:", objc_msgSend(v168, "logMsgStateTypeForType:", 10));

      uint64_t v170 = [v34 objectForKeyedSubscript:v169];
      id v171 = v170;
      if (v170)
      {
        id v172 = v170;
      }
      else
      {
        id v173 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v173 stateForType:10];
      }
      uint64_t v174 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v172, "stateType"));
      uint64_t v175 = [v34 objectForKeyedSubscript:v174];
      uint64_t v176 = (void *)v175;
      if (v175) {
        id v177 = (void *)v175;
      }
      else {
        id v177 = v172;
      }
      id v284 = v177;

      long long v178 = NSNumber;
      long long v179 = +[GEOAPStateFactory sharedFactory];
      long long v180 = objc_msgSend(v178, "numberWithInt:", objc_msgSend(v179, "logMsgStateTypeForType:", 20));

      id v181 = [v34 objectForKeyedSubscript:v180];
      id v182 = v181;
      if (v181)
      {
        id v183 = v181;
      }
      else
      {
        uint64_t v184 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v184 stateForType:20];
      }
      uint64_t v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v183, "stateType"));
      uint64_t v186 = [v34 objectForKeyedSubscript:v185];
      id v187 = (void *)v186;
      if (v186) {
        id v188 = (void *)v186;
      }
      else {
        id v188 = v183;
      }
      id v189 = v188;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 42));

      id v193 = [v34 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:42];
      }
      uint64_t v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      id v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v282 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 70));

      id v204 = [v34 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:70];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v274 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 7));

      id v215 = [v34 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:7];
      }
      uint64_t v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v281 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      int v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 17));

      uint64_t v226 = [v34 objectForKeyedSubscript:v225];
      int v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        id v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:17];
      }
      uint64_t v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      uint64_t v232 = (void *)v231;
      if (v231) {
        uint64_t v233 = (void *)v231;
      }
      else {
        uint64_t v233 = v228;
      }
      id v280 = v233;

      id v234 = NSNumber;
      id v235 = +[GEOAPStateFactory sharedFactory];
      id v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 19));

      id v237 = [v34 objectForKeyedSubscript:v236];
      id v238 = v237;
      id v283 = v189;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        uint64_t v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:19];
      }
      uint64_t v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v34 objectForKeyedSubscript:v241];
      id v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v245 = v244;

      id v246 = NSNumber;
      uint64_t v247 = +[GEOAPStateFactory sharedFactory];
      id v248 = objc_msgSend(v246, "numberWithInt:", objc_msgSend(v247, "logMsgStateTypeForType:", 27));

      id v249 = [v34 objectForKeyedSubscript:v248];
      id v250 = v249;
      if (v249)
      {
        id v251 = v249;
      }
      else
      {
        id v252 = +[GEOAPStateFactory sharedFactory];
        id v251 = [v252 stateForType:27];
      }
      id v16 = (id)v279;

      uint64_t v253 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v251, "stateType"));
      uint64_t v254 = [v34 objectForKeyedSubscript:v253];
      id v255 = (void *)v254;
      if (v254) {
        id v256 = (void *)v254;
      }
      else {
        id v256 = v251;
      }
      id v257 = v256;

      id v258 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v258 setEventType:1];
      id v259 = objc_alloc_init(MEMORY[0x263F41958]);
      [v258 setUserActionEvent:v259];

      id v260 = [v258 userActionEvent];
      [v260 setUserActionEventAction:a3];

      id v261 = [v258 userActionEvent];
      [v261 setUserActionEventTarget:a4];

      id v262 = [v258 userActionEvent];
      [v262 setUserActionEventValue:v15];

      id v263 = [v258 userActionEvent];
      [v263 setActionRichProviderId:v297];

      if (v279 | v298)
      {
        id v264 = objc_alloc_init(MEMORY[0x263F41960]);
        id v265 = [v258 userActionEvent];
        [v265 setModuleInfo:v264];

        if (v279)
        {
          uint64_t v266 = [(id)v279 intValue];
          id v267 = [v258 userActionEvent];
          [v267 moduleInfo];
          v269 = id v268 = v15;
          [v269 setType:v266];

          id v15 = v268;
          id v16 = (id)v279;
        }
        if (v298)
        {
          uint64_t v270 = [v258 userActionEvent];
          id v271 = [v270 moduleInfo];
          [v271 setModuleMetadata:v298];
        }
      }
      if (v296) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v295) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v294) {
        [v258 addLogMsgState:v294];
      }
      if (v293) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v292) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v291) {
        [v258 addLogMsgState:v291];
      }
      if (v290) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v289) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v288) {
        [v258 addLogMsgState:v288];
      }
      if (v287) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v286) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v285) {
        [v258 addLogMsgState:v285];
      }
      if (v284) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v283) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v282) {
        [v258 addLogMsgState:v282];
      }
      if (v281) {
        [v258 addLogMsgState:v281];
      }
      if (v280) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v245) {
        [v258 addLogMsgState:v245];
      }
      if (v257) {
        [v258 addLogMsgState:v257];
      }
      if (v274) {
        [v258 addLogMsgState:v274];
      }
      id v272 = +[GEOAPStateFactory sharedFactory];
      v301[0] = MEMORY[0x263EF8330];
      v301[1] = 3221225472;
      v301[2] = __215__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v301[3] = &unk_2653457B8;
      id v273 = v258;
      id v302 = v273;
      id v304 = v275;
      id v21 = v276;
      id v303 = v276;
      [v272 sessionStateForType:6 callback:v301];

      id v22 = v275;
      id v18 = v297;
      id v17 = (id)v298;
      id v20 = v277;
      id v19 = v278;
    }
  }
}

uint64_t __215__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureCuratedCollectionsSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    long long v166 = "+[GEOAPPortal(UserActionCodeGen) captureCuratedCollectionsSessionlessUserActionTargetPairWithAction:target:va"
           "lue:moduleType:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v145 = a4;
      id v146 = v23;
      id v154 = v20;
      *(void *)&long long v155 = v18;
      *((void *)&v155 + 1) = v19;
      unsigned int v144 = a3;
      id v147 = v21;
      if ([v21 count])
      {
        id v26 = v22;
        id v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v160 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        id v28 = v21;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v160 objects:v164 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v161;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v161 != v31) {
                objc_enumerationMutation(v28);
              }
              long long v33 = *(void **)(*((void *)&v160 + 1) + 8 * i);
              long long v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v160 objects:v164 count:16];
          }
          while (v30);
        }

        unint64_t v35 = (void *)[v27 copy];
        id v22 = v26;
      }
      else
      {
        unint64_t v35 = 0;
      }
      long long v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      int v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 2));

      id v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v41 = v39;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v41 = [v42 stateForType:2];
      }
      uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
      uint64_t v44 = [v35 objectForKeyedSubscript:v43];
      uint64_t v45 = (void *)v44;
      if (v44) {
        id v46 = (void *)v44;
      }
      else {
        id v46 = v41;
      }
      id v153 = v46;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 38));

      id v50 = [v35 objectForKeyedSubscript:v49];
      id v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:38];
      }
      uint64_t v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v35 objectForKeyedSubscript:v54];
      id v56 = (void *)v55;
      if (v55) {
        uint64_t v57 = (void *)v55;
      }
      else {
        uint64_t v57 = v52;
      }
      id v58 = v57;

      id v59 = NSNumber;
      unint64_t v60 = +[GEOAPStateFactory sharedFactory];
      id v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 30));

      id v62 = [v35 objectForKeyedSubscript:v61];
      id v63 = v62;
      if (v62)
      {
        id v64 = v62;
      }
      else
      {
        uint64_t v65 = +[GEOAPStateFactory sharedFactory];
        id v64 = [v65 stateForType:30];
      }
      uint64_t v66 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v64, "stateType"));
      uint64_t v67 = [v35 objectForKeyedSubscript:v66];
      id v68 = (void *)v67;
      if (v67) {
        unint64_t v69 = (void *)v67;
      }
      else {
        unint64_t v69 = v64;
      }
      id v151 = v69;

      id v70 = NSNumber;
      uint64_t v71 = +[GEOAPStateFactory sharedFactory];
      id v72 = objc_msgSend(v70, "numberWithInt:", objc_msgSend(v71, "logMsgStateTypeForType:", 0));

      id v73 = [v35 objectForKeyedSubscript:v72];
      id v74 = v73;
      if (v73)
      {
        id v75 = v73;
      }
      else
      {
        uint64_t v76 = +[GEOAPStateFactory sharedFactory];
        id v75 = [v76 stateForType:0];
      }
      uint64_t v77 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v75, "stateType"));
      uint64_t v78 = [v35 objectForKeyedSubscript:v77];
      id v79 = (void *)v78;
      if (v78) {
        id v80 = (void *)v78;
      }
      else {
        id v80 = v75;
      }
      id v150 = v80;

      id v81 = NSNumber;
      id v82 = +[GEOAPStateFactory sharedFactory];
      id v83 = objc_msgSend(v81, "numberWithInt:", objc_msgSend(v82, "logMsgStateTypeForType:", 3));

      id v84 = [v35 objectForKeyedSubscript:v83];
      id v85 = v84;
      if (v84)
      {
        id v86 = v84;
      }
      else
      {
        uint64_t v87 = +[GEOAPStateFactory sharedFactory];
        id v86 = [v87 stateForType:3];
      }
      uint64_t v152 = v58;

      uint64_t v88 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v86, "stateType"));
      uint64_t v89 = [v35 objectForKeyedSubscript:v88];
      id v90 = (void *)v89;
      if (v89) {
        long long v91 = (void *)v89;
      }
      else {
        long long v91 = v86;
      }
      id v149 = v91;

      long long v92 = NSNumber;
      long long v93 = +[GEOAPStateFactory sharedFactory];
      id v94 = objc_msgSend(v92, "numberWithInt:", objc_msgSend(v93, "logMsgStateTypeForType:", 42));

      id v95 = [v35 objectForKeyedSubscript:v94];
      id v96 = v95;
      if (v95)
      {
        id v97 = v95;
      }
      else
      {
        uint64_t v98 = +[GEOAPStateFactory sharedFactory];
        id v97 = [v98 stateForType:42];
      }
      uint64_t v99 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v97, "stateType"));
      uint64_t v100 = [v35 objectForKeyedSubscript:v99];
      long long v101 = (void *)v100;
      if (v100) {
        id v102 = (void *)v100;
      }
      else {
        id v102 = v97;
      }
      id v148 = v102;

      id v103 = NSNumber;
      id v104 = +[GEOAPStateFactory sharedFactory];
      id v105 = objc_msgSend(v103, "numberWithInt:", objc_msgSend(v104, "logMsgStateTypeForType:", 70));

      id v106 = [v35 objectForKeyedSubscript:v105];
      id v107 = v106;
      if (v106)
      {
        id v108 = v106;
      }
      else
      {
        uint64_t v109 = +[GEOAPStateFactory sharedFactory];
        id v108 = [v109 stateForType:70];
      }
      uint64_t v110 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v108, "stateType"));
      uint64_t v111 = [v35 objectForKeyedSubscript:v110];
      id v112 = (void *)v111;
      if (v111) {
        long long v113 = (void *)v111;
      }
      else {
        long long v113 = v108;
      }
      id v114 = v113;

      uint64_t v115 = NSNumber;
      id v116 = +[GEOAPStateFactory sharedFactory];
      id v117 = objc_msgSend(v115, "numberWithInt:", objc_msgSend(v116, "logMsgStateTypeForType:", 17));

      id v118 = [v35 objectForKeyedSubscript:v117];
      unsigned int v119 = v118;
      if (v118)
      {
        id v120 = v118;
      }
      else
      {
        uint64_t v121 = +[GEOAPStateFactory sharedFactory];
        id v120 = [v121 stateForType:17];
      }
      id v122 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v120, "stateType"));
      uint64_t v123 = [v35 objectForKeyedSubscript:v122];
      id v124 = (void *)v123;
      if (v123) {
        id v125 = (void *)v123;
      }
      else {
        id v125 = v120;
      }
      id v126 = v125;

      id v127 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v127 setEventType:1];
      id v128 = objc_alloc_init(MEMORY[0x263F41958]);
      [v127 setUserActionEvent:v128];

      unint64_t v129 = [v127 userActionEvent];
      [v129 setUserActionEventAction:v144];

      uint64_t v130 = [v127 userActionEvent];
      [v130 setUserActionEventTarget:v145];

      uint64_t v131 = [v127 userActionEvent];
      [v131 setUserActionEventValue:v17];

      id v132 = [v127 userActionEvent];
      [v132 setActionRichProviderId:v154];

      if (v155 != 0)
      {
        id v133 = objc_alloc_init(MEMORY[0x263F41960]);
        long long v134 = [v127 userActionEvent];
        [v134 setModuleInfo:v133];

        if ((void)v155)
        {
          uint64_t v135 = [(id)v155 intValue];
          long long v136 = [v127 userActionEvent];
          [v136 moduleInfo];
          id v137 = v22;
          v139 = id v138 = v17;
          [v139 setType:v135];

          id v17 = v138;
          id v22 = v137;
        }
        if (*((void *)&v155 + 1))
        {
          id v140 = [v127 userActionEvent];
          uint64_t v141 = [v140 moduleInfo];
          [v141 setModuleMetadata:*((void *)&v155 + 1)];
        }
      }
      if (v153) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v152) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v151) {
        [v127 addLogMsgState:v151];
      }
      if (v150) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v149) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v148) {
        [v127 addLogMsgState:v148];
      }
      if (v126) {
        [v127 addLogMsgState:v126];
      }
      if (v114) {
        [v127 addLogMsgState:v114];
      }
      uint64_t v142 = +[GEOAPStateFactory sharedFactory];
      v156[0] = MEMORY[0x263EF8330];
      v156[1] = 3221225472;
      v156[2] = __221__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v156[3] = &unk_2653457B8;
      id v157 = v127;
      id v159 = v146;
      id v158 = v22;
      id v143 = v127;
      [v142 sessionStateForType:7 callback:v156];

      id v23 = v146;
      id v19 = (id)*((void *)&v155 + 1);
      id v18 = (id)v155;
      id v20 = v154;
      id v21 = v147;
    }
  }
}

uint64_t __221__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    long long v166 = "+[GEOAPPortal(UserActionCodeGen) captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithA"
           "ction:target:value:moduleType:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue"
           ":completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v145 = a4;
      id v146 = v23;
      id v154 = v20;
      *(void *)&long long v155 = v18;
      *((void *)&v155 + 1) = v19;
      unsigned int v144 = a3;
      id v147 = v21;
      if ([v21 count])
      {
        id v26 = v22;
        id v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v160 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        id v28 = v21;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v160 objects:v164 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v161;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v161 != v31) {
                objc_enumerationMutation(v28);
              }
              long long v33 = *(void **)(*((void *)&v160 + 1) + 8 * i);
              long long v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v160 objects:v164 count:16];
          }
          while (v30);
        }

        unint64_t v35 = (void *)[v27 copy];
        id v22 = v26;
      }
      else
      {
        unint64_t v35 = 0;
      }
      long long v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      int v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 2));

      id v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v41 = v39;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v41 = [v42 stateForType:2];
      }
      uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
      uint64_t v44 = [v35 objectForKeyedSubscript:v43];
      uint64_t v45 = (void *)v44;
      if (v44) {
        id v46 = (void *)v44;
      }
      else {
        id v46 = v41;
      }
      id v153 = v46;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 39));

      id v50 = [v35 objectForKeyedSubscript:v49];
      id v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:39];
      }
      uint64_t v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v35 objectForKeyedSubscript:v54];
      id v56 = (void *)v55;
      if (v55) {
        uint64_t v57 = (void *)v55;
      }
      else {
        uint64_t v57 = v52;
      }
      id v58 = v57;

      id v59 = NSNumber;
      unint64_t v60 = +[GEOAPStateFactory sharedFactory];
      id v61 = objc_msgSend(v59, "numberWithInt:", objc_msgSend(v60, "logMsgStateTypeForType:", 30));

      id v62 = [v35 objectForKeyedSubscript:v61];
      id v63 = v62;
      if (v62)
      {
        id v64 = v62;
      }
      else
      {
        uint64_t v65 = +[GEOAPStateFactory sharedFactory];
        id v64 = [v65 stateForType:30];
      }
      uint64_t v66 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v64, "stateType"));
      uint64_t v67 = [v35 objectForKeyedSubscript:v66];
      id v68 = (void *)v67;
      if (v67) {
        unint64_t v69 = (void *)v67;
      }
      else {
        unint64_t v69 = v64;
      }
      id v151 = v69;

      id v70 = NSNumber;
      uint64_t v71 = +[GEOAPStateFactory sharedFactory];
      id v72 = objc_msgSend(v70, "numberWithInt:", objc_msgSend(v71, "logMsgStateTypeForType:", 0));

      id v73 = [v35 objectForKeyedSubscript:v72];
      id v74 = v73;
      if (v73)
      {
        id v75 = v73;
      }
      else
      {
        uint64_t v76 = +[GEOAPStateFactory sharedFactory];
        id v75 = [v76 stateForType:0];
      }
      uint64_t v77 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v75, "stateType"));
      uint64_t v78 = [v35 objectForKeyedSubscript:v77];
      id v79 = (void *)v78;
      if (v78) {
        id v80 = (void *)v78;
      }
      else {
        id v80 = v75;
      }
      id v150 = v80;

      id v81 = NSNumber;
      id v82 = +[GEOAPStateFactory sharedFactory];
      id v83 = objc_msgSend(v81, "numberWithInt:", objc_msgSend(v82, "logMsgStateTypeForType:", 3));

      id v84 = [v35 objectForKeyedSubscript:v83];
      id v85 = v84;
      if (v84)
      {
        id v86 = v84;
      }
      else
      {
        uint64_t v87 = +[GEOAPStateFactory sharedFactory];
        id v86 = [v87 stateForType:3];
      }
      uint64_t v152 = v58;

      uint64_t v88 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v86, "stateType"));
      uint64_t v89 = [v35 objectForKeyedSubscript:v88];
      id v90 = (void *)v89;
      if (v89) {
        long long v91 = (void *)v89;
      }
      else {
        long long v91 = v86;
      }
      id v149 = v91;

      long long v92 = NSNumber;
      long long v93 = +[GEOAPStateFactory sharedFactory];
      id v94 = objc_msgSend(v92, "numberWithInt:", objc_msgSend(v93, "logMsgStateTypeForType:", 42));

      id v95 = [v35 objectForKeyedSubscript:v94];
      id v96 = v95;
      if (v95)
      {
        id v97 = v95;
      }
      else
      {
        uint64_t v98 = +[GEOAPStateFactory sharedFactory];
        id v97 = [v98 stateForType:42];
      }
      uint64_t v99 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v97, "stateType"));
      uint64_t v100 = [v35 objectForKeyedSubscript:v99];
      long long v101 = (void *)v100;
      if (v100) {
        id v102 = (void *)v100;
      }
      else {
        id v102 = v97;
      }
      id v148 = v102;

      id v103 = NSNumber;
      id v104 = +[GEOAPStateFactory sharedFactory];
      id v105 = objc_msgSend(v103, "numberWithInt:", objc_msgSend(v104, "logMsgStateTypeForType:", 70));

      id v106 = [v35 objectForKeyedSubscript:v105];
      id v107 = v106;
      if (v106)
      {
        id v108 = v106;
      }
      else
      {
        uint64_t v109 = +[GEOAPStateFactory sharedFactory];
        id v108 = [v109 stateForType:70];
      }
      uint64_t v110 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v108, "stateType"));
      uint64_t v111 = [v35 objectForKeyedSubscript:v110];
      id v112 = (void *)v111;
      if (v111) {
        long long v113 = (void *)v111;
      }
      else {
        long long v113 = v108;
      }
      id v114 = v113;

      uint64_t v115 = NSNumber;
      id v116 = +[GEOAPStateFactory sharedFactory];
      id v117 = objc_msgSend(v115, "numberWithInt:", objc_msgSend(v116, "logMsgStateTypeForType:", 17));

      id v118 = [v35 objectForKeyedSubscript:v117];
      unsigned int v119 = v118;
      if (v118)
      {
        id v120 = v118;
      }
      else
      {
        uint64_t v121 = +[GEOAPStateFactory sharedFactory];
        id v120 = [v121 stateForType:17];
      }
      id v122 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v120, "stateType"));
      uint64_t v123 = [v35 objectForKeyedSubscript:v122];
      id v124 = (void *)v123;
      if (v123) {
        id v125 = (void *)v123;
      }
      else {
        id v125 = v120;
      }
      id v126 = v125;

      id v127 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v127 setEventType:1];
      id v128 = objc_alloc_init(MEMORY[0x263F41958]);
      [v127 setUserActionEvent:v128];

      unint64_t v129 = [v127 userActionEvent];
      [v129 setUserActionEventAction:v144];

      uint64_t v130 = [v127 userActionEvent];
      [v130 setUserActionEventTarget:v145];

      uint64_t v131 = [v127 userActionEvent];
      [v131 setUserActionEventValue:v17];

      id v132 = [v127 userActionEvent];
      [v132 setActionRichProviderId:v154];

      if (v155 != 0)
      {
        id v133 = objc_alloc_init(MEMORY[0x263F41960]);
        long long v134 = [v127 userActionEvent];
        [v134 setModuleInfo:v133];

        if ((void)v155)
        {
          uint64_t v135 = [(id)v155 intValue];
          long long v136 = [v127 userActionEvent];
          [v136 moduleInfo];
          id v137 = v22;
          v139 = id v138 = v17;
          [v139 setType:v135];

          id v17 = v138;
          id v22 = v137;
        }
        if (*((void *)&v155 + 1))
        {
          id v140 = [v127 userActionEvent];
          uint64_t v141 = [v140 moduleInfo];
          [v141 setModuleMetadata:*((void *)&v155 + 1)];
        }
      }
      if (v153) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v152) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v151) {
        [v127 addLogMsgState:v151];
      }
      if (v150) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v149) {
        objc_msgSend(v127, "addLogMsgState:");
      }
      if (v148) {
        [v127 addLogMsgState:v148];
      }
      if (v126) {
        [v127 addLogMsgState:v126];
      }
      if (v114) {
        [v127 addLogMsgState:v114];
      }
      uint64_t v142 = +[GEOAPStateFactory sharedFactory];
      v156[0] = MEMORY[0x263EF8330];
      v156[1] = 3221225472;
      v156[2] = __236__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v156[3] = &unk_2653457B8;
      id v157 = v127;
      id v159 = v146;
      id v158 = v22;
      id v143 = v127;
      [v142 sessionStateForType:7 callback:v156];

      id v23 = v146;
      id v19 = (id)*((void *)&v155 + 1);
      id v18 = (id)v155;
      id v20 = v154;
      id v21 = v147;
    }
  }
}

uint64_t __236__GEOAPPortal_UserActionCodeGen__captureCuratedCollectionsSessionlessUserActionTargetPairRedactedCCStateWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureUGCShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v333 = *MEMORY[0x263EF8340];
  id v320 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = a8;
  id v18 = a9;
  id v19 = a10;
  id v20 = a11;
  id v21 = a12;
  id v22 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v332 = "+[GEOAPPortal(UserActionCodeGen) captureUGCShortUserActionTargetPairWithAction:target:value:moduleType:module"
           "Metadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v22, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  id v23 = v320;
  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v312 = v17;
      unint64_t v313 = (unint64_t)v15;
      unint64_t v317 = (unint64_t)v16;
      id v297 = v21;
      id v295 = v18;
      if ([v18 count])
      {
        id v25 = v20;
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v18, "count"));
        long long v326 = 0u;
        long long v327 = 0u;
        long long v328 = 0u;
        long long v329 = 0u;
        id v27 = v18;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v326 objects:v330 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v327;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v327 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v326 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v326 objects:v330 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        id v20 = v25;
        id v21 = v297;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v311 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v57 = v56;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      id v61 = [v34 objectForKeyedSubscript:v60];
      id v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:16];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v34 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v310 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 35));

      id v72 = [v34 objectForKeyedSubscript:v71];
      id v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        id v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:35];
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v34 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v309 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 30));

      id v83 = [v34 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        id v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:30];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v34 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v308 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 0));

      id v94 = [v34 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:0];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v34 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        long long v101 = (void *)v99;
      }
      else {
        long long v101 = v96;
      }
      id v307 = v101;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      id v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 3));

      id v105 = [v34 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:3];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v34 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v306 = v112;

      long long v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      uint64_t v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 64));

      id v116 = [v34 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        unsigned int v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:64];
      }
      id v120 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v121 = [v34 objectForKeyedSubscript:v120];
      id v122 = (void *)v121;
      if (v121) {
        uint64_t v123 = (void *)v121;
      }
      else {
        uint64_t v123 = v118;
      }
      id v305 = v123;

      id v124 = NSNumber;
      id v125 = +[GEOAPStateFactory sharedFactory];
      id v126 = objc_msgSend(v124, "numberWithInt:", objc_msgSend(v125, "logMsgStateTypeForType:", 13));

      id v127 = [v34 objectForKeyedSubscript:v126];
      id v128 = v127;
      if (v127)
      {
        id v129 = v127;
      }
      else
      {
        uint64_t v130 = +[GEOAPStateFactory sharedFactory];
        id v129 = [v130 stateForType:13];
      }
      uint64_t v131 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v129, "stateType"));
      uint64_t v132 = [v34 objectForKeyedSubscript:v131];
      id v133 = (void *)v132;
      if (v132) {
        long long v134 = (void *)v132;
      }
      else {
        long long v134 = v129;
      }
      id v304 = v134;

      uint64_t v135 = NSNumber;
      long long v136 = +[GEOAPStateFactory sharedFactory];
      id v137 = objc_msgSend(v135, "numberWithInt:", objc_msgSend(v136, "logMsgStateTypeForType:", 14));

      id v138 = [v34 objectForKeyedSubscript:v137];
      id v139 = v138;
      if (v138)
      {
        id v140 = v138;
      }
      else
      {
        uint64_t v141 = +[GEOAPStateFactory sharedFactory];
        id v140 = [v141 stateForType:14];
      }
      uint64_t v142 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v140, "stateType"));
      uint64_t v143 = [v34 objectForKeyedSubscript:v142];
      unsigned int v144 = (void *)v143;
      if (v143) {
        unsigned int v145 = (void *)v143;
      }
      else {
        unsigned int v145 = v140;
      }
      id v303 = v145;

      id v146 = NSNumber;
      id v147 = +[GEOAPStateFactory sharedFactory];
      id v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 9));

      id v149 = [v34 objectForKeyedSubscript:v148];
      id v150 = v149;
      if (v149)
      {
        id v151 = v149;
      }
      else
      {
        uint64_t v152 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v152 stateForType:9];
      }
      id v153 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v151, "stateType"));
      uint64_t v154 = [v34 objectForKeyedSubscript:v153];
      long long v155 = (void *)v154;
      if (v154) {
        id v156 = (void *)v154;
      }
      else {
        id v156 = v151;
      }
      id v302 = v156;

      id v157 = NSNumber;
      id v158 = +[GEOAPStateFactory sharedFactory];
      id v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 10));

      long long v160 = [v34 objectForKeyedSubscript:v159];
      long long v161 = v160;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        long long v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:10];
      }
      uint64_t v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v34 objectForKeyedSubscript:v164];
      long long v166 = (void *)v165;
      if (v165) {
        uint64_t v167 = (void *)v165;
      }
      else {
        uint64_t v167 = v162;
      }
      id v301 = v167;

      id v168 = NSNumber;
      long long v169 = +[GEOAPStateFactory sharedFactory];
      uint64_t v170 = objc_msgSend(v168, "numberWithInt:", objc_msgSend(v169, "logMsgStateTypeForType:", 20));

      id v171 = [v34 objectForKeyedSubscript:v170];
      id v172 = v171;
      if (v171)
      {
        id v173 = v171;
      }
      else
      {
        uint64_t v174 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v174 stateForType:20];
      }
      uint64_t v175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v173, "stateType"));
      uint64_t v176 = [v34 objectForKeyedSubscript:v175];
      id v177 = (void *)v176;
      if (v176) {
        long long v178 = (void *)v176;
      }
      else {
        long long v178 = v173;
      }
      id v300 = v178;

      long long v179 = NSNumber;
      long long v180 = +[GEOAPStateFactory sharedFactory];
      id v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 42));

      id v182 = [v34 objectForKeyedSubscript:v181];
      id v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        uint64_t v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:42];
      }
      uint64_t v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v34 objectForKeyedSubscript:v186];
      id v188 = (void *)v187;
      if (v187) {
        id v189 = (void *)v187;
      }
      else {
        id v189 = v184;
      }
      id v299 = v189;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v34 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      uint64_t v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      id v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v298 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      id v204 = [v34 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v316 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      id v215 = [v34 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      id v296 = v57;

      uint64_t v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v315 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      int v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 19));

      uint64_t v226 = [v34 objectForKeyedSubscript:v225];
      int v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        id v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:19];
      }
      uint64_t v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      uint64_t v232 = (void *)v231;
      if (v231) {
        uint64_t v233 = (void *)v231;
      }
      else {
        uint64_t v233 = v228;
      }
      id v314 = v233;

      id v234 = NSNumber;
      id v235 = +[GEOAPStateFactory sharedFactory];
      id v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 27));

      id v237 = [v34 objectForKeyedSubscript:v236];
      id v238 = v237;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        uint64_t v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:27];
      }
      id v23 = v320;

      uint64_t v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v34 objectForKeyedSubscript:v241];
      id v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v321 = v244;

      id v245 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v245 setEventType:1];
      id v246 = objc_alloc_init(MEMORY[0x263F41958]);
      [v245 setUserActionEvent:v246];

      uint64_t v247 = [v245 userActionEvent];
      [v247 setUserActionEventAction:a3];

      id v248 = [v245 userActionEvent];
      [v248 setUserActionEventTarget:a4];

      id v249 = [v245 userActionEvent];
      [v249 setUserActionEventValue:v23];

      id v250 = [v245 userActionEvent];
      [v250 setActionRichProviderId:v312];

      if (v313 | v317)
      {
        id v251 = objc_alloc_init(MEMORY[0x263F41960]);
        id v252 = [v245 userActionEvent];
        [v252 setModuleInfo:v251];

        if (v313)
        {
          uint64_t v253 = [(id)v313 intValue];
          uint64_t v254 = [v245 userActionEvent];
          id v255 = [v254 moduleInfo];
          [v255 setType:v253];

          id v21 = v297;
        }
        if (v317)
        {
          id v256 = [v245 userActionEvent];
          id v257 = [v256 moduleInfo];
          [v257 setModuleMetadata:v317];
        }
      }
      if (v311) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      unint64_t v258 = 0x265344000uLL;
      if (v57) {
        [v245 addLogMsgState:v57];
      }
      if (v310) {
        [v245 addLogMsgState:v310];
      }
      if (v309) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v308) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v307) {
        [v245 addLogMsgState:v307];
      }
      if (v306) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v305) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v304) {
        [v245 addLogMsgState:v304];
      }
      if (v303) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v302) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v301) {
        [v245 addLogMsgState:v301];
      }
      if (v300) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v299) {
        objc_msgSend(v245, "addLogMsgState:");
      }
      if (v316) {
        [v245 addLogMsgState:v316];
      }
      if (v315) {
        [v245 addLogMsgState:v315];
      }
      if (v314) {
        [v245 addLogMsgState:v314];
      }
      if (v321) {
        [v245 addLogMsgState:v321];
      }
      if (v298) {
        [v245 addLogMsgState:v298];
      }
      if (a3 == 6100 && a4 == 665)
      {
        id v259 = NSNumber;
        id v260 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v259, "numberWithInt:", objc_msgSend(v260, "logMsgStateTypeForType:", 68));

        id v262 = [v34 objectForKeyedSubscript:v261];
        id v263 = v262;
        id v264 = v20;
        if (v262)
        {
          id v265 = v262;
        }
        else
        {
          id v271 = +[GEOAPStateFactory sharedFactory];
          id v265 = [v271 stateForType:68];
        }
        id v272 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v265, "stateType"));
        uint64_t v273 = [v34 objectForKeyedSubscript:v272];
        id v274 = (void *)v273;
        if (v273) {
          id v275 = (void *)v273;
        }
        else {
          id v275 = v265;
        }
        id v276 = v275;

        if (v276)
        {
          id v20 = v264;
          id v57 = v296;
          id v21 = v297;
LABEL_198:
          unint64_t v258 = 0x265344000;
          objc_msgSend(v245, "addLogMsgState:", v276, v294);
LABEL_211:

          id v236 = (void *)v261;
LABEL_212:
          id v292 = objc_msgSend(*(id *)(v258 + 3384), "sharedFactory", v294);
          v322[0] = MEMORY[0x263EF8330];
          v322[1] = 3221225472;
          v322[2] = __200__GEOAPPortal_UserActionCodeGen__captureUGCShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
          v322[3] = &unk_2653457B8;
          id v293 = v245;
          id v323 = v293;
          id v325 = v21;
          id v324 = v20;
          [v292 sessionStateForType:6 callback:v322];

          id v17 = v312;
          id v15 = (id)v313;
          id v16 = (id)v317;
          id v18 = v295;
          goto LABEL_213;
        }
        id v20 = v264;
        id v57 = v296;
        id v21 = v297;
LABEL_210:
        unint64_t v258 = 0x265344000uLL;
        goto LABEL_211;
      }
      id v294 = v20;
      if (a3 == 6048 && a4 == 612 || a3 == 6049 && a4 == 612 || a3 == 6101 && a4 == 665)
      {
        uint64_t v266 = NSNumber;
        id v267 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v266, "numberWithInt:", objc_msgSend(v267, "logMsgStateTypeForType:", 68));

        id v268 = [v34 objectForKeyedSubscript:v261];
        id v269 = v268;
        if (v268)
        {
          id v270 = v268;
        }
        else
        {
          id v277 = +[GEOAPStateFactory sharedFactory];
          id v270 = [v277 stateForType:68];
        }
        id v278 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v270, "stateType"));
        uint64_t v279 = [v34 objectForKeyedSubscript:v278];
        id v280 = (void *)v279;
        if (v279) {
          id v281 = (void *)v279;
        }
        else {
          id v281 = v270;
        }
        id v276 = v281;

        if (v276)
        {
LABEL_197:
          id v20 = v294;
          id v21 = v297;
          goto LABEL_198;
        }
      }
      else
      {
        if (a3 != 6006 || a4 != 665) {
          goto LABEL_212;
        }
        id v282 = NSNumber;
        id v283 = +[GEOAPStateFactory sharedFactory];
        uint64_t v261 = objc_msgSend(v282, "numberWithInt:", objc_msgSend(v283, "logMsgStateTypeForType:", 68));

        id v284 = [v34 objectForKeyedSubscript:v261];
        id v285 = v284;
        if (v284)
        {
          id v286 = v284;
        }
        else
        {
          id v287 = +[GEOAPStateFactory sharedFactory];
          id v286 = [v287 stateForType:68];
        }
        id v288 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v286, "stateType"));
        uint64_t v289 = [v34 objectForKeyedSubscript:v288];
        id v290 = (void *)v289;
        if (v289) {
          id v291 = (void *)v289;
        }
        else {
          id v291 = v286;
        }
        id v276 = v291;

        if (v276) {
          goto LABEL_197;
        }
      }
      id v20 = v294;
      id v21 = v297;
      goto LABEL_210;
    }
  }
LABEL_213:
}

uint64_t __200__GEOAPPortal_UserActionCodeGen__captureUGCShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureUGCSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v179 = *MEMORY[0x263EF8340];
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    long long v178 = "+[GEOAPPortal(UserActionCodeGen) captureUGCSessionlessUserActionTargetPairWithAction:target:value:moduleType:"
           "moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v164 = v19;
      id v165 = v16;
      *(void *)&long long v166 = v17;
      *((void *)&v166 + 1) = v18;
      unsigned int v156 = a4;
      id v157 = v20;
      if ([v20 count])
      {
        id v25 = v22;
        id v26 = v21;
        id v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v172 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        id v28 = v20;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v173;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v173 != v31) {
                objc_enumerationMutation(v28);
              }
              long long v33 = *(void **)(*((void *)&v172 + 1) + 8 * i);
              long long v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
          }
          while (v30);
        }

        unint64_t v35 = (void *)[v27 copy];
        id v21 = v26;
        id v22 = v25;
      }
      else
      {
        unint64_t v35 = 0;
      }
      long long v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      int v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 2));

      id v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v41 = v39;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v41 = [v42 stateForType:2];
      }
      uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
      uint64_t v44 = [v35 objectForKeyedSubscript:v43];
      uint64_t v45 = (void *)v44;
      if (v44) {
        id v46 = (void *)v44;
      }
      else {
        id v46 = v41;
      }
      id v158 = v46;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 30));

      id v50 = [v35 objectForKeyedSubscript:v49];
      id v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:30];
      }
      uint64_t v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v35 objectForKeyedSubscript:v54];
      id v56 = (void *)v55;
      if (v55) {
        id v57 = (void *)v55;
      }
      else {
        id v57 = v52;
      }
      id v163 = v57;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 0));

      id v61 = [v35 objectForKeyedSubscript:v60];
      id v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:0];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v35 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v162 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 3));

      id v72 = [v35 objectForKeyedSubscript:v71];
      id v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        id v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:3];
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v35 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v161 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 42));

      id v83 = [v35 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        id v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:42];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v35 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v160 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 70));

      id v94 = [v35 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:70];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v35 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        long long v101 = (void *)v99;
      }
      else {
        long long v101 = v96;
      }
      id v154 = v101;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      id v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 60));

      id v105 = [v35 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:60];
      }
      id v155 = v21;

      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v35 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v159 = v112;

      long long v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      uint64_t v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 62));

      id v116 = [v35 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        unsigned int v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:62];
      }
      id v120 = v158;

      uint64_t v121 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v122 = [v35 objectForKeyedSubscript:v121];
      uint64_t v123 = (void *)v122;
      if (v122) {
        id v124 = (void *)v122;
      }
      else {
        id v124 = v118;
      }
      id v125 = v124;

      id v126 = NSNumber;
      id v127 = +[GEOAPStateFactory sharedFactory];
      uint64_t v128 = objc_msgSend(v126, "numberWithInt:", objc_msgSend(v127, "logMsgStateTypeForType:", 61));

      id v153 = (void *)v128;
      id v129 = [v35 objectForKeyedSubscript:v128];
      uint64_t v130 = v129;
      if (v129)
      {
        id v131 = v129;
      }
      else
      {
        uint64_t v132 = +[GEOAPStateFactory sharedFactory];
        id v131 = [v132 stateForType:61];
      }
      id v133 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v131, "stateType"));
      uint64_t v134 = [v35 objectForKeyedSubscript:v133];
      uint64_t v135 = (void *)v134;
      if (v134) {
        long long v136 = (void *)v134;
      }
      else {
        long long v136 = v131;
      }
      id v137 = v136;

      id v138 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v138 setEventType:1];
      id v139 = objc_alloc_init(MEMORY[0x263F41958]);
      [v138 setUserActionEvent:v139];

      id v140 = [v138 userActionEvent];
      [v140 setUserActionEventAction:a3];

      uint64_t v141 = [v138 userActionEvent];
      [v141 setUserActionEventTarget:v156];

      uint64_t v142 = [v138 userActionEvent];
      [v142 setUserActionEventValue:v165];

      uint64_t v143 = [v138 userActionEvent];
      [v143 setActionRichProviderId:v164];

      if (v166 != 0)
      {
        id v144 = objc_alloc_init(MEMORY[0x263F41960]);
        unsigned int v145 = [v138 userActionEvent];
        [v145 setModuleInfo:v144];

        if ((void)v166)
        {
          uint64_t v146 = [(id)v166 intValue];
          id v147 = [v138 userActionEvent];
          id v148 = [v147 moduleInfo];
          [v148 setType:v146];

          id v21 = v155;
          id v120 = v158;
        }
        if (*((void *)&v166 + 1))
        {
          id v149 = [v138 userActionEvent];
          id v150 = [v149 moduleInfo];
          [v150 setModuleMetadata:*((void *)&v166 + 1)];
        }
      }
      if (v120) {
        [v138 addLogMsgState:v120];
      }
      if (v163) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v162) {
        [v138 addLogMsgState:v162];
      }
      if (v161) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v160) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v159) {
        [v138 addLogMsgState:v159];
      }
      if (v137) {
        [v138 addLogMsgState:v137];
      }
      if (v125) {
        [v138 addLogMsgState:v125];
      }
      if (v154) {
        [v138 addLogMsgState:v154];
      }
      id v151 = +[GEOAPStateFactory sharedFactory];
      v168[0] = MEMORY[0x263EF8330];
      v168[1] = 3221225472;
      v168[2] = __206__GEOAPPortal_UserActionCodeGen__captureUGCSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v168[3] = &unk_2653457B8;
      id v169 = v138;
      id v171 = v22;
      id v170 = v21;
      id v152 = v138;
      [v151 sessionStateForType:7 callback:v168];

      id v16 = v165;
      id v18 = (id)*((void *)&v166 + 1);
      id v17 = (id)v166;
      id v19 = v164;
      id v20 = v157;
    }
  }
}

uint64_t __206__GEOAPPortal_UserActionCodeGen__captureUGCSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)capturePredExShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v302 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v301 = "+[GEOAPPortal(UserActionCodeGen) capturePredExShortUserActionTargetPairWithAction:target:value:moduleType:mod"
           "uleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v265 = v22;
      uint64_t v266 = v21;
      id v267 = v20;
      unint64_t v287 = (unint64_t)v17;
      unint64_t v269 = (unint64_t)v16;
      id v286 = v18;
      id v268 = v19;
      if ([v19 count])
      {
        id v25 = v15;
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v295 = 0u;
        long long v296 = 0u;
        long long v297 = 0u;
        long long v298 = 0u;
        id v27 = v19;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v295 objects:v299 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v296;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v296 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v295 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v295 objects:v299 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        id v15 = v25;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v285 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v284 = v56;

      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 16));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:16];
      }
      id v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        uint64_t v67 = (void *)v65;
      }
      else {
        uint64_t v67 = v62;
      }
      id v283 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 35));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:35];
      }
      id v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        uint64_t v78 = (void *)v76;
      }
      else {
        uint64_t v78 = v73;
      }
      id v282 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 30));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:30];
      }
      id v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        uint64_t v89 = (void *)v87;
      }
      else {
        uint64_t v89 = v84;
      }
      id v281 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 0));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:0];
      }
      id v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        uint64_t v100 = (void *)v98;
      }
      else {
        uint64_t v100 = v95;
      }
      id v280 = v100;

      long long v101 = NSNumber;
      id v102 = +[GEOAPStateFactory sharedFactory];
      id v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 3));

      id v104 = [v34 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:3];
      }
      id v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v34 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v279 = v111;

      id v112 = NSNumber;
      long long v113 = +[GEOAPStateFactory sharedFactory];
      id v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 64));

      uint64_t v115 = [v34 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:64];
      }
      unsigned int v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v34 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        uint64_t v122 = (void *)v120;
      }
      else {
        uint64_t v122 = v117;
      }
      id v278 = v122;

      uint64_t v123 = NSNumber;
      id v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 13));

      id v126 = [v34 objectForKeyedSubscript:v125];
      id v127 = v126;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        id v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:13];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v34 objectForKeyedSubscript:v130];
      uint64_t v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v277 = v133;

      uint64_t v134 = NSNumber;
      uint64_t v135 = +[GEOAPStateFactory sharedFactory];
      long long v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 14));

      id v137 = [v34 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:14];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v34 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v276 = v144;

      unsigned int v145 = NSNumber;
      uint64_t v146 = +[GEOAPStateFactory sharedFactory];
      id v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 9));

      id v148 = [v34 objectForKeyedSubscript:v147];
      id v149 = v148;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:9];
      }
      id v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v34 objectForKeyedSubscript:v152];
      id v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v275 = v155;

      unsigned int v156 = NSNumber;
      id v157 = +[GEOAPStateFactory sharedFactory];
      id v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 10));

      id v159 = [v34 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        id v162 = +[GEOAPStateFactory sharedFactory];
        id v161 = [v162 stateForType:10];
      }
      id v163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v161, "stateType"));
      uint64_t v164 = [v34 objectForKeyedSubscript:v163];
      id v165 = (void *)v164;
      if (v164) {
        long long v166 = (void *)v164;
      }
      else {
        long long v166 = v161;
      }
      id v274 = v166;

      uint64_t v167 = NSNumber;
      id v168 = +[GEOAPStateFactory sharedFactory];
      id v169 = objc_msgSend(v167, "numberWithInt:", objc_msgSend(v168, "logMsgStateTypeForType:", 20));

      id v170 = [v34 objectForKeyedSubscript:v169];
      id v171 = v170;
      if (v170)
      {
        id v172 = v170;
      }
      else
      {
        long long v173 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v173 stateForType:20];
      }
      long long v174 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v172, "stateType"));
      uint64_t v175 = [v34 objectForKeyedSubscript:v174];
      uint64_t v176 = (void *)v175;
      if (v175) {
        id v177 = (void *)v175;
      }
      else {
        id v177 = v172;
      }
      id v178 = v177;

      uint64_t v179 = NSNumber;
      long long v180 = +[GEOAPStateFactory sharedFactory];
      id v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 42));

      id v182 = [v34 objectForKeyedSubscript:v181];
      id v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        uint64_t v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:42];
      }
      uint64_t v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v34 objectForKeyedSubscript:v186];
      id v188 = (void *)v187;
      if (v187) {
        id v189 = (void *)v187;
      }
      else {
        id v189 = v184;
      }
      id v272 = v189;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v34 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      uint64_t v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      id v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v264 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      id v204 = [v34 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v271 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      id v215 = [v34 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      uint64_t v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v270 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      int v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 19));

      uint64_t v226 = [v34 objectForKeyedSubscript:v225];
      int v227 = v226;
      uint64_t v273 = v178;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        id v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:19];
      }
      uint64_t v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      uint64_t v232 = (void *)v231;
      if (v231) {
        uint64_t v233 = (void *)v231;
      }
      else {
        uint64_t v233 = v228;
      }
      id v234 = v233;

      id v235 = NSNumber;
      id v236 = +[GEOAPStateFactory sharedFactory];
      uint64_t v237 = objc_msgSend(v235, "numberWithInt:", objc_msgSend(v236, "logMsgStateTypeForType:", 27));

      id v263 = (void *)v237;
      id v238 = [v34 objectForKeyedSubscript:v237];
      id v239 = v238;
      if (v238)
      {
        id v240 = v238;
      }
      else
      {
        uint64_t v241 = +[GEOAPStateFactory sharedFactory];
        id v240 = [v241 stateForType:27];
      }
      id v16 = (id)v269;

      uint64_t v242 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v240, "stateType"));
      uint64_t v243 = [v34 objectForKeyedSubscript:v242];
      id v244 = (void *)v243;
      if (v243) {
        id v245 = (void *)v243;
      }
      else {
        id v245 = v240;
      }
      id v246 = v245;

      id v247 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v247 setEventType:1];
      id v248 = objc_alloc_init(MEMORY[0x263F41958]);
      [v247 setUserActionEvent:v248];

      id v249 = [v247 userActionEvent];
      [v249 setUserActionEventAction:a3];

      id v250 = [v247 userActionEvent];
      [v250 setUserActionEventTarget:a4];

      id v251 = [v247 userActionEvent];
      [v251 setUserActionEventValue:v15];

      id v252 = [v247 userActionEvent];
      [v252 setActionRichProviderId:v286];

      if (v269 | v287)
      {
        id v253 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v254 = [v247 userActionEvent];
        [v254 setModuleInfo:v253];

        if (v269)
        {
          uint64_t v255 = [(id)v269 intValue];
          id v256 = [v247 userActionEvent];
          [v256 moduleInfo];
          v258 = id v257 = v15;
          [v258 setType:v255];

          id v15 = v257;
          id v16 = (id)v269;
        }
        if (v287)
        {
          id v259 = [v247 userActionEvent];
          id v260 = [v259 moduleInfo];
          [v260 setModuleMetadata:v287];
        }
      }
      if (v285) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      id v19 = v268;
      if (v284) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v283) {
        [v247 addLogMsgState:v283];
      }
      if (v282) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v281) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v280) {
        [v247 addLogMsgState:v280];
      }
      if (v279) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v278) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v277) {
        [v247 addLogMsgState:v277];
      }
      if (v276) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v275) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v274) {
        [v247 addLogMsgState:v274];
      }
      if (v273) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v272) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v271) {
        [v247 addLogMsgState:v271];
      }
      if (v270) {
        objc_msgSend(v247, "addLogMsgState:");
      }
      if (v234) {
        [v247 addLogMsgState:v234];
      }
      if (v246) {
        [v247 addLogMsgState:v246];
      }
      id v290 = v15;
      if (v264) {
        [v247 addLogMsgState:v264];
      }
      uint64_t v261 = +[GEOAPStateFactory sharedFactory];
      v291[0] = MEMORY[0x263EF8330];
      v291[1] = 3221225472;
      v291[2] = __203__GEOAPPortal_UserActionCodeGen__capturePredExShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v291[3] = &unk_2653457B8;
      id v262 = v247;
      id v292 = v262;
      id v22 = v265;
      id v294 = v265;
      id v21 = v266;
      id v293 = v266;
      [v261 sessionStateForType:6 callback:v291];

      id v18 = v286;
      id v17 = (id)v287;
      id v20 = v267;
      id v15 = v290;
    }
  }
}

uint64_t __203__GEOAPPortal_UserActionCodeGen__capturePredExShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)capturePredExSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  unint64_t v19 = (unint64_t)a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v153 = "+[GEOAPPortal(UserActionCodeGen) capturePredExSessionlessUserActionTargetPairWithAction:target:value:moduleTy"
           "pe:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v131 = a4;
      uint64_t v132 = v23;
      uint64_t v134 = v22;
      id v140 = v20;
      id v141 = v17;
      unint64_t v135 = (unint64_t)v18;
      id v142 = (id)v19;
      if ([v21 count])
      {
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v27 = v21;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v147 objects:v151 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v148;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v148 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v147 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v147 objects:v151 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        unint64_t v19 = (unint64_t)v142;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 2));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:2];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        uint64_t v45 = (void *)v43;
      }
      else {
        uint64_t v45 = v40;
      }
      id v130 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 30));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:30];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v139 = v56;

      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 0));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:0];
      }
      id v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        uint64_t v67 = (void *)v65;
      }
      else {
        uint64_t v67 = v62;
      }
      id v138 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 3));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:3];
      }
      id v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        uint64_t v78 = (void *)v76;
      }
      else {
        uint64_t v78 = v73;
      }
      id v137 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 42));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:42];
      }
      id v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        uint64_t v89 = (void *)v87;
      }
      else {
        uint64_t v89 = v84;
      }
      id v136 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 70));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:70];
      }
      id v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        uint64_t v100 = (void *)v98;
      }
      else {
        uint64_t v100 = v95;
      }
      id v101 = v100;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 17));

      id v129 = (void *)v104;
      id v105 = [v34 objectForKeyedSubscript:v104];
      id v106 = v105;
      id v133 = v21;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:17];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v34 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v113 = v112;

      id v114 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v114 setEventType:1];
      id v115 = objc_alloc_init(MEMORY[0x263F41958]);
      [v114 setUserActionEvent:v115];

      id v116 = [v114 userActionEvent];
      [v116 setUserActionEventAction:a3];

      id v117 = [v114 userActionEvent];
      [v117 setUserActionEventTarget:v131];

      id v118 = [v114 userActionEvent];
      [v118 setUserActionEventValue:v141];

      unsigned int v119 = [v114 userActionEvent];
      [v119 setActionRichProviderId:v140];

      id v18 = (id)v135;
      if (v135 | v19)
      {
        id v120 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v121 = [v114 userActionEvent];
        [v121 setModuleInfo:v120];

        id v18 = (id)v135;
        if (v135)
        {
          uint64_t v122 = [(id)v135 intValue];
          uint64_t v123 = [v114 userActionEvent];
          id v124 = [v123 moduleInfo];
          [v124 setType:v122];

          unint64_t v19 = (unint64_t)v142;
          id v18 = (id)v135;
        }
        if (v19)
        {
          id v125 = [v114 userActionEvent];
          id v126 = [v125 moduleInfo];
          [v126 setModuleMetadata:v142];
        }
      }
      if (v130) {
        [v114 addLogMsgState:v130];
      }
      if (v139) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v138) {
        [v114 addLogMsgState:v138];
      }
      if (v137) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v136) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v113) {
        [v114 addLogMsgState:v113];
      }
      if (v101) {
        [v114 addLogMsgState:v101];
      }
      id v127 = +[GEOAPStateFactory sharedFactory];
      v143[0] = MEMORY[0x263EF8330];
      v143[1] = 3221225472;
      v143[2] = __209__GEOAPPortal_UserActionCodeGen__capturePredExSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v143[3] = &unk_2653457B8;
      id v144 = v114;
      id v23 = v132;
      id v146 = v132;
      id v22 = v134;
      id v145 = v134;
      id v128 = v114;
      [v127 sessionStateForType:7 callback:v143];

      id v17 = v141;
      unint64_t v19 = (unint64_t)v142;
      id v20 = v140;
      id v21 = v133;
    }
  }
}

uint64_t __209__GEOAPPortal_UserActionCodeGen__capturePredExSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureTransitShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v325 = *MEMORY[0x263EF8340];
  id v313 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v324 = "+[GEOAPPortal(UserActionCodeGen) captureTransitShortUserActionTargetPairWithAction:target:value:moduleType:mo"
           "duleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      unint64_t v287 = v22;
      id v289 = v20;
      id v309 = v18;
      unint64_t v310 = (unint64_t)v17;
      unint64_t v291 = (unint64_t)v16;
      id v290 = v19;
      id v288 = v21;
      if ([v19 count])
      {
        double v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v318 = 0u;
        long long v319 = 0u;
        long long v320 = 0u;
        long long v321 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v318 objects:v322 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v319;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v319 != v29) {
                objc_enumerationMutation(v26);
              }
              uint64_t v31 = *(void **)(*((void *)&v318 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v318 objects:v322 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      unsigned int v286 = a4;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        uint64_t v44 = (void *)v42;
      }
      else {
        uint64_t v44 = v39;
      }
      id v45 = v44;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v33 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v33 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v57 = v56;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 16));

      id v61 = [v33 objectForKeyedSubscript:v60];
      id v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:16];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v33 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v307 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 35));

      id v72 = [v33 objectForKeyedSubscript:v71];
      id v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        id v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:35];
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v33 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v306 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 30));

      id v83 = [v33 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        id v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:30];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v33 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v305 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 0));

      id v94 = [v33 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:0];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v33 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        id v101 = (void *)v99;
      }
      else {
        id v101 = v96;
      }
      id v304 = v101;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 3));

      id v105 = [v33 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:3];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v33 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v303 = v112;

      id v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      id v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 64));

      id v116 = [v33 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        unsigned int v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:64];
      }
      id v120 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v121 = [v33 objectForKeyedSubscript:v120];
      uint64_t v122 = (void *)v121;
      if (v121) {
        uint64_t v123 = (void *)v121;
      }
      else {
        uint64_t v123 = v118;
      }
      id v302 = v123;

      id v124 = NSNumber;
      id v125 = +[GEOAPStateFactory sharedFactory];
      id v126 = objc_msgSend(v124, "numberWithInt:", objc_msgSend(v125, "logMsgStateTypeForType:", 13));

      id v127 = [v33 objectForKeyedSubscript:v126];
      id v128 = v127;
      if (v127)
      {
        id v129 = v127;
      }
      else
      {
        id v130 = +[GEOAPStateFactory sharedFactory];
        id v129 = [v130 stateForType:13];
      }
      unsigned int v131 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v129, "stateType"));
      uint64_t v132 = [v33 objectForKeyedSubscript:v131];
      id v133 = (void *)v132;
      if (v132) {
        uint64_t v134 = (void *)v132;
      }
      else {
        uint64_t v134 = v129;
      }
      id v301 = v134;

      unint64_t v135 = NSNumber;
      id v136 = +[GEOAPStateFactory sharedFactory];
      id v137 = objc_msgSend(v135, "numberWithInt:", objc_msgSend(v136, "logMsgStateTypeForType:", 14));

      id v138 = [v33 objectForKeyedSubscript:v137];
      id v139 = v138;
      if (v138)
      {
        id v140 = v138;
      }
      else
      {
        id v141 = +[GEOAPStateFactory sharedFactory];
        id v140 = [v141 stateForType:14];
      }
      id v142 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v140, "stateType"));
      uint64_t v143 = [v33 objectForKeyedSubscript:v142];
      id v144 = (void *)v143;
      if (v143) {
        id v145 = (void *)v143;
      }
      else {
        id v145 = v140;
      }
      id v300 = v145;

      id v146 = NSNumber;
      long long v147 = +[GEOAPStateFactory sharedFactory];
      long long v148 = objc_msgSend(v146, "numberWithInt:", objc_msgSend(v147, "logMsgStateTypeForType:", 9));

      long long v149 = [v33 objectForKeyedSubscript:v148];
      long long v150 = v149;
      if (v149)
      {
        id v151 = v149;
      }
      else
      {
        id v152 = +[GEOAPStateFactory sharedFactory];
        id v151 = [v152 stateForType:9];
      }
      uint64_t v153 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v151, "stateType"));
      uint64_t v154 = [v33 objectForKeyedSubscript:v153];
      id v155 = (void *)v154;
      if (v154) {
        unsigned int v156 = (void *)v154;
      }
      else {
        unsigned int v156 = v151;
      }
      id v299 = v156;

      id v157 = NSNumber;
      id v158 = +[GEOAPStateFactory sharedFactory];
      id v159 = objc_msgSend(v157, "numberWithInt:", objc_msgSend(v158, "logMsgStateTypeForType:", 10));

      id v160 = [v33 objectForKeyedSubscript:v159];
      id v161 = v160;
      if (v160)
      {
        id v162 = v160;
      }
      else
      {
        id v163 = +[GEOAPStateFactory sharedFactory];
        id v162 = [v163 stateForType:10];
      }
      uint64_t v164 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v162, "stateType"));
      uint64_t v165 = [v33 objectForKeyedSubscript:v164];
      long long v166 = (void *)v165;
      if (v165) {
        uint64_t v167 = (void *)v165;
      }
      else {
        uint64_t v167 = v162;
      }
      id v298 = v167;

      id v168 = NSNumber;
      id v169 = +[GEOAPStateFactory sharedFactory];
      id v170 = objc_msgSend(v168, "numberWithInt:", objc_msgSend(v169, "logMsgStateTypeForType:", 20));

      id v171 = [v33 objectForKeyedSubscript:v170];
      id v172 = v171;
      if (v171)
      {
        id v173 = v171;
      }
      else
      {
        long long v174 = +[GEOAPStateFactory sharedFactory];
        id v173 = [v174 stateForType:20];
      }
      uint64_t v175 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v173, "stateType"));
      uint64_t v176 = [v33 objectForKeyedSubscript:v175];
      id v177 = (void *)v176;
      if (v176) {
        id v178 = (void *)v176;
      }
      else {
        id v178 = v173;
      }
      id v297 = v178;

      uint64_t v179 = NSNumber;
      long long v180 = +[GEOAPStateFactory sharedFactory];
      id v181 = objc_msgSend(v179, "numberWithInt:", objc_msgSend(v180, "logMsgStateTypeForType:", 42));

      id v182 = [v33 objectForKeyedSubscript:v181];
      id v183 = v182;
      if (v182)
      {
        id v184 = v182;
      }
      else
      {
        uint64_t v185 = +[GEOAPStateFactory sharedFactory];
        id v184 = [v185 stateForType:42];
      }
      uint64_t v186 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v184, "stateType"));
      uint64_t v187 = [v33 objectForKeyedSubscript:v186];
      id v188 = (void *)v187;
      if (v187) {
        id v189 = (void *)v187;
      }
      else {
        id v189 = v184;
      }
      id v296 = v189;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v33 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      uint64_t v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v33 objectForKeyedSubscript:v197];
      id v199 = (void *)v198;
      if (v198) {
        long long v200 = (void *)v198;
      }
      else {
        long long v200 = v195;
      }
      id v285 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 7));

      id v204 = [v33 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:7];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v33 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v295 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 17));

      id v215 = [v33 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        uint64_t v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:17];
      }
      uint64_t v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v33 objectForKeyedSubscript:v219];
      id v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v294 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      int v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 19));

      uint64_t v226 = [v33 objectForKeyedSubscript:v225];
      int v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        id v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:19];
      }
      uint64_t v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v33 objectForKeyedSubscript:v230];
      uint64_t v232 = (void *)v231;
      if (v231) {
        uint64_t v233 = (void *)v231;
      }
      else {
        uint64_t v233 = v228;
      }
      id v293 = v233;

      id v234 = NSNumber;
      id v235 = +[GEOAPStateFactory sharedFactory];
      id v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 27));

      uint64_t v237 = [v33 objectForKeyedSubscript:v236];
      id v238 = v237;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        id v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:27];
      }
      uint64_t v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v33 objectForKeyedSubscript:v241];
      uint64_t v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v292 = v244;

      id v245 = NSNumber;
      id v246 = +[GEOAPStateFactory sharedFactory];
      id v247 = objc_msgSend(v245, "numberWithInt:", objc_msgSend(v246, "logMsgStateTypeForType:", 24));

      id v248 = [v33 objectForKeyedSubscript:v247];
      id v249 = v248;
      id v308 = v57;
      if (v248)
      {
        id v250 = v248;
      }
      else
      {
        id v251 = +[GEOAPStateFactory sharedFactory];
        id v250 = [v251 stateForType:24];
      }
      id v252 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v250, "stateType"));
      uint64_t v253 = [v33 objectForKeyedSubscript:v252];
      uint64_t v254 = (void *)v253;
      if (v253) {
        uint64_t v255 = (void *)v253;
      }
      else {
        uint64_t v255 = v250;
      }
      id v256 = v255;

      id v257 = NSNumber;
      unint64_t v258 = +[GEOAPStateFactory sharedFactory];
      uint64_t v259 = objc_msgSend(v257, "numberWithInt:", objc_msgSend(v258, "logMsgStateTypeForType:", 53));

      id v284 = (void *)v259;
      id v260 = [v33 objectForKeyedSubscript:v259];
      uint64_t v261 = v260;
      if (v260)
      {
        id v262 = v260;
      }
      else
      {
        id v263 = +[GEOAPStateFactory sharedFactory];
        id v262 = [v263 stateForType:53];
      }
      id v16 = (id)v291;

      id v264 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v262, "stateType"));
      uint64_t v265 = [v33 objectForKeyedSubscript:v264];
      uint64_t v266 = (void *)v265;
      if (v265) {
        id v267 = (void *)v265;
      }
      else {
        id v267 = v262;
      }
      id v268 = v267;

      id v269 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v269 setEventType:1];
      id v270 = objc_alloc_init(MEMORY[0x263F41958]);
      [v269 setUserActionEvent:v270];

      id v271 = [v269 userActionEvent];
      [v271 setUserActionEventAction:a3];

      id v272 = [v269 userActionEvent];
      [v272 setUserActionEventTarget:v286];

      uint64_t v273 = [v269 userActionEvent];
      [v273 setUserActionEventValue:v313];

      id v274 = [v269 userActionEvent];
      [v274 setActionRichProviderId:v309];

      id v17 = (id)v310;
      id v312 = v45;
      if (v291 | v310)
      {
        id v275 = objc_alloc_init(MEMORY[0x263F41960]);
        id v276 = [v269 userActionEvent];
        [v276 setModuleInfo:v275];

        if (v291)
        {
          uint64_t v277 = [(id)v291 intValue];
          id v278 = [v269 userActionEvent];
          id v279 = [v278 moduleInfo];
          [v279 setType:v277];

          id v45 = v312;
          id v16 = (id)v291;
        }
        id v17 = (id)v310;
        if (v310)
        {
          id v280 = [v269 userActionEvent];
          id v281 = [v280 moduleInfo];
          [v281 setModuleMetadata:v310];

          id v17 = (id)v310;
        }
      }
      if (v45) {
        [v269 addLogMsgState:v45];
      }
      if (v308) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v307) {
        [v269 addLogMsgState:v307];
      }
      if (v306) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v305) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v304) {
        [v269 addLogMsgState:v304];
      }
      if (v303) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v302) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v301) {
        [v269 addLogMsgState:v301];
      }
      if (v300) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v299) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v298) {
        [v269 addLogMsgState:v298];
      }
      if (v297) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v296) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v295) {
        [v269 addLogMsgState:v295];
      }
      if (v294) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v293) {
        objc_msgSend(v269, "addLogMsgState:");
      }
      if (v292) {
        [v269 addLogMsgState:v292];
      }
      if (v256) {
        [v269 addLogMsgState:v256];
      }
      if (v268) {
        [v269 addLogMsgState:v268];
      }
      if (v285) {
        [v269 addLogMsgState:v285];
      }
      id v282 = +[GEOAPStateFactory sharedFactory];
      v314[0] = MEMORY[0x263EF8330];
      v314[1] = 3221225472;
      v314[2] = __204__GEOAPPortal_UserActionCodeGen__captureTransitShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v314[3] = &unk_2653457B8;
      id v283 = v269;
      id v315 = v283;
      id v22 = v287;
      id v317 = v287;
      id v316 = v288;
      [v282 sessionStateForType:6 callback:v314];

      id v21 = v288;
      id v18 = v309;
      id v20 = v289;
      id v19 = v290;
    }
  }
}

uint64_t __204__GEOAPPortal_UserActionCodeGen__captureTransitShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureRapSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v179 = *MEMORY[0x263EF8340];
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v178 = "+[GEOAPPortal(UserActionCodeGen) captureRapSessionlessUserActionTargetPairWithAction:target:value:moduleType:"
           "moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v164 = v19;
      id v165 = v16;
      *(void *)&long long v166 = v17;
      *((void *)&v166 + 1) = v18;
      unsigned int v156 = a4;
      id v157 = v20;
      if ([v20 count])
      {
        id v25 = v22;
        id v26 = v21;
        uint64_t v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v172 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        id v28 = v20;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v173;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v173 != v31) {
                objc_enumerationMutation(v28);
              }
              long long v33 = *(void **)(*((void *)&v172 + 1) + 8 * i);
              long long v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
          }
          while (v30);
        }

        unint64_t v35 = (void *)[v27 copy];
        id v21 = v26;
        id v22 = v25;
      }
      else
      {
        unint64_t v35 = 0;
      }
      long long v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      int v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 2));

      id v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v41 = v39;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v41 = [v42 stateForType:2];
      }
      uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
      uint64_t v44 = [v35 objectForKeyedSubscript:v43];
      id v45 = (void *)v44;
      if (v44) {
        id v46 = (void *)v44;
      }
      else {
        id v46 = v41;
      }
      id v158 = v46;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 6));

      id v50 = [v35 objectForKeyedSubscript:v49];
      id v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:6];
      }
      uint64_t v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v35 objectForKeyedSubscript:v54];
      id v56 = (void *)v55;
      if (v55) {
        id v57 = (void *)v55;
      }
      else {
        id v57 = v52;
      }
      id v163 = v57;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 30));

      id v61 = [v35 objectForKeyedSubscript:v60];
      id v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:30];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v35 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v162 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 0));

      id v72 = [v35 objectForKeyedSubscript:v71];
      id v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        id v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:0];
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v35 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v161 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 3));

      id v83 = [v35 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        id v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:3];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v35 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v160 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 42));

      id v94 = [v35 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:42];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v35 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        id v101 = (void *)v99;
      }
      else {
        id v101 = v96;
      }
      id v159 = v101;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 70));

      id v105 = [v35 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:70];
      }
      id v155 = v21;

      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v35 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v154 = v112;

      id v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      id v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 67));

      id v116 = [v35 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        unsigned int v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:67];
      }
      id v120 = v158;

      uint64_t v121 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v122 = [v35 objectForKeyedSubscript:v121];
      uint64_t v123 = (void *)v122;
      if (v122) {
        id v124 = (void *)v122;
      }
      else {
        id v124 = v118;
      }
      id v125 = v124;

      id v126 = NSNumber;
      id v127 = +[GEOAPStateFactory sharedFactory];
      uint64_t v128 = objc_msgSend(v126, "numberWithInt:", objc_msgSend(v127, "logMsgStateTypeForType:", 51));

      uint64_t v153 = (void *)v128;
      id v129 = [v35 objectForKeyedSubscript:v128];
      id v130 = v129;
      if (v129)
      {
        id v131 = v129;
      }
      else
      {
        uint64_t v132 = +[GEOAPStateFactory sharedFactory];
        id v131 = [v132 stateForType:51];
      }
      id v133 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v131, "stateType"));
      uint64_t v134 = [v35 objectForKeyedSubscript:v133];
      unint64_t v135 = (void *)v134;
      if (v134) {
        id v136 = (void *)v134;
      }
      else {
        id v136 = v131;
      }
      id v137 = v136;

      id v138 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v138 setEventType:1];
      id v139 = objc_alloc_init(MEMORY[0x263F41958]);
      [v138 setUserActionEvent:v139];

      id v140 = [v138 userActionEvent];
      [v140 setUserActionEventAction:a3];

      id v141 = [v138 userActionEvent];
      [v141 setUserActionEventTarget:v156];

      id v142 = [v138 userActionEvent];
      [v142 setUserActionEventValue:v165];

      uint64_t v143 = [v138 userActionEvent];
      [v143 setActionRichProviderId:v164];

      if (v166 != 0)
      {
        id v144 = objc_alloc_init(MEMORY[0x263F41960]);
        id v145 = [v138 userActionEvent];
        [v145 setModuleInfo:v144];

        if ((void)v166)
        {
          uint64_t v146 = [(id)v166 intValue];
          long long v147 = [v138 userActionEvent];
          long long v148 = [v147 moduleInfo];
          [v148 setType:v146];

          id v21 = v155;
          id v120 = v158;
        }
        if (*((void *)&v166 + 1))
        {
          long long v149 = [v138 userActionEvent];
          long long v150 = [v149 moduleInfo];
          [v150 setModuleMetadata:*((void *)&v166 + 1)];
        }
      }
      if (v120) {
        [v138 addLogMsgState:v120];
      }
      if (v162) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v161) {
        [v138 addLogMsgState:v161];
      }
      if (v160) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v159) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v163) {
        [v138 addLogMsgState:v163];
      }
      if (v137) {
        [v138 addLogMsgState:v137];
      }
      if (v125) {
        [v138 addLogMsgState:v125];
      }
      if (v154) {
        [v138 addLogMsgState:v154];
      }
      id v151 = +[GEOAPStateFactory sharedFactory];
      v168[0] = MEMORY[0x263EF8330];
      v168[1] = 3221225472;
      v168[2] = __206__GEOAPPortal_UserActionCodeGen__captureRapSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v168[3] = &unk_2653457B8;
      id v169 = v138;
      id v171 = v22;
      id v170 = v21;
      id v152 = v138;
      [v151 sessionStateForType:7 callback:v168];

      id v16 = v165;
      id v18 = (id)*((void *)&v166 + 1);
      id v17 = (id)v166;
      id v19 = v164;
      id v20 = v157;
    }
  }
}

uint64_t __206__GEOAPPortal_UserActionCodeGen__captureRapSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureAccountSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  unint64_t v19 = (unint64_t)a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v153 = "+[GEOAPPortal(UserActionCodeGen) captureAccountSessionlessUserActionTargetPairWithAction:target:value:moduleT"
           "ype:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v131 = a4;
      uint64_t v132 = v23;
      uint64_t v134 = v22;
      id v140 = v20;
      id v141 = v17;
      unint64_t v135 = (unint64_t)v18;
      id v142 = (id)v19;
      if ([v21 count])
      {
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v27 = v21;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v147 objects:v151 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v148;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v148 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v147 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v147 objects:v151 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        unint64_t v19 = (unint64_t)v142;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 50));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:50];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        id v45 = (void *)v43;
      }
      else {
        id v45 = v40;
      }
      id v130 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 2));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:2];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v139 = v56;

      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 30));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:30];
      }
      id v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        uint64_t v67 = (void *)v65;
      }
      else {
        uint64_t v67 = v62;
      }
      id v138 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 0));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:0];
      }
      id v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        uint64_t v78 = (void *)v76;
      }
      else {
        uint64_t v78 = v73;
      }
      id v137 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 3));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:3];
      }
      id v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        uint64_t v89 = (void *)v87;
      }
      else {
        uint64_t v89 = v84;
      }
      id v136 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 42));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:42];
      }
      id v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        uint64_t v100 = (void *)v98;
      }
      else {
        uint64_t v100 = v95;
      }
      id v101 = v100;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 70));

      id v129 = (void *)v104;
      id v105 = [v34 objectForKeyedSubscript:v104];
      id v106 = v105;
      id v133 = v21;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:70];
      }
      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v34 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v113 = v112;

      id v114 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v114 setEventType:1];
      id v115 = objc_alloc_init(MEMORY[0x263F41958]);
      [v114 setUserActionEvent:v115];

      id v116 = [v114 userActionEvent];
      [v116 setUserActionEventAction:a3];

      id v117 = [v114 userActionEvent];
      [v117 setUserActionEventTarget:v131];

      id v118 = [v114 userActionEvent];
      [v118 setUserActionEventValue:v141];

      unsigned int v119 = [v114 userActionEvent];
      [v119 setActionRichProviderId:v140];

      id v18 = (id)v135;
      if (v135 | v19)
      {
        id v120 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v121 = [v114 userActionEvent];
        [v121 setModuleInfo:v120];

        id v18 = (id)v135;
        if (v135)
        {
          uint64_t v122 = [(id)v135 intValue];
          uint64_t v123 = [v114 userActionEvent];
          id v124 = [v123 moduleInfo];
          [v124 setType:v122];

          unint64_t v19 = (unint64_t)v142;
          id v18 = (id)v135;
        }
        if (v19)
        {
          id v125 = [v114 userActionEvent];
          id v126 = [v125 moduleInfo];
          [v126 setModuleMetadata:v142];
        }
      }
      if (v130) {
        [v114 addLogMsgState:v130];
      }
      if (v139) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v138) {
        [v114 addLogMsgState:v138];
      }
      if (v137) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v136) {
        objc_msgSend(v114, "addLogMsgState:");
      }
      if (v101) {
        [v114 addLogMsgState:v101];
      }
      if (v113) {
        [v114 addLogMsgState:v113];
      }
      id v127 = +[GEOAPStateFactory sharedFactory];
      v143[0] = MEMORY[0x263EF8330];
      v143[1] = 3221225472;
      v143[2] = __210__GEOAPPortal_UserActionCodeGen__captureAccountSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v143[3] = &unk_2653457B8;
      id v144 = v114;
      id v23 = v132;
      id v146 = v132;
      id v22 = v134;
      id v145 = v134;
      id v128 = v114;
      [v127 sessionStateForType:7 callback:v143];

      id v17 = v141;
      unint64_t v19 = (unint64_t)v142;
      id v20 = v140;
      id v21 = v133;
    }
  }
}

uint64_t __210__GEOAPPortal_UserActionCodeGen__captureAccountSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureOfflineSessionlessUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v179 = *MEMORY[0x263EF8340];
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v178 = "+[GEOAPPortal(UserActionCodeGen) captureOfflineSessionlessUserActionTargetPairWithAction:target:value:moduleT"
           "ype:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v164 = v19;
      id v165 = v16;
      *(void *)&long long v166 = v17;
      *((void *)&v166 + 1) = v18;
      unsigned int v156 = a4;
      id v157 = v20;
      if ([v20 count])
      {
        id v25 = v22;
        id v26 = v21;
        id v27 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v20, "count"));
        long long v172 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        id v28 = v20;
        uint64_t v29 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v173;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v173 != v31) {
                objc_enumerationMutation(v28);
              }
              long long v33 = *(void **)(*((void *)&v172 + 1) + 8 * i);
              long long v34 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v33, "stateType"));
              [v27 setObject:v33 forKeyedSubscript:v34];
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v172 objects:v176 count:16];
          }
          while (v30);
        }

        unint64_t v35 = (void *)[v27 copy];
        id v21 = v26;
        id v22 = v25;
      }
      else
      {
        unint64_t v35 = 0;
      }
      long long v36 = NSNumber;
      id v37 = +[GEOAPStateFactory sharedFactory];
      int v38 = objc_msgSend(v36, "numberWithInt:", objc_msgSend(v37, "logMsgStateTypeForType:", 2));

      id v39 = [v35 objectForKeyedSubscript:v38];
      id v40 = v39;
      if (v39)
      {
        id v41 = v39;
      }
      else
      {
        uint64_t v42 = +[GEOAPStateFactory sharedFactory];
        id v41 = [v42 stateForType:2];
      }
      uint64_t v43 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v41, "stateType"));
      uint64_t v44 = [v35 objectForKeyedSubscript:v43];
      id v45 = (void *)v44;
      if (v44) {
        id v46 = (void *)v44;
      }
      else {
        id v46 = v41;
      }
      id v158 = v46;

      uint64_t v47 = NSNumber;
      uint64_t v48 = +[GEOAPStateFactory sharedFactory];
      long long v49 = objc_msgSend(v47, "numberWithInt:", objc_msgSend(v48, "logMsgStateTypeForType:", 6));

      id v50 = [v35 objectForKeyedSubscript:v49];
      id v51 = v50;
      if (v50)
      {
        id v52 = v50;
      }
      else
      {
        uint64_t v53 = +[GEOAPStateFactory sharedFactory];
        id v52 = [v53 stateForType:6];
      }
      uint64_t v54 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v52, "stateType"));
      uint64_t v55 = [v35 objectForKeyedSubscript:v54];
      id v56 = (void *)v55;
      if (v55) {
        id v57 = (void *)v55;
      }
      else {
        id v57 = v52;
      }
      id v163 = v57;

      id v58 = NSNumber;
      id v59 = +[GEOAPStateFactory sharedFactory];
      unint64_t v60 = objc_msgSend(v58, "numberWithInt:", objc_msgSend(v59, "logMsgStateTypeForType:", 30));

      id v61 = [v35 objectForKeyedSubscript:v60];
      id v62 = v61;
      if (v61)
      {
        id v63 = v61;
      }
      else
      {
        id v64 = +[GEOAPStateFactory sharedFactory];
        id v63 = [v64 stateForType:30];
      }
      uint64_t v65 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v63, "stateType"));
      uint64_t v66 = [v35 objectForKeyedSubscript:v65];
      uint64_t v67 = (void *)v66;
      if (v66) {
        id v68 = (void *)v66;
      }
      else {
        id v68 = v63;
      }
      id v162 = v68;

      unint64_t v69 = NSNumber;
      id v70 = +[GEOAPStateFactory sharedFactory];
      uint64_t v71 = objc_msgSend(v69, "numberWithInt:", objc_msgSend(v70, "logMsgStateTypeForType:", 0));

      id v72 = [v35 objectForKeyedSubscript:v71];
      id v73 = v72;
      if (v72)
      {
        id v74 = v72;
      }
      else
      {
        id v75 = +[GEOAPStateFactory sharedFactory];
        id v74 = [v75 stateForType:0];
      }
      uint64_t v76 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v74, "stateType"));
      uint64_t v77 = [v35 objectForKeyedSubscript:v76];
      uint64_t v78 = (void *)v77;
      if (v77) {
        id v79 = (void *)v77;
      }
      else {
        id v79 = v74;
      }
      id v161 = v79;

      id v80 = NSNumber;
      id v81 = +[GEOAPStateFactory sharedFactory];
      id v82 = objc_msgSend(v80, "numberWithInt:", objc_msgSend(v81, "logMsgStateTypeForType:", 3));

      id v83 = [v35 objectForKeyedSubscript:v82];
      id v84 = v83;
      if (v83)
      {
        id v85 = v83;
      }
      else
      {
        id v86 = +[GEOAPStateFactory sharedFactory];
        id v85 = [v86 stateForType:3];
      }
      uint64_t v87 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v85, "stateType"));
      uint64_t v88 = [v35 objectForKeyedSubscript:v87];
      uint64_t v89 = (void *)v88;
      if (v88) {
        id v90 = (void *)v88;
      }
      else {
        id v90 = v85;
      }
      id v160 = v90;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 42));

      id v94 = [v35 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        id v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:42];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v35 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        id v101 = (void *)v99;
      }
      else {
        id v101 = v96;
      }
      id v159 = v101;

      id v102 = NSNumber;
      id v103 = +[GEOAPStateFactory sharedFactory];
      uint64_t v104 = objc_msgSend(v102, "numberWithInt:", objc_msgSend(v103, "logMsgStateTypeForType:", 70));

      id v105 = [v35 objectForKeyedSubscript:v104];
      id v106 = v105;
      if (v105)
      {
        id v107 = v105;
      }
      else
      {
        id v108 = +[GEOAPStateFactory sharedFactory];
        id v107 = [v108 stateForType:70];
      }
      id v155 = v21;

      uint64_t v109 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v107, "stateType"));
      uint64_t v110 = [v35 objectForKeyedSubscript:v109];
      uint64_t v111 = (void *)v110;
      if (v110) {
        id v112 = (void *)v110;
      }
      else {
        id v112 = v107;
      }
      id v154 = v112;

      id v113 = NSNumber;
      id v114 = +[GEOAPStateFactory sharedFactory];
      id v115 = objc_msgSend(v113, "numberWithInt:", objc_msgSend(v114, "logMsgStateTypeForType:", 69));

      id v116 = [v35 objectForKeyedSubscript:v115];
      id v117 = v116;
      if (v116)
      {
        id v118 = v116;
      }
      else
      {
        unsigned int v119 = +[GEOAPStateFactory sharedFactory];
        id v118 = [v119 stateForType:69];
      }
      id v120 = v158;

      uint64_t v121 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v118, "stateType"));
      uint64_t v122 = [v35 objectForKeyedSubscript:v121];
      uint64_t v123 = (void *)v122;
      if (v122) {
        id v124 = (void *)v122;
      }
      else {
        id v124 = v118;
      }
      id v125 = v124;

      id v126 = NSNumber;
      id v127 = +[GEOAPStateFactory sharedFactory];
      uint64_t v128 = objc_msgSend(v126, "numberWithInt:", objc_msgSend(v127, "logMsgStateTypeForType:", 17));

      uint64_t v153 = (void *)v128;
      id v129 = [v35 objectForKeyedSubscript:v128];
      id v130 = v129;
      if (v129)
      {
        id v131 = v129;
      }
      else
      {
        uint64_t v132 = +[GEOAPStateFactory sharedFactory];
        id v131 = [v132 stateForType:17];
      }
      id v133 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v131, "stateType"));
      uint64_t v134 = [v35 objectForKeyedSubscript:v133];
      unint64_t v135 = (void *)v134;
      if (v134) {
        id v136 = (void *)v134;
      }
      else {
        id v136 = v131;
      }
      id v137 = v136;

      id v138 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v138 setEventType:1];
      id v139 = objc_alloc_init(MEMORY[0x263F41958]);
      [v138 setUserActionEvent:v139];

      id v140 = [v138 userActionEvent];
      [v140 setUserActionEventAction:a3];

      id v141 = [v138 userActionEvent];
      [v141 setUserActionEventTarget:v156];

      id v142 = [v138 userActionEvent];
      [v142 setUserActionEventValue:v165];

      uint64_t v143 = [v138 userActionEvent];
      [v143 setActionRichProviderId:v164];

      if (v166 != 0)
      {
        id v144 = objc_alloc_init(MEMORY[0x263F41960]);
        id v145 = [v138 userActionEvent];
        [v145 setModuleInfo:v144];

        if ((void)v166)
        {
          uint64_t v146 = [(id)v166 intValue];
          long long v147 = [v138 userActionEvent];
          long long v148 = [v147 moduleInfo];
          [v148 setType:v146];

          id v21 = v155;
          id v120 = v158;
        }
        if (*((void *)&v166 + 1))
        {
          long long v149 = [v138 userActionEvent];
          long long v150 = [v149 moduleInfo];
          [v150 setModuleMetadata:*((void *)&v166 + 1)];
        }
      }
      if (v120) {
        [v138 addLogMsgState:v120];
      }
      if (v162) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v161) {
        [v138 addLogMsgState:v161];
      }
      if (v160) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v159) {
        objc_msgSend(v138, "addLogMsgState:");
      }
      if (v137) {
        [v138 addLogMsgState:v137];
      }
      if (v163) {
        [v138 addLogMsgState:v163];
      }
      if (v125) {
        [v138 addLogMsgState:v125];
      }
      if (v154) {
        [v138 addLogMsgState:v154];
      }
      id v151 = +[GEOAPStateFactory sharedFactory];
      v168[0] = MEMORY[0x263EF8330];
      v168[1] = 3221225472;
      v168[2] = __210__GEOAPPortal_UserActionCodeGen__captureOfflineSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v168[3] = &unk_2653457B8;
      id v169 = v138;
      id v171 = v22;
      id v170 = v21;
      id v152 = v138;
      [v151 sessionStateForType:8 callback:v168];

      id v16 = v165;
      id v18 = (id)*((void *)&v166 + 1);
      id v17 = (id)v166;
      id v19 = v164;
      id v20 = v157;
    }
  }
}

uint64_t __210__GEOAPPortal_UserActionCodeGen__captureOfflineSessionlessUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureNearbyTransitShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v274 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v273 = "+[GEOAPPortal(UserActionCodeGen) captureNearbyTransitShortUserActionTargetPairWithAction:target:value:moduleT"
           "ype:moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v243 = v20;
      *(void *)&long long v260 = v16;
      *((void *)&v260 + 1) = v17;
      id v259 = v15;
      uint64_t v241 = v21;
      id v258 = v18;
      if (objc_msgSend(v19, "count", v22))
      {
        id v25 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v267 = 0u;
        long long v268 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        id v26 = v19;
        uint64_t v27 = [v26 countByEnumeratingWithState:&v267 objects:v271 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v268;
          do
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              if (*(void *)v268 != v29) {
                objc_enumerationMutation(v26);
              }
              uint64_t v31 = *(void **)(*((void *)&v267 + 1) + 8 * i);
              id v32 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v31, "stateType"));
              [v25 setObject:v31 forKeyedSubscript:v32];
            }
            uint64_t v28 = [v26 countByEnumeratingWithState:&v267 objects:v271 count:16];
          }
          while (v28);
        }

        long long v33 = (void *)[v25 copy];
      }
      else
      {
        long long v33 = 0;
      }
      long long v34 = NSNumber;
      unint64_t v35 = +[GEOAPStateFactory sharedFactory];
      long long v36 = objc_msgSend(v34, "numberWithInt:", objc_msgSend(v35, "logMsgStateTypeForType:", 65));

      id v37 = [v33 objectForKeyedSubscript:v36];
      int v38 = v37;
      if (v37)
      {
        id v39 = v37;
      }
      else
      {
        id v40 = +[GEOAPStateFactory sharedFactory];
        id v39 = [v40 stateForType:65];
      }
      id v41 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v39, "stateType"));
      uint64_t v42 = [v33 objectForKeyedSubscript:v41];
      uint64_t v43 = (void *)v42;
      if (v42) {
        uint64_t v44 = (void *)v42;
      }
      else {
        uint64_t v44 = v39;
      }
      id v257 = v44;

      id v45 = NSNumber;
      id v46 = +[GEOAPStateFactory sharedFactory];
      uint64_t v47 = objc_msgSend(v45, "numberWithInt:", objc_msgSend(v46, "logMsgStateTypeForType:", 5));

      uint64_t v48 = [v33 objectForKeyedSubscript:v47];
      long long v49 = v48;
      if (v48)
      {
        id v50 = v48;
      }
      else
      {
        id v51 = +[GEOAPStateFactory sharedFactory];
        id v50 = [v51 stateForType:5];
      }
      id v52 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v50, "stateType"));
      uint64_t v53 = [v33 objectForKeyedSubscript:v52];
      uint64_t v54 = (void *)v53;
      if (v53) {
        uint64_t v55 = (void *)v53;
      }
      else {
        uint64_t v55 = v50;
      }
      id v256 = v55;

      id v56 = NSNumber;
      id v57 = +[GEOAPStateFactory sharedFactory];
      id v58 = objc_msgSend(v56, "numberWithInt:", objc_msgSend(v57, "logMsgStateTypeForType:", 16));

      id v59 = [v33 objectForKeyedSubscript:v58];
      unint64_t v60 = v59;
      if (v59)
      {
        id v61 = v59;
      }
      else
      {
        id v62 = +[GEOAPStateFactory sharedFactory];
        id v61 = [v62 stateForType:16];
      }
      id v63 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v61, "stateType"));
      uint64_t v64 = [v33 objectForKeyedSubscript:v63];
      uint64_t v65 = (void *)v64;
      if (v64) {
        uint64_t v66 = (void *)v64;
      }
      else {
        uint64_t v66 = v61;
      }
      id v255 = v66;

      uint64_t v67 = NSNumber;
      id v68 = +[GEOAPStateFactory sharedFactory];
      unint64_t v69 = objc_msgSend(v67, "numberWithInt:", objc_msgSend(v68, "logMsgStateTypeForType:", 35));

      id v70 = [v33 objectForKeyedSubscript:v69];
      uint64_t v71 = v70;
      if (v70)
      {
        id v72 = v70;
      }
      else
      {
        id v73 = +[GEOAPStateFactory sharedFactory];
        id v72 = [v73 stateForType:35];
      }
      id v74 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v72, "stateType"));
      uint64_t v75 = [v33 objectForKeyedSubscript:v74];
      uint64_t v76 = (void *)v75;
      if (v75) {
        uint64_t v77 = (void *)v75;
      }
      else {
        uint64_t v77 = v72;
      }
      id v254 = v77;

      uint64_t v78 = NSNumber;
      id v79 = +[GEOAPStateFactory sharedFactory];
      id v80 = objc_msgSend(v78, "numberWithInt:", objc_msgSend(v79, "logMsgStateTypeForType:", 30));

      id v81 = [v33 objectForKeyedSubscript:v80];
      id v82 = v81;
      if (v81)
      {
        id v83 = v81;
      }
      else
      {
        id v84 = +[GEOAPStateFactory sharedFactory];
        id v83 = [v84 stateForType:30];
      }
      id v85 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v83, "stateType"));
      uint64_t v86 = [v33 objectForKeyedSubscript:v85];
      uint64_t v87 = (void *)v86;
      if (v86) {
        uint64_t v88 = (void *)v86;
      }
      else {
        uint64_t v88 = v83;
      }
      id v253 = v88;

      uint64_t v89 = NSNumber;
      id v90 = +[GEOAPStateFactory sharedFactory];
      long long v91 = objc_msgSend(v89, "numberWithInt:", objc_msgSend(v90, "logMsgStateTypeForType:", 0));

      long long v92 = [v33 objectForKeyedSubscript:v91];
      long long v93 = v92;
      if (v92)
      {
        id v94 = v92;
      }
      else
      {
        id v95 = +[GEOAPStateFactory sharedFactory];
        id v94 = [v95 stateForType:0];
      }
      id v96 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v94, "stateType"));
      uint64_t v97 = [v33 objectForKeyedSubscript:v96];
      uint64_t v98 = (void *)v97;
      if (v97) {
        uint64_t v99 = (void *)v97;
      }
      else {
        uint64_t v99 = v94;
      }
      id v252 = v99;

      uint64_t v100 = NSNumber;
      id v101 = +[GEOAPStateFactory sharedFactory];
      id v102 = objc_msgSend(v100, "numberWithInt:", objc_msgSend(v101, "logMsgStateTypeForType:", 3));

      id v103 = [v33 objectForKeyedSubscript:v102];
      uint64_t v104 = v103;
      if (v103)
      {
        id v105 = v103;
      }
      else
      {
        id v106 = +[GEOAPStateFactory sharedFactory];
        id v105 = [v106 stateForType:3];
      }
      id v107 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v105, "stateType"));
      uint64_t v108 = [v33 objectForKeyedSubscript:v107];
      uint64_t v109 = (void *)v108;
      if (v108) {
        uint64_t v110 = (void *)v108;
      }
      else {
        uint64_t v110 = v105;
      }
      id v251 = v110;

      uint64_t v111 = NSNumber;
      id v112 = +[GEOAPStateFactory sharedFactory];
      id v113 = objc_msgSend(v111, "numberWithInt:", objc_msgSend(v112, "logMsgStateTypeForType:", 64));

      id v114 = [v33 objectForKeyedSubscript:v113];
      id v115 = v114;
      if (v114)
      {
        id v116 = v114;
      }
      else
      {
        id v117 = +[GEOAPStateFactory sharedFactory];
        id v116 = [v117 stateForType:64];
      }
      id v118 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v116, "stateType"));
      uint64_t v119 = [v33 objectForKeyedSubscript:v118];
      id v120 = (void *)v119;
      if (v119) {
        uint64_t v121 = (void *)v119;
      }
      else {
        uint64_t v121 = v116;
      }
      id v250 = v121;

      uint64_t v122 = NSNumber;
      uint64_t v123 = +[GEOAPStateFactory sharedFactory];
      id v124 = objc_msgSend(v122, "numberWithInt:", objc_msgSend(v123, "logMsgStateTypeForType:", 13));

      id v125 = [v33 objectForKeyedSubscript:v124];
      id v126 = v125;
      if (v125)
      {
        id v127 = v125;
      }
      else
      {
        uint64_t v128 = +[GEOAPStateFactory sharedFactory];
        id v127 = [v128 stateForType:13];
      }
      id v129 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v127, "stateType"));
      uint64_t v130 = [v33 objectForKeyedSubscript:v129];
      id v131 = (void *)v130;
      if (v130) {
        uint64_t v132 = (void *)v130;
      }
      else {
        uint64_t v132 = v127;
      }
      id v249 = v132;

      id v133 = NSNumber;
      uint64_t v134 = +[GEOAPStateFactory sharedFactory];
      unint64_t v135 = objc_msgSend(v133, "numberWithInt:", objc_msgSend(v134, "logMsgStateTypeForType:", 14));

      id v136 = [v33 objectForKeyedSubscript:v135];
      id v137 = v136;
      if (v136)
      {
        id v138 = v136;
      }
      else
      {
        id v139 = +[GEOAPStateFactory sharedFactory];
        id v138 = [v139 stateForType:14];
      }
      id v140 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v138, "stateType"));
      uint64_t v141 = [v33 objectForKeyedSubscript:v140];
      id v142 = (void *)v141;
      if (v141) {
        uint64_t v143 = (void *)v141;
      }
      else {
        uint64_t v143 = v138;
      }
      id v248 = v143;

      id v144 = NSNumber;
      id v145 = +[GEOAPStateFactory sharedFactory];
      uint64_t v146 = objc_msgSend(v144, "numberWithInt:", objc_msgSend(v145, "logMsgStateTypeForType:", 9));

      long long v147 = [v33 objectForKeyedSubscript:v146];
      long long v148 = v147;
      if (v147)
      {
        id v149 = v147;
      }
      else
      {
        long long v150 = +[GEOAPStateFactory sharedFactory];
        id v149 = [v150 stateForType:9];
      }
      id v151 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v149, "stateType"));
      uint64_t v152 = [v33 objectForKeyedSubscript:v151];
      uint64_t v153 = (void *)v152;
      if (v152) {
        id v154 = (void *)v152;
      }
      else {
        id v154 = v149;
      }
      id v155 = v154;

      unsigned int v156 = NSNumber;
      id v157 = +[GEOAPStateFactory sharedFactory];
      id v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 10));

      id v159 = [v33 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        id v162 = +[GEOAPStateFactory sharedFactory];
        id v161 = [v162 stateForType:10];
      }
      id v163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v161, "stateType"));
      uint64_t v164 = [v33 objectForKeyedSubscript:v163];
      id v165 = (void *)v164;
      if (v164) {
        long long v166 = (void *)v164;
      }
      else {
        long long v166 = v161;
      }
      id v246 = v166;

      uint64_t v167 = NSNumber;
      id v168 = +[GEOAPStateFactory sharedFactory];
      id v169 = objc_msgSend(v167, "numberWithInt:", objc_msgSend(v168, "logMsgStateTypeForType:", 20));

      id v170 = [v33 objectForKeyedSubscript:v169];
      id v171 = v170;
      if (v170)
      {
        id v172 = v170;
      }
      else
      {
        long long v173 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v173 stateForType:20];
      }
      long long v174 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v172, "stateType"));
      uint64_t v175 = [v33 objectForKeyedSubscript:v174];
      uint64_t v176 = (void *)v175;
      if (v175) {
        id v177 = (void *)v175;
      }
      else {
        id v177 = v172;
      }
      id v245 = v177;

      id v178 = NSNumber;
      uint64_t v179 = +[GEOAPStateFactory sharedFactory];
      long long v180 = objc_msgSend(v178, "numberWithInt:", objc_msgSend(v179, "logMsgStateTypeForType:", 42));

      id v181 = [v33 objectForKeyedSubscript:v180];
      id v182 = v181;
      if (v181)
      {
        id v183 = v181;
      }
      else
      {
        id v184 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v184 stateForType:42];
      }
      uint64_t v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v183, "stateType"));
      uint64_t v186 = [v33 objectForKeyedSubscript:v185];
      uint64_t v187 = (void *)v186;
      if (v186) {
        id v188 = (void *)v186;
      }
      else {
        id v188 = v183;
      }
      id v244 = v188;

      id v189 = NSNumber;
      uint64_t v190 = +[GEOAPStateFactory sharedFactory];
      uint64_t v191 = objc_msgSend(v189, "numberWithInt:", objc_msgSend(v190, "logMsgStateTypeForType:", 52));

      long long v192 = [v33 objectForKeyedSubscript:v191];
      id v193 = v192;
      id v242 = v19;
      if (v192)
      {
        id v194 = v192;
      }
      else
      {
        id v195 = +[GEOAPStateFactory sharedFactory];
        id v194 = [v195 stateForType:52];
      }
      uint64_t v196 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v194, "stateType"));
      uint64_t v197 = [v33 objectForKeyedSubscript:v196];
      uint64_t v198 = (void *)v197;
      if (v197) {
        id v199 = (void *)v197;
      }
      else {
        id v199 = v194;
      }
      id v200 = v199;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 70));

      id v204 = [v33 objectForKeyedSubscript:v203];
      id v205 = v204;
      id v247 = v155;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:70];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v33 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v212 = v211;

      id v213 = NSNumber;
      id v214 = +[GEOAPStateFactory sharedFactory];
      id v215 = objc_msgSend(v213, "numberWithInt:", objc_msgSend(v214, "logMsgStateTypeForType:", 7));

      id v216 = [v33 objectForKeyedSubscript:v215];
      id v217 = v216;
      if (v216)
      {
        id v218 = v216;
      }
      else
      {
        uint64_t v219 = +[GEOAPStateFactory sharedFactory];
        id v218 = [v219 stateForType:7];
      }
      uint64_t v220 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v218, "stateType"));
      uint64_t v221 = [v33 objectForKeyedSubscript:v220];
      id v222 = (void *)v221;
      if (v221) {
        id v223 = (void *)v221;
      }
      else {
        id v223 = v218;
      }
      id v224 = v223;

      id v225 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v225 setEventType:1];
      id v226 = objc_alloc_init(MEMORY[0x263F41958]);
      [v225 setUserActionEvent:v226];

      int v227 = [v225 userActionEvent];
      [v227 setUserActionEventAction:a3];

      id v228 = [v225 userActionEvent];
      [v228 setUserActionEventTarget:a4];

      id v229 = [v225 userActionEvent];
      [v229 setUserActionEventValue:v259];

      uint64_t v230 = [v225 userActionEvent];
      [v230 setActionRichProviderId:v258];

      if (v260 != 0)
      {
        id v231 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v232 = [v225 userActionEvent];
        [v232 setModuleInfo:v231];

        if ((void)v260)
        {
          uint64_t v233 = [(id)v260 intValue];
          id v234 = [v225 userActionEvent];
          id v235 = [v234 moduleInfo];
          [v235 setType:v233];

          id v20 = v243;
        }
        if (*((void *)&v260 + 1))
        {
          id v236 = [v225 userActionEvent];
          uint64_t v237 = [v236 moduleInfo];
          [v237 setModuleMetadata:*((void *)&v260 + 1)];
        }
      }
      if (v257) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v256) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v255) {
        [v225 addLogMsgState:v255];
      }
      if (v254) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v253) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v252) {
        [v225 addLogMsgState:v252];
      }
      if (v251) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v250) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v249) {
        [v225 addLogMsgState:v249];
      }
      if (v248) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v247) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v246) {
        [v225 addLogMsgState:v246];
      }
      if (v245) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v244) {
        objc_msgSend(v225, "addLogMsgState:");
      }
      if (v200) {
        [v225 addLogMsgState:v200];
      }
      if (v224) {
        [v225 addLogMsgState:v224];
      }
      if (v212) {
        [v225 addLogMsgState:v212];
      }
      id v238 = +[GEOAPStateFactory sharedFactory];
      v263[0] = MEMORY[0x263EF8330];
      v263[1] = 3221225472;
      v263[2] = __210__GEOAPPortal_UserActionCodeGen__captureNearbyTransitShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v263[3] = &unk_2653457B8;
      id v239 = v225;
      id v264 = v239;
      id v266 = v240;
      id v21 = v241;
      id v265 = v241;
      [v238 sessionStateForType:6 callback:v263];

      id v22 = v240;
      id v15 = v259;
      id v17 = (id)*((void *)&v260 + 1);
      id v16 = (id)v260;
      id v18 = v258;
      id v19 = v242;
    }
  }
}

uint64_t __210__GEOAPPortal_UserActionCodeGen__captureNearbyTransitShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureOfflineShortUserActionTargetPairWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = a12;
  id v23 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v311 = "+[GEOAPPortal(UserActionCodeGen) captureOfflineShortUserActionTargetPairWithAction:target:value:moduleType:mo"
           "duleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v23, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v24 == 0.0 || v24 < (double)arc4random() / 4294967300.0)
    {
      id v275 = v22;
      id v277 = v20;
      unint64_t v298 = (unint64_t)v17;
      unint64_t v279 = (unint64_t)v16;
      id v276 = v21;
      id v297 = v18;
      id v278 = v19;
      if ([v19 count])
      {
        id v25 = v15;
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v19, "count"));
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        id v27 = v19;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v306;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v306 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v305 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v305 objects:v309 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        id v15 = v25;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        id v45 = (void *)v43;
      }
      else {
        id v45 = v40;
      }
      id v296 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 5));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:5];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v295 = v56;

      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 16));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:16];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        uint64_t v67 = (void *)v65;
      }
      else {
        uint64_t v67 = v62;
      }
      id v294 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 35));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:35];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        uint64_t v78 = (void *)v76;
      }
      else {
        uint64_t v78 = v73;
      }
      id v293 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 30));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:30];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        uint64_t v89 = (void *)v87;
      }
      else {
        uint64_t v89 = v84;
      }
      id v292 = v89;

      id v90 = NSNumber;
      long long v91 = +[GEOAPStateFactory sharedFactory];
      long long v92 = objc_msgSend(v90, "numberWithInt:", objc_msgSend(v91, "logMsgStateTypeForType:", 0));

      long long v93 = [v34 objectForKeyedSubscript:v92];
      id v94 = v93;
      if (v93)
      {
        id v95 = v93;
      }
      else
      {
        id v96 = +[GEOAPStateFactory sharedFactory];
        id v95 = [v96 stateForType:0];
      }
      uint64_t v97 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v95, "stateType"));
      uint64_t v98 = [v34 objectForKeyedSubscript:v97];
      uint64_t v99 = (void *)v98;
      if (v98) {
        uint64_t v100 = (void *)v98;
      }
      else {
        uint64_t v100 = v95;
      }
      id v291 = v100;

      id v101 = NSNumber;
      id v102 = +[GEOAPStateFactory sharedFactory];
      id v103 = objc_msgSend(v101, "numberWithInt:", objc_msgSend(v102, "logMsgStateTypeForType:", 3));

      uint64_t v104 = [v34 objectForKeyedSubscript:v103];
      id v105 = v104;
      if (v104)
      {
        id v106 = v104;
      }
      else
      {
        id v107 = +[GEOAPStateFactory sharedFactory];
        id v106 = [v107 stateForType:3];
      }
      uint64_t v108 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v106, "stateType"));
      uint64_t v109 = [v34 objectForKeyedSubscript:v108];
      uint64_t v110 = (void *)v109;
      if (v109) {
        uint64_t v111 = (void *)v109;
      }
      else {
        uint64_t v111 = v106;
      }
      id v290 = v111;

      id v112 = NSNumber;
      id v113 = +[GEOAPStateFactory sharedFactory];
      id v114 = objc_msgSend(v112, "numberWithInt:", objc_msgSend(v113, "logMsgStateTypeForType:", 64));

      id v115 = [v34 objectForKeyedSubscript:v114];
      id v116 = v115;
      if (v115)
      {
        id v117 = v115;
      }
      else
      {
        id v118 = +[GEOAPStateFactory sharedFactory];
        id v117 = [v118 stateForType:64];
      }
      uint64_t v119 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v117, "stateType"));
      uint64_t v120 = [v34 objectForKeyedSubscript:v119];
      uint64_t v121 = (void *)v120;
      if (v120) {
        uint64_t v122 = (void *)v120;
      }
      else {
        uint64_t v122 = v117;
      }
      id v289 = v122;

      uint64_t v123 = NSNumber;
      id v124 = +[GEOAPStateFactory sharedFactory];
      id v125 = objc_msgSend(v123, "numberWithInt:", objc_msgSend(v124, "logMsgStateTypeForType:", 13));

      id v126 = [v34 objectForKeyedSubscript:v125];
      id v127 = v126;
      if (v126)
      {
        id v128 = v126;
      }
      else
      {
        id v129 = +[GEOAPStateFactory sharedFactory];
        id v128 = [v129 stateForType:13];
      }
      uint64_t v130 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v128, "stateType"));
      uint64_t v131 = [v34 objectForKeyedSubscript:v130];
      uint64_t v132 = (void *)v131;
      if (v131) {
        id v133 = (void *)v131;
      }
      else {
        id v133 = v128;
      }
      id v288 = v133;

      uint64_t v134 = NSNumber;
      unint64_t v135 = +[GEOAPStateFactory sharedFactory];
      id v136 = objc_msgSend(v134, "numberWithInt:", objc_msgSend(v135, "logMsgStateTypeForType:", 14));

      id v137 = [v34 objectForKeyedSubscript:v136];
      id v138 = v137;
      if (v137)
      {
        id v139 = v137;
      }
      else
      {
        id v140 = +[GEOAPStateFactory sharedFactory];
        id v139 = [v140 stateForType:14];
      }
      uint64_t v141 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v139, "stateType"));
      uint64_t v142 = [v34 objectForKeyedSubscript:v141];
      uint64_t v143 = (void *)v142;
      if (v142) {
        id v144 = (void *)v142;
      }
      else {
        id v144 = v139;
      }
      id v287 = v144;

      id v145 = NSNumber;
      uint64_t v146 = +[GEOAPStateFactory sharedFactory];
      long long v147 = objc_msgSend(v145, "numberWithInt:", objc_msgSend(v146, "logMsgStateTypeForType:", 9));

      long long v148 = [v34 objectForKeyedSubscript:v147];
      id v149 = v148;
      if (v148)
      {
        id v150 = v148;
      }
      else
      {
        id v151 = +[GEOAPStateFactory sharedFactory];
        id v150 = [v151 stateForType:9];
      }
      uint64_t v152 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v150, "stateType"));
      uint64_t v153 = [v34 objectForKeyedSubscript:v152];
      id v154 = (void *)v153;
      if (v153) {
        id v155 = (void *)v153;
      }
      else {
        id v155 = v150;
      }
      id v286 = v155;

      unsigned int v156 = NSNumber;
      id v157 = +[GEOAPStateFactory sharedFactory];
      id v158 = objc_msgSend(v156, "numberWithInt:", objc_msgSend(v157, "logMsgStateTypeForType:", 10));

      id v159 = [v34 objectForKeyedSubscript:v158];
      id v160 = v159;
      if (v159)
      {
        id v161 = v159;
      }
      else
      {
        id v162 = +[GEOAPStateFactory sharedFactory];
        id v161 = [v162 stateForType:10];
      }
      id v163 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v161, "stateType"));
      uint64_t v164 = [v34 objectForKeyedSubscript:v163];
      id v165 = (void *)v164;
      if (v164) {
        long long v166 = (void *)v164;
      }
      else {
        long long v166 = v161;
      }
      id v285 = v166;

      uint64_t v167 = NSNumber;
      id v168 = +[GEOAPStateFactory sharedFactory];
      id v169 = objc_msgSend(v167, "numberWithInt:", objc_msgSend(v168, "logMsgStateTypeForType:", 20));

      id v170 = [v34 objectForKeyedSubscript:v169];
      id v171 = v170;
      if (v170)
      {
        id v172 = v170;
      }
      else
      {
        long long v173 = +[GEOAPStateFactory sharedFactory];
        id v172 = [v173 stateForType:20];
      }
      long long v174 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v172, "stateType"));
      uint64_t v175 = [v34 objectForKeyedSubscript:v174];
      uint64_t v176 = (void *)v175;
      if (v175) {
        id v177 = (void *)v175;
      }
      else {
        id v177 = v172;
      }
      id v284 = v177;

      id v178 = NSNumber;
      uint64_t v179 = +[GEOAPStateFactory sharedFactory];
      long long v180 = objc_msgSend(v178, "numberWithInt:", objc_msgSend(v179, "logMsgStateTypeForType:", 42));

      id v181 = [v34 objectForKeyedSubscript:v180];
      id v182 = v181;
      if (v181)
      {
        id v183 = v181;
      }
      else
      {
        id v184 = +[GEOAPStateFactory sharedFactory];
        id v183 = [v184 stateForType:42];
      }
      uint64_t v185 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v183, "stateType"));
      uint64_t v186 = [v34 objectForKeyedSubscript:v185];
      uint64_t v187 = (void *)v186;
      if (v186) {
        id v188 = (void *)v186;
      }
      else {
        id v188 = v183;
      }
      id v189 = v188;

      uint64_t v190 = NSNumber;
      uint64_t v191 = +[GEOAPStateFactory sharedFactory];
      long long v192 = objc_msgSend(v190, "numberWithInt:", objc_msgSend(v191, "logMsgStateTypeForType:", 70));

      id v193 = [v34 objectForKeyedSubscript:v192];
      id v194 = v193;
      if (v193)
      {
        id v195 = v193;
      }
      else
      {
        uint64_t v196 = +[GEOAPStateFactory sharedFactory];
        id v195 = [v196 stateForType:70];
      }
      uint64_t v197 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v195, "stateType"));
      uint64_t v198 = [v34 objectForKeyedSubscript:v197];
      id v199 = (void *)v198;
      if (v198) {
        id v200 = (void *)v198;
      }
      else {
        id v200 = v195;
      }
      id v274 = v200;

      id v201 = NSNumber;
      long long v202 = +[GEOAPStateFactory sharedFactory];
      uint64_t v203 = objc_msgSend(v201, "numberWithInt:", objc_msgSend(v202, "logMsgStateTypeForType:", 69));

      id v204 = [v34 objectForKeyedSubscript:v203];
      id v205 = v204;
      if (v204)
      {
        id v206 = v204;
      }
      else
      {
        uint64_t v207 = +[GEOAPStateFactory sharedFactory];
        id v206 = [v207 stateForType:69];
      }
      uint64_t v208 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v206, "stateType"));
      uint64_t v209 = [v34 objectForKeyedSubscript:v208];
      id v210 = (void *)v209;
      if (v209) {
        uint64_t v211 = (void *)v209;
      }
      else {
        uint64_t v211 = v206;
      }
      id v282 = v211;

      id v212 = NSNumber;
      id v213 = +[GEOAPStateFactory sharedFactory];
      id v214 = objc_msgSend(v212, "numberWithInt:", objc_msgSend(v213, "logMsgStateTypeForType:", 7));

      id v215 = [v34 objectForKeyedSubscript:v214];
      id v216 = v215;
      if (v215)
      {
        id v217 = v215;
      }
      else
      {
        id v218 = +[GEOAPStateFactory sharedFactory];
        id v217 = [v218 stateForType:7];
      }
      uint64_t v219 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v217, "stateType"));
      uint64_t v220 = [v34 objectForKeyedSubscript:v219];
      uint64_t v221 = (void *)v220;
      if (v220) {
        id v222 = (void *)v220;
      }
      else {
        id v222 = v217;
      }
      id v281 = v222;

      id v223 = NSNumber;
      id v224 = +[GEOAPStateFactory sharedFactory];
      id v225 = objc_msgSend(v223, "numberWithInt:", objc_msgSend(v224, "logMsgStateTypeForType:", 17));

      id v226 = [v34 objectForKeyedSubscript:v225];
      int v227 = v226;
      if (v226)
      {
        id v228 = v226;
      }
      else
      {
        id v229 = +[GEOAPStateFactory sharedFactory];
        id v228 = [v229 stateForType:17];
      }
      uint64_t v230 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v228, "stateType"));
      uint64_t v231 = [v34 objectForKeyedSubscript:v230];
      uint64_t v232 = (void *)v231;
      if (v231) {
        uint64_t v233 = (void *)v231;
      }
      else {
        uint64_t v233 = v228;
      }
      id v280 = v233;

      id v234 = NSNumber;
      id v235 = +[GEOAPStateFactory sharedFactory];
      id v236 = objc_msgSend(v234, "numberWithInt:", objc_msgSend(v235, "logMsgStateTypeForType:", 19));

      uint64_t v237 = [v34 objectForKeyedSubscript:v236];
      id v238 = v237;
      id v283 = v189;
      if (v237)
      {
        id v239 = v237;
      }
      else
      {
        id v240 = +[GEOAPStateFactory sharedFactory];
        id v239 = [v240 stateForType:19];
      }
      uint64_t v241 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v239, "stateType"));
      uint64_t v242 = [v34 objectForKeyedSubscript:v241];
      id v243 = (void *)v242;
      if (v242) {
        id v244 = (void *)v242;
      }
      else {
        id v244 = v239;
      }
      id v245 = v244;

      id v246 = NSNumber;
      id v247 = +[GEOAPStateFactory sharedFactory];
      id v248 = objc_msgSend(v246, "numberWithInt:", objc_msgSend(v247, "logMsgStateTypeForType:", 27));

      id v249 = [v34 objectForKeyedSubscript:v248];
      id v250 = v249;
      if (v249)
      {
        id v251 = v249;
      }
      else
      {
        id v252 = +[GEOAPStateFactory sharedFactory];
        id v251 = [v252 stateForType:27];
      }
      id v16 = (id)v279;

      id v253 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v251, "stateType"));
      uint64_t v254 = [v34 objectForKeyedSubscript:v253];
      id v255 = (void *)v254;
      if (v254) {
        id v256 = (void *)v254;
      }
      else {
        id v256 = v251;
      }
      id v257 = v256;

      id v258 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v258 setEventType:1];
      id v259 = objc_alloc_init(MEMORY[0x263F41958]);
      [v258 setUserActionEvent:v259];

      long long v260 = [v258 userActionEvent];
      [v260 setUserActionEventAction:a3];

      uint64_t v261 = [v258 userActionEvent];
      [v261 setUserActionEventTarget:a4];

      id v262 = [v258 userActionEvent];
      [v262 setUserActionEventValue:v15];

      id v263 = [v258 userActionEvent];
      [v263 setActionRichProviderId:v297];

      if (v279 | v298)
      {
        id v264 = objc_alloc_init(MEMORY[0x263F41960]);
        id v265 = [v258 userActionEvent];
        [v265 setModuleInfo:v264];

        if (v279)
        {
          uint64_t v266 = [(id)v279 intValue];
          long long v267 = [v258 userActionEvent];
          [v267 moduleInfo];
          v269 = id v268 = v15;
          [v269 setType:v266];

          id v15 = v268;
          id v16 = (id)v279;
        }
        if (v298)
        {
          long long v270 = [v258 userActionEvent];
          id v271 = [v270 moduleInfo];
          [v271 setModuleMetadata:v298];
        }
      }
      if (v296) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v295) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v294) {
        [v258 addLogMsgState:v294];
      }
      if (v293) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v292) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v291) {
        [v258 addLogMsgState:v291];
      }
      if (v290) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v289) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v288) {
        [v258 addLogMsgState:v288];
      }
      if (v287) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v286) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v285) {
        [v258 addLogMsgState:v285];
      }
      if (v284) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v283) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v281) {
        [v258 addLogMsgState:v281];
      }
      if (v280) {
        objc_msgSend(v258, "addLogMsgState:");
      }
      if (v245) {
        [v258 addLogMsgState:v245];
      }
      if (v257) {
        [v258 addLogMsgState:v257];
      }
      if (v282) {
        [v258 addLogMsgState:v282];
      }
      if (v274) {
        [v258 addLogMsgState:v274];
      }
      id v272 = +[GEOAPStateFactory sharedFactory];
      v301[0] = MEMORY[0x263EF8330];
      v301[1] = 3221225472;
      v301[2] = __204__GEOAPPortal_UserActionCodeGen__captureOfflineShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v301[3] = &unk_2653457B8;
      id v273 = v258;
      id v302 = v273;
      id v304 = v275;
      id v21 = v276;
      id v303 = v276;
      [v272 sessionStateForType:6 callback:v301];

      id v22 = v275;
      id v18 = v297;
      id v17 = (id)v298;
      id v20 = v277;
      id v19 = v278;
    }
  }
}

uint64_t __204__GEOAPPortal_UserActionCodeGen__captureOfflineShortUserActionTargetPairWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (void)captureVisualIntelligenceShortUserActionsWithAction:(int)a3 target:(int)a4 value:(id)a5 moduleType:(id)a6 moduleMetadata:(id)a7 richProviderId:(id)a8 additionalStates:(id)a9 providedDropRate:(id)a10 completionQueue:(id)a11 completionBlock:(id)a12
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  id v17 = a5;
  id v18 = a6;
  unint64_t v19 = (unint64_t)a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a11;
  id v23 = a12;
  double v24 = GEOGetGEOAPUserActionAnalyticsLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v140 = "+[GEOAPPortal(UserActionCodeGen) captureVisualIntelligenceShortUserActionsWithAction:target:value:moduleType:"
           "moduleMetadata:richProviderId:additionalStates:providedDropRate:completionQueue:completionBlock:]";
    _os_log_impl(&dword_24FE56000, v24, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (+[GEOAPUtils myAppType] != 4)
  {
    GEOConfigGetDouble();
    if (v25 == 0.0 || v25 < (double)arc4random() / 4294967300.0)
    {
      unsigned int v119 = a4;
      uint64_t v120 = v23;
      uint64_t v121 = v22;
      id v126 = v20;
      id v127 = v17;
      unint64_t v129 = (unint64_t)v18;
      id v128 = (id)v19;
      if ([v21 count])
      {
        id v26 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9A0]), "initWithCapacity:", objc_msgSend(v21, "count"));
        long long v134 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        id v27 = v21;
        uint64_t v28 = [v27 countByEnumeratingWithState:&v134 objects:v138 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v135;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v135 != v30) {
                objc_enumerationMutation(v27);
              }
              id v32 = *(void **)(*((void *)&v134 + 1) + 8 * i);
              long long v33 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v32, "stateType"));
              [v26 setObject:v32 forKeyedSubscript:v33];
            }
            uint64_t v29 = [v27 countByEnumeratingWithState:&v134 objects:v138 count:16];
          }
          while (v29);
        }

        long long v34 = (void *)[v26 copy];
        unint64_t v19 = (unint64_t)v128;
      }
      else
      {
        long long v34 = 0;
      }
      unint64_t v35 = NSNumber;
      long long v36 = +[GEOAPStateFactory sharedFactory];
      id v37 = objc_msgSend(v35, "numberWithInt:", objc_msgSend(v36, "logMsgStateTypeForType:", 65));

      int v38 = [v34 objectForKeyedSubscript:v37];
      id v39 = v38;
      if (v38)
      {
        id v40 = v38;
      }
      else
      {
        id v41 = +[GEOAPStateFactory sharedFactory];
        id v40 = [v41 stateForType:65];
      }
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v40, "stateType"));
      uint64_t v43 = [v34 objectForKeyedSubscript:v42];
      uint64_t v44 = (void *)v43;
      if (v43) {
        id v45 = (void *)v43;
      }
      else {
        id v45 = v40;
      }
      id v125 = v45;

      id v46 = NSNumber;
      uint64_t v47 = +[GEOAPStateFactory sharedFactory];
      uint64_t v48 = objc_msgSend(v46, "numberWithInt:", objc_msgSend(v47, "logMsgStateTypeForType:", 35));

      long long v49 = [v34 objectForKeyedSubscript:v48];
      id v50 = v49;
      if (v49)
      {
        id v51 = v49;
      }
      else
      {
        id v52 = +[GEOAPStateFactory sharedFactory];
        id v51 = [v52 stateForType:35];
      }
      uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v51, "stateType"));
      uint64_t v54 = [v34 objectForKeyedSubscript:v53];
      uint64_t v55 = (void *)v54;
      if (v54) {
        id v56 = (void *)v54;
      }
      else {
        id v56 = v51;
      }
      id v124 = v56;

      id v57 = NSNumber;
      id v58 = +[GEOAPStateFactory sharedFactory];
      id v59 = objc_msgSend(v57, "numberWithInt:", objc_msgSend(v58, "logMsgStateTypeForType:", 30));

      unint64_t v60 = [v34 objectForKeyedSubscript:v59];
      id v61 = v60;
      if (v60)
      {
        id v62 = v60;
      }
      else
      {
        id v63 = +[GEOAPStateFactory sharedFactory];
        id v62 = [v63 stateForType:30];
      }
      uint64_t v64 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v62, "stateType"));
      uint64_t v65 = [v34 objectForKeyedSubscript:v64];
      uint64_t v66 = (void *)v65;
      if (v65) {
        uint64_t v67 = (void *)v65;
      }
      else {
        uint64_t v67 = v62;
      }
      id v123 = v67;

      id v68 = NSNumber;
      unint64_t v69 = +[GEOAPStateFactory sharedFactory];
      id v70 = objc_msgSend(v68, "numberWithInt:", objc_msgSend(v69, "logMsgStateTypeForType:", 0));

      uint64_t v71 = [v34 objectForKeyedSubscript:v70];
      id v72 = v71;
      if (v71)
      {
        id v73 = v71;
      }
      else
      {
        id v74 = +[GEOAPStateFactory sharedFactory];
        id v73 = [v74 stateForType:0];
      }
      uint64_t v75 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v73, "stateType"));
      uint64_t v76 = [v34 objectForKeyedSubscript:v75];
      uint64_t v77 = (void *)v76;
      if (v76) {
        uint64_t v78 = (void *)v76;
      }
      else {
        uint64_t v78 = v73;
      }
      id v122 = v78;

      id v79 = NSNumber;
      id v80 = +[GEOAPStateFactory sharedFactory];
      id v81 = objc_msgSend(v79, "numberWithInt:", objc_msgSend(v80, "logMsgStateTypeForType:", 3));

      id v82 = [v34 objectForKeyedSubscript:v81];
      id v83 = v82;
      if (v82)
      {
        id v84 = v82;
      }
      else
      {
        id v85 = +[GEOAPStateFactory sharedFactory];
        id v84 = [v85 stateForType:3];
      }
      uint64_t v86 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v84, "stateType"));
      uint64_t v87 = [v34 objectForKeyedSubscript:v86];
      uint64_t v88 = (void *)v87;
      if (v87) {
        uint64_t v89 = (void *)v87;
      }
      else {
        uint64_t v89 = v84;
      }
      id v90 = v89;

      long long v91 = NSNumber;
      long long v92 = +[GEOAPStateFactory sharedFactory];
      long long v93 = objc_msgSend(v91, "numberWithInt:", objc_msgSend(v92, "logMsgStateTypeForType:", 17));

      id v94 = [v34 objectForKeyedSubscript:v93];
      id v95 = v94;
      if (v94)
      {
        id v96 = v94;
      }
      else
      {
        uint64_t v97 = +[GEOAPStateFactory sharedFactory];
        id v96 = [v97 stateForType:17];
      }
      uint64_t v98 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v96, "stateType"));
      uint64_t v99 = [v34 objectForKeyedSubscript:v98];
      uint64_t v100 = (void *)v99;
      if (v99) {
        id v101 = (void *)v99;
      }
      else {
        id v101 = v96;
      }
      id v102 = v101;

      id v103 = objc_alloc_init(MEMORY[0x263F417E8]);
      [v103 setEventType:1];
      id v104 = objc_alloc_init(MEMORY[0x263F41958]);
      [v103 setUserActionEvent:v104];

      id v105 = [v103 userActionEvent];
      [v105 setUserActionEventAction:a3];

      id v106 = [v103 userActionEvent];
      [v106 setUserActionEventTarget:v119];

      id v107 = [v103 userActionEvent];
      [v107 setUserActionEventValue:v127];

      uint64_t v108 = [v103 userActionEvent];
      [v108 setActionRichProviderId:v126];

      if (v129 | v19)
      {
        id v109 = objc_alloc_init(MEMORY[0x263F41960]);
        uint64_t v110 = [v103 userActionEvent];
        [v110 setModuleInfo:v109];

        if (v129)
        {
          uint64_t v111 = [(id)v129 intValue];
          id v112 = [v103 userActionEvent];
          id v113 = [v112 moduleInfo];
          [v113 setType:v111];

          unint64_t v19 = (unint64_t)v128;
        }
        if (v19)
        {
          id v114 = [v103 userActionEvent];
          id v115 = [v114 moduleInfo];
          [v115 setModuleMetadata:v128];
        }
      }
      if (v125) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v124) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v123) {
        [v103 addLogMsgState:v123];
      }
      if (v122) {
        objc_msgSend(v103, "addLogMsgState:");
      }
      if (v90) {
        [v103 addLogMsgState:v90];
      }
      if (v102) {
        [v103 addLogMsgState:v102];
      }
      id v116 = +[GEOAPStateFactory sharedFactory];
      v130[0] = MEMORY[0x263EF8330];
      v130[1] = 3221225472;
      v130[2] = __206__GEOAPPortal_UserActionCodeGen__captureVisualIntelligenceShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke;
      v130[3] = &unk_2653457B8;
      id v131 = v103;
      id v133 = v120;
      id v132 = v121;
      id v117 = v103;
      id v22 = v121;
      id v118 = v117;
      [v116 sessionStateForType:6 callback:v130];

      id v23 = v120;
      id v17 = v127;
      unint64_t v19 = (unint64_t)v128;
      id v18 = (id)v129;
      id v20 = v126;
    }
  }
}

uint64_t __206__GEOAPPortal_UserActionCodeGen__captureVisualIntelligenceShortUserActionsWithAction_target_value_moduleType_moduleMetadata_richProviderId_additionalStates_providedDropRate_completionQueue_completionBlock___block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addLogMsgState:a2];
  }
  uint64_t v3 = GEOMakeGEOAPBatchID();
  +[GEOAPPortal populateCommonEventValues:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  return +[GEOAPPortal reportLogMsgEvent:v6 uploadBatchId:v3 completion:v4 completionQueue:v5];
}

+ (BOOL)isRunningInVisualIntelligence
{
  if (qword_26B201B10 != -1) {
    dispatch_once(&qword_26B201B10, &__block_literal_global_5);
  }
  return _MergedGlobals_6;
}

void __63__GEOAPPortal_UserActionCodeGen__isRunningInVisualIntelligence__block_invoke()
{
  GEOApplicationIdentifierOrProcessName();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_6 = [v0 caseInsensitiveCompare:@"com.apple.VisualIntelligenceCamera"] == 0;
}

+ (void)captureLookAroundUserAction:(int)a3 onTarget:(int)a4 eventValue:(id)a5
{
  uint64_t v5 = *(void *)&a4;
  uint64_t v6 = *(void *)&a3;
  id v22 = a5;
  if ((int)v6 <= 6012)
  {
    uint64_t v8 = (v6 - 1001);
    if (v8 > 0x31) {
      goto LABEL_6;
    }
    if (((1 << (v6 + 23)) & 0x3FC0000000006) != 0)
    {
      uint64_t v9 = +[GEOAPSharedStateData sharedData];
      [v9 setLookaroundSessionHadZoomAction:1];
LABEL_5:

      goto LABEL_6;
    }
    if (v6 != 1001)
    {
      if (v8 == 9)
      {
        uint64_t v9 = +[GEOAPSharedStateData sharedData];
        [v9 setLookaroundSessionHadTapPoiAction:1];
        goto LABEL_5;
      }
      goto LABEL_6;
    }
LABEL_20:
    uint64_t v9 = +[GEOAPSharedStateData sharedData];
    [v9 setLookaroundSessionHadPanAction:1];
    goto LABEL_5;
  }
  if ((int)v6 <= 6058)
  {
    if (v6 == 6013)
    {
      id v18 = +[GEOAPSharedStateData sharedData];
      uint64_t v9 = v18;
      uint64_t v19 = 1;
    }
    else
    {
      if (v6 != 6058) {
        goto LABEL_6;
      }
      [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
      double v11 = v10;
      uint64_t v12 = +[GEOAPSharedStateData sharedData];
      [v12 setLookaroundSessionStartTime:v11];

      id v13 = +[GEOAPSharedStateData sharedData];
      [v13 setHasLookaroundSessionEndTime:0];

      id v14 = +[GEOAPSharedStateData sharedData];
      [v14 setLookaroundSessionHadPanAction:0];

      id v15 = +[GEOAPSharedStateData sharedData];
      [v15 setLookaroundSessionHadZoomAction:0];

      id v16 = +[GEOAPSharedStateData sharedData];
      [v16 setLookaroundSessionHadMoveAction:0];

      id v17 = +[GEOAPSharedStateData sharedData];
      [v17 setLookaroundSessionHadTapPoiAction:0];

      id v18 = +[GEOAPSharedStateData sharedData];
      uint64_t v9 = v18;
      uint64_t v19 = 0;
    }
    [v18 setLookaroundSessionHadShareAction:v19];
    goto LABEL_5;
  }
  switch(v6)
  {
    case 0x17AB:
      [MEMORY[0x263EFF910] timeIntervalSinceReferenceDate];
      double v21 = v20;
      uint64_t v9 = +[GEOAPSharedStateData sharedData];
      [v9 setLookaroundSessionEndTime:v21];
      goto LABEL_5;
    case 0x17B5:
      goto LABEL_20;
    case 0x17B8:
      uint64_t v9 = +[GEOAPSharedStateData sharedData];
      [v9 setLookaroundSessionHadMoveAction:1];
      goto LABEL_5;
  }
LABEL_6:
  [a1 captureUserAction:v6 target:v5 value:v22];
}

+ (void)captureLookAroundUserAction:(int)a3 onTarget:(int)a4 eventValue:(id)a5 location:(id)a6 heading:(unsigned int)a7 zoom:(double)a8 numberPoisInView:(unsigned int)a9 labelingShown:(BOOL)a10
{
  uint64_t v10 = *(void *)&a9;
  uint64_t v12 = *(void *)&a7;
  uint64_t v14 = *(void *)&a4;
  uint64_t v15 = *(void *)&a3;
  id v23 = a5;
  id v17 = (void *)[a6 copy];
  id v18 = +[GEOAPSharedStateData sharedData];
  [v18 setLookAroundLocation:v17];

  uint64_t v19 = +[GEOAPSharedStateData sharedData];
  [v19 setLookAroundHeading:v12];

  double v20 = +[GEOAPSharedStateData sharedData];
  [v20 setLookAroundZoom:a8];

  double v21 = +[GEOAPSharedStateData sharedData];
  [v21 setLookAroundNumberPoisInView:v10];

  id v22 = +[GEOAPSharedStateData sharedData];
  [v22 setLookAroundIsLabelingShown:a10];

  [a1 captureLookAroundUserAction:v15 onTarget:v14 eventValue:v23];
}

+ (void)captureMapLaunchEventWithLaunchUrl:(id)a3 sourceAppId:(id)a4 isLaunchedFromTTL:(BOOL)a5 ttlEventTime:(id)a6
{
  BOOL v7 = a5;
  id v18 = a3;
  id v9 = a4;
  id v10 = a6;
  double v11 = [MEMORY[0x263F086E0] mainBundle];
  uint64_t v12 = [v11 bundleIdentifier];
  char v13 = [v9 isEqualToString:v12];

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = +[GEOAPSharedStateData sharedData];
    [v14 setMapLaunchSourceAppId:v9];

    if (v10 || v7)
    {
      id v16 = NSNumber;
      [v10 timeIntervalSinceNow];
      uint64_t v15 = [v16 numberWithDouble:v17 / 60.0];
    }
    else
    {
      uint64_t v15 = 0;
    }
    +[GEOAPPortal captureMapLaunchWithLaunchUri:v18 sourceAppId:v9 GEOTimeToLeaveMapLaunch_minutesUntilEvent:v15];
    if ([v9 isEqualToString:@"com.apple.Maps.GeneralMapsWidget"]) {
      +[GEOAPPortal reportDailyUsageCountType:112];
    }
  }
}

+ (void)captureTransitAppLaunchSource:(id)a3 destination:(id)a4 bundleIdentifier:(id)a5
{
  double var1 = a4.var1;
  double var0 = a4.var0;
  double v7 = a3.var1;
  double v8 = a3.var0;
  id v12 = a5;
  id v9 = 0;
  if (v7 >= -180.0 && v7 <= 180.0 && v8 >= -90.0 && v8 <= 90.0) {
    id v9 = objc_msgSend(objc_alloc(MEMORY[0x263F417B8]), "initWithCoordinate:", v8, v7);
  }
  id v10 = 0;
  if (var1 >= -180.0 && var1 <= 180.0 && var0 >= -90.0 && var0 <= 90.0) {
    id v10 = objc_msgSend(objc_alloc(MEMORY[0x263F417B8]), "initWithCoordinate:", var0, var1);
  }
  double v11 = [NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
  +[GEOAPPortal captureTransitAppLaunchWithBundleIdentifier:v12 source:v9 destination:v10 timestamp:v11];
}

+ (void)captureTimeToLeaveHypothesisEventWithEarlyDepartureDelta:(double)a3 lateDepartureDelta:(double)a4 earlyArrivalDelta:(double)a5 lateArrivalDelta:(double)a6 rerouteCount:(unint64_t)a7 uiNotification:(int)a8
{
  uint64_t v8 = *(void *)&a8;
  if (a6 >= -1350.0)
  {
    if (a6 >= -450.0)
    {
      if (a6 >= 450.0)
      {
        if (a6 >= 1350.0) {
          uint64_t v13 = 5;
        }
        else {
          uint64_t v13 = 4;
        }
      }
      else
      {
        uint64_t v13 = 3;
      }
    }
    else
    {
      uint64_t v13 = 2;
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  if (a4 >= -1350.0)
  {
    if (a4 >= -450.0)
    {
      if (a4 >= 450.0)
      {
        if (a4 >= 1350.0) {
          uint64_t v14 = 5;
        }
        else {
          uint64_t v14 = 4;
        }
      }
      else
      {
        uint64_t v14 = 3;
      }
    }
    else
    {
      uint64_t v14 = 2;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  id v20 = [NSNumber numberWithDouble:floor(a5 / 60.0) * 60.0];
  uint64_t v15 = [NSNumber numberWithDouble:floor(a3 / 60.0) * 60.0];
  id v16 = [NSNumber numberWithDouble:ceil(a6 / 60.0) * 60.0];
  double v17 = [NSNumber numberWithDouble:ceil(a4 / 60.0) * 60.0];
  if (a7 >= 0xFFFFFFFF) {
    unint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v18 = a7;
  }
  uint64_t v19 = [NSNumber numberWithUnsignedInt:v18];
  +[GEOAPPortal captureTtlHypothesisWithArrival:v13 departure:v14 ttlUiNotificationShown:v8 earliestArrivalOffset:v20 earliestDepartureOffset:v15 latestArrivalOffset:v16 latestDepartureOffset:v17 numberOfReroutes:v19];
}

+ (void)captureTimeToLeaveIntialTravelTimeEventWithTravelTime:(double)a3
{
  double v3 = a3 / 60.0;
  if (v3 >= 15.0)
  {
    if (v3 >= 30.0)
    {
      if (v3 >= 60.0)
      {
        if (v3 >= 120.0)
        {
          if (v3 >= 240.0) {
            uint64_t v4 = 6;
          }
          else {
            uint64_t v4 = 5;
          }
        }
        else
        {
          uint64_t v4 = 4;
        }
      }
      else
      {
        uint64_t v4 = 3;
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  id v5 = [NSNumber numberWithInt:v4];
  +[GEOAPPortal captureTtlInitialTimeWithTravelTime:v5];
}

+ (void)captureMapsWidgetsInteractionForType:(int)a3 endState:(int)a4 widgetSpecificObject:(id)a5 wasLocked:(BOOL)a6 startDate:(id)a7 forDuration:(double)a8
{
  BOOL v10 = a6;
  uint64_t v11 = *(void *)&a3;
  id v26 = a5;
  id v12 = a7;
  if (v12)
  {
    uint64_t v13 = [MEMORY[0x263EFF8F0] calendarWithIdentifier:*MEMORY[0x263EFF3F8]];
    uint64_t v14 = [v13 components:544 fromDate:v12];

    uint64_t v15 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v14, "hour"));
    id v16 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v14, "weekday") - 1);
  }
  else
  {
    id v16 = 0;
    uint64_t v15 = 0;
  }
  double v17 = v26;
  if (v11 == 1)
  {
    id v21 = 0;
    unint64_t v18 = 0;
    id v20 = v26;
  }
  else
  {
    unint64_t v18 = 0;
    if (v11 == 3)
    {
      id v21 = v26;
      id v20 = 0;
    }
    else
    {
      uint64_t v19 = 0;
      id v20 = 0;
      if (v11 != 2) {
        goto LABEL_11;
      }
      id v21 = 0;
      id v20 = 0;
      double v17 = v26;
      unint64_t v18 = v26;
    }
  }
  uint64_t v19 = v18;
  id v22 = v17;
  unint64_t v18 = v21;
LABEL_11:
  id v23 = [NSNumber numberWithBool:v10];
  double v24 = [NSNumber numberWithDouble:a8 * 1000.0];
  +[GEOAPPortal captureWidgetInteractionWithMapsWidgetType:v11 endState:a4 lockedMode:v23 localHour:v15 localDayOfWeek:v16 duration:v24 mapsNearbyWidget:v18 mapsTransitWidget:v19 mapsDestinationsWidget:v20];
}

+ (void)captureProactiveSuggestionInteractionForType:(int)a3 items:(id)a4 interactedWithItemIndex:(int)a5 forDuration:(double)a6
{
  uint64_t v7 = *(void *)&a5;
  uint64_t v8 = *(void *)&a3;
  id v9 = NSNumber;
  id v10 = a4;
  id v12 = [v9 numberWithInt:v7];
  uint64_t v11 = [NSNumber numberWithDouble:a6 * 1000.0];
  +[GEOAPPortal captureProactiveSuggestionWithListType:v8 interactedItemIndex:v12 duration:v11 proactiveItems:v10];
}

+ (void)captureCommuteDoomWindow:(id)a3 exitTime:(id)a4 destinations:(id)a5 reason:(int64_t)a6 networkRequests:(unint64_t)a7 alerts:(unint64_t)a8
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v40 = a3;
  id v41 = a4;
  id v10 = a5;
  id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  obuint64_t j = v10;
  uint64_t v12 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v44 != v14) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        id v17 = objc_alloc_init(MEMORY[0x263F41B98]);
        unint64_t v18 = [v16 objectForKeyedSubscript:&unk_270161A68];
        unint64_t v19 = [v18 integerValue] - 1;
        if (v19 > 3) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = dword_24FEFA770[v19];
        }
        [v17 setDestinationType:v20];

        id v21 = [v16 objectForKeyedSubscript:&unk_270161A80];
        [v21 doubleValue];
        objc_msgSend(v17, "setConfidenceScore:");

        id v22 = [v16 objectForKeyedSubscript:&unk_270161A98];
        objc_msgSend(v17, "setChosen:", objc_msgSend(v22, "BOOLValue"));

        [v11 addObject:v17];
      }
      uint64_t v13 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
    }
    while (v13);
  }

  id v23 = NSNumber;
  long long v36 = [v40 startDate];
  [v36 timeIntervalSinceReferenceDate];
  long long v33 = objc_msgSend(v23, "numberWithDouble:");
  double v24 = NSNumber;
  unint64_t v35 = [v40 endDate];
  long long v34 = [v40 startDate];
  [v35 timeIntervalSinceDate:v34];
  double v25 = objc_msgSend(v24, "numberWithDouble:");
  id v26 = NSNumber;
  id v27 = [v40 startDate];
  [v41 timeIntervalSinceDate:v27];
  uint64_t v28 = objc_msgSend(v26, "numberWithDouble:");
  if (a6 == 2) {
    uint64_t v29 = 2;
  }
  else {
    uint64_t v29 = a6 == 1;
  }
  uint64_t v30 = [NSNumber numberWithUnsignedInteger:a8];
  uint64_t v31 = [NSNumber numberWithUnsignedInteger:a7];
  id v32 = (void *)[v11 copy];
  +[GEOAPPortal captureCommuteWindowWithStartTime:v33 duration:v25 predictedExitTime:v28 endReason:v29 numberOfAlertingResponses:v30 numberOfDoomRoutingRequests:v31 predictedDestinations:v32];
}

+ (void)captureTelemetricEntityCountForEventKey:(int)a3 eventDetail:(id)a4
{
  uint64_t v4 = *(void *)&a3;
  v9[1] = *MEMORY[0x263EF8340];
  id v5 = (objc_class *)MEMORY[0x263F41C28];
  id v6 = a4;
  id v7 = objc_alloc_init(v5);
  [v7 setEventKey:v4];
  [v7 setEventDetail:v6];

  v9[0] = v7;
  uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v9 count:1];
  +[GEOAPPortal captureTelemetricWithTelemetricEntitys:v8];
}

+ (void)captureTelemetricEntityCountForEventKey:(int)a3 eventValue:(unint64_t)a4 eventDetail:(id)a5
{
  uint64_t v6 = *(void *)&a3;
  v11[1] = *MEMORY[0x263EF8340];
  id v7 = (objc_class *)MEMORY[0x263F41C28];
  id v8 = a5;
  id v9 = objc_alloc_init(v7);
  [v9 setEventKey:v6];
  [v9 setEventValue:a4];
  [v9 setEventDetail:v8];

  v11[0] = v9;
  id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v11 count:1];
  +[GEOAPPortal captureTelemetricWithTelemetricEntitys:v10];
}

+ (void)captureTableBookedEventWithSessionId:(id)a3 bookedUsingMaps:(BOOL)a4 cancelled:(BOOL)a5 viewedInProactiveTray:(BOOL)a6 tappedProactiveTrayItem:(BOOL)a7 viewedInPlacecard:(BOOL)a8 viewedDetailsInPlacecard:(BOOL)a9 isAsync:(BOOL)a10 bookedAppId:(id)a11 muid:(unint64_t)a12 called:(BOOL)a13 routed:(BOOL)a14 tappedChangeReservation:(BOOL)a15 tappedCancelReservation:(BOOL)a16
{
  BOOL v25 = a8;
  BOOL v16 = a7;
  BOOL v17 = a6;
  BOOL v18 = a5;
  BOOL v19 = a4;
  v27[1] = *MEMORY[0x263EF8340];
  id v21 = (objc_class *)MEMORY[0x263F41728];
  id v22 = a11;
  id v26 = a3;
  id v23 = objc_alloc_init(v21);
  [v23 setBookedUsingMaps:v19];
  [v23 setCancelled:v18];
  [v23 setViewedInProactiveTray:v17];
  [v23 setTappedProactiveTrayItem:v16];
  [v23 setViewedInPlacecard:v25];
  [v23 setViewedDetailsFromPlacecard:a9];
  [v23 setIsAsync:a10];
  [v23 setAppId:v22];

  if (a12) {
    [v23 setMuid:a12];
  }
  [v23 setCalled:a13];
  [v23 setRouted:a14];
  [v23 setTappedChangeReservation:a15];
  [v23 setTappedCancelReservation:a16];
  v27[0] = v23;
  double v24 = [MEMORY[0x263EFF8C0] arrayWithObjects:v27 count:1];
  +[GEOAPPortal captureTableBookedWithBookedTableSessionId:v26 bookedTables:v24];
}

+ (void)captureDirectionsWithDirectionsFeedbacks:(id)a3 finalLocation:(id)a4 arrivalLocation:(id)a5 arrivedAtDestination:(id)a6 navigationAudioFeedback:(GEONavigationAudioFeedback *)a7 durationOfTrip:(id)a8 durationInNavigationModes:(id)a9 preArrival:(id)a10 originalEta:(id)a11 isVlfImprovementUsed:(id)a12 isCoarseLocationUsed:(id)a13 acceptedCyclingWorkout:(id)a14 batteryDied:(id)a15 chargingStopAdded:(id)a16 isSiriEngaged:(id)a17 tripOrigin:(id)a18 wasBadRouteExperience:(id)a19 isBadEvExperience:(id)a20 isEvSampleTrip:(id)a21 stateOfChargeAtOrigin:(id)a22 stateOfChargeAtDestPredicted:(id)a23 stateOfChargeAtDestActual:(id)a24 stateOfChargeDiffAtDest:(id)a25 waypoints:(id)a26 evConsumptionModel:(id)a27 evChargingMode:(id)a28 isEVRoute:(BOOL)a29 activeNavMode:(int)a30 arWalkingUsedInRoutePlanning:(id)a31 arWalkingUsedInNavigation:(id)a32 voiceGuidanceLevel:(int)a33 hFPEnabled:(id)a34 isEndRouteTermination:(id)a35 isParkedCarTermination:(id)a36 isTransitionToWalkingTermination:(id)a37 isTransitionToFindmyTermination:(id)a38 parkingDetectionLocation:(id)a39 timeBetweenParkedAndArrival:(id)a40 arrivedAtDestinationCount:(id)a41 inParkingModeCount:(id)a42 isInParkingMode:(id)a43 isSuggestToWalkingTriggered:(id)a44 isTransitedToWalking:(id)a45 isSuggestToFindmyTriggered:(id)a46 isTransitedToFindmy:(id)a47
{
  id v106 = a3;
  id v75 = a4;
  id v103 = a5;
  id v109 = a6;
  id v105 = a8;
  id v102 = a9;
  id v108 = a10;
  id v104 = a11;
  id v101 = a12;
  id v100 = a13;
  id v99 = a14;
  id v98 = a15;
  id v97 = a16;
  id v96 = a17;
  id v95 = a18;
  id v76 = a19;
  id v94 = a20;
  id v93 = a21;
  id v92 = a22;
  id v74 = a23;
  id v91 = a24;
  id v90 = a25;
  id v89 = a26;
  id v88 = a27;
  id v87 = a28;
  id v86 = a31;
  id v85 = a32;
  id v84 = a34;
  id v83 = a35;
  id v82 = a36;
  id v81 = a37;
  id v80 = a38;
  id v79 = a39;
  id v78 = a40;
  id v77 = a41;
  id v50 = a42;
  id v51 = a43;
  id v52 = a44;
  id v53 = a45;
  id v54 = a46;
  id v55 = a47;
  id v56 = +[GEOAPServiceManager sharedManager];
  id v57 = v56;
  if (!a30)
  {
    [v56 reportDailyUsageCountType:167];
    int v58 = [v109 BOOLValue];
    int v59 = [v108 BOOLValue];
    if ((v58 & 1) != 0 || v59)
    {
      [v57 reportDailyUsageCountType:168];
      [v104 floatValue];
      float v61 = v60;
      [v105 floatValue];
      int v63 = v61 == 0.0 ? 0 : v58;
      if (v63 == 1 && v62 != 0.0)
      {
        double v64 = v62;
        double v65 = v61 - v64;
        double v66 = v65 / v64;
        if (v65 > 600.0 && v66 > 0.25) {
          [v57 reportDailyUsageCountType:171];
        }
        if (v65 > 300.0 && v66 > 0.15) {
          [v57 reportDailyUsageCountType:170];
        }
        if (v65 < -300.0 && v66 < -0.15) {
          [v57 reportDailyUsageCountType:172];
        }
        if (v65 < -600.0 && v66 < -0.25) {
          [v57 reportDailyUsageCountType:173];
        }
      }
    }
    if ((unint64_t)[v106 count] >= 2) {
      [v57 reportDailyUsageCountType:169];
    }
  }
  if (a29)
  {
    uint64_t v67 = v74;
    if (([v57 evDirectionsFeedbackAuth] & 1) == 0)
    {
      [v57 setEvDirectionsFeedbackAllowed:0];
      goto LABEL_33;
    }
    if ([v76 BOOLValue])
    {
      [v57 setEvDirectionsFeedbackAllowed:0];
    }
    else
    {
      int v70 = [v57 evDirectionsFeedbackAllowed];
      [v57 toggleEVDirectionsFeedbackAllowed];
      if (!v70) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t v67 = v74;
    if (([v57 directionsFeedbackAllowed] & 1) == 0)
    {
      [v57 setDirectionsFeedbackAllowed:1];
      goto LABEL_33;
    }
  }
  int v68 = a33;
  if ((a33 - 1) >= 3) {
    int v68 = 0;
  }
  long long v69 = *(_OWORD *)&a7->var9;
  long long v110 = *(_OWORD *)&a7->var0;
  v111[0] = v69;
  *(_OWORD *)((char *)v111 + 12) = *(_OWORD *)&a7->var12;
  LODWORD(v72) = v68;
  LODWORD(v71) = a30;
  +[GEOAPPortal captureDirectionsWithDirectionsFeedbacks:finalLocation:arrivalLocation:arrivedAtDestination:navigationAudioFeedback:durationOfTrip:durationInNavigationModes:preArrival:originalEta:isVlfImprovementUsed:isCoarseLocationUsed:acceptedCyclingWorkout:batteryDied:chargingStopAdded:isSiriEngaged:tripOrigin:isBadEvExperience:isEvSampleTrip:stateOfChargeAtOrigin:stateOfChargeAtDestPredicted:stateOfChargeAtDestActual:stateOfChargeDiffAtDest:waypoints:evConsumptionModel:evChargingMode:activeNavMode:arWalkingUsedInRoutePlanning:arWalkingUsedInNavigation:voiceGuidanceLevel:hFPEnabled:isEndRouteTermination:isParkedCarTermination:isTransitionToWalkingTermination:isTransitionToFindmyTermination:parkingDetectionLocation:timeBetweenParkedAndArrival:arrivedAtDestinationCount:inParkingModeCount:isInParkingMode:isSuggestToWalkingTriggered:isTransitedToWalking:isSuggestToFindmyTriggered:isTransitedToFindmy:additionalStates:providedDropRate:completionQueue:completionBlock:](GEOAPPortal, "captureDirectionsWithDirectionsFeedbacks:finalLocation:arrivalLocation:arrivedAtDestination:navigationAudioFeedback:durationOfTrip:durationInNavigationModes:preArrival:originalEta:isVlfImprovementUsed:isCoarseLocationUsed:acceptedCyclingWorkout:batteryDied:chargingStopAdded:isSiriEngaged:tripOrigin:isBadEvExperience:isEvSampleTrip:stateOfChargeAtOrigin:stateOfChargeAtDestPredicted:stateOfChargeAtDestActual:stateOfChargeDiffAtDest:waypoints:evConsumptionModel:evChargingMode:activeNavMode:arWalkingUsedInRoutePlanning:arWalkingUsedInNavigation:voiceGuidanceLevel:hFPEnabled:isEndRouteTermination:isParkedCarTermination:isTransitionToWalkingTermination:isTransitionToFindmyTermination:parkingDetectionLocation:timeBetweenParkedAndArrival:arrivedAtDestinationCount:inParkingModeCount:isInParkingMode:isSuggestToWalkingTriggered:isTransitedToWalking:isSuggestToFindmyTriggered:isTransitedToFindmy:additionalStates:providedDropRate:completionQueue:completionBlock:", v106, v75, v103, v109, &v110, v105, v102, v108, v104,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94,
    v93,
    v92,
    v67,
    v91,
    v90,
    v89,
    v88,
    v87,
    v71,
    v86,
    v85,
    v72,
    v84,
    v83,
    v82,
    v81,
    v80,
    v79,
    v78,
    v77,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    0,
    0,
    0,
    0);
LABEL_33:
}

+ (void)captureUgcDeleteWithSignature:(id)a3 certificates:(id)a4 trigger:(int)a5 queue:(id)a6 completion:(id)a7
{
  uint64_t v8 = *(void *)&a5;
  id v11 = a7;
  id v12 = a6;
  id v13 = a4;
  id v16 = a3;
  uint64_t v14 = +[GEOAPServiceManager sharedManager];
  [v14 setEvDirectionsFeedbackAllowed:0];

  uint64_t v15 = +[GEOAPServiceManager sharedManager];
  [v15 setDirectionsFeedbackAllowed:0];

  +[GEOAPPortal captureUgcDeleteLogsWithCertificates:v13 signature:v16 trigger:v8 additionalStates:0 providedDropRate:0 completionQueue:v12 completionBlock:v11];
}

+ (void)captureUgcDeleteWithSignature:(id)a3 certificates:(id)a4 queue:(id)a5 completion:(id)a6
{
}

+ (int)_eventThermalPressureFromAPThermalPressure:(int)a3
{
  if ((a3 - 1) >= 4) {
    return 0;
  }
  else {
    return a3;
  }
}

+ (int)_eventNavMapTypeFromAPNavMapType:(int)a3
{
  if ((a3 - 1) >= 3) {
    return 0;
  }
  else {
    return a3;
  }
}

+ (int)_eventNavChargingStateFromAPNavChargingState:(int)a3
{
  if ((a3 - 1) >= 3) {
    return 0;
  }
  else {
    return a3;
  }
}

+ (id)_caNavMapTypeFromAPNavMapType:(int)a3
{
  if ((a3 - 1) > 2) {
    return @"UNKNOWN";
  }
  else {
    return off_265345820[a3 - 1];
  }
}

+ (id)_caTriggerTypeFromFromAPThermalPressure:(int)a3
{
  if ((a3 - 1) > 3) {
    return @"UNKNOWN";
  }
  else {
    return off_265345838[a3 - 1];
  }
}

+ (id)_caFeatureFromAPFeature:(int)a3
{
  double v3 = @"UNKNOWN";
  if (a3 == 1) {
    double v3 = @"TREE";
  }
  if (a3 == 2) {
    return @"SHADOW";
  }
  else {
    return v3;
  }
}

+ (id)_caChargingStateFromAPChargingState:(int)a3
{
  if ((a3 - 1) > 2) {
    return @"UNKNOWN";
  }
  else {
    return off_265345858[a3 - 1];
  }
}

+ (void)captureNavThermalPressureTrigger:(int)a3 thermalPressure:(id)a4 navMapType:(int)a5 supressedFeatures:(id)a6
{
}

+ (void)captureNavThermalPressureTrigger:(int)a3 thermalPressure:(id)a4 navMapType:(int)a5 supressedFeatures:(id)a6 chargingState:(int)a7
{
  uint64_t v8 = *(void *)&a5;
  uint64_t v9 = *(void *)&a3;
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v10 = a4;
  id v11 = a6;
  int v24 = v9;
  uint64_t v12 = +[GEOAPPortal _eventThermalPressureFromAPThermalPressure:v9];
  int v25 = v8;
  +[GEOAPPortal captureNavThermalPressureWithThermalPressure:disableMapFeatures:navMapType:collectionTrigger:additionalStates:providedDropRate:completionQueue:completionBlock:](GEOAPPortal, "captureNavThermalPressureWithThermalPressure:disableMapFeatures:navMapType:collectionTrigger:additionalStates:providedDropRate:completionQueue:completionBlock:", v10, v11, +[GEOAPPortal _eventNavMapTypeFromAPNavMapType:v8], v12, 0, 0, 0, 0);
  double Current = CFAbsoluteTimeGetCurrent();
  double v14 = Current;
  if (v12 == 1)
  {
    qword_26B201B30 = *(void *)&Current;
    _MergedGlobals_7 = [v10 unsignedIntValue];
  }
  double v15 = *(double *)&qword_26B201B30;
  int v27 = [v10 intValue];
  int v16 = _MergedGlobals_7;
  _MergedGlobals_7 = [v10 unsignedIntValue];
  BOOL v17 = [MEMORY[0x263EFF980] array];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v18 = v11;
  uint64_t v19 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v36 != v21) {
          objc_enumerationMutation(v18);
        }
        id v23 = +[GEOAPPortal _caFeatureFromAPFeature:](GEOAPPortal, "_caFeatureFromAPFeature:", [*(id *)(*((void *)&v35 + 1) + 8 * i) intValue]);
        [v17 addObject:v23];
      }
      uint64_t v20 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v20);
  }

  if (v12 != 3 || v27 != v16)
  {
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 3221225472;
    void v28[2] = __115__GEOAPPortal_Extras__captureNavThermalPressureTrigger_thermalPressure_navMapType_supressedFeatures_chargingState___block_invoke;
    v28[3] = &unk_265345800;
    int v30 = v25;
    int v31 = v24;
    int v32 = v27 - v16;
    id v29 = v17;
    unsigned int v33 = (v14 - v15) / 0x3C;
    int v34 = a7;
    geoAnalyticsSendEventLazy(@"com.apple.Maps.NavThermals", v28);
  }
}

id __115__GEOAPPortal_Extras__captureNavThermalPressureTrigger_thermalPressure_navMapType_supressedFeatures_chargingState___block_invoke(uint64_t a1)
{
  v12[6] = *MEMORY[0x263EF8340];
  v11[0] = @"mapType";
  id v2 = +[GEOAPPortal _caNavMapTypeFromAPNavMapType:*(unsigned int *)(a1 + 40)];
  v12[0] = v2;
  v11[1] = @"trigger";
  double v3 = +[GEOAPPortal _caTriggerTypeFromFromAPThermalPressure:*(unsigned int *)(a1 + 44)];
  v12[1] = v3;
  void v11[2] = @"pressureDelta";
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v12[2] = v4;
  v11[3] = @"suppressedElement";
  uint64_t v5 = [*(id *)(a1 + 32) count];
  if (v5)
  {
    uint64_t v6 = [*(id *)(a1 + 32) componentsJoinedByString:@","];
  }
  else
  {
    uint64_t v6 = @"NONE";
  }
  v12[3] = v6;
  v11[4] = @"timeSinceStart";
  id v7 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)];
  v12[4] = v7;
  v11[5] = @"powerSource";
  uint64_t v8 = +[GEOAPPortal _caChargingStateFromAPChargingState:*(unsigned int *)(a1 + 56)];
  v12[5] = v8;
  uint64_t v9 = [NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:6];

  if (v5) {
  return v9;
  }
}

+ (void)_captureImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 elementType:(int)a8 isEnriched:(BOOL)a9 impressionEvent:(unsigned int)a10 impressionVisibleTimestamp:(double)a11 impressionNonvisibleTimestamp:(double)a12
{
  uint64_t v12 = *(void *)&a8;
  uint64_t v13 = *(void *)&a7;
  uint64_t v14 = *(void *)&a6;
  v58[1] = *MEMORY[0x263EF8340];
  uint64_t v19 = (objc_class *)MEMORY[0x263F41978];
  id v20 = a4;
  id v21 = a3;
  id v22 = objc_alloc_init(v19);
  [v22 setStateType:9];
  id v23 = objc_alloc_init(MEMORY[0x263F419E0]);
  [v22 setElementImpression:v23];

  int v24 = (void *)[v20 copy];
  int v25 = [v22 elementImpression];
  [v25 setQuery:v24];

  id v26 = objc_alloc_init(MEMORY[0x263F41780]);
  int v27 = [v22 elementImpression];
  [v27 setElement:v26];

  uint64_t v28 = [v22 elementImpression];
  id v29 = [v28 element];
  [v29 setBusinessId:a5];

  int v30 = [v22 elementImpression];
  int v31 = [v30 element];
  [v31 setLocalSearchProviderId:v14];

  int v32 = [v22 elementImpression];
  unsigned int v33 = [v32 element];
  [v33 setElementIndex:v13];

  int v34 = [v22 elementImpression];
  long long v35 = [v34 element];
  [v35 setElementType:v12];

  long long v36 = [v22 elementImpression];
  long long v37 = [v36 element];
  [v37 setIsEnrichedResult:a9];

  id v38 = objc_alloc_init(MEMORY[0x263F417B0]);
  id v39 = [v22 elementImpression];
  [v39 setImpressionObjectId:v38];

  uint64_t v56 = 0;
  uint64_t v57 = 0;
  [v21 getUUIDBytes:&v56];

  uint64_t v40 = v56;
  id v41 = [v22 elementImpression];
  uint64_t v42 = [v41 impressionObjectId];
  [v42 setHigh:v40];

  uint64_t v43 = v57;
  long long v44 = [v22 elementImpression];
  long long v45 = [v44 impressionObjectId];
  [v45 setLow:v43];

  if (v12)
  {
    long long v46 = [v22 elementImpression];
    if (v12 == 1)
    {
      uint64_t v47 = v46;
      uint64_t v48 = 1;
    }
    else
    {
      uint64_t v47 = v46;
      uint64_t v48 = 2;
    }
  }
  else
  {
    long long v46 = [v22 elementImpression];
    uint64_t v47 = v46;
    uint64_t v48 = 0;
  }
  [v46 setElementSource:v48];

  id v50 = [v22 elementImpression];
  id v51 = v50;
  if (a10 == 2) {
    uint64_t v49 = 2;
  }
  else {
    uint64_t v49 = a10 == 1;
  }
  [v50 setImpressEvent:v49];

  id v52 = [v22 elementImpression];
  [v52 setImpressVisibleTsInMs:(unint64_t)(a11 * 1000.0)];

  id v53 = [v22 elementImpression];
  [v53 setImpressNonvisibleTsInMs:(unint64_t)(a12 * 1000.0)];

  v58[0] = v22;
  id v54 = [MEMORY[0x263EFF8C0] arrayWithObjects:v58 count:1];
  [a1 captureImpressionEventWithAdditionalStates:v54 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)captureSearchResultImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 isEnriched:(BOOL)a8 impressionEvent:(unsigned int)a9 impressionVisibleTimestamp:(double)a10 impressionNonvisibleTimestamp:(double)a11
{
  HIDWORD(v11) = a9;
  LOBYTE(v11) = a8;
  objc_msgSend(a1, "_captureImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:elementType:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:", a3, a4, a5, *(void *)&a6, *(void *)&a7, 1, a10, a11, v11);
}

+ (void)capturePlaceCardImpressionEventWithImpressionObjectId:(id)a3 query:(id)a4 businessId:(unint64_t)a5 localSearchProviderId:(unsigned int)a6 elementIndex:(unsigned int)a7 moduleType:(int)a8 isEnriched:(BOOL)a9 impressionEvent:(unsigned int)a10 impressionVisibleTimestamp:(double)a11 impressionNonvisibleTimestamp:(double)a12
{
  if ((a8 - 1) > 0x2D) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = dword_24FEFA780[a8 - 1];
  }
  objc_msgSend(a1, "_captureImpressionEventWithImpressionObjectId:query:businessId:localSearchProviderId:elementIndex:elementType:isEnriched:impressionEvent:impressionVisibleTimestamp:impressionNonvisibleTimestamp:", a3, a4, a5, *(void *)&a6, *(void *)&a7, v12, a11, a12);
}

+ (void)captureShowcaseSuppressionEventWithBusinessId:(unint64_t)a3 localSearchProviderID:(unsigned int)a4 showcaseId:(id)a5 adamId:(id)a6 suppressionReason:(int)a7
{
  uint64_t v8 = *(void *)&a4;
  if ((a7 - 1) >= 9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a7;
  }
  uint64_t v12 = NSNumber;
  id v13 = a6;
  id v14 = a5;
  id v17 = [v12 numberWithUnsignedLongLong:a3];
  double v15 = [NSNumber numberWithUnsignedInt:v8];
  int v16 = [v13 stringValue];

  [a1 captureShowcaseSuppressionWithBusinessId:v17 localSearchProviderID:v15 showcaseId:v14 suppressionReason:v11 adamId:v16 additionalStates:0 providedDropRate:0 completionQueue:0 completionBlock:0];
}

+ (void)processMapsDeletionWithCompletionQueue:(id)a3 completion:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = +[GEOAPServiceManager sharedManager];
  [v7 processMapsDeletionWithCompletionQueue:v6 completion:v5];
}

+ (BOOL)directionsRequestDetailsAreDisabled
{
  return GEOConfigGetBOOL();
}

+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isInBasemode:(id)a26 isTourist:(id)a27 isCarplayConnected:(id)a28 isTransitPossible:(id)a29 routePlanningScreenPresented:(id)a30 userLocation:(id)a31 isVehicleBluetoothConnected:(id)a32 weatherAqi:(id)a33
{
  id v65 = a3;
  id v64 = a4;
  id v63 = a5;
  id v62 = a6;
  id v61 = a7;
  id v60 = a8;
  id v59 = a9;
  id v58 = a10;
  id v51 = a11;
  id v57 = a12;
  id v50 = a14;
  id v52 = a26;
  id v53 = a27;
  id v54 = a28;
  id v55 = a29;
  id v56 = a30;
  id v38 = a31;
  id v39 = a32;
  id v40 = a33;
  uint64_t v67 = 0;
  int v68 = &v67;
  uint64_t v69 = 0x2050000000;
  id v41 = (void *)_MergedGlobals_13;
  uint64_t v70 = _MergedGlobals_13;
  if (!_MergedGlobals_13)
  {
    v66[0] = MEMORY[0x263EF8330];
    v66[1] = 3221225472;
    v66[2] = __getPPUtilsClass_block_invoke;
    v66[3] = &unk_265345620;
    v66[4] = &v67;
    __getPPUtilsClass_block_invoke((uint64_t)v66);
    id v41 = (void *)v68[3];
  }
  id v42 = v41;
  _Block_object_dispose(&v67, 8);
  [v38 lat];
  double v44 = v43;
  [v38 lng];
  long long v46 = [v42 coordinatesToGeoHashWithLength:4 latitude:v44 longitude:v45];
  if (!GEOConfigGetBOOL()) {
    a22 = 0;
  }
  LODWORD(v49) = a25;
  LODWORD(v48) = a13;
  +[GEOAPPortal capturePredExTrainingWithChanceOfPrecipitation:chanceOfRain:chanceOfSnow:endTime:durationUntilEventEnd:durationUntilEventStart:startTime:temperature:timeOfDay:timeSinceBackgrounded:actualTransportMode:dayOfWeek:distanceFromHereToHome:distanceFromHereToOrigin:distanceFromHereToParkedCar:distanceFromHereToWork:distanceFromHere:distanceFromOriginToDestination:entryType:weatherType:mapType:predictedTransportMode:preferredTransportMode:isInBasemode:isCarplayConnected:isTourist:isTransitPossible:routePlanningScreenPresented:userLocationGeohash4:isVehicleBluetoothConnected:weatherAqi:](GEOAPPortal, "capturePredExTrainingWithChanceOfPrecipitation:chanceOfRain:chanceOfSnow:endTime:durationUntilEventEnd:durationUntilEventStart:startTime:temperature:timeOfDay:timeSinceBackgrounded:actualTransportMode:dayOfWeek:distanceFromHereToHome:distanceFromHereToOrigin:distanceFromHereToParkedCar:distanceFromHereToWork:distanceFromHere:distanceFromOriginToDestination:entryType:weatherType:mapType:predictedTransportMode:preferredTransportMode:isInBasemode:isCarplayConnected:isTourist:isTransitPossible:routePlanningScreenPresented:userLocationGeohash4:isVehicleBluetoothConnected:weatherAqi:", v65, v64, v63, v62, v61, v60, v59, v58, v51, v57, v48, v50, __PAIR64__(a16, a15),
    __PAIR64__(a18, a17),
    __PAIR64__(a20, a19),
    __PAIR64__(a22, a21),
    __PAIR64__(a24, a23),
    v49,
    v52,
    v54,
    v53,
    v55,
    v56,
    v46,
    v39,
    v40);
}

+ (void)capturePredExTrainingWithChanceOfPrecipitation:(id)a3 chanceOfRain:(id)a4 chanceOfSnow:(id)a5 endTime:(id)a6 durationUntilEventEnd:(id)a7 durationUntilEventStart:(id)a8 startTime:(id)a9 temperature:(id)a10 timeOfDay:(id)a11 timeSinceBackgrounded:(id)a12 actualTransportMode:(int)a13 dayOfWeek:(id)a14 distanceFromHereToHome:(int)a15 distanceFromHereToOrigin:(int)a16 distanceFromHereToParkedCar:(int)a17 distanceFromHereToWork:(int)a18 distanceFromHere:(int)a19 distanceFromOriginToDestination:(int)a20 entryType:(int)a21 weatherType:(int)a22 mapType:(int)a23 predictedTransportMode:(int)a24 preferredTransportMode:(int)a25 isTourist:(id)a26 isCarplayConnected:(id)a27 isTransitPossible:(id)a28 userLocation:(id)a29 isVehicleBluetoothConnected:(id)a30 weatherAqi:(id)a31
{
  LODWORD(v32) = a25;
  LODWORD(v31) = a13;
  objc_msgSend(a1, "capturePredExTrainingWithChanceOfPrecipitation:chanceOfRain:chanceOfSnow:endTime:durationUntilEventEnd:durationUntilEventStart:startTime:temperature:timeOfDay:timeSinceBackgrounded:actualTransportMode:dayOfWeek:distanceFromHereToHome:distanceFromHereToOrigin:distanceFromHereToParkedCar:distanceFromHereToWork:distanceFromHere:distanceFromOriginToDestination:entryType:weatherType:mapType:predictedTransportMode:preferredTransportMode:isInBasemode:isTourist:isCarplayConnected:isTransitPossible:routePlanningScreenPresented:userLocation:isVehicleBluetoothConnected:weatherAqi:", a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v31, a14, *(void *)&a15,
    *(void *)&a17,
    *(void *)&a19,
    *(void *)&a21,
    *(void *)&a23,
    v32,
    0,
    a26,
    a27,
    a28,
    0,
    a29,
    a30,
    a31);
}

+ (void)captureGridDuration:(double)a3 previousState:(int)a4 endState:(int)a5 displayType:(int)a6 errors:(id)a7
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v25 = a7;
  unsigned int v23 = a5;
  if (a5 == 2)
  {
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x3032000000;
    int v34 = __Block_byref_object_copy__1;
    long long v35 = __Block_byref_object_dispose__1;
    id v36 = 0;
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 3221225472;
    v30[2] = __91__GEOAPPortal_GridDuration__captureGridDuration_previousState_endState_displayType_errors___block_invoke;
    v30[3] = &unk_265349070;
    void v30[4] = &v31;
    uint64_t v9 = MEMORY[0x25337B980](v30);
    id v10 = (void *)v32[5];
    v32[5] = v9;

    uint64_t v11 = [MEMORY[0x263EFF9A0] dictionary];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v12 = v25;
    id v13 = 0;
    uint64_t v14 = [v12 countByEnumeratingWithState:&v26 objects:v37 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v27 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = (*(uint64_t (**)(void))(v32[5] + 16))();
          id v18 = [NSNumber numberWithInt:v17];
          id v19 = [v11 objectForKeyedSubscript:v18];

          if (!v19)
          {
            id v19 = objc_alloc_init(MEMORY[0x263F41848]);
            [v19 setType:v17];
            if (!v13)
            {
              id v13 = [MEMORY[0x263EFF980] array];
            }
            [v13 addObject:v19];
            id v20 = [NSNumber numberWithInt:v17];
            [v11 setObject:v19 forKeyedSubscript:v20];
          }
          objc_msgSend(v19, "setCount:", objc_msgSend(v19, "count") + 1);
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v26 objects:v37 count:16];
      }
      while (v14);
    }

    _Block_object_dispose(&v31, 8);
  }
  else
  {
    id v13 = 0;
  }
  id v21 = [NSNumber numberWithDouble:a3 * 1000.0];
  +[GEOAPPortal captureGridDurationWithDurationMs:v21 previousState:a4 endState:v23 endStateErrorReasons:v13 displayType:a6];
}

uint64_t __91__GEOAPPortal_GridDuration__captureGridDuration_previousState_endState_displayType_errors___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = [v3 domain];
  int v5 = [v4 isEqualToString:*MEMORY[0x263F08570]];

  if (!v5)
  {
    id v7 = [v3 domain];
    uint64_t v8 = GEOErrorDomain();
    int v9 = [v7 isEqualToString:v8];

    if (!v9) {
      goto LABEL_10;
    }
    uint64_t v10 = [v3 code];
    if (v10 != -9)
    {
      if (v10 != -19) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v11 = 2;
    goto LABEL_36;
  }
  uint64_t v6 = [v3 code];
  if (v6 == -1009) {
    goto LABEL_12;
  }
  if (v6 == -1005)
  {
    uint64_t v11 = 4;
    goto LABEL_36;
  }
  if (v6 != -1001)
  {
LABEL_10:
    id v12 = [v3 userInfo];
    uint64_t v13 = *MEMORY[0x263F08608];
    uint64_t v14 = [v12 objectForKeyedSubscript:*MEMORY[0x263F08608]];

    if (v14)
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      int v16 = [v3 userInfo];
      uint64_t v17 = [v16 objectForKeyedSubscript:v13];
      uint64_t v11 = (*(uint64_t (**)(uint64_t, void *))(v15 + 16))(v15, v17);

      goto LABEL_36;
    }
    id v18 = [v3 userInfo];
    uint64_t v19 = *MEMORY[0x263F416A8];
    id v20 = [v18 objectForKeyedSubscript:*MEMORY[0x263F416A8]];

    if (v20)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v21 = [v3 userInfo];
      id v22 = [v21 objectForKeyedSubscript:v19];

      uint64_t v23 = [v22 countByEnumeratingWithState:&v40 objects:v45 count:16];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v41;
LABEL_16:
        uint64_t v26 = 0;
        while (1)
        {
          if (*(void *)v41 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))();
          if (v27 != 1) {
            break;
          }
          if (v24 == ++v26)
          {
            uint64_t v24 = [v22 countByEnumeratingWithState:&v40 objects:v45 count:16];
            if (v24) {
              goto LABEL_16;
            }
            goto LABEL_33;
          }
        }
LABEL_34:
        uint64_t v11 = v27;
        goto LABEL_35;
      }
    }
    else
    {
      long long v28 = [v3 userInfo];
      long long v29 = [v28 objectForKeyedSubscript:@"UnderlyingErrors"];

      if (!v29)
      {
        uint64_t v11 = 1;
        goto LABEL_36;
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      int v30 = objc_msgSend(v3, "userInfo", 0);
      id v22 = [v30 objectForKeyedSubscript:@"UnderlyingErrors"];

      uint64_t v31 = [v22 countByEnumeratingWithState:&v36 objects:v44 count:16];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = *(void *)v37;
LABEL_27:
        uint64_t v34 = 0;
        while (1)
        {
          if (*(void *)v37 != v33) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))();
          if (v27 != 1) {
            goto LABEL_34;
          }
          if (v32 == ++v34)
          {
            uint64_t v32 = [v22 countByEnumeratingWithState:&v36 objects:v44 count:16];
            if (v32) {
              goto LABEL_27;
            }
            break;
          }
        }
      }
    }
LABEL_33:
    uint64_t v11 = 1;
LABEL_35:

    goto LABEL_36;
  }
LABEL_9:
  uint64_t v11 = 3;
LABEL_36:

  return v11;
}

@end